/** 
 * @file BusinessComponentsCSO.nps
 * @brief This NPS file implements CSO Business Componentes .
 *
 * Copyright (C) 2011 McDonalds Corp. All rights reserved. 
 *
 * $Source: /NewPOS/SRC/npkiosk/cvs/npkiosk/PosData/nps/CSL_CSO.nps,v $
 * $Revision: 1.278 $
 * $Date: 2013/09/17 13:53:46 $ (of revision)
 * $Author: vdobroff $ (of revision)
 */
 
/* Variable used for version control */
CSL_CSO_VERSION = "https://svn.veretysoftware.com/svn/scm_newpos/global/signed/6.1.17/nps:2666";
//logs the version
API.dbg("***************C S L   V E R S I O N***************"); 
API.dbg("FILE                           VERSION");
API.dbg("CSL_CSO.nps                    " + CSL_CSO_VERSION);
API.dbg("***************************************************");

const GLOBAL_UTF8_PROLOG_XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";		// UTF-8 prolog for the exchanged XML messages
const REASON_OK=0;
const REASON_NOTYET=1;
const REASON_EXPIRED=2;
const REASON_INVALIDDATE=3;
// NPS-13932 - NGK 5.7.4 - HM Toy still salable, even if the parameter removeFromMOT is true - ACSI2149144
const CSOLOG_INFORMATION = "Information";
const CSOLOG_WARNING = "Warning";
const CSOLOG_ERROR = "Error";
const CSOLOG_FATAL = "Fatal";
const CSOLOG_DEBUG = "Debug";

// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
//SQC-9932 - Environment NGK_v5.1600.4.0 is not working.
const AUTOEVM_TYPE_COMPOSITION=1;
const AUTOEVM_TYPE_CHOICE=2;

const DEFAULT_KEYBOARD_SIZE=4;
var hlp = new BusinessObjectHelper();

var csoProductInfo = new Array();
var csoCCMInfo = new Array();
var csoConfigurationInfo = new Array();
var csoScreenInfo = new Array();
var csoScreenProducts = new Array();
var csoCurrentState = new Array();
var csoScreensVisited = new Array();
var csoLocalPromotions = new Array();
var csoAllergenInfo = {};

//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
var csoBarcodeLocalPromotions = new Array();
var csoItemGroupManager = new ItemGroupManager();
var csoLocalPromoBarcodesInUse = [];
// EQA-955 - [November Release][6.1.21RC13HF1][SL 2.80.02a][Local Promotions][Lab 05][FR] Local Promotion coupon products being charged at regular price 
var csoLocalPromoBarcodesDiscounts = [];
// SQC-3994 - CSO - Local French Promotion - Promotion title does not show up in the order basket for promotions with only one item
//var csoSingleItemPromotions = new Array();

//NPS-10573: Progress Images only displayed for ChoiceGroup SIDE - ACSI0813953
var csoChoiceSelectionStack = new Array();

//SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
var csoSuggestivePromotions = new Array();
var csoSelectedMainMenu = { screenNumber:0, buttonNumber:0 };

//NPS-11501 DA - NP6.1.21RC8-HF6 - FR-LocalPromo-Pilot#2: kiosks slowness - ACSI1268215 
var csoOutageXml = null;

//SDO-7084 - [Lab02][July Bundle][NewPOS 6.1.19 RC18 HF5] Kiosk v4 RC 10 HF1 - Grill screen logic: Removing ice from the second drink selection actually removes it from the first 
var csoGrillOrder;

//SDO-7129 - Kiosk V4RC12 - Incorrect gril behavior
var csoBasketOrder;

//SQC-5201 - NGK v5.3 - Table Service Support default button and text colors are different from the specification
var csoColorInfo = new Array();

//SDO-8858: [NP6.1.23 RC5 QR2][Lab 02][UK] - Changing Choice group from mains to sides resolves EQA-1350
var displayAllSubChoicesAsStepsOnVML = lGetCSOUserInterfaceStringParameter("displayAllSubChoicesAsStepsOnVML", "false").toLowerCase();

var ngkScreenInfo = new Array();

// CSO-282 - CYT Redesign - 8024409
var csoCYTProducts = new Array();

// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
// SQC-7599 - [NGK 5.12] US Nutrition Enhancement - CSL_CSO error is displayed when I try access some buttons of the carousel
var csoLoadCustomEnergyInformation = lGetParameterStr("nutritionalInformation.layoutMode", "").toUpperCase() == "US" ? "US" : "";
var csoIsCustomerSelfPour = lGetParameterStr("nutritionalInformation.isCustomerSelfPour", "FALSE").toUpperCase();

// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
var csoEnableAllergensEnhancement = lGetCSOUserInterfaceStringParameter("allergens.enableSignal", "false").toLowerCase();

// CSO-997 - [6.1.29-SP8][GQT][COE] Cannot change the quantities of the order item after you remove the promotion 'Mac Pick 2 for 5$', also wrong message pops-up showing 'offer' instead of 'promotion', when you make order on KIOSK.
var WorkflowsToDiscardViewUpdate = [ "WF_NGK_START_UPDATE_CHOICE_VML", "WF_NGK_RemoveItem", "WF_NGK_IncreaseQuantity", "WF_NGK_IncreaseItemGroupQuantity", "WF_NGK_DecreaseQuantity", "WF_NGK_RemovePromotion", "WF_NGK_RemoveOffer"];

// CSD-51 - FR3 - Scanning and processing a barcode immediately
const CSO_UNGATED_SCAN_TYPE_MOBILE_ORDER="MOBILE";
const CSO_UNGATED_SCAN_TYPE_DIGITAL_OFFER="OFFER";
const CSO_UNGATED_SCAN_TYPE_PUNCH_CARD="OFFER";
const CSO_UNGATED_SCAN_TYPE_RFM_COUPON="RFMCOUPON";
//NPS-23233 - POS-457 - Ungated Scan - Active Offers and Promotions (Link to NMR-20)
const CSO_UNGATED_SCAN_TYPE_GLOBAL_PROMOTIONS="PROMOTIONCOUPON";
// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
const CSO_UNGATED_SCAN_TYPE_MONOPOLY_PRIZE="MONOPOLY";
const BARCODE_MONOPOLY_MIN_SIZE = 10;
const BARCODE_MONOPOLY_MAX_SIZE = 15;
const MONOPOLY_ACTION_ADD   = "Add";
const MONOPOLY_ACTION_CLEAR = "ClearAll";
// CSO-1192 - POS-430 - Kiosk - Ability to Treat Smart Routed Products as Regular Products for Ordering
var csoUseCYTAsRegular = lGetParameterStr("enableCYTProductsAsRegularProducts", "false").toLowerCase() === "true";

/* CSO-1193 - POS-471 - Order Review Nutrition Enhancement (Linked to NMR-316) */
var mustDisplayItemCalorieOnTheOrderReview = true;

// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
var csoCalculateEnergyInformation = false;
var csoCalculateEnergyRecalculateEnergyOnGrill = true;
if(csoLoadCustomEnergyInformation == "US")
{
    /* CSO-1193 - POS-471 - Order Review Nutrition Enhancement (Linked to NMR-316) */
    var mustDisplayItemCalorieOnTheOrderReview = lGetParameterStr("orderReviewNutritionDisplayItemCalorie", "true").toLowerCase() === "false" ? false : true;
    
	csoCalculateEnergyInformation = lGetParameterStr("nutritionalInformation.calculateEnergy", "false").toUpperCase() == "TRUE" ? true : false;
	if (csoCalculateEnergyInformation)
	{
		csoCalculateEnergyRecalculateEnergyOnGrill = lGetParameterStr("nutritionalInformation.recalculateEnergyOnGrill", "true").toUpperCase() == "FALSE" ? false : true;
	}
}
else
{
	var localCalculateEnergyInformation = lGetParameterStr("nutritionalInformation.calculateEnergy", "false").toUpperCase() == "TRUE" ? true : false;
	if(localCalculateEnergyInformation)
	{
		if (typeof API.logInfo == 'function')
		{ 
			API.logInfo(18435, "The nutritionalInformation.calculateEnergy parameter is true, however, the nutritionalInformation.layoutMode parameter is not US, for this reason, the nutritionalInformation.calculateEnergy parameter was cosidered as false.");
		}
		else{
			API.dbg("Type: " + CSOLOG_INFORMATION + " | Register: " + 18435 + " | Message: The nutritionalInformation.calculateEnergy parameter is true, however, the nutritionalInformation.layoutMode parameter is not US, for this reason, the nutritionalInformation.calculateEnergy parameter was cosidered as false.");
		}
	}
}

var orderFormatter = function() {

	return {
		formatSaleType : function(saleTypeCode){
			switch(saleTypeCode) {
				case 0:
					return "EATIN";
				case 1:
					return "TAKEOUT";
			}
		},
		formatWeekDay : function(weekDayCode){
			switch(weekDayCode) {
				case 0:
					return "SUN";
				case 1:
					return "MON";
				case 2:
					return "TUE";
				case 3:
					return "WED";
				case 4:
					return "THU";
				case 5:
					return "FRI";
				case 6:
					return "SAT";
			}
		},
		formatDate : function(date, withoutYear){
			var day = ("0" + date.getDate()).slice(-2);
			var month = ("0" + (date.getMonth() + 1)).slice(-2);
			var year = date.getFullYear();
			
			// CSO-328 - NGK Date-specific Override of Working Hours - 7977439
			return withoutYear ? month + day : year + month + day;
		},
		formatTime : function(date){
			var hours = ("0" + date.getHours()).slice(-2);
			var minutes = ("0" + date.getMinutes()).slice(-2);
			
			return hours + minutes;
		}
	};
};

//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
var barcodeLocalPromotionValidator = function() {

	var promotion;
	var order;
	
	var isAccessAmountValid = function(){
		if (promotion.@accessAmount == undefined) return true;
	
		var promotionAccessAmount = parseFloat(promotion.@accessAmount.toString());
		
		return order.amount >= promotionAccessAmount;
	};
	
	var isDayPartValid = function(){
		if (promotion.@dayPart == undefined) return true;
	
		var promotionDayPart = promotion.@dayPart.toString();
		var currentDayPart;
		
		for each (var dayPart in csoConfigurationInfo.dayParts) {
			if (dayPart.name === promotionDayPart){
				currentDayPart = dayPart.weekDays[order.weekDay];
				
				return order.time >= currentDayPart.startTime && order.time <= currentDayPart.endTime;
			}
		}
		return true;
	};
	
	return {
		validate: function(promotionProperties, orderProperties){
			try{
				promotion = promotionProperties.xmlNode;
				order = orderProperties;

				return isDayPartValid() && isAccessAmountValid();
			}
			catch(ex){
				API.dbg("barcodeLocalPromotionValidator.validate() failed, due to: " + ex);
				return false;
			}
		}
	};
};

//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
var barcodeLocalPromotionRedeemValidator = function() {
	var promotion;
	var order;
	
	var isUtilizationAmountValid = function(){
		if (promotion.@utilizationAmount == undefined) return true;
	
		var promotionUtilizationAmount = parseFloat(promotion.@utilizationAmount.toString());
		
		return order.amount >= promotionUtilizationAmount;
	};
	
	var hasPromotionDateBegun = function(){
		if (promotion.@startDate == undefined) return true;
		
		var promotionStartDate = promotion.@startDate.toString();

		return order.startDate >= promotionStartDate;
	};
	
	var hasNotPromotionDateEnded = function(){
		if (promotion.@endDate == undefined) return true;
		
		var promotionEndDate = promotion.@endDate.toString();
		
		return order.endDate <= promotionEndDate;
	};
	
	var getDateErrorMessage = function(){
		var promotionStartDate = API.formatDate(promotion.@startDate.toString(), csoConfigurationInfo.dateFormat);
		var promotionEndDate = API.formatDate(promotion.@endDate.toString(), csoConfigurationInfo.dateFormat);
		
		return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_TIMEFRAME", promotionStartDate, promotionEndDate);
	};
	
	var getUtilizationAmountErrorMessage = function(){
		var decimalSeparator = csoConfigurationInfo.currency.decimalSeparator;
		var thousandSeparator = csoConfigurationInfo.currency.thousandSeparator;
		var currencyDecimals = csoConfigurationInfo.currency.decimalsCount;
		
		if (decimalSeparator == null || thousandSeparator == null || currencyDecimals == null ||
			decimalSeparator == "" || thousandSeparator == "" || currencyDecimals == "")
			return null;
	
		var currencyMask = "###" + thousandSeparator + "###" + thousandSeparator +
						   "##0" + decimalSeparator + lStringReplicate("0", currencyDecimals);
		var currencySymbol = csoConfigurationInfo.currency.symbol;
		
		var promotionMinimumAmount = currencySymbol + " " +
									 sFormatCurrency(currencyMask, promotion.@utilizationAmount.toString());
		var currentAmount = currencySymbol + " " + sFormatCurrency(currencyMask, order.amount.toString());
		
		return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_MINIMUM_AMOUNT", promotionMinimumAmount, currentAmount);
	};
	
	return {
		validate: function(promotionProperties, orderProperties){
			promotion = promotionProperties;
			order = orderProperties;

			return {
				dateValidation:						{ isValid: (hasPromotionDateBegun() && hasNotPromotionDateEnded()), errorMessage: getDateErrorMessage() },
				utilizationAmountValidation:		{ isValid: isUtilizationAmountValid(), errorMessage: getUtilizationAmountErrorMessage() }
			};
		}
	};
};

var localPromotionValidator = function() {

	var promotionProperties;
	var order;
	
	var requiresSaleTypeValidation = function(){
		return (promotionProperties.Parameter.(@name == "SaleType") != undefined);
	};
	
	var requiresWeekDayValidation = function(){
		return (promotionProperties.Parameter.(@name == "WeekDays") != undefined);
	};
	
	var requiresStartDateValidation = function(){
		return (promotionProperties.Parameter.(@name == "StartDate") != undefined);
	};
	
	var requiresEndDateValidation = function(){
		return (promotionProperties.Parameter.(@name == "EndDate") != undefined);
	};
	
	var requiresStartTimeValidation = function(){
		return (promotionProperties.Parameter.(@name == "StartHour") != undefined);
	};
	
	var requiresEndTimeValidation = function(){
		return (promotionProperties.Parameter.(@name == "EndHour") != undefined);
	};
	
	var requiresMinimumAmountValidation = function(){
		return (promotionProperties.Parameter.(@name == "MinimumAmount") != undefined);
	};
	
	var requiresPurchase = function(){
		return (promotionProperties.Parameter.(@name == "PurchaseRequired").@value.toString() === "TRUE");
	};
	
	var isSaleTypeValid = function(){
		if (!requiresSaleTypeValidation()) return true;
		
		var promotionSaleType = promotionProperties.Parameter.(@name == "SaleType").@value.toString();
	
		return promotionSaleType === "BOTH" || order.saleType === promotionSaleType;
	};
	
	var isWeekDayValid = function(){
		if (!requiresWeekDayValidation()) return true;
		
		var promotionWeekDays = promotionProperties.Parameter.(@name == "WeekDays").@value.toString();

		return promotionWeekDays.indexOf(order.weekDay) > -1;
	};
	
	var hasPromotionDateBegun = function(){
		if (!requiresStartDateValidation()) return true;
		
		var promotionStartDate = promotionProperties.Parameter.(@name == "StartDate").@value.toString();

		return order.startDate >= promotionStartDate;
	};
	
	var hasNotPromotionDateEnded = function(){
		if (!requiresEndDateValidation()) return true;
		
		var promotionEndDate = promotionProperties.Parameter.(@name == "EndDate").@value.toString();
		
		return order.endDate <= promotionEndDate;
	};
	
	var hasPromotionTimeBegun = function(){
		if (!requiresStartTimeValidation()) return true;
	
		var promotionStartTime = (promotionProperties.Parameter.(@name == "StartHour").@value.toString() + "00").slice(0, 6);
		
		return order.time >= promotionStartTime;
	};
	
	var hasNotPromotionTimeEnded = function(){
		if (!requiresEndTimeValidation()) return true;
	
		var promotionEndTime = (promotionProperties.Parameter.(@name == "EndHour").@value.toString() + "00").slice(0, 6);
		
		return order.time <= promotionEndTime;
	};
	
	var isMinimumAmountValid = function(){
		if (!requiresMinimumAmountValidation()) return true;
	
		var promotionMinimumAmount = parseFloat(promotionProperties.Parameter.(@name == "MinimumAmount").@value.toString());
		
		return order.amount >= promotionMinimumAmount;
	};
	
	var isPurchaseRequirementValid = function(){
		return !requiresPurchase() || order.hasPurchaseMade;
	};
	
	var getSaleTypeErrorMessage = function(){
		var promotionSaleType = promotionProperties.Parameter.(@name == "SaleType").@value.toString();
		
		if (promotionSaleType == "EATIN") {
			return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_EAT_IN_ONLY");
		}
		
		if (promotionSaleType == "TAKEOUT") {
			return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_TAKE_OUT_ONLY");
		}
		
		return "";
	};
	
	var getWeekDayErrorMessage = function(){
		var promotionWeekDays = promotionProperties.Parameter.(@name == "WeekDays").@value.toString().split("|");
		var weekDaysString = "";
		
		for (var i = 0; i < promotionWeekDays.length; i++) {
			if (i != 0) {
				weekDaysString = weekDaysString + ", ";
			}
			
			weekDaysString = weekDaysString + PosCSOI18nGetMessageJS("CSO_LOCALPROMO_" + promotionWeekDays[i]);
		}
		
		return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_VALID_DAYS", weekDaysString);
	};
	
	var getDateErrorMessage = function(){
		var promotionStartDate = API.formatDate(promotionProperties.Parameter.(@name == "StartDate").@value.toString(), csoConfigurationInfo.dateFormat);
		var promotionEndDate = API.formatDate(promotionProperties.Parameter.(@name == "EndDate").@value.toString(), csoConfigurationInfo.dateFormat);
		
		return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_TIMEFRAME", promotionStartDate, promotionEndDate);
	};
	
	var getTimeErrorMessage = function(){
		if (sessionSale.get("IS_NGK") == "true")
		{
			//EQA-530 - Kiosk not disabling local promotions outside of configured start/end times
			//The code below has been removed because the NewPos API.formatTime function may format the values incorrectly (for example 1200 converted to 00:00).
			//TODO NGK: Check if the fix should be applied in Kiosk V4
			//var promotionStartTime = API.formatTime(promotionProperties.Parameter.(@name == "StartHour").@value.toString() + "00",
			//										csoConfigurationInfo.timeFormat.replace(":ss", ""));
			//var promotionEndTime = API.formatTime(promotionProperties.Parameter.(@name == "EndHour").@value.toString() + "00",
			//									  csoConfigurationInfo.timeFormat.replace(":ss", ""));
			var promotionStartTime = lFormatTime(promotionProperties.Parameter.(@name == "StartHour").@value.toString());
			var promotionEndTime = lFormatTime(promotionProperties.Parameter.(@name == "EndHour").@value.toString());
		
			return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_TIMEFRAME", promotionStartTime, promotionEndTime);
		}
		else
		{
			var promotionStartTime = API.formatTime(promotionProperties.Parameter.(@name == "StartHour").@value.toString() + "00",
													csoConfigurationInfo.timeFormat.replace(":ss", ""));
			var promotionEndTime = API.formatTime(promotionProperties.Parameter.(@name == "EndHour").@value.toString() + "00",
												  csoConfigurationInfo.timeFormat.replace(":ss", ""));
		
			return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_TIMEFRAME", promotionStartTime, promotionEndTime);
		}
		
		//Added for NGK
		function lFormatTime(timeString)
		{
			if (timeString)
			{
				var hoursString = timeString.substr(0,2);
				var minutesString = timeString.substr(2,2);
				
				if (hoursString && minutesString)
				{
					try
					{
						var hours = Number(hoursString);
						var minutes = Number(minutesString);
						
						var result = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes);
						
						return result;
					}
					catch(ex)
					{
						API.dbg("lFormatTime exception: " + ex);
					}
				}

			}
			
			return "";
		}
		
	};
	
	var getMinimumAmountErrorMessage = function(){
		var decimalSeparator = csoConfigurationInfo.currency.decimalSeparator;
		var thousandSeparator = csoConfigurationInfo.currency.thousandSeparator;
		var currencyDecimals = csoConfigurationInfo.currency.decimalsCount;
		
		if (decimalSeparator == null || thousandSeparator == null || currencyDecimals == null ||
			decimalSeparator == "" || thousandSeparator == "" || currencyDecimals == "")
			return null;
	
		var currencyMask = "###" + thousandSeparator + "###" + thousandSeparator +
						   "##0" + decimalSeparator + lStringReplicate("0", currencyDecimals);
		var currencySymbol = csoConfigurationInfo.currency.symbol;
		
		var promotionMinimumAmount = currencySymbol + " " +
									 sFormatCurrency(currencyMask, promotionProperties.Parameter.(@name == "MinimumAmount").@value.toString());
		var currentAmount = currencySymbol + " " + sFormatCurrency(currencyMask, order.amount.toString());
		
		return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_MINIMUM_AMOUNT", promotionMinimumAmount, currentAmount);
	};
	
	var getPruchaseRequirementErrorMessage = function(){
		return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_PRUCHASE_REQUIRED");
	};
	
	//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
	var requiresGlobalLimitValidation = function(){
		return promotionProperties.Parameter.(@name == "IsQuantityUnlimited") == undefined
			|| promotionProperties.Parameter.(@name == "IsQuantityUnlimited").@value.toString().toLowerCase() != "true";
	}
	
	//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
	var requiresPromotionLimitValidation = function(){
		return (promotionProperties.Parameter.(@name == "IsQuantityUnlimited") == undefined
			|| promotionProperties.Parameter.(@name == "IsQuantityUnlimited").@value.toString().toLowerCase() != "true")
			&& (promotionProperties.Parameter.(@name == "QuantityLimit") != undefined
			&& isPositiveInt(promotionProperties.Parameter.(@name == "QuantityLimit").@value.toString()));
	}

	//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
	var getPromotionProperties = function(promotion){
		return promotion
				.Configuration.(@type == "Properties")
				.Section.(@name == "Properties");
	}
	
	return {
		//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
		hasReachedGlobalLimit: function(promotion){
			promotionProperties = getPromotionProperties(promotion);

			if (!requiresGlobalLimitValidation()) return false;
			
			var globalLimit = Number(lGetParameterStr("localPromoMaxNumber", "1"));
			var quantityOfPromotionsInTheBasket = getQuantityOfPromotionInTheBasket();

			return quantityOfPromotionsInTheBasket >= globalLimit;
		},
		//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
		hasReachedPromotionLimit: function(promotion){
			promotionProperties = getPromotionProperties(promotion);
		
			if (!requiresPromotionLimitValidation()) return false;
		
			var promotionLimit = parseInt(promotionProperties.Parameter.(@name == "QuantityLimit").@value.toString());
			var quantityOfPromotionsInTheBasket = getQuantityOfPromotionInTheBasket(false, promotion.@id);

			return quantityOfPromotionsInTheBasket >= promotionLimit;
		},
		
		validate: function(promotion, orderProperties){
			promotionProperties = promotion
							.xmlNode
							.Configuration.(@type == "Properties")
							.Section.(@name == "Properties");

			order = orderProperties;

			return {
				saleTypeValidation:				{ isValid: isSaleTypeValid(), errorMessage: getSaleTypeErrorMessage() },
				weekDayValidation: 				{ isValid: isWeekDayValid(), errorMessage: getWeekDayErrorMessage() },
				dateValidation:					{ isValid: (hasPromotionDateBegun() && hasNotPromotionDateEnded()), errorMessage: getDateErrorMessage() },
				timeValidation:					{ isValid: (hasPromotionTimeBegun() && hasNotPromotionTimeEnded()), errorMessage: getTimeErrorMessage() },
				minimumAmountValidation:		{ isValid: isMinimumAmountValid(), errorMessage: getMinimumAmountErrorMessage() },
				purchaseRequirementValidation:	{ isValid: isPurchaseRequirementValid(), errorMessage: getPruchaseRequirementErrorMessage() }
			};
		},
	};
};

/**
 * @brief - Count the occurrences of the product in the BYBAutoSelection parameter (pre built list)
 * @param - preBuiltList - list of default components of pre built v1
 * @param - prodCode - product code
 * @return - number of occurences
 * @author - MY
 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 */
function lCountPreBuilt(preBuiltList, prodCode) {
	var retVal=0;
	for each(var comp in preBuiltList) {
		if(comp==prodCode) {
			retVal++;
		}
	}
	return retVal;
}

/**
 * @brief - Look for allergen item in all components and sub components of the product. 
 *          Choices are not considered as part of the product. They will be handled in the value meal loop.
 * @param - productAllergensList - list of allergic items already found.
 * @param - productCode - csoProductInfo data of the main product
 * @param - selectedAllergensList - allergen list signalled by the customer
 * @param - isGrill - if false will ignore all components with default qty zero. In grill mode, consider all components
 * @param - removeDuplicates - remove duplicates
 * @param - fromCart - ignore BYBAutoSelection if prebuilt
 * @param - showAll - ignore selectedAllergensList filter and show all allergens (optional)
 * @return - list of allergen items
 * @author - MY
 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 */
function lFindAllergens(productAllergensList, productCode, selectedAllergensList, isGrill, removeDuplicates, fromCart, showAll) {
	if(("true"!=csoEnableAllergensEnhancement)||(PosCSOCheckSharedContext("NGK_LAYOUT", "16X9"))) {
		API.dbg("[lFindAllergens] allergens.enableSignal is disable");
		return (productAllergensList);
	}

	var productInfo=csoProductInfo[productCode];
	
	if(!showAll) {
		// default value
		showAll=false;
	}

	
	if((productInfo)&&(productInfo.xmlNode.@statusCode == "ACTIVE")) {

		if(null!=productInfo.allergens) {
			for each(var itemAllergen in productInfo.allergens) {
				itemAllergen = itemAllergen.toUpperCase();
				var alreadyExist=false;
				if(removeDuplicates) {
					// test for duplicates
					for each(var productAllergen in productAllergensList) {
						if(itemAllergen==productAllergen) {
							// item already in list
							alreadyExist=true;
							break;
						}
					}
				}
				if(alreadyExist) {
					continue;
				}
				if(showAll) {
					productAllergensList.push(itemAllergen);
				}
				else {
					for each(var customerAllergen in selectedAllergensList) {
						if(itemAllergen==customerAllergen.toUpperCase()) {
							productAllergensList.push(customerAllergen);
							break;
						}
					}
				}
			}
		}
		
		// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
		// pre built composition is set as custom parameter 
		// f.i. <Parameter name="BYBAutoSelection" value="99900042|99900035|99900030|99900026|99900024|99900022"/>
		var preBuiltList=[];
		
		// CSO-1192 - POS-430 - Kiosk - Ability to Treat Smart Routed Products as Regular Products for Ordering
		if(csoUseCYTAsRegular) 
		{
			if((!fromCart)&&(productInfo.xmlNode.CustomParameters.Parameter.(@name=="BYBType").@value.toUpperCase()=="PRE_BUILT")) {
				var preBuiltAutoSelection=productInfo.xmlNode.CustomParameters.Parameter.(@name=="BYBAutoSelection");
				if(preBuiltAutoSelection) {
					preBuiltList=preBuiltAutoSelection.@value.split('|');
				}
			}
		}
		
		for each(var comp in productInfo.xmlNode.Composition.Component) {
			// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
			// item in prebuilt list is the same as having default qty > 0
			if(((isGrill && comp.MinQuantity > 0)||(!isGrill && (comp.DefaultQuantity+lCountPreBuilt(preBuiltList, comp.ProductCode))>0)) && (comp.ProductCode)) {
				productAllergensList=lFindAllergens(productAllergensList, comp.ProductCode.toString(), selectedAllergensList, isGrill, removeDuplicates, fromCart, showAll);
			}
		}
		for each(var comp in productInfo.xmlNode.CanAdds.Component) {
			// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
			// item in prebuilt list is the same as having default qty > 0
			if(((isGrill && comp.MinQuantity > 0)||(!isGrill && (comp.DefaultQuantity+lCountPreBuilt(preBuiltList, comp.ProductCode))>0)) && (comp.ProductCode)) {
				productAllergensList=lFindAllergens(productAllergensList, comp.ProductCode.toString(), selectedAllergensList, isGrill, removeDuplicates, fromCart, showAll);
			}
		}
	}
	return (productAllergensList);
}

/**
 * @brief - Look for allergen items signalled by customer in all components /choices of the item in cart
 * @param - productAllergensList - list of allergic items already found.
 * @param - selectedAllergensList - allergen list signalled by the customer
 * @param - currentItem - current item in view
 * @param - itemViewList - list of itemview from view.xml
 * @param - showAll - ignore selectedAllergensList filter and show all allergens
 * @param - includeChoices - include choices allegens for the main item
 * @return - list of allergen items
 * @author - MY
 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 */
function lFindAllergensInCart(selectedAllergensList, currentIndex, itemViewList, showAll, includeChoices) {
	if(("true"!=csoEnableAllergensEnhancement)||(PosCSOCheckSharedContext("NGK_LAYOUT", "16X9"))) {
		API.dbg("[lFindAllergensInCart] allergens.enableSignal is disable");
		return ([]);
	}
	
	if(!showAll) {
		// default value
		showAll=false;
	}

	API.dbg("[lFindAllergensInCart] currentIndex ["+currentIndex+"] showAll["+showAll+"] includeChoices["+includeChoices+"]");

	if(currentIndex>=itemViewList.length()) {
		API.dbg("lFindAllergensInCart - Index ["+currentIndex+"] out of bounds. Max["+itemViewList.length()+"]");
		return ([]);
	}
	var currentItem=itemViewList[currentIndex];
	var currentLevel=currentItem.level;
	var mainProdInfo=csoProductInfo[currentItem.productCode.toString()];

	// grab the complete list of allergens with duplication
	var mainAllergensList=[];
	// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
	// in this case 
	mainAllergensList=lFindAllergens(mainAllergensList, currentItem.productCode, selectedAllergensList, false, true, !showAll, showAll);
	for (var iIndex=currentIndex+1; iIndex < itemViewList.length();iIndex++) {
		var itItemView=itemViewList[iIndex];
		if(currentLevel>=itItemView.level) {
			// end of current item
			break;
		}
		if("true"==itItemView.isGrillLine) {
			// check if grill item was completely removed
			var grillQty=Number(itItemView.quantity); 
			var defQty=Number(itItemView.componentDefaultQtd);
			// if showAll is true include even allergens of removed components.
			if((defQty>0)&&(0==grillQty+defQty)&&(!showAll)) {
				var grillAllergensList=[];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				grillAllergensList=lFindAllergens(grillAllergensList, itItemView.productCode, selectedAllergensList, false, true, true, showAll);
				// check if has allergen items that can be removed from item and remove from productAllergensList
				for(var grillIndex=0; grillIndex<grillAllergensList.length; grillIndex++) {
					for(var iCount=mainAllergensList.length; iCount--; ) {
						if(grillAllergensList[grillIndex]==mainAllergensList[iCount]) {
							// remove
							mainAllergensList.splice(iCount, 1);
						}
					}
				}
			}
			if((grillQty>0)&&(0==defQty)) {
				// added CANADD
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				mainAllergensList=lFindAllergens(mainAllergensList, itItemView.productCode, selectedAllergensList, false, true, true, showAll);
			}
		}
		else {
			// if item is not part of component list or default qty is zero need to check if have to add allergens
			// IMPORTANT: there will be a problem if a product is part of the composition and it also can solve a choice
			var prodAction=Number(itItemView.prodAction);
			if((currentItem.quantity>0)&&((includeChoices&&(3==prodAction))||(1==prodAction))) {
				var retVal=lFindAllergensInCart(selectedAllergensList, iIndex, itemViewList, showAll, includeChoices);
				if(retVal.length>0) {
					mainAllergensList=mainAllergensList.concat(retVal);
				}
			}
		}
	}
	if(mainAllergensList.length>0) {
		API.dbg("product["+currentItem.productCode+"] Index["+currentIndex+"] mainAllergensList ["+mainAllergensList.join('|')+"]");
	}
	return (mainAllergensList);
}

/**
 * @brief - Remove duplicates from the list
 * @param - mainAllergensList - list of allergen items with duplicated entries
 * @return - list of allergen items without duplicated entries
 * @author - MY
 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 */
function lRemoveDuplicatedAllergens(mainAllergensList) {
	var newList=[];
	for each (var item in mainAllergensList) {
		var bFound=false;
		for each (var newItem in newList) {
			if(item==newItem) {
				bFound=true;
				break;
			}
		}
		if(!bFound) {
			newList.push(item);
		}
	}
	return newList;
}

/**
 *
 * @brief - Receive the kiosk view index and look for the equivalent item in the current POS view
 * @param - cartIndex - index of the item in cart
 * @param - xmlView - parsed view of POS
 * @return - a pair of indexes (initial and last) in the ItemView list
 * @author - MY
 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 */
function lFindIndexInView (cartIndex, xmlView) {

	var viewIndex=0;
	var lastIndex=0;

	// look for the item in view that correspond to the index in cart
	// the kiosk view has 2 indexes: indexInternal and index. The first is the equivalent index on POS view. 
	// The second is the all non removed items in cart. The cartIndex is the index not the indexInternal.
	// To find the correct ItemView index we need to count only non zero quantity main items
	var countMainItem=0;
	var bFound=false;
	for each (itemView in xmlView.ItemView) {
		if((0==itemView.level)&&(itemView.quantity>0)) {
			if(countMainItem==cartIndex) {
				bFound=true;
				break;
			}
			countMainItem++;
		}
		viewIndex++;
	}

	if(bFound) {
		// look for the last index that belongs to the same product in view xml
		lastIndex=xmlView.ItemView.length();
		for (var iIndex=viewIndex+1; iIndex<lastIndex; iIndex++) {
			if(0==xmlView.ItemView[iIndex].level) {
				lastIndex=iIndex;
				break;
			}
		}
	}
	else {
		viewIndex=-1;
		API.dbg("Item in cart could not be found [" + CartIndex + "]");
	}
	return {
		first: viewIndex,
		last: lastIndex
	};
}


// WWR-2579 - CYT Phase 1 - Cycle 2: Incorrect behavior for "non priced", "non taxed", "inactive" items on KIOSK and POS
var csoActiveTaxes = PosGetActiveTaxes();

//NPS-9871: Script Error: out of memory - NP 6.1.19 RC 15 HF3 - ACSI0569078
PosCSOLoadConfigurationJS();
PosCSOLoadScreenInfoJS();

// CSO-835 NGK 5.15.1 - Nutritional Information Icon is not displaying as expected with US FDA Mode
PosCSOLoadProductsJS();
PosCSOSetDefaultStateJS();
PosCSOLoadLocalPromotionsJS();
PosCSOLoadAllergensJS();
PosNGKValidateStoreDbConfigurationJS();

var deliveryLaterItems = new Array();
//CSO-229 - NGK Support Deliver Early Feature - 7826861
var deliveryEarlierItems = new Array();
var ORDER_VIEW_HASH = null;
var STORE_ID = 0;	


/*Global NGK variables*/

//Max recursion depth when generating the value meal xml
var GLOBAL_NGK_MAX_RECURSION_LEVEL = 5;
var GLOBAL_NGK_UPLIFT_BY_PRICE_INSTEAD_OF_SIZE = true;

//Used for the return buttons in the menus
var GLOBAL_NGK_SCREEN_STACK = new Array();

//Used to control the last advertisement screens that were sent to the GUI
var GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_9X16 = null;
var GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_5X4 = null;
var GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_ADA = null;
//NPS-12101 - CR to support 16x9 landscape mode on NGK - 6994488
var GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_16X9 = null;
var GLOBAL_NGK_SUB_ADVERTISEMENT_SCREENS_9X16 = null;
var GLOBAL_NGK_SUB_ADVERTISEMENT_SCREENS_16X9 = null;

//Used to control the order date and time.
//Should be updated only at the beggining of an order.
var GLOBAL_NGK_ORDER_START_DATE = null;
// CSO-328 - NGK Date-specific Override of Working Hours - 7977439
var GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE = null;

//CSO-85 - EU CR for NGK Multi Payment Service Platform Support - 7359977
//Used to reinject the view after changing the RemPod
var GLOBAL_NGK_SAVED_VIEW = null;

//NGK 5.6 - CSO-79 - NGK- Use Existing NP6 Suppress Discount Feature - 7376320
var GLOBAL_NGK_SUPPRESS_DISCOUNT_ENABLED = null;

// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
var GLOBAL_GRILL_STRING = "";

// SDO-11600 - CYT Phase 1 with QR9 with NGK5.10 - Not able to change the choice in the Meal 
var GLOBAL_NGK_MAX_RECURSION_PRODUCT_CHOICE_LEVEL = 10;

// CSO-420 - [DRM] CYT C2 [KIOSK Offers] - Incorrect error message is displayed and the offer gets removed from the order basket when the same QR code is scanned twice on the KIOSK
// CSO-428 - [DRM] CYT C2 [KIOSK Offers] - No confirmation message is displayed for the user when user scans same offer with different QR code or scans a new offer on the KIOSK
var GLOBAL_NGK_LAST_BARCODE = null;

// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
var GLOBAL_NGK_GRILL = null;
var GLOBAL_NGK_GRILL_LAST_EVENT = null;
var GLOBAL_NGK_AUTO_GRILL = null;

// CSO-228 - NGK Support CYT phase 2 configuration - 7826843
var storeDbXml;

// CSO-332 - Overwrite store-db parameters using pos-db settings
var posDbXml;

/**
 * @brief  - Logs a message expliciting a type.
 * @param  - logType: the type, also as a code.
 * @param  - logRegister: the register to be logged.
 * @param  - logMessage: the message to be logged.
 * @author - Paulo Ferreira
 * @since  - NPS-13932 - NGK 5.7.4 - HM Toy still salable, even if the parameter removeFromMOT is true - ACSI2149144
 */
function PosCSOLog(logType, logRegister, logMessage){
	// Verify if the function exists to determine the log type.
	if ((typeof API.logDebug == 'function') && (logType == CSOLOG_DEBUG)) { 
		API.logDebug(logRegister, logMessage);
	}
	else if ((typeof API.logInfo == 'function') && (logType == CSOLOG_INFORMATION)) { 
		API.logInfo(logRegister, logMessage);
	}
	// If not, use the API.dbg function to log the message.
	else{
		API.dbg("Type: " + logType + " | Register: " + logRegister + " | Message: " + logMessage);
	}
}

/**
 *
 * @brief - This BC calls PosDoOperatorLogout_CSL and, if defined, onLogoutFinalize
 * @param remote - String - Optional, "true" to indicate a remote logout (default:"false")
 * @hook <i>onLogoutFinalize()</i> -  invoked after PosDoOperatorLogout_CSL
 */
function PosCSODoOperatorLogoutJS(remote) {
	var ret = PosDoOperatorLogout_CSL('true');
	if(typeof(onLogoutFinalize) == "function") {
		ret = onLogoutFinalize();
	}
	return ret;
}

/**
 * @brief - Set session property to auto replace/ default item
 * @param - choiceCode: 
 * @param - productCodeTo: 
 * @return - true/false
 * @author - Wilson
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOSetChoiceFillerJS(choiceCode, productCodeTo) {
	return PosSetSessionProperty("CSO_CHOICE_" + choiceCode, productCodeTo, "false", "true");
}

/**
 * @brief - Remove session property to auto replace/ default item
 * @param - choiceCode: 
 * @return - 
 * @author - Wilson
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOResetChoiceFillerJS(choiceCode) {
	return PosRemoveSessionProperty("CSO_CHOICE_" + choiceCode,"false","true");
}

/**
 * @brief - Get product code into choice filter
 * @param - choiceCode: 
 * @param - productCodeFrom: 
 * @return - 
 * @author - Wilson
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOGetChoiceDefaultItemJS(choiceCode) {
	return sessionSale.get("CSO_CHOICE_" + choiceCode);
}

/**
 * @brief - 
 * @return - 
 * @author - Christiano Meirelles
 */
function PosCSOLoadProductsJS() {
	
	var getCurrentPrice = function () {
		//0 - EATIN; 1 - TAKEOUT; 2 - OTHER
		var saleType = new BusinessObjectHelper().getSaleType();

		switch(saleType) {
		case 0:
			return this.eatIn;
		case 1:
			return this.takeOut;
		case 2:
			return this.other;
		}
		
		return 0;
	};
	
	// SDO-11485 - [NGK 5.11] CYT Redesign - Ingredient quantity button disappears
	var currentCytIngredientGroups = [];
	(function() {
		if (storeDbXml.StoreDB.CytIngredientGroups != undefined) {
			for each (var group in storeDbXml.StoreDB.CytIngredientGroups.Group) {
				var item = {
					name: group.@name,
					mutuallyExclusive: (group.@mutuallyExclusive != undefined) ? group.@mutuallyExclusive : "false",
					minQuantity: (group.@minQuantity != undefined) ? group.@minQuantity : 0,
					maxQuantity: (group.@maxQuantity != undefined) ? group.@maxQuantity : 9999999,
					// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
					chargeThreshold: (group.@chargeThreshold != undefined) ? group.@chargeThreshold : -1,
				};
				
				currentCytIngredientGroups.push(item);
			}
		}
	})();
	
	function lGetUnitPrice(productNode) {
		// CSD-205 - Customization does not work when the price tag of a component has new lines
		var eatInPriceString = productNode.PriceList.PriceTag.Pricing.(@priceCode == "EATIN").Price.toString().replace(/\s+/g, "");
		var takeOutPriceString = productNode.PriceList.PriceTag.Pricing.(@priceCode == "TAKEOUT").Price.toString().replace(/\s+/g, "");
		var otherPriceString = productNode.PriceList.PriceTag.Pricing.(@priceCode == "OTHER").Price.toString().replace(/\s+/g, "");
		
		// NPS-9610: Kiosk GUI 3 - GUI should hide products that aren't priced - ACSI0419542
		var eatInParse = "";
		var takeOutParse = "";
		var otherParse = "";
		
		if (eatInPriceString != null && eatInPriceString != "" &&
			takeOutPriceString != null && takeOutPriceString != "" &&
			otherPriceString != null && otherPriceString != "") {
			eatInParse = parseFloat(eatInPriceString);
			takeOutParse = parseFloat(takeOutPriceString);
			otherParse = parseFloat(otherPriceString);
		}
		
		return {
			eatIn: eatInParse,
			takeOut: takeOutParse,
			other: otherParse,
			getCurrent: getCurrentPrice
		};
	}
	
	function lSetProductPrice(productInfo) {
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (productInfo.xmlNode == null || productInfo.xmlNode == undefined){
			return;
		}
		if (productInfo.price != null) {
			return;
		}
			
		var components = productInfo.xmlNode.Composition.Component;
		var choices = productInfo.xmlNode.Composition.Choices;
		var priceTypes = [ "eatIn", "takeOut", "other" ];
		var productPrice = {
			getCurrent: getCurrentPrice
		};
		
		for each (var priceType in priceTypes) {
			var price = productInfo.unitPrice[priceType];
			
			for each (component in components) {
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				if (component.CostInclusive.toString() == "false" && csoProductInfo[component.ProductCode.toString()] != undefined) {
					var componentInfo = csoProductInfo[component.ProductCode.toString()];
					
					if (componentInfo.price == null) {
						lSetProductPrice(componentInfo);
					}
					
					price += componentInfo.price[priceType];
				}
			}
			
			for each(choice in choices) {
				if (choice.CostInclusive.toString() == "false") {
					
					// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
					if (choice.ReferenceProduct.toString() != null && choice.ReferenceProduct.toString() != "" && csoProductInfo[choice.ReferenceProduct.toString()] != undefined) {
						var referenceProductInfo = csoProductInfo[choice.ReferenceProduct.toString()];
						
						if (referenceProductInfo.price == null) {
							lSetProductPrice(referenceProductInfo);
						}
						
						price += referenceProductInfo.price[priceType];
					}
				}
			}
			
			productPrice[priceType] = price;
		}
		
		productInfo.price = productPrice;
	}
	
	function lGetCSOImages(productNode) {
		if (sessionSale.get("IS_NGK") == "true")
		{
			var _xdimensionImage = productNode.Presentation.CSODimensionImageName.toString();
			var _xlargeImage = productNode.Presentation.CSOLargeImageName.toString();
			if (_xlargeImage == "" || _xlargeImage == null) {
			    _xlargeImage = _xdimensionImage;
			}
			if (_xdimensionImage == "" || _xdimensionImage == null) {
			    _xdimensionImage = _xlargeImage;
			}
			if ((_xlargeImage=="" || _xlargeImage==null) && (_xdimensionImage=="" || _xdimensionImage==null)) {
			    if (productNode.@productClass == "VALUE_MEAL") {
			        _xlargeImage = "Meal_Outline.png";
			        _xdimensionImage = "Meal_Outline.png";
			    } else if (productNode.FamilyGroup == "REGULAR_DRINK" || productNode.ChoiceGroup=="DRINK") {
			        _xlargeImage = "Beverage_Outline.png";
			        _xdimensionImage = "Beverage_Outline.png";
			    } else if (productNode.FamilyGroup == "FRIES" || productNode.ChoiceGroup == "SIDE") {
			        _xlargeImage = "Side_Outline.png";
			        _xdimensionImage = "Side_Outline.png";
			    } else if (productNode.ChoiceGroup=="DESSERT") {
			        _xlargeImage = "Dessert_Outline.png";
			        _xdimensionImage = "Dessert_Outline.png";
			    } else if (productNode.ChoiceGroup=="TOY") {
			        _xlargeImage = "Toy_Outline.png";
			        _xdimensionImage = "Toy_Outline.png";
			    } else if (productNode.ChoiceGroup=="SAUCE") {
			        _xlargeImage = "Sauce_Outline.png";
			        _xdimensionImage = "Sauce_Outline.png";
			    } else {
			        _xlargeImage = "Sandwich_Outline.png";
			        _xdimensionImage = "Sandwich_Outline.png";
				    }
			}
			return {
			    circleImage: productNode.Presentation.CSOCircleImageName.toString(),
			    dimensionImage: _xdimensionImage,
			    largeImage: _xlargeImage,
			    smallImage: productNode.Presentation.CSOSmallImageName.toString(),
			    cartImage: productNode.Presentation.CSOCartImageName.toString(),
			    // CSO-507 - Fallback image for grill image
			    grillImage: productNode.Presentation.CSOGrillImageName.toString() ? productNode.Presentation.CSOGrillImageName.toString() : _xlargeImage
			};
		}
		else
		{
			//TODO NGK: Check if it should be changed to productNode instead of product
			return {
				circleImage: product.Presentation.CSOCircleImageName.toString(),
				dimensionImage: product.Presentation.CSODimensionImageName.toString(),
				largeImage: product.Presentation.CSOLargeImageName.toString(),
				smallImage: product.Presentation.CSOSmallImageName.toString(),
				cartImage: product.Presentation.CSOCartImageName.toString(),
				grillImage: product.Presentation.CSOGrillImageName.toString()
			};
		}
	}	
	
	//Added for NGK
	function lGetPointsOfDistribution(productNode){
		var pointsOfDistribution = [];
		
		//TODO: REMOVE
		//Workaround for Balma.
		//Basically the database will not be fixed for the pilot, so instead of using the POD configuration,
		//we will use the PPG to check for MCCAFE
		if (productNode.Production.PPG == "McCafe")
		{
			pointsOfDistribution.push({
				name: "MCCAFE",
				declaredAsCustomParameter: false
			});
			
			//If the product's PPG is configured for McCafe ignore all the other configurations
			return pointsOfDistribution;
		}
		
		if (productNode.Distribution){
			for each (var pointOfDistributionNode in productNode.Distribution.Point) {
			
				//TODO: REMOVE
				//Workaround for Balma.
				//Ignore McCafe since it will be configured in the PPG
				if (pointOfDistributionNode.toString() == "MCCAFE") continue;
			
				pointsOfDistribution.push({
					name: pointOfDistributionNode.toString(),
					declaredAsCustomParameter: false
				});
			}
		}
		if (productNode.CustomParameters){
			for each (var pointOfDistributionNode in productNode.CustomParameters.Parameter.(@name == "PointOfDistribution")) {
				
				//TODO: REMOVE
				//Workaround for Balma.
				//Ignore McCafe since it will be configured in the PPG
				if (pointOfDistributionNode.toString() == "MCCAFE") continue;
			
				pointsOfDistribution.push({
					name: pointOfDistributionNode.@value.toString(),
					declaredAsCustomParameter: true
				});
			}
		}
		
		return pointsOfDistribution;
	}
	
	/**
	 * @brief - Checks if a given product has choices. 
	 * @returns - true or false.
	 * @param - product xml node from product-db.xml
	 * @author - Vladimir Dobroff
	 * @since - CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
	 */
	function lGetHasChoices(product)
	{
		if (product.Choices.Component.length() > 0)
		{
			return true;
		}
		
		return false;
	}
	
	/**
	 * @brief - Checks if a given product has components. 
	 * @returns - true or false.
	 * @param - product xml node from product-db.xml
	 * @author - Vladimir Dobroff
	 * @since - CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
	 */
	function lGetHasComposition(product)
	{
		if (product.Composition.Component.length() > 0)
		{
			return true;
		}
		
		return false;
	}
	
    /**
	 * @brief - Checks if a given product has Can Adds Components.
	 * @returns - true or false.
	 * @param - product xml node from product-db.xml
	 * @since - [CSO-951] KIOSK SP8B1 Pre-Release Build 14: For breakfast sandwich meals, the hashbrown (side item) is not displayed on VM PDP
	 */
	function lGetHasCanAdds(product)
	{
		if (product.CanAdds.Component.length() > 0)
		{
			return true;
		}
		return false;
	}

    /**
	 * @brief - Checks if a given product has Comments Components.
	 * @returns - true or false.
	 * @param - product xml node from product-db.xml
	 * @since - [CSO-951] KIOSK SP8B1 Pre-Release Build 14: For breakfast sandwich meals, the hashbrown (side item) is not displayed on VM PDP
	 */
	function lGetHasComments(product)
	{
		if (product.Comments.Component.length() > 0)
		{
			return true;
		}
		return false;
	}

	/**
	 * @brief - Checks if a given product is a BYB product.
	 * @returns - true or false.
	 * @param - product xml node from product-db.xml
	 * @author - Vivian Cury
	 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 */
	function lGetIsBybProduct(product)
	{
		// CSO-1192 - POS-430 - Kiosk - Ability to Treat Smart Routed Products as Regular Products for Ordering		
		if(csoUseCYTAsRegular) 
		{
			return false;
		}
		
		// CSO-228 - NGK Support CYT phase 2 configuration - 7826843
		if (product.@productClass == "PRODUCT" &&
			product.SmartRouting.CytProduct != undefined)
		{
			if (product.SmartRouting.CytProduct.toString().toUpperCase() == "CUSTOMIZED")
			{
				return true;
			}
		}
		else if (product.@productClass == "PRODUCT" &&
				 product.CustomParameters.Parameter.(@name == "BYBType") != undefined &&
				 product.CustomParameters.Parameter.(@name == "BYBType").@value.toString() == "CUSTOMIZED" &&
				 product.CustomParameters.Parameter.(@name == "BYBDisplayOrder") != undefined)
		{
			return true;
		}
		
		return false;
	}
	
	/**
	 * @brief   - Checks which is the CYT version of a given product, stage 1 and previous or stage 2.
	 * @returns - 1 - stage 1 and previous; 2 - stage 2
	 * @param   - product xml node from product-db.xml
	 * @author  - Jorge Olimpia
	 * @since   - CSO-228 - NGK Support CYT phase 2 configuration - 7826843
	 */
	function lGetCYTProductVersion(product)
	{
		// Check for the stage 2 first to avoid getting stage 1 product's settings
		if (product.@productClass == "PRODUCT" &&
			product.SmartRouting.CytProduct != undefined &&
			product.SmartRouting.CytProduct.toString() != "" && 
			(product.SmartRouting.CytProduct.toString().toUpperCase() == "CUSTOMIZED" || 
			 product.SmartRouting.CytProduct.toString().toUpperCase() == "PRE_BUILT")) {
			 
			API.dbg("lGetCYTProductVersion - ProductCode: [" + product.ProductCode.toString() + "], version: 2");
			return 2;
		}
		else if (product.@productClass == "PRODUCT" &&
				 product.CustomParameters.Parameter.(@name == "BYBType") != undefined &&
				 product.CustomParameters.Parameter.(@name == "BYBDisplayOrder") != undefined &&
				 (product.CustomParameters.Parameter.(@name == "BYBType").@value.toString() == "CUSTOMIZED" ||
				  product.CustomParameters.Parameter.(@name == "BYBType").@value.toString() == "PRE_BUILT")) {
				API.dbg("lGetCYTProductVersion - ProductCode: [" + product.ProductCode.toString() + "], version: 1");
				return 1;
		}
		
		API.dbg("lGetCYTProductVersion - Default return - ProductCode: [" + product.ProductCode.toString() + "].");
		return 1;
	}

	/**
	 * @brief   - Get a product code alias defined for a given product.
	 * @returns - Product code alias if it exists; Otherwise, empty string.
	 * @param   - product xml node from product-db.xml
	 * @author  - Jorge Olimpia
	 * @since   - CSO-327 - CYT import via scanner - 8052105
	 */
	function lGetCYTProductCodeAlias(product) {
		if (product.CustomParameters.Parameter.(@name == "CSOCytProductCodeAlias") != undefined) {
			API.dbg("NGK - lGetCYTProductCodeAlias - productCode: [" + product.ProductCode.toString() + "], alias: [" + product.CustomParameters.Parameter.(@name == "CSOCytProductCodeAlias").@value.toString() +"].");
			return product.CustomParameters.Parameter.(@name == "CSOCytProductCodeAlias").@value.toString();
		} else {
			API.dbg("NGK - lGetCYTProductCodeAlias - productCode: [" + product.code + "], alias: [EMPTY].");
			return "";
		}
	}
	
	/**
	 * @brief   - Check if a CYT v2 recipe is valid, regarding minimum and maximum quantities for each ingredients group.
	 * @returns - True, if it is valid; otherwise, false.
	 * @param   - product object from csoProductInfo
	 * @author  - Jorge Olimpia
	 * @since   - SDO-11485 - [NGK 5.11] CYT Redesign - Ingredient quantity button disappears
	 * @altered - CSO-522 CYT burger is not show on CSO
	 */
	function lIsCYTRecipeValid(product){
		var isValid = true;
		
		// Get ingredient group display order from main CYT product
		var cytGroupDisplayOrder = [];
		if (product.cytVersion == 2) {
			if (product.xmlNode.SmartRouting != undefined &&
				product.xmlNode.SmartRouting.CytGroupDisplayOrder != undefined) {
				for each (var group in product.xmlNode.SmartRouting.CytGroupDisplayOrder.Group) {
					cytGroupDisplayOrder.push(group.toUpperCase());
				}
			}
		}
		
		if (cytGroupDisplayOrder.length == 0) {
			API.dbg("NGK - lIsCYTRecipeValid - CYT v2 product does not contain values at CytGroupDisplayOrder tag. Product code: [" + product.code + "]");
			isValid = false;
			return isValid;
		}
		
		if (currentCytIngredientGroups != null) {
			for each (var group in currentCytIngredientGroups) {
				// SQC-7403 - [NGK 5.11] - CYT does not display any product because the minimum quantity configured in store-db.xml >0,even if the group is not configured for the product
				var isGroupFoundInIngredient = false;
				
				//FROM SCRATCH
				var sumMaxQuantities = 0;
				var sumMinQuantities = 0;
				
				//PRE BUILD
				var sumDefaultQuantities = 0;

				for each (var composition in product.xmlNode.Composition.Component) {
					if (csoProductInfo[composition.ProductCode.toString()] != undefined &&
						csoProductInfo[composition.ProductCode.toString()].xmlNode.SmartRouting != undefined &&
						csoProductInfo[composition.ProductCode.toString()].xmlNode.SmartRouting.CytIngredientGroup != undefined) {
						if (csoProductInfo[composition.ProductCode.toString()].xmlNode.SmartRouting.CytIngredientGroup.toString().toUpperCase() == group.name.toUpperCase()) {
							sumMaxQuantities += Number(composition.MaxQuantity);
							sumMinQuantities += Number(composition.MinQuantity);
							sumDefaultQuantities += Number(composition.DefaultQuantity);							
							// SQC-7403 - [NGK 5.11] - CYT does not display any product because the minimum quantity configured in store-db.xml >0,even if the group is not configured for the product
							isGroupFoundInIngredient = true;
						}
					}
				}

				for each (var abstractChoice in product.xmlNode.Choices.Component) {
					if (csoProductInfo[abstractChoice.ProductCode.toString()] != undefined &&
						csoProductInfo[abstractChoice.ProductCode.toString()].xmlNode.Composition != undefined) {
						for each (var concreteChoice in csoProductInfo[abstractChoice.ProductCode.toString()].xmlNode.Composition.Component) {
							if (csoProductInfo[concreteChoice.ProductCode.toString()] != undefined &&
								csoProductInfo[concreteChoice.ProductCode.toString()].xmlNode.SmartRouting != undefined &&
								csoProductInfo[concreteChoice.ProductCode.toString()].xmlNode.SmartRouting.CytIngredientGroup != undefined) {
								if (csoProductInfo[concreteChoice.ProductCode.toString()].xmlNode.SmartRouting.CytIngredientGroup.toString().toUpperCase() == group.name.toUpperCase()) {
									sumMinQuantities += Number(abstractChoice.MinQuantity);
									sumMaxQuantities += Number(abstractChoice.MaxQuantity);
									sumDefaultQuantities += Number(abstractChoice.DefaultQuantity);
									// SQC-7403 - [NGK 5.11] - CYT does not display any product because the minimum quantity configured in store-db.xml >0,even if the group is not configured for the product
									isGroupFoundInIngredient = true;
									break;
								}
							}
						}
					}
				}
				
				for each (var canAdd in product.xmlNode.CanAdds.Component) {
					if (csoProductInfo[canAdd.ProductCode.toString()] != undefined &&
						csoProductInfo[canAdd.ProductCode.toString()].xmlNode.SmartRouting != undefined &&
						csoProductInfo[canAdd.ProductCode.toString()].xmlNode.SmartRouting.CytIngredientGroup != undefined) {
						if (csoProductInfo[canAdd.ProductCode.toString()].xmlNode.SmartRouting.CytIngredientGroup.toUpperCase() == group.name.toUpperCase()) {
							sumMinQuantities += Number(canAdd.MinQuantity);
							sumMaxQuantities += Number(canAdd.MaxQuantity);
							sumDefaultQuantities += Number(canAdd.DefaultQuantity);
							// SQC-7403 - [NGK 5.11] - CYT does not display any product because the minimum quantity configured in store-db.xml >0,even if the group is not configured for the product
							isGroupFoundInIngredient = true;
						}
					}
				}
				
				// SQC-7403 - [NGK 5.11] - CYT does not display any product because the minimum quantity configured in store-db.xml >0,even if the group is not configured for the product
				if (isGroupFoundInIngredient) {
					if (lGetIsBybPreBuiltProduct(product.xmlNode))
					{
						//PRE-BUILD
						if (sumDefaultQuantities < group.minQuantity) {
							API.dbg("NGK - lIsCYTRecipeValid - Invalid CYT product - PREBUILD found: (Product: [" + product.code + "], Sum Default quantities: [" + sumDefaultQuantities + "]), (Group: [" + group.name + "], MinQuantity: [" + group.minQuantity +"])");
							isValid = false;
							break;
						}
						
						if (sumDefaultQuantities > group.maxQuantity) {
							API.dbg("NGK - lIsCYTRecipeValid - Invalid CYT product - PREBUILD found: (Product: [" + product.code + "], Sum default quantities: [" + sumDefaultQuantities + "]), (Group: [" + group.name + "], MaxQuantity: [" + group.maxQuantity +"])");
							isValid = false;
							break;
						}
					}else{
						//FROM SCRATCH
						if (sumMaxQuantities < group.minQuantity) {
							API.dbg("NGK - lIsCYTRecipeValid - Invalid CYT product - FROM SCRATCH found: (Product: [" + product.code + "], Sum maximum quantities: [" + sumMaxQuantities + "]), (Group: [" + group.name + "], MinQuantity: [" + group.minQuantity +"])");
							isValid = false;
							break;
						}
				 
						if (sumMinQuantities > group.maxQuantity) {
							API.dbg("NGK - lIsCYTRecipeValid - Invalid CYT product - FROM SCRATCH found: (Product: [" + product.code + "], Sum minimum quantities: [" + sumMinQuantities + "]), (Group: [" + group.name + "], MaxQuantity: [" + group.maxQuantity +"])");
							isValid = false;
							break;
						}
					}
				}
			}
		} else {
			API.dbg("NGK - lIsCYTRecipeValid - CYT v2 product found but CytIngredientGroups tag at store-db.xml is missing. Product code: [" + product.code + "]");
			isValid = false;
		}		
		return isValid;
	}	
	
	/**
	 * @brief    - Validates a product if it is an active product and it has a CSO distribution point.
	 * @param    - productNode - XML of the product-db
	 * @author   - Paulo Ferreira
	 * @since    - NPS-13932 - NGK 5.7.4 - HM Toy still salable, even if the parameter removeFromMOT is true - ACSI2149144
	 * @modified - CSO-448 - Choices without DistributionPoint should be allowed to be on csoProduct
	 */
	function lIsActiveCSOProduct(productNode) {
		if (productNode.@statusCode == "ACTIVE") {

			// CSO-448 - Choices without DistributionPoint should be allowed to be on csoProduct
			// In case the product is a choice, the distribution point can be ignored and the product shall be active.
			if (productNode.@productClass == "CHOICE") return true;

			distributionPoints = productNode.Distribution.Point;
			for each (distributionPoint in distributionPoints) {
				if (distributionPoint == "CSO") {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * @brief    - Returns a flag that indicate if product is valid according to the business rules.
	 * @param    - productNode - XML of the product-db
	 * @author   - Dalton Pericles de Almeida
	 * @since    - CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
	 */
	function lIsValidProduct(productNode) {
		var internalIsValidProduct = false;
		
		if (lIsActiveCSOProduct(productNode)) 
		{
			if (productNode.@productClass == "VALUE_MEAL") {
				// Rule: All Choices and All Compositions must be valid to a VALUE MEAL to be valid.
				// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
				internalIsValidProduct = (!lGetHasChoices(productNode) || lCheckChoices(productNode)) && (!lGetHasComposition(productNode) || lCheckComposition(productNode));
				// SDO-11677 - If a product that solves a subchoice configured with a flavor has an inactive component, NGK displays this product in the choice selection screen
				PosCSOLog(CSOLOG_DEBUG, 18435, "[lIsValidProduct] Value Meal: " + productNode.ProductCode.toString() + " is: " + internalIsValidProduct.toString());				
			}					
			else if (productNode.@productClass == "CHOICE") {
				// Rule: One, between Choices and Compositions must be valid to a CHOICE to be valid.
				internalIsValidProduct = lCheckChoices(productNode) || lCheckComposition(productNode);
				// SDO-11677 - If a product that solves a subchoice configured with a flavor has an inactive component, NGK displays this product in the choice selection screen
				PosCSOLog(CSOLOG_DEBUG, 18435, "[lIsValidProduct] Choice: " + productNode.ProductCode.toString() + " is: " + internalIsValidProduct.toString());
			}
			else {
				// Rule: All Choices must be valid to a PRODUCT to be valid, in case they exists.
				//       If no choices are found, the PRODUCT is valid.
				// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
				
				// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
				var inactivateProductsWithInactiveIngredients = lGetSectionWideStringParameter("inactivateProductsWithInactiveIngredients","OperationMode", "false");
				if(inactivateProductsWithInactiveIngredients.toUpperCase() == "TRUE")
				{
					// SDO-11677 - If a product that solves a subchoice configured with a flavor has an inactive component, NGK displays this product in the choice selection screen
					internalIsValidProduct = (!lGetHasChoices(productNode) || lCheckChoices(productNode)) && (!lGetHasComposition(productNode) || lCheckComposition(productNode));
				}
				else 				
				{
					internalIsValidProduct = !lGetHasChoices(productNode) || lCheckChoices(productNode);
				}
				// SDO-11677 - If a product that solves a subchoice configured with a flavor has an inactive component, NGK displays this product in the choice selection screen
				PosCSOLog(CSOLOG_DEBUG, 18435, "[lIsValidProduct] Product: " + productNode.ProductCode.toString() + " is: " + internalIsValidProduct.toString());
			}
		}
		
		return (internalIsValidProduct);
	}

	/**
	 * @brief - Check all compositions from the actual product. 
	 * @return - boolean
	 * @param  - productNode - XML of the product-db	 
	 * @author - Paulo Ferreira
	 * @since - NPS-13932 - NGK 5.7.4 - HM Toy still salable, even if the parameter removeFromMOT is true - ACSI2149144
	 * @changed - CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
	 */
	function lCheckChoices(productNode){
		var partialValidation = false;
		
		for each (choice in productNode.Choices.Component) {
			// Verify first on CSO array if the product exists already.
			// In this case, the product was already validated.
			var product = csoProductInfo[choice.ProductCode.toString()];
			if (product != undefined && product != null) {
				// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
				// If we are validating a CHOICE, all we need is one valid choice
				if (productNode.@productClass == "CHOICE") return true;
				partialValidation = true;
				continue;
			}
			
			// Verify on XML-DB in case it doesn't exist on CSO array.
			var product = productDbXml.Product.(ProductCode == choice.ProductCode.toString());
			if (product != undefined && product != null) {
				// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
				var isValidProd = ((loadInactiveProducts == "false") ? (lIsValidCSOProduct(product)) : (lIsValidProduct(product)));
				if (isValidProd){
					// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
					// If we are validating a CHOICE, all we need is one valid choice
					if (productNode.@productClass == "CHOICE") return true;
					partialValidation = true;
					continue;
				}
			}
			
			// If product doesn't exist on any list, and it's a VALUE MEAL or a PRODUCT, the verification must return FALSE.
			// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
			if (productNode.@productClass == "VALUE_MEAL" ||
				productNode.@productClass == "PRODUCT") return false;
		}
		
		return partialValidation;
	}
	
	/**
	 * @brief - Check all compositions from the actual product.
	 * @return - boolean
	 * @param  - productNode - XML of the product-db	 	 
	 * @author - Paulo Ferreira
	 * @since - NPS-13932 - NGK 5.7.4 - HM Toy still salable, even if the parameter removeFromMOT is true - ACSI2149144
	 * @changed - CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load		 
	 */
	function lCheckComposition(productNode){
		// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
		var partialValidation = false;
		
		// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
		var inactivateProductsWithInactiveIngredients = lGetSectionWideStringParameter("inactivateProductsWithInactiveIngredients","OperationMode", "false");
		if(inactivateProductsWithInactiveIngredients.toUpperCase() == "TRUE")
		{
			// SDO-11677 - If a product that solves a subchoice configured with a flavor has an inactive component, NGK displays this product in the choice selection screen
			partialValidation = true;
		}
		
		for each (composition in productNode.Composition.Component) {
			// Verify first on CSO array if the product exists already.
			// In this case, the product was already validated.
			var product = csoProductInfo[composition.ProductCode.toString()];
			if (product != undefined && product != null) {
				// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
				if(inactivateProductsWithInactiveIngredients.toUpperCase() == "TRUE")
				{
					// SDO-11677 - If a product that solves a subchoice configured with a flavor has an inactive component, NGK displays this product in the choice selection screen
					if(product.isValid)
					{				
						// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
						// If we are validating a CHOICE, all we need is one valid composition
						if (productNode.@productClass == "CHOICE") return true;
						partialValidation &= true;
					}
					else 
					{
						partialValidation &= false;
					}
				}
				else 
				{
					// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
					// If we are validating a CHOICE, all we need is one valid composition
					if (productNode.@productClass == "CHOICE") return true;
					partialValidation = true;
				}
				continue;
			}
			
			// Verify on XML-DB in case it doesn't exist on CSO array.
			var product = productDbXml.Product.(ProductCode == composition.ProductCode.toString());
			if (product != undefined && product != null) {
				// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
				var isValidProd = ((loadInactiveProducts == "false") ? (lIsValidCSOProduct(product)) : (lIsValidProduct(product)));
				
				// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
				if(inactivateProductsWithInactiveIngredients.toUpperCase() == "TRUE")
				{
					if (isValidProd){					
						// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
						// If we are validating a CHOICE, all we need is one valid composition
						if (productNode.@productClass == "CHOICE") return true;
						// SDO-11677 - If a product that solves a subchoice configured with a flavor has an inactive component, NGK displays this product in the choice selection screen
						partialValidation &= true;
					}
					else 
					{
						// SDO-11677 - If a product that solves a subchoice configured with a flavor has an inactive component, NGK displays this product in the choice selection screen						
						partialValidation &= false;
					}
					// SDO-11677 - If a product that solves a subchoice configured with a flavor has an inactive component, NGK displays this product in the choice selection screen
					continue;
				}
				else
				{
					// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
					if (isValidProd){
						// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
						// If we are validating a CHOICE, all we need is one valid composition
						if (productNode.@productClass == "CHOICE") return true;
						partialValidation = true;
						continue;
					}
				}
			}
			
			// If product doesn't exist on any list, and it's a VALUE MEAL or a PRODUCT, the verification must return FALSE.
			// SDO-10826 - NGK 5.10 some products do not display after upgrade - NW-209
			if (productNode.@productClass == "VALUE_MEAL" ||
				productNode.@productClass == "PRODUCT") return false;
		}
		
		return partialValidation;
	}
	
	/**
	 * @brief    - Validates a product according to the business rules.
	 * @param    - productNode - XML of the product-db
	 * @author   - Paulo Ferreira
	 * @since    - NPS-13932 - NGK 5.7.4 - HM Toy still salable, even if the parameter removeFromMOT is true - ACSI2149144
	 */
	function lIsValidCSOProduct(productNode) {
		
		var isValidProduct = false;

		verificationDepth++;
		// Verify if the actual depth is higher than the maximum set depth. 
		// In that case, it will return true to the validation and no more products will be verifyed.
		if (maxVerificationDepth < verificationDepth) {
			PosCSOLog(CSOLOG_INFORMATION, 18435, "Maximum Depth ("+ maxVerificationDepth.toString() +") reached on product: " + productNode.ProductCode.toString());
			return true;
		}
			

		// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
		isValidProduct = lIsValidProduct(productNode);

		// CSO-1161 - POS-472 - Crew Pour versus Self Pour Calorie Values
		if (csoCalculateEnergyInformation &&      // Only if "Calorie Calculation" is enabled
			productNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour") != undefined &&
			((csoIsCustomerSelfPour == "TRUE" && productNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "false") ||
			 (csoIsCustomerSelfPour == "FALSE" && productNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "true")))
		{
			isValidProduct = false;
		}
		
		// If product is valid, it will be modified and saved to CSO.
		if (isValidProduct) {
			delete productNode.Secondary;
			delete productNode.DisplayOrder;
			delete productNode.DisplayWaste
			delete productNode.DummyProduct;
			delete productNode.Upsizable;
			delete productNode.Production.AutoGrill;
			delete productNode.Production.KVSdisplay;		
			delete productNode.Production.UseBufferEngine;
			delete productNode.Production.KVSRoutes;
			delete productNode.Presentation.KVSColor;
			delete productNode.Presentation.DisplayColor;
			delete productNode.Presentation.BGNormal;
			delete productNode.Presentation.BGPressed;
			delete productNode.Presentation.FGNormal;
			delete productNode.Presentation.FGPressed;

			// Refactor - CSO-448 - Choices without DistributionPoint should be allowed to be on csoProduct
			// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
			lAddProduct(productNode, lIsActiveCSOProduct(productNode));
			
			// CSO-282 - CYT Redesign - 8024409
			if (sessionSale.get("IS_NGK") == "true")
			{
				var CYTRedesign = lGetCSOUserInterfaceStringParameter("cyt.redesign", "");
				if (CYTRedesign != null && CYTRedesign != undefined && ("true" == CYTRedesign.toLowerCase())) 
				{
					var productInfo = csoProductInfo[productNode.ProductCode.toString()];
					if(productInfo != null)
					{
						if((productInfo.isBybProduct || productInfo.isBybPreBuilt) && (bShowProduct(productInfo.code)))
						{
							csoCYTProducts.push(productInfo.code);
						}
					}
				}
			}
		}
		else {
			PosCSOLog(CSOLOG_INFORMATION, 18435, "Product discarded on validation process. One or more rules not valid for product: " + productNode.ProductCode.toString());
		}

		// Search the product index and delete this product from XML-DB
		var index = productDbXml.Product.(ProductCode == productNode.ProductCode.toString()).childIndex();
		
		// NPS-16874 - RFM 2.10.3 - NGK not loading with parameter 'loadInactiveProducts = false' - ACSI2807874
		// Replaced the command below because the index returned by childIndex() is calculated 
		// based on all xml child nodes, not only Products.
		// Since RFM2 may export an additional tag in the beggining of the product-db.xml file,
		// the index cannot be used anymore in the XMLList returned by "productDbXml.Product".
		// Below a sample of the Product-db.xml that caused the issue:
		//
		// <ProductDb version = "1.0" ...>
		//   <ProductDBSeqNumber>923739</ProductDBSeqNumber>
		//   <Product statusCode="ACTIVE" productClass="VALUE_MEAL" productCategory="FOOD" salable="true" modified="false" >
		//     ...
		//   </Product>
		//   ...
		// </ProductDb>
		//
		//delete productDbXml.Product[index];
		delete productDbXml.children()[index];
		
		//Verification of the highest depth value.
		//if (highestDepth < verificationDepth)
		//	highestDepth = verificationDepth;
		verificationDepth--;

		return isValidProduct;
	}
	
	/**
	 * @brief - Checks if a given product is grillable. 
	 * @returns - True the product is grillable, otherwise false.
	 * @param - productCode
	 * @author - Felipe Armoni
	 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	 */
	function lIsProductGrillable(productNode) {
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (productNode == null || productNode == undefined){
			return false;
		}		
		// SQC-2825 KIOSK V4 - If user tries to customize the product 4620 (BigMac, a product which has "can add" items), after add or remove some items an error is displayed.
		// Check to see if the product is a Value Meal and is grillable.

		if (productNode.Production.Grillable.@status != "true") {
			return false;
		}
		
		if (productNode.@productClass == "VALUE_MEAL") {
			return true;
		}

		if (lIsComponentsGrillable(productNode.Composition.Component, "grill") ||
			lIsComponentsGrillable(productNode.CanAdds.Component, "canadd") ||
			lIsComponentsGrillable(productNode.Comments.Component, "comment")) {
			
			return true;
		}
		
		/**
		 * @brief - Checks if a given component is grillable. 
		 * @returns - True if its min quantity is less than its max quantity and this component is marked as active.
		 * @param - component - XML of the component to be checked.
		 * @author - Felipe Armoni
		 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
		 */
		function lIsComponentsGrillable(components, type) {
			var component;
			//SQC-10039 - [Kiosk 5.16 - Order Basket] Product without option "Customize" displays Button "Edit" enabled on the Order Summary
			var isComponentsGrillable = false;
			
			for each (component in components) {
				
				var compNode = csoProductInfo[component.ProductCode.toString()];
				
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				if (compNode == null || compNode == undefined){
					isComponentsGrillable = false;
				}
				else if(type == "canadd" && !lCheckCanAdd(productNode, compNode.xmlNode)){
					isComponentsGrillable = false;
				}
				else if(type == "comment" && !lCheckComment(productNode, compNode.xmlNode)){
					isComponentsGrillable = false;
				}				
				else if ((parseInt(component.MinQuantity) < parseInt(component.MaxQuantity)) && compNode.isValid) {
					isComponentsGrillable = true;
				}

				if (isComponentsGrillable) {
					break;
				}
			}
			
			return isComponentsGrillable;
		}
		
		return false;
	}
	
	/**
	 * @brief - Checks if a given product is is a choice an has only one valid option.
	 * @returns - The choice code if the product is one product choice, empty string otherwise.
	 * @param - productNode - XML of the component to be checked.
	 * @author - Vivian Cury
	 * @since - SDO-5625: CSO - VML is displaying only one choice in the screen
	 */
	function lOneProductChoice(productNode) {
		if (productNode.@productClass != "CHOICE") {
			return "";
		}
		
		var validChoices = new Array();
		for each (choiceOption in productNode.Composition.Component) {
			if (csoProductInfo[choiceOption.ProductCode.toString()] != undefined && csoProductInfo[choiceOption.ProductCode.toString()].isValid) {
				validChoices.push(choiceOption.ProductCode);
			}
		}
		
		for each (choiceOption in productNode.CanAdds.Component) {
			if (csoProductInfo[choiceOption.ProductCode.toString()] != undefined && csoProductInfo[choiceOption.ProductCode.toString()].isValid) {
				validChoices.push(choiceOption.ProductCode);
			}
		}
		
		for each (choiceOption in productNode.Comments.Component) {
			if (csoProductInfo[choiceOption.ProductCode.toString()] != undefined && csoProductInfo[choiceOption.ProductCode.toString()].isValid) {
				validChoices.push(choiceOption.ProductCode);
			}
		}
		
		for each (choiceOption in productNode.Choices.Component) {
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[choiceOption.ProductCode.toString()] != undefined && csoProductInfo[choiceOption.ProductCode.toString()].isValid) {
				validChoices.push(choiceOption.ProductCode);
			}
		}
		
		if (validChoices.length > 1) {
			return "";
		}
		
		for each (var choice in validChoices) {
			return choice;
		}
		
		return "";
	}
	
	/**
	 * @brief   - Get the respective energy suffix from a product.
	 * @param   - product - XML of the product-db
	 * @author  - Paulo Ferreira
	 * @since   - SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selected
	 */
	function lGetHasEnergySuffix(product)
	{
		var productEnergySuffix = "";

		if ((product.ProductCode == null) || (product.ProductCode == undefined)) return false;

		// Get the energy beverage self pour if it exists.
		var productEnergyBeverageCustomerSelfPour = "";
		if (product.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyBeverageCustomerSelfPour") != null)
			productEnergyBeverageCustomerSelfPour = product.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyBeverageCustomerSelfPour").@value.toString();
		
		// If the energy beverage self pour exists and the parameter isCustomerSelfPour is set as true, the suffix will be disabled.
		if ((productEnergyBeverageCustomerSelfPour != "") && (csoIsCustomerSelfPour == "TRUE")) return false;

		// If the suffix exists as custom parameter, it will be signed that this value exists.
		if (product.CustomParameters.Parameter.(@name == "nutritionalInfoEnergySuffix") != null)
			productEnergySuffix = product.CustomParameters.Parameter.(@name == "nutritionalInfoEnergySuffix").@value.toString();
		if (productEnergySuffix == "") return false;

		return true;
	}

	/**
	 * @brief  - Gets the allergens defined in the given product XML.
	 * @param  - xmlProduct - XML of the product-db
	 * @author - Gabor Hollosy
	 * @since  - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	             CSO-442 - Implement in-memory storage of allergens in NPS scripts
	 */
	function lGetProductAllergens(xmlProduct) {
		if (xmlProduct == null) return null;

		var cfgAllergens = xmlProduct.CustomParameters.Parameter.(@name == "nutritionalInfoAllergensCSO").@value.toString();
		if (cfgAllergens.length == 0) return null;

		return cfgAllergens.split('|');
	}

	/**
	 * @brief    - Adds a product in global variable csoProductInfo.
	 * @param    - product - XML of the product-db
	 * @author   - Jorge Olimpia
	 * @since    - CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	 * @modified - CSO-448 - Choices without DistributionPoint should be allowed to be on csoProduct
	 */
	function lAddProduct(product, isActiveProduct)
	{
		if (sessionSale.get("IS_NGK") == "true")
		{
			csoProductInfo[product.ProductCode.toString()] = {
				xmlNode: product,
				code: product.ProductCode.toString(),
				names: new Array(),
				unitPrice: lGetUnitPrice(product),
				csoImages: lGetCSOImages(product),
				pointsOfDistribution: lGetPointsOfDistribution(product),
				isValid: isActiveProduct, // Refactor - CSO-448 - Choices without DistributionPoint should be allowed to be on csoProduct
				hasChoices: lGetHasChoices(product),
				hasComposition: lGetHasComposition(product),
                hasCanAdds: lGetHasCanAdds(product), //[CSO-951] KIOSK SP8B1 Pre-Release Build 14: For breakfast sandwich meals, the hashbrown (side item) is not displayed on VM PDP
				hasComments: lGetHasComments(product), //[CSO-951] KIOSK SP8B1 Pre-Release Build 14: For breakfast sandwich meals, the hashbrown (side item) is not displayed on VM PDP
				isBybProduct: lGetIsBybProduct(product), // CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
				isBybPreBuilt: lGetIsBybPreBuiltProduct(product), // CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
				cytVersion : lGetCYTProductVersion(product), // CSO-228 - NGK Support CYT phase 2 configuration - 7826843
				cytProductCodeAlias : lGetCYTProductCodeAlias(product), // CSO-327 - CYT import via scanner - 8052105
				canSetLight:lCanSetLight(product),  // SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
				hasEnergySuffix: lGetHasEnergySuffix(product), //SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selected
				isMonopoly: lGetIsMonopoly(product), // CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
				// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
				// CSO-442 - Implement in-memory storage of allergens in NPS scripts
				allergens: lGetProductAllergens(product),
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				energyInfo: null
			};
		}
		else
		{
			csoProductInfo[product.ProductCode.toString()] = {
				xmlNode: product,
				code: product.ProductCode.toString(),
				names: new Array(),
				unitPrice: lGetUnitPrice(product),
				csoImages: lGetCSOImages(product),
				isValid: lIsActiveCSOProduct(product)
			};
		}
			
		for each (var language in namesDbXml.Language) {
			if (language.@code == null) {
				continue;
			}
			
			//CSO-36 - NGK v5.3 - Meal Loop Enhancements to Management/Display of Choices - 7160823
			if (sessionSale.get("IS_NGK") == "true")
			{
				csoProductInfo[product.ProductCode.toString()].names[language.@code] = {
					csoName: null,
					longName: null,
					csoGenericName: null,
					csoSizeName: null
				};
			}
			else
			{			
				csoProductInfo[product.ProductCode.toString()].names[language.@code] = {
					csoName: null,
					longName: null
				};
			}
		}
	}

	function lFillCCMInfo(product)
	{
		if(!lIsValidProduct(product))
			return;

		if(!lIsCCM(product))
			return;		
		
		var ccmCode = product.ProductCode.toString();
		var choiceComponents = product.Choices.Component;
	
		for each(var comp in choiceComponents)
		{
			if(!comp.Anchor || comp.Anchor != "true")
				continue;

			var info = csoProductInfo[comp.ProductCode.toString()];
			
			if(!info || !info.xmlNode || !info.xmlNode.Composition || !info.xmlNode.Composition.Component) 
				continue;

			for each(var prod in info.xmlNode.Composition.Component)
			{				
				var prodCode = prod.ProductCode.toString();
				if(!csoCCMInfo[prodCode])
					csoCCMInfo[prodCode] = [ccmCode];
				else
					csoCCMInfo[prodCode].push(ccmCode);
			}
		}
		
		var compositionComponents = product.Composition.Component;

		for each(var comp in compositionComponents)
		{
			if(!comp.Anchor || comp.Anchor != "true")
				continue;
			
			var prodCode = comp.ProductCode.toString();
			
			if(!csoCCMInfo[prodCode])
				csoCCMInfo[prodCode] = [ccmCode];
			else
				csoCCMInfo[prodCode].push(ccmCode);
		}
	}

	API.dbg("[PosCSOLoadProductsJS] - Building 'csoProductInfo'");
	
	var productDbXml = new XML(API.getProductdb().toString());
	var namesDbXml = new XML(API.getNamesdb().toString());
	var language;
	var product;
	var verificationDepth;
	var maxVerificationDepth = 5;
	//var highestDepth = 0;
	
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	// SDO-10279 - NGK 5.91 - Some situations with products cause unexpected messages to be shown on Kiosk UI
	var loadInactiveProducts = lGetParameterStr("loadInactiveProducts", "false");
	
	// CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
	var enableSaleTypeValidation = lGetCSOUserInterfaceStringParameter("product.enableSaleTypeValidation", "false");

	//NPS-9871: Script Error: out of memory - NP 6.1.19 RC 15 HF3 - ACSI0569078
	while (productDbXml.Product.length() > 0) {
	
		product = productDbXml.Product[0];
		
		// CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
		if (enableSaleTypeValidation == "true")
		{
			var productInfo = csoProductInfo[product.ProductCode.toString()];
			if (productInfo != null && productInfo.xmlNode.SalesType.@eatin == "false" && productInfo.xmlNode.SalesType.@takeout == "false")
			{
				delete productDbXml.Product[0];
			}
		}
		
		// CSO-1161 - POS-472 - Crew Pour versus Self Pour Calorie Values
		if (csoCalculateEnergyInformation &&      // Only if "Calorie Calculation" is enabled
			product.CustomParameters != undefined &&
			product.CustomParameters.Parameter != undefined &&
			product.CustomParameters.Parameter.(@name == "CSOIsSelfPour") != undefined &&
			((csoIsCustomerSelfPour == "TRUE" && product.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "false") ||
			(csoIsCustomerSelfPour == "FALSE" && product.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "true")))
		{
			 delete productDbXml.Product[0];
			 continue;
		}
				
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		// NPS-13932 - NGK 5.7.4 - HM Toy still salable, even if the parameter removeFromMOT is true - ACSI2149144
		// SDO-10963 - [NGK 5.11] KIOSK V4 - Script errors when trying to add VMs to the cart when using NGK 5.11 scripts
		if (loadInactiveProducts == "false" && sessionSale.get("IS_NGK") == "true")
		{	
			verificationDepth = 0;
			lIsValidCSOProduct(product);
		}
		else
		{
			// CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
			if (sessionSale.get("IS_NGK") == "true")
			{
				lAddProduct(product, lIsValidProduct(product));	
			}
			else{
				// Refactor - CSO-448 - Choices without DistributionPoint should be allowed to be on csoProduct
				lAddProduct(product, lIsActiveCSOProduct(product));
			}
			
			// CSO-282 - CYT Redesign - 8024409
			if (sessionSale.get("IS_NGK") == "true")
			{
				var CYTRedesign = lGetCSOUserInterfaceStringParameter("cyt.redesign", "");
				if (CYTRedesign != null && CYTRedesign != undefined && ("true" == CYTRedesign.toLowerCase())) 
				{
					//CSO-574 - NGk 5.14 - Inactive Products and Products with Null Price are displayed in CYT Redesign
					if(lIsActiveCSOProduct(product) && bShowProduct(product.ProductCode.toString()))
					{
						var productInfo = csoProductInfo[product.ProductCode.toString()];
						if(productInfo != null)
						{
							if((productInfo.isBybProduct || productInfo.isBybPreBuilt) && (bShowProduct(productInfo.code)))
							{
								csoCYTProducts.push(productInfo.code);
							}
						}
					}
				}
			}
			//NPS-9871: Script Error: out of memory - NP 6.1.19 RC 15 HF3 - ACSI0569078
			delete productDbXml.Product[0];
		}
	}

	API.dbg("[PosCSOLoadProductsJS] - Building CCM dictionary");

	for each(var prodInfo in csoProductInfo)
	{
		lFillCCMInfo(prodInfo.xmlNode);
	}


	API.dbg("[PosCSOLoadProductsJS] - Building 'csoProductInfo' names");
	
	//NPS-9871: Script Error: out of memory - NP 6.1.19 RC 15 HF3 - ACSI0569078
	while (namesDbXml.Language.length() > 0) {
		language = namesDbXml.Language[0];
		
		if (language.@code == null) {
			//NPS-9871: Script Error: out of memory - NP 6.1.19 RC 15 HF3 - ACSI0569078
			delete namesDbXml.Language[0];
			continue;
		}
		
		for each (var name in language.ProductName)
		{
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (name.ProductCode == null || csoProductInfo[name.ProductCode.toString()] == null) {
				continue;
			}
			
			var csoName = name.CSOName.toString();
			var longName = name.LongName.toString();
			
			if (csoName == "") {
			   csoName = longName;
			}
			
			//CSO-36 - NGK v5.3 - Meal Loop Enhancements to Management/Display of Choices - 7160823
			if (sessionSale.get("IS_NGK") == "true")
			{
				var csoGenericName = name.CSOGenericName.toString();
				var csoSizeName = name.CSOSizeName.toString();
				
				if (!csoGenericName) csoGenericName = csoName;
				if (!csoSizeName) csoSizeName = csoName;
				
				csoProductInfo[name.ProductCode.toString()].names[language.@code] = {
					csoName: csoName,
					longName: longName,
					csoGenericName: csoGenericName,
					csoSizeName: csoSizeName
				};
			}
			else
			{			
				csoProductInfo[name.ProductCode.toString()].names[language.@code] = {
					csoName: csoName,
					longName: longName
				};
			}
		}
		//NPS-9871: Script Error: out of memory - NP 6.1.19 RC 15 HF3 - ACSI0569078
		delete namesDbXml.Language[0];
	}
	
	// SDO-11485 - [NGK 5.11] CYT Redesign - Ingredient quantity button disappears
	var invalidCYTProductCodes = [];
	var loadInvalidCYTProducts = lGetParameterStr("cyt.loadInvalidProducts", "false");
	
	for each (var productInfo in csoProductInfo) {
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (productInfo.xmlNode == null || productInfo.xmlNode == undefined)
			continue;
		
		// SDO-11485 - [NGK 5.11] CYT Redesign - Ingredient quantity button disappears
		if (productInfo.cytVersion == 2 && loadInvalidCYTProducts == "false" && !lIsCYTRecipeValid(productInfo)) {
			invalidCYTProductCodes.push(productInfo.code);
		}
			
		lSetProductPrice(productInfo);		
		productInfo.isGrillable = lIsProductGrillable(productInfo.xmlNode);
		// SDO-5625: CSO - VML is displaying only one choice in the screen
		productInfo.oneProductChoice = lOneProductChoice(productInfo.xmlNode);
		
		//SDO-5568: CSO - UK - Implementation Of The Deli Of The Day - 6368021
		if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSODeliOfTheDay") != null) {
			var deliInfo = (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSODeliOfTheDay").@value).split("|");
			if (deliInfo.length >= 2 && deliInfo.length <= 3) {
				var deliProduct = csoProductInfo[deliInfo[1]];
				if (deliProduct != null) {
					csoScreenProducts.push(deliInfo[1].toString());
				}
			}
		}
		
		//SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
		for each(productGroupCode in productInfo.xmlNode.ProductGroups.Code){
			if(csoConfigurationInfo.suggestiveSellingProductGroups[productGroupCode.toString()] != null){
				csoConfigurationInfo.suggestiveSellingProductGroups[productGroupCode.toString()].push(productInfo.code);
			}
		}

		//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		//Improve performance in the value meal loop by caching information in the csoProductInfo structure
		if (sessionSale.get("IS_NGK") == "true")
		{
			if (productInfo.xmlNode.@productClass == "PRODUCT" &&
				productInfo.xmlNode.CustomParameters.Parameter.(@name == "removeFromMOT") != undefined &&
				productInfo.xmlNode.CustomParameters.Parameter.(@name == "removeFromMOT").@value.toString() == "true")
			{
				productInfo.removeFromMOT = true;
			}
			else
			{
				productInfo.removeFromMOT = false;
			}
			
			if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSORequireLegalDisclaimer") != undefined &&
				productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSORequireLegalDisclaimer").@value.toString() == "true")
			{
				productInfo.requireLegalDisclaimer = true;
			}
			else
			{
				productInfo.requireLegalDisclaimer = false;
			}
		}
	}
	
	// SDO-11485 - [NGK 5.11] CYT Redesign - Ingredient quantity button disappears
	for each (var product in invalidCYTProductCodes){
		delete csoProductInfo[product];
	}
	
	// CSO-835 NGK 5.15.1 - Nutritional Information Icon is not displaying as expected with US FDA Mode
	// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	PodCSOLoadProductEnergyInformation();
	
	// Update the isNutritionalInfoAvailableInVML property
	for each (var productInfo in csoProductInfo) {
		if (sessionSale.get("IS_NGK") == "true"){
			productInfo.isNutritionalInfoAvailableInVML = isNutritionalInfoAvailable(productInfo.code);
		}
	}
	
	API.dbg("[PosCSOLoadProductsJS] - 'csoProductInfo' has been built successfully");
}


function lIsCCM(product)
{	
	if(!product || !product.Choices || !product.Choices.Component || !product.Tags || product.Tags.Tag.length() == 0)
		return false;
	
	if(product.Tags.(Tag == "CUSTOMER_CHOICE_MEAL").length() == 0)
		return false;
	
	return true;
}

/**
 * @brief - Checks if a given product is a BYB Pre Build product.
 * @returns - true or false.
 * @param - product xml node from product-db.xml
 * @author - Vivian Cury
 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
function lGetIsBybPreBuiltProduct(product){
	
	// CSO-1192 - POS-430 - Kiosk - Ability to Treat Smart Routed Products as Regular Products for Ordering		
	if(csoUseCYTAsRegular) 
	{
		return false;
	}	
	
	// CSO-228 - NGK Support CYT phase 2 configuration - 7826843
	if (product.@productClass == "PRODUCT" &&
		product.SmartRouting.CytProduct != undefined)
	{
		if (product.SmartRouting.CytProduct.toString().toUpperCase() == "PRE_BUILT")
		{
			return true;
		}
	}
	else if (product.@productClass == "PRODUCT" &&
			 product.CustomParameters.Parameter.(@name == "BYBType") != undefined &&
			 product.CustomParameters.Parameter.(@name == "BYBType").@value.toString() == "PRE_BUILT" &&
			 product.CustomParameters.Parameter.(@name == "BYBDisplayOrder") != undefined)
	{
		return true;
	}
	return false;
}

/**
 * @brief - Checks if a given product is a monopoly product.
 * @returns - true or false.
 * @param - product xml node from product-db.xml
 * @author - MY
 * @since - CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function lGetIsMonopoly(product) {
	// CSO-523 - NGK - Product's custom parameter name with invalid character
	if((product.CustomParameters.Parameter.(@name == "CSOIsMonopoly") != null) &&
			(product.CustomParameters.Parameter.(@name == "CSOIsMonopoly").@value.toString() == "true")) {
		return true;
	}
	else {
		return false;
	}
}

/**
 * @brief - Load the product energy information to csoProductInfo. 
 * @author - Paulo Ferreira
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 */
function PodCSOLoadProductEnergyInformation(){

	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	if (sessionSale.get("IS_NGK") != "true") return;

	// Initializing method.
	API.dbg("[PodCSOLoadProductEnergyInformation] - Initializing...");
	
	// The load custom parameter.
	API.dbg("[PodCSOLoadProductEnergyInformation] - csoLoadCustomEnergyInformation value:" + csoLoadCustomEnergyInformation);

	// Set rounding parameter
	var enableRoundingValue = (csoLoadCustomEnergyInformation == "US") ? "TRUE" : "FALSE";
	API.dbg("[PodCSOLoadProductEnergyInformation] - enableRoundingValue value:" + enableRoundingValue);
	
	// If the custom parameter is set as empty, the feature is disabled and must not be considered.
	if (csoLoadCustomEnergyInformation == "") return;

	// Retrieve the energy scale to be displayed as configured.
	var nutritionalInfoDisplayOnMainMenu = lGetCSOUserInterfaceStringParameter("nutritionalInfoDisplayOnMainMenu", "").toUpperCase();
	// If this retrieved parameter is not one of those values, it must not be considered.
	if ((nutritionalInfoDisplayOnMainMenu != "KCAL") &&	(nutritionalInfoDisplayOnMainMenu != "KJ")) return;


	for each (var productInfo in csoProductInfo){

		// If the value of CustomEnergyInformation exists already in the product, this procedure can skip to the next item.
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if ((!csoCalculateEnergyInformation) &&
		    (productInfo.xmlNode.CustomEnergyInformation != null) &&
		    (productInfo.xmlNode.CustomEnergyInformation != undefined)) continue;

		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if ((csoCalculateEnergyInformation) && (productInfo.energyInfo)) continue;
		
		// Initialize the calorie value.
		GetEnergyInformation(productInfo, nutritionalInfoDisplayOnMainMenu);
	}

	API.dbg("[PodCSOLoadProductEnergyInformation] - Finalizing.");

	/**
	 * @brief - Calculate the energy for a CYT Pre-Built Phase 1
	 * @author - Dalton Pericles de Almeida
	 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	 */
	function CalcBybPreBuiltPhase1(product, bybAutoSelection) {
		var removeCanAdds = lGetCSOUserInterfaceStringParameter("hideCanAddsOnGrillScreen", "false") == "true";
	
		var energy = "";
		var autoSelectionProducts = bybAutoSelection.toString().split("|");
		
		for each (var composition in product.xmlNode.Composition.Component) {
			var compositionInfo = csoProductInfo[composition.ProductCode];
			
			if (compositionInfo)
			{	
				if(compositionInfo.energyInfo)
				{
					var portionPortionBasedType = 0;
					var compositionQuantity = 1;
					
					var isPortionBased = (lCanSetLight(compositionInfo.xmlNode) &&
										 ((new BigDecimal(composition.DefaultQuantity)).compareTo(BigDecimal.ZERO) > 0) &&
										 ((new BigDecimal(composition.MaxQuantity)).compareTo(new BigDecimal(composition.DefaultQuantity)) > 0) &&
										 ((new BigDecimal(composition.MinQuantity)).compareTo(BigDecimal.ZERO) == 0)) ? true : false;
										 
					for each (var productSelection in autoSelectionProducts) 
					{
						var selections = productSelection.split(":");
						
						if (selections[0] != composition.ProductCode) continue;
						
						if (isPortionBased == true)
						{
							if (selections.length > 2)
								portionPortionBasedType = (lGetPortionType2(selections[1], composition.DefaultQuantity, selections[2], "Composition", composition.MaxQuantity)).toString();
							else if (selections.length > 1)
								portionPortionBasedType = selections[1];
							else
								portionPortionBasedType = "2";
							
							break;
						}
						
						if (selections.length > 1)
						{
							compositionQuantity = selections[1];
							var qtyInt = parseInt(compositionQuantity);
							var maxQtyInt = parseInt(composition.MaxQuantity);
							if (maxQtyInt < qtyInt) 
								compositionQuantity = composition.MaxQuantity;
						}				
					}
					
					if (isPortionBased == true)
					{
						//0 - None, 1 - Light, 2 - Regular, 3 - Extra
						if(portionPortionBasedType == 0) continue;

						var PortionBasedEnergy = ""
						switch(portionPortionBasedType)
						{
							case "1": //1 - Light
									  PortionBasedEnergy = compositionInfo.energyInfo.LightPortionEnergyInformation ?
														   compositionInfo.energyInfo.LightPortionEnergyInformation : 
														   compositionInfo.energyInfo.CalculatedEnergyInformation;
									  break;
							case "2": //2 - Regular, 3 - Extra
									  PortionBasedEnergy = compositionInfo.energyInfo.CalculatedEnergyInformation;
									  break;
							case "3": //3 - Extra
									  PortionBasedEnergy = compositionInfo.energyInfo.ExtraPortionEnergyInformation ?
														   compositionInfo.energyInfo.ExtraPortionEnergyInformation : 
														   compositionInfo.energyInfo.CalculatedEnergyInformation;
									  break;
						}
						
						if(PortionBasedEnergy != "") PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 Composition: " + composition.ProductCode + " - Energy: " + PortionBasedEnergy);
						
						if(PortionBasedEnergy != "") energy = GetEnergyInformationAdded(PortionBasedEnergy, energy);
					}
					else 
					{
						if(compositionQuantity == 0) continue;

						if(compositionInfo.energyInfo.CalculatedEnergyInformation != "")
						{
							var compositionEnergy = GetEnergyInformationMultiplied(compositionInfo.energyInfo.CalculatedEnergyInformation, compositionQuantity);
							
							if(compositionEnergy != "") PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 Composition: " + composition.ProductCode + " - Energy: " + compositionEnergy);
							
							energy = GetEnergyInformationAdded(compositionEnergy, energy);
						}
					}
				}
			}
		}

		if(energy != "") PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 (composition)- Product: " + product.code + " - Energy: " + energy);
		
		if (product.hasChoices)
		{
			for each (var abstractChoice in product.xmlNode.Choices.Component) 
			{
				if (!lIsProductValid(abstractChoice.ProductCode)) continue;
				
				var abstractChoiceInfo = csoProductInfo[abstractChoice.ProductCode.toString()];
				
				if((abstractChoiceInfo) && (abstractChoiceInfo.hasComposition))
				{
					for each (var concreteChoice in abstractChoiceInfo.xmlNode.Composition.Component)
					{
						var concreteChoiceInfo = csoProductInfo[concreteChoice.ProductCode];
					
						if (concreteChoiceInfo)
						{					
							for each (var productSelection in autoSelectionProducts)
							{
								var selections = productSelection.split(":");
								
								if (selections[0] != concreteChoice.ProductCode) continue;
								
								var concreteChoiceQuantity = 1;
								if (selections.length > 1)
								{
									concreteChoiceQuantity = selections[1];
									var qtyInt = parseInt(concreteChoiceQuantity);
									var maxQtyInt = parseInt(concreteChoice.MaxQuantity);
									if (maxQtyInt < qtyInt)
										concreteChoiceQuantity = concreteChoice.MaxQuantity;
								}
								
								var concreteChoiceEnergy = concreteChoiceInfo.energyInfo.CalculatedEnergyInformation;
								
								if(concreteChoiceEnergy != "") PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 Choice: " + concreteChoice.ProductCode + " - Energy: " + concreteChoiceEnergy);
								
								concreteChoiceEnergy = GetEnergyInformationMultiplied(concreteChoiceEnergy, concreteChoiceQuantity);
								energy = GetEnergyInformationAdded(concreteChoiceEnergy, energy);							
							}
						}
					}
				}
			}
		}
		
		if(energy != "") PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 (composition + Choice)- Product: " + product.code + " - Energy: " + energy);
		
		if (product.xmlNode.CanAdds.Component.length() > 0 && !removeCanAdds)
		{
			for each (var canAdd in product.xmlNode.CanAdds.Component)
			{
				if (!lIsProductValid(canAdd.ProductCode)) continue;
				
				var canAddInfo = csoProductInfo[canAdd.ProductCode];
			
				if (canAddInfo)
				{
					if(canAddInfo.energyInfo)
					{
						if (lCheckCanAdd(product.xmlNode, canAddInfo.xmlNode))
						{
							for each (var productSelection in autoSelectionProducts)
							{
								var selections = productSelection.split(":");
								
								if (selections[0] != canAdd.ProductCode) continue;
									
								var isPortionBased = (lCanSetLight(canAddInfo.xmlNode) &&
													 ((new BigDecimal(canAdd.MaxQuantity)).compareTo(new BigDecimal(canAdd.DefaultQuantity)) > 0) &&
													 ((new BigDecimal(canAdd.MinQuantity)).compareTo(BigDecimal.ZERO) == 0)) ? true : false;

								PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 isPortionBased: " + isPortionBased.toString());
													 
								if (isPortionBased == true)
								{
									var portionPortionBasedType = 0;				
									
									if (selections.length > 2)
									{
										portionPortionBasedType = (lGetPortionType2(selections[1], canAdd.DefaultQuantity, selections[2], "CanAdds", canAdd.MaxQuantity)).toString();
									}
									else if (selections.length > 1)
									{
										portionPortionBasedType = selections[1];
									}
									else
									{
										if(parseInt(canAdd.MaxQuantity) > 1)
											portionPortionBasedType = "2";
										else
											portionPortionBasedType = "1";
									}
									
									if(portionPortionBasedType == 0) break;
									
									var PortionBasedEnergy = ""
									
									PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 portionPortionBasedType: " + portionPortionBasedType);
									
									switch(portionPortionBasedType) 
									{
										case "1": //1 - Light
												  PortionBasedEnergy = canAddInfo.energyInfo.LightPortionEnergyInformation ?
																	   canAddInfo.energyInfo.LightPortionEnergyInformation : 
																	   canAddInfo.energyInfo.CalculatedEnergyInformation;
												  break;
										case "2": //2 - Regular, 3 - Extra
												  if(parseInt(canAdd.MaxQuantity) > 1) PortionBasedEnergy = canAddInfo.energyInfo.CalculatedEnergyInformation;
												  break;
										case "3": //3 - Extra
												  PortionBasedEnergy = canAddInfo.energyInfo.ExtraPortionEnergyInformation ?
																	   canAddInfo.energyInfo.ExtraPortionEnergyInformation : 
																	   canAddInfo.energyInfo.CalculatedEnergyInformation;
												  break;
									}
									
									if(PortionBasedEnergy != "") PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 CanAdd: " + canAdd.ProductCode + " - Energy: " + PortionBasedEnergy);
									
									if(PortionBasedEnergy != "") energy = GetEnergyInformationAdded(PortionBasedEnergy, energy);
									
									break;								
								}
								
								var canAddQuantity = 1;
								if (selections.length > 1)
								{
									canAddQuantity = selections[1];
									var qtyInt = parseInt(canAddQuantity);
									var maxQtyInt = parseInt(canAdd.MaxQuantity);
									if (maxQtyInt < qtyInt) 									
										canAddQuantity = canAdd.MaxQuantity;
								}
								
								if(canAddQuantity == 0) break;
					
								var canAddEnergy = canAddInfo.energyInfo.CalculatedEnergyInformation;
								
								if(canAddEnergy != "") PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 CanAdd: " + canAdd.ProductCode + " - Energy: " + canAddEnergy);
								
								canAddEnergy = GetEnergyInformationMultiplied(canAddEnergy, canAddQuantity);
								energy = GetEnergyInformationAdded(canAddEnergy, energy);
							}
						}
					}
				}
			}
		}		
		
		if(energy != "") PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 (composition + Choice + CanAdd)- Product: " + product.code + " - Energy: " + energy);
		
		if(energy != "") PosCSOLog(CSOLOG_DEBUG, 18435, "CYT PRE_BUILT Phase 1 - Product: " + product.code + " - Energy: " + energy);
		
		return energy;
	}
	
	/**
	 * @brief - Get the energy information (range or value) from a product, depending on the energy display type. 
	 * @author - Paulo Ferreira
	 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	 */
	function GetEnergyInformation(productInfo, nutritionalInfoDisplayOnMainMenu){
	
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		var customEnergy = {};
		customEnergy.EnergyInformation = "";
		customEnergy.CalculatedEnergyInformation = "";
		customEnergy.CalculatedBaseEnergyInformation = "";
		customEnergy.CalculatedByCompositionEnergyInformation = "";
		customEnergy.LightPortionEnergyInformation = "";
		customEnergy.ExtraPortionEnergyInformation = "";
		
		// Safeguard verification
		if (productInfo == null) {
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			return customEnergy; 
		}
		
		// CSO-854 - Inactive Products Nutrition value is also considered while calculating the Nutrition Range
		if (csoCalculateEnergyInformation) 
		{
			if( productInfo.xmlNode == null ||
			    productInfo.xmlNode == undefined ||
			    productInfo.xmlNode.@statusCode != "ACTIVE" ) return customEnergy;

			if( productInfo.xmlNode.@productClass != "CHOICE" &&
			    !PosCheckIfPriceNodeIsValid(productInfo.xmlNode) ) return customEnergy;
		}

		// First, tries to get the information from the productInfo.
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if(csoCalculateEnergyInformation)
		{
			if (productInfo.energyInfo != null)
			{
				customEnergy.EnergyInformation = productInfo.energyInfo.EnergyInformation;
				customEnergy.CalculatedEnergyInformation = productInfo.energyInfo.CalculatedEnergyInformation;
				customEnergy.CalculatedBaseEnergyInformation = productInfo.energyInfo.CalculatedBaseEnergyInformation;
				customEnergy.CalculatedByCompositionEnergyInformation = productInfo.energyInfo.CalculatedByCompositionEnergyInformation;
				customEnergy.LightPortionEnergyInformation = productInfo.energyInfo.LightPortionEnergyInformation;
				customEnergy.ExtraPortionEnergyInformation = productInfo.energyInfo.ExtraPortionEnergyInformation;
				PosCSOLog(CSOLOG_DEBUG, 18435, "[GetEnergyInformation] - Energy value for product ["
                                			 + productInfo.xmlNode.ProductCode + "] is already saved on CSO products list" 
                                			 + " - Energy: " + customEnergy.EnergyInformation 
                                			 + " - Calculated Energy: " + customEnergy.CalculatedEnergyInformation
                                			 + " - Calculated Base Energy: " + customEnergy.CalculatedBaseEnergyInformation
                                			 + " - Calculated By Composition Energy: " + customEnergy.CalculatedByCompositionEnergyInformation
                                			 + " - Light Portion Energy: " + customEnergy.LightPortionEnergyInformation
                                			 + " - Extra Portion Energy: " + customEnergy.ExtraPortionEnergyInformation);
				return customEnergy;
			}
		}
		else 
		{
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if (productInfo.energyInfo != null)
			{
				customEnergy.EnergyInformation = productInfo.energyInfo.EnergyInformation;
				// The value can be returned, because it's already saved on CSO productInfo array.
				PosCSOLog(CSOLOG_DEBUG, 18435, "[GetEnergyInformation] - Energy value for product [" + productInfo.xmlNode.ProductCode + "] is already saved on CSO products: " + customEnergy.EnergyInformation);
				return customEnergy;
			}
		}

		// Initializes two variables to be used to hold the energy and the suffix information.
		var energyInformation = "";
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		var calculatedEnergyInformation = "";		
		var productBaseEnergyValue = "";
		var productByCompositionEnergyValue = "";
		var productLightEnergyValue = "";
		var productExtraEnergyValue = "";
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if(csoCalculateEnergyInformation)
		{
			if(!productInfo.isBybProduct)
			{
				// The energy value will be calculated for value meal.
				// In this last case, the suffix is not considered.
				
				// Create 2 arrays to keep the values to be calculated.
				var compositionsEnergyValue = new Array();
				var choicesEnergyValue = new Array();

				// Look for composition definitions.
				if ((productInfo.xmlNode.Composition.Component != null) && (productInfo.xmlNode.Composition.Component != undefined) ){
					for each (var composition in productInfo.xmlNode.Composition.Component){
						var compositionInfo = csoProductInfo[composition.ProductCode];
						var defQty = Number(composition.DefaultQuantity.toString());
						var minQty = Number(composition.MinQuantity.toString());
						var maxQty = Number(composition.MaxQuantity.toString());
						if(compositionInfo == undefined)
						{
							continue;
						}
						
						if ((productInfo.xmlNode.@productClass == "CHOICE") && 
							(compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOExcludedInNutritionalAccount").@value.toString().toLowerCase() == "true"))
						{
							continue;					
						}
						
						var isPortionBased = lCanSetLight(compositionInfo.xmlNode) && (defQty > 0) && (maxQty > defQty) && (minQty == 0);
						
						var compositionEnergyData = GetEnergyInformation(compositionInfo, nutritionalInfoDisplayOnMainMenu);
						if (compositionEnergyData.CalculatedEnergyInformation == "")
						{
							continue;
						}
						if (productInfo.xmlNode.@productClass == "CHOICE")
						{
							if ((csoIsCustomerSelfPour != "TRUE") &&
								(compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "true"))
							{
								continue;
							}
							if ((csoIsCustomerSelfPour == "TRUE") &&
								(compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "false"))
							{
								continue;
							}
						}
						if(!isPortionBased)
						{
							// It is necessary to know if the product is a CHOICE, because its composition is quantified as 0.
							var quantity = composition.DefaultQuantity;
							if ((productInfo.xmlNode.@productClass == "CHOICE") && (composition.DefaultQuantity == "0")){
								quantity = composition.MaxQuantity;
							}
							compositionEnergyData.CalculatedEnergyInformation = GetEnergyInformationMultiplied(compositionEnergyData.CalculatedEnergyInformation, quantity);
							compositionEnergyData.CalculatedBaseEnergyInformation = GetEnergyInformationMultiplied(compositionEnergyData.CalculatedBaseEnergyInformation, quantity);
						}
						compositionsEnergyValue.push(compositionEnergyData);
					}
				}
				var isCCM = lIsCCM(productInfo.xmlNode);
				
				// Look for choice definitions.
				if ((productInfo.xmlNode.Choices.Component != null) && (productInfo.xmlNode.Choices.Component != undefined)){
					for each (var choice in productInfo.xmlNode.Choices.Component){
						var choiceInfo = csoProductInfo[choice.ProductCode];
						
						if ((choiceInfo == null) || (choiceInfo == undefined))
						{
							continue;
						}
						
						if(choiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOExcludedInNutritionalAccount").@value.toString().toLowerCase() != "true")
						{
							var choiceEnergyData = GetEnergyInformation(choiceInfo, nutritionalInfoDisplayOnMainMenu);

							if (choiceEnergyData.CalculatedEnergyInformation == "") 
							{
								continue;
							}
							// It is necessary to know if the product is a CHOICE, because its composition is quantified as 0.
							// CSO-766	- POS-362 - Customer Choice on NGK (8618134)
							var quantity = isCCM && choice.FlexibleChoice.toString().toUpperCase() == "TRUE" ? choice.MinQuantity : choice.DefaultQuantity;
							if ((productInfo.xmlNode.@productClass == "CHOICE") && (choice.DefaultQuantity == "0")){
								quantity = choice.MaxQuantity;
							}
							// CSO-766	- POS-362 - Customer Choice on NGK (8618134)
							var maxQuantity = isCCM && choice.FlexibleChoice.toString().toUpperCase() == "TRUE"  ? choice.MaxQuantity : quantity;
							// Transform the energy information to integer and multiply by the default quantity.
							choiceEnergyData.CalculatedEnergyInformation = GetEnergyInformationMultiplied(choiceEnergyData.CalculatedEnergyInformation, quantity, maxQuantity);
							choiceEnergyData.CalculatedBaseEnergyInformation = GetEnergyInformationMultiplied(choiceEnergyData.CalculatedBaseEnergyInformation, quantity, maxQuantity);
							choicesEnergyValue.push(choiceEnergyData);
						}
					}	
				}

				if (productInfo.xmlNode.@productClass == "VALUE_MEAL") 
				{
					var compositionsValue = "";
					for each (var composition in compositionsEnergyValue) 
					{
						compositionsValue = GetEnergyInformationAdded(composition.CalculatedEnergyInformation, compositionsValue);
					}
					if(choicesEnergyValue.length >= 1)
					{
						choiceValue = "";
						for each (var choice in choicesEnergyValue) 
						{
							choiceValue = GetEnergyInformationAdded(choice.CalculatedEnergyInformation, choiceValue);
						}
						calculatedEnergyInformation = GetEnergyInformationAdded(choiceValue, compositionsValue);
					}
					else {
						calculatedEnergyInformation = compositionsValue;
					}
				}
				else if (productInfo.xmlNode.@productClass == "CHOICE")
				{
					var MinValue = "";
					var MaxValue = "";
				
					for each (var composition in compositionsEnergyValue) 
					{
						MinValue = GetEnergyInformationCompared(MinValue, composition.CalculatedEnergyInformation, "MINVALUE");
						MaxValue = GetEnergyInformationCompared(MaxValue, composition.CalculatedEnergyInformation, "MAXVALUE");
					}
					for each (var choice in choicesEnergyValue)
					{
						MinValue = GetEnergyInformationCompared(MinValue, choice.CalculatedEnergyInformation, "MINVALUE");
						MaxValue = GetEnergyInformationCompared(MaxValue, choice.CalculatedEnergyInformation, "MAXVALUE");
					}
					if((MinValue != "") && (MaxValue != "") && (MinValue != MaxValue))
						calculatedEnergyInformation = MinValue.concat("-",MaxValue);
					else if(MinValue != "")
						calculatedEnergyInformation = MinValue;
					else if(MaxValue != "")
						calculatedEnergyInformation = MaxValue;
				}
				else if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "true")
				{
					// Get the energy value if it exists.
					var productEnergyValues = GetProductEnergyValue(productInfo, nutritionalInfoDisplayOnMainMenu);
					if (productEnergyValues.Energy == "")
					{
						if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOSelfPourRangeListProducts") != undefined)
						{
							var productList = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOSelfPourRangeListProducts").@value.toString().split("|");

							var MinValue = "";
							var MaxValue = "";
							for (var i = 0; i < productList.length; i++) {
								var itemInfoOfProductList = csoProductInfo[productList[i]];
								if((itemInfoOfProductList.xmlNode.@productClass != "PRODUCT") ||
								   (itemInfoOfProductList.xmlNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "true"))
								{
									continue;
								}
								var productEnergy = GetEnergyInformation(itemInfoOfProductList, nutritionalInfoDisplayOnMainMenu);
								if (productEnergy.CalculatedBaseEnergyInformation == "")
								{
									continue;
								}
								MinValue = GetEnergyInformationCompared(MinValue, productEnergy.CalculatedBaseEnergyInformation, "MINVALUE");
								MaxValue = GetEnergyInformationCompared(MaxValue, productEnergy.CalculatedBaseEnergyInformation, "MAXVALUE");
							}
							if((MinValue != "") && (MaxValue != "") && (MinValue != MaxValue))
								productEnergyValues.Energy = MinValue.concat("-",MaxValue);
							else if(MinValue != "")
								productEnergyValues.Energy = MinValue;
							else if(MaxValue != "")
								productEnergyValues.Energy = MaxValue;
						}
					}
					productBaseEnergyValue = calculatedEnergyInformation = productEnergyValues.Energy;
				}
				else 
				{
					var hasAutoSelection = false;
					
					productByCompositionEnergyValue = "";
					for each (var composition in compositionsEnergyValue) 
					{
						productByCompositionEnergyValue = GetEnergyInformationAdded(composition.CalculatedEnergyInformation, productByCompositionEnergyValue);
					}
				
					if(productInfo.isBybPreBuilt)
					{
						var bybAutoSelection = ((productInfo.isBybPreBuilt && 
						                         productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection") != undefined &&
						                         (productInfo.cytVersion != undefined && productInfo.cytVersion == 1)) ?
						                         productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection").@value.toString() :
						                         "");

						if(bybAutoSelection != "")
						{
							calculatedEnergyInformation = CalcBybPreBuiltPhase1(productInfo, bybAutoSelection);
							
							if(calculatedEnergyInformation != "") hasAutoSelection = true; 
						}
						
						productBaseEnergyValue = productByCompositionEnergyValue;
					}
					else 
					{
						// Get the energy value if it exists.
						var productEnergyValues = GetProductEnergyValue(productInfo, nutritionalInfoDisplayOnMainMenu);
						if (lCanSetLight(productInfo.xmlNode))
						{
							productLightEnergyValue = productEnergyValues.LightPortionEnergy;
							productExtraEnergyValue = productEnergyValues.ExtraPortionEnergy;
						}
						
						if (productEnergyValues.Energy == "")
						{
							productEnergyValues.Energy = productByCompositionEnergyValue;
						}
						productBaseEnergyValue = productEnergyValues.Energy;
					}
					
					if(!hasAutoSelection)
					{
						if(choicesEnergyValue.length >= 1)
						{
							choiceValue = "";
							for each (var choice in choicesEnergyValue) 
							{
								choiceValue = GetEnergyInformationAdded(choice.CalculatedEnergyInformation, choiceValue);
							}
							calculatedEnergyInformation = GetEnergyInformationAdded(choiceValue, productBaseEnergyValue);
						}
						else {
							calculatedEnergyInformation = productBaseEnergyValue;
						}
					}
				}
			}
		}

		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		//Read the configuration without csoCalculateEnergyInformation
		
		// Get the energy beverage self pour if it exists.
		var productEnergyBeverageCustomerSelfPour = GetProductEnergyBeverageCustomerSelfPour(productInfo);
		// Get the energy range if it exists.
		var productEnergyRange = GetProductEnergyRange(productInfo);

		// Get the energy value if it exists.
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		var productEnergyValues = GetProductEnergyValue(productInfo, nutritionalInfoDisplayOnMainMenu);

		// If the energy beverage self pour exists and the parameter isCustomerSelfPour is set as true, it will get this value.
		if ((productEnergyBeverageCustomerSelfPour != "") && (csoIsCustomerSelfPour == "TRUE"))
			energyInformation = productEnergyBeverageCustomerSelfPour;

		// If the energy range exists, it will get this value.
		if ((productEnergyRange != "") && (energyInformation == ""))
			energyInformation = productEnergyRange;

		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		// If the energy range exists, it will get this value.
		if ((productEnergyValues.Energy != "") && (energyInformation == ""))
			energyInformation = productEnergyValues.Energy;
			
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		customEnergy.EnergyInformation = energyInformation;
		customEnergy.CalculatedEnergyInformation = calculatedEnergyInformation;
		customEnergy.CalculatedBaseEnergyInformation = productBaseEnergyValue;
		customEnergy.CalculatedByCompositionEnergyInformation = productByCompositionEnergyValue;
		customEnergy.LightPortionEnergyInformation = productLightEnergyValue;
		customEnergy.ExtraPortionEnergyInformation = productExtraEnergyValue;
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		// Cache the calculated values in csoProductInfo
		// Create a new object before caching because the object returned by GetEnergyInformation can be changed
		productInfo.energyInfo = {
				EnergyInformation: customEnergy.EnergyInformation,
				CalculatedEnergyInformation: customEnergy.CalculatedEnergyInformation,
				CalculatedBaseEnergyInformation: customEnergy.CalculatedBaseEnergyInformation,
				CalculatedByCompositionEnergyInformation: customEnergy.CalculatedByCompositionEnergyInformation,
				LightPortionEnergyInformation: customEnergy.LightPortionEnergyInformation,
				ExtraPortionEnergyInformation: customEnergy.ExtraPortionEnergyInformation
		};
		
		// Write the value found on product list.
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		WriteCustomEnergyInformation(productInfo.xmlNode.ProductCode, energyInformation);
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		PosCSOLog(CSOLOG_INFORMATION, 18435, "[GetEnergyInformation] - Energy value for product [" + productInfo.xmlNode.ProductCode + "]"
											+ " - Energy: " + customEnergy.EnergyInformation
											+ " - Calculated Energy: " + customEnergy.CalculatedEnergyInformation									
											+ " - Calculated Base Energy: " + customEnergy.CalculatedBaseEnergyInformation 
											+ " - Calculated By Composition Energy: " + customEnergy.CalculatedByCompositionEnergyInformation 
											+ " - Light Portion Energy: " + customEnergy.LightPortionEnergyInformation
											+ " - Extra Portion Energy: " + customEnergy.ExtraPortionEnergyInformation);
										 
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		return customEnergy;
	}

	/**
	 * @brief - Validate the energy value 
	 * @author - Dalton Pericles de Almeida
	 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717	 
	 */
	function ValidateEnergyValue(energy, isSelfPour){
		var validationString = /^[0-9]+$/;
		
		if(isSelfPour)
		{
			var values = energy.split('-');
			if(values.length == 2)
			{
				if((validationString.test(values[0]) == true) && (validationString.test(values[1]) == true)) return energy;
				
				return "";
			}
			if(validationString.test(energy) == true) return energy;
		}
		else 
			if(validationString.test(energy) == true) return energy;
			
		return "";
	}

	/**
	 * @brief - Get the energy value from a product, depending on the energy display type. 
	 * @author - Paulo Ferreira
	 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	 * @modified - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717	 
	 */
	function GetProductEnergyValue(productInfo, nutritionalInfoDisplayOnMainMenu){

		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		var productEnergyValues = {};
		productEnergyValues.Energy = "";
		productEnergyValues.LightPortionEnergy = "";
		productEnergyValues.ExtraPortionEnergy = "";	
		isSelfPour = false;

		// Get the value of KCAL or KJ, depending on the set parameter. (Regular value)
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if (nutritionalInfoDisplayOnMainMenu == "KJ")
		{
			if ((csoCalculateEnergyInformation) &&
			    (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "true"))
			{
				isSelfPour = true;
				if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyBeverageCustomerSelfPour") != null)
					productEnergyValues.Energy = productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyBeverageCustomerSelfPour").@value.toString();
			}
			else 
			{
				if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergy") != null)
					productEnergyValues.Energy = productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergy").@value.toString();
			}

			if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalPortionBasedLightEnergy") != null)
				productEnergyValues.LightPortionEnergy = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalPortionBasedLightEnergy").@value.toString();

			if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalPortionBasedExtraEnergy ") != null)
				productEnergyValues.ExtraPortionEnergy = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalPortionBasedExtraEnergy").@value.toString();
		}
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if (nutritionalInfoDisplayOnMainMenu == "KCAL")
		{
			if ((csoCalculateEnergyInformation) &&
			    (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "true"))
			{
				isSelfPour = true;
				if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyBeverageCustomerSelfPourKCal") != null)
					productEnergyValues.Energy = productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyBeverageCustomerSelfPourKCal").@value.toString();
			}
			else 
			{
				if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoKCal") != null)
					productEnergyValues.Energy = productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoKCal").@value.toString();
			}

			if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalPortionBasedLightEnergyKCal") != null)
				productEnergyValues.LightPortionEnergy = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalPortionBasedLightEnergyKCal").@value.toString();

			if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalPortionBasedExtraEnergyKCal") != null)
				productEnergyValues.ExtraPortionEnergy = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalPortionBasedExtraEnergyKCal").@value.toString();
		}
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if(csoCalculateEnergyInformation)
		{
			var energyValidated = ValidateEnergyValue(productEnergyValues.Energy, isSelfPour);
			if((productEnergyValues.Energy != "") && (energyValidated == ""))
			{
				PosCSOLog(CSOLOG_INFORMATION, 18435, "[GetProductEnergyValue] - Energy configured value [" + productEnergyValues.Energy + 
													"] for product [" + productInfo.xmlNode.ProductCode + "]" +
													" is not valid. The system did not consider this configuration.");
			}
			productEnergyValues.Energy = energyValidated;
			
			energyValidated = ValidateEnergyValue(productEnergyValues.LightPortionEnergy, false);
			if((productEnergyValues.LightPortionEnergy != "") && (energyValidated == ""))
			{
				PosCSOLog(CSOLOG_INFORMATION, 18435, "[GetProductEnergyValue] - LIGHT energy configured value [" + productEnergyValues.LightPortionEnergy + 
													"] for product [" + productInfo.xmlNode.ProductCode + "]" +
													" is not valid. The system did not consider this configuration.");
			}
			productEnergyValues.LightPortionEnergy = energyValidated;
			
			energyValidated = ValidateEnergyValue(productEnergyValues.ExtraPortionEnergy, false);
			if((productEnergyValues.ExtraPortionEnergy != "") && (energyValidated == ""))
			{
				PosCSOLog(CSOLOG_INFORMATION, 18435, "[GetProductEnergyValue] - EXTRA energy configured value [" + productEnergyValues.ExtraPortionEnergy + 
													"] for product [" + productInfo.xmlNode.ProductCode + "]" +
													" is not valid. The system did not consider this configuration.");
			}
			productEnergyValues.ExtraPortionEnergy = energyValidated;
		}
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if((!csoCalculateEnergyInformation) && (enableRoundingValue == "TRUE") && (productEnergyValues.Energy != ""))
		{
			PosCSOLog(CSOLOG_INFORMATION, 18435, "[GetProductEnergyValue] - Energy value from product ["+ productInfo.code +"] will be rounded. Current Energy [" + productEnergyValues.Energy + "]");
			productEnergyValues.Energy = RoundEnergyValue(productEnergyValues.Energy);
			PosCSOLog(CSOLOG_INFORMATION, 18435, "[GetProductEnergyValue] - Energy value from product ["+ productInfo.code +"] was rounded. New Energy [" + productEnergyValues.Energy + "]");
			
			return productEnergyValues;
		}
		else 
			return productEnergyValues;
	}

	/**
	 * @brief - Write the energy information (range or value) to a product, depending on the energy display type. 
	 * @author - Paulo Ferreira
	 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	 * @modified - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	 */
	function WriteCustomEnergyInformation(productCode, totalEnergy){
		// Retrieve the energy mask text, edit the value
		var caloriesText = "";
		
		if ((totalEnergy != "") && (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KCAL"))
			caloriesText = PosCSOI18nGetMessageJS("nutritionalInfoKCalTotal", totalEnergy);

		else if ((totalEnergy != "") && (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KJ"))
			caloriesText = PosCSOI18nGetMessageJS("nutritionalInfoEnergyTotal", totalEnergy);

		if(caloriesText != "")
			csoProductInfo[productCode].xmlNode.appendChild(new XML('<CustomEnergyInformation>' + caloriesText + '</CustomEnergyInformation>'))
	}
}

/**
 * @brief - Get the energy beverage self pour from a product. 
 * @author - Paulo Ferreira
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 */
function GetProductEnergyBeverageCustomerSelfPour(productInfo){

	var productEnergyBeverageCustomerSelfPour = "";

	if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyBeverageCustomerSelfPour") != null)
		productEnergyBeverageCustomerSelfPour = productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyBeverageCustomerSelfPour").@value.toString();

	return productEnergyBeverageCustomerSelfPour;
}

/**
 * @brief - Get the energy range from a product. 
 * @author - Paulo Ferreira
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 */
function GetProductEnergyRange(productInfo){

	var productEnergyRange = "";

	if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyRange") != null)
		productEnergyRange = productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergyRange").@value.toString();

	return productEnergyRange;
}

/**
 * @brief - Sums two energyInformation values, respecting the values and ranges.
 * @author - Paulo Ferreira
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 * @param - energyInformationA: a simple or a complex energy value: 3, 3-8 or 3/5
 * @param - energyInformationB: a simple or a complex energy value: 3, 3-8 or 3/5
 */
function GetEnergyInformationAdded(energyInformationA, energyInformationB){

	// If the first energyInformationA is empty, just return the value of energyInformationB.
	if (energyInformationA == "") return energyInformationB;

	var slashIndexA = energyInformationA.indexOf("/");
	var dashIndexA = energyInformationA.indexOf("-");
	var slashIndexB = energyInformationB.indexOf("/");
	var dashIndexB = energyInformationB.indexOf("-");

	// If neither separators are found on the both energyInformation
	if ((slashIndexA == -1) && (dashIndexA == -1) && (slashIndexB == -1) && (dashIndexB == -1)){
		
		var energyA = new BigDecimal(energyInformationA);
		var energyB = new BigDecimal(energyInformationB);

		var result = energyA.add(energyB);
		var roundedResult = result.setScale(0, BigDecimal.ROUND_HALF_EVEN);

		return roundedResult.toString();
	}

	// Initializes the variables.
	var maxEnergyA = new BigDecimal("0.00");
	var minEnergyA = new BigDecimal("0.00");
	var maxEnergyB = new BigDecimal("0.00");
	var minEnergyB = new BigDecimal("0.00");

	// Verifies the separators.
	var separatorA = "";
	if (slashIndexA > -1)
		separatorA = "/";
	else if (dashIndexA > -1)
		separatorA = "-";
	
	var separatorB = "";
	if (slashIndexB > -1)
		separatorB = "/";
	else if (dashIndexB > -1)
		separatorB = "-";

	var separatorTotal = "-";

	// Duplicates the value in case there's only one value incoming. Also set the separator as "-".
	if (separatorA == ""){
		minEnergyA = new BigDecimal(energyInformationA);
		maxEnergyA = new BigDecimal(energyInformationA);
		separatorTotal = "/";
	}
	// Or it splits the value depeding on the separator and set it accordingly.
	else{
		var resA = energyInformationA.split(separatorA);
		minEnergyA = new BigDecimal(resA[0]);
		maxEnergyA = new BigDecimal(resA[1]);
	}
	
	// Duplicates the value in case there's only one value incoming. Also set the separator as "-".
	if (separatorB == ""){
		minEnergyB = new BigDecimal(energyInformationB);
		maxEnergyB = new BigDecimal(energyInformationB);
		separatorTotal = "/";
	}
	// Or it splits the value depeding on the separator and set it accordingly.
	else{
		var resB = energyInformationB.split(separatorB);
		minEnergyB = new BigDecimal(resB[0]);
		maxEnergyB = new BigDecimal(resB[1]);
	}

	var minEnergy = minEnergyA.add(minEnergyB);
	var maxEnergy = maxEnergyA.add(maxEnergyB);

	var roundedMinEnergy = minEnergy.setScale(0, BigDecimal.ROUND_HALF_EVEN);
	var roundedMaxEnergy = maxEnergy.setScale(0, BigDecimal.ROUND_HALF_EVEN);

	if ((dashIndexA > -1) || (dashIndexB > -1))  separatorTotal = "-";
	
	var result = roundedMinEnergy.toString().concat(separatorTotal,roundedMaxEnergy.toString());

	return result;
}

/**
 * @brief - Subtracts values (the values can be ranges).
 * @author - Dalton Pericles de Almeida
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 * @param - energyInformationA: value that will be reduced. It can be a simple or a complex energy value: 3, 3-8 or 3/5 
 * @param - energyInformationB: value to be subtracted from the first parameter. It can be a simple or a complex energy value: 3, 3-8 or 3/5
 */
function GetEnergyInformationSubtracted(energyInformationA, energyInformationB){

	// If the energyInformationA or energyInformationB are empty, just return the value of energyInformationA.
	if ((energyInformationA == "") || (energyInformationB == "")) return energyInformationA;

	var slashIndexA = energyInformationA.indexOf("/");
	var dashIndexA = energyInformationA.indexOf("-");
	var slashIndexB = energyInformationB.indexOf("/");
	var dashIndexB = energyInformationB.indexOf("-");
	
	// If neither separators are found on the both energyInformation
	if ((slashIndexA == -1) && (dashIndexA <= 0) && (slashIndexB == -1) && (dashIndexB <= 0)){
		
		var energyA = new BigDecimal(energyInformationA);
		var energyB = new BigDecimal(energyInformationB);

		var result = energyA.subtract(energyB);
		var roundedResult = result.setScale(0, BigDecimal.ROUND_HALF_EVEN);
		
		if (roundedResult < 0) roundedResult = 0;
				
		return roundedResult.toString();
	}

	// Initializes the variables.
	var maxEnergyA = new BigDecimal("0.00");
	var minEnergyA = new BigDecimal("0.00");
	var maxEnergyB = new BigDecimal("0.00");	
	var minEnergyB = new BigDecimal("0.00");

	// Verifies the separators.
	var separatorA = "";
	if (slashIndexA > -1)
		separatorA = "/";
	else if (dashIndexA > -1)
		separatorA = "-";
	
	var separatorB = "";
	if (slashIndexB > -1)
		separatorB = "/";
	else if (dashIndexB > -1)
		separatorB = "-";

	var separatorTotal = "-";
	if ((separatorA == "/") && (separatorB == "/"))
	{
		separatorTotal = "/";
	}

	// Duplicates the value in case there's only one value incoming. Also set the separator as "-".
	if (separatorA == ""){
		minEnergyA = new BigDecimal(energyInformationA);
		maxEnergyA = new BigDecimal(energyInformationA);
	}
	// Or it splits the value depending on the separator and set it accordingly.
	else{
		var resA = energyInformationA.split(separatorA);
		minEnergyA = new BigDecimal(resA[0]);
		maxEnergyA = new BigDecimal(resA[1]);
	}
	
	// Duplicates the value in case there's only one value incoming. Also set the separator as "-".
	if (separatorB == ""){
		minEnergyB = new BigDecimal(energyInformationB);
		maxEnergyB = new BigDecimal(energyInformationB);
	}
	// Or it splits the value depeding on the separator and set it accordingly.
	else{
		var resB = energyInformationB.split(separatorB);
		minEnergyB = new BigDecimal(resB[0]);
		maxEnergyB = new BigDecimal(resB[1]);
	}

	var minEnergy = minEnergyA.subtract(minEnergyB);
	var maxEnergy = maxEnergyA.subtract(maxEnergyB);

	var roundedMinEnergy = minEnergy.setScale(0, BigDecimal.ROUND_HALF_EVEN);
	var roundedMaxEnergy = maxEnergy.setScale(0, BigDecimal.ROUND_HALF_EVEN);

	var result = roundedMinEnergy.toString().concat(separatorTotal,roundedMaxEnergy.toString());

	return result;
}

/**
 * @brief - Compare the Fist (first) and Second (second) parameters
 * @returns - The return will be the biggest value if the Third parameter (type) is "MAXVALUE" or the lowest value if Third parameter is "MINVALUE". 
 * @author - Dalton Pericles de Almeida
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function GetEnergyInformationCompared(first, second, type)
{
	var firstValue = "";
	var secondValue = "";

	for(var i=0 ; i < 2; i++)
	{
		if((i == 0) && ((first == undefined) || (first == ""))) continue;
		if((i == 1) && ((second == undefined) || (second == ""))) continue;
		
		var partialValue = "";
		
		if(i == 0) partialValue = first;
		else partialValue = second;

		var slashIndex = partialValue.indexOf("/");
		var dashIndex = partialValue.indexOf("-");
		
		// If neither separators are found on the string.
		if ((slashIndex !== -1) || (dashIndex != -1)){
			var separator = "";
			if (slashIndex > -1) separator = "/";
			else separator = "-";
			var res = partialValue.split(separator);
			if(type == "MINVALUE") partialValue = res[0];
			else partialValue = res[1];
		}
		
		if(i == 0) firstValue = partialValue;
		else secondValue = partialValue;
	}

	var stringReturn = "";
	if((firstValue != "") && (secondValue != ""))
	{
		var firstEnergy = new BigDecimal(firstValue);
		var secondEnergy = new BigDecimal(secondValue);
		if (firstEnergy.compareTo(secondEnergy) < 0)
		{
			if(type == "MINVALUE") stringReturn = firstEnergy.toString();
			else stringReturn =  secondEnergy.toString();
		}
		else 
		{
			if(type == "MINVALUE") stringReturn = secondEnergy.toString();
			else stringReturn =  firstEnergy.toString();
		}
	}
	else if(firstValue != "") 
	{
		stringReturn = firstValue;
	}
	else if(secondValue != "")
	{
		stringReturn = secondValue;
	}
	return stringReturn;
}

/**
 * @brief - Multiply the value of the energyInformation by the defaultQuantity. 
 * @author - Paulo Ferreira
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 */
function GetEnergyInformationMultiplied(energyInformation, quantity, maxQuantity){
	
	var decimalQuantity = new BigDecimal(quantity);
	// CSO-766	- POS-362 - Customer Choice on NGK (8618134)
	var decimalMaxQuantity = maxQuantity ? new BigDecimal(maxQuantity) : decimalQuantity;
	
	var maxEnergy = new BigDecimal("0.00");
	var minEnergy = new BigDecimal("0.00");

	var slashIndex = energyInformation.indexOf("/");
	var dashIndex = energyInformation.indexOf("-");
	
	// If neither separators are found on the string.
	if ((slashIndex == -1) && (dashIndex == -1) && decimalQuantity == decimalMaxQuantity){
		var energy = new BigDecimal(energyInformation);
		var result = energy.multiply(decimalQuantity);
		var roundedResult = result.setScale(0, BigDecimal.ROUND_HALF_EVEN);
		return roundedResult.toString();
	}
	
	var res = [];
	var separator = "";
	if (slashIndex > -1)
		separator = "/";
	else
		separator = "-";

	// If neither separators are found on the string.
	if ((slashIndex == -1) && (dashIndex == -1)){	
		res[0] = energyInformation;
		res[1] = energyInformation;
	}
	else{
		res = energyInformation.split(separator);	
	}

	var energy = new BigDecimal(res[0]);
	minEnergy = energy.multiply(decimalQuantity);
	var roundedMinEnergy = minEnergy.setScale(0, BigDecimal.ROUND_HALF_EVEN);
	
	energy = new BigDecimal(res[1]);
	// CSO-766	- POS-362 - Customer Choice on NGK (8618134)
	maxEnergy = energy.multiply(decimalMaxQuantity);
	var roundedMaxEnergy = maxEnergy.setScale(0, BigDecimal.ROUND_HALF_EVEN);

	return roundedMinEnergy.toString().concat(separator,roundedMaxEnergy.toString());
}

/**
 * @brief - Divide the value of the energyInformation by the defaultQuantity. 
 * @author - Dalton Pericles de Almeida
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 */
function GetEnergyInformationDivided(energyInformation, quantity){
	
	var decimalQuantity = new BigDecimal(quantity);
	var maxEnergy = new BigDecimal("0.00");
	var minEnergy = new BigDecimal("0.00");

	var slashIndex = energyInformation.indexOf("/");
	var dashIndex = energyInformation.indexOf("-");

	// If neither separators are found on the string.
	if ((slashIndex == -1) && (dashIndex == -1)){
		var energy = new BigDecimal(energyInformation);
		var result = energy.divide(decimalQuantity);
		var roundedResult = result.setScale(0, BigDecimal.ROUND_HALF_EVEN);
		return roundedResult.toString();
	}

	var separator = "";
	if (slashIndex > -1)
		separator = "/";
	else
		separator = "-";
	
	var res = energyInformation.split(separator);	

	var energy = new BigDecimal(res[0]);
	minEnergy = energy.divide(decimalQuantity);
	var roundedMinEnergy = minEnergy.setScale(0, BigDecimal.ROUND_HALF_EVEN);
	
	energy = new BigDecimal(res[1]);
	maxEnergy = energy.divide(decimalQuantity);
	var roundedMaxEnergy = maxEnergy.setScale(0, BigDecimal.ROUND_HALF_EVEN);

	return roundedMinEnergy.toString().concat(separator,roundedMaxEnergy.toString());
}

/**
 * @brief - Get the energy suffix from a product. 
 * @author - Paulo Ferreira
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 * @modified - SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
 */
function GetProductEnergySuffix(productInfo){

	var productEnergySuffix = "";

	// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
	if ((productInfo == null) || (productInfo == undefined) || (productInfo.xmlNode == null) || (productInfo.xmlNode == undefined)){
		API.dbg("[GetProductEnergySuffix] - product null or undefined, returning empty string")
		return "";
	}

	if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergySuffix") != null)
		productEnergySuffix = productInfo.xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergySuffix").@value.toString();

	// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
	if (productEnergySuffix == ""){
		API.dbg("[GetProductEnergySuffix] - productEnergySuffix is empty, returning empty string");
		return "";
	}
		

	// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
	return "MSG_NUTRITIONALSUFFIX_" + productEnergySuffix;
}

/**
 * @brief - Sorts an array with energyInformation values, respecting the values and ranges. 
 * @author - Paulo Ferreira
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 */
function GetEnergyInformationSorted(energyInformationArray){

	var minEnergy = Number("999999");
	var maxEnergy = Number("0");
	var minEnergyRes = Number("0");
	var maxEnergyRes = Number("0");
	var separatorTotal = "/";
	var iterations = 0;

	// If there's only one element, it will be returned just this value.
	if (energyInformationArray.length == 1) return energyInformationArray[0];

	for each (var energyInformation in energyInformationArray) {
		// Find the correct separator.
		// If there's a range, the final value will be a range as well.
		var slashIndex = energyInformation.indexOf("/");
		var dashIndex = energyInformation.indexOf("-");

		var separator = "";
		if (slashIndex > -1)
			separator = "/";
		else if (dashIndex > -1){
			separator = "-";
			separatorTotal = "-";
		}

		// If the value is simple value, it will be splitted.
		if (separator == ""){
			minEnergyRes = Number(energyInformation);
			maxEnergyRes = Number(energyInformation);
			separator = "/";
		}
		else{
			var res = energyInformation.split(separator);
			minEnergyRes = Number(res[0]);
			maxEnergyRes = Number(res[1]);
		}

		// Check the maximum and minimum values and add 1 to iteraction counter.
		// At least two iterations will happen, the first two for the first element.
		if (minEnergy > minEnergyRes){
			iterations++;
			minEnergy = minEnergyRes;
		}
		if (maxEnergy < maxEnergyRes){
			iterations++;
			maxEnergy = maxEnergyRes;
		}

	}

	// SQC-7496 - [NGK 5.12] US Nutrition Enhancement - Problems in Energy Range exhibition in sub choice
	// If there are no valid values and there's no iteration, the returned value must be empty.
	if (iterations == 0) return "";

	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	if ((!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
	{
		// If more than two iterations happen, that means that there's a range, not an option.
		// TODO: review the separatorTotal logic.
		if ((energyInformationArray.length > 2) || (iterations > 3))  separatorTotal = "-";
	}
	else 
	{
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		// If more than one iterations happen, that means that there's a range.
		if ((energyInformationArray.length >= 2) || (iterations >= 2))  separatorTotal = "-";
	}

	// if the two values are the same, just return on value.
	if (minEnergy == maxEnergy) return minEnergy.toString();
	
	// Otherwise, the concatenation will be returned.
	var result = minEnergy.toString().concat(separatorTotal, maxEnergy.toString());
	
	return result;
}

/**
 * @brief - Calculate the custom energy value for a product. 
 * @author - Dalton Pericles de Almeida
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function lCalculateEnergyForProductInView(product)
{
	var energyValue = "";
		
	if((product != null) && (product != undefined))
	{	
		if (csoProductInfo[product.@code.toString()].xmlNode.@productClass == "VALUE_MEAL")
		{
			var productInfo = csoProductInfo[product.@code.toString()];
			
			for each (var composition in productInfo.xmlNode.Composition.Component)
			{
				// CSO-694 - [MR3 COE] In Kiosk, the nutrition calorie calculation is incorrect when ordering a "2 cheeseburger large meal"
				var subProductQty = 0;				
				var compositionQty = Number(composition.DefaultQuantity);

				for each (var subProduct in product.Product)
				{
					// CSO-694 - [MR3 COE] In Kiosk, the nutrition calorie calculation is incorrect when ordering a "2 cheeseburger large meal"				
					if(subProduct.@code.toString() == composition.ProductCode.toString()) subProductQty = subProductQty + Number(subProduct.@qty);
				}

				// CSO-694 - [MR3 COE] In Kiosk, the nutrition calorie calculation is incorrect when ordering a "2 cheeseburger large meal"
				if(compositionQty > subProductQty)
				{
					var compositionInfo = csoProductInfo[composition.ProductCode.toString()];
					if (compositionInfo)
					{
						// CSO-694 - [MR3 COE] In Kiosk, the nutrition calorie calculation is incorrect when ordering a "2 cheeseburger large meal"
						if ((compositionInfo.energyInfo) && (compositionInfo.energyInfo.CalculatedBaseEnergyInformation != ""))
						{
							var compositionEnergy = compositionInfo.energyInfo.CalculatedBaseEnergyInformation;

							// CSO-694 - [MR3 COE] In Kiosk, the nutrition calorie calculation is incorrect when ordering a "2 cheeseburger large meal"					
							compositionQty = compositionQty - subProductQty;
							if(compositionQty > 1) compositionEnergy = GetEnergyInformationMultiplied(compositionEnergy, compositionQty);

							// CSO-694 - [MR3 COE] In Kiosk, the nutrition calorie calculation is incorrect when ordering a "2 cheeseburger large meal"
							var fatherQty = Number(product.@qty);
							if(fatherQty > 1) compositionEnergy = GetEnergyInformationMultiplied(compositionEnergy, fatherQty);
							
							energyValue = GetEnergyInformationAdded(compositionEnergy, energyValue);
						}
					}
				}
			}
			for each (var subProduct in product.Product)
			{
				var energySubProductValue = lCalculateEnergyForProductInView(subProduct);
				energyValue = GetEnergyInformationAdded(energySubProductValue, energyValue);
				subProduct.@energyBase = energySubProductValue;
				
				// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
				var subProductCode = subProduct.@code.toString();
				if ((csoProductInfo[subProductCode]) && (csoProductInfo[subProductCode].hasEnergySuffix))
				{
					subProduct.@energySuffix = PosCSOI18nGetMessageJS(GetProductEnergySuffix(csoProductInfo[subProductCode]));
				}
				subProduct.@energy = FormatEnergyValue(RoundEnergy(subProductCode, energySubProductValue), subProductCode);
			}
		}
		else 
		{
			var productInfo = csoProductInfo[product.@code.toString()];
			if (productInfo)
			{
				if (productInfo.energyInfo)
				{
					var fatherQty = Number(product.@qty);
					
					if(productInfo.isBybProduct.toString() != "true")
					{
						if((product.Grill.length() > 0) &&
						   (csoCalculateEnergyRecalculateEnergyOnGrill) &&
						   (productInfo.energyInfo))
						{
							energyValue = productInfo.energyInfo.CalculatedByCompositionEnergyInformation;
							if(energyValue == "") energyValue = productInfo.energyInfo.CalculatedBaseEnergyInformation;
						}
						else
						{
							energyValue = productInfo.energyInfo.CalculatedBaseEnergyInformation;
						}
						if(energyValue != "") energyValue = GetEnergyInformationMultiplied(energyValue, Number(product.@qty.toString()));
					}
					else 
					{
						for each (var composition in productInfo.xmlNode.Composition.Component)
						{
							var foundComposition = false;

							for each (var subProduct in product.Product)
							{
								if(subProduct.@code.toString() == composition.ProductCode.toString()) foundComposition = true;
							}
							if(!foundComposition)
							{
								var compositionInfo = csoProductInfo[composition.ProductCode.toString()];
								if((compositionInfo) && (compositionInfo.energyInfo))
								{
									var compositionEnergy = compositionInfo.energyInfo.CalculatedBaseEnergyInformation;
									if(compositionEnergy != "")
									{
										//CSO-807 - Kiosk - Nutritional feature - considering only one hamburger kcal
										var compositionQty = Number(composition.DefaultQuantity);
										
										//CSO-807 - Kiosk - Nutritional feature - considering only one hamburger kcal
										if(compositionQty > 1)
										{
											compositionEnergy = GetEnergyInformationMultiplied(compositionEnergy, compositionQty);
										}
										
										if(fatherQty > 1)
										{
											compositionEnergy = GetEnergyInformationMultiplied(compositionEnergy, fatherQty);
										}
										energyValue = GetEnergyInformationAdded(compositionEnergy, energyValue);
									}
								}
							}
						}
					}

					var isCYT  = ((productInfo.isBybProduct.toString() == "true") || (productInfo.isBybPreBuilt.toString() == "true"));

					for each (var subProduct in product.Product)
					{
						//CSO-674 - [MR3 COE] At kiosk for Build Your Own CYT burgers which have grilled chicken as their deafult patty for the burger, it is not calculating the calories for Grilled chicken filet patty.
						if(productInfo.isBybProduct.toString() != "true")
						{
							// SQC-8539 - [NGK5.14] Nutritional - Problem when the product has a choice
							var matchesComposition = false;
							for each(var comp in productInfo.xmlNode.Composition.Component) {
								if (comp.ProductCode == subProduct.@code) {
									matchesComposition = true;
									continue;
								}
							}
							if (matchesComposition) continue;
						}
					
						var energySubProductValue = lCalculateEnergyForProductInView(subProduct);
						// CSO-735 - [DRM] KIOSK C4P6 : Calorie value for CYT Beef customized burger displayed in the order basket is incorrect. The calorie value of the protein is not included in the total calories. Value is displayed correctly in the CYT review and order review screen.
						if((productInfo.isBybProduct.toString() == "true") || ((subProduct.@forceCompDisplay != "POS") && (subProduct.@forceCompDisplay != "ALL")))
						{
							energyValue = GetEnergyInformationAdded(energySubProductValue, energyValue);
						}
						subProduct.@energyBase = energySubProductValue;
						
						// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
						var subProductCode = subProduct.@code.toString();
						if ((csoProductInfo[subProductCode]) && (csoProductInfo[subProductCode].hasEnergySuffix))
						{
							subProduct.@energySuffix = PosCSOI18nGetMessageJS(GetProductEnergySuffix(csoProductInfo[subProductCode]));
						}
						subProduct.@energy = FormatEnergyValue(RoundEnergy(subProductCode, energySubProductValue), subProductCode);
					}
					
					if((csoCalculateEnergyRecalculateEnergyOnGrill) || (isCYT))
					{
						for each (grill in product.Grill) 
						{
							var productGrillInfo = csoProductInfo[grill.@code.toString()];
							if ((productGrillInfo) && (productGrillInfo.energyInfo) && (productGrillInfo.energyInfo.CalculatedBaseEnergyInformation != ""))
							{
								var grillEnergy = "";
								var isComposition = false;
								var reducedEnergy = false;
								if ((productInfo.xmlNode.Composition.Component != null) && (productInfo.xmlNode.Composition.Component != undefined))
								{
									for each (var composition in productInfo.xmlNode.Composition.Component)
									{
										if(composition.ProductCode.toString() == grill.@code.toString())
										{
											isComposition = true;
											break;
										}
									}
								}
								
								var isPortionBased = false;
								var curQty = Number(grill.@qty);
								var defQty = Number(grill.@defQty);
								var maxQty = Number(grill.@maxQty);
								var minQty = Number(grill.@minQty);
								if(isComposition)
									isPortionBased = lCanSetLight(productGrillInfo.xmlNode) && (defQty > 0) && (maxQty > defQty) && (minQty == 0);
								else 
									isPortionBased = lCanSetLight(productGrillInfo.xmlNode) && (maxQty > defQty) && (minQty == 0);
							
								if(isPortionBased)
								{
									var grillRegularEnergy = "";
									grillRegularEnergy = productGrillInfo.energyInfo.CalculatedEnergyInformation;
									
									if((isComposition) && (curQty == 0))
										grillEnergy = "";
									else 
									{
										/*CSO-680 [MR3 COE] At Kiosk for CYT burgers, for the items which are portion based, 
											when extra portion is chosen its not recalculating the calorie value.
											Solution: grill.@qty has 2 when portion-based and Extra(canAdd)*/
										var grillItemType = isComposition ? "Composition" : "CanAdds";
										var grillQty = Number(grill.@npQty);
										var portionType = lGetPortionType2(grillQty, defQty, grill.@modifiers, grillItemType, maxQty);
										//Checking light quantity
										if(portionType == 1 && productGrillInfo.energyInfo.LightPortionEnergyInformation != ""){
											grillEnergy = productGrillInfo.energyInfo.LightPortionEnergyInformation;
											if(isComposition) reducedEnergy = true;
										}
										else if (portionType == 3 && productGrillInfo.energyInfo.ExtraPortionEnergyInformation != "")
											grillEnergy = productGrillInfo.energyInfo.ExtraPortionEnergyInformation;
										else
											grillEnergy = grillRegularEnergy;
									}
									
									if(fatherQty > 1)
									{
										grillRegularEnergy = GetEnergyInformationMultiplied(grillRegularEnergy, fatherQty);
										grillEnergy = GetEnergyInformationMultiplied(grillEnergy, fatherQty);
									}
									if(isComposition)
									{
										if(grillEnergy != grillRegularEnergy)
										{
											if (grillRegularEnergy != "")
												energyValue = GetEnergyInformationSubtracted(energyValue, grillRegularEnergy);
											if (grillEnergy != "")
												energyValue = GetEnergyInformationAdded(energyValue, grillEnergy);
										}
										else
										{
											reducedEnergy = false;
										}
									}
									else 
									{
										if (grillEnergy != "")
											energyValue = GetEnergyInformationAdded(energyValue, grillEnergy);
									}
								}
								else 
								{
									if(productGrillInfo.energyInfo.CalculatedBaseEnergyInformation != "")
									{
										grillEnergy = productGrillInfo.energyInfo.CalculatedBaseEnergyInformation;
										var totalDefQty = defQty * fatherQty;
										if(curQty != totalDefQty)
										{
											if(curQty < totalDefQty) 
											{
												var qtyChanged = totalDefQty - curQty;
												grillEnergy = GetEnergyInformationMultiplied(grillEnergy, qtyChanged.toString());
												energyValue = GetEnergyInformationSubtracted(energyValue, grillEnergy);
												reducedEnergy = true;
											}
											else 
											{
												var qtyChanged = curQty - totalDefQty;
												grillEnergy = GetEnergyInformationMultiplied(grillEnergy, qtyChanged.toString());
												energyValue = GetEnergyInformationAdded(energyValue, grillEnergy);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return energyValue;
}

/**
 * @brief - Calculate the custom energy value for a XML item from kiosk view. 
 * @author - Dalton Pericles de Almeida
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function lCalculateEnergyForItemsInView(xmlItem)
{
	if((xmlItem != null) && (xmlItem != undefined))
	{	
		for each (product in xmlItem.Product) 
		{
			product.@energyBase = lCalculateEnergyForProductInView(product);
			/* CSO-1193 - POS-471 - Order Review Nutrition Enhancement (Linked to NMR-316) */
			var deltaEnergy = lFixEnergyValueInOrderSummaryForAmericanLayout(product);

			// SQS-269 - [NGK5.17.1 Nutrition Enhancements] Incorrect energy range in the PDP after select Button "Edit" from Order Review
			// CSO-1319 - Kiosk SP8.5 PR2 S4: [Order Review Nutrition Enhancement] ‘0 Cal’ is displaying for the Bun and Protein separately for SCR sandwich in Order Review screen
			var productEnergyBase = product.@energyBase;
			if(deltaEnergy != "0")
			{
				productEnergyBase = GetEnergyInformationSubtracted(product.@energyBase, deltaEnergy);
			}

			// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
			var productCode = product.@code.toString();
			if ((csoProductInfo[productCode]) && (csoProductInfo[productCode].hasEnergySuffix))
			{
				product.@energySuffix = PosCSOI18nGetMessageJS(GetProductEnergySuffix(csoProductInfo[productCode]));
			}

			// SQS-269 - [NGK5.17.1 Nutrition Enhancements] Incorrect energy range in the PDP after select Button "Edit" from Order Review
			product.@energy = FormatEnergyValue(RoundEnergy(productCode, productEnergyBase), productCode);
		}
	}
    
	/* CSO-1193 - POS-471 - Order Review Nutrition Enhancement (Linked to NMR-316) */
	function lFixEnergyValueInOrderSummaryForAmericanLayout(product)
	{
		var deltaTotalEnergy = "0";
		for each (var subProduct in product.Product)
		{
			// CSO-1319 - Kiosk SP8.5 PR2 S4: [Order Review Nutrition Enhancement] ‘0 Cal’ is displaying for the Bun and Protein separately for SCR sandwich in Order Review screen
			var subProductEnergyBase = "";
			if(subProduct.@energyBase != undefined)
			{
				subProductEnergyBase = subProduct.@energyBase;
			}
			
			var deltaEnergy = lFixEnergyValueInOrderSummaryForAmericanLayout(subProduct);
			
			// CSO-1319 - Kiosk SP8.5 PR2 S4: [Order Review Nutrition Enhancement] ‘0 Cal’ is displaying for the Bun and Protein separately for SCR sandwich in Order Review screen
			if(deltaEnergy != "0")
			{
				deltaTotalEnergy = GetEnergyInformationAdded(deltaTotalEnergy, deltaEnergy);	
				// SQS-269 - [NGK5.17.1 Nutrition Enhancements] Incorrect energy range in the PDP after select Button "Edit" from Order Review
				subProductEnergyBase = GetEnergyInformationSubtracted(subProduct.@energyBase, deltaEnergy);
			}
			
			// SQS-266 - [NGK 5.17.1 - Nutrition Enhancements] - Incorrect value in the Order review ordering McNuggets Meal
			// SQS-269 - [NGK5.17.1 Nutrition Enhancements] Incorrect energy range in the PDP after select Button "Edit" from Order Review
			// CSO-1319 - Kiosk SP8.5 PR2 S4: [Order Review Nutrition Enhancement] ‘0 Cal’ is displaying for the Bun and Protein separately for SCR sandwich in Order Review screen
			if(subProductEnergyBase != "")
			{
				subProduct.@energy = FormatEnergyValue(RoundEnergy(subProduct.@code.toString(), subProductEnergyBase), subProduct.@code.toString()); 
			}
			
			if (subProduct.@solvedChoice && subProduct.@solvedChoice.toString().length != 0)
			{
				var xml = csoProductInfo[subProduct.@solvedChoice].xmlNode;
				if (xml.@productClass == "CHOICE" && xml.CustomParameters && xml.CustomParameters.Parameter.(@name == "orderReviewNutritionTotalChoiceItemsExcluded").@value.toString().toLowerCase() == "true") 
				{
					deltaTotalEnergy = GetEnergyInformationAdded(deltaTotalEnergy, subProduct.@energyBase);
					xml = csoProductInfo[subProduct.@code].xmlNode;
					var addPrefixParameter = xml.CustomParameters.Parameter.(@name == "CSONutritionalAddPrefix");
					var choiceAddPrefix = (addPrefixParameter && addPrefixParameter.@value.toString().toLowerCase() == "true");
					if (choiceAddPrefix) 
					{
						subProduct.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", subProduct.@energy);
					}
					continue;
				}
				if (mustDisplayItemCalorieOnTheOrderReview == false) 
				{
					subProduct.@energy = "";
				}
				continue;
			}
			if(csoProductInfo[product.@code.toString()].xmlNode.@productClass == "VALUE_MEAL" && mustDisplayItemCalorieOnTheOrderReview == false)
			{
				subProduct.@energy = "";
			}
		}
		return deltaTotalEnergy;
	}
}

/**
 * @brief - Get the custom energy value from a product, just reading the value from CSO. 
 * @author - Paulo Ferreira
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 * @modified - SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selected private string energySuffix
 * @modified - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function lGetCustomEnergyInformation(productCode)
{
	var customEnergy = "";
	
	if (productCode == "") return;
	var product = csoProductInfo[productCode.toString()];

	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	if(csoCalculateEnergyInformation && PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true)	
	{
		if ((product != undefined) && (product.energyInfo))
			customEnergy = product.energyInfo.CalculatedEnergyInformation;
			
		// The value is NOT rounded and it is NOT formatted when the csoCalculateEnergyInformation is "TRUE".
		return customEnergy;	
	}
	
	if ((product != undefined) && (product.xmlNode.CustomEnergyInformation != null) && (product.xmlNode.CustomEnergyInformation != undefined))
		customEnergy = trim(product.xmlNode.CustomEnergyInformation.toString());

	return customEnergy;
}

/**
 * @brief - Formats energy value.
 * @author - Dalton Pericles de Almeida
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 * @modified - CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
 */
function FormatEnergyValue(energyValue, productCode){

	if(energyValue != "")
	{
		// Check what type of energy is using.
		var nutritionalInfoDisplayOnMainMenu = lGetCSOUserInterfaceStringParameter("nutritionalInfoDisplayOnMainMenu", "");
		if (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KCAL")
			energyValue = PosCSOI18nGetMessageJS("nutritionalInfoKCalTotal", energyValue);
		else if (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KJ")
			energyValue = PosCSOI18nGetMessageJS("nutritionalInfoEnergyTotal", energyValue);
		
		// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
		if((productCode) && (csoProductInfo[productCode]) && (csoProductInfo[productCode].hasEnergySuffix))
			energyValue += PosCSOI18nGetMessageJS(GetProductEnergySuffix(csoProductInfo[productCode]));
	}
	return energyValue;
}

/**
 * @brief - Get the correct format for the energy
 * @author - Vivian Cury
 * @since - CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
 */
function GetEnergyFormat(productCode) {
	var mask = "";
	var suffix = "";
	
	// Check what type of energy is using.
	var nutritionalInfoDisplayOnMainMenu = lGetCSOUserInterfaceStringParameter("nutritionalInfoDisplayOnMainMenu", "");
	if (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KCAL")
		mask = "nutritionalInfoKCalTotal";
	else if (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KJ")
		mask = "nutritionalInfoEnergyTotal";
	
	if((productCode) && (csoProductInfo[productCode]) && (csoProductInfo[productCode].hasEnergySuffix))
		suffix = PosCSOI18nGetMessageJS(GetProductEnergySuffix(csoProductInfo[productCode]));
	
	return {
		energyMask: mask,
		energySuffix: suffix
	};
}

/**
 * @brief - Rounds the energy.
 * @author - Dalton Pericles de Almeida
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function RoundEnergy(prodCode, energyValue){

	if(energyValue != "")
	{
		PosCSOLog(CSOLOG_INFORMATION, 18435, "[RoundEnergy] - Energy value from product ["+ prodCode +"] will be rounded. Current Energy [" + energyValue + "]");
		energyValue = RoundEnergyValue(energyValue);
		PosCSOLog(CSOLOG_INFORMATION, 18435, "[RoundEnergy] - Energy value from product ["+ prodCode +"] was rounded. New Energy [" + energyValue + "]");
	}
	return energyValue;
}

/**
 * @brief - Rounds the energy value.
 * @author - Dalton Pericles de Almeida
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function RoundEnergyValue(energyValue){
	
	if (energyValue == "")
	    return energyValue;

	var slashIndex = energyValue.indexOf("/");
	var dashIndex = energyValue.indexOf("-");

	if ((slashIndex == -1) && (dashIndex == -1))
	{
		var RoundedValue = "";
		
		PosCSOLog(CSOLOG_DEBUG, 18435, "[RoundEnergyValue] - Energy value before rounding: " + energyValue);
		
		if (typeof(RoundEnergyValueLocal) == "function")
			RoundedValue = RoundEnergyValueLocal(energyValue);
		else 
			RoundedValue = CSL_RoundEnergyValue(energyValue);
			
		PosCSOLog(CSOLOG_DEBUG, 18435, "[RoundEnergyValue] - Energy value after rounding: " + RoundedValue);
			
		return RoundedValue;
	}

	// Verifies the separator.
	var separator = "";
	if (slashIndex > -1)
		separator = "/";
	else
		separator = "-";

	var res = energyValue.split(separator);

	var energyMinValueRounded = "";
	var energyMaxValueRounded = "";	
	
	PosCSOLog(CSOLOG_DEBUG, 18435, "[RoundEnergyValue] - Energy before rounding (low value of range): " + res[0]);	
	PosCSOLog(CSOLOG_DEBUG, 18435, "[RoundEnergyValue] - Energy before rounding (hight value of range): " + res[1]);
	// CSO-683 - [DRM] KIOSK C4P6: Nutrition Calorie Range calculation for the value meal is incorrect.Calorie value range for the meal is calculated by considering the drinks of all sizes.  Drinks with same dimension as per meal size should be considered as per Req
	if (typeof(RoundEnergyValueLocal) == "function")
	{
		// CSO-683 - [DRM] KIOSK C4P6: Nutrition Calorie Range calculation for the value meal is incorrect.Calorie value range for the meal is calculated by considering the drinks of all sizes.  Drinks with same dimension as per meal size should be considered as per Req
		energyMinValueRounded = RoundEnergyValueLocal(res[0]);
		energyMaxValueRounded = RoundEnergyValueLocal(res[1]);
	}
	else 
	{
		energyMinValueRounded = CSL_RoundEnergyValue(res[0]);
		energyMaxValueRounded = CSL_RoundEnergyValue(res[1]);
	}
	PosCSOLog(CSOLOG_DEBUG, 18435, "[RoundEnergyValue] - Energy after rounding (low value of range): " + energyMinValueRounded);	
	PosCSOLog(CSOLOG_DEBUG, 18435, "[RoundEnergyValue] - Energy after rounding (hight value of range): " + energyMaxValueRounded);	
	
	if((energyMinValueRounded != "") && (energyMaxValueRounded != "") && (energyMinValueRounded != energyMaxValueRounded))
		return energyMinValueRounded.concat(separator, energyMaxValueRounded);
	else if(energyMinValueRounded != "")
		return energyMinValueRounded;
	else if(energyMaxValueRounded != "")
		return energyMaxValueRounded;
		
	return "";
}

/**
 * @brief - Rounds the energy value according the the round value. 
 * @author - Paulo Ferreira
 * @since - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 * @rule - BR5.6 - Shall have the ability to round the calorie to the nearest 5 calorie increment up until 50 calories. If greater than 50 calories, then shall have the ability to round to the nearest 10 calorie increment.
 * @modified - SQC-7517 - [NGK 5.12] US Nutrition Enhancement - Problems in round up the energy values
 * @modified - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function CSL_RoundEnergyValue(energyValue){

	if (energyValue == "") return "";

	var value = new BigDecimal(energyValue);
	var roundedEnergyValue = value;
	var factor = (value.compareTo(new BigDecimal("50")) > 0) ? "10" : "5" ;

	// SQC-7517 - [NGK 5.12] US Nutrition Enhancement - Problems in round up the energy values
	var partial = value.divide(new BigDecimal(factor), BigDecimal.ROUND_CEILING);
	roundedEnergyValue = partial.multiply(new BigDecimal(factor));

	return roundedEnergyValue.toString();	
}

function objToString (obj) {
    var str = '';
    for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
            str += p + '::' + obj[p] + '\n';
        }
    }
    return str;
}

/**
 * @brief  - Serializes an object into XML
 * param   - obj: the object to be serialized
 * param   - xmlRoot: the root XML tag. It is optional. The deafult root is <object/>
 * @author - Gabor Hollosy
 * @since  - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
             CSO-442 - Implement in-memory storage of allergens in NPS scripts
 */
function objToXml(obj, xmlRoot) {
	if (xmlRoot == undefined) xmlRoot = <object/>;

	if (typeof(obj) == 'array') {
		for each (var item in obj) 
			xmlRoot.appendChild(objToXml(item, <item/>));
	}
	else if (typeof(obj) == 'object') {
		for (var prop in obj) {
			if (!obj.hasOwnProperty(prop)) continue;

			var value = obj[prop];
			var xmlProperty = typeof(value) == 'object' || typeof(value) == 'array' ? 
				objToXml(value, <{prop}/>) : <{prop}>{value}</{prop}>;
			xmlRoot.appendChild(xmlProperty);
		}
	}
	else xmlRoot = <value>{obj}</value>;

	return xmlRoot;
}

/**
 *
 * @brief - Check if the price tag from a product is valid
 * @param - productNode: product xml node
 * @author - Vladimir Dobroff
 * @since - NPS-9610 - Kiosk GUI 3 - GUI should hide products that aren't priced
 */
function PosCheckIfPriceNodeIsValid(productNode)
{
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	if (productNode == null || productNode == undefined)
	{
		return false;
	}
	// NPS-10618: Kiosk GUI 4 Drop 2 HF1 - Happy Meal Shakes causing Fatal Error - ACSI0836804
	var eatInPriceString = productNode.PriceList.PriceTag.Pricing.(@priceCode == "EATIN").Price.toString().replace(/\s+/g, '');
	var takeOutPriceString = productNode.PriceList.PriceTag.Pricing.(@priceCode == "TAKEOUT").Price.toString().replace(/\s+/g, '');
	var otherPriceString = productNode.PriceList.PriceTag.Pricing.(@priceCode == "OTHER").Price.toString().replace(/\s+/g, '');
	
	// NPS-9610: Kiosk GUI 3 - GUI should hide products that aren't priced - ACSI0419542
	
	return (eatInPriceString != null && eatInPriceString != "" &&
		takeOutPriceString != null && takeOutPriceString != "" &&
		otherPriceString != null && otherPriceString != "");
}

/**
 *
 * @brief  - Check if the tax entry tag from a product is valid
 * @param  - productNode: product xml node
 * @author - Jorge Olimpia
 * @since  - WWR-2579 - CYT Phase 1 - Cycle 2: Incorrect behavior for "non priced", "non taxed", "inactive" items on KIOSK and POS
 */
function PosCheckIfTaxEntryIsValid(productNode)
{
	if (productNode == undefined || productNode == null) {
		return false;
	}
	
	var eatInTaxIsValid = false;
	var takeOutTaxIsValid = false;
	var otherTaxIsValid = false;

	var eatInTax = productNode.PriceList.PriceTag.Pricing.(@priceCode.toUpperCase() == "EATIN").Tax;
	var takeOutTax = productNode.PriceList.PriceTag.Pricing.(@priceCode.toUpperCase() == "TAKEOUT").Tax;
	var otherTax = productNode.PriceList.PriceTag.Pricing.(@priceCode.toUpperCase() == "OTHER").Tax;
	
	// SQC-6299 - Products with invalid tax only on Eat In or Take Out still show on NGK
	if ((eatInTax == undefined || eatInTax == null)) {		// When there isn't tax tag present in the product's price configuration, then product is valid and its tax is zero.
		eatInTaxIsValid = true;
	}
	else {
		eatInTaxIsValid = IsValidTax(eatInTax);
	}
	
	if ((takeOutTax == undefined || takeOutTax == null)) {	// When there isn't tax tag present in the product's price configuration, then product is valid and its tax is zero.
		takeOutTaxIsValid = true;
	}
	else {
		takeOutTaxIsValid = IsValidTax(takeOutTax);
	}
	
	if ((otherTax == undefined || otherTax == null)) {		// When there isn't tax tag present in the product's price configuration, then product is valid and its tax is zero.
		otherTaxIsValid = true;
	}
	else {
		otherTaxIsValid = IsValidTax(otherTax);
	}
	
	return eatInTaxIsValid && takeOutTaxIsValid && otherTaxIsValid;
	
	/**
	 *
	 * @brief  - Check if the sale type contains valid tax.
	 * @param  - saleType: Sale type configured to the product.
	 * @author - Jorge Olimpia
	 * @since  - SQC-6299 - Products with invalid tax only on Eat In or Take Out still show on NGK
	 */
	function IsValidTax(saleType) {
		var code = saleType.@taxCode.toUpperCase();
		var rule = saleType.@rule.toUpperCase();
		var entry = saleType.@entry;
		var isValid = false;
		
		if (code == undefined || code == null || code == "") {
			return isValid;
		}
		
		switch(code.toUpperCase()){
			case "NEVER":
				isValid = true;
				break;
			case "ALWAYS":
			case "OPTIONAL":
				if ((rule == undefined || rule == null || rule == "") && (entry == undefined || entry == null || entry == "")) {
					break;
				}
				
				switch(rule.toUpperCase()) {
					case "TAX_CHAIN":
							isValid = VerifyActiveTaxes("TaxChain", entry);
						break;
					case "FLAT":
					case "EXCISE":
					case "GST":
					case "PST":
					case "VAT":
					case "BREAK_TABLE":
					case "FISCAL_PRINTER":
							isValid = VerifyActiveTaxes("TaxType", entry);
						break;
					default:
							isValid = false;
						break;
				}
				
				break;
			default:
				isValid = false;
				break;
		}
		
		return isValid;
	}
	
	/**
	 *
	 * @brief  - Verify if exists an active tax in a list of taxes from store-db.xml.
	 * @param  - tax: TaxType or TaxChain; entry: ID related to the selected tax.
	 * @author - Jorge Olimpia
	 * @since  - SQC-6299 - Products with invalid tax only on Eat In or Take Out still show on NGK
	 */
	function VerifyActiveTaxes(tax, entry) {
		var isTaxFound = false;
		
		if ((tax == undefined || tax == null || tax == "") && (entry == undefined || entry == null || entry == "")) {
			return isTaxFound;
		}
		
		for each (var activeTax in csoActiveTaxes) {
			if (activeTax.tax == tax && activeTax.id.toString() == entry) {
				isTaxFound = true;
			}
		}
		
		return isTaxFound;
	}
}

/**
 *
 * @brief  - Get an array of IDs related to store-db taxes table
 * @author - Jorge Olimpia
 * @since  - WWR-2579 - CYT Phase 1 - Cycle 2: Incorrect behavior for "non priced", "non taxed", "inactive" items on KIOSK and POS
 */
function PosGetActiveTaxes()
{
	var activeTaxes = [];

	var xmlStoreDb = new XML(API.getStoredb());
	var taxTypes = xmlStoreDb.StoreDB.TaxTable;
	
	if (taxTypes == undefined || taxTypes == null) {
		return activeTaxes;
	}
	
	for each (var taxType in taxTypes.TaxType){
		if (taxType.@statusCode == "ACTIVE" && (taxType.TaxId != undefined || taxType.TaxId != null)) {
			activeTaxes.push({tax: "TaxType", id: taxType.TaxId.toString()});
		}
	}
	
	for each (var taxType in taxTypes.TaxChain){
		if (taxType.@statusCode == "ACTIVE" && (taxType.TaxChainId != undefined || taxType.TaxChainId != null)) {
			activeTaxes.push({tax: "TaxChain", id: taxType.TaxChainId.toString()});
		}
	}
	
	return activeTaxes;
}

/**
 * @brief - 
 * @return - 
 * @author - Christiano Meirelles
 */
function PosCSOLoadConfigurationJS() {

	var namesDbXml = new XML(API.getNamesdb().toString());
	storeDbXml = new XML(API.getStoredb().toString());
	
	// CSO-332 - Overwrite store-db parameters using pos-db settings
	posDbXml = new XML(API.getPosdb());
	PosNGKUpdateStoreUsingPosDb();
	
	var language;
	var dayPart;
	
	csoConfigurationInfo.languages = new Array();
	csoConfigurationInfo.dayParts = [];
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		csoConfigurationInfo.pointsOfDistribution = lParsePointsOfDistribution(storeDbXml);
		
		//SQC-5201 - NGK v5.3 - Table Service Support default button and text colors are different from the specification
		for each (var color in storeDbXml.ColorDB.ColorName)
		{
			if (color.@name.toString())
			{
				csoColorInfo[color.@name.toString()] = color.@value.toString();
			}
		}
	}
	
	//NPS-9871: Script Error: out of memory - NP 6.1.19 RC 15 HF3 - ACSI0569078
	while (namesDbXml.Language.length() > 0) {
		language = namesDbXml.Language[0];
		
		if (language.@code == null) {
			//NPS-9871: Script Error: out of memory - NP 6.1.19 RC 15 HF3 - ACSI0569078
			delete namesDbXml.Language[0];
			continue;
		}
		
		csoConfigurationInfo.languages[language.@code.toString()] = {
			code: language.@code.toString(),
			name: language.@name.toString()
		};
		
		//NPS-9871: Script Error: out of memory - NP 6.1.19 RC 15 HF3 - ACSI0569078
		delete namesDbXml.Language[0];
	}
	
	while (storeDbXml.StoreDB.DayParts.DayPart.length() > 0) {
		dayPart = storeDbXml.StoreDB.DayParts.DayPart[0];
		
		csoConfigurationInfo.dayParts.push(lParseDayPart(dayPart));

		delete storeDbXml.StoreDB.DayParts.DayPart[0];
	}
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		STORE_ID = storeDbXml.StoreDB.StoreProfile.StoreDetails.StoreLegacyId.toString().toUpperCase();
	}
	
	csoConfigurationInfo.currency = {
		decimalSeparator: storeDbXml.StoreDB.StoreProfile.Localization.DecimalSeparator.toString(),
		thousandSeparator: storeDbXml.StoreDB.StoreProfile.Localization.ThousandSeparator.toString(),
		decimalsCount: Number(storeDbXml.StoreDB.StoreProfile.Localization.CurrencyDecimals.toString()),
		symbol: storeDbXml.StoreDB.StoreProfile.Localization.CurrencySymbol.toString()
	};
	
	csoConfigurationInfo.dateFormat = storeDbXml.StoreDB.StoreProfile.Localization.DateFormat.toString();
	csoConfigurationInfo.timeFormat = storeDbXml.StoreDB.StoreProfile.Localization.TimeFormat.toString();
	csoConfigurationInfo.storeNumber = storeDbXml.StoreDB.StoreProfile.StoreDetails.StoreId.toString();

	csoConfigurationInfo.grillLayout = storeDbXml.StoreDB.StoreProfile.Localization.CSOGrillScreenLayout.toString();
	
	csoConfigurationInfo.screenTypes = new Array();
	csoConfigurationInfo.screenTypes.push("2800");
	csoConfigurationInfo.screenTypes.push("2801");
	csoConfigurationInfo.screenTypes.push("2802");
	csoConfigurationInfo.screenTypes.push("2803");
	csoConfigurationInfo.screenTypes.push("2804");
	csoConfigurationInfo.screenTypes.push("2805");
	csoConfigurationInfo.screenTypes.push("2806");
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		csoConfigurationInfo.ngkScreenTypes = new Array();
		csoConfigurationInfo.ngkScreenTypes.push("2850"); //Promotion
		csoConfigurationInfo.ngkScreenTypes.push("2851"); //Carroussel
		csoConfigurationInfo.ngkScreenTypes.push("2852"); //Menu
		csoConfigurationInfo.ngkScreenTypes.push("2853"); //Menu ads
		csoConfigurationInfo.ngkScreenTypes.push("2854"); //Sale type / Language selection
		csoConfigurationInfo.ngkScreenTypes.push("2855"); 
		csoConfigurationInfo.ngkScreenTypes.push("2856");
		//NPS-17245 - MR2 QR17 34, NGK does not show screen 3107 but does in QR16
		csoConfigurationInfo.ngkScreenButtonTypes = new Array();
		csoConfigurationInfo.ngkScreenButtonTypes.push("51"); // CANCEL
		csoConfigurationInfo.ngkScreenButtonTypes.push("55"); // ALLERGEN
		csoConfigurationInfo.ngkScreenButtonTypes.push("56"); // PROMOTIONS
		csoConfigurationInfo.ngkScreenButtonTypes.push("57"); // OK
		csoConfigurationInfo.ngkScreenButtonTypes.push("58"); // MENU TITLE
		csoConfigurationInfo.ngkScreenButtonTypes.push("59"); // BACK		
		csoConfigurationInfo.ngkScreenButtonTypes.push("60"); // LOGO		
	}
	
	//Added for NGK
	function lParsePointsOfDistribution(storeDbXml){
	
		var pointsOfDistribution = [];
		var pointOfDistributionName;
		
		var workingHoursNodes = storeDbXml
								.Configurations
								.Configuration.(@type == "POS")
								.Section.(@name.indexOf("CSO.WorkingHours.") != -1);
		
		for (var i = 0; i < workingHoursNodes.length(); i++){
			pointOfDistributionName = lParsePointOfDistributionName(workingHoursNodes[i]);
			
			pointsOfDistribution.push({
				name: pointOfDistributionName,
				screenNumbers: lParseScreenNumbers(pointOfDistributionName, storeDbXml),
				workingHours: lParseWorkingHours(workingHoursNodes[i]),
				isEnabled: lParseIsEnabled(workingHoursNodes[i])
			});
		}

		return pointsOfDistribution;
		
		function lParsePointOfDistributionName(workingHoursNode){
			return workingHoursNode.@name.toString().replace("CSO.WorkingHours.", "");
		}
		
		function lParseScreenNumbers(pointOfDistributionName, storeDbXml){
			
			var screenNumbers = [];
			var screenNumbersNode = storeDbXml
									.Configurations
									.Configuration.(@type == "POS")
									.Section.(@name == "CSO.UserInterface")
									.Parameter.(@name == (pointOfDistributionName + ".screenNumbers"));

			if (screenNumbersNode.@value.toString() !== "")
			{
				screenNumbers = screenNumbersNode.@value.split("|");
			}
			return screenNumbers;
		}
		
		function lParseWorkingHours(workingHoursNode){
	
			var weekDays = [ "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" ];
			var workingHours = {};
			
			for each (var weekDay in weekDays){
				workingHours[weekDay] = lParseWorkingHoursByWeekDay(workingHoursNode, weekDay);
			}
			
			// CSO-328 - NGK Date-specific Override of Working Hours - 7977439
			workingHours = lParseWorkingHoursWithSpecificDate(workingHours, workingHoursNode);
			return workingHours;
			
			function lParseWorkingHoursByWeekDay(workingHoursNode, weekDay){
				var weekDayNode = workingHoursNode.Parameter.(@name == weekDay);
				return lParseDayPeriods(weekDayNode);
			}

			/*
 			* @brief - Read the specific dates in the working hour configuration.
 			* @param - workingHours: Object which will recive the specific dates configuration.
 			* @param - workingHoursNode: XML with the working hours configuration.
 			* @author - Renato Tsuchida
 			* @since - CSO-328 - NGK Date-specific Override of Working Hours - 7977439
 			*/
			function lParseWorkingHoursWithSpecificDate(workingHours, workingHoursNode) {				
				var specificDay = workingHoursNode.Parameter.(@name.match(/\b(\d{4})\b|\b(\d{8})\b/));

				for each (var day in specificDay) {
					var date = day.@name.toString();

					if (lIsValidDate(date)){
						workingHours[date] = lParseDayPeriods(day);
					} else {						
						PosCSOLog(CSOLOG_INFORMATION, 18435, "NGK - lParseWorkingHours.lParseWorkingHoursWithSpecificDate: Configuration error - " + workingHoursNode.@name + ". The date " + date + " is invalid.");
					}
				}

				return workingHours;
			};

			function lParseDayPeriods(dayNode) {
				if (!dayNode) {
					return null;
				}

				//CSO-62 - Kiosk V5 - Working hours should support more than one time period per weekday
				var dayPeriodsArray = [];
				var splittedPeriods = dayNode.@value.toString().split(",");
				for each(var period in splittedPeriods) {
					var hours = period.split("|");
					if (lIsValidHours(hours, dayNode.@name)){
						dayPeriodsArray.push( { startTime: hours[0], endTime: hours[1] } );
					}
				}
				return dayPeriodsArray;
			};

			/*
 			* @brief - verify is the given date is a valid date.
 			* @param - date: Date in the format yyyyMMdd or MMdd
 			* @author - Renato Tsuchida
 			* @since - CSO-328 - NGK Date-specific Override of Working Hours - 7977439
 			*/
			function lIsValidDate(date) {
				if (date.length == 4){
					var year = new Date().getFullYear();
					var month = Number(date.substring(0, 2));
					var day = Number(date.substring(2, 4));
				} else if (date.length == 8){
					var year = Number(date.substring(0, 4));
					var month = Number(date.substring(4, 6));
					var day = Number(date.substring(6, 8));
				} else {
					return false;
				}

				var checkDate = new Date(year, month - 1 , day);
				return (checkDate.getFullYear() == year && checkDate.getMonth() + 1 == month && checkDate.getDate() == day);
			};

			/*
 			* @brief - verify is the given hours are valid.
 			* @param - hours: Array of hours
 			* @param - name: the name of the node.
 			* @author - Renato Tsuchida
 			* @since - CSO-328 - NGK Date-specific Override of Working Hours - 7977439
 			*/
			function lIsValidHours(hours, name) {
				if (!hours){
					return false;
				}

				if (hours.length != 2){
					PosCSOLog(CSOLOG_INFORMATION, 18435, "NGK - lParseWorkingHours.lParseDayPeriods: Configuration error -  The " + name + " is not configured correctly. Please check if it has only start and end time. It has " + hours.length + " hours configured.");
					return false;
				}

				var hourValidation = /^(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?$/;
				if (!hours[0].match(hourValidation)){
					PosCSOLog(CSOLOG_INFORMATION, 18435, "NGK - lParseWorkingHours.lParseDayPeriods: Configuration error - " + name + ". The hour " + hours[0] + " is invalid.");
					return false;
				}

				if (!hours[1].match(hourValidation)){
					PosCSOLog(CSOLOG_INFORMATION, 18435, "NGK - lParseWorkingHours.lParseDayPeriods: Configuration error - " + name + ". The hour " + hours[1] + " is invalid.");
					return false;
				}

				if (Number(hours[0].replace(":", "")) >= Number(hours[1].replace(":", ""))){
					PosCSOLog(CSOLOG_INFORMATION, 18435, "NGK - lParseWorkingHours.lParseDayPeriods: Configuration error - " + name + ". The start hour " + hours[0] + " is equal or after the end hour " + hours[1] + ".");
					return false;
				}
				return true;
			};
		}
		
		function lParseIsEnabled(workingHoursNode){
			return workingHoursNode.Parameter.(@name == "isEnabled") == undefined || workingHoursNode.Parameter.(@name == "isEnabled")[0].@value == "true";
		}
	}
	
	//SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
	csoConfigurationInfo.suggestiveSellingProductGroups = new Array();
	if(storeDbXml.StoreDB.ProductGroups != null){
		for each(productGroup in storeDbXml.StoreDB.ProductGroups.ProductGroup){
			if(productGroup.@status.toString().toUpperCase() == "ACTIVE" 
			&& productGroup.Type.toString().toUpperCase() == "SUGGESTIVE_SELLING"
			&& csoConfigurationInfo.suggestiveSellingProductGroups[productGroup.@code.toString()] == null){
				csoConfigurationInfo.suggestiveSellingProductGroups[productGroup.@code.toString()] = new Array();
			}
		}
	}

	function lParseDayPart(dayPart){
	
		return {
			name: dayPart.@name.toString(),
			weekDays: {
				"MON": (dayPart.DayPartMonday != undefined ? { startTime: dayPart.DayPartMonday.@start.toString(), endTime: dayPart.DayPartMonday.@end.toString() } : null ),
				"TUE": (dayPart.DayPartTuesday != undefined ? { startTime: dayPart.DayPartTuesday.@start.toString(), endTime: dayPart.DayPartTuesday.@end.toString() } : null ),
				"WED": (dayPart.DayPartWednesday != undefined ? { startTime: dayPart.DayPartWednesday.@start.toString(), endTime: dayPart.DayPartWednesday.@end.toString() } : null ),
				"THU": (dayPart.DayPartThursday != undefined ? { startTime: dayPart.DayPartThursday.@start.toString(), endTime: dayPart.DayPartThursday.@end.toString() } : null ),
				"FRI": (dayPart.DayPartFriday != undefined ? { startTime: dayPart.DayPartFriday.@start.toString(), endTime: dayPart.DayPartFriday.@end.toString() } : null ),
				"SAT": (dayPart.DayPartSaturday != undefined ? { startTime: dayPart.DayPartSaturday.@start.toString(), endTime: dayPart.DayPartSaturday.@end.toString() } : null ),
				"SUN": (dayPart.DayPartSunday != undefined ? { startTime: dayPart.DayPartSunday.@start.toString(), endTime: dayPart.DayPartSunday.@end.toString() } : null ),
			}
		};
	}
}

/*
 * @brief  - Updates store-db parameters using pos-db settings.
 * @author - Jorge Olimpia
 * @since  - CSO-332 - Overwrite store-db parameters using pos-db settings
*/
function PosNGKUpdateStoreUsingPosDb() {
	if (posDbXml.StoreDB.StoreProfile.StoreDetails.StoreLegacyId != undefined) {
		storeDbXml.StoreDB.StoreProfile.StoreDetails.StoreLegacyId = posDbXml.StoreDB.StoreProfile.StoreDetails.StoreLegacyId;
	}
	
	if (posDbXml.StoreDB.StoreProfile.Localization.DecimalSeparator != undefined) {
		storeDbXml.StoreDB.StoreProfile.Localization.DecimalSeparator = posDbXml.StoreDB.StoreProfile.Localization.DecimalSeparator;
	}
	
	if (posDbXml.StoreDB.StoreProfile.Localization.ThousandSeparator != undefined) {
		storeDbXml.StoreDB.StoreProfile.Localization.ThousandSeparator = posDbXml.StoreDB.StoreProfile.Localization.ThousandSeparator;
	}
	
	if (posDbXml.StoreDB.StoreProfile.Localization.CurrencyDecimals != undefined) {
		storeDbXml.StoreDB.StoreProfile.Localization.CurrencyDecimals = posDbXml.StoreDB.StoreProfile.Localization.CurrencyDecimals;
	}
	
	if (posDbXml.StoreDB.StoreProfile.Localization.CurrencySymbol != undefined) {
		storeDbXml.StoreDB.StoreProfile.Localization.CurrencySymbol = posDbXml.StoreDB.StoreProfile.Localization.CurrencySymbol;
	}
	
	if (posDbXml.StoreDB.StoreProfile.Localization.DateFormat != undefined) {
		storeDbXml.StoreDB.StoreProfile.Localization.DateFormat = posDbXml.StoreDB.StoreProfile.Localization.DateFormat;
	}
	
	if (posDbXml.StoreDB.StoreProfile.Localization.TimeFormat != undefined) {
		storeDbXml.StoreDB.StoreProfile.Localization.TimeFormat = posDbXml.StoreDB.StoreProfile.Localization.TimeFormat;
	}
	
	if (posDbXml.StoreDB.StoreProfile.StoreDetails.StoreId != undefined) {
		storeDbXml.StoreDB.StoreProfile.StoreDetails.StoreId = posDbXml.StoreDB.StoreProfile.StoreDetails.StoreId;
	}
	
	if (posDbXml.StoreDB.StoreProfile.Localization.CSOGrillScreenLayout != undefined) {
		storeDbXml.StoreDB.StoreProfile.Localization.CSOGrillScreenLayout = posDbXml.StoreDB.StoreProfile.Localization.CSOGrillScreenLayout;
	}
	
	if (posDbXml.StoreDB.StoreProfile.Localization.CountryId != undefined) {
		storeDbXml.StoreDB.StoreProfile.Localization.CountryId = posDbXml.StoreDB.StoreProfile.Localization.CountryId;
	}
	
	if (posDbXml.StoreDB.StoreProfile.StoreDetails.Country != undefined) {
		storeDbXml.StoreDB.StoreProfile.StoreDetails.Country = posDbXml.StoreDB.StoreProfile.StoreDetails.Country;
	}
	
	if (posDbXml.StoreDB.StoreProfile.Localization.Language != undefined) {
		storeDbXml.StoreDB.StoreProfile.Localization.Language = posDbXml.StoreDB.StoreProfile.Localization.Language;
	}
	
	if (posDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekEnd != undefined) {
		storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekEnd = posDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekEnd;
	}

	if (posDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekEnd != undefined) {
		storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekEnd = posDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekEnd;
	}

	if (posDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekDay != undefined) {
		storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekDay = posDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekDay;
	}

	if (posDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekDay != undefined) {
		storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekDay = posDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekDay;
	}
}

/**
 * @brief - 
 * @return - 
 * @author - Christiano Meirelles
 */
function PosCSOLoadScreenInfoJS() {	
	// NPS-11344 - DA - NP6.1.21 RC8 HF5 - Error on Kiosk - ACSI1193176
	var screenFromNP = API.getScreen().toString();
	var initIndex = screenFromNP.indexOf("<Screen ");
	var endIndex = screenFromNP.indexOf("</Screens>");
	screenFromNP = screenFromNP.substring(initIndex, endIndex);
	
	var screensArray = screenFromNP.split("<Screen ");
	delete screenFromNP;
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		//Modified to allow the parse of the NGK screens
		while (screensArray.length > 0)
		{
			var screen = screensArray.pop();
			if (screen != undefined && screen != "")
			{
				screen = "<Screen " + screen;
				var screenXML = new XML(screen);
		
				if (csoConfigurationInfo.screenTypes.indexOf(screenXML.@type.toString()) >= 0)
				{					
					csoScreenInfo[screenXML.@number.toString()] = {
						xmlNode: screenXML,
						number: screenXML.@number.toString(),
						type: screenXML.@type.toString()
					};
					
					var products = screenXML.Button.Action.(@type.toLowerCase() == "onclick").Parameter.(@name.toLowerCase() == "productcode").@value;
					for each (var productCode in products) {
						csoScreenProducts.push(productCode.toString());
					}
				}
		
				if (csoConfigurationInfo.ngkScreenTypes.indexOf(screenXML.@type.toString()) >= 0) 
				{
					ngkScreenInfo[screenXML.@number.toString()] = {
						xmlNode: screenXML,
						number: screenXML.@number.toString(),
						type: screenXML.@type.toString()
					};
				}
			}
		}
	}
	else
	{
		while (screensArray.length > 0)
		{
			var screen = screensArray.pop();
			if (screen != undefined && screen != "")
			{
				screen = "<Screen " + screen;
				var screenXML = new XML(screen);
				
				if (csoConfigurationInfo.screenTypes.indexOf(screenXML.@type.toString()) < 0) {
					continue;
				}
			
				csoScreenInfo[screenXML.@number.toString()] = {
					xmlNode: screenXML,
					number: screenXML.@number.toString(),
					type: screenXML.@type.toString()
				};
				
				var products = screenXML.Button.Action.(@type.toLowerCase() == "onclick").Parameter.(@name.toLowerCase() == "productcode").@value;
				for each (var productCode in products) {
					csoScreenProducts.push(productCode.toString());
				}
			}
		}
	}
}

/**
 * @brief - 
 * @return - 
 * @author - Christiano Meirelles
 */
function PosCSOSetDefaultStateJS() {
	csoCurrentState.currentScreen = null;
	
	csoCurrentState.loopMeal = {};
	csoCurrentState.loopMeal.isRunning = false;
	csoCurrentState.loopMeal.saleProducts = [];
	csoCurrentState.loopMeal.currentView = null;
	csoCurrentState.loopMeal.lastAddedProduct = null;
	csoCurrentState.loopMeal.startChoicesIDs = [];
	csoCurrentState.loopMeal.lastCircleImages = null;
	csoCurrentState.loopMeal.showSizeSelectionAtEnd = false;
	csoCurrentState.loopMeal.barcode = null;
	csoCurrentState.loopMeal.pendingGrills = [];
	//EQA-356 - (6.1.19 Kiosk v4.3 RC10) Progress Images not displaying correctly when dip selections are made
	csoChoiceSelectionStack = [];
}

function PosCSOLoadLocalPromotionsJS() {
	try {
		var hlp = new BusinessObjectHelper();
		var posDataPath	= hlp.PosGetDataDir();
		var promoFile  = posDataPath + "/localpromotions-db.xml";
		var localPromoXml = new XML(hlp.PosReadFile(promoFile));
	
		//SQC-4065 - Kiosk local Promotion Drop 2 - When File with BarCode and Suggestive Selling is applied on Kiosk, it just work after restart Kiosk
        lLoadLocalPromotions(localPromoXml);
		lLoadBarcodeLocalPromotions(localPromoXml);
		lLoadSuggestiveSelling(localPromoXml);
	} catch(ex) {
		API.dbg("Failed while getting promo file, due to: " + ex);
	}
	
	function lLoadLocalPromotions(localPromoXml){
		API.dbg("PosCSOLoadLocalPromotionsJS: Loading local promotions...");
		
		csoLocalPromotions = new Array();
    
		for each (var promo in localPromoXml.Promotion) {
			csoLocalPromotions[promo.@id.toString()] = {
				xmlNode: promo,
				type: promo.@type.toString(),
				//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
				isQuantityUnlimited: function(){
					var unlimited = this.xmlNode
									.Configuration.(@type == "Properties")
									.Section.(@name == "Properties")
									.Parameter.(@name == "IsQuantityUnlimited");
					return unlimited != undefined && unlimited.@value.toString().toLowerCase() == "true";
				},
				display: (promo.@status.toString() == "ACTIVE")
			};
		}
		
		API.dbg("PosCSOLoadLocalPromotionsJS: Local promotions loaded successfully");
	}
	
	function lLoadBarcodeLocalPromotions(localPromoXml){
		API.dbg("PosCSOLoadLocalPromotionsJS: Loading barcode local promotions...");
		
		var promotion;
	
		csoBarcodeLocalPromotions = new Array();
		csoBarcodeLocalPromotions["isActive"] = (localPromoXml.BarcodeRedemption.@status.toString() === "ACTIVE");
		csoBarcodeLocalPromotions["daysToStart"] = Number(localPromoXml.BarcodeRedemption.@daysToStart.toString());
		csoBarcodeLocalPromotions["daysToEnd"] = Number(localPromoXml.BarcodeRedemption.@daysToEnd.toString());
	
		while (localPromoXml.BarcodeRedemption.Promotion.length() > 0){
	
			promotion = localPromoXml.BarcodeRedemption.Promotion[0];
			
			csoBarcodeLocalPromotions[promotion.@id.toString()] = {
				xmlNode: promotion
			};
			
			delete localPromoXml.BarcodeRedemption.Promotion[0];
		}
		
		API.dbg("PosCSOLoadLocalPromotionsJS: Barcode local promotions loaded successfully");
	}
	
	function lLoadSuggestiveSelling(localPromoXml){
		//<-- SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
		API.dbg("PosCSOLoadLocalPromotionsJS: Loading suggestive selling promotions...");
		
		csoSuggestivePromotions = new Array();
		
		for each(var suggestivePromotionXml in localPromoXml.SuggestiveSelling.SuggestivePromotion){
			var groupCode = suggestivePromotionXml.@productgroup.toString();

			if(csoConfigurationInfo.suggestiveSellingProductGroups[groupCode] != null){
				var suggestivePromotion = { productGroup:groupCode,
											productGroupProducts:csoConfigurationInfo.suggestiveSellingProductGroups[groupCode], 
											joinToMenu:(suggestivePromotionXml.@jointomenu.toLowerCase() == "true"),
											size:suggestivePromotionXml.@size.toString(),
											dayParts:new Array(),
											screens:new Array() };
				
				for each(dayPart in suggestivePromotionXml.DayParts.DayPart){
					suggestivePromotion.dayParts.push(dayPart.toString());
				}
				
				for each(screen in suggestivePromotionXml.Screens.Screen){
					var number = screen.@number.toString();
					if(suggestivePromotion.screens[number] == null){
						suggestivePromotion.screens[number] = new Array();
					}
					suggestivePromotion.screens[number].push(screen.@button.toString());
				}

				// NPS-15090 - Suggestive sell does not activate choice loop for upsell items - ACSI2492737
				if (sessionSale.get("IS_NGK") == "true"){
					var filteredProducts = [];
					for each (var sp in suggestivePromotion.productGroupProducts){
						var prod = csoProductInfo[sp];	
						if (prod && lIsProductSuggestible(prod)){
							filteredProducts.push(sp);
						}
						else {
							PosCSOLog(CSOLOG_INFORMATION, 18435, "NGK - PosCSOLoadLocalPromotionsJS.lLoadSuggestiveSelling: The product " + sp + " cannot be used for suggested sale because it is invalid or contain choices.");
						}
					}
					suggestivePromotion.productGroupProducts = filteredProducts;
				}

				csoSuggestivePromotions.push(suggestivePromotion);
			}
		}
		API.dbg("PosCSOLoadLocalPromotionsJS: Suggestive selling promotions loaded successfully");
	}
}

/**
 * @brief  - Extracts allergens from csoProductInfo and populates csoAllergenInfo.
 * @author - Gabor Hollosy
 * @since  - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
             CSO-442 - Implement in-memory storage of allergens in NPS scripts
 */
function PosCSOLoadAllergensJS() {
	if (csoProductInfo == null) return;
	
	var isLayout16x9 = PosCSOCheckSharedContext("NGK_LAYOUT", "16X9");
	if (csoEnableAllergensEnhancement != "true" || isLayout16x9) return;

	API.dbg("[PosCSOLoadAllergensJS] - Building 'csoAllergenInfo'");

	for each (var productInfo in csoProductInfo) {
		if (productInfo.allergens == null || !productInfo.isValid) continue;
		
		for each (var allergen in productInfo.allergens) {
			var allergenKey = allergen.toUpperCase();
			var allergenInfo = csoAllergenInfo[allergenKey];
			if (allergenInfo != null) continue;

			csoAllergenInfo[allergenKey] = { 
				nameKey: allergen,
				imageKey: "allergen_" + allergen,
			};
		}
	}

	API.dbg("[PosCSOLoadAllergensJS] - 'csoAllergenInfo' has been built successfully");
	//API.dbg("[PosCSOLoadAllergensJS] - 'csoAllergenInfo' has been built successfully:\r\n" + objToXml(csoAllergenInfo, <csoAllergenInfo/>));
}

/**
 * @brief  - Adds selected allergens to sale custom info, if allergen enhancement is enabled.
 * @author - Gabor Hollosy
 * @since  - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
             CSO-461 - Include selected allergens in the order view  (custom data) - to be used by the COE in the receipt
 */
function PosCSOAddSelectedAllergensToCustomInfoJS() {
	var isLayout16x9 = PosCSOCheckSharedContext("NGK_LAYOUT", "16X9");
	if (csoEnableAllergensEnhancement != "true" || isLayout16x9) return;
	
	var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS");
	PosDoSetCustomInfo("allergensEnhancementEnabled", true);
	PosDoSetCustomInfo("selectedAllergens", selectedAllergensList);
}

/**
 * @brief - Verify if a csoProductInfo can be a Suggestive sale item by checking if it has choices or any of its composition has choices.
 * @param - prodInfo: An item from csoProductInfo
 * @author - Renato Tsuchida
 * @since - NPS-15090 - Suggestive sell does not activate choice loop for upsell items - ACSI2492737 
 */
function lIsProductSuggestible(prodInfo){
	if (prodInfo == null || prodInfo == undefined){
		return false;
	}

	if (prodInfo.hasChoices){
		return false;
	}

	if (prodInfo.hasComposition){
		var prodNode = prodInfo.xmlNode;
		for each (var component in prodNode.Composition.Component) {
			if (component){
				var prod = csoProductInfo[component.ProductCode];
				if (prod && !lIsProductSuggestible(prod)){
					return false;
				}
			}
		}
	}
	return true;
};

function PosCSOIsOnLoopMealJS() {
	return (csoCurrentState.loopMeal.isRunning == true);
}

function PosCSOAddLoopMealProductJS(productCode) {
	if (productCode == null || productCode.length == 0) {
		API.dbg("CSO - PosCSOAddLoopMealProductJS: Invalid product code (productCode=[" + productCode + "])");
		return false;
	}
	
	var productCodeNumber = Number(productCode);
	var productCodeStr = productCodeNumber > 0 ? productCodeNumber.toString() : (-productCodeNumber).toString();
	
	if (productCodeNumber != -1 && csoProductInfo[productCodeStr] == null) {
		API.dbg("CSO - PosCSOAddLoopMealProductJS: Invalid product code (productCode=[" + productCode + "])");
		return false;
	}
	
	var saleProduct = csoCurrentState.loopMeal.saleProducts.length > 0 ? csoCurrentState.loopMeal.saleProducts[csoCurrentState.loopMeal.saleProducts.length - 1].copy() : null;
	
	if (saleProduct == null || csoCurrentState.loopMeal.isRunning == false) {
		API.dbg("CSO - PosCSOAddLoopMealProductJS: Can not add Loop Meal product. Loop Meal is not running.");
		return false;
	}
	
	var replaceLastSaleProduct = false;
	
	if (saleProduct.level < 0) {
		if (productCodeNumber < 0) {
			API.dbg("CSO - PosCSOAddLoopMealProductJS: Invalid product code (productCode=[" + productCode + "])");
			return false;
		}
		else {
			var isValidSizeSelection = false;
			for each (var sizeOption in saleProduct.children) {
				if (sizeOption.code == productCode) {
					if (csoCurrentState.loopMeal.saleProducts.length < 2) {
						saleProduct = lGenerateLoopMealProductInfo(productCode, 0, false);
					} else {
						csoCurrentState.loopMeal.showSizeSelectionAtEnd = false;
						saleProduct = sizeOption;
						
						var originalSale = lGetLoopMealSaleList(csoCurrentState.loopMeal.saleProducts[csoCurrentState.loopMeal.saleProducts.length - 2]);
						var targetSale = lGetLoopMealSaleList(sizeOption);
						
						if (originalSale.length == targetSale.length) {
							for (var i = 0; i < originalSale.length; i++) {
								lSubstituteGrillProductCode(originalSale[i], targetSale[i])
							}
						}
					}
					
					isValidSizeSelection = true;
					break;
				}
			}
			
			if (!isValidSizeSelection) {
				API.dbg("CSO - PosCSOAddLoopMealProductJS: Product is not a valid size option.");
				return false;
			}
			
			csoCurrentState.loopMeal.lastAddedProduct = null;
		}
	} else {
		csoCurrentState.loopMeal.lastAddedProduct = lTryFillChoice(saleProduct, productCode);
	}
	
	if (replaceLastSaleProduct && csoCurrentState.loopMeal.saleProducts.length > 0) {
		csoCurrentState.loopMeal.saleProducts[csoCurrentState.loopMeal.saleProducts.length - 1] = saleProduct
	} else {
		csoCurrentState.loopMeal.saleProducts.push(saleProduct);
	}
	
	if (saleProduct.level == 0) {
		var openChoice = lGetNextOpenChoice(saleProduct, true);
		var circleImages = lGetChoiceImages(saleProduct);
		
		if (openChoice == null && csoCurrentState.loopMeal.showSizeSelectionAtEnd) {
			var resizeInfo = lGetResizeInfo(saleProduct);
			if (resizeInfo != null) {
				csoCurrentState.loopMeal.saleProducts.push(resizeInfo);
			}
		}
		
		var circleImagesArray = circleImages.split("|");
		var targetCircleImage = "";
		for (var i = 0; i < circleImagesArray.length; i++) {
			if (circleImagesArray[i] == "" || isNaN(Number(circleImagesArray[i]))) {
				targetCircleImage = circleImagesArray[i];
			} else {
				break;
			}
		}
		
		if (targetCircleImage != "" && openChoice == null && csoCurrentState.loopMeal.startChoicesIDs.length > 0) {
			var eventXml = new XML('<Event type="ASYNC" name="DLG_LOOP_MEAL_END_CHOICE"/>');
			eventXml.CircleImage = targetCircleImage;
			eventXml.TargetViewId = csoCurrentState.loopMeal.startChoicesIDs[csoCurrentState.loopMeal.startChoicesIDs.length - 1];
			PosSendUICmd(eventXml.toXMLString());
		}
		
		// SDO-5625: CSO - VML is displaying only one choice in the screen
		//SDO-8858: [NP6.1.23 RC5 QR2][Lab 02][UK] - Changing Choice group from mains to sides resolves EQA-1350
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (openChoice != null && (openChoice.level == 1 || displayAllSubChoicesAsStepsOnVML == "true") && csoProductInfo[openChoice.code.toString()] != undefined && csoProductInfo[openChoice.code.toString()].oneProductChoice == "") {	
			if (circleImages != csoCurrentState.loopMeal.lastCircleImages) {
				csoCurrentState.loopMeal.lastCircleImages = circleImages;
				csoCurrentState.loopMeal.startChoicesIDs.push(csoCurrentState.loopMeal.saleProducts.length - 1);
				
				if (csoCurrentState.loopMeal.startChoicesIDs.length > 1) {			

					var viewId = csoCurrentState.loopMeal.startChoicesIDs[csoCurrentState.loopMeal.startChoicesIDs.length - 2];
					csoCurrentState.loopMeal.saleProducts.splice(viewId + 1, csoCurrentState.loopMeal.saleProducts.length - viewId);
					csoCurrentState.loopMeal.saleProducts.push(saleProduct);
					
					if (targetCircleImage != "") {
						var eventXml = new XML('<Event type="ASYNC" name="DLG_LOOP_MEAL_END_CHOICE"/>');
					
						eventXml.CircleImage = targetCircleImage;
						eventXml.TargetViewId = viewId;
						PosSendUICmd(eventXml.toXMLString());
					}
				}
			} else {
				csoCurrentState.loopMeal.startChoicesIDs.push(csoCurrentState.loopMeal.saleProducts.length - 1);
			}
		}
	}
	
	return true;
	
	/**
	 *
	 * @brief - Try to fill some choice with the given product code
	 * @param - productsXml: the product structure being sold (generated by 'lGenerateProductNode' function)
	 * @param - code: The product code that wants to be sold
	 * @author - Christiano Meirelles
	 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
	 */
	function lTryFillChoice(productsInfo, fillCode) {
		
		//PosShowMessage("Item to sale: " + fillCode);
		
		var codeNumber = Number(fillCode);
		var codeStr = codeNumber > 0 ? codeNumber.toString() : (-codeNumber).toString();
		
		var openChoices = lGetOpenChoices(productsInfo, true);
		var openChoice;
		
		for each (openChoice in openChoices) {
			//Done button clicked on a "Mutually Exclusive" screen
			if (fillCode == "-1" && openChoice.isExclusive == true) {
				var fillCode;
				
				if (openChoice.isMultiChoice == true) {
					//If the current choice is "Multi Choice", fill it with the first "Multi Choice" product available. 
					//If there is no "Multi Chocie" product configured, get the first one.
					fillCode = lGetFirstMultiChoiceProduct(openChoice.code);
				} else if (openChoice.children.length > 0) {
					//If the current choice is not a "Multi Choice", fill it with the current product selected by the user. 
					fillCode = openChoice.children[0].code;
				} else {
					//If no product selected yet, fill it with the first product that satisfy this choice
					// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
					if (csoProductInfo[choiceCode.toString()] != undefined && csoProductInfo[choiceCode.toString()].xmlNode != undefined) {
						fillCode = csoProductInfo[choiceCode.toString()].xmlNode.Composition.Component[0].ProductCode.toString();
					}
				}
				
				if (fillCode != null) {
					var newNode = lGenerateLoopMealProductInfo(fillCode, openChoice.level, openChoice.showGrillScreen);
					
					while (openChoice.children.length < openChoice.qty) {
						openChoice.children.push(newNode.copy());
					}
				}
				
				openChoice.isSolved = true;
				replaceLastSaleProduct = true;
				return null;
			}
			
			//Check if the given product is a valid solution for the current open choice
			if (!lCanFillChoice(openChoice.code, codeStr)) { 
				continue;
			}
			
			//If the current choice is Mutually Exclusive
			if (openChoice.isExclusive == true) {
				replaceLastSaleProduct = true;
				
				//Include a new product
				if (codeNumber > 0) {
					var newNode = lGenerateLoopMealProductInfo(codeStr, openChoice.level, openChoice.showGrillScreen);
					
					//If the current choice is a "Multi Choice" and the selected product can apply the ...
					//"Multi Choice", so solve the choice with the selected product
					if (newNode.allowMultiChoice == true && openChoice.isMultiChoice == true) {
						while (openChoice.children.length < openChoice.qty) {
							openChoice.children.push(newNode.copy());
						}
						openChoice.isSolved = true;
						return null;
					}
					
					//If there is some previously selected product different from the curently selected one, clear all
					if (openChoice.children.length > 0 && openChoice.children[0].code != codeStr) {
						openChoice.children = [];
					}
					
					//WWR-2150: Kiosk v4 script error with mutually exclusive choices
					if (openChoice.children.length < openChoice.qty) {
						//productXml.appendChild(newNode);
						openChoice.children.push(newNode);
					}
					
					if (openChoice.children.length == openChoice.qty) {
						openChoice.isSolved = true;
					}
					
					return null;
				}
				
				//Remove some previously added product
				if (codeNumber < 0) {
					for (var i = openChoice.children.length - 1; i >= 0; i--) {
						if (openChoice.children[i].code == codeStr) {
							openChoice.children.splice(i, 1);
							break;
						}
					}
					
					return null;
				}
			}
			
			//If the current chocie is NOT Mutually Exclusive
			if (openChoice.isExclusive != true) {
				var newNode = lGenerateLoopMealProductInfo(codeStr, openChoice.level, openChoice.showGrillScreen);
				
				if (newNode.allowMultiChoice == true && openChoice.isMultiChoice == true) {
					while (openChoice.children.length < openChoice.qty) {
						openChoice.children.push(newNode.copy());
					}
				} else {
					openChoice.children.push(newNode);
				}
				
				if (openChoice.children.length == openChoice.qty) {
					openChoice.isSolved = true;
				}
				
				return newNode;
			}
		}
		
		return null;
		
		function lCanFillChoice(choiceCode, productCode) {
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[choiceCode.toString()] == undefined && csoProductInfo[choiceCode.toString()].xmlNode == undefined){
				return false;
			}
			
			var configChoice = csoProductInfo[choiceCode.toString()].xmlNode;
			
			if (configChoice.Composition.Component.(ProductCode == productCode).length() > 0) {
				return true;
			}
			
			if (configChoice.CanAdds.Component.(ProductCode == productCode).length() > 0) {
				return true;
			}
			
			if (configChoice.Comments.Component.(ProductCode == productCode).length() > 0) {
				return true;
			}
			
			if (configChoice.Choices.Component.(ProductCode == productCode).length() > 0) {
				return true;
			}
			
			return false;
		}
	
		function lGetFirstMultiChoiceProduct(choiceCode) {
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[choiceCode.toString()] == undefined || csoProductInfo[choiceCode.toString()].xmlNode == undefined){
				return null;
			}
			
			var configChoice = csoProductInfo[choiceCode.toString()].xmlNode;
			var configProduct = null;
			
			for each (var component in configChoice.Composition.Component) {
				configProduct = csoProductInfo[component.ProductCode.toString()].xmlNode;
				if (configProduct.CustomParameters.Parameter.(@name == "AllowMultiChoice").@value == "true") {
					return component.ProductCode.toString();
				}
			}
			
			return configChoice.Composition.Component[0].ProductCode.toString();
		}
	}
	
	function lGetResizeInfo(saleProduct) {
		var copyFunction = function() {
			var productInfoCopy = {
				children: [],
				level: this.level,
				code: this.code,
				copy: copyFunction
			};
			
			for each (var child in this.children) {
				productInfoCopy.children.push(child.copy());
			}
			
			return productInfoCopy;
		}
		
		if (lGetNextOpenChoice(saleProduct, true) != null) {
			return null;
		}
		
		var saleableProducts = lGetSaleableProducts(saleProduct);
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[saleableProducts.shift().toString()] == undefined || csoProductInfo[saleableProducts.shift().toString()].xmlNode == undefined){
			return null;
		}
		
		var rootProductNode = csoProductInfo[saleableProducts.shift().toString()].xmlNode;
		var resizeInfo = {
			code: saleProduct.code,
			level: -1,
			children: [],
			copy: copyFunction
		}
		
		for each (var sizeOption in rootProductNode.SizeSelection.Size) {
			var sizeCandidateCode = sizeOption.@code.toString();
			var sizeCandidateEntry = sizeOption.@entry.toString();
			
			if (sizeCandidateCode == null || sizeCandidateCode == "" || 
				sizeCandidateEntry == null || sizeCandidateEntry == "") {
				continue
			}
			
			if (sizeCandidateCode == saleProduct.code.toString()) {
				resizeInfo.children.push(saleProduct.copy());
				continue
			}
			
			var saleableProductsCandidate = [];
			
			for each (var saleableProduct in saleableProducts) {
				// SDO-5227 - 5435005 Option to upsize meal not available when "showMealSizeSelectionAtTheEnd" is present and set to "true"
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				var saleableProductCandidate;
				if (csoProductInfo[saleableProduct.toString()] != undefined &&
				    csoProductInfo[saleableProduct.toString()].xmlNode != undefined &&
				    csoProductInfo[saleableProduct.toString()].xmlNode.SizeSelection != undefined) {
					saleableProductCandidate = csoProductInfo[saleableProduct.toString()].xmlNode.SizeSelection.Size.(@entry == sizeCandidateEntry).@code.toString();
					if (saleableProductCandidate == null || saleableProductCandidate == "") saleableProductCandidate = saleableProduct;
				} else {
					saleableProductCandidate = saleableProduct;
				}
				
				if (saleableProductCandidate != null && saleableProductCandidate != "") {
					if (isProductOfChoice(saleableProductCandidate, sizeCandidateCode)) {
						saleableProductsCandidate.push(saleableProductCandidate);
					}
				}
			}
			
			if (saleableProducts.length == saleableProductsCandidate.length) {
				var newNode = lGenerateLoopMealProductInfo(sizeCandidateCode, 0, false);
				while (saleableProductsCandidate.length > 0) {
					lTryFillChoice(newNode, saleableProductsCandidate.shift());
				}
				if (lGetNextOpenChoice(newNode, true) == null) {
					resizeInfo.children.push(newNode);
				}
			}
		}
		
		if (resizeInfo.children.length > 1) {
			return resizeInfo;
		}
		
		return null;
		
		// SDO-5227 - 5435005 Option to upsize meal not available when "showMealSizeSelectionAtTheEnd" is present and set to "true"
		function isProductOfChoice(productCode, choiceCode) {
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[choiceCode] == undefined || csoProductInfo[choiceCode].xmlNode == undefined){
				return false;
			}
		
			var choiceNode = csoProductInfo[choiceCode].xmlNode;
			
			for each (var component in choiceNode.Composition.Component) {
				if (choiceNode.@productClass == "CHOICE") {
					if (component.ProductCode.toString() == productCode) {
						return true;
					} else {
						if (isProductOfChoice(productCode, component.ProductCode.toString())) return true;
					}
				} else if (choiceNode.@productClass == "PRODUCT" || choiceNode.@productClass == "VALUE_MEAL"){
					if (isProductOfChoice(productCode, component.ProductCode.toString())) return true;
				}
			}
			
			for each (var innerChoice in choiceNode.Choices.Component) {
				if (isProductOfChoice(productCode, innerChoice.ProductCode.toString())) return true;
			}
			
			return false;
		}
		
		function lGetSaleableProducts(productInfo) {
		
			var saleList = new Array();
			lGetChildSaleList(productInfo, saleList);
			return saleList;
			
			function lGetChildSaleList(productInfo, destArray) {
				if (productInfo.isChoice == false) {
					destArray.push(productInfo.code);
				}
				
				for each (var childInfo in productInfo.children) {
					lGetChildSaleList(childInfo, destArray);
				}
			}
		}
	}
}

function PosCSOHasLoopMealEndedJS() {
	if (csoCurrentState.loopMeal.isRunning == false || csoCurrentState.loopMeal.saleProducts.length == 0) {
		return true;
	}
	
	if (csoCurrentState.loopMeal.saleProducts[csoCurrentState.loopMeal.saleProducts.length - 1].level < 0) {
		return false;
	}
	
	if (lGetNextOpenChoice(csoCurrentState.loopMeal.saleProducts[csoCurrentState.loopMeal.saleProducts.length - 1], true) != null) {
		return false;
	}
	
	return true;
}

function PosCSOOrderLoopMealProductsJS() {
	var saleProduct = csoCurrentState.loopMeal.saleProducts.length > 0 ? csoCurrentState.loopMeal.saleProducts[csoCurrentState.loopMeal.saleProducts.length - 1].copy() : null;
	
	if (saleProduct == null || csoCurrentState.loopMeal.isRunning == false) {
		API.dbg("CSO - PosCSOOrderLoopMealProductsJS: Can not order Loop Meal products. Loop Meal is not running.");
		return false;
	}
	
	PosCSOEndLoopMealJS();
	
	var saleList = lGetLoopMealSaleList(saleProduct).join("|");
	if(!PosCSODoSaleJS(saleList, csoCurrentState.loopMeal.barcode, null)) {
		API.dbg("CSO - PosCSOOrderLoopMealProductsJS.PosCSODoSaleJS: Could not finalize the sale (saleList=[" + saleList + "])");
		return false;
	}
	
	return PosSendUICmd('<Event type="ASYNC" name="DLG_SYS_END_ORDER_ITEM"/>');
}

function PosCSOStartLoopMealJS(productCode, barcode) {
	if (productCode == null || productCode.length == 0 || csoProductInfo[productCode] == null) {
		API.dbg("CSO - PosCSOStartLoopMealJS: Invalid product code (productCode=[" + productCode + "])");
		return false;
	}
	
	var configProduct = csoProductInfo[productCode].xmlNode;
	var saleProduct = null;
	var availableSizeSelectionsCount = 0;
	for each (var sizeOption in configProduct.SizeSelection.Size) {
		// NPS-11313 - Problem Kiosk blocked when button "return" used in sauce choice McNuggets 9 - ACSI1156982
		if (sizeOption.@showDimensionToCustomer != "false" &&
			sizeOption.@code != undefined &&
			csoProductInfo[sizeOption.@code].isValid) {
			availableSizeSelectionsCount++;
		}
	}
	
	var showSizeSelectionAtEnd = (lGetCSOUserInterfaceStringParameter("showMealSizeSelectionAtTheEnd", "false") == "true");
	csoCurrentState.loopMeal.showSizeSelectionAtEnd = ((configProduct.@productClass == "VALUE_MEAL") && 
		(showSizeSelectionAtEnd) && (availableSizeSelectionsCount > 1));
	
	if (availableSizeSelectionsCount > 1 && csoCurrentState.loopMeal.showSizeSelectionAtEnd != true) {
		var copyFunction = function() {
			var productInfoCopy = {
				children: [],
				level: this.level,
				code: this.code,
				copy: copyFunction
			};
			
			for each (var child in this.children) {
				productInfoCopy.children.push(child.copy());
			}
			
			return productInfoCopy;
		}
		
		var productInfo = {
			code: productCode.toString(),
			level: -1,
			children: [],
			copy: copyFunction
		}
		
		for each (var sizeOption in configProduct.SizeSelection.Size) {
			// NPS-11313 - Problem Kiosk blocked when button "return" used in sauce choice McNuggets 9 - ACSI1156982
			if (sizeOption.@showDimensionToCustomer == "false" ||
				(sizeOption.@code == undefined ||
				 !csoProductInfo[sizeOption.@code].isValid)) {
				continue;
			}
			
			productInfo.children.push({
				code: sizeOption.@code.toString(),
				level: 0,
				children: [],
				copy: copyFunction
			});
		}
		
		saleProduct = productInfo;
	} else {
		// NPS-11313 - Problem Kiosk blocked when button "return" used in sauce choice McNuggets 9 - ACSI1156982
		saleProduct = lGenerateLoopMealProductInfo(productCode.toString(), 0, false);
		
		//It is a simple product. Loop Meal is not allowed.
		if (lGetNextOpenChoice(saleProduct, true) == null) {
			return false;
		}
	}
	
	if (barcode != null && barcode != "") {
		csoCurrentState.loopMeal.barcode = barcode;
	}
	
	csoCurrentState.loopMeal.saleProducts = [];
	csoCurrentState.loopMeal.saleProducts.push(saleProduct);
	csoCurrentState.loopMeal.lastAddedProduct = saleProduct;
	csoCurrentState.loopMeal.isRunning = true;
	return true;
}

function PosCSOGenerateLoopMealViewJS() {
	var saleProduct = csoCurrentState.loopMeal.saleProducts.length > 0 ? csoCurrentState.loopMeal.saleProducts[csoCurrentState.loopMeal.saleProducts.length - 1].copy() : null;
	
	if (csoCurrentState.loopMeal.isRunning == false || saleProduct == null) {
		API.dbg("CSO - PosCSOGenerateLoopMealViewJS: Can not generate the Loop Meal view. Loop Meal is not running.");
		return false;
	}
	
	csoCurrentState.loopMeal.currentView = lGenerateLoopMealView(saleProduct, csoCurrentState.loopMeal.saleProducts.length - 1);
	return (csoCurrentState.loopMeal.currentView != null);
	
	/**
	 *
	 * @brief - Generate the Loop Meal view to be send to the Kiosk UI
	 * @param - saleProduct: the product structure being sold (generated by 'lGenerateProductNode' function)
	 * @param - id: The ID of current view
	 * @author - Christiano Meirelles
	 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
	 */
	function lGenerateLoopMealView(saleProduct, id) {
		var saleProductXml;
		var openChoiceXml;
		var choiceCostInclusive;
	
		if (saleProduct == null) {
			return null;
		}
		
		
		if (saleProduct.level < 0) {
			//NPS-10573: Progress Images only displayed for ChoiceGroup SIDE - ACSI0813953
			lClearLoopMealProductStack();
			var contentXml = lGenerateSizeSelectionView(saleProduct, id);
			var eventXml = lGenerateLoopMealEvent(contentXml);
			return eventXml;
		} else {
			var openChoice = lGetNextOpenChoice(saleProduct, true);
			//SDO-6218 - Kiosk v4 - Component's price is shown in the VM loop when the choice has CostInclusive = true 
			saleProductXml = csoProductInfo[saleProduct.code.toString()].xmlNode;
			
			if (openChoice != null) {
				//PosShowMessage("Open choice detected - Code=["+openChoice.@code+"]");
				
				openChoiceXml = saleProductXml.Choices.Component.(ProductCode == openChoice.code.toString());
				choiceCostInclusive = (openChoiceXml.CostInclusive.toString() === "true");
				
				var choiceImages = lGetChoiceImages(saleProduct);
				
				var contentXml = lGenerateChoiceSelectionView(openChoice, choiceImages, id, saleProduct, choiceCostInclusive);
				var eventXml = lGenerateLoopMealEvent(contentXml);
				return eventXml;
			}
			//PosShowMessage("No open choices detected");
		}
		
		return null;
		
		//NPS-10573: Progress Images only displayed for ChoiceGroup SIDE - ACSI0813953
		function lClearLoopMealProductStack(){
			csoChoiceSelectionStack = new Array();
		}
		
		function lGenerateLoopMealEvent(xmlContent) {
			var eventXml = new XML('<Event type="ASYNC" name="DLG_LOOP_MEAL_SHOW_PRODUCTS"/>');
			eventXml.appendChild(xmlContent);
			return eventXml;
		}

		function lGenerateChoiceSelectionView(choiceInfo, choiceImages, id, saleProduct, choiceCostInclusive) {
			
			/* SAMPLE
			<Products name="M MD CBO" title="" type="CHOICE_EXCLUSIVE_SELECTION">
				<Product code="7320" name="Small Fries" price="1.00" image="" isMultiChoice="false" qty="0" />
				<Product code="7322" name="Medium Frites" price="0.0" image="" isMultiChoice="false" qty="0" />
				<Product code="7324" name="Mini Frites" price="0.0" image="" isMultiChoice="false" qty="0" />
				<Product code="7323" name="Medium Potato" price="1.00" image="" isMultiChoice="false" qty="0" />
				<Product code="7290" name="Menu+ Salade" price="0.0" image="" isMultiChoice="true" qty="0" />
			</Products>
			*/
			var costInclusive;
			
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[choiceInfo.code.toString()] == undefined || csoProductInfo[choiceInfo.code.toString()].xmlNode == undefined) {
				return null;
			}
			
			var configChoice = csoProductInfo[choiceInfo.code.toString()].xmlNode;
			var language = sessionSale.get("LANGUAGE");
			var hideHeaderName = lGetParameterStr("hideHeaderNameOnValueMealLoop", "false");
			
			//NPS-11239 - Not possible to sell two Choices of a VM if the Components have Choices too - ACSI1141153
			//NPS-10573: Progress Images only displayed for ChoiceGroup SIDE - ACSI0813953
			var previousChoice = csoChoiceSelectionStack[csoChoiceSelectionStack.length - 1];
			
			var productsXml = new XML("<Products />");
			productsXml.@code = choiceInfo.code;
			if (hideHeaderName == "true") {
				productsXml.@name = "";
			} else {
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				if (csoProductInfo[saleProduct.code.toString()] != undefined) {
					productsXml.@name = csoProductInfo[saleProduct.code.toString()].names[language].csoName + " " + csoProductInfo[saleProduct.code.toString()].price.getCurrent();
				}
				else {
					productsXml.@name = "";
				}
			}
			productsXml.@title = lGetViewTitle(configChoice.ChoiceGroup);
			productsXml.@choiceImages = choiceImages;
			productsXml.@id = id;
			productsXml.@canCancel = true;
			productsXml.@canReturn = (id > 0);
			
			//NPS-10573: Progress Images only displayed for ChoiceGroup SIDE - ACSI0813953
			csoChoiceSelectionStack.push({
				productCode:  choiceInfo.code,
				choiceGroup: configChoice.ChoiceGroup.toUpperCase(),
				level:  choiceInfo.level
			});
			
			// WWR-2219: Kiosk GUI V3 and V4 - VML circles for choices not appearing consistently
			if (choiceInfo.isExclusive == true) {
				if (choiceInfo.level > 1) {
					productsXml.@type = "EXCLUSIVE_SUB_CHOICE";
				} else {
					productsXml.@type = "EXCLUSIVE_CHOICE";
				}
			// NPS-12000 - DA - NP6.1.19 - Number of Circle Images wrong on GUI4 - ACSI1156644
			//NPS-10919 - Kiosk GUI 4 RC10 - Circle images are random - ACSI0991701
			//NPS-10573: Progress Images only displayed for ChoiceGroup SIDE - ACSI0813953
			//SDO-8858: [NP6.1.23 RC5 QR2][Lab 02][UK] - Changing Choice group from mains to sides resolves EQA-1350
			} else if (choiceInfo.level > 1
				&& ((typeof previousChoice !== "undefined"
				&& choiceInfo.level === previousChoice.level + 1)
				|| (configChoice.ChoiceGroup.toUpperCase() == "SAUCE" && displayAllSubChoicesAsStepsOnVML == "false")
				|| (configChoice.ChoiceGroup.toUpperCase() == "DRESSING" && displayAllSubChoicesAsStepsOnVML == "false") )) {
				productsXml.@type = "SUB_CHOICE";
				productsXml.@canCancel = (id == 0);
			} else if (configChoice.ChoiceGroup.toUpperCase() == "SIDE") {
				productsXml.@type = "CHOICE";
			} else {
				productsXml.@type = "CHOICE_SMALL";
			}
			
			var csoReferencePrice = -1;
			if(lGetCSOUserInterfaceStringParameter("showUpliftPrices", "false") == "true"){
				//SDO-5540: CSO - Enable Hiding Drink Price And Showing Uplift On Buttons
				var CSOReferenceProductCode = configChoice.CustomParameters.Parameter.(@name == "CSOReferenceProductCode").@value;
				if(CSOReferenceProductCode != null && CSOReferenceProductCode.length != 0 && CSOReferenceProductCode != ""){
					if(csoProductInfo[CSOReferenceProductCode] != null){
						var referenceProduct = csoProductInfo[CSOReferenceProductCode];
						if(referenceProduct.isValid){
							csoReferencePrice = csoProductInfo[CSOReferenceProductCode].unitPrice.getCurrent();
						} else {
							API.dbg("The CSOReferenceProductCode custom parameter of product " + configChoice.ProductCode.toString() + " does not refer to a valid CSO product.");
						}
					} else {
						API.dbg("The CSOReferenceProductCode custom parameter of product " + configChoice.ProductCode.toString() + " does not refer to an existing product.");
					}
				}
			}

			for each (choiceOption in configChoice.Composition.Component) {
				//CES-1114 - The price of the choices with cost-inclusive "true" are being displayed on the Kiosk screen
				//SDO-6218 - Kiosk v4 - Component's price is shown in the VM loop when the choice has CostInclusive = true 
				costInclusive = choiceCostInclusive || (csoProductInfo[choiceInfo.code.toString()].xmlNode.Composition.Component.(ProductCode == choiceOption.ProductCode).CostInclusive.toString() === "true");
				lAppendProductTag(productsXml, choiceInfo, choiceOption.ProductCode, costInclusive.toString(), csoReferencePrice);
			}
			
			for each (choiceOption in configChoice.CanAdds.Component) {
				//CES-1114 - The price of the choices with cost-inclusive "true" are being displayed on the Kiosk screen
				//SDO-6218 - Kiosk v4 - Component's price is shown in the VM loop when the choice has CostInclusive = true 
				costInclusive = choiceCostInclusive || (csoProductInfo[choiceInfo.code.toString()].xmlNode.CanAdds.Component.(ProductCode == choiceOption.ProductCode).CostInclusive.toString() === "true");
				lAppendProductTag(productsXml, choiceInfo, choiceOption.ProductCode, costInclusive.toString(), csoReferencePrice);
			}
			
			for each (choiceOption in configChoice.Comments.Component) {
				//CES-1114 - The price of the choices with cost-inclusive "true" are being displayed on the Kiosk screen
				//SDO-6218 - Kiosk v4 - Component's price is shown in the VM loop when the choice has CostInclusive = true 
				costInclusive = choiceCostInclusive || (csoProductInfo[choiceInfo.code.toString()].xmlNode.Comments.Component.(ProductCode == choiceOption.ProductCode).CostInclusive.toString() === "true");
				lAppendProductTag(productsXml, choiceInfo, choiceOption.ProductCode, costInclusive.toString(), csoReferencePrice);
			}
			
			for each (choiceOption in configChoice.Choices.Component) {
				//CES-1114 - The price of the choices with cost-inclusive "true" are being displayed on the Kiosk screen
				//SDO-6218 - Kiosk v4 - Component's price is shown in the VM loop when the choice has CostInclusive = true 
				costInclusive = choiceCostInclusive || (csoProductInfo[choiceInfo.code.toString()].xmlNode.Choices.Component.(ProductCode == choiceOption.ProductCode).CostInclusive.toString() === "true");
				lAppendProductTag(productsXml, choiceInfo, choiceOption.ProductCode, costInclusive.toString(), csoReferencePrice);
			}
			
			return productsXml;
			
			function lAppendProductTag(productsXml, choiceInfo, productCode, costInclusive, referencePrice) {
				//SSU-51: CSO. Es posible no informar nombre de producto en los Pop up, pero que el nombre del producto si figure en "Mi orden".
				var hideChoiceName = lGetParameterStr("hideProductNameOnChoiceSelection", "false");
				
				if (!csoProductInfo[productCode.toString()].isValid) {
					return;
				}
				
				var productInfo = csoProductInfo[productCode.toString()];
				var configProduct = productInfo.xmlNode;
			
				var productXml = new XML("<Product />");
				productXml.@code = productCode;
				
				//SSU-51: CSO. Es posible no informar nombre de producto en los Pop up, pero que el nombre del producto si figure en "Mi orden".
				if (hideChoiceName == "false" || (hideChoiceName == "true" && configProduct.CustomParameters.Parameter.(@name == "forceProductNameOnChoiceSelection").@value == "true")) {
					productXml.@name = productInfo.names[language.toString()].csoName;
				} else {
					productXml.@name = "";
				}
				
				var CSODisplayPrice = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSODisplayPrice").@value;
				
				// NPS-9610: Kiosk GUI 3 - GUI should hide products that aren't priced - ACSI0419542
				// NPS-10618: Kiosk GUI 4 Drop 2 HF1 - Happy Meal Shakes causing Fatal Error - ACSI0836804
				if (PosCheckIfPriceNodeIsValid(configProduct))
				{
					//CES-1114 - The price of the choices with cost-inclusive "true" are being displayed on the Kiosk screen
					if(costInclusive == "false" && (CSODisplayPrice == null || CSODisplayPrice != "false")) {
						 
						var price = new BigDecimal(productInfo.unitPrice.getCurrent());

						referencePrice = new BigDecimal(referencePrice);

						var upLift = price.subtract(referencePrice);

						API.dbg("#### price type: "+ (typeof price) + " referencePrice type: "+ (typeof referencePrice));

						//SDO-5540: CSO - Enable Hiding Drink Price And Showing Uplift On Buttons
						API.dbg("LMRefPrice:" + referencePrice + "Price:" + price + "Product Code:" + productCode + "Uplift: " + (price - referencePrice));

						if (referencePrice.compareTo(BigDecimal.ZERO) > 0) {
							API.dbg("Product Code: " + productCode + "RefPrice" + referencePrice + " Ref Price Maior que zero" + "Uplift: " + upLift);

							if (upLift.compareTo(BigDecimal.ZERO) > 0) {
								API.dbg("Product Code: " + productCode + "Uplift: " + upLift + " Uplift Maior que zero");
								productXml.@price = "+" + upLift;
							} else {
								API.dbg("Product Code: " + productCode + "Uplift: " + upLift + " Uplift Negativo");

								//if uplift is negative, do not show price
								productXml.@price = "0";
							}
						} else {
							API.dbg("Product Code: " + productCode + "Uplift: " + (price - referencePrice) + "Not Turned On");

							//if uplift is not turned on, should show whole price
							productXml.@price = price;
						}
					} else {
						productXml.@price = "0";
					}
					
					var productQuantity = 0;
					for each (var choiceSolution in choiceInfo.children) {
						if (choiceSolution.code == productCode.toString()) {
							productQuantity++;
						}
					}
					
					productXml.@image = productInfo.csoImages.largeImage;
					productXml.@qty = productQuantity;
					productXml.@canAdd = ((choiceInfo.isExclusive == true) ? 
						(productQuantity < Number(choiceInfo.qty)) : (choiceInfo.children.length < Number(choiceInfo.qty)));
					productXml.@canRemove = (productQuantity > 0);
					
					if (configProduct.@productClass == "CHOICE") {
						productXml.@isMultiChoice = choiceInfo.isMultiChoice;
					} else {
						productXml.@isMultiChoice = (choiceInfo.isMultiChoice == true && configProduct.CustomParameters.Parameter.(@name == "ApplyMultiChoice").@value == "true");
					}
				
					productsXml.appendChild(productXml);
				}
			}
			
		}

		function lGenerateSizeSelectionView(saleProduct, id) {
			
			/* SAMPLE
			<Products name="" title="CSO_MSG_SIZE_SELECTION" type="SIZE_SELECTION" canCancel="true" canReturn="false">
				<Product code="6696" name="CBO" price="7.10" image="" />
				<Product code="7052" name="Menu CBO" price="8.60" image="" />
				<Product code="7207" name="M MD CBO" price="13.30" image="" />
				<Product code="7107" name="Menu CBO" price="12.10" image="" />
			</Products>
			*/
			
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[saleProduct.code.toString()] == undefined) {
				return null;
			}
			
			var productInfo = csoProductInfo[saleProduct.code.toString()];
			var language = sessionSale.get("LANGUAGE");
			var hideHeaderName = lGetParameterStr("hideHeaderNameOnValueMealLoop", "false");
			
			var productsXml = new XML("<Products />");
			if (hideHeaderName == "true") {
				productsXml.@name = "";
			} else {
				productsXml.@name = productInfo.names[language.toString()].csoName;
			}
			productsXml.@title = lGetViewTitle("UPSELLING");;
			productsXml.@type = "SIZE";
			productsXml.@id = id;
			productsXml.@canCancel = true;
			productsXml.@canReturn = false;
			
			for each (var sizeOption in saleProduct.children) {
				lAppendProductTag(sizeOption.code, productsXml);
			}
			
			return productsXml;
			
			function lAppendProductTag(productCode, productsXml) {
				
				var productInfo = csoProductInfo[productCode.toString()];
				
				if (productInfo == null || !productInfo.isValid) {
					API.dbg("CSO - lGenerateLoopMealView.lGenerateSizeSelectionView.lAppendProductTag - Product does not exist or is not avaialble - ProductCode:" + productCode);
					return;
				}
				
				var productXml = new XML("<Product />");
				productXml.@code = productCode;
				productXml.@name = productInfo.names[language.toString()].csoName;
				//SDO-5554: CSO - Hide Product Prices Button Enhancements
				var CSODisplayPrice = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSODisplayPrice").@value;
				if(CSODisplayPrice != null && CSODisplayPrice == "false"){
					productXml.@price = "0";
				} else {
					productXml.@price = productInfo.unitPrice.getCurrent();
				}
				productXml.@image = productInfo.csoImages.dimensionImage;
				productXml.@qty = -1;
				productXml.@isMultiChoice = false;
				
				// SDO-5539 - CSO - Combine Meal And Drink Prices
				if ((CSODisplayPrice == null || CSODisplayPrice != "false") && productInfo.xmlNode.@productClass == "VALUE_MEAL") {
					var price = 0.0;
					for each (var choice in productInfo.xmlNode.Choices.Component) {
						if (choice.CostInclusive.toString() == "false") {
							price += fCombinePrice(choice);
						}
					}
					
					price += parseFloat(productXml.@price);
					productXml.@price = String(price);
				}
				// NPS-9610: Kiosk GUI 3 - GUI should hide products that aren't priced - ACSI0419542
				if (PosCheckIfPriceNodeIsValid(productInfo.xmlNode))
				{
					productsXml.appendChild(productXml);
				}
			}
			
			// SDO-5539 - CSO - Combine Meal And Drink Prices
			function fCombinePrice(choice) {
				var price = 0.0;
				
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22				
				if (csoProductInfo[choice.ProductCode.toString()] == undefined || csoProductInfo[choice.ProductCode.toString()].xmlNode == undefined) {
					return price;
				}
				
				var choiceInfo = csoProductInfo[choice.ProductCode.toString()].xmlNode;
				// CSO-766 - POS-362 - Customer Choice on NGK (8618134)		
				var quantity = isCCM && choice.FlexibleChoice.toString().toUpperCase() == "TRUE"  ? choice.MinQuantity : choice.DefaultQuantity;		
				var multiplier = parseInt(quantity.toString());
				if (multiplier < 0 && !isCCM) {
					multiplier = 1;
				}
				
				if (choiceInfo != null && choiceInfo.CustomParameters.Parameter.(@name == "CSOCombineToVMPrice").@value == "true") {
					// CSO-766 - POS-362 - Customer Choice on NGK (8618134)
					var refType = isCCM ? "CSOCCMBaseProduct" : "CSOReferenceProductCode";
					var refProduct = csoProductInfo[choiceInfo.CustomParameters.Parameter.(@name == refType).@value];
					
					if (refProduct != null) {
						price += (parseFloat(refProduct.unitPrice.getCurrent()) * multiplier);
						
						for each (var innerChoice in refProduct.xmlNode.Choices.Component) {
							price += (fCombinePrice(innerChoice) * multiplier);
						}
					}
				}
				
				return price;
			}
		}

		function lGetViewTitle(choiceGroup) {
			
			if (choiceGroup == null || choiceGroup == "") {
				return PosCSOI18nGetMessageJS("CSO_LOOPMEAL_TITLE");
			}
			
			var i18nKey = "CSO_LOOPMEAL_TITLE_" + choiceGroup.toUpperCase();
			
			var title = PosCSOI18nGetMessageJS(i18nKey);
			if (title == i18nKey) {
				return PosCSOI18nGetMessageJS("CSO_LOOPMEAL_TITLE");
			}
			
			return title;
		}
	}
}

function PosCSOSendLoopMealViewJS() {
	if (csoCurrentState.loopMeal.currentView == null && !PosCSOGenerateLoopMealViewJS()) {
		API.dbg("CSO - PosCSOSendLoopMealViewJS: There is no Loop Meal view.");
		return false;
	}
	
	var currentLoopMealView = csoCurrentState.loopMeal.currentView;
	csoCurrentState.loopMeal.currentView = null;
	
	return PosSendUICmd(currentLoopMealView.toXMLString());
}

function PosCSOOrderSimpleProductJS(productCode, barcode) {
	if (productCode == null || productCode.length == 0 || csoProductInfo[productCode] == null) {
		API.dbg("CSO - PosCSOOrderSimpleProductJS: Invalid product code (productCode=[" + productCode + "])");
		return false;
	}
	
	if(!PosCSODoSaleJS(productCode, barcode, null)) {
		API.dbg("CSO - PosCSOOrderSimpleProductJS.PosCSODoSaleJS: Could not finalize the sale (productCode=[" + productCode + "])");
		return false;
	}
	
	return PosSendUICmd('<Event type="ASYNC" name="DLG_SYS_END_ORDER_ITEM"/>');
}

function PosCSOAutoGrillLoopMealProductJS() {
	if (csoConfigurationInfo.grillLayout.toLowerCase() == "none" || 
		csoConfigurationInfo.grillLayout.toLowerCase() == "minimum" || 
		csoConfigurationInfo.grillLayout.toLowerCase() == "basic") {
		return false;
	}
	
	if (csoCurrentState.loopMeal.lastAddedProduct == null || csoCurrentState.loopMeal.lastAddedProduct.showGrillScreen != true) {
		return false;
	}
	
	if (csoCurrentState.loopMeal.lastAddedProduct.level == 0) {
		csoCurrentState.loopMeal.pendingGrills = lGetGrillableValueMealComposition(csoCurrentState.loopMeal.lastAddedProduct.code);
		return PosCSOShowNextLoopMealGrillJS();
	} else {
		lGenerateGrillObjectArray(csoCurrentState.loopMeal.lastAddedProduct.code);
		var grillView = lGetCustomizeFirstGrillView(csoCurrentState.loopMeal.lastAddedProduct.code);
		if (grillView != null) {
			lAddProductRecord(csoCurrentState.loopMeal.lastAddedProduct.code);
			return PosSendUICmd(grillView);
		}
	}
	
	return false;
	
	/**
	 * @brief - Get all of the components of a value meal that aren't choices and that are grillable.
	 * @param - productCode - Product code of the value meal.
	 * @returns - An array containing all of the product codes of the value meal.
	 * @author - Felipe Armoni
	 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	 */
	function lGetGrillableValueMealComposition(productCode) {
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode.toString()] == undefined || csoProductInfo[productCode.toString()].xmlNode == undefined) {
			return null;
		}
		
		var productNode = csoProductInfo[productCode.toString()].xmlNode;
		var compositionCodes = [];
		var i;
		var componentQuantity;
		
		for each (var component in productNode.Composition.Component) {
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[component.ProductCode.toString()] != undefined && csoProductInfo[component.ProductCode.toString()].isGrillable) {
				// Adds as many times a single product as is specified on the productdb.xml
				componentQuantity = Number(component.DefaultQuantity.toString());
				for (i = 0; i < componentQuantity; i++) {
					compositionCodes.push(component.ProductCode);
				}
			}
		}
		
		return compositionCodes;
	}
}

function PosCSOAutoGrillLastProductJS() {
	if (csoConfigurationInfo.grillLayout.toLowerCase() == "none" || 
		csoConfigurationInfo.grillLayout.toLowerCase() == "minimum" || 
		csoConfigurationInfo.grillLayout.toLowerCase() == "basic") {
		return true;
	}
	
	var orderView = new XML(hlp.getCurrentView());
	
	if (orderView.ItemView.(currentSelected == "true").length() > 0) {
		var productCode = orderView.ItemView.(currentSelected == "true")[0].productCode.toString();
		var productInfo = csoProductInfo[productCode];
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (productInfo == null || productInfo == undefined) {
			return false;
		}
		
		if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "csoShowFullCustomizationScreenOnSale").@value == "true" && productInfo.isGrillable) {
			PosCSOShowCustomizeScreenJS();
		}
	}
	
	return true;
}

function PosCSOShowNextLoopMealGrillJS() {
	if (csoConfigurationInfo.grillLayout.toLowerCase() == "none" || 
		csoConfigurationInfo.grillLayout.toLowerCase() == "minimum" || 
		csoConfigurationInfo.grillLayout.toLowerCase() == "basic") {
		return false;
	}
	
	if (csoCurrentState.loopMeal.pendingGrills == null || csoCurrentState.loopMeal.pendingGrills.length == 0) {
		return false;
	}
	
	var productCode = csoCurrentState.loopMeal.pendingGrills.shift();
	lGenerateGrillObjectArray(productCode);
	var grillView = lGetCustomizeFirstGrillView(productCode);
	if (grillView != null) {
		lAddProductRecord(productCode);
			
		return PosSendUICmd(grillView);
	}
	
	return false;
}

function PosCSOProcessPendingGrillOperationsJS() {
	if (csoConfigurationInfo.grillLayout.toLowerCase() == "none" || 
		csoConfigurationInfo.grillLayout.toLowerCase() == "minimum" || 
		csoConfigurationInfo.grillLayout.toLowerCase() == "basic") {
		return true; //SDO-5832 - CSO - Order fails showing in basket for Grill Screen Layout not Full
	}
	
	lProcessGrillOperations();
	return true;
}

/**
 *
 * @brief - Performs a sale on Kiosk. If the Loop Meal is detected, the Loop Meal screen is shown
 * @param - productCode: the product to sale
 * @param - barcode: the bar code of the product
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOOrderItemJS(productCode, barcode) {
	
	if (PosCSOIsOnLoopMealJS()) {
		if (!PosCSOAddLoopMealProductJS(productCode)) {
			return false;
		}
		
		if (PosCSOHasLoopMealEndedJS()) {
			if (PosCSOAutoGrillLoopMealProductJS()) {
				return true;
			}
			if (!PosCSOOrderLoopMealProductsJS()) {
				return false;
			}
			
			PosCSOProcessPendingGrillOperationsJS();
			return true;
		} else {
			if (!PosCSOGenerateLoopMealViewJS()) {
				return false;
			}
			if (PosCSOAutoGrillLoopMealProductJS()) {
				return true;
			}
			return PosCSOSendLoopMealViewJS();
		}
	} else if (PosCSOStartLoopMealJS(productCode)) {
		if (!PosCSOGenerateLoopMealViewJS()) {
			return false;
		}
		return PosCSOSendLoopMealViewJS();
	} else {
		if (!PosCSOOrderSimpleProductJS(productCode)) {
			return false;
		}
		PosCSOAutoGrillLastProductJS();
		return true;
	}
	
	//Should never get here
	return false;
}

/**
 *
 * @brief - Gets the list of all products that should be passed to the NP to complete the desired sale
 * @param - productsXml: the product structure being sold (generated by 'lGenerateProductNode' function)
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lGetLoopMealSaleList(productInfo) {
	
	var saleList = new Array();
	lGetChildSaleList(productInfo, saleList);
	return saleList;
	
	function lGetChildSaleList(productInfo, destArray) {
		if (productInfo.isChoice == false) {
			destArray.push(productInfo.code);
		}
		
		for each (var childInfo in productInfo.children) {
			lGetChildSaleList(childInfo, destArray);
		}
	}
}

function lGenerateLoopMealProductInfo(code, level, showGrillScreen) {
	
	var copyFunction = function() {
		var productInfoCopy = {
			children: [],
			level: this.level,
			qty: this.qty,
			code: this.code,
			isChoice: this.isChoice,
			isSolved: this.isSolved,
			isExclusive: this.isExclusive,
			isMultiChoice: this.isMultiChoice,
			allowMultiChoice: this.allowMultiChoice,
			showGrillScreen: this.showGrillScreen,
			copy: copyFunction
		};
		
		for each (var child in this.children) {
			productInfoCopy.children.push(child.copy());
		}
		
		return productInfoCopy;
	}
	
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	if (csoProductInfo[code.toString()] == undefined || csoProductInfo[code.toString()].xmlNode == undefined){
		return null;
	}
	
	var configProduct = csoProductInfo[code.toString()].xmlNode;
	
	var productInfo = {
		children: [],
		level: Number(level),
		qty: 1,
		code: code.toString(),
		isChoice: (configProduct.@productClass == "CHOICE"),
		isSolved: (configProduct.@productClass != "CHOICE"),
		isExclusive: false,
		isMultiChoice: (configProduct.CustomParameters.Parameter.(@name == "ApplyMultiChoice").@value == "true"),
		allowMultiChoice: (configProduct.CustomParameters.Parameter.(@name == "AllowMultiChoice").@value == "true"),
		showGrillScreen: (configProduct.CustomParameters.Parameter.(@name == "csoShowFullCustomizationScreenOnSale").@value == "true"),
		copy: copyFunction
	};
	
	if (showGrillScreen == true) {
		productInfo.showGrillScreen = true;
	}
	
	for each (var subComponent in configProduct.Composition.Component) {
		//NPS-9632: Same Product displayed separately in Basket. - ACSI0427604
		for (var i = 0; i < subComponent.DefaultQuantity; i++)
		{
			lAppendCompositionChild(subComponent, productInfo.level + 1, productInfo)
		}
	}
	
	for each (var subComponent in configProduct.Choices.Component) {
		lAppendChoiceChild(subComponent, productInfo.level + 1, productInfo)
	}

	return productInfo;
	
	function lAppendCompositionChild(component, subLevel, parent) {
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[component.ProductCode.toString()] == undefined || csoProductInfo[component.ProductCode.toString()].xmlNode == undefined){
			return null;
		}
		
		var configChild = csoProductInfo[component.ProductCode.toString()].xmlNode;
		
		if (configChild.@productClass == "PRODUCT") {
		
			for each (var subComponent in configChild.Composition.Component) {
				//NPS-9632: Same Product displayed separately in Basket. - ACSI0427604
				for (var i = 0; i < subComponent.DefaultQuantity; i++)
				{
					lAppendCompositionChild(subComponent, subLevel + 1, parent)
				}
			}
			
			for each (var subComponent in configChild.Choices.Component) {
				lAppendChoiceChild(subComponent, subLevel + 1, parent)
			}
		}
	}
	
	function lAppendChoiceChild(component, subLevel, parent) {
		
		var configChild = csoProductInfo[component.ProductCode.toString()].xmlNode;
		
		if (configChild.@productClass == "CHOICE") {
			// NPS-9838: Kiosk - Frappe and Milk Meal balancing balances on the till however on the kiosk shows a blank screen instead - 6384316
			// Auto choices must be handled by NewPos engine, Kiosk should not display the choice to the customer
			var isAutoChoice = false;
			for each (var choiceFiller in configChild.Composition.Component) {
				if (Number(choiceFiller.DefaultQuantity) > 0) {
					isAutoChoice = true;
					break;
				}
			}
			
			if (!isAutoChoice)
			{
				var choiceInfo = {
					children: [],
					level: Number(subLevel),
					qty: Number(component.DefaultQuantity),
					code: component.ProductCode.toString(),
					isChoice: true,
					isSolved: false,
					isExclusive: (Number(component.DefaultQuantity) > 1 && configChild.IsMutuallyExclusive == "true"),
					isMultiChoice: parent.isMultiChoice,
					allowMultiChoice: false,
					showGrillScreen: parent.showGrillScreen,
					copy: copyFunction
				}
				
				parent.children.push(choiceInfo);
				
				var autoFillerCode = PosCSOGetChoiceDefaultItemJS(component.ProductCode);
				
				if (autoFillerCode != null) {
					choiceInfo.isSolved = true;
					for (var i = 0; i < choiceXml.qty; i++) {
						var newNode = lGenerateLoopMealProductInfo(autoFillerCode, subLevel, showGrillScreen);
						choiceInfo.children.push(newNode);
					}
				}
			}
		}
	}
}

/**
 *
 * @brief - When the fisrt customization is detected, send customization view to UI
 * @param - productCode: the products to de sale separeted by pipes
 * @author - Felipe Armoni
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @modified - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 *             CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
 */
function lGetCustomizeFirstGrillView(productCode) {
	var componentsArray = new Array();
	var swapItemsArray;
	var itemsArray = new Array();
	var parentProductCode;
	var grillObject;
	var language = sessionSale.get("LANGUAGE");
	var xml;

	if (productCode == "" || productCode == null) {
		API.dbg("CSO - lGetCustomizeFirstGrillView - Invalid product code");
		return null;
	}
	
	var mainProductConfig = csoProductInfo[productCode.toString()];
	var mainProductNode = mainProductConfig.xmlNode;
	
	if (!mainProductConfig.isGrillable) {
		API.dbg("CSO - lGetCustomizeFirstGrillView - Product is not grillable");
		return null;
	}
	
	// Get the swap products (if any).
	swapItemsArray = lGetSwapProductArray(mainProductNode);
	
	var item;
	
	// Iterate through each component type (Composition, CanAdds and Comments) and add them to the arrays itemsArray and swapItemsArray.
	for each (grillObject in grillObjectArray) {
		item = lGenerateCustomizeItem(grillObject);
		
		// Get the parent code of a SwapItem, if available.
		var parentProductCode = lIsSwapProduct(swapItemsArray, grillObject.Code);
			
		// Separate the normal items from the swap items.
		if (parentProductCode == "") {
			itemsArray[grillObject.Code] = item;
		} else {
			swapItemsArray[parentProductCode][grillObject.Code] = item;
		}
	}
		
	// Iterate through the SwapItems in order to add the selected item as the main product and the other items as its child.
	for (parentProductCode in swapItemsArray) {
		// Get the selected item.
		var selectedItemCode = lGetSelectedSwapItem(swapItemsArray, parentProductCode);
				
		// If there is no selected item, set the main product as the parent product.
		if (selectedItemCode == "-1") {
			selectedItemCode = parentProductCode;
		}
		
		// Create the SwapItems tag and add all of the items that are not selected beneath it.
		swapItemsXML = new XML('<SwapItems />');
		
		for (var swapCode in swapItemsArray[parentProductCode]) {
			if (swapCode != selectedItemCode) {
				swapItemsXML.appendChild(swapItemsArray[parentProductCode][swapCode]);
			}
		}
		
		// Add the SwapItems tag as a child of the selected item.
		itemsArray[selectedItemCode] = swapItemsArray[parentProductCode][selectedItemCode];
		itemsArray[selectedItemCode].appendChild(swapItemsXML);
	}

	// Sort the items by index.
	itemsArray = lSortGrillItems(itemsArray);
	
	// Generate the XML.
	var componentsXml = new XML('<Component />');
	componentsXml.@index = "0";
	componentsXml.@code = productCode;
	componentsXml.@name = mainProductConfig.names[language].csoName;
	componentsXml.@isSelected = "true";
	componentsXml.@backgroundImage = mainProductConfig.csoImages.grillImage;

	// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	var energy = lGetEnergyInformation(productCode);
	if (energy != "")
	{
		componentsXml.@energy = energy;
	}

	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	// CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
	if (csoEnableAllergensEnhancement == "true") {
		var allergensFound=[];
		// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
		allergensFound = lFindAllergens(allergensFound, productCode, [], true, false, false, true);
		if (allergensFound.length>0) {
			componentsXml.@hasAllergens = "true";

			// now look for signaled allergens
			allergensFound=[];
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
			// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
			allergensFound = lFindAllergens(allergensFound, productCode, selectedAllergensList, true, false, false, false);
			if (allergensFound.length>0) {
				componentsXml.@hasSignaledAllergens = "true";
			}
		}
	}
	
	// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	for each (item in itemsArray) {
		var energy = lGetEnergyInformation(item.@code);
		if (energy != "")
		{
			item.@energy = energy;
		}
		componentsXml.appendChild(item);
	}
		
	var grillInfo = new XML('<GrillInfo />');
	grillInfo.appendChild(componentsXml);
	
	xml = grillInfo.toXMLString();
	
	API.dbg("CSO - lGetCustomizeFirstGrillView View:[" + xml + "]");
	return xml;
	
	/**
	 * @brief - Generates an <Item> element from a given component.
	 * @param - component - The component XML element that was obtained from the recipe of the main product.
	 * @param - itemType - A string describing the type of the item to be created: Composition, CanAdd or Comment.
	 * @param - index - An integer that contains the index of the current component.
	 * @returns - A XML object containing the <Item > tag.
	 * @author - Felipe Armoni
	 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	 * @modified - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	 *             CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
	 */
	function lGenerateCustomizeItem(grillObject) {
		
		var component;
		var item = new XML('<Item />');
		var language = sessionSale.get("LANGUAGE");
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[grillObject.Code.toString()] == undefined || csoProductInfo[grillObject.Code.toString()].xmlNode == undefined){
			return null;
		}
		
		var componentConfig = csoProductInfo[grillObject.Code.toString()];
		var componentBase = componentConfig.xmlNode;
		
		item.@index = grillObject.Index;
		item.@code = grillObject.Code;
		item.@name = componentConfig.names[language].csoName;
		item.@chargeThreshold = grillObject.ChargeThreshold;
		item.@image = componentConfig.csoImages.grillImage;
		item.@unitPrice = componentConfig.unitPrice.getCurrent();;
		item.@curQty = grillObject.CurrentQuantity;
		item.@defQty = grillObject.DefaultQuantity;
		item.@minQty = grillObject.MinQuantity;
		item.@maxQty = grillObject.MaxQuantity;
		
		if (grillObject.CurrentQuantity == grillObject.DefaultQuantity){
			item.@isDefaultQty = "true";
		} else {
			item.@isDefaultQty = "false";
		}
		
		item.@text = item.@name;
		
		if (grillObject.CurrentQuantity > grillObject.MinQuantity) {
			item.@canRemove = "true";
		} else {
			item.@canRemove = "false";
		}
		
		if ((grillObject.CurrentQuantity < grillObject.MaxQuantity) || (grillObject.CurrentQuantity == grillObject.MaxQuantity && grillObject.Modifiers > 0)) {
			item.@canAdd = "true";
		} else {
			item.@canAdd = "false";
		}
		
		item.@canSetLight = lCanSetLight(componentBase);
		item.@canSetOnly = lCanSetOnly(componentBase);
		item.@modifiers = grillObject.Modifiers;
		
		item.@type = grillObject.Type;
		
		if (componentBase.ProductUnit.length() > 0 && componentBase.ProductUnit != "") {
			item.@singular	= PosCSOI18nGetMessageJS(componentBase.ProductUnit + ".SINGULAR");
			item.@plural = PosCSOI18nGetMessageJS(componentBase.ProductUnit + ".PLURAL");
			
		} else {
			item.@singular	= "";
			item.@plural = "";
		}

		// Check to see if the current item is a portion based item.
		if (lIsPortionBasedItem(item)) {
			item.@quantityText = lGetTextForPortionBasedItem(item);
			item.@calloutQuantityText = lGetTextForPortionBasedCallout(item);
			
		} else {
			item.@quantityText = lGetTextForNormalItem(item);
			item.@calloutQuantityText = lGetTextForNormalItem(item);
		}
		
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		// CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
		if (csoEnableAllergensEnhancement == "true") {
			var allergensFound=[];
			// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
			allergensFound = lFindAllergens(allergensFound, componentConfig.code, [], true, false, false, true);
			if (allergensFound.length>0) {
				item.@hasAllergens = "true";

				// now look for signaled allergens
				allergensFound=[];
				var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				allergensFound = lFindAllergens(allergensFound, componentConfig.code, selectedAllergensList, true, false, false, false);
				if (allergensFound.length>0) {
					item.@hasSignaledAllergens = "true";
				}
			}
		}
		
		return item;
	}
}

/**
 *
 * @brief - Returns the first open choice node
 * @param - productsXml: the product structure being sold (generated by 'lGenerateProductNode' function)
 * @param - includeSubChoices: true if the search must be recursive, including sub levels
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lGetNextOpenChoice(productInfo, includeSubChoices) {
	
	for each (var childInfo in productInfo.children) {
		if (includeSubChoices) {
			var subChoice = lGetNextOpenChoice(childInfo, includeSubChoices);
			
			if (subChoice != null) {
				return subChoice;
			}
		}
		
		if (childInfo.isChoice == true && childInfo.isSolved != true) {
			return childInfo;
		}
	}
	
	return null;
}

/**
 *
 * @brief - Returns all open choices nodes
 * @param - productsXml: the product structure being sold (generated by 'lGenerateProductNode' function)
 * @param - includeSubChoices: true if the search must be recursive, including sub levels
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lGetOpenChoices(productInfo, includeSubChoices) {
	var openChoices = [];

	for each (var childInfo in productInfo.children) {
		if (childInfo.isChoice == true && childInfo.isSolved != true) {
			openChoices.push(childInfo);
		}
		//NPS-9630: Error on Kiosk screen for France - ACSI0419946
		if (includeSubChoices) {
			for each (var subOpenChoice in lGetOpenChoices(childInfo, includeSubChoices)) {
				openChoices.push(subOpenChoice);
			}
		}
	}
	
	return openChoices;
}

/**
 *
 * @brief - Gets the Circle Images for the selected choices
 * @param - saleProduct: the product structure being sold (generated by 'lGenerateProductNode' function)
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lGetChoiceImages(saleProduct) {
	var mainProductCodes = new Array();
	var productCodes = new Array();
	
	//NPS-10919 - Kiosk GUI 4 RC10 - Circle images are random - ACSI0991701
	//NPS-10573: Progress Images only displayed for ChoiceGroup SIDE - ACSI0813953
	var previousChoice;
	var childInfoXml;
	var choiceGroup;
	
	if (saleProduct.level < 0) {
		return null;
	}
	
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	if (csoProductInfo[saleProduct.code.toString()] == undefined || csoProductInfo[saleProduct.code.toString()].xmlNode == undefined){
		return null;
	}
	
	var configSaleProduct = csoProductInfo[saleProduct.code.toString()].xmlNode;
	
	for each (var component in configSaleProduct.Composition.Component) {
		mainProductCodes.push(component.ProductCode.toString());
		productCodes.push(component.ProductCode.toString());
	}
	
	// SDO-5625: CSO - VML is displaying only one choice in the screen
	// Get the choices that have only one component, and therefore,
	// should not be displayed to the customer
	for each (var childInfo in saleProduct.children) {
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (childInfo.isChoice == true && childInfo.level == 1 && csoProductInfo[childInfo.code.toString()] != undefined && csoProductInfo[childInfo.code.toString()].oneProductChoice != "") {
			productCodes.push(csoProductInfo[childInfo.code.toString()].oneProductChoice);
		}
	}
	
	for each (var childInfo in saleProduct.children) {
		//NPS-10573: Progress Images only displayed for ChoiceGroup SIDE - ACSI0813953
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if(csoProductInfo[childInfo.code.toString()] == undefined || csoProductInfo[childInfo.code.toString()].xmlNode == undefined) {
			continue;
		}
		
		childInfoXml = csoProductInfo[childInfo.code.toString()].xmlNode;
		choiceGroup = childInfoXml.ChoiceGroup.toUpperCase();
		
		// NPS-12000 - DA - NP6.1.19 - Number of Circle Images wrong on GUI4 - ACSI1156644
		//SDO-8858: [NP6.1.23 RC5 QR2][Lab 02][UK] - Changing Choice group from mains to sides resolves EQA-1350
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if ((childInfo.isChoice == true && childInfo.level == 1 && csoProductInfo[childInfo.code.toString()] != undefined && csoProductInfo[childInfo.code.toString()].oneProductChoice == "") ||
			(childInfo.isChoice == true && childInfo.level > 1 && (typeof previousChoice === "undefined" || childInfo.level !== previousChoice.level + 1) && ((choiceGroup != "SAUCE" && choiceGroup != "DRESSING") || displayAllSubChoicesAsStepsOnVML == "true")))
		{
			var choiceResolutionCodes = lGetChoiceResolutions(childInfo);
			for each (var choiceResolutionCode in choiceResolutionCodes) {
				productCodes.push(choiceResolutionCode);
			}
			
			for (var i = 0; i < childInfo.qty - choiceResolutionCodes.length; i++) {
				productCodes.push("");
			}
		}
		
		//NPS-10919 - Kiosk GUI 4 RC10 - Circle images are random - ACSI0991701
		previousChoice = childInfo;
	}
	
	// WWR-2219: Kiosk GUI V3 and V4 - VML circles for choices not appearing consistently
	var circleNumber = 0;
	var images = new Array();
	for each (code in productCodes) {
		if (code == "") {
			if (circleNumber == 0) {
				circleNumber++;
			}
			
			images.push((circleNumber++).toString());
		} else {
			if (circleNumber == 0 && mainProductCodes.length == 0) {
				circleNumber++;
			}
			
			images.push(csoProductInfo[code.toString()].csoImages.circleImage);
			circleNumber++;
		}
	}
	
	return images.join("|");
	
	function lGetChoiceResolutions(choiceInfo) {
		
		var codes = new Array();
		
		for each (var childInfo in choiceInfo.children) {
			if (childInfo.isChoice != true) {
				codes.push(childInfo.code);
			} else {
				codes.push(lGetSingleResolution(childInfo));
			}
		}
		
		return codes;
		
		function lGetSingleResolution(choiceInfo) {
			
			for each (var childInfo in choiceInfo.children) {
				if (childInfo.isChoice != true) {
					return childInfo.code;
				}
				
				var subChoiceCode = lGetSingleResolution(childInfo);
				if (subChoiceCode != "") {
					return subChoiceCode;
				}
			}
			
			return "";
		}
	}
}

/**
 *
 * @brief - Return some operation. If Loop Meal process is active, it return to the previous screen
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoBackJS() {
	if (PosCSOIsOnLoopMealJS()) {
		if (csoCurrentState.loopMeal.saleProducts.length < 2) {
			return false;
		}
		
		csoCurrentState.loopMeal.saleProducts.pop();
		csoCurrentState.loopMeal.startChoicesIDs.pop(); //SDO-5828 script error after multiple returns from second choice in value meal
		
		var viewId = csoCurrentState.loopMeal.saleProducts.length - 1;
		csoCurrentState.loopMeal.lastCircleImages = lGetChoiceImages(csoCurrentState.loopMeal.saleProducts[csoCurrentState.loopMeal.saleProducts.length - 1]);
		
		if (viewId == 0) {
			lResetOperationRecord();
		} else if(csoCurrentState.loopMeal.lastAddedProduct != null){ //SDO-5828 script error after multiple returns from second choice in value meal
			lRemoveLastProductRecord(csoCurrentState.loopMeal.lastAddedProduct.code);
		}
		
		var eventXml = new XML('<Event type="ASYNC" name="DLG_LOOP_MEAL_BACK"/>');
		eventXml.TargetViewId = viewId;
				
		return PosSendUICmd(eventXml);
	}
	
	return false;
}

function PosCSOCancelLoopMealJS() {
	lResetOperationRecord();
	PosCSOEndLoopMealJS();
}

/**
 *
 * @brief - Ends a Loop Meal operation and clear all used variables.
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOEndLoopMealJS() {
	var isOnLoopMeal = PosCSOIsOnLoopMealJS();
	
	csoCurrentState.loopMeal.isRunning = false;
	csoCurrentState.loopMeal.saleProducts = [];
	csoCurrentState.loopMeal.currentView = null;
	csoCurrentState.loopMeal.lastAddedProduct = null;
	csoCurrentState.loopMeal.startChoicesIDs = [];
	csoCurrentState.loopMeal.lastCircleImages = null;
	csoCurrentState.loopMeal.showSizeSelectionAtEnd = false;
	csoCurrentState.loopMeal.barcode = null;
	csoCurrentState.loopMeal.pendingGrills = [];
	//EQA-356 - (6.1.19 Kiosk v4.3 RC10) Progress Images not displaying correctly when dip selections are made
	csoChoiceSelectionStack = [];
	
	if (isOnLoopMeal) {
		return PosSendUICmd('<Event type="ASYNC" name="DLG_LOOP_MEAL_END"/>');
	}
	
	return true;
}

/**
 *
 * @brief - Creates the summarized view for external applicaiton, such as: TP UI.
 * @return - view - summarized view.
 * @see BCEvents::onWorkFlowAfterExec()
 * @author - Kalil
 */
function PosCSODoActionFinishJS(wfName, status, view) {
	var grillView = lGetGrillView(true);
	
	// NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	if (grillView == null && grillRecord.isGrillRunning()) {
		var grillOperationsArray = grillRecord.GrillOperationsForProduct;
		grillView = lGetCustomizeFirstGrillView(grillOperationsArray[grillOperationsArray.length - 1].ProductCode.toString());
	}
	
	var xml = null;
	if (grillView != null) {
		xml = createActionFinish(wfName, status, grillView);
	} else {
		// CSO-997 - [6.1.29-SP8][GQT][COE] Cannot change the quantities of the order item after you remove the promotion 'Mac Pick 2 for 5$', also wrong message pops-up showing 'offer' instead of 'promotion', when you make order on KIOSK.
		if(view != null)
		{
			var hash = lCalcMD5(view);
			if (ORDER_VIEW_HASH == null || hash != ORDER_VIEW_HASH) {
				ORDER_VIEW_HASH = hash;
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				xml = createActionFinish(wfName, status, getKioskView(view, true));
			} else {
				xml = createActionFinish(wfName, status, null);
			}
		}
		else {
			xml = createActionFinish(wfName, status, null);
		}
	}
	return PosSendUICmd(xml);
	
	/** createActionFinish
	 *
	 * @brief - Creates the summarized view for external applicaitons, such as: TP UI.
	 * @return - view - summarized view.
	 */
	function createActionFinish(actionName, status, data) {
		
	    var xml = new StringBuffer();
	    xml.append(GLOBAL_UTF8_PROLOG_XML);
	    xml.append("<Event ");
	    {
	        xml.append(" type=\"ASYNC\"");
	        xml.append(" name=\"UI_ACTION_FINISH\"");
	        xml.append(" status=\"" + status + "\"");
	        xml.append(" action=\"" + actionName + "\"");
			
			// CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
			xml.append(" updateOrder=\"false\"")
			
	        xml.append(">\n");
        	if (data == null) {
		        xml.append("\t<Payload/>\n");
        	} else {
		        xml.append("\t<Payload>\n");
			        xml.append("\t\t<![CDATA[");
		           	xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		        	xml.append(data);
			        xml.append("]]>\n");
		        xml.append("\t</Payload>\n");
	        }
	        
	    }
	    xml.append("</Event>");
	    return xml.toString();
	}
}


/**
 * @brief - Updates the view and shows a warn popUp if the prices was updated
 * param - wfName - workflow name
 * param - update (optional) - true to force the whole cart refresh. false refresh changed items only.
 * @return - Current view updated
 * @since - CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
 * @author - Leandro Pereira
 */
function PosCSODoUpdateCartJS(wfName, update) {
	//Used to force NP return the current view
	PosRefreshSalePanel();
	
	var cartTotal = getCartTotal();
	sessionSale.set("CART_TOTAL_UPDATED", lFormatPrice(cartTotal));
	sessionSale.set("CART_SALE_TYPE", sessionSale.get("NGK_SALE_TYPE"));
	
	var view = hlp.getCurrentView();
    var xml = null;
	
	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	if(!update) {
		update=true;
	}
	else {
		update=("false"==update || false==update) ? false : true;
	}
		
	// if the third parameter is true it causes the cart to refresh without comparing items
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	xml = createActionUpdateCart(wfName, getKioskView(view, true), update);
	return PosSendUICmd(xml);
	
	/** createActionFinish
	 * @brief - Creates the summarized view for external applicaitons, such as: TP UI.
	 * @return - view - summarized view.
	 * @since - CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
	 * @author - Leandro Pereira
	 */
	function createActionUpdateCart(actionName, data, updateOrder) {
		
	    var xml = new StringBuffer();
	    xml.append(GLOBAL_UTF8_PROLOG_XML);
	    xml.append("<Event ");
	    {
	        xml.append(" type=\"ASYNC\"");
	        xml.append(" name=\"UI_ACTION_UPDATE_CART\"");
	        xml.append(" action=\"" + actionName + "\"");
			xml.append(" updateOrder=\"" + updateOrder + "\"");
	        xml.append(">\n");
        	if (data == null) {
		        xml.append("\t<Payload/>\n");
        	} else {
		        xml.append("\t<Payload>\n");
			        xml.append("\t\t<![CDATA[");
		           	xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		        	xml.append(data);
			        xml.append("]]>\n");
		        xml.append("\t</Payload>\n");
	        }
	    }
	    xml.append("</Event>");
	    return xml.toString();
	}
}

/**
 * @brief - Gets the current total value from the Cart
 * @since - CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
 * @return - Current total
 * @author - Leandro Pereira
 * @altered - CSO-881 [Kiosk 5.16 - Order Basket] Warning message about price displayed incorrectly
 */
function getCartTotal()
{
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView(), true));
	var orderItem = kioskOrderView.Order.Item.(@voided == "false");
	var totalBasket = 0;

	// SQC-9982 [Kiosk 5.16 - Order Basket] Warning message about price displayed incorrectly
	var donationProductCode = lGetParameterStr("RMHC.donationProductCode", "");

	for (i = 0; i < orderItem.Product.length(); i++) {
		// It should not sum the total with the donation product
		// CSO-881 [Kiosk 5.16 - Order Basket] Warning message about price displayed incorrectly
		if (donationProductCode != orderItem.Product[i].@code)
			totalBasket += Number(orderItem.Product[i].@totalPrice);		
	}
	return lFormatPrice(totalBasket);
}

/**
 * @brief - Checks if the product is an eatin or takeout Sale type.
 * @since - CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
 * @return - current sale type
 * @author - Leandro Pereira
 */
function PosCheckProductEatingPaymentLocation(productCode)
{
	var enableSaleTypeValidation = lGetCSOUserInterfaceStringParameter("product.enableSaleTypeValidation", "false");
			
	if (enableSaleTypeValidation == "true")
	{
		//Default: " " - string.Empty
		var saleTypeFromCurrentProductInCart = PosCheckSaleTypeFromCurrentProductInCart();
		var valueMealAvailable = true;
		
		if (saleTypeFromCurrentProductInCart != null && saleTypeFromCurrentProductInCart != undefined && saleTypeFromCurrentProductInCart != "")
		{
			if (productCode != null && productCode!= undefined && productCode != "")
			{
				if (csoProductInfo[productCode] != null && csoProductInfo[productCode] != undefined)
				{
					// The product has both sale type: Eatin - TakeOut
					 if (csoProductInfo[productCode].xmlNode.@productClass == "VALUE_MEAL")
					{
						var components = csoProductInfo[productCode].xmlNode.Composition.Component;	 
						for each (component in components) 
						{
							if (csoProductInfo[component.ProductCode.toString()] != undefined) 
							{
								var componentInfo = csoProductInfo[component.ProductCode.toString()].xmlNode;
								
									if (componentInfo != undefined &&
									   (componentInfo.SalesType.@eatin == false || componentInfo.SalesType.@takeout == false))
									{
										valueMealAvailable = false;
										productCode = componentInfo.ProductCode;
										break;
									}
							}
						}
					}
					
					if (csoProductInfo[productCode].xmlNode.SalesType.@eatin == true && csoProductInfo[productCode].xmlNode.SalesType.@takeout == true &&
						valueMealAvailable)
						return true;
					
					if ( (csoProductInfo[productCode].xmlNode.SalesType.@eatin == "true" && saleTypeFromCurrentProductInCart == "TAKEOUT") || 
						(csoProductInfo[productCode].xmlNode.SalesType.@takeout == "true" && saleTypeFromCurrentProductInCart == "EATIN"))
						{
							API.dbg("PosNGKShowSimpleMessagePopUp - The product has a different sale type from the current product in the Order Basket, Please, Check your Basket.");
							var saleTypeMessage;
							
							if (saleTypeFromCurrentProductInCart == "TAKEOUT")
								saleTypeMessage = PosCSOI18nGetMessageJS("CSO_MSG_TAKEOUT_ONLY")								
							else							
								saleTypeMessage = PosCSOI18nGetMessageJS("CSO_MSG_EATIN_ONLY")
							
							// NPS-14854 - Kiosk analytics 					 
							var response =	PosCSOSendSyncMessageJS("SYNC_POPUP_LAYOUT_C", new Array(PosCSOI18nGetMessageJS("CSO_MSG_WARNING_EATIN_TAKEOUT_CLOSE")), ["closeResponse"], PosCSOI18nGetMessageJS("CSO_MSG_WARNING_EATIN_TAKEOUT_MESSAGE",saleTypeMessage) + "|ScreenNameKey:CSO_MSG_WARNING_EATIN_TAKEOUT_MESSAGE");
							if(response == null)
							{
								//SQC-7913 - Incorrect flow after timeout (after NGK displays advise popup)
								
								API.dbg("PosCheckProductEatingPaymentLocation TIMEOUT");
								PosDoBackFromTotal();
								PosNGKVoidOrderJS();
								sessionSale.set("NGK_ORDER_CANCEL", "true");
								return false;
							}													 
							return false;
						}
				}
				else
					return true;
			}
			else
				return true;
		}
		else
		    return true;
	}
	else
		return true;
}

/**
	* @brief - Returns which sale type is the current item in the cart
	* @since - CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
	* @return - current sale type
	* @author - Leandro Pereira
	*/
function PosCheckSaleTypeFromCurrentProductInCart()
{
	PosRefreshSalePanel();
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView(), true));
	var orderItem = kioskOrderView.Order.Item.(@voided == "false");
	var isItemValueMealBlockedByMainProduct = false;
		
	for (i = 0; i < orderItem.Product.length(); i++)
	{
		if (orderItem.Product[i] != undefined)
		{
			var productCode = orderItem.Product[i].@code;
			
			 if (csoProductInfo[productCode].xmlNode.@productClass != undefined && csoProductInfo[productCode].xmlNode.@productClass == "VALUE_MEAL")
			 {				
				 				 				 
				 var components = csoProductInfo[productCode].xmlNode.Composition.Component;	 
					for each (component in components) 
					{
						if (csoProductInfo[component.ProductCode.toString()] != undefined) 
						{
							var componentInfo = csoProductInfo[component.ProductCode.toString()].xmlNode;
							
								if (componentInfo != undefined &&
								   (componentInfo.SalesType.@eatin == false || componentInfo.SalesType.@takeout == false))
								{
									isItemValueMealBlockedByMainProduct = true;
									productCode = componentInfo.ProductCode;
									break;
								}
						}
					}
					
					if (!isItemValueMealBlockedByMainProduct)
					{
						 var choices = lGetSelectedChoices(orderItem.Product[i], true, false);
						 if (choices.length > 0)
						 {
							 for each(code in choices) {
							
							  if (csoProductInfo[code].xmlNode.SalesType.@eatin == false || csoProductInfo[code].xmlNode.SalesType.@takeout == false)
							  {
								  productCode = code;					
								  break;
							  }
							 }
						 }
					}				 
			}
			
			var returnValue;
	
			//Validation to check if it has conflict
			if (csoProductInfo[productCode].xmlNode.SalesType.@eatin == "true" && 
				csoProductInfo[productCode].xmlNode.SalesType.@takeout == "false")
			{
				//Return: EATIN
				returnValue = "EATIN";
				break;
		
			}else if (csoProductInfo[productCode].xmlNode.SalesType.@eatin == "false" && 
			csoProductInfo[productCode].xmlNode.SalesType.@takeout == "true")
			{
				//Return: EATIN
				returnValue = "TAKEOUT";
				break;
			}
			else
				returnValue = "";
		}
		else
			returnValue =  "";
	}
	
	isItemValueMealBlockedByMainProduct = false;
	return returnValue;
}


/**
 *
 * @brief - If the item is a VM, send the CustomizeOptions view, otherwise start the grill
 * @param - itemIndex: index of the selected item
 * @param - hasDiscount: discount flag	(CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290)
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOShowCustomizeScreenJS(itemIndex, hasDiscount) {
	
	API.dbg("CSO - PosCSOShowCustomizeScreenJS: Called with parameters: itemIndex=[" + itemIndex + "] baseGrillScreenId=[" + sessionSale.get("baseGrillScreenId") + "]");
	
	var hlp = new BusinessObjectHelper();
	var orderView;
	var kioskOrderView;	
	
	//SDO-7129 - Kiosk V4RC12 - Incorrect gril behavior
	if (sessionSale.get("IS_NGK") != "true")
	{
		if (csoBasketOrder) {
			orderView = new XML(hlp.getCurrentView());
			kioskOrderView = new XML(getKioskView(orderView.toString()));	
		
			itemIndex = csoBasketOrder.getCorrectCurrentSelectedItemIndex(kioskOrderView);
			csoBasketOrder = null;
		}
	}
	
	if (itemIndex != null && itemIndex != "") {
		var arr = itemIndex.split("|");
		if(arr.length > 0){
			itemIndex = arr[0];
		}
		
		//Added for NGK - logic to identify the current selected group / product
		if (sessionSale.get("IS_NGK") == "true")
		{
			csoItemGroupManager.resetSelectedGroup();
			
			// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
			//First check if the item is already associated with an offer or global promotion
			var promoInfo = GetPromotionAssociatedToItem(itemIndex);
			if (promoInfo)
			{
				//If there is a promotion associated with the item, the promotion must be set as selected
				csoItemGroupManager.selectedGlobalPromoId = promoInfo.promoId;
				csoItemGroupManager.selectedGlobalPromoCounter = promoInfo.promoCounter;
			}
			else
			{
				csoItemGroupManager.itemGroupToCustomize = (arr.length > 1) ? csoItemGroupManager.getOrderViewItemGroup(arr[1]) : null;

				if (csoItemGroupManager.itemGroupToCustomize != null)
				{
					csoItemGroupManager.setSelectedGroup(csoItemGroupManager.itemGroupToCustomize.groupId);
				}
			}
		}
		else
		{
			csoItemGroupManager.itemGroupToCustomize = (arr.length > 1) ? csoItemGroupManager.getOrderViewItemGroup(arr[1]) : null;
		}
		
		if (!lIsGrillable(itemIndex)) {
			API.dbg("CSO - PosCSOShowCustomizeScreenJS: Can not customize this item (itemIndex=[" + itemIndex + "])");
			return false;
		}
		
		KioskViewHelper.PosDoSelIndex(itemIndex);
	}

	if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId"))){
		API.dbg("CSO - PosCSOShowCustomizeScreenJS: Could not start grill for item (itemIndex=[" + itemIndex + "])");
		return false;
	}
	
	orderView = new XML(hlp.getCurrentView());
	kioskOrderView = new XML(getKioskView(orderView.toString()));	
	
	var orderItem = kioskOrderView.Order.Item.(@currentSelected == "true" && @voided == "false");
	var orderProduct = orderItem.Product[0];
	var productCode = orderProduct.@code;
	
	var selChoices = lGetSelectedChoices(orderProduct, false, false);
	API.dbg("CSO - PosCSOShowCustomizeScreenJS: Selected choices for product: [" + orderProduct.@code + "] = Choices found: [" + selChoices.join("|").toString() + "] - Count [" + selChoices.length + "]");
	
	var resizeOptionsXml = null;
	
	if (selChoices.length == 0) {
		API.dbg("CSO - PosCSOShowCustomizeScreenJS: No choices selected for current product");
	} else {
		resizeOptionsXml = lGetProductResizeOptions(orderProduct.@code, selChoices);
	}
	
	// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
	var kioskGrillViewXml = lGetGrillView();
	
	//MODIFIED FOR NGK - BY KFG
	if (sessionSale.get("IS_NGK") == "true")
	{
		// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
		var xmlResult = lGenerateCustomizeOptionsView(itemIndex, hasDiscount);
		
		PosDoGrillEnd("3");
		
		return PosSendUICmd(xmlResult);
	}
	else
	{
		if (kioskGrillViewXml.Component.length() > 1 || resizeOptionsXml != null) {
			// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
			var xmlResult = lGenerateCustomizeOptionsView(itemIndex, hasDiscount);
		
			PosDoGrillEnd("3");
		
			return PosSendUICmd(xmlResult);
		}
	}
	
	return true;	
	
	// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
	function lGenerateCustomizeOptionsView(itemIndex, hasDiscount) {
		
		/* SAMPLE
		<Event type="ASYNC" name="DLG_GRILL_OPTIONS">
			<Product name="M MD CBO" code="7207">
				<Item code="8500" name="Med Coke" npName="Med Coke" image="gui_ch_main_coke.png" grillIndex="0" customizable="true" resizable="true" buttonLabel="Ice / No Ice">
					<Grills>
						<Grill code="90000090" name="Ice" qty="0" defQty="1" modifiers="0" />
					</Grills>
					<SizeSelection>
						<SizeOption code="8400" name="SML Coke" image="gui_ch_main_coke.png" priceDiff="0.0" />
						<SizeOption code="8500" name="Med Coke" image="gui_ch_main_coke.png" priceDiff="0.0" />
						<SizeOption code="8450" name="Min Coke" image="gui_ch_main_coke.png" priceDiff="0.0" />
					</SizeSelection>
				</Item>
				<Item code="6696" name="CBO" npName="CBO" image="gui_ch_main_cbo.png" grillIndex="1" customizable="true" resizable="false"  buttonLabel="Customize">
					<Grills>
						<Grill code="90000051" name="Bacon" qty="0" defQty="1" modifiers="0" />
						<Grill code="90000100" name="Plain" qty="1" defQty="0" modifiers="0" />
						<Grill code="90000040" name="Sauce" qty="0" defQty="1" modifiers="0" />
					</Grills>
				</Item>
				<Item code="7322" name="Medium Frites" npName="Medium Frites" image="" grillIndex="-1" customizable="false" resizable="true"  buttonLabel="Customize">
					<SizeSelection>
						<SizeOption code="7320" name="Small Fries" image="" priceDiff="0.0" />
						<SizeOption code="7322" name="Medium Frites" image="" priceDiff="0.0" />
						<SizeOption code="7324" name="Mini Frites" image="" priceDiff="0.0" />
					</SizeSelection>
				</Item>
			</Product>
		</Event>
		*/
		
		var xmlResult = new XML('<Event type="ASYNC" name="DLG_GRILL_OPTIONS" />');
		
		var productXml = new XML("<Product />");
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode.toString()] == undefined) {
			return null;
		}
		
		var productInfo = csoProductInfo[productCode.toString()];
		
		productXml.@name = productInfo.names[sessionSale.get("LANGUAGE")].csoName + " " + PosCSOFormatAmountJS( (Number(orderProduct.@totalPrice) / Number(orderProduct.@qty)).toString());
		productXml.@code = productCode;
		
		if (sessionSale.get("IS_NGK") == "true")
		{
			productXml.@index = itemIndex;
			productXml.@image = csoProductInfo[productCode].csoImages.largeImage;

			// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
			// CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392 - disable add button for monopoly too
			if(("true"==hasDiscount)||(productInfo.isMonopoly)) {
				productXml.@canIncrease=false;
			}
			else {
				productXml.@canIncrease=true;
			}
			// CSO-290 - NGK-Make Meal Functionality after Adding to Basket - 7913753
			var enableMakeMeal = lGetCSOUserInterfaceStringParameter("makeItAMeal.enable", "false");
			// CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392 - disable make meal button for monopoly too
			if(("true"==enableMakeMeal)&&(!productInfo.isMonopoly))  {
				var makeMealList = lListMakeMeal(productInfo.xmlNode, orderProduct.@qty, productInfo.isMonopoly);
				if(""!=makeMealList) {
					productXml.@canMakeMeal="true";
					productXml.@makeMealList=makeMealList;
				}
			}
		}
		
		var itemCode = "-1";
		var componentProductInfo = null;

		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
		
		for each (component in kioskGrillViewXml.Component) {
		
			itemCode = component.@code;
			
			// SDO-10275 - NGK crashing when grilling a VM where a product has an inactive item on a dimension - NW-150
			if (csoProductInfo[itemCode.toString()] == undefined) {
				continue;
			}
			
			componentProductInfo = csoProductInfo[itemCode.toString()];
			
			var itemXml = new XML("<Item />");
			
			itemXml.@code = itemCode;
			itemXml.@name = componentProductInfo.names[sessionSale.get("LANGUAGE")].csoName;
			itemXml.@npName = componentProductInfo.names[sessionSale.get("LANGUAGE")].longName;
			itemXml.@image = componentProductInfo.csoImages.largeImage;
			itemXml.@grillIndex = component.@index;
			itemXml.@customizable = "true";
			itemXml.@resizable = "false";
			itemXml.@buttonLabel = PosCSOI18nGetMessageJS("CSO_BTN_CUSTOMIZE");
			
			// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
			if (componentProductInfo.isBybProduct || componentProductInfo.isBybPreBuilt)
			{
				itemXml.@isBYB = "true";
			}
			
			PosDoSelGrillIndex(component.@index);
			// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
			grillViewCheckToggle = lGetGrillView();
			
			var customizeLayout = csoConfigurationInfo.grillLayout;	
			
			if (customizeLayout != "Minimum" && customizeLayout != "Basic") {
				if (grillViewCheckToggle.Component.(@isSelected == "true").Item.length() == 1) {
					var singleItem = grillViewCheckToggle.Component.(@isSelected == "true").Item[0];
					if (singleItem.@defQty == "1" && singleItem.@minQty == "0" && singleItem.@maxQty == "1") {				
						itemXml.@buttonLabel = PosCSOI18nGetMessageJS("CSO_BTN_CUSTOMIZE_TOGGLE", singleItem.@text, singleItem.@text);
					}
				}
			}
						
			if (sessionSale.get("IS_NGK") == "true")
			{
				// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
				var bAllergen=false;
				var itemAllergensList=[];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				itemAllergensList=lFindAllergens(itemAllergensList, itemCode, selectedAllergensList, false, false, false, false);
				if(itemAllergensList.length>0) {
					bAllergen=true;
				}

				var orderComponent = orderItem.Product.(@code == productCode).Product.(@code == itemCode);
			
				if (orderComponent.length() > 1)
				{
					var grillItems = kioskGrillViewXml.Component.(@code == itemCode);
				
					var i;
					for (i = 0; i < grillItems.length(); i++)
					{
						if (grillItems[i].@index == component.@index)
							break;
					}
				
					orderComponent = orderComponent[i];
				}
			
				//EQA-570 - Error when customising 20 McNuggets
				//TODO NGK: check if this fix should be applied to Kiosk V4
				if (orderComponent != undefined && orderComponent.Grill != undefined && orderComponent.Grill.length() > 0) {
					var grillsXml = new XML("<Grills />");
				
					for each (grillItem in orderComponent.Grill) {
						var grillXml = new XML ("<Grill />");
						grillXml.@code = grillItem.@code;
						grillXml.@name = grillItem.@name;
						grillXml.@qty = grillItem.@qty;
						grillXml.@defQty = grillItem.@defQty;
						grillXml.@modifiers = grillItem.@modifiers;
						grillXml.@text = grillItem.@text;
					
						grillsXml.appendChild(grillXml);
						
						// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
						if(!bAllergen) {
							var grillAllergensList=[];
							// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
							grillAllergensList=lFindAllergens(grillAllergensList, grillItem.@code, selectedAllergensList, false, false, false, false);
							if(grillAllergensList.length>0) {
								bAllergen=true;
							}
						}
					}
					itemXml.appendChild(grillsXml);
				}
				
				// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
				if(bAllergen) {
					itemXml.@hasAllergens="true";
				}
			}
			else
			{
				//CSO-23 - CSO v4 - Errors when grilling components that appear multiple times
				var orderComponent = lGetCorrespondingOrderComponent(component.@index.toString());				
				
				//CSO-23 - CSO v4 - Errors when grilling components that appear multiple times
				if (orderComponent && orderComponent.Grill.length() > 0) {
					var grillsXml = new XML("<Grills />");
				
					for each (grillItem in orderComponent.Grill) {
						var grillXml = new XML ("<Grill />");
						grillXml.@code = grillItem.@code;
						grillXml.@name = grillItem.@name;
						grillXml.@qty = grillItem.@qty;
						grillXml.@defQty = grillItem.@defQty;
						grillXml.@modifiers = grillItem.@modifiers;
						grillXml.@text = grillItem.@text;
					
						grillsXml.appendChild(grillXml);
					}
					itemXml.appendChild(grillsXml);
				}
			}
			
			productXml.appendChild(itemXml);			
		}
		
		if (resizeOptionsXml != null) {
			for each (resizeItem in resizeOptionsXml.Item) {
			
				itemCode = resizeItem.@code;
				
				// SDO-10275 - NGK crashing when grilling a VM where a product has an inactive item on a dimension - NW-150
				if (csoProductInfo[itemCode.toString()] == undefined) {
					continue;
				}
				
				componentProductInfo = csoProductInfo[itemCode.toString()];
				
				var itemXml = null;
				var isNewItem = false;
				
				if (productXml.Item.(@code == itemCode).length() == 0) {
					itemXml = new XML("<Item />");
				
					itemXml.@code = itemCode;
					itemXml.@name = componentProductInfo.names[sessionSale.get("LANGUAGE")].csoName;
					itemXml.@npName = componentProductInfo.names[sessionSale.get("LANGUAGE")].longName;
					itemXml.@image = componentProductInfo.csoImages.largeImage;
					itemXml.@grillIndex = "-1";
					itemXml.@customizable = "false";
					
					isNewItem = true;
					
				} else {
					itemXml = productXml.Item.(@code == itemCode)[0];
				}
				
				itemXml.@resizable = "true";
				
				var sizeSelectionXml = new XML("<SizeSelection />");
				
				var prodPrice = componentProductInfo.unitPrice.getCurrent();
				var prodPriceDecimalsCount = csoConfigurationInfo.currency.decimalsCount;
				
				for each (sizeOption in resizeItem.SizeOption) {
					var sizeXml = new XML("<SizeOption />");
					
					// SDO-10275 - NGK crashing when grilling a VM where a product has an inactive item on a dimension - NW-150
					if (csoProductInfo[sizeOption.@code.toString()] == undefined) {
						continue;
					}
					
					var sizeOptionsProductInfo = csoProductInfo[sizeOption.@code.toString()];
					
					sizeXml.@code = sizeOption.@code;
					sizeXml.@name = sizeOptionsProductInfo.names[sessionSale.get("LANGUAGE")].csoName;
					sizeXml.@image = sizeOptionsProductInfo.csoImages.dimensionImage;
					
					var priceDiff = (sizeOptionsProductInfo.unitPrice.getCurrent() - prodPrice).toFixed(prodPriceDecimalsCount);
					
					sizeXml.@priceDiff = priceDiff.toString();
					
					sizeSelectionXml.appendChild(sizeXml);
				}
				
				itemXml.appendChild(sizeSelectionXml);
				
				if (isNewItem) {
					productXml.appendChild(itemXml);
				}
			}
		}			
		
		xmlResult.appendChild(productXml);
		
		if (sessionSale.get("IS_NGK") != "true")
		{
			//SDO-7084 - [Lab02][July Bundle][NewPOS 6.1.19 RC18 HF5] Kiosk v4 RC 10 HF1 - Grill screen logic: Removing ice from the second drink selection actually removes it from the first 
			if (csoGrillOrder) {
				csoGrillOrder.log("Before reordering grill view");
				csoGrillOrder.update(GetExpandedGrillView());
				csoGrillOrder.log("After reordering grill view");
				lFixGrillIndex(csoGrillOrder, xmlResult);
			}
		}
		
		return xmlResult.toString();
		
		//CSO-23 - CSO v4 - Errors when grilling components that appear multiple times
		function lGetCorrespondingOrderComponent(grillIndex){
			var grillComponentsWithSameCode = kioskGrillViewXml.Component.(@code == itemCode);
			var orderComponentsWithSameCode = orderItem.Product.(@code == productCode).Product.(@code == itemCode);
		
			var indexWithinComponentsWithSameCode = grillIndex - parseInt(grillComponentsWithSameCode[0].@index.toString());
			
			var orderComponentsTotalQuantity = 0;
			var componentCount = 0;
			
			for each (var c in orderComponentsWithSameCode) {
				orderComponentsTotalQuantity += parseInt(c.@qty.toString());
			}
		
			if (indexWithinComponentsWithSameCode >= orderComponentsTotalQuantity) {
				return null;
			}
			
			for (var i = 0; i < orderComponentsWithSameCode.length() && componentCount <= parseInt(indexWithinComponentsWithSameCode); i++) {
				componentCount += parseInt(orderComponentsWithSameCode[i].@qty.toString());
			}
			
			return orderComponentsWithSameCode[i - 1];
		}
	}
	
	/**
	* @brief - Corrects the grill index of the components of the DLG_GRILL_OPTIONS event XML.
	* @param - grillOrder: Grill order manager containing the order information
	* @param - xmlResult: DLG_GRILL_OPTIONS event XML
	* @author - Paulo Florencio
	* @since - SDO-7084 - [Lab02][July Bundle][NewPOS 6.1.19 RC18 HF5] Kiosk v4 RC 10 HF1 - Grill screen logic: Removing ice from the second drink selection actually removes it from the first 
	*/
	function lFixGrillIndex(grillOrder, xmlResult) {
		var grillOrderInfo = grillOrder.getGrillOrderInfo();
			
		for (var i = 0; i < xmlResult.Product[0].Item.length(); i++) {
			xmlResult.Product[0].Item[i].@grillIndex = grillOrderInfo[i];
		}
	}
	
	function lGetProductResizeOptions(parentProductCode, selChoices) {
		
		/* SAMPLE
		<ResizeOptions>
			<Item code="8400">
				<SizeOption code="8400" />
				<SizeOption code="8401" />
				<SizeOption code="8402" />
			</Item>
			<Item code="8500">
				<SizeOption code="8500" />
				<SizeOption code="8501" />
				<SizeOption code="8502" />
			</Item>
		</ResizeOptions>
		*/
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[parentProductCode.toString()] == undefined || csoProductInfo[parentProductCode.toString()].xmlNode == undefined) {
			return null;
		}
		
		var parentProductInfo = csoProductInfo[parentProductCode.toString()];
		var parentProduct = parentProductInfo.xmlNode;
		
		if (selChoices.length == parentProduct.Choices.Component.length()) {
			
			var sizeSelectionsXml = new XML("<ResizeOptions />");
			
			for each (selChoice in selChoices) {
				
				var selectedChoiceInfo = csoProductInfo[selChoice.toString()];
				var selConfigChoice = selectedChoiceInfo.xmlNode;
				
				if (selConfigChoice.SizeSelection.length() != 1 || selConfigChoice.SizeSelection.Size.length() < 2) {
					API.dbg("CSO - PosCSOShowCustomizeScreenJS.lGetProductResizeOptions: Could not find size selection entry for [" + selChoice + "]");
					continue
				}
				
				var configChoicePath = lGetChoicePath(parentProduct, selChoice);
				
				API.dbg("CSO - PosCSOShowCustomizeScreenJS.lGetProductResizeOptions: configChoicePath: [" + configChoicePath + "]");
				
				if (configChoicePath == null) {
					API.dbg("CSO - PosCSOShowCustomizeScreenJS.lGetProductResizeOptions: Could not find the choice path");
					continue;
				}
				
				var configChoicesArray = configChoicePath.split("|");
				
				if (configChoicesArray.length < 1) {
					API.dbg("CSO - PosCSOShowCustomizeScreenJS.lGetProductResizeOptions: Invalid length of choice path");
					continue;
				}
				
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				if (csoProductInfo[configChoicesArray[configChoicesArray.length - 1]] == undefined) {
					continue;
				}
				
				var choiceInfo = csoProductInfo[configChoicesArray[configChoicesArray.length - 1]];
				var configChoice = choiceInfo.xmlNode;
				
				var validSizeOptions = new Array();
				
				for each (sizeEntry in selConfigChoice.SizeSelection.Size) {
					if (configChoice.Composition.Component.(ProductCode == sizeEntry.@code).length() == 1) {
						validSizeOptions.push(sizeEntry.@code);
					}
				}
				
				if (validSizeOptions.length > 1) {
					var itemXml = new XML("<Item />");
					itemXml.@code = selChoice;
					
					for each (validSizeOption in validSizeOptions) {
						var sizeXml = new XML("<SizeOption />");
						
						sizeXml.@code = validSizeOption;
						
						itemXml.appendChild(sizeXml);
					}
					
					sizeSelectionsXml.appendChild(itemXml);
				}
			}
			
			if (sizeSelectionsXml.Item.length() > 0) {
				API.dbg("CSO - PosCSOShowCustomizeScreenJS.lGetProductResizeOptions: ResizeOptions: [" + sizeSelectionsXml.toString() + "]");
				return sizeSelectionsXml;
			} else {
				API.dbg("CSO - PosCSOShowCustomizeScreenJS.lGetProductResizeOptions: No resize options found");
				return null;
			}
		
		} else {
			API.dbg("CSO - PosCSOShowCustomizeScreenJS.lGetProductResizeOptions: Number of choices found is diferent from available choices on main product");
			return null;
		}
		
		function lGetChoicePath(currentProduct, selChoice) {
		
			//Searching on all choices of main product which one is filled with selectedChoices
			for each (choice in currentProduct.Choices.Component) { 
				// CSO-384 - NGK - Script Error when Customizing Product
				if ((csoProductInfo[choice.ProductCode.toString()] != null) && (csoProductInfo[choice.ProductCode.toString()] != undefined)){
					//Gets the choice on ProductDb
					var currentChoice = csoProductInfo[choice.ProductCode.toString()].xmlNode;
					//If the selectedChoice is present on currentChoice composition, the desired choice is found
					if (currentChoice.Composition.Component.(ProductCode == selChoice).length() == 1) {
						return currentChoice.ProductCode.toString();
					}
					
					var childChoice = lGetChoicePath(currentChoice, selChoice);
					if (childChoice != null) {
						return currentChoice.ProductCode + "|" + childChoice;
					}
				}
			}
			return null;					
		}
	}
}
	
/**
 *
 * @brief - Get a global promotion or offer associated with an item
 * @param - itemIndex: index of the selected item
 * @return - promotion id and promotion counter or null if not found
 * @author - Vladimir Dobroff
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 * @altered - CSO-745 - POS-340 - Order Basket Redesign
 */
function GetPromotionAssociatedToItem(itemIndex)
{
	var kioskView = new XML(getKioskView(hlp.getCurrentView()));
	
	if (kioskView)
	{
		for each (var offer in kioskView.Order.Offers.Offer)
		{
			if (offer.@memberIndexes)
			{
				var splittedMemberIndexes = offer.@memberIndexes.split("|");
				
				for each (var member in splittedMemberIndexes)
				{
					if (member == itemIndex)
					{
						return { promoId: offer.@promotionId.toString(), promoCounter: offer.@promotionCounter.toString() };
					}
				}
			}
		}
		
		for each (var promotion in kioskView.Order.Promotions.Promotion)
		{
			if (promotion.@memberIndexes)
			{
				var splittedMemberIndexes = promotion.@memberIndexes.split("|");
				
				for each (var member in splittedMemberIndexes)
				{
					if (member == itemIndex)
					{
						return { promoId: promotion.@promotionId.toString(), promoCounter: promotion.@counter.toString() };
					}
				}
			}
		}
	}
	
	return null;
}

/**
 *
 * @brief - Gets all choices selected by the customer of specific product
 * @param - productNode: The node (from KioskOrderView) of the desired product
 * @param - includeSubChoices: If true, the search will be done recursively, including sub products
 * @return - Array of all choices
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lGetSelectedChoices(productNode, includeSubChoices, excludeAutoChoices) {
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	if (csoProductInfo[productNode.@code.toString()] == undefined || csoProductInfo[productNode.@code.toString()].xmlNode == undefined) {
		return null;
	}
	
	var configProduct = csoProductInfo[productNode.@code.toString()].xmlNode;
	var choices = new Array();
	var autoChoices = new Array();
	var childProductQty;
	// SDO-6581 - (6.1.21 Kiosk v4.3 RC10) DA - Kiosk Grill Screen Logic
	var mainProductQty = productNode.@qty;
	var qtyToAdd;
	
	//SDO-5980: KIOSK V4 - Regression RC9: When a value meal is ordered and the costumer decide to increase his order through the button (+), the fries will appear in a new line.
	if (excludeAutoChoices) {
		autoChoices = lGetAutoChoices(productNode.@code.toString());
	}

	for each (var productChild in productNode.Product) {
		//Check if the current child product is a choice
		//API.dbg("CSO - productChild: [" + productChild.toString() + "]");
		if (configProduct.Composition.Component.(ProductCode == productChild.@code).length() == 0 &&
			configProduct.AutoCondiments.Component.(ProductCode == productChild.@code).length() == 0) {
			
			childProductQty = productChild.@qty;
			
			qtyToAdd = childProductQty/mainProductQty;
			
			for(var i=0 ; i < qtyToAdd; i++) {
				//SDO-5980: KIOSK V4 - Regression RC9: When a value meal is ordered and the costumer decide to increase his order through the button (+), the fries will appear in a new line.
				if (autoChoices.indexOf(productChild.@code.toString()) == -1) {
					choices.push(productChild.@code);
				}
				//PosShowMessage(productChild.@code);
				
				if (includeSubChoices) {
					var subChoices = lGetSelectedChoices(productChild, includeSubChoices, excludeAutoChoices);
					for each (var subChoice in subChoices) {
						choices.push(subChoice);
					}
				}
			}
		} else if (includeSubChoices &&
			configProduct.Composition.Component.(ProductCode == productChild.@code).length() > 0) {
			
			childProductQty = productChild.@qty;
			
			qtyToAdd = childProductQty/mainProductQty;
			
			for(var i=0 ; i < qtyToAdd;i++) {
				var subChoices = lGetSelectedChoices(productChild, includeSubChoices, excludeAutoChoices);
				for each (var subChoice in subChoices) {
					choices.push(subChoice);
				}
			}
		}
	}
	
	return choices;
	
	//SDO-5980: KIOSK V4 - Regression RC9: When a value meal is ordered and the costumer decide to increase his order through the button (+), the fries will appear in a new line.
	function lGetAutoChoices(productCode) {
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined || csoProductInfo[productCode].xmlNode == undefined) {
			return null;
		}
		
		var config = csoProductInfo[productCode].xmlNode;
		var atChoices = new Array();
		
		for each (var comp in config.Choices.Component) {
			var choiceConfig = csoProductInfo[comp.ProductCode.toString()].xmlNode;
			for each (var filler in choiceConfig.Composition.Component) {
				if (Number(filler.DefaultQuantity) > 0) {
					atChoices.push(filler.ProductCode.toString());
				}
			}
		}
		
		return atChoices;
	}
}

/**
 *
 * @brief - Starts a grill operation for the selected item and select the given component index
 * @return - True if the grill was started sucessfully, false if the selected item is not a VM or could not start the grill operation
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOCustomizeProductComponentJS(componentIndex) {

	if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId"))){
		API.dbg("Could not start grill for item (itemIndex=[" + componentIndex + "])");
		return false;
	}
	
	// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
	var kioskGrillViewXml = lGetGrillView();
	var hlp = new BusinessObjectHelper();
	var orderView;
	var kioskOrderView;	

	if (sessionSale.get("IS_NGK") != "true")
	{
		//SDO-7084 - [Lab02][July Bundle][NewPOS 6.1.19 RC18 HF5] Kiosk v4 RC 10 HF1 - Grill screen logic: Removing ice from the second drink selection actually removes it from the first 
		if (!csoGrillOrder) {
			csoGrillOrder = grillOrderManager();
			csoGrillOrder.initialize(GetExpandedGrillView());
		}
		csoGrillOrder.saveKioskGrillViewState(GetExpandedGrillView());
		componentIndex = csoGrillOrder.getCurrentIndex(componentIndex);
		csoGrillOrder.setComponentIndex(componentIndex);
	
		//SDO-7129 - Kiosk V4RC12 - Incorrect gril behavior
		orderView = new XML(hlp.getCurrentView());
		kioskOrderView = new XML(getKioskView(orderView.toString()));	
	
		if (!csoBasketOrder) {
			csoBasketOrder = basketOrderManager();
		}
		csoBasketOrder.saveKioskOrderViewState(kioskOrderView);
	}
	
	if (kioskGrillViewXml.Component.length() > Number(componentIndex)) {
		if (!PosDoSelGrillIndex(componentIndex)) {
			return false;
		}
		sessionSale.set("NGK_CURRENT_GRILL_INDEX", componentIndex);
		
		//REMOVED FOR NGK - BY KFG
		if (sessionSale.get("IS_NGK") != "true")
		{
			if(rootStoreDB == null) {
				loadStoreDB();
			}
			var customizeLayout = csoConfigurationInfo.grillLayout;	
		
			if (customizeLayout != "Minimum" && customizeLayout != "Basic") {
				// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
				kioskGrillViewXml = lGetGrillView();
		
				if (kioskGrillViewXml.Component.(@isSelected == "true").Item.length() == 1) {
					var item = kioskGrillViewXml.Component.(@isSelected == "true").Item[0];
				
					if (item.@defQty == "1" && item.@minQty == "0" && item.@maxQty == "1") {				
						PosCSODoGrillAddRemoveAllJS(item.@curQty == "1" ? "-" : "+", '-1', "0");
						PosDoGrillEnd("3");
						PosCSOShowCustomizeScreenJS();
					}
				}
			}
		}
		
		return true;
	} else {
		API.dbg("PosCSOCustomizeProductComponentJS - Given component index is invalid! componentIndex=[" + componentIndex + "]");
		PosDoGrillEnd("3");
		return false;
	}
}

/**
 * @brief - Ends a grill operation and sends the corresponding event to the UI
 * @return - True if the grill was ended sucessfully
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOEndCurrentGrillJS(endType) {

	// @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	var baseProductString;
	var baseProductArray;
	var product;
	
	// Close the current grill window.
	PosSendUICmd('<Event type="ASYNC" name="DLG_GRILL_END" />\n');
	
	if (grillRecord.isGrillRunning()) {
		lRegisterEndGrillChoice(endType);
		grillObjectArray = [];
	} else {
		var ret = PosDoGrillEnd(endType);
		
		if (SHARED_CTX["IS_CUSTOMIZING_VM"] == "true") {
			PosCSOShowCustomizeScreenJS(null);
		}
	}
	
	return ret;
	
	function lCreateReturnEvent(data){
		
		var xml = new StringBuffer();
		xml.append(GLOBAL_UTF8_PROLOG_XML);
		xml.append("<Event  type=\"ASYNC\" name=\"UI_ACTION_FINISH\" status=\"SUCCESS\" action=\"WF_CSO_ShowCustomizeScreen\">");
		xml.append("<Payload><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
		xml.append(data);
		xml.append("]]>");
		xml.append("</Payload>\n");
		xml.append("</Event>\n");
		
	    return xml.toString();
	}
}

/**
 *
 * @brief - Check if the given product is grillable or not
 * @return - True if grillable
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lIsGrillable(itemIndex) {
	var cmd = "PosCanGrill";
	CSL_dbglog(7, SRC_BC_GRILL, cmd, "Start");
	return executeBC(cmd, [itemIndex, "-1"]); //For more details, see SDO-3307
}

/**
 * @brief - Sets a grill modifier when fisrt customization
 * @return - True if the operation was completed sucessfull
 * @author - Wilson
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702 
 */
function PosCSODoGrillOper(oper, bit, index) {
	if(grillRecord.isGrillRunning()) {
		lDoGrillCustomizationFirstOperation(oper, bit, index);
		return true;
	}
	
	return PosDoGrillOper(oper, bit, index);
}

/**
 * @brief - This function adds or removes a given quantity of a portion based ingredient during the full grill process.
 * @oper - Operation that will be made.
 * @index - Index of the item that will be grilled.
 * @author - Felipe Armoni
 * @since - NPS-8384 - Kiosk GUI - Enable Portion-Based Configuration Options on the "Full" Customization Screen
 * @modified - CSO-149 - Kiosk V4 / Kiosk V5 - Portion based grill is applied incorrectly when product quantity is higher than one in the order basket
 *             When using PosCSODoGrillOper("0", "1", index) directly, the modifier is apllied to all items in the order basket
 *             As a workaround, reset and restore the correct quantity before applying the modifier
 */
function PosCSODoGrillAddRemovePortionBasedJS(oper, index) {
	var xmlView;
	
	// @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	if(grillRecord.isGrillRunning()) {
		var grillOperationsArray = grillRecord.GrillOperationsForProduct;
		xmlView = new XML(lGetCustomizeFirstGrillView(grillOperationsArray[grillOperationsArray.length - 1].ProductCode.toString()));
	} else {
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		xmlView = lGetGrillView();
	}
	
	// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
	// PosDoGrillProduct function is available since NewPOS 6.1.23.189. 
	if (typeof(PosDoGrillProduct) == "function" && sessionSale.get("IS_NGK") == "true") {
		var productCode = xmlView.Component.(@isSelected == "true").Item.(Number(@index) == Number(index)).@code;
		var absQty = 1;
		return PosNGKDoGrillAddRemovePortionBasedProduct(oper, productCode, xmlView, absQty, null);
	}
	
	var grillItem = xmlView.Component.(@isSelected == "true").Item.(Number(@index) == Number(index));
	var portionType;
	
	portionType = lGetPortionType(grillItem);

	// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
	// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
	var maxQuantity = parseInt(grillItem.@maxQty.toString());
	var hasRegular = (maxQuantity > 1) && (grillItem.@type == "CanAdds");

	switch(portionType) {
			
		// None
		case 0:
			// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
			// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
			if (sessionSale.get("IS_NGK") == "true")
			{	
				lDoNoneAddRemove(oper, index, grillItem.@type, hasRegular);
			}
			else 
			{
				lDoNoneAddRemove(oper, index, grillItem.@type, false);
			}
			break;
			
		// Light
		case 1:
			lDoLightAddRemove(oper, index, grillItem.@type);
			break;
		
		// Regular
		case 2:
			lDoRegularAddRemove(oper, index, grillItem.@type);
			break;
		
		// Extra
		case 3:
			// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
			// CR - 7797958 - NGK Improvements to CYT Phase 1
			if (sessionSale.get("IS_NGK") == "true")
			{
				// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
				lDoExtraAddRemove(oper, index, grillItem.@type, hasRegular);
			}
			else {
				lDoExtraAddRemove(oper, index, grillItem.@type, false);			
			}
			break;
			
		default:
			return false;
	}
	
	return true;
	
	// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
	function lDoNoneAddRemove(oper, index, type, hasRegular) {
		// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
		var showLightPortion = lGetCSOUserInterfaceStringParameter("showLightPortion", "true") == "true";		

		if (oper == "-" || oper == "m") {
			return false;
			
		} else if ((oper == "+" || oper == "p") && type == "Composition") {
			// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
			if (sessionSale.get("IS_NGK") == "true")
			{
				// Check if the the Light portion should be skipped
				if (showLightPortion)
				{
					PosCSODoGrillOper("c", "-1", index);
					PosCSODoGrillOper("0", "1", index);
				}
				else
				{
					PosCSODoGrillOper("c", "-1", index);
				}
			}
			else
			{
				PosCSODoGrillOper("c", "-1", index);
				PosCSODoGrillOper("0", "1", index);
			}
		} else if ((oper == "+" || oper == "p") && 
				   ((type == "Comment") || (type == "CanAdds" && (sessionSale.get("IS_NGK") != "true")))) {
			// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.			   
			//CSO-149 - Kiosk V4 / Kiosk V5 - Portion based grill is applied incorrectly when product quantity is higher than one in the order basket		
			PosCSODoGrillOper("c", "-1", index);
			PosCSODoGrillOper("+", "-1", index);
			PosCSODoGrillOper("0", "1", index);
		} else if ((oper == "+" || oper == "p") && (type == "CanAdds" && (sessionSale.get("IS_NGK") == "true"))) {
			// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
			// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.			   
			if((hasRegular) && (!showLightPortion))
			{
				PosCSODoGrillOper("c", "-1", index);
				PosCSODoGrillOper("+", "-1", index);
			}
			else 
			{
				//CSO-149 - Kiosk V4 / Kiosk V5 - Portion based grill is applied incorrectly when product quantity is higher than one in the order basket			
				PosCSODoGrillOper("c", "-1", index);
				PosCSODoGrillOper("+", "-1", index);
				PosCSODoGrillOper("0", "1", index);
			}
		} else {
			return false;
		}
		
		return true;
	}
	
	function lDoLightAddRemove(oper, index, type) {
	
		if (oper == "-" || oper == "m") {
			//CSO-149 - Kiosk V4 / Kiosk V5 - Portion based grill is applied incorrectly when product quantity is higher than one in the order basket
			PosDoGrillOper('c','-1',index);
			PosCSODoGrillOper("0", "1", index);
			PosCSODoGrillAddRemoveAllJS("-", "-1", index);
			
		} else if ((oper == "+" || oper == "p") && (type == "Composition")) {
			//CSO-149 - Kiosk V4 / Kiosk V5 - Portion based grill is applied incorrectly when product quantity is higher than one in the order basket
			PosCSODoGrillOper("c", "-1", index);
			PosCSODoGrillOper("0", "1", index);
			
		} else if ((oper == "+" || oper == "p") && (type == "CanAdds" ||  type == "Comment")) {
			//CSO-149 - Kiosk V4 / Kiosk V5 - Portion based grill is applied incorrectly when product quantity is higher than one in the order basket
			PosDoGrillOper('c','-1',index);
			PosCSODoGrillOper("0", "1", index);
			PosCSODoGrillOper("+", "-1", index);
			
		} else {
			return false;
		}
		
		return true;
	}
	
	function lDoRegularAddRemove(oper, index, type) {
		
		if (oper == "-" || oper == "m") {
			// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
			if (sessionSale.get("IS_NGK") == "true")
			{
				// Check if the the Light portion should be skipped
				var showLightPortion = lGetCSOUserInterfaceStringParameter("showLightPortion", "true") == "true";
				if (showLightPortion)
				{
					//CSO-149 - Kiosk V4 / Kiosk V5 - Portion based grill is applied incorrectly when product quantity is higher than one in the order basket
					PosCSODoGrillOper("c", "-1", index);
					PosCSODoGrillOper("0", "1", index);
				}
				else
				{
					PosCSODoGrillAddRemoveAllJS("-", "-1", index);
				}
			}
			else
			{
				//CSO-149 - Kiosk V4 / Kiosk V5 - Portion based grill is applied incorrectly when product quantity is higher than one in the order basket
				PosCSODoGrillOper("c", "-1", index);
				PosCSODoGrillOper("0", "1", index);
			}			
		} else if (oper == "+" || oper == "p") {
			PosCSODoGrillOper("+", "-1", index);
			
		} else {
			return false;
		}
		
		return true;
	}
	
	// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
	// CR - 7797958 - NGK Improvements to CYT Phase 1
	function lDoExtraAddRemove(oper, index, type, hasRegular) {
	
		if ((oper == "-" || oper == "m") && (type == "Composition" || type == "Comment")) {
			PosCSODoGrillOper("-", "-1", index);
		}
			
		else if ((oper == "-" || oper == "m") && type == "CanAdds") {
			//CSO-149 - Kiosk V4 / Kiosk V5 - Portion based grill is applied incorrectly when product quantity is higher than one in the order basket
			PosDoGrillOper('c','-1',index);
			PosCSODoGrillOper("+", "-1", index);
			// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
			// CR - 7797958 - NGK Improvements to CYT Phase 1
			if(hasRegular == false)
			{
				PosCSODoGrillOper("0", "1", index);
			}
		} else {
			return false;
		}
		
		return true;
	}
}

/**
 *
 * @brief - Removes the grilled quantities until it reaches the minimun quantity or adds until it reaches the maximum quantity
 * @return - True if the operation was completed sucessfull
 * @author - Kalil, Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoGrillAddRemoveAllJS(oper, bit, index) {
	var retVal=false;
	if (oper == null || bit == null || index == null) {
		PosShowMessage("PosCSODoGrillAddRemoveAllJS: Invalid null parameter.");
		return false;
	}
	
	// NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	if(grillRecord.isGrillRunning()) {
		lDoCustomizationFirstAddRemoveAll(oper, index);
	} else {
		while (lCanPerform(oper, index)) {
			retVal=PosDoGrillOper(oper, bit, index);
		}
	}
	
	return (retVal);

	/**
	 *
	 * @brief - Verifies if the a given operation can be performed.
	 * @return - true - when can be performed.
	 */
	function lCanPerform(oper, index) {
		
		if (oper != "+" && oper != "p" && oper != "-" && oper != "m") {
			PosShowMessage("CSO - PosCSODoGrillAddRemoveAllJS.lCanPerform: Expecting only: -/+ or m/p");
			return false;
		}
		
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		var xmlView = lGetGrillView();
		var grillItem = xmlView.Component.(@isSelected == "true").Item.(Number(@index) == Number(index));
		
		if (grillItem.length() == 1 && Number(grillItem.@modifiers) > 0) {
			PosDoGrillOper('c','-1',index);
			PosDoGrillOper('0','1',index);
			
			// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
			xmlView = lGetGrillView();
			grillItem = xmlView.Component.(@isSelected == "true").Item.(Number(@index) == Number(index));
		}
		
		if (grillItem.length() == 1) {
			if (oper == "+" || oper == "p") { // Wants to reach the maximum qty
				return (grillItem.@canAdd == "true");
			} 
			if (oper == "-" || oper == "m") { // Wants to reach the mininum qty
				return (grillItem.@canRemove == "true");
			}
		}
		
		return false;
	}
}

/**
 *
 * @brief - Removes the grilled quantities until it reaches the minimun quantity or adds until it reaches the maximum quantity for all components of current item
 * @return - True if the operation was completed sucessfull
 * @author - Christiano Meirelles
 */
function PosCSOMakeItPlainJS() {

	var xmlView;
	
	// NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	if(grillRecord.isGrillRunning()) {
		var grillOperationsArray = grillRecord.GrillOperationsForProduct;
		xmlView = new XML(lGetCustomizeFirstGrillView(grillOperationsArray[grillOperationsArray.length - 1].ProductCode.toString()));
	} else {
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		xmlView = lGetGrillView();
	}
	
	for each(grillComp in xmlView.Component) {
		if (grillComp.@isSelected == 'true') {
			for each(recipeItem in grillComp.Item) {
				var index = Number(recipeItem.@index);
				PosCSODoGrillAddRemoveAllJS("-", "-1", index);
			}
		}
	}
	return true;
}

/**
 * @brief - This function clears all grill choices, making everything default.
 * @since NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function PosCSOClearGrillJS() {
	
	if(grillRecord.isGrillRunning()) {
		var grillOperationsArray = grillRecord.GrillOperationsForProduct;
		lClearCustomizationFirstGrill(grillOperationsArray[grillOperationsArray.length - 1].ProductCode.toString());
	} else {
		// CSO-617 - Replace all references of PosClearGrill by PosClearGrillUnit
		PosClearGrillUnitJS();
	}
	
	return true;
}

/**
 * @brief - This function clears all grill choices of a single unit, making everything default.
 * @since CSO-617 - Replace all references of PosClearGrill by PosClearGrillUnit
 * @author - MY
 */
function PosClearGrillUnitJS() {
	if (typeof(PosClearGrillUnit) == "function") {
		API.dbg("[PosClearGrillUnitJS] PosClearGrillUnit");
		PosClearGrillUnit();
	}
	else {
		API.dbg("[PosClearGrillUnitJS] PosClearGrill");
		PosClearGrill();
	}
}

/**
 *
 * @brief - Change a choice for selected product and replaces with passed product
 * @return - True if the choice was sucessfull changed
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOChangeChoiceJS(originProduct, newProduct) {
	
	API.dbg("CSO - PosCSOChangeChoiceJS - Called with parameter originProduct=[" + originProduct + "], newProduct=[" + newProduct + "]");
	
	var ret = false;
	
	if (typeof(PosChangeChoice) == "function") {
		ret = PosChangeChoice("1", originProduct, newProduct);
	} else {
		if (!PosClearChoice()) {
			API.dbg("CSO - PosCSOChangeChoiceJS - Choice was NOT cleared");
			return false;
		}
		
		var ret = PosDoChoice(newProduct);
	}

	if (ret)
		API.dbg("CSO - PosCSOChangeChoiceJS - Choice was changed");

	if (SHARED_CTX["IS_CUSTOMIZING_VM"] == "true") {
		PosCSOShowCustomizeScreenJS(null);
	}
	
	return ret;
}

/**
 * @brief - 
 * @author - Christiano Meirelles
 */
function PosCSOIsDeliveryLaterAvailableJS(screenNumber, deliveryLaterProductCode) {
	
	var hlp = new BusinessObjectHelper;
	
	var saleType = hlp.getSaleType();
	
	if (saleType != 0) {
		sessionSale.set("DELIVERY_LATER_SUMARY", null);
		return false;
	}
	
	//CES-2299: PosCSOIsDeliveryLaterAvailableJS causes script error when there is no deliveryLater product code specified.
	if (deliveryLaterProductCode == null || deliveryLaterProductCode == undefined || deliveryLaterProductCode == "" ||
		screenNumber == null || screenNumber == undefined || screenNumber == "") {
		return false;
	}
	
	var deliveryLaterProductInfo = csoProductInfo[deliveryLaterProductCode.toString()];
	
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	if (deliveryLaterProductInfo == null || deliveryLaterProductInfo == undefined) {
		API.dbg("CSO - PosCSOIsDeliveryLaterAvailableJS: Given product is not present on Product-db.xml - ProductCode: " + deliveryLaterProductCode);
		sessionSale.set("DELIVERY_LATER_SUMARY", null);
		return false;
	}
	
	if (deliveryLaterProductInfo.xmlNode.SalesType.@eatin == "false") {
		sessionSale.set("DELIVERY_LATER_SUMARY", null);
		return false;
	}

	sessionSale.set("DELIVERY_LATER_PRODUCTCODE", deliveryLaterProductCode);
	
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	
	var index = 0;
	var deliveryLaterXml = new XML('<DeliveryLater />');
	
	deliveryLaterXml.@laterImage = deliveryLaterProductInfo.csoImages.grillImage;
	deliveryLaterXml.@bigImage = deliveryLaterProductInfo.csoImages.largeImage;
	deliveryLaterXml.@screenNumber = screenNumber;
	
	deliveryLaterItems = new Array();
	
	var isAllLater = true;
	
	for each (var item in kioskOrderView.Order.Item) {
		
		if (item.@voided.toString() == "true" || item.@customizable.toString() == "false") {
			continue;
		}
		
		var productCode = item.Product[0].@code.toString();
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined || csoProductInfo[productCode].xmlNode == undefined) {
			continue;
		}
		
		var productInfo = csoProductInfo[productCode];
		var productNode = productInfo.xmlNode;
		
		if (productNode.Comments.Component.(ProductCode == deliveryLaterProductCode).length() > 0)
		{
			// SDO-10823 - NGK 5.10 - Delivery Later screen is displaying a product that should not be displayed after the order confirmation screen.
			if ("true"==productNode.Production.Grillable.@status)
			{
				//CSO-229 - NGK Support Deliver Early Feature - 7826861
				var laterQty = 0;
				if (sessionSale.get("IS_NGK") == "true")
				{
					//SDO-10205 - NGK v5.91 - Delivery Later products that are NOT configured with <DisplayOnCSO> still appear on the delivery later screen
					if (lCheckComment(productNode, deliveryLaterProductInfo.xmlNode))
					{
						var productTotalQty = Number(item.Product[0].@qty);
						var productDeliveryEarlyQty = (item.Product[0].@deliveryEarlyQty) ? Number(item.Product[0].@deliveryEarlyQty): 0;
						laterQty = productTotalQty - productDeliveryEarlyQty;
					}
				}
				else
				{
					laterQty = Number(item.Product[0].@qty);
				}
				
				for (var i = 0; i < laterQty; i++) {
					var deliveryLater = (item.Product[0].Grill.(@code == deliveryLaterProductCode).length() > 0);
					
					if (!deliveryLater) {
						isAllLater = false;
					}
					
					var itemXml = new XML ("<Item />");
					itemXml.@index = index;
					itemXml.@code = productCode;
					itemXml.@name = productInfo.names[sessionSale.get("LANGUAGE")].csoName;
					itemXml.@image = productInfo.csoImages.largeImage;
					itemXml.@later = deliveryLater;
					
					var localItemXml = new XML("<Item />");
					localItemXml.@later = deliveryLater;
					localItemXml.@originalValue = deliveryLater;
					localItemXml.appendChild(item.Product[0]);
					
					deliveryLaterItems[index] = localItemXml;
					
					index++;
					deliveryLaterXml.appendChild(itemXml);
				}
			}
		} else if (item.Product[0].Product.length() > 0) {
			for each (var product in item.Product[0].Product) {
				productCode = product.@code.toString();
				productInfo = csoProductInfo[productCode];
				productNode = productInfo.xmlNode;
				
				// SDO-10823 - NGK 5.10 - Delivery Later screen is displaying a product that should not be displayed after the order confirmation screen.
				if (("true"==productNode.Production.Grillable.@status)&&(productNode.Comments.Component.(ProductCode == deliveryLaterProductCode).length() > 0))
				{
					//CSO-229 - NGK Support Deliver Early Feature - 7826861
					var laterQty = 0;
					if (sessionSale.get("IS_NGK") == "true")
					{
						//SDO-10205 - NGK v5.91 - Delivery Later products that are NOT configured with <DisplayOnCSO> still appear on the delivery later screen
						if (lCheckComment(productNode, deliveryLaterProductInfo.xmlNode))
						{
							var productTotalQty = Number(product.@qty);
							var productDeliveryEarlyQty = (product.@deliveryEarlyQty) ? Number(product.@deliveryEarlyQty): 0;
							laterQty = productTotalQty - productDeliveryEarlyQty;
						}
					}
					else
					{
						laterQty = Number(product.@qty);
					}
					
					for (var i = 0; i < laterQty; i++) {
						var deliveryLater = (product.Grill.(@code == deliveryLaterProductCode).length() > 0);
						
						if (!deliveryLater) {
							isAllLater = false;
						}
						
						var itemXml = new XML ("<Item />");
						itemXml.@index = index;
						itemXml.@code = productCode;
						itemXml.@name = productInfo.names[sessionSale.get("LANGUAGE")].csoName;
						itemXml.@image = productInfo.csoImages.largeImage;
						itemXml.@later = deliveryLater;
						
						var localItemXml = new XML("<Item />");
						localItemXml.@later = deliveryLater;
						localItemXml.@originalValue = deliveryLater;
						localItemXml.appendChild(item.Product[0]);
						localItemXml.appendChild(product);
						
						deliveryLaterItems[index] = localItemXml;
						
						index++;
						deliveryLaterXml.appendChild(itemXml);
					}
				}
			}
		}
	}
	
	if (index == 0 || isAllLater) {
		sessionSale.set("DELIVERY_LATER_SUMARY", null);
		return false;
	}
	
	var resultXml = new XML('<Event type="ASYNC" name="DLG_SYS_SHOW_LATER_SUMARY" />');
	resultXml.appendChild(deliveryLaterXml);
	sessionSale.set("DELIVERY_LATER_SUMARY", resultXml.toString());
	
	return true;
}

/**
 * @brief - 
 * @author - Christiano Meirelles
 */
function PosCSOShowDeliveryLaterJS() {
	/* SAMPLE
	<Event type="ASYNC" name="DLG_SYS_SHOW_LATER_SUMARY">
		<DeliveryLater laterImage="gui_comment_getlater.png" bigImage="gui_comment_getlater.png" screenNumber="101">
			<Item index="0" code="8500" name="Med Coke" image="gui_ch_main_coke.png" later="false" />
			<Item index="1" code="7322" name="Medium Frites" image="gui_ch_main_frites.png" later="false" />
		</DeliveryLater>
	</Event>
	*/
	
	var deliveryLaterSumary = sessionSale.get("DELIVERY_LATER_SUMARY");
	if (deliveryLaterSumary != null && deliveryLaterSumary != "") {
		PosSendUICmd(deliveryLaterSumary);
	}
	sessionSale.set("DELIVERY_LATER_SUMARY", null);
	
	return true;
}

/**
 * @brief - 
 * @author - Christiano Meirelles
 */
function PosCSOEndDeliveryLaterJS(confirmChanges) {
	var hlp = new BusinessObjectHelper;
	
	/* 
	SALE_STATUS_START=0,			//!< Default status (ready to sell, but no item sold so far)
	SALE_STATUS_IN_PROGRESS=1,		//!< Sale in progress, at least one item sold (OPEN_SALE)
	SALE_STATUS_ON_TOTAL=2,			//!< Sale totalized at least once
	SALE_STATUS_TOTALIZED=4,		//!< Sale in tendering process (TOTAL_SALE)
	SALE_STATUS_GRILLING=8,			//!< Sale in grill process (GRILL_IN_PROGRESS)
	SALE_STATUS_RECALLED=16,		//!< Sale with recall pressed
	SALE_STATUS_TENDERED=32,		//!< Sale in tender screen
	SALE_STATUS_STORED=64,			//!< Sale stored
	SALE_STATUS_PAID=128,			//!< Sale paid
	SALE_STATUS_CLOSED=256,			//!< Not used
	PROD_STATUS_HELD=512,			//!< Order in held condition - drive thru
	PROD_STATUS_SERVED=1024,		//!< Order served - drive thru
	SALE_STATUS_CURRENT_VOIDED=2048,//!< Current sale voided
	SALE_STATUS_LAST_VOIDED=4096,	//!< Last sale voided
	SALE_STATUS_NON_ACCOUNTING=8192,//!< Sale used for skipping cars
	UNDEFINED_SALE_STATUS=16384,	//!< undefined status
	*/
	
	var currentView = new XML(hlp.getCurrentView());
	var isBackFromTotal = false;
	
	API.dbg("CSO - PosCSOEndDeliveryLaterJS: currentView.View.@saleStatus=["+Number(currentView.@saleStatus)+"]");
	
	if (Number(currentView.@saleStatus) == 2) {
		if (!PosDoBackFromTotal()) {
			API.dbg("CSO - PosCSOEndDeliveryLaterJS: Could not execute PosDoBackFromTotal");
			return false;
		}
		isBackFromTotal = true;
	}
	
	if (confirmChanges == "true") {
		for (var key = 0; key < deliveryLaterItems.length; key++) {
			
			var deliveryLaterItem = deliveryLaterItems[key];
			API.dbg("CSO - PosCSOEndDeliveryLaterJS: deliveryLaterItem Key=[" + key + "]");
			
			if (deliveryLaterItem.@later != deliveryLaterItem.@originalValue) { //The current item needs to be grilled (the original value is diferent from desired value)
				
				API.dbg("CSO - PosCSOEndDeliveryLaterJS: deliveryLaterItem Key=[" + key + "]) - Needs update!");
				
				var desiredProductCode = deliveryLaterItem.Product[0].@code.toString();
				var currentIndex = -1;
				
				var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
				
				for each (var orderItem in kioskOrderView.Order.Item) {
					
					if (orderItem.@voided.toString() == "true" || orderItem.@customizable.toString() == "false") {
						continue;
					}
		
					//NPS-13601 - Sev 3 - All NP6 Stores - NP6.1.21 RC15 HF9 (Patch 5) - PickUp Later ticket does not match customer choices in CSO- ACSI2029796
					if (lIsSameOrderProduct(orderItem.Product[0], deliveryLaterItem.Product[0])) {
						if (deliveryLaterItem.Product.length() > 1) { // Check if sub products are the same
							for each (var childProduct in orderItem.Product[0].Product) {
								if (lIsSameOrderProduct(childProduct, deliveryLaterItem.Product[1])) {
									currentIndex = Number(orderItem.@index);
									break;
								}
							}
							if (currentIndex != -1) {
								break;
							}
						} else {
							currentIndex = Number(orderItem.@index);
							break;
						}
					}
				}
				
				API.dbg("CSO - PosCSOEndDeliveryLaterJS: currentIndex=[" + currentIndex + "]");
				
				if (currentIndex == -1) {
					API.dbg("CSO - PosCSOEndDeliveryLaterJS: Could not find the item on order view (productCode=[" + desiredProductCode + "])");
					break;
				}
				
				if (!KioskViewHelper.PosDoSelIndex(currentIndex)){
					API.dbg("CSO - PosCSOEndDeliveryLaterJS: Could not start grill for item (itemIndex=[" + currentIndex + "])");
					break;
				}
				
				if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId"))){
					API.dbg("CSO - PosCSOEndDeliveryLaterJS: Could not start grill for item (itemIndex=[" + currentIndex + "])");
					break;
				}
				
				// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
				var kioskGrillViewXml = lGetGrillView();
				
				//var possibleComponentIndexes = kioskGrillViewXml.Component.(@code.toString() == deliveryLaterItem.@targetCode.toString()).@index;
				
				//API.dbg("CSO - PosCSOEndDeliveryLaterJS: possibleComponentIndexes=[" + possibleComponentIndexes.toString() + "]");
				
				for each (var grillComponent in kioskGrillViewXml.Component) {
						
					API.dbg("CSO - PosCSOEndDeliveryLaterJS: grillComponent.@code=[" + grillComponent.@code + "]");
					API.dbg("CSO - PosCSOEndDeliveryLaterJS: deliveryLaterItem.@targetCode=[" + (deliveryLaterItem.Product.length() > 1 ? 
							deliveryLaterItem.Product[1].@code.toString() : deliveryLaterItem.Product[0].@code.toString()) + "]");
					
					if (grillComponent.@code.toString() != (deliveryLaterItem.Product.length() > 1 ? 
							deliveryLaterItem.Product[1].@code.toString() : deliveryLaterItem.Product[0].@code.toString())) {
						continue;
					}
					
					PosDoSelGrillIndex(grillComponent.@index);
					
					API.dbg("CSO - PosCSOEndDeliveryLaterJS: grillComponent.@index=[" + grillComponent.@index + "]) - Selected");
					
					// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
					kioskGrillViewXml = lGetGrillView();
					var newGrillComponent = kioskGrillViewXml.Component.(@index == grillComponent.@index);

					if (lIsSameGrill(newGrillComponent, (deliveryLaterItem.Product.length() > 1 ? deliveryLaterItem.Product[1].Grill : deliveryLaterItem.Product[0].Grill))) {
						
						var itemIndex = -1;
						var deliveryLaterProductCode = sessionSale.get("DELIVERY_LATER_PRODUCTCODE");
						API.dbg("CSO - PosCSOEndDeliveryLaterJS: deliveryLaterProductCode=[" + deliveryLaterProductCode + "]");
						
						for each (var grillItem in newGrillComponent.Item) {
							API.dbg("CSO - PosCSOEndDeliveryLaterJS: grillItem.@code=[" + grillItem.@code + "]");
							if (grillItem.@code.toString() == deliveryLaterProductCode) {
								itemIndex = Number(grillItem.@index);
								break;
							}
						}
						
						API.dbg("CSO - PosCSOEndDeliveryLaterJS: itemIndex=[" + itemIndex + "]");
						
						if (itemIndex < 0) {
							API.dbg("CSO - PosCSOEndDeliveryLaterJS: kioskGrillViewXml=[" + kioskGrillViewXml + "]");
						}
						
						if (!PosCSODoGrillAddRemoveAllJS((deliveryLaterItem.@later == "true" ? '+' : '-'), '-1', itemIndex.toString())) {
							API.dbg("CSO - PosCSOEndDeliveryLaterJS: Could not change delivery later comment for item (itemIndex=[" + currentIndex + "])");
						}
						break;
					}
				}
				
				if (!PosDoGrillEnd("3")) {
					API.dbg("CSO - PosCSOEndDeliveryLaterJS: Could not end grill for item (itemIndex=[" + currentIndex + "])");
					break;
				}
			}
		}
	}
	
	if (isBackFromTotal) {
		API.dbg("CSO - PosCSOEndDeliveryLaterJS: isBackFromTotal = true, executing PosDoTotal");
		if (!PosDoTotal()) {
			API.dbg("CSO - PosCSOEndDeliveryLaterJS: Could not execute PosDoTotal");
			return false;
		}
	}
	
	PosSendUICmd('<Event type="ASYNC" name="DLG_SYS_CLOSE_LATER_SUMARY" />');	
	deliveryLaterItems = new Array();
	return true;
	
	/**
	 * @brief - 
	 * @return - 
	 */
	function lIsSameGrill(grillComponent, grillList) {
		// OrderView: <Grill modifiers="0" defQty="1" qty="0" modQty="-1" code="9555" unitPrice="0" unitTax="0.00" totalPrice="0.00" totalTax="0.00" name="Ketchup"/>
		// GrillView: <Item index="1" code="9555" name="Ketchup" unitPrice="0" curQty="1" defQty="1" minQty="0" maxQty="10" isDefaultQty="true" canRemove="true" canAdd="true" modifiers="0"/>
	
		for each (grillItem in grillComponent.Item)
		{
			var grill = grillList.(@code == grillItem.@code);
			
			if (grillItem.@isDefaultQty == "true" && grillItem.@modifiers == "0")
			{
				// NPS-13601 - Sev 3 - All NP6 Stores - NP6.1.21 RC15 HF9 (Patch 5) - PickUp Later ticket does not match customer choices in CSO- ACSI2029796
				// If the item is not modified in the grill view, it also should not be present in the kiosk view
				if (grill.length() != 0) return false;
				
				continue;
			}

			// NPS-13601 - Sev 3 - All NP6 Stores - NP6.1.21 RC15 HF9 (Patch 5) - PickUp Later ticket does not match customer choices in CSO- ACSI2029796
			// Changed from qty to npQty, because qty is multiplied by the parent quantity.
			if (grill.length() != 1 ||
				grill.@modifiers != grillItem.@modifiers ||
				grill.@npQty != grillItem.@curQty) {
				return false;
			}
		}
		
		return true;
	}
	
	/**
	 * @brief - Check if the grill operations of two kiosk view products are the same
	 * @return - true if are the same, false otherwise
	 * @author - Vladimir Dobroff
	 * @since - NGK v5.9.1 - NPS-13601 - Sev 3 - All NP6 Stores - NP6.1.21 RC15 HF9 (Patch 5) - PickUp Later ticket does not match customer choices in CSO- ACSI2029796
	 */
	function lIsSameOrderGrill(Grill1, Grill2)
	{
		if (!Grill1 || !Grill2) return false;
		if (Grill1.length() != Grill2.length()) return false;
		
		for (var i = 0; i < Grill1.length(); i++)
		{
			if (Grill1[i].@code.toString() != Grill2[i].@code.toString()) return false;
			if (Grill1[i].@npQty.toString() != Grill2[i].@npQty.toString()) return false;
			if (Grill1[i].@modifiers.toString() != Grill2[i].@modifiers.toString()) return false;
		}
		
		return true;
	}
	
	/**
	 * @brief - Check if two kiosk view products are the same
	 * @param - checkQuantity - If the quantity will be checked (should be set to false for level 0 products)
	 * @return - true if are the same, false otherwise
	 * @author - Vladimir Dobroff
	 * @since - NGK v5.9.1 - NPS-13601 - Sev 3 - All NP6 Stores - NP6.1.21 RC15 HF9 (Patch 5) - PickUp Later ticket does not match customer choices in CSO- ACSI2029796
	 */
	function lIsSameOrderProduct(Product1, Product2, checkQuantity)
	{
		if (!Product1 || !Product2) return false;
		if (Product1.Product.length() != Product2.Product.length()) return false;
		if (Product1.@code.toString() != Product2.@code.toString()) return false;
		
		//For level 0 products the quantity should not be checked
		if (checkQuantity)
		{
			if (Product1.@npQty.toString() != Product2.@npQty.toString()) return false;
		}
		
		for (var i = 0; i < Product1.Product.length(); i++)
		{
			if (!lIsSameOrderProduct(Product1.Product[i], Product2.Product[i], true)) return false;
		}
		
		if (!lIsSameOrderGrill(Product1.Grill, Product2.Grill)) return false;
		
		return true;
	}
}

/**
 * @brief - 
 * @return - 
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOSetDeliveryLaterJS(index, later) {
	/* SAMPLE
	<Event type="ASYNC" name="DLG_SYS_UPDATE_LATER_SUMARY">
		<Item index="0" later="false" />
		<Item index="1" later="true" />
	</Event>
	*/
	
	var indexNumber = Number(index);
	
	var resultXml = new XML('<Event type="ASYNC" name="DLG_SYS_UPDATE_LATER_SUMARY" />');
	
	if (indexNumber >= 0) {
		if (sessionSale.get("IS_NGK") == "true")
		{
			if (deliveryLaterItems[indexNumber] == undefined) {
				API.dbg("PosCSOSetDeliveryLaterJS - ERROR - Could not find the delivery later item for index [" + index + "]");
				return false;
			}
		}
		
		var oldValue = deliveryLaterItems[indexNumber].@later;
		var newValue = later;
		
		if (oldValue != newValue) {
			
			deliveryLaterItems[indexNumber].@later = newValue;
			
			var itemXml = new XML("<Item />");
			itemXml.@index = indexNumber;
			itemXml.@later = newValue;
		
			resultXml.appendChild(itemXml);
			PosSendUICmd(resultXml.toString());
		}
		return true;
	}
	
	for (var key = 0; key < deliveryLaterItems.length; key++) {
		var oldValue = deliveryLaterItems[key].@later;
		var newValue = later;
		
		if (oldValue != newValue) {
			
			deliveryLaterItems[key].@later = newValue;
			
			var itemXml = new XML("<Item />");
			itemXml.@index = key;
			itemXml.@later = newValue;
		
			resultXml.appendChild(itemXml);
		}
	}
	
	return PosSendUICmd(resultXml.toString());
}

/**
 * @brief - 
 * @author - Christiano Meirelles
 */
function PosCSOIsTableServiceAvailableJS() {
	
	var hlp = new BusinessObjectHelper;
	var saleType = hlp.getSaleType();
	
	if (saleType != 0)
		return false;

	// SQC-4670 - Kiosk V4RC12 - Table Service avaiable when minimumPurchaseAmount is defined as blank
	var minimumPurchaseAmount = trim(lGetCSOUserInterfaceStringParameter("tableService.MinimumPurchaseAmount", null));
	var saleView = new XML(hlp.getCurrentView());

	// SQC-4670 - Kiosk V4RC12 - Table Service avaiable when minimumPurchaseAmount is defined as blank
	if (minimumPurchaseAmount == null || minimumPurchaseAmount == "" || isNaN(Number(minimumPurchaseAmount)) ||
		(Number(minimumPurchaseAmount) / 100) > Number(saleView.@totalAmount) || Number(minimumPurchaseAmount) === -1) {
		return false;
	}
		
	if (typeof(PosSetTableServiceArea) != "function")
		return false;
	
	return true;
}

/**
 * @brief - 
 * @author - Christiano Meirelles
 */
function PosCSOShowTableServiceJS(screenNumber) {
	return PosCSODoShowScreenJS(screenNumber);
}

/**
 * @brief - 
 * @author - Christiano Meirelles
 */
function PosCSOEndTableServiceJS(confirmChanges) {
	if (confirmChanges == "true") {
		ConfirmTableService(sessionSale.get("CONFIRMZONEID"));
	}
	PosCSODoCloseScreenPopupJS();
	return true;
}

/**
 * @brief - 
 * @author - Christiano Meirelles
 */
function PosCSOEnqueueWFExecutionJS(WFName) {

	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_ENQUEUEWF" />');
	eventXml.appendChild(new XML('<WFName>'+WFName+'</WFName>'));
	
	return PosSendUICmd(eventXml.toString());
}

/**
 * @brief - 
 * @author - Christiano Meirelles
 */
function PosCSOExecuteWFFromQueueJS() {
	return PosSendUICmd('<Event type="ASYNC" name="DAT_SYS_DEQUEUEWF" />');
}

/**
 * @brief - Converts the view for the TPUI pattern.
 * @return - view - summarized view.
 * @author - Kalil
 * @modified - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
 *           - SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
 *           - SDO-11867 - [DRM] CYT-C2 [Kiosk Offer Redemption]: Customization screen is not consistent when user customize CYT product from offer basket and normal order basket.
 *           - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function getKioskView(sView, separateForceDisplayInGrillItem) {

	if (sView==null) {
	    return null;
	}
	
	//CSO-1358 - POS-516 - Support the Bottle Deposit Scheme at Kiosk
	var depositTotal = new BigDecimal(0);
	var localView = KioskViewHelper.ReformatView(sView);
	
	var xmlView = new XML(localView);
	
	var viewChildren = xmlView.children();
	var xmlOut = new XML('<ProdInfo/>');
	var language = sessionSale.get("LANGUAGE");
	
	//##################################################################################################################
	// HEADER TAG AND ATTRIBUTES
	//##################################################################################################################
	xmlOut.Header.@command = '0';
	xmlOut.Header.@version = '2';
	
	//##################################################################################################################
	// ORDER TAG AND ATTRIBUTES
	//##################################################################################################################
	orderKey = xmlView.@orderKey;
	storedOrderKey = orderKey.split(":");
	xmlOut.Order.@storedOrderKey	= storedOrderKey[1];
	xmlOut.Order.@major 			= xmlView.@major;
	xmlOut.Order.@minor 			= xmlView.@minor;
	xmlOut.Order.@totalAmount 		= xmlView.@totalAmount;			//TODO : Verify which is the total amount and tax to be sent to the client
	xmlOut.Order.@totalTax 			= xmlView.@totalTax;
	xmlOut.Order.@totalDue 			= xmlView.@totalDue;			
	xmlOut.Order.@saleDate 			= xmlView.@saleDate;
	xmlOut.Order.@saleTime 			= xmlView.@saleTime;
	xmlOut.Order.@status 			= xmlView.@saleStatus;
	xmlOut.Order.@trackStatus 		= xmlView.@trackSaleStatus;
	xmlOut.Order.@saleType			= xmlView.@type;				
	xmlOut.Order.@businessDate 		= xmlView.@businessDay;
	// NPS-14854 - Kiosk analytics
	xmlOut.Order.@transactionId     = xmlView.@orderKey;
	xmlOut.Order.@customerNickname  = xmlView.Customer.@nickname;
	xmlOut.Order.@isSideSale        = xmlView.@isSideSale;
	
	var lastItem = 'x';
	var lastLevel = 0;
	var level = 0;
	var item = null;
	var product = null;
	var newProduct = null;
	var changedAfterTotal = false;
	var isVoided = false;
	var realIndex = 0;
	// SQC-7488 - [NGK 5.12] US Nutrition Enhancement - Incorrect price in the summary screen using the US layout
	var isCYT=false;
	var startLevelCYT=-1;
	
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	var newProductToBeForced = null;
	var fatherOfProductToBeForced = null;
	
	// CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
	var zeroAmtOrder=false;
	var totalTD=new BigDecimal(xmlView.@totalAmount);
	if(0==totalTD.compareTo(new BigDecimal(0))) {
		zeroAmtOrder=true;
	}
	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	var iIndex=-1;
	var parentQty=0;
	//##################################################################################################################
	// ITEMS OF THE ORDER
	//##################################################################################################################
	for each (itemView in xmlView.ItemView) {
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		// counts the number of itemViews to make it easy to seek for the current item inside the lFindAllergensInCart
		iIndex++;
		if(0==itemView.level) {
			parentQty=itemView.quantity;
		}
		
		// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
		var customFields = null;

		// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
		if((itemView.customFields != null) && (itemView.customFields != undefined))
		{
			customFields = new XML('<customFields/>');
			for each (parameter in itemView.customFields.parameter)
			{
				var customFieldParameter = new XML('<parameter/>');
				customFieldParameter.@name = parameter.@name;
				customFieldParameter.@value = parameter.@value;
				customFields.appendChild(customFieldParameter);
			}
		}

		// Doesn't show a product that is an AutoCondiment.
		// @since: SDO-3836 - CSO - Remove autocondiments from the Kiosk Cart.
		if (itemView.AutoCondiment == "true") {
			continue;
		}
		if(lastItem!=itemView.itemCode){
			if(item!=null) {

				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if((csoCalculateEnergyInformation) && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))
				{
					lCalculateEnergyForItemsInView(item);
				}

				if(changedAfterTotal) {
					item.@changedAfterTotal='true';
				}
				
				// CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
				// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159 - This method won't be executed when using custom energy.
				// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
				if ((csoLoadCustomEnergyInformation == "") || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true)) lAddNutritionalInformation(item);
				
				var showNutritionalInfoIcon = lGetCSOUserInterfaceStringParameter("nutritionalInfoIconOnOrderBasket", "true");
				if (showNutritionalInfoIcon == "true" && isNutritionalInfoAvailableOnCart(item))
				{
					item.@hasNutritionInfo = "true";
				}
				
				xmlOut.Order.appendChild(item);
			}
			
			isVoided=((itemView.quantity==0) && (itemView.grilledQuantity==0));
			
			//Item Element
			item = new XML('<Item/>');
			item.@voided 			= isVoided;
			item.@qtyPromo 			= itemView.quantityPromo;
			item.@currentSelected 	= itemView.currentSelected;
			item.@indexInternal 	= itemView.itemCode;
			
			// SDO-11867 - [DRM] CYT-C2 [Kiosk Offer Redemption]: Customization screen is not consistent when user customize CYT product from offer basket and normal order basket.
			item.@isCYT             = ((csoProductInfo[itemView.productCode.toString()].isBybProduct.toString() == "true") || (csoProductInfo[itemView.productCode.toString()].isBybPreBuilt.toString() == "true")) ? "true" : "false";
			// CSO-766 - POS-362 - Customer Choice on NGK (8618134)
			item.@isCCM             = lIsCCM(csoProductInfo[itemView.productCode.toString()].xmlNode);
			item.@customizable 		= lIsGrillable(realIndex);
			
			item.@barcode           = "";
			item.@isRedeemable      = false;
			item.@canIncrease       = true;
			// NPS-14854 - Kiosk analytics
			item.@category          = itemView.category;
			// CSO-766 - POS-362 - Customer Choice on NGK (8618134)
			item.@ccmSavings        = itemView.ccmSavings;
			
			var barcodes = itemView.Attribute.(@name == "barcode");
			if((barcodes != null) && (barcodes.length()>0)) {
				var available = 0;
				item.@isRedeemable = true;
				for each (var barcode in barcodes) {
				    item.@barcode = barcode.toString();
					if(PosGetBarcodeRedemptions(barcode.toString())) {
						var result = getLastSuccess("PosGetBarcodeRedemptions");
						if((result != null) && (result.length > 0)) {
							var redemptions = result.split("|",2);
							if(redemptions.length == 2) {
								available = Number(redemptions[1]);
								if (available != 0) {
									break;
								}
							}
						}
					}
				}
				if ((available == 0)) {
					item.@canIncrease = false;
				}
			}

			// CSO-290 - NGK-Make Meal Functionality after Adding to Basket - 7913753
			var enableMakeMeal = lGetCSOUserInterfaceStringParameter("makeItAMeal.enable", "false");
			if("true"==enableMakeMeal) {
				item.@canMakeMeal=lCanMakeMeal(itemView.productCode, itemView.quantity);
			}
			
			if (isVoided) {
				item.@index = -1;
			} else {
				item.@index = realIndex;
			    realIndex++;
			}
			
			// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
			if(itemView.ActiveMode.length() > 0)
			{
				item.@ActiveMode = true;
				item.@stepNumber = itemView.ActiveMode.@stepNumber;
				item.@counter = itemView.ActiveMode.@promotionCounter;
				item.offerId = itemView.ActiveMode.offerId;
			}
			
			// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
			if(itemView.PromotionApplied.Actions != undefined && itemView.PromotionApplied.Actions.length() > 0
				&& itemView.PromotionApplied.Actions.Action.@name == "ReplaceItem")
			{
				item.@oldValue = itemView.PromotionApplied.Actions.Action.@oldValue;
			}
			
			changedAfterTotal 	= false;
			lastItem 			= itemView.itemCode;
			lastLevel 			= 0;
	
		}
		level 	= Number(itemView.level);
		defQty 	= Number(itemView.componentDefaultQtd);
		qty 	= Number(itemView.quantity);
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		maxQty  = Number(itemView.componentMaxQtd);
		minQty  = Number(itemView.componentMinQtd);
		forceCompDisplay = "";
		if ((itemView.ForceCompDisplay != null) && (itemView.ForceCompDisplay != undefined))
		{
			forceCompDisplay = itemView.ForceCompDisplay;
		}
	
		// SQC-7488 - [NGK 5.12] US Nutrition Enhancement - Incorrect price in the summary screen using the US layout
		if (level<=startLevelCYT) {
			// all CYT subitems are considered CYT
			// a new item starts when the current item level is equal or lower than the CTY level started
			isCYT=false;
			startLevelCYT=-1;
		}
		
		if (itemView.isGrillLine == 'true') {
			//##################################################################################################################
			// PRODUCT IS GRILLED
			//##################################################################################################################
			newProduct = new XML('<Grill/>');
			newProduct.@modifiers = itemView.specialModifiers;
			newProduct.@defQty = defQty;
			
			if(itemView.specialModifiers!="0") {
				newProduct.@qty = defQty;
			} else if(defQty>0) {
				newProduct.@qty = (defQty + qty);
				newProduct.@modQty = qty;
			} else {
				// PLE-283 - Merged from Australia
				newProduct.@modQty = qty;
				newProduct.@qty = qty;
			}
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			newProduct.@maxQty = maxQty;
			newProduct.@minQty = minQty;
			
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if((!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
			{
				// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
				if ((csoProductInfo[itemView.productCode.toString()] != undefined) &&
				    (csoProductInfo[itemView.productCode.toString()].xmlNode.CustomEnergyInformation != null) &&
					(csoProductInfo[itemView.productCode.toString()].xmlNode.CustomEnergyInformation != undefined) &&
					(csoProductInfo[itemView.productCode.toString()].xmlNode.CustomEnergyInformation != ""))
				{
					newProduct.@energy = lGetCustomEnergyInformation(itemView.productCode.toString());
					
					// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
					if (csoProductInfo[itemView.productCode.toString()].hasEnergySuffix == true) newProduct.@customSuffix = GetProductEnergySuffix(csoProductInfo[itemView.productCode.toString()]);

					// SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
					var canSetLight = csoProductInfo[itemView.productCode.toString()].canSetLight.toString();
					
					var newProductQuantity = Number(newProduct.@qty);
					
					var nutritionalInfoDisplayOnMainMenu = lGetCSOUserInterfaceStringParameter("nutritionalInfoDisplayOnMainMenu", "").toUpperCase();

					var modifiedQuantity = Number(newProduct.@modQty);
					var modifiers = Number(newProduct.@modifiers);
					var defaultQuantity = Number(newProduct.@defQty);
					if ((modifiedQuantity > Number(0)) || ((modifiers == Number(1)) && (defaultQuantity == Number(0)))) newProduct.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", newProduct.@energy);
					if ((modifiedQuantity < Number(0)) || ((modifiers == Number(1)) && (defaultQuantity > Number(0)))) newProduct.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_REDUCETEXT", newProduct.@energy);

					// SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
					if (((modifiedQuantity > Number(1)) || (modifiedQuantity < Number(-1))) && (newProduct.@energy != "") && (canSetLight == "false")){
						newProduct.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", newProduct.@energy);
					}

				}
			}

			//CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
			//Added for BYB portion based can adds
			//The code above does not generate valid qty values for can adds using portion based configuration
			//Because of that a new attribute has been created with the original qty value from the new pos view
			if (defQty > 0)
			{
				//The default quantity is not included in the grill line,
				//so it must be added to get the total quantity
				newProduct.@npQty = (defQty + qty);
				newProduct.@npQtyMult = (defQty + qty);
			}
			else 
			{
				newProduct.@npQty = qty;
				newProduct.@npQtyMult = qty;
			}
			
			newProduct.@text = lResolveGrillOperationName(itemView);
	
		} else {
			newProduct = new XML('<Product/>');
			newProduct.@qty = qty;
			//CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
			newProduct.@npQty = qty;
			newProduct.@npQtyMult = qty;
			
			// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
			if(customFields != null)
			{
				newProduct.appendChild(customFields);
			}
			// SQC-7488 - [NGK 5.12] US Nutrition Enhancement - Incorrect price in the summary screen using the US layout
			if(!isCYT) {
				// all CYT subitems are considered CYT
				// only test the flag again after finishing all CYT subitems
				isCYT=PosNGKIsCYTProduct(itemView.productCode);
				if(isCYT) {
					// the isCYT flag will only be reset if the current item level is equal or lower than the CYT start level
					startLevelCYT=level;
				}
			}
			
			//CSO-1358 - POS-516 - Support the Bottle Deposit Scheme at Kiosk
			if(itemView.Deposit.length() > 0) {
				newProduct.@depositCode = itemView.Deposit.@code;			
				newProduct.@depositValue = itemView.Deposit.@value;
				newProduct.@depositDescription = itemView.Deposit.@description;
				depositTotal = depositTotal.add(new BigDecimal(itemView.Deposit.@value));
			}
			
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			// if the main item has zero qty the item was voided
			if(parentQty>0) {
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				var allergensFound=lFindAllergensInCart([], iIndex, xmlView.ItemView, true, true, false);
				if (allergensFound.length>0) {
					newProduct.@hasAllergens = "true";
					var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
					allergensFound=lFindAllergensInCart(selectedAllergensList, iIndex, xmlView.ItemView, false, true);
					if (allergensFound.length>0) {
						newProduct.@hasSignaledAllergens = "true";
					}
				}
			}
		}

		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if ((itemView.isGrillLine == 'true') && (forceCompDisplay != "") && ((defQty + qty) > 0) &&
		    (csoCalculateEnergyInformation) && (separateForceDisplayInGrillItem != undefined) && (separateForceDisplayInGrillItem))
		{
			newProductToBeForced = new XML('<Product/>');

			// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
			if(customFields != null)
			{
				newProductToBeForced.appendChild(customFields);
			}
			
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			// if the main item has zero qty the item was voided
			if(parentQty>0) {
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				var allergensFound=lFindAllergensInCart([], iIndex, xmlView.ItemView, true, true);
				if (allergensFound.length>0) {
					newProductToBeForced.@hasAllergens = "true";
					var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
					allergensFound=lFindAllergensInCart(selectedAllergensList, iIndex, xmlView.ItemView, false, true, false);
					if (allergensFound.length>0) {
						newProductToBeForced.@hasSignaledAllergens = "true";
					}
				}
			}
		}
	
		newProduct.@code 		= itemView.productCode;
		newProduct.@unitPrice 	= itemView.unitPrice;
		newProduct.@unitTax 	= itemView.unitTax;
		newProduct.@totalPrice 	= itemView.totalPrice;
		
		// CSO-1313 - Kiosk SP8.5 PR2 S3:[Ungated Scan Phase 2] On Order review screen when items with priced condiments are edited(for BOGO offers/BOGO McGriddle), than on offer/promoPDP screen price of priced condiments are excluded instead total price should get displayed
		if((itemView.BPTotalPrice != null) && (itemView.BPTotalPrice != undefined))
			newProduct.@bPTotalPrice 	= itemView.BPTotalPrice;
		
		if (newProduct.@bPTotalPrice == undefined && itemView.PromotionApplied.length() > 0 && itemView.PromotionApplied.Actions != undefined)
			newProduct.@bPTotalPrice = Number(itemView.PromotionApplied.@originalPrice) * Number(itemView.quantity);
		
		newProduct.@totalTax 	= itemView.totalTax;
		
		// CSO-1313 - Kiosk SP8.5 PR2 S3:[Ungated Scan Phase 2] On Order review screen when items with priced condiments are edited(for BOGO offers/BOGO McGriddle), than on offer/promoPDP screen price of priced condiments are excluded instead total price should get displayed		
		if((itemView.BPTotalTax != null) && (itemView.BPTotalTax != undefined))
			newProduct.@bPTotalTax 	= itemView.BPTotalTax;
		
		newProduct.@flexibleChoice = itemView.isFlexibleChoice;
		newProduct.@ccmSavings   = itemView.ccmSavings;
		newProduct.@sellSequence = itemView.sellSequence;
		newProduct.@minQty       = itemView.componentMinQtd;
		newProduct.@maxQty       = itemView.componentMaxQtd;

		// SQC-7488 - [NGK 5.12] US Nutrition Enhancement - Incorrect price in the summary screen using the US layout
		newProduct.@isCYT 		= isCYT;

		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if(forceCompDisplay != "") newProduct.@forceCompDisplay = forceCompDisplay;

		// CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
		// if monopoly enabled
		if(zeroAmtOrder) {
			var priceTD=new BigDecimal(itemView.ADTotalPrice);
			if((0==priceTD.compareTo(new BigDecimal(0))) && (0==itemView.level)) {
				item.@isPromotional=lIsPromotionalProduct(itemView.productCode, itemView.discounts);
			}
		}
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[itemView.productCode.toString()] != undefined && csoProductInfo[itemView.productCode.toString()].names[language] != null) {
			newProduct.@name 		= csoProductInfo[itemView.productCode.toString()].names[language].csoName;
		} else {
			newProduct.@name 		= itemView.productCode.toString();
		}
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[itemView.productCode.toString()] != undefined) {
			newProduct.@cartImage 	= csoProductInfo[itemView.productCode.toString()].csoImages.cartImage;
		}
		
		if(!changedAfterTotal) {
			changedAfterTotal = ((itemView.quantityChanged=='true') || (itemView.quantityChanged=='TRUE'));
		}
	
		//check levels
		if (level > lastLevel) {
			product.appendChild(newProduct);
			
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if ((itemView.isGrillLine == 'true') && (forceCompDisplay != "") && ((defQty + qty) > 0) &&
			    (csoCalculateEnergyInformation) && (separateForceDisplayInGrillItem != undefined) && (separateForceDisplayInGrillItem))
			{
				fatherOfProductToBeForced = product;
			}

			product = newProduct;
		} else if ((level<=lastLevel) && (level!=0)) {
			for(j=0; j<((lastLevel-level)+1); j++) {
				product = product.parent();
			}
			product.appendChild(newProduct);
			
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if ((itemView.isGrillLine == 'true') && (forceCompDisplay != "") && ((defQty + qty) > 0) &&
			    (csoCalculateEnergyInformation) && (separateForceDisplayInGrillItem != undefined) && (separateForceDisplayInGrillItem))
			{
				fatherOfProductToBeForced = product;
			}
			
			product = newProduct;

		} else {
			product = newProduct;
			item.appendChild(product);
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if ((itemView.isGrillLine == 'true') && (forceCompDisplay != "") && ((defQty + qty) > 0) &&
			    (csoCalculateEnergyInformation) && (separateForceDisplayInGrillItem != undefined) && (separateForceDisplayInGrillItem))
			{
				fatherOfProductToBeForced = item;
			}
		}
		
		//SQC-3972 Incorrect quantity when more than one promotion (identical) are sold
		newProduct.@origQty = newProduct.@qty;
		
		// CSO-229 - NGK Support Deliver Early Feature - 7826861
		if (sessionSale.get("IS_NGK") == "true")
		{
			newProduct.@deliveryEarlyQty = itemView.DeliveryEarlyQty;
			if (!newProduct.@deliveryEarlyQty.toString()) newProduct.@deliveryEarlyQty = "0";
		}

		//NPS-10670 - Kiosk GUI 4 - Qty of products underneath Meals is not updating - ACSI0886673
		var parent = product.parent();
				
        if (parent != null && level > 0) {
            newProduct.@qty = Number(newProduct.@qty) * Number(parent.@qty);
	    //CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
            newProduct.@npQtyMult = Number(newProduct.@npQtyMult) * Number(parent.@npQtyMult);
        }

        // CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if((!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
		{
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if ((csoProductInfo[itemView.productCode.toString()] != undefined) &&
			    (csoProductInfo[itemView.productCode.toString()].xmlNode.CustomEnergyInformation != null) &&
			    (csoProductInfo[itemView.productCode.toString()].xmlNode.CustomEnergyInformation != undefined))
			{
				if ((newProduct.@energy == "") || (newProduct.@energy == null) || (newProduct.@energy == undefined))
				{
					newProduct.@energy = lGetCustomEnergyInformation(itemView.productCode.toString());
					// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
					if (csoProductInfo[itemView.productCode.toString()].hasEnergySuffix == true) newProduct.@customSuffix = GetProductEnergySuffix(csoProductInfo[itemView.productCode.toString()]);

					if (itemView.prodaction == "3") newProduct.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", newProduct.@energy);
					
					// SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
					var canSetLight = csoProductInfo[itemView.productCode.toString()].canSetLight.toString();
					
					if ((Number(newProduct.@qty) > 1) && (newProduct.@energy != "") && (canSetLight == "false")){
						newProduct.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", newProduct.@energy);
					}
				}
			}
		}
		
		// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
		// add discount information
		var tdAmount=new BigDecimal(itemView.discounts.discount.@amount);
		if(tdAmount.compareTo(BigDecimal.ZERO) > 0) {
			newProduct.@discountId = itemView.discounts.discount.@id;
			newProduct.@discountType = itemView.discounts.discount.@type;
			newProduct.@discountValue = itemView.discounts.discount.@value;
			newProduct.@discountAmount = itemView.discounts.discount.@amount;
			newProduct.@discountReduction = itemView.discounts.discount.@reduction;
			//newProduct.@discountDescription = itemView.discounts.discount.@description;
			newProduct.@discountDescription = PosCSOI18nGetMessageJS("CSO_MSG_COUPON_DISCOUNT");
			item.@canIncrease = false;
			// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
			item.@hasDiscount = "true";
		}
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if ((itemView.isGrillLine == 'true') && (forceCompDisplay != "") && ((defQty + qty) > 0) &&
		    (csoCalculateEnergyInformation) && (separateForceDisplayInGrillItem != undefined) && (separateForceDisplayInGrillItem))
		{
			if(qty > 0)
			{
				newProductToBeForced.@qty = defQty;
				newProductToBeForced.@npQty = defQty;
				newProductToBeForced.@npQtyMult = defQty;
				
				// SDO-13542 - [DRM] KIOSK C2P3: Total Price of CYT specialty burger with additional priced patty on CYT review screen and order basket are different when nutrition functionality is on for store.
				newProduct.@defQty = "0";
				newProduct.@qty = qty;
				newProduct.@npQty = qty;
				newProduct.@npQtyMult = qty;
				if (parent != null && level > 0) {
					newProduct.@qty = Number(newProduct.@qty) * Number(parent.@qty);
					newProduct.@npQtyMult = Number(newProduct.@npQtyMult) * Number(parent.@npQtyMult);
				}				
			}

			// SDO-13542 - [DRM] KIOSK C2P3: Total Price of CYT specialty burger with additional priced patty on CYT review screen and order basket are different when nutrition functionality is on for store.
			newProductToBeForced.@code 	 = newProduct.@code;
			newProductToBeForced.@unitPrice  = newProduct.@unitPrice;
			newProductToBeForced.@unitTax 	 = newProduct.@unitTax;
			newProductToBeForced.@totalPrice = "0.00";
			newProductToBeForced.@totalTax 	 = "0.00";
			newProductToBeForced.@isCYT 	 = newProduct.@isCYT;
			if(newProduct.@forceCompDisplay != undefined) newProductToBeForced.@forceCompDisplay = newProduct.@forceCompDisplay;
			newProductToBeForced.@name 	 = newProduct.@name;
			if(newProduct.@cartImage != undefined) newProductToBeForced.@cartImage = newProduct.@cartImage;
			newProductToBeForced.@origQty 	 = newProductToBeForced.@qty;
			newProductToBeForced.@qty = Number(newProductToBeForced.@qty) * Number(parent.@qty);

			if(newProduct.@deliveryEarlyQty != undefined) newProductToBeForced.@deliveryEarlyQty = newProduct.@deliveryEarlyQty;
			
			if(tdAmount.compareTo(BigDecimal.ZERO) > 0) {
				newProductToBeForced.@discountId = newProduct.@discountId;
				newProductToBeForced.@discountType = newProduct.@discountType;
				newProductToBeForced.@discountValue = newProduct.@discountValue;
				newProductToBeForced.@discountAmount = newProduct.@discountAmount;
				newProductToBeForced.@discountReduction = newProduct.@discountReduction;
				newProductToBeForced.@discountDescription = newProduct.@discountDescription;
			}

			// SDO-13542 - [DRM] KIOSK C2P3: Total Price of CYT specialty burger with additional priced patty on CYT review screen and order basket are different when nutrition functionality is on for store.
			newProductToBeForced.@solvedChoice = "";
			newProductToBeForced.@isSingleAutoChoice = "false";
			
			fatherOfProductToBeForced.appendChild(newProductToBeForced);
		}
		
		// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
		if (itemView.PromotionApplied.length() > 0)
		{
			item.@hasPromo = "true";
		}
		
		// CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
		if (itemView.solvedChoice)
		{
			newProduct.@solvedChoice = itemView.solvedChoice.toString();
			newProduct.@isSingleAutoChoice = bIsSingleAutoChoice(itemView.solvedChoice.toString()).toString();
		}

		// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
		newProduct.@grillSequence=itemView.grillSequence;
		
		lastLevel=level;
	}
	
    //CSO-1358 - POS-516 - Support the Bottle Deposit Scheme at Kiosk
	xmlOut.Order.@depositTotal = depositTotal;
	
	if(item!=null) {

		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if((csoCalculateEnergyInformation) && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))
		{
			lCalculateEnergyForItemsInView(item);
		}
		
		if(changedAfterTotal) {
			item.@changedAfterTotal='true';
		}
		
		// CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
		// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159 - This method won't be executed when using custom energy.
		// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
		if ((csoLoadCustomEnergyInformation == "") || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true)) lAddNutritionalInformation(item);
		
		var showNutritionalInfoIcon = lGetCSOUserInterfaceStringParameter("nutritionalInfoIconOnOrderBasket", "true");
		if (showNutritionalInfoIcon == "true" && isNutritionalInfoAvailableOnCart(item))
		{
			item.@hasNutritionInfo = "true";
		}
		
		xmlOut.Order.appendChild(item);
	}
	
	var cashless = null;
	cashlessCounter = 0;
	
	//##################################################################################################################
	// TENDERS AND CASHLESS
	//##################################################################################################################
	for each (itemTenderView in xmlView.ItemTenderView) {
		item = new XML('<Tender/>');
		item.@code 		= itemTenderView.code;
		item.@kind		= itemTenderView.kind;						// 0=Payment,1=Allowance,2=Crew Meal,3=Manager Meal,4=Change,5=Change kept,6=returned tender,8=discount coupon,9=payment that was replaced (Gift Card => Cash) -- see: npAdpAccTypes.h
		item.@name 		= itemTenderView.description;
		item.@qty 		= itemTenderView.qty;
		item.@value 	= itemTenderView.value;
		item.@srcPOSId 	= itemTenderView.srcPOSId;
		item.@discMode 	= itemTenderView.discMode;
		//Cashless
		if(itemTenderView.cat == "TENDER_ELECTRONIC_PAYMENT") {
			cashless = new XML('<Cashless/>');
			stripCashlessString(cashless, xmlView.Cashless[cashlessCounter]);
			item.appendChild(cashless);
			cashlessCounter++;
		}
		xmlOut.Order.appendChild(item);
	}
	
	//##################################################################################################################
	// TIMES TAG
	//##################################################################################################################
	for each (itemViewTimes in xmlView.ViewTimes) {
		item = new XML('<Times/>');
		item.@totalTime = itemViewTimes.@totalTime;
		item.@storeTime = itemViewTimes.@storeTime;
		item.@orderTime = itemViewTimes.@orderTime;
		xmlOut.Order.appendChild(item);
		//Only one by XML
		break;
	}
	computeChildrenTotals(xmlOut);
	
	//TODO NGK: Check if this fix should be applied in Kiosk V4
	if (sessionSale.get("IS_NGK") == "true")
	{
		//Added this validation because the previous call to lIsGrillable(realIndex) may return false positives
		lNGKValidateIsGrillable(xmlOut);
	}
	
	//##################################################################################################################
	// GROUP TAGS
	//##################################################################################################################
	csoItemGroupManager.updateOrderViewItemGroups(xmlOut);
	csoItemGroupManager.addGroupsToOrderView(xmlOut);
	
	// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
	//##################################################################################################################
	// OFFERS / PROMOTIONS TAGS
	//##################################################################################################################
	if (sessionSale.get("IS_NGK") == "true")
	{
		lNGKAddOffersAndPromotionTags(xmlView, xmlOut);
	}

	// SQC-3994 - CSO - Local French Promotion - Promotion title does not show up in the order basket for promotions with only one item
	//updateSintelItemPromotions(xmlOut);
	
	return xmlOut.toXMLString();
	
	/**computeChildrenTotals
	 *
	 * @brief - Computes the VM totals.
	 * @return - xmlOut - Kiosk XML.
	 */
	function computeChildrenTotals(xmlOut) {
		for each (productLvl0 in xmlOut.Order.Item.Product) {
			var totalPrice = Number(productLvl0.@totalPrice);
			var totals = computeRecursively(productLvl0);
			productLvl0.@totalPrice	= Number(productLvl0.@totalPrice) 	+ totals[0];
			productLvl0.@totalTax	= Number(productLvl0.@totalTax) 	+ totals[1];
		}
		/***
		 * Computes its children totals.
		 */
		function computeRecursively(parent) {
			var child         = null; //PLE-283 - Merged from Australia
			var totPrice 	= 0; //grillTotals[0];
			var totTax 		= 0; //grillTotals[1];
			for each (child in parent.Product) {
				var totals 	= computeRecursively(child);
				totPrice	+= Number(child.@totalPrice)+ totals[0];
				totTax 		+= Number(child.@totalTax) 	+ totals[1];
			}
			for each (child in parent.Grill) {
				totPrice	+= Number(child.@totalPrice);
				totTax 		+= Number(child.@totalTax);
			}
			return Array(totPrice, totTax);
		}
	}
	
	/**stripCashlessString
	 *
	 * @brief - Adds the cashless attributes.
	 * @return - none
	 */
	function stripCashlessString(cashless, cashlessStr) {
		//TODO : check cashless string format
		//function ParseTrackInfo(retcode,cardType)
		//function cashlessPayment(tenderId,tenderValue,refund)
		//TODO : check the split
		
		// WWR-2554 - CYT Phase 1 - Cycle 1: Fatal Error is displayed while performing Partial Payment <using 2 gift cards and 1 credit card> transaction on Kiosk
		if (cashlessStr == undefined || cashlessStr == null || cashlessStr == "") {
			return;
		}
		
		splitStr = cashlessStr.split("@");
		if (splitStr.length < 9) {
			return;
		}
		cashless.@cardProv = splitStr[1];
		cashless.@cardNum = splitStr[2];
		cashless.@expireDt = splitStr[3];
		cashless.@authNum = splitStr[4];
		cashless.@printFlag = splitStr[5];
		cashless.@seqNum = splitStr[6];
		cashless.@gcBalance = splitStr[8];
		cashless.@accountNum = splitStr[9];
	}
	
	// SQC-3994 - CSO - Local French Promotion - Promotion title does not show up in the order basket for promotions with only one item
	//function updateSintelItemPromotions(xmlOut){
	//	var detectedProductCodes = new Array();
	//	if(xmlOut.Order != null && xmlOut.Order.Item != null){
	//		for each(item in xmlOut.Order.Item){
	//			if(item.@voided == false && csoSingleItemPromotions.indexOf(item.Product.@code.toString()) > -1){
	//				item.@canIncrease = false;
	//				detectedProductCodes.push(item.Product.@code.toString());
	//			}
	//		}
	//	}
	//	csoSingleItemPromotions = detectedProductCodes;
	//}
	
	/**
	 * @brief - Check if the given product is grillable or not. Created because lIsGrillable was returning false positives (caused by an issue in NewPos PosCanGrill function)
	 *        - Only check again the products whose customizable attribute has been set as true by the NewPos function
	 * @return - True if grillable
	 * @author - Vladimir Dobroff
	 * @since - NGK v1.0 (French pilot)
	 */
	function lNGKValidateIsGrillable(xmlOut)
	{
		var orderItems = xmlOut.Order.Item.(@voided == "false");
		
		for each(item in orderItems)
		{
			//Only check for false positives
			if (item.@customizable == "true")
			{
				var customizable = false;
			
				for each (product in item.Product)
				{
					if (!customizable)
					{
						customizable = lNGKIsGrillable(product);
					}
				}

				item.@customizable = customizable.toString();
			}
		}
		
		/**
		 * @brief - Recursevely check in the kiosk order view if a product and all it's children can be grilled.
		 *        - Check the grillable flag and if the product have any components whose quantity can be modified
		 * @return - true if grillable
		 * @author - Vladimir Dobroff
		 * @since - NGK v1.0 (French pilot)
	 	 * @modified - CSO-96 - [NGKv5.3] Unable to access grill screen for sandwich when value meal contains side and drink which are both not grillable
		 */		
		function lNGKIsGrillable(xmlOutNode)
		{
			var productCode = xmlOutNode.@code.toString();
			
			//CSO-96 - [NGKv5.3] Unable to access grill screen for sandwich when value meal contains side and drink which are both not grillable
			if (lVerifyProduct(productCode))
			{
				return true;
			}
			
			//Go to the next level of the recursion
			for each (product in xmlOutNode.Product)
			{
				if (lNGKIsGrillable(product))
				{
					return true;
				}
			}
			
			return false;
			
			function lVerifyProduct(productCode)
			{
				if (!productCode)
				{
					return false;
				}
				
				var productInfo = csoProductInfo[productCode];
			
				if (!productInfo)
				{
					return false;
				}
			
				var productXmlNode = productInfo.xmlNode;
				
				if (productXmlNode.Production.Grillable.@status != "true")
				{
					return false;
				}
				
				for each(component in productXmlNode.Composition.Component)
				{
					if (parseInt(component.MinQuantity) != parseInt(component.MaxQuantity))
					{
						return true;
					}
					
					//CSO-96 - [NGKv5.3] Unable to access grill screen for sandwich when value meal contains side and drink which are both not grillable
					var componentCode = component.ProductCode.toString();
					if (lVerifyProduct(componentCode))
					{
						return true;
					}
				}

				for each(component in productXmlNode.CanAdds.Component)
				{
					if (parseInt(component.MinQuantity) != parseInt(component.MaxQuantity))
					{
						return true;
					}
				}
				
				for each(component in productXmlNode.Comments.Component)
				{
					if (parseInt(component.MinQuantity) != parseInt(component.MaxQuantity))
					{
						return true;
					}
				}
				
				return false;
			}
		}
	}
	
	/**
	 * @brief - Calcutes and adds calories information to an item
	 * @author - Vivian Cury
	 * @param - itemXml - The item to calculate the calories
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 * @modified - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	 */
	function lAddNutritionalInformation(itemXml)
	{
		var nutritionalInfoTotalType = lGetCSOUserInterfaceStringParameter("nutritionalInfoTotalType", "");
		var nutritionalInfoAutoConvertEnergy = lGetCSOUserInterfaceStringParameter("nutritionalInfoAutoConvertEnergy", "");
		
		if (nutritionalInfoTotalType.toUpperCase() == "KCAL" ||
			nutritionalInfoTotalType.toUpperCase() == "KJ" ||
			nutritionalInfoTotalType.toUpperCase() == "KCAL|KJ" ||
			nutritionalInfoTotalType.toUpperCase() == "KJ|KCAL")
		{
			var totKCAL = new BigDecimal("0.00");
			var totKJ = new BigDecimal("0.00");
			totKCAL = totKCAL.setScale(2, BigDecimal.ROUND_HALF_EVEN);
			totKJ = totKJ.setScale(2, BigDecimal.ROUND_HALF_EVEN);
			
			for each (var product in itemXml.Product)
			{
				var codes = new Array();
				// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
				// SQC-6066 - [BYB phase 1] - Choice of BYB is displayed in the Nutritional Info popup
				var calories = lGetProductCalories(product, codes, false, true).split("|");
					
				if (calories.length == 2)
				{
					totKCAL = totKCAL.add(new BigDecimal(calories[0]));
					totKJ = totKJ.add(new BigDecimal(calories[1]));
				}
				
				// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
				for each (var prod in product.Product){
					if ((csoProductInfo[prod.@code.toString()].xmlNode.CustomEnergyInformation != null) && (csoProductInfo[prod.@code.toString()].xmlNode.CustomEnergyInformation != undefined)){
						prod.@energy = lGetCustomEnergyInformation(prod.@code.toString());
						
						// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
						if (csoProductInfo[prod.@code.toString()].hasEnergySuffix == true) prod.@customSuffix = GetProductEnergySuffix(csoProductInfo[prod.@code.toString()]);
						
						prod.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", prod.@energy);
					}
				}
			}
			
			totKCAL = totKCAL.setScale(0, BigDecimal.ROUND_HALF_EVEN);
			totKJ = totKJ.setScale(0, BigDecimal.ROUND_HALF_EVEN);
			
			if (nutritionalInfoTotalType.toUpperCase().indexOf("KCAL") > -1 &&
				totKCAL.compareTo(BigDecimal.ZERO) > 0)
			{
				itemXml.@totalKCAL = totKCAL.toString();
			}
			
			if (nutritionalInfoTotalType.toUpperCase().indexOf("KJ") > -1 &&
				totKJ.compareTo(BigDecimal.ZERO) > 0)
			{
				itemXml.@totalKJ = totKJ.toString();
			}
			
			if (nutritionalInfoTotalType.indexOf("|") > -1)
			{
				itemXml.@caloriesOrder = nutritionalInfoTotalType.toUpperCase();
			}
			
			if (nutritionalInfoAutoConvertEnergy == "KCAL" ||
				nutritionalInfoAutoConvertEnergy == "KJ")
			{
				if (nutritionalInfoAutoConvertEnergy == "KCAL")
				{
					if (totKJ.compareTo(BigDecimal.ZERO) > 0 &&
						nutritionalInfoTotalType.toUpperCase().indexOf("KCAL") != -1)
					{
						var calc = new BigDecimal(totKJ.multiply(new BigDecimal("1000")));
						calc = calc.multiply(new BigDecimal("0.239"));
						calc = calc.divide(new BigDecimal("1000"));
						calc = calc.setScale(0, BigDecimal.ROUND_HALF_EVEN);
						
						itemXml.@totalKCAL = calc.toString();
					}
					else
					{
						API.dbg("Parameter nutritionalInfoAutoConvertEnergy is set to [" + nutritionalInfoAutoConvertEnergy +
								"], but parameter nutritionalInfoTotalType is not set with its value [" + nutritionalInfoTotalType +
								"] or there is no value to convert from [" + totKJ.toString() +
								"]. The convertion will not be performed.");
					}
				}
				else if (nutritionalInfoAutoConvertEnergy == "KJ")
				{
					if (totKCAL.compareTo(BigDecimal.ZERO) > 0 &&
						nutritionalInfoTotalType.toUpperCase().indexOf("KJ") != -1)
					{
						var calc = new BigDecimal(totKCAL.multiply(new BigDecimal("1000")));
						calc = calc.multiply(new BigDecimal("4.184"));
						calc = calc.divide(new BigDecimal("1000"));
						calc = calc.setScale(0, BigDecimal.ROUND_HALF_EVEN);
						
						itemXml.@totalKJ = calc.toString();
					}
					else
					{
						API.dbg("Parameter nutritionalInfoAutoConvertEnergy is set to [" + nutritionalInfoAutoConvertEnergy +
								"], but parameter nutritionalInfoTotalType is not set with its value [" + nutritionalInfoTotalType +
								"] or there is no value to convert from [" + totKCAL.toString() +
								"]. The convertion will not be performed.");
					}
				}
			}
			else
			{
				API.dbg("Parameter nutritionalInfoAutoConvertEnergy is not set or is set with an invalid value: [" + nutritionalInfoAutoConvertEnergy + "]");
			}
		}
		else
		{
			API.dbg("Parameter nutritionalInfoTotalType is not set or is set with an invalid value: [" + nutritionalInfoTotalType + "]");
		}
		
		return true;
		
		/**
		 * @brief - Calcutes the calories information to a product
		 * @author - Vivian Cury
		 * @param - productXml - The product to calculate the calories
		 * @param - codesAdded - List of codes that were already added
		 * @param - parentIsBYB - True if parent node is BYB, false otherwise
		 * @return - String formed by KCAL information, a pipe and KJ information
		 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
		 * @modified - SQC-6066 - [BYB phase 1] - Choice of BYB is displayed in the Nutritional Info popup
		 *	     - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
		 */
		function lGetProductCalories(productXml, codesAdded, parentIsBYB, pushCode)
		{
			var totalKcal = new BigDecimal("0.00");
			var totalKj = new BigDecimal("0.00");
			totalKcal = totalKcal.setScale(2, BigDecimal.ROUND_HALF_EVEN);
			totalKj = totalKj.setScale(2, BigDecimal.ROUND_HALF_EVEN);
			
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[productXml.@code.toString()] == undefined || csoProductInfo[productXml.@code.toString()].xmlNode == undefined) {
				return null;
			}
			
			if (!parentIsBYB)
			{
				if (csoProductInfo[productXml.@code.toString()].xmlNode.@productClass == "VALUE_MEAL")
				{
					for each (var component in csoProductInfo[productXml.@code.toString()].xmlNode.Composition.Component)
					{
						var calories = lGetCalories(component.ProductCode.toString()).split("|");
							
						if (calories.length == 2)
						{
							var compQty = new BigDecimal(component.DefaultQuantity.toString());
							var calories1 = compQty.multiply(new BigDecimal(calories[0]));
							var calories2 = compQty.multiply(new BigDecimal(calories[1]));
						
							totalKcal = totalKcal.add(calories1);
							totalKj = totalKj.add(calories2);
						}
							
						codesAdded.push(component.ProductCode.toString());
					}
				}
				else if (csoProductInfo[productXml.@code.toString()].xmlNode.@productClass == "PRODUCT")
				{
					if (codesAdded.indexOf(productXml.@code.toString()) == -1)
					{
						var calories = lGetCalories(productXml.@code.toString()).split("|");
						
						if (calories.length == 2)
						{
							totalKcal = totalKcal.add(new BigDecimal(calories[0]));
							totalKj = totalKj.add(new BigDecimal(calories[1]));
						}
						
						if (pushCode)
						{
							codesAdded.push(productXml.@code.toString());
						}
					}
				}
			}
			
			var prodQty = new BigDecimal(productXml.@qty.toString());
			totalKcal = totalKcal.multiply(prodQty);
			totalKj = totalKj.multiply(prodQty);
			
			for each (var xml in productXml.Product)
			{
				var calories = lGetProductCalories(xml,
												   codesAdded,
												   (csoProductInfo[productXml.@code.toString()].isBybProduct ||
												    csoProductInfo[productXml.@code.toString()].isBybPreBuilt),
												   false).split("|");
					
				if (calories.length == 2)
				{
					totalKcal = totalKcal.add(new BigDecimal(calories[0]));
					totalKj = totalKj.add(new BigDecimal(calories[1]));
				}
			}
			
			return (totalKcal.toString() + "|" + totalKj.toString());
		}
		
		/**
		 * @brief - Gets the calories information of a product in product-db
		 * @author - Vivian Cury
		 * @param - productCode - The product to get the calories
		 * @return - String formed by KCAL information, a pipe and KJ information
		 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
		 */
		function lGetCalories(productCode)
		{
			var KCAL = "0";
			var KJ = "0";
			
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[productCode] != undefined && 
				csoProductInfo[productCode].xmlNode != undefined && 
				csoProductInfo[productCode].xmlNode.CustomParameters != null)
			{
				if (csoProductInfo[productCode].xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergy") != null)
				{
					KJ = csoProductInfo[productCode].xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergy").@value.toString();
				}
				
				if (csoProductInfo[productCode].xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoKCal") != null)
				{
					KCAL = csoProductInfo[productCode].xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoKCal").@value.toString();
				}
			}
			
			return KCAL + "|" + KJ;
		}
	}
	
	/**
	 * @brief - Verify if there is nutritional information available to an item from the view
	 * @author - Vivian Cury
	 * @param - itemXml - The item that should be verified
	 * @return - true if the item has nutritional information
			   - false otherwise
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 */
	function isNutritionalInfoAvailableOnCart(itemXml)
	{
		for each (var product in itemXml.Product)
		{
			var codes = new Array();
			// SQC-6066 - [BYB phase 1] - Choice of BYB is displayed in the Nutritional Info popup
			if (isNutritionAvailableForProduct(product, codes, false))
			{
				return true;
			}
		}
		
		return false;
		
		/**
		 * @brief - Verify if there is nutritional information available to a product
		 * @author - Vivian Cury
		 * @param - productXml - The product that should be verified
		 * @param - codesVisited - List of codes that were already verified
		 * @param - parentIsBYB - True if parent node is BYB, false otherwise
		 * @return - true if the item has nutritional information
				   - false otherwise
		 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
		 * @modified - SQC-6066 - [BYB phase 1] - Choice of BYB is displayed in the Nutritional Info popup
		 */
		function isNutritionAvailableForProduct(productXml, codesVisited, parentIsBYB)
		{
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[productXml.@code.toString()] == undefined || csoProductInfo[productXml.@code.toString()].xmlNode == undefined) {
				return false;
			}
			
			if (parentIsBYB)
			{
				return false;
			}
			
			if (csoProductInfo[productXml.@code.toString()].xmlNode.@productClass == "VALUE_MEAL")
			{
				for each (var component in csoProductInfo[productXml.@code.toString()].xmlNode.Composition.Component)
				{
					if (codesVisited.indexOf(component.ProductCode.toString()) == -1)
					{
						if (isNutritionalInfoAvailable(component.ProductCode.toString()))
						{
							return true;
						}
						
						codesVisited.push(component.ProductCode.toString());
					}
				}
			}
			else if (csoProductInfo[productXml.@code.toString()].xmlNode.@productClass == "PRODUCT")
			{
				if (codesVisited.indexOf(productXml.@code.toString()) == -1)
				{
					if (isNutritionalInfoAvailable(productXml.@code.toString()))
					{
						return true;
					}
					
					codesVisited.push(productXml.@code.toString());
				}
			}
			
			for each (var xml in productXml.Product)
			{
				if (isNutritionAvailableForProduct(xml,
												   codesVisited,
												   (csoProductInfo[productXml.@code.toString()].isBybProduct ||
												    csoProductInfo[productXml.@code.toString()].isBybPreBuilt)))
				{
					return true;
				}
			}
			
			return false;
		}
	}

	/**
	 * @brief - Add the Offers and Promotions tags to the kiosk view
	 * @author - Vladimir Dobroff
	 * @param - xmlIn - Original NewPos view
	 * @param - xmlOut - Converted kiosk view
	 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
	 *          Desired Output
	 *          <Order storedOrderKey="927395228" major="-1" minor="-1" totalAmount="7.29" totalTax="0.58" totalDue="7.87" saleDate="20140902" saleTime="095506" status="1" trackStatus="0" saleType="1" businessDate="20140902">
	 *            ...
	 *            <Offers>
	 *              <Offer offerId="5423" applied="true" promotionId="632" promotionCounter="0" memberIndexes="0|1" offerName="[US] Buy one, get one Big Mac (Only)" currentSelected="false"/>
	 *            </Offers>
	 *            <Promotions>
	 *              <Promotion id="100" counter="0" memberIndexes="2|3" promotionName="[US] Buy one, get one Big Mac (Only)" currentSelected="false"/>
	 *              <Promotion id="100" counter="1" memberIndexes="2|3" promotionName="[US] Buy one, get one Big Mac (Only)" currentSelected="false"/>
	 *              <Promotion id="200" counter="0" memberIndexes="" promotionName="[US] Buy one, get one Big Mac (Only)" currentSelected="false"/>
	 *            </Promotions>
	 *          </Order>
	 */
	function lNGKAddOffersAndPromotionTags(xmlIn, xmlOut)
	{
		if (xmlIn.Offers.length() > 0)
		{
			//Create the Offers Tag
			var offersRoot = new XML('<Offers/>');

			for each (var offer in xmlIn.Offers)
			{
				// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
				var isOfferAdded = false;
				var lastValidOffer = null;
				
				for each (var promotion in xmlIn.Promotions.Promotion)
				{
					var offerNode = new XML('<Offer/>');
				
					offerNode.@offerId = offer.@offerId.toString();
					offerNode.@applied = offer.@applied.toString();
					
					offerNode.@promotionId = offer.@promotionId.toString();
					offerNode.@promotionCounter = "0";
					offerNode.@memberIndexes = "";
					
					var isPromoFound = false;
					//Check if there is a promotion associated with this offer
					if (promotion.@id.toString() == offer.@promotionId.toString() &&
						promotion.@offerId.toString() == offer.@offerId.toString())
					{
						isPromoFound = true;
						offerNode.@promotionCounter = promotion.@counter.toString();
						
						var memberIndexes = lGetPromotionMemberIndexes(promotion.@id.toString(), promotion.@counter.toString(), xmlIn, xmlOut);
						offerNode.@memberIndexes = memberIndexes;
					}
					
					offerNode.@offerName = PosGetCurrentOfferDetail("TITLE");
					// NPS-14854 - Kiosk analytics	
					offerNode.@defaultLanguageOfferName = PosGetCurrentOfferDetail("TITLE", sessionSale.get("DEFAULT_LANGUAGE"));
					
					if (csoItemGroupManager &&
						(csoItemGroupManager.selectedGlobalPromoId  == offerNode.@promotionId.toString()) &&
						(csoItemGroupManager.selectedGlobalPromoCounter == offerNode.@promotionCounter.toString()))
					{
						offerNode.@currentSelected = "true";
					}
					else
					{
						offerNode.@currentSelected = "false";
					}
					
					if (isPromoFound){
						isOfferAdded = true;
						offersRoot.appendChild(offerNode);
					}
					lastValidOffer = offerNode;
				}
				if (!isOfferAdded){
					offersRoot.appendChild(lastValidOffer);
				}
			}
			xmlOut.Order.appendChild(offersRoot);
		}
		
		if (xmlIn.Promotions.Promotion.length() > 0)
		{
			//Create the Promotions Tag
			var promotionsRoot = new XML('<Promotions/>');
			
			for each (var promotion in xmlIn.Promotions.Promotion)
			{
				//Check if the promotion is associated with an offer
				//If it is associated, it will be already added in the Offers tag
				if ((promotion.@offerId == null) || (promotion.@offerId == undefined) || (promotion.@offerId.toString() == "-1"))
				{
					var promoNode = new XML('<Promotion/>');
					
					promoNode.@promotionId = promotion.@id.toString();
					promoNode.@counter = promotion.@counter.toString();
					
					var memberIndexes = lGetPromotionMemberIndexes(promotion.@id.toString(), promotion.@counter.toString(), xmlIn, xmlOut);
					promoNode.@memberIndexes = memberIndexes;
					
					promoNode.@promotionName = promotion.@promotionName.toString();
					
					if (csoItemGroupManager &&
						(csoItemGroupManager.selectedGlobalPromoId  == promoNode.@promotionId.toString()) &&
						(csoItemGroupManager.selectedGlobalPromoCounter == promoNode.@counter.toString()))
					{
						promoNode.@currentSelected = "true";
					}
					else
					{
						promoNode.@currentSelected = "false";
					}
					
					promotionsRoot.appendChild(promoNode);
				}
			}
	
			if (promotionsRoot.Promotion.length() > 0)
			{
				xmlOut.Order.appendChild(promotionsRoot);
			}
		}
		
		// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
		var reservedDealsRoot = new XML('<ReservedDeals/>');
		var hasElements = false;
		var reservedCounter = 0;
		
		if (xmlIn.ReservedPromotions != null && xmlIn.ReservedPromotions != undefined ){
			hasElements = true;
			reservedDealsRoot.ReservedPromotions.@ids = xmlIn.ReservedPromotions.@ids;
			reservedCounter += xmlIn.ReservedPromotions.@ids.toString().split("|").length;
		}
				
		if (xmlIn.ReservedOffer != null && xmlIn.ReservedOffer != undefined){
			hasElements = true;
			reservedDealsRoot.ReservedOffer.@promotionId = xmlIn.ReservedOffer.@promotionId;
			reservedCounter++;
		}
		
		if (hasElements == true){
			reservedDealsRoot.@reservedDealsCounter = reservedCounter;
			xmlOut.Order.appendChild(reservedDealsRoot);
		}

		/**
		 * @brief - Return the indexes of the items that are grouped in a particular promotion
		 * @author - Vladimir Dobroff
		 * @param - promotionId - promotion identifier
		 * @param - promotionCounter - promotion counter
		 * @param - xmlIn - Original NewPos view
		 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
		 */
		function lGetPromotionMemberIndexes(promotionId, promotionCounter, xmlIn, xmlOut)
		{
			var memberIndexes = "";
		
			for each (var itemView in xmlIn.ItemView)
			{
				var itemLevel = Number(itemView.level.toString());
			
				if ((itemLevel == 0) && (itemView.PromotionApplied.length() > 0))
				{
					if (itemView.PromotionApplied[0].@promotionId.toString() == promotionId && 
					    itemView.PromotionApplied[0].@promotionCounter.toString() == promotionCounter)
					{
						var item = xmlOut.Order.Item.(@indexInternal == itemView.itemCode.toString());
						
						if (item.length() > 0)
						{
							if (memberIndexes == "")
							{
								memberIndexes = item.@index.toString();
							}
							else
							{
								memberIndexes += "|" + item.@index.toString();
							}
						}
					}
				}
			}
			
			return memberIndexes;
		}
	}	
}

/**
 * @brief - Verify if a given choice code is an auto choice
 * @param - choiceCode - Code of the choice to be verified
 * @return - true if the choice is an auto choice, false otherwise
 * @author - Vivian Cury
 * @since - CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
 */
function bIsSingleAutoChoice(choiceCode)
{
	if (!choiceCode || !csoProductInfo[choiceCode])
	{
		return false;
	}
	
	var choiceInfo = csoProductInfo[choiceCode];
	
	if (choiceInfo.xmlNode.Composition)
	{
		var countPossibleFillers = 0;
		var isAutoChoice = false;
		
		for each (var choiceFiller in choiceInfo.xmlNode.Composition.Component)
		{
			var choiceFillerCode = choiceFiller.ProductCode.toString();
			
			if (choiceFillerCode &&
				csoProductInfo[choiceFillerCode] &&
				csoProductInfo[choiceFillerCode].isValid &&
				lIsProductPriceNodeValid(choiceFillerCode) &&
				!csoProductInfo[choiceFillerCode].removeFromMOT)
			{
				countPossibleFillers++;
			
				if ((new BigDecimal(choiceFiller.DefaultQuantity.toString())).compareTo(BigDecimal.ZERO) > 0)
				{
					isAutoChoice = true;
				}
			}
		}
		
		if (isAutoChoice && countPossibleFillers == 1)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	return false;
}

/**
 * @brief - Clones items of an item group
 * @author - Ferenc Balassa
 * @since - SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
 */
function PosCSODoCloneItemGroupJS(groupId){
	var group = csoItemGroupManager.getOrderViewItemGroup(groupId);
	
	csoItemGroupManager.isOrderGroupCloning = true;
	var usedIndexes = new Array();
	var usedProductCodes = new Array();
	var i;
	var m = group.members;
	var itemCloned = false;
	for(i = m.length - 1; i >= 0; i--){
		if(usedIndexes.indexOf(m[i].index) == -1  && usedProductCodes.indexOf(m[i].code) == -1){
			usedIndexes.push(m[i].index);
			usedProductCodes.push(m[i].code);
			if(PosCSODoCloneItemJS(m[i].index, null)){
				itemCloned = true;
			}
		}
	}

	if(itemCloned){
		csoItemGroupManager.duplicateOrderViewItemGroup(group);
	}
	
	csoItemGroupManager.isOrderGroupCloning = false;
	
	return true;
}

/**
 *
 * @brief - Clones a given item.
 * @return - TRUE - when well succeeded.
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoCloneItemJS(ItemIndex, barcode){
 
	if (Number(ItemIndex) < 0) {
		API.dbg("CSO - PosCSOCloneItemJS: Invalid ItemIndex (ItemIndex=[" + ItemIndex + "])");
		return false;
	}
	
	var hlp = new BusinessObjectHelper;
	var orderView = new XML(hlp.getCurrentView());
	
	var kioskOrderView = new XML(getKioskView(orderView.toString()));	
	var orderItem = kioskOrderView.Order.Item.(@index == ItemIndex);
	
	if (orderItem.length() != 1) {
		API.dbg("CSO - PosCSOCloneItemJS: Could not find the desired item on order view (ItemIndex=[" + ItemIndex + "])");
		return false;
	}
	
	// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
	// PosSaleIncrementItem function is available since 6.1.19.x.
	if (typeof(PosSaleIncrementItem) == "function" && sessionSale.get("IS_NGK") == "true") {
		KioskViewHelper.PosDoSelIndex(ItemIndex);
		return PosSaleIncrementItem(1);
	}
	
	var orderProduct = orderItem.Product[0];
	var selChoices = lGetSelectedChoices(orderProduct, true, true);
	var cloneList = orderProduct.@code.toString() + (selChoices.length == 0 ? "" : "|" + selChoices.join("|").toString());
	
	//SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
	csoItemGroupManager.isItemCloning = true;
	var cloneItemSuccess = lCloneItemJS(cloneList, barcode, ItemIndex);
	csoItemGroupManager.isItemCloning = false;
	
	return cloneItemSuccess;
}

/**
 *
 * @brief - Clones a given sale item based on the products list.
 * @return - TRUE - when well succeeded.
 * @author - Kalil
 */
function lCloneItemJS(LstProducts, LstBarcodes, ItemIndex) {

	var view = getKioskView(hlp.getCurrentView());
	var xmlView = new XML(view);
	var hasStartGrill = false;

	if (PosCSODoSaleJS(LstProducts, LstBarcodes)) {
		// SDO-7058 - Kiosk V4RC12 - the Incorrect item added when button (+) is pressed. Item is a Value Meal with Grill
		lSelectItemAfterSell(xmlView);
		
		for each(itemView in xmlView.Order.Item) {
			if (ItemIndex == itemView.@index) {
				for each(product in itemView.Product) {
					searchGrillProduct(product);			
					searchGrillProduct(product.Product);			
				}
				if (hasStartGrill) {
					if (!PosDoGrillEnd("3")) {
						PosShowMessage("CLONE: Could not finish the grill");
						return false;
					}
				}
			}
		}
		
		if (sessionSale.get("IS_NGK") == "true")
		{
			lSelectItemAfterGrill(xmlView, ItemIndex);
		}
	}
	return true;
	
	/**searchGrillProduct
	 *
	 * @brief - Searches for the grilled items.
	 * @return - none.
	 * @author - Kalil
	 */	
	function searchGrillProduct(productNode) {
		for each(grillNode in productNode.Grill) {
			if (!hasStartGrill) {
				hasStartGrill = true;
				if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId"))) {
					PosShowMessage("CLONE: Could not start grill");
					return false;
				}
			}
			grillClone(grillNode);
		}
	}
	
	/**grillClone
	 *
	 * @brief - Performs the grill clone.
	 * @return - none.
	 * @author - Kalil
	 * @modified - CSO-151 - Kiosk V4 / Kiosk V5 - Incrementing the quantity of a product with portion based customization may affect other products in the order basket
	 */	
	function grillClone(grillNode) {
		var parentCode  	= grillNode.parent().@code;
		var grillCode 		= grillNode.@code;
		var grillDefQty 	= Number(grillNode.@defQty);
		var grillCurQty 	= Number(grillNode.@qty);
		var grillDifQty		= Number(grillNode.@modQty);
		var grillModifier	= Number(grillNode.@modifiers);
		var tabIndex		= getTabIndex(parentCode);
		
		if (tabIndex == null) {
			PosShowMessage("CLONE: Could not find tab for code parent=" + parentCode + ", Grill code=" + grillCode + ", name=" + grillNode.parent().@name);
		} else {
			if (!PosDoSelGrillIndex(tabIndex)) {
				PosShowMessage("CLONE: Could not selected tab index " + tabIndex + " for code " + parentCode);
			} else {
				var recipeIndex = getRecipeIndex(grillCode);
				if (recipeIndex == -1) {
					PosShowMessage("CLONE: Could not recipe index for code " + grillCode);
				} else {
					// PLE-283 - Merged from Australia
                    if (grillModifier == 1) {                                // MODIFIER (LIGHT)
                            //CSO-151 - Kiosk V4 / Kiosk V5 - Incrementing the quantity of a product with portion based customization may affect other products in the order basket
                            //If the modifier is set without reseting the quantity, other products of the order basket may be affected by the grill operation
							PosDoGrillOper('c','-1',recipeIndex);
							//Also, the modifier equal to one doesn't mean that the quantity hasn't been modified.
							//CanAdds set as light have the modifier set as one and quantity modified
							if (grillDifQty > 0) {                           // PLUS QUANTITY
								for (var y=1 ;y<=grillDifQty;y++) {
									PosDoGrillOper('p','-1',recipeIndex);
								}
							} else if (grillDifQty < 0) {                    // MINUS QUANTITY
								for (var y=1 ;y<=(grillDifQty*-1);y++) {
									PosDoGrillOper('m','-1',recipeIndex);
								}
							}
                            PosDoGrillOper('0','1',recipeIndex);
                    } else if (grillModifier == 2) {                        // MODIFIER (ONLY)
                            PosDoGrillOper('0','2',recipeIndex);
                    } else if (grillModifier == 0) {                        // NO MODIFIER (only quantity was changed)
                        if (grillDifQty > 0) {                                // PLUS QUANTITY
                            for (var y=1 ;y<=grillDifQty;y++) {
                                PosDoGrillOper('p','-1',recipeIndex);
                            }
                        } else if (grillDifQty < 0) {                        // MINUS QUANTITY
                            for (var y=1 ;y<=(grillDifQty*-1);y++) {
                                PosDoGrillOper('m','-1',recipeIndex);
                            }
                        }
                    } else {
                        // We expects only MODIFIERS 0, 1 or 2.
                        PosShowMessage("CLONE: Unexpected grill modifier on product code: " + grillCode);   
                    }
				}
			}
		}
		
		/**getRecipeIndex
		 *
		 * @brief - Gets the recipe index based on the given product code.
		 * @return - recipe index.
		 */			
	 	function getRecipeIndex(productCode) {
			// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
			var xmlView = lGetGrillView();
			for each(grillComp in xmlView.Component) {
				for each(recipe in grillComp.Item) {
					if (recipe.@code == productCode) {
						return Number(recipe.@index);
					}
				}
			}
			return -1;
		}
		
		/**getTabIndex
		 *
		 * @brief - Gets the tab index based on the given product code.
		 * @return - tab index.
		 */			
		function getTabIndex(productCode) {
			// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
			var xmlView = lGetGrillView();
			for each(var grillComp in xmlView.Component) {
				if (grillComp.@code == productCode) {
					return grillComp.@index;
				}
			}
			return null;
		}
	}
	
	/**
	 * @brief - Function created because of a NewPos issue regarding the selected item in the order basket after PosDoSale and Grill operations.
	 *        - NewPos not always select the correct item after a PosDoSale. The last sold item should be the selected one, but it is not always true.
	 *          Because of this issue the process to increment the quantity of a grilled item may fail, and the wrong item will be incremented instead.
	 *          To fix this issue without modifiyng NewPos this function has been created. The idea is to analyse the order view before and after the PosDoSale,
	 *          and by comparing the item quantities find the one that should be selected.
	 * @return - true, if selected an item, false otherwise
	 * @author - Vladimir
	 * @since - SDO-7058 - Kiosk V4RC12 - the Incorrect item added when button (+) is pressed. Item is a Value Meal with Grill
	 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 *           - Fixed an issue when comparing items with CanAdds and modifiers
	 *           - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
	 *           - Fixed an issue with the Offers, Global Promotions and Item discount view modifications
	 */
	function lSelectItemAfterSell(previousKioskOrderView)
	{
		var currentKioskOrderView = new XML(getKioskView(hlp.getCurrentView()));

		for each(var currentItem in currentKioskOrderView.Order.Item)
		{
			var index = Number(currentItem.@index);
			
			// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
			if ((index >= 0) && (currentItem.@hasDiscount != "true") && (currentItem.@hasPromo != "true"))
			{
				var foundSimilarItem = false;
				for each (var previousItem in previousKioskOrderView.Order.Item)
				{
					// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
					if ((previousItem.@hasDiscount != "true") && (previousItem.@hasPromo != "true") &&
						!foundSimilarItem && lIsItemSimilar(currentItem, previousItem))
					{
						//Check if the quantity has increased, otherwise it is not the correct item
						if ((Number(currentItem.Product[0].@npQtyMult.toString()) > Number(previousItem.Product[0].@npQtyMult.toString())))
						{
							KioskViewHelper.PosDoSelIndex(index);
							
							//Found the item whose quantity has been incremented, finish the search
							return true;
						}
						else
						{
							foundSimilarItem = true;
						}
					}
				}
				
				//If didn't find any similar item in the previous view, the current item is the one that has been incremented
				if (!foundSimilarItem)
				{
					KioskViewHelper.PosDoSelIndex(index);			
					return true;
				}
			}
		}
		
		return false;
	}

	/**
	 * @brief - Function created because of a NewPos issue regarding the the selected item in the order basket after PosDoSale and Grill operations.
	 *        - When the increment process is finished, it is not guaranteed that the incremented item wil be the selected one.
	 *        - Created this function to select the correct product after the process is finished.
	 * @author - Vladimir
	 * @since - SDO-7058 - Kiosk V4RC12 - the Incorrect item added when button (+) is pressed. Item is a Value Meal with Grill
	 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 *           - Fixed an issue when comparing items with CanAdds and modifiers
	 *           - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
	 *           - Fixed an issue with the Offers, Global Promotions and Item discount view modifications
	 */
	function lSelectItemAfterGrill(previousKioskOrderView, itemIndex)
	{		
		var hlp = new BusinessObjectHelper;
		var currentKioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		
		//Get the selected item before the increment operation has started, 
		//(before the doSale and grill operations to duplicate the item)
		var previousSelectedItem = previousKioskOrderView.Order.Item.(@index == itemIndex);
		
		if ((previousSelectedItem != undefined) && (previousSelectedItem != null) && (previousSelectedItem.length() > 0))
		{
			var currentItems = currentKioskOrderView.Order.Item;
			
			//Search for a similar item in the order view after the increment operation has been finished, 
			//(after the doSale and grill operations to duplicate the item)
			for each (var currentItem in currentItems)
			{
				// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
				if ((currentItem.@hasDiscount != "true") && (currentItem.@hasPromo != "true") &&
				    lIsItemSimilar(previousSelectedItem[0], currentItem))
				{
					var index = Number(currentItem.@index);
					if (index >= 0)
					{
						KioskViewHelper.PosDoSelIndex(index);
						return true;
					}
					return false;
				}
			}
		}
		
		return false;
	}
}

/**
 * @brief - Function created because of a NewPos issue regarding the the selected item in the order basket after PosDoSale and Grill operations.
 *        - Function to check it two items from the Kiosk Order View have a similar structure.
 *        - The items have a similar structure when both have the same quantity of product and grill nodes, distributed in the same hierarchy. 
 *			The nodes proportion must be the same as well so, in the example below, both items have a similar structure:
 *
 *          <Item voided="false" qtyPromo="0" currentSelected="true" indexInternal="11" customizable="true" barcode="" isRedeemable="false" canIncrease="true" index="11">
 *   	      <Product qty="2" code="2581" unitPrice="5.80" unitTax="0.38" totalPrice="11.6" totalTax="5.62" name="Maxi Best Of Big Mac" cartImage="" origQty="2">
 *     		    <Product qty="2" code="9317" unitPrice="0" unitTax="0.00" totalPrice="0.00" totalTax="0.00" name="Coca Cola 50cl." cartImage="" origQty="1"/>
 *     	    </Item>
 *  
 *          <Item voided="false" qtyPromo="0" currentSelected="true" indexInternal="11" customizable="true" barcode="" isRedeemable="false" canIncrease="true" index="11">
 *            <Product qty="1" code="2581" unitPrice="5.80" unitTax="0.38" totalPrice="11.6" totalTax="5.62" name="Maxi Best Of Big Mac" cartImage="" origQty="1">
 *              <Product qty="1" code="9317" unitPrice="0" unitTax="0.00" totalPrice="0.00" totalTax="0.00" name="Coca Cola 50cl." cartImage="" origQty="1"/>
 *          </Item>	  
 *
 * @param - xmlNode1 - first item node (xml node from the kiosk view)
 * @param - xmlNode2 - second tem node (xml node from the kiosk view)
 * @return - TRUE when the items have a similar structure, FALSE othewise.
 * @author - Vladimir
 * @since - SDO-7058 - Kiosk V4RC12 - the Incorrect item added when button (+) is pressed. Item is a Value Meal with Grill
 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 *           - Fixed an issue when comparing items with CanAdds and modifiers
 */
function lIsItemSimilar(xmlNode1, xmlNode2)
{	
	if (xmlNode1 == null || xmlNode2 == null)
	{
		API.dbg("Warning: lIsItemSimilar - node is null");
		return false;
	}

	//Check if it is comparing the first level node
	if (xmlNode1.name() == "Item" && xmlNode2.name() == "Item")
	{
		if (xmlNode1.Product.length() != xmlNode2.Product.length())
		{
			return false;
		}
		
		for (var i = 0; i < xmlNode1.Product.length(); i++)
		{
			//Go to the next level
			if (!lIsItemSimilar(xmlNode1.Product[i], xmlNode2.Product[i]))
			{
				return false;
			}
		}
		
		return true;
	}

	if (xmlNode1.@code.toString() != xmlNode2.@code.toString())
	{
		return false;
	}
	
	if (xmlNode1.Product.length() != xmlNode2.Product.length())
	{
		return false;
	}
	
	if (xmlNode1.Grill.length() != xmlNode2.Grill.length())
	{
		return false;
	}
	
	var parentQuantity1 = xmlNode1.@npQtyMult.toString() ? Number(xmlNode1.@npQtyMult.toString()) : 1;
	if (parentQuantity1 < 1) parentQuantity1 = 1;
	
	var parentQuantity2 = xmlNode2.@npQtyMult.toString() ? Number(xmlNode2.@npQtyMult.toString()) : 1;
	if (parentQuantity2 < 1) parentQuantity2 = 1;
	
	for (var i = 0; i < xmlNode1.Product.length(); i++)
	{
		var currentQuantity1 = xmlNode1.Product[i].@npQtyMult.toString() ? Number(xmlNode1.Product[i].@npQtyMult.toString()) : 1; 
		var currentQuantity2 = xmlNode2.Product[i].@npQtyMult.toString() ? Number(xmlNode2.Product[i].@npQtyMult.toString()) : 1;
		
		//Check parent / child proportion
		//If it is not the same, the items are different
		if ((currentQuantity1 / parentQuantity1) != (currentQuantity2 / parentQuantity2))
		{
			return false;
		}
		
		//Go to the next level
		if (!lIsItemSimilar(xmlNode1.Product[i], xmlNode2.Product[i]))
		{
			return false;
		}
	}
	
	for (var i = 0; i < xmlNode1.Grill.length(); i++)
	{
		var currentQuantity1 = xmlNode1.Grill[i].@npQtyMult.toString() ? Number(xmlNode1.Grill[i].@npQtyMult.toString()) : 1;
		var currentQuantity2 = xmlNode2.Grill[i].@npQtyMult.toString() ? Number(xmlNode2.Grill[i].@npQtyMult.toString()) : 1;
	
		//Check proportion
		if ((currentQuantity1 / parentQuantity1) != (currentQuantity2 / parentQuantity2))
		{
			return false;
		}
	
		if (xmlNode1.Grill[i].@modifiers.toString() != xmlNode2.Grill[i].@modifiers.toString())
		{
			return false;
		}
	
		if (!lIsItemSimilar(xmlNode1.Grill[i], xmlNode2.Grill[i]))
		{
			return false;
		}
	}
	
	return true;
}

/**
 *
 * @brief - Execute grill operations for a particular product without using the NewPos grill APIs.
 *          Basically replicate the grill operations provided by NewPos and cache the result in a script global variable.
 *          Used with the new PDP (Product Detail Page) screen so that the grill operations can be performed before selling a product.
 *
 *          For each executed operation a xml message will be sent to the UI representing the current grill state. Below some samples:
 *
 *          View for START, ADD, REMOVE, PLAIN and DEFAULT operations:
 *
 *            <Event type="ASYNC" name="DLG_SYS_SHOW_GRILL">
 *              <GrillInfo>
 *                <Component index="0" code="99900006" name="Big Mac Full Grill" backgroundImage="gui_fr_main_bigmac1.png" containerType="SANDWICH" maxExtraIngredients="2" isSelected="true" unitPrice="3.80" energy="0">
 *                  <Item index="0" type="Composition" code="90000001" name="Viande" text="Viande" chargeThreshold="1" refundThreshold="0" unitPrice="0.30" defQty="1" minQty="0" maxQty="1" canSetLight="true" canSetOnly="true" singular="" plural="" image="grill_patty.png" isContainer="false" curQty="1" modifiers="0" isDefaultQty="true" quantityText="1" calloutQuantityText="1" />
 *                  ...
 *                  <Item index="4" type="Composition" code="90000042" name="Ketchup" text="Ketchup" chargeThreshold="1" refundThreshold="0" unitPrice="0.05" defQty="1" minQty="0" maxQty="2" canSetLight="true" canSetOnly="true" singular="" plural="" image="grill_ketchup.png" isContainer="false" curQty="1" modifiers="0" isDefaultQty="true" quantityText="" calloutQuantityText="Ordinaire" />
 *                </Component>
 *              </GrillInfo>
 *            </Event>
 *
 *            Notes: The view format / attributes have been based on the view generated by the regular grill process.
 *                   Contain all the customizable options with the exception of the ones that have been filtered by 
 *                   parameters (such as hideCanAddsOnGrillScreen, DisplayOnCSO, etc..) or that should not be displayed
 *                   for the customer (such as Monopoly comment, Delivery later comment depending on the sale type, etc...)
 * 
 *          View for FINISH and CANCEL:
 *
 *            <Event type="ASYNC" name="DLG_SYS_GRILL_RESULT">
 *              <Product code="99900006" grillOperations="90000030,4;90000042,1,PORTION_BASED">
 *                <Grill code="90000030" qty="4" modifiers="0" defQty="3" maxQty="5" minQty="0" unitPrice="0.20" text="- Extra 1 Fromage" />
 *                <Grill code="90000042" qty="0" modifiers="0" defQty="1" maxQty="2" minQty="0" unitPrice="0.05" text="- No Ketchup" />
 *                <Grill code="90000051" qty="1" modifiers="0" defQty="0" maxQty="1" minQty="0" unitPrice="0.40" text="- Ajouter 1 Bacon" />
 *                <Grill code="80000001" qty="1" modifiers="0" defQty="0" maxQty="1" minQty="0" unitPrice="0.00" text="- Half Cut" />
 *              </Product>
 *            </Event>
 *
 *            Notes: The view format / attributes have been based on the view generated for the order basket.
 *                   Contain all the customizable options that have been changed in comparison to the default recipe.
 *                   Also added an additional attribute called grillOperations that contains all the grill commands that 
 *                   should be executed in the product (to be used with the inject order protocol)
 *
 * @param - operation - one of the following operations:
 *          - START - initialize the process and send the initial data to be displayed in the grill screen
 *          - FINISH - Apply the changes and send the resulting data to be displayed outside the grill screen
 *          - CANCEL - Discard the changes and send the resulting data to be displayed outside the grill screen
 *          - ADD - Increment the ingredient quantity and send the updated data to be displayed in the grill screen
 *          - REMOVE - Decrement the ingredient quantity and send the updated data to be displayed in the grill screen
 *          - PLAIN - Decrement the quantity of all the ingredients not marked as plain to the minimum quantity and send the updated data to be displayed in the grill screen
 *          - DEFAULT - Reset all the ingredients to the default quantity and send the updated data to be displayed in the grill screen
 *
 * @param - index - product code or grill item index, depending on the executed operation:
 *                - START: index should be a product code
 *                - ADD or REMOVE: index should be the grill item index (retrieved from the DLG_SYS_SHOW_GRILL message)
 *                - OTHER: index will be ignored
 *
 * @param - currentGrill - Used when the operation is set as START. Define the initial grill state.
 *                       - If not defined the default quantities will be used.
 *                       - Protocol: "INPROGRESS:GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;...|APPLIED:GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;..."
 *                       - Where: INPROGRESS - Represent the cached grill state, not yet applied in the order basket
 *                                APPLIED - Represent the grill state recovered from the order basket
 *                       
 *                       - Samples: "INPROGRESS:99900006,4,0;90000042,1,1"
 *                                  "INPROGRESS:99900006,4,0;90000042,1,1|APPLIED:99900006,2,0;90000042,1,0"
 *
 *                       - Additional note1: Do not use the portion based dictionary to mount the string for portion based items.
 *                                           Regardless of the item type (portion based or regular) send the current quantity and modifier.
 *
 *                       - Additional note2: The INPROGRESS and APPLIED information is necessary because the grillOperations attribute
 *                                           is generated based on the difference between the order basket state and the current state.
 *                                           This is required to comply with the inject order protocol.
 *
 * @param - costInclusive - Used when the operation is set as START. Define if the product that will be customized has it's cost already
 *                          included in another product.
 *                          If not defined, the default value will be "false"
 *
 * @param - silentMode (optional) - end the helper function without calling the PosSendUICmd
 *
 * @return - true for success or false for failure.
 * @author - Vladimir
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function PosNGKGrillExecuteOperation(operation, index, currentGrill, costInclusive, silentMode)
{
	var success = false;
	var bSilentMode = false;
	
	if((silentMode)&&("true"==silentMode.toLowerCase())) {
		bSilentMode=true;
	}
	
	switch(operation)
	{
		case "START":
			success = lProcessStart(index, currentGrill, costInclusive, bSilentMode);
			break;
			
		case "FINISH":
			success = lProcessFinish(bSilentMode);
			break;
			
		case "CANCEL":
			success = lProcessCancel(bSilentMode);
			break;
			
		case "ADD":
			success = lProcessAddRemove(index, "+", bSilentMode);
			break;
			
		case "REMOVE":
			success = lProcessAddRemove(index, "-", bSilentMode);
			break;
			
		case "PLAIN":
			success = lProcessPlain(bSilentMode);
			break;
			
		case "DEFAULT":
			success = lProcessDefault(bSilentMode);
			break;
			
		default:
			API.dbg("PosNGKGrillExecuteOperation - Invalid operation: " + operation);
	}
	
	if (!success)
	{
		GLOBAL_NGK_GRILL_LAST_EVENT=null;
		API.dbg("PosNGKGrillExecuteOperation - Failed. Parameters: operation:" + operation + "|index:" + index + "|currentGrill:" + currentGrill + "|costInclusive:" + costInclusive);
	}
	
	return success;
	
	/**
	 * @brief - Function to start the customization process
	 * @param - index - product code that will be customized.
	 * @param - currentGrill - define the initial customization state of the product. Protocol detailed in PosNGKGrillExecuteOperation.
	 * @param - costInclusive - define if the product that will be customized has it's cost already included in another product.
	 * @param - silentMode - end the helper function without calling the PosSendUICmd
	 * @return - true for success or false for failure. If successful, will send a DLG_SYS_SHOW_GRILL message to the UI.
	 * @author - Vladimir
	 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	 */
	function lProcessStart(index, currentGrill, costInclusive, silentMode)
	{
		var productCode = index;
		
		if (productCode && csoProductInfo[productCode])
		{			
			var initialGrill = null;
			var appliedGrill = null;
			
			//Try to retrieve the initial grill information from currentGrill
			//Protocol: "INPROGRESS:GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;...|APPLIED:GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;..."
            //Where: INPROGRESS - Represent the cached grill state, not yet applied in the order basket
            //       APPLIED - Represent the grill state recovered from the order basket
			if (currentGrill)
			{
				var currentGrillArray = currentGrill.split("|");
				for each(var grillInfo in currentGrillArray)
				{
					var grillInfoArray = grillInfo.split(":");
					
					if (grillInfoArray.length > 1)
					{	
						if (grillInfoArray[0] == "INPROGRESS")
						{
							initialGrill = grillInfoArray[1];
						}			
						if (grillInfoArray[0] == "APPLIED")
						{
							appliedGrill = grillInfoArray[1];
						}
					}
				}
			}
			
			var defaultGrillView = lGetGrillViewFromProductCode(productCode, null, costInclusive);
			var initialGrillView = lGetGrillViewFromProductCode(productCode, initialGrill, costInclusive);
			
			if (defaultGrillView && initialGrillView)
			{
				//Duplicate the initial grill view with new XML(), otherwise changes in the current view would affect the initial view
				var currentGrillView =  new XML(initialGrillView);
				//If the product is not in the order basket yet it should be null, since there are no applied grill operations
				var appliedGrillView = appliedGrill ? lGetGrillViewFromProductCode(productCode, appliedGrill, costInclusive) : null;
				
				GLOBAL_NGK_GRILL = {
					defaultState: defaultGrillView, // State where all the ingredients have the default quantity
					initialState: initialGrillView, // State corresponding to the moment the grill screen has been displayed
					currentState: currentGrillView, // State containing the current modifications done inside the grill screen
					appliedState: appliedGrillView, // State in the order basket, if the product has already been sold
					productCode: productCode,
					costInclusive: costInclusive
				};
				
				var eventXml = new XML('<Event type="ASYNC" name="DLG_SYS_SHOW_GRILL"/>');
				eventXml.appendChild(new XML(currentGrillView));
				GLOBAL_NGK_GRILL_LAST_EVENT=eventXml;
				if(silentMode) {
					return true;
				}
				else {
					return PosSendUICmd(eventXml.toXMLString());
				}
			}
		}
		
		return false;
	}	
	
	/**
	 * @brief - Function to finish the customization process (changes will be applied)
	 * @param - silentMode - end the helper function without calling the PosSendUICmd
	 * @return - true for success or false for failure. If successful, will send a DLG_SYS_GRILL_RESULT message to the UI.
	 * @author - Vladimir
	 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	 */
	function lProcessFinish(silentMode)
	{
		if (GLOBAL_NGK_GRILL)
		{
			// CSD-3 - Calories incorrect in PDP screen, after selecting Button "Make it Default" and then cancel customization
			var eventXml = lCreateGrillResultXML(GLOBAL_NGK_GRILL.currentState, false);
			GLOBAL_NGK_GRILL = null;
			GLOBAL_NGK_GRILL_LAST_EVENT=eventXml;
			if(silentMode) {
				return eventXml;
			}
			else {
				return PosSendUICmd(eventXml.toXMLString());
			}
		}
		
		return false;
	}
	
	/**
	 * @brief - Function to cancel the customization process (changes will be discarded)
	 * @param - silentMode - end the helper function without calling the PosSendUICmd
	 * @return - true for success or false for failure. If successful, will send a DLG_SYS_GRILL_RESULT message to the UI.
	 * @author - Vladimir
	 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	 */
	function lProcessCancel(silentMode)
	{
		if (GLOBAL_NGK_GRILL)
		{
			// CSD-3 - Calories incorrect in PDP screen, after selecting Button "Make it Default" and then cancel customization
			var eventXml = lCreateGrillResultXML(GLOBAL_NGK_GRILL.initialState, true);
			GLOBAL_NGK_GRILL = null;
			GLOBAL_NGK_GRILL_LAST_EVENT=eventXml;
			if(silentMode) {
				return true;
			}
			else {
				return PosSendUICmd(eventXml.toXMLString());
			}
		}
		
		return false;
	}
	
	/**
	 * @brief - Function to increment or decrement a particular ingredient (regular or portion based)
	 * @param - index - grill item index retrieved from DLG_SYS_SHOW_GRILL.
	 * @param - operation - "+" or "p" - increment
	 *                      "-" or "m" - decrement
	 * @param - silentMode - end the helper function without calling the PosSendUICmd
	 * @return - true for success or false for failure. If successful, will send a DLG_SYS_SHOW_GRILL message to the UI.
	 * @author - Vladimir
	 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	 */
	function lProcessAddRemove(index, operation, silentMode)
	{
		if (GLOBAL_NGK_GRILL)
		{
			var component = GLOBAL_NGK_GRILL.currentState.Component;
			var item = component.Item.(@index == index);
			if (item.length() > 0)
			{
				item = item[0];
				
				if (lIsPortionBasedItem(item))
				{
					var portionType = lGetPortionType(item);
					
					switch(portionType)
					{		
						// None
						case 0:
							lProcessNoneAddRemove(operation, item);
							break;
							
						// Light
						case 1:
							lProcessLightAddRemove(operation, item);
							break;
						
						// Regular
						case 2:
							lProcessRegularAddRemove(operation, item);
							break;
						
						// Extra
						case 3:
							lProcessExtraAddRemove(operation, item);
							break;
							
						default:
							API.dbg("PosNGKGrillExecuteOperation - lProcessAddRemove - Invalid portion type: " + portionType);
					}
				}
				else
				{
					var currentQuantity = Number(item.@curQty.toString());
					
					if (operation == "+" || operation == "p")
					{
						if (lIsQuantityValidForGrillItem(item, currentQuantity + 1)) currentQuantity++;
					}
					else if (operation == "-" || operation == "m")
					{
						if (lIsQuantityValidForGrillItem(item, currentQuantity - 1)) currentQuantity--;
					}
					else
					{
						API.dbg("PosNGKGrillExecuteOperation - lProcessAddRemove - Invalid operation: " + operation);
					}
					
					item.@curQty = currentQuantity.toString();
				}
				
				//First must update the item, than the composition
				lUpdateGrillItemAttributesBasedOnQuantity(item, component.@code);
				lUpdateGrillComponentAttributesBasedOnQuantity(component, GLOBAL_NGK_GRILL.costInclusive);
				//  update the signaled allergen
				lUpdateGrillAllergen(item);
				
				var eventXml = new XML('<Event type="ASYNC" name="DLG_SYS_SHOW_GRILL"/>');
				eventXml.appendChild(new XML(GLOBAL_NGK_GRILL.currentState));
				GLOBAL_NGK_GRILL_LAST_EVENT=eventXml;
				if(silentMode) {
					return true;
				}
				else {
					return PosSendUICmd(eventXml.toXMLString());
				}
			}
		}
		
		return false;
		
		/**
		 * @brief - Function to process the transitions from the portion "None"
		 * @param - oper - "+" or "p" - increment portion
		 * @param - index - grill item index retrieved from DLG_SYS_SHOW_GRILL
		 * @author - Vladimir
		 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
		 */
		function lProcessNoneAddRemove(oper, item)
		{
			var type = item.@type;
			
			// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
			var showLightPortion = lGetCSOUserInterfaceStringParameter("showLightPortion", "true") == "true";		
			
			if ((oper == "+" || oper == "p") && (type == "Composition"))
			{
				// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
				// Check if the the Light portion should be skipped
				if (showLightPortion)
				{
					//Light Composition
					item.@curQty = item.@defQty.toString();
					item.@modifiers = "1";
				}
				else
				{
					//Regular Composition
					item.@curQty = item.@defQty.toString();
					item.@modifiers = "0";
				}
			}
			else if ((oper == "+" || oper == "p") && (type == "CanAdds"))
			{
				// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
				var hasRegular = Number(item.@maxQty.toString()) > 1;
				var qty = Number(item.@defQty.toString());
				
				if (lIsQuantityValidForGrillItem(item, qty + 1))
				{
					if((hasRegular) && (!showLightPortion))
					{
						//Regular CanAdd
						item.@curQty = qty + 1;
						item.@modifiers = "0";
					}
					else
					{
						//Light CanAdd
						item.@curQty = qty + 1;
						item.@modifiers = "1";
					}
				}
			}
			else
			{
				API.dbg("lProcessNoneAddRemove - invalid operation: oper:" + oper + "|type:" + type);
			}
		}
		
		/**
		 * @brief - Function to process the transitions from the portion "Light"
		 * @param - oper - "+" or "p" - increment portion
		 *               - "-" or "m" - decrement portion
		 * @param - index - grill item index retrieved from DLG_SYS_SHOW_GRILL
		 * @author - Vladimir
		 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
		 */
		function lProcessLightAddRemove(oper, item)
		{
			var type = item.@type;
			
			if (oper == "-" || oper == "m")
			{
				//None Composition or None CanAdd
				item.@curQty = item.@minQty.toString();
				item.@modifiers = "0";
			}
			else if ((oper == "+" || oper == "p") && (type == "Composition"))
			{
				//Regular Composition
				item.@curQty = item.@defQty.toString();
				item.@modifiers = "0";
			}
			else if ((oper == "+" || oper == "p") && (type == "CanAdds"))
			{
				var qty = Number(item.@defQty.toString());
				if (lIsQuantityValidForGrillItem(item, qty + 1))
				{
					//Regular or Extra CanAdd (will be interpreted as Regular if maxQty = 2 or Extra if maxQty = 1)
					//If maxQty = 1, supports None, Light and Extra
					//If maxQty = 2, supports None, Light, Regular and Extra (may skip Light if showLightPortion is false)
					item.@curQty = qty + 1;
					item.@modifiers = "0";
				}
			}
			else
			{
				API.dbg("lProcessLightAddRemove - invalid operation: oper:" + oper + "|type:" + type);
			}
		}
		
		/**
		 * @brief - Function to process the transitions from the portion "Regular"
		 * @param - oper - "+" or "p" - increment portion
		 *               - "-" or "m" - decrement portion
		 * @param - index - grill item index retrieved from DLG_SYS_SHOW_GRILL
		 * @author - Vladimir
		 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
		 */
		function lProcessRegularAddRemove(oper, item)
		{
			var type = item.@type;
			var showLightPortion = lGetCSOUserInterfaceStringParameter("showLightPortion", "true") == "true";
			
			if ((oper == "-" || oper == "m") && (type == "Composition"))
			{
				// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
				// Check if the the Light portion should be skipped
				if (showLightPortion)
				{
					//Light Composition
					item.@curQty = item.@defQty.toString();
					item.@modifiers = "1";
				}
				else
				{
					//None Composition
					item.@curQty = item.@minQty.toString();
					item.@modifiers = "0";
				}
			}
			else if ((oper == "-" || oper == "m") && (type == "CanAdds"))
			{
				// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
				if (showLightPortion)
				{
					var qty = Number(item.@defQty.toString());					
					if (lIsQuantityValidForGrillItem(item, qty + 1))
					{
						//Light CanAdd
						item.@curQty = qty + 1;
						item.@modifiers = "1";
					}
				}
				else
				{
					//None CanAdd
					item.@curQty = item.@minQty.toString();
					item.@modifiers = "0";
				}
			}
			else if ((oper == "+" || oper == "p") && (type == "Composition"))
			{
				var qty = Number(item.@defQty.toString());
				if (lIsQuantityValidForGrillItem(item, qty + 1))
				{
					//Extra Composition
					item.@curQty = qty + 1;
					item.@modifiers = "0";
				}
			}
			else if ((oper == "+" || oper == "p") && (type == "CanAdds"))
			{
				var qty = Number(item.@defQty.toString());
				if (lIsQuantityValidForGrillItem(item, qty + 2))
				{
					//Extra CanAdd (when the regular state is supported, the extra state must use quantity as defQty + 2)
					item.@curQty = qty + 2;
					item.@modifiers = "0";
				}
			}
			else
			{
				API.dbg("lProcessRegularAddRemove - invalid operation: oper:" + oper + "|type:" + type);
			}
		}
		
		/**
		 * @brief - Function to process the transitions from the portion "Extra"
		 * @param - oper - "-" or "m" - decrement portion
		 * @param - index - grill item index retrieved from DLG_SYS_SHOW_GRILL
		 * @author - Vladimir
		 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
		 */
		function lProcessExtraAddRemove(oper, item)
		{
			var type = item.@type;
			
			if ((oper == "-" || oper == "m") && (type == "Composition"))
			{
				//Regular Composition
				item.@curQty = item.@defQty.toString();
				item.@modifiers = "0";
			}
			else if ((oper == "-" || oper == "m") && (type == "CanAdds"))
			{
				// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
				// CR - 7797958 - NGK Improvements to CYT Phase 1
				var hasRegular = Number(item.@maxQty.toString()) > 1;
				
				var qty = Number(item.@defQty.toString());
				if (lIsQuantityValidForGrillItem(item, qty + 1))
				{
					if (hasRegular)
					{
						//Regular CanAdd
						item.@curQty = qty + 1;
						item.@modifiers = "0";
					}
					else
					{
						//Light CanAdd
						item.@curQty = qty + 1;
						item.@modifiers = "1";
					}
				}
			}
			else
			{
				API.dbg("lProcessExtraAddRemove - invalid operation: oper:" + oper + "|type:" + type);
			}
		}
	}
	
	/**
	 * @brief - Function to make the recipe as plain (reducing all compositions which don't have the PlainGrill tag
	 *	        set as "true" to the minimum amount). Compositions with the PlainGrill tag set as "true", CanAdds and Comments
	 *          will retain the current quantity. Based on the behavior of the NewPos API PosApplyPlainGrill.
	 *          Additional Notes:
	 *          - Altough the documentation states that the default value of the PlainGrill tag is true,
	 *            if the tag doesn't exist, or is set to an invalid value, it is interpreted as false by NewPos.
	 *          - The PlainGrill tag value is not case sensitive
	 *          - At least one composition must have the PlainGrill tag set as "true", otherwise the recipe will not be changed
	 * @param - silentMode - end the helper function without calling the PosSendUICmd
	 * @return - true for success or false for failure. If successful, will send a DLG_SYS_SHOW_GRILL message to the UI.
	 * @author - Vladimir
	 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	 */
	function lProcessPlain(silentMode)
	{
		if (GLOBAL_NGK_GRILL)
		{
			var component = GLOBAL_NGK_GRILL.currentState.Component;
			var productCode = component.@code.toString();
			
			if (productCode && csoProductInfo[productCode])
			{
				var componentInfo = csoProductInfo[productCode];
				var componentNode = componentInfo.xmlNode;
				
				var plainGrillArray = new Array();
				
				for each (var child in componentNode.Composition.Component)
				{
					if ((child.PlainGrill.length() > 0) && (child.PlainGrill[0].toString().toLowerCase() == "true"))
					{
						plainGrillArray.push(child.ProductCode.toString());
					}
				}
				
				//At least one composition of the component must have the PlainGrill tag set as true, otherwise
				//the make it plain functionality is disabled and should not affect the current recipe.
				if (plainGrillArray.length > 0)
				{
					for each (var xmlItem in component.Item)
					{
						if (xmlItem.@type.toString() == "Composition")
						{
							//If the item doesn't contain the PlainGrill tag set as true, reduce the item quantity to the minimum amount
							if (plainGrillArray.indexOf(xmlItem.@code.toString()) == -1)
							{
								xmlItem.@curQty = xmlItem.@minQty.toString();
								xmlItem.@modifiers = "0";
								
								lUpdateGrillItemAttributesBasedOnQuantity(xmlItem, component.@code);
							}
						}
					}
					
					lUpdateGrillComponentAttributesBasedOnQuantity(component, GLOBAL_NGK_GRILL.costInclusive);
				}
				
				var eventXml = new XML('<Event type="ASYNC" name="DLG_SYS_SHOW_GRILL"/>');
				eventXml.appendChild(new XML(GLOBAL_NGK_GRILL.currentState));
				GLOBAL_NGK_GRILL_LAST_EVENT=eventXml;
				if(silentMode) {
					return true;
				}
				else {
					return PosSendUICmd(eventXml.toXMLString());
				}
			}
		}
		
		return false;
	}
	
	/**
	 * @brief - Function to reset the recipe to the default values
	 * @param - silentMode - end the helper function without calling the PosSendUICmd
	 * @return - true for success or false for failure. If successful, will send a DLG_SYS_SHOW_GRILL message to the UI.
	 * @author - Vladimir
	 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	 */
	function lProcessDefault(silentMode)
	{
		if (GLOBAL_NGK_GRILL)
		{
			GLOBAL_NGK_GRILL.currentState = new XML(GLOBAL_NGK_GRILL.defaultState);
			
			var eventXml = new XML('<Event type="ASYNC" name="DLG_SYS_SHOW_GRILL"/>');
			eventXml.appendChild(new XML(GLOBAL_NGK_GRILL.currentState));
			GLOBAL_NGK_GRILL_LAST_EVENT=eventXml;
			if(silentMode) {
				return true;
			}
			else {
				return PosSendUICmd(eventXml.toXMLString());
			}
		}
		
		return false;
	}
	
	/**
	 * @brief - Function to create the grill result xml (based on the view generated for the order basket)
	 *
	 *          Generated view sample:
	 *
	 *            <Event type="ASYNC" name="DLG_SYS_GRILL_RESULT">
	 *              <Product code="99900006" grillOperations="90000030,4;90000042,1,PORTION_BASED">
	 *                <Grill code="90000030" qty="4" modifiers="0" defQty="3" maxQty="5" minQty="0" unitPrice="0.20" text="- Extra 1 Fromage" />
	 *                <Grill code="90000042" qty="0" modifiers="0" defQty="1" maxQty="2" minQty="0" unitPrice="0.05" text="- No Ketchup" />
	 *                <Grill code="90000051" qty="1" modifiers="0" defQty="0" maxQty="1" minQty="0" unitPrice="0.40" text="- Ajouter 1 Bacon" />
	 *                <Grill code="80000001" qty="1" modifiers="0" defQty="0" maxQty="1" minQty="0" unitPrice="0.00" text="- Half Cut" />
	 *              </Product>
	 *            </Event>
	 *
	 * @param - grillState - grill view that will be used to create the grill result xml
	 * @param - isCancel - if true sends the previous energy value
	 * @return - xml containing the grill result.
	 * @author - Vladimir
	 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	 * @modified - CSD-3 - Calories incorrect in PDP screen, after selecting Button "Make it Default" and then cancel customization
	 */
	function lCreateGrillResultXML(grillState, isCancel)
	{
		var eventXml = new XML('<Event type="ASYNC" name="DLG_SYS_GRILL_RESULT"/>');
	
		var productXml = new XML('<Product/>');
		productXml.@code = grillState.Component.@code.toString();
	
		var hasAllergens=false;
		var hasSignaledAllergens=false;
		for each (var item in grillState.Component.Item)
		{
			//Replicates the view generated for the order basket.
			//Only include the items that have been changed in comparison to the default recipe.
			if (item.@curQty.toString() != item.@defQty.toString() || item.@modifiers.toString() != "0")
			{
				//TODO CSO-546 - Check the other attributes that will be necessary in grill result view
				var grillXml = new XML('<Grill/>');
				grillXml.@code = item.@code.toString();
				grillXml.@qty = item.@curQty.toString();
				grillXml.@modifiers = item.@modifiers.toString();
				
				grillXml.@defQty = item.@defQty.toString();
				grillXml.@maxQty = item.@maxQty.toString();
				grillXml.@minQty = item.@minQty.toString();

				var curQty = Number(item.@curQty.toString());
				var unitPrice = Number(item.@unitPrice.toString());
				var chargeThreshold = Number(item.@chargeThreshold.toString());
				var refundThreshold = Number(item.@refundThreshold.toString());
				
				if (curQty > chargeThreshold)
                    grillXml.@totalPrice =  unitPrice  * (curQty - chargeThreshold);				
                else if (curQty < refundThreshold)
                    grillXml.@totalPrice =  unitPrice  * (curQty - refundThreshold);
				else
					grillXml.@totalPrice = "0";
				
				grillXml.@unitPrice = item.@unitPrice.toString();
				// CSO-1162 - Germany v30 Adoption - {NGK 5.17 - wrong price in customize screen}
				grillXml.@parentQty = "1";
				
				grillXml.@text = lResolveGrillOperationNameExtended(item.@code.toString(), item.@curQty.toString(), item.@defQty.toString(), item.@maxQty.toString(), item.@modifiers.toString());
				
				productXml.appendChild(grillXml);
			}
			if("true"==item.@hasAllergens) {
				hasAllergens=true;	// at least one item has allergen
				if ((item.@curQty>0) && ("true"==item.@hasSignaledAllergens)) {
					hasSignaledAllergens=true;	// at least one item still has non removed signaled allergen
				}
			}
		}
		
		//Calculate the differences between the current grill state and the base state to retrieve the necessary inject order operations
		var grillOperations = "";
		var baseState = GLOBAL_NGK_GRILL.appliedState ? GLOBAL_NGK_GRILL.appliedState : GLOBAL_NGK_GRILL.defaultState;
		
		for each (var item in grillState.Component.Item)
		{
			//Find the equivalent item in the base state
			var baseItem = baseState.Component.Item.(@code == item.@code.toString())
			if (baseItem.length() > 0)
			{
				baseItem = baseItem[0];
				
				if (lIsPortionBasedItem(item))
				{
					var curIndex = lGetPortionBasedDictionaryIndex(item.@curQty, item.@defQty, item.@modifiers, item.@type, item.@maxQty);
					var baseIndex = lGetPortionBasedDictionaryIndex(baseItem.@curQty, baseItem.@defQty, baseItem.@modifiers, baseItem.@type, baseItem.@maxQty);
					
					var diff = curIndex - baseIndex;
					
					if (diff != 0)
					{
						if (grillOperations) grillOperations += ";";
						grillOperations += item.@code.toString() + "," + diff.toString() + ",PORTION_BASED";
					}
				}
				else
				{
					var curQty = Number(item.@curQty);
					var baseQty = Number(baseItem.@curQty);
					
					var diff = curQty - baseQty;
					
					if (diff != 0)
					{
						if (grillOperations) grillOperations += ";";
						grillOperations += item.@code.toString() + "," + diff.toString();
					}
				}
			}
		}
		
		//CSD-114 - [Regression 5.17] Monopoly - Grill Item - Hand In The Voucher
		lInsertMonopolyGrillInfo();
		
		productXml.@grillOperations = grillOperations;
		productXml.@hasAllergens=hasAllergens ? "true" : "false";
		productXml.@hasSignaledAllergens=hasSignaledAllergens? "true" : "false";
		
		// CSD-3 - Calories incorrect in PDP screen, after selecting Button "Make it Default" and then cancel customization
		if(isCancel) {
			//SQS-164 - [NGK5.16QR1HF2 - Nutritonal] Big Mac displays energy = 0 in the PDP after customize
			productXml.@previousEnergy=grillState.Component.@energyUnformated.toString();
		}
		
		eventXml.appendChild(productXml);
		
		return eventXml;
		
		//CSD-114 - [Regression 5.17] Monopoly - Grill Item - Hand In The Voucher
		function lInsertMonopolyGrillInfo()
		{
			//Check if this product is a monopoly
			if(csoProductInfo[productXml.@code] != null && csoProductInfo[productXml.@code].isMonopoly == true)
			{
				var monopolyProdCode = lGetCSOUserInterfaceStringParameter("monopolyProductCode", "");
				if(monopolyProdCode != "")
				{
					var hasMonopolyMark = lLookForMonopolyComment(productXml, monopolyProdCode);
					if(!hasMonopolyMark)
					{
						//Insert the following grill info in xml for PDP display
						//<Grill code="70000003" qty="1" modifiers="0" defQty="0" maxQty="1" minQty="0" totalPrice="0" unitPrice="0" text="- HAND IN THE VOUCHER" />
						
						var grillXml = new XML('<Grill/>');
						grillXml.@code = monopolyProdCode;
						grillXml.@qty = "1";
						grillXml.@modifiers = "0";
						
						grillXml.@defQty = "0";
						grillXml.@maxQty = "1";
						grillXml.@minQty = "0";

						var price = "0";
						var productInfo = csoProductInfo[monopolyProdCode];
						if (productInfo){
							for each (var priceTag in productInfo.xmlNode.PriceList.PriceTag.Pricing)
							{
								if(priceTag.Price != undefined && priceTag.Price != "")
									// CSD-205 - Customization does not work when the price tag of a component has new lines
									price = priceTag.Price.toString().replace(/\s+/g, "");
							}
							
							grillXml.@text = productInfo.names[sessionSale.get("LANGUAGE")] ? ("- " + productInfo.names[sessionSale.get("LANGUAGE")].csoName) : "";
						}
						grillXml.@totalPrice = price;
						grillXml.@unitPrice = price;
						
						productXml.appendChild(grillXml);
					}
				}
			}
		}
	}
}

/**
 * @brief - Function used to verify if a given quantity respects the minimum and maximum values of a grill item
 * @param - item - grill item
 * @param - quantity - quantity to verify
 * @return - true if the quantity is valid, false otherwise.
 * @author - Vladimir
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lIsQuantityValidForGrillItem(item, quantity)
{
	if (item && !isNaN(quantity) && !isNaN(item.@maxQty.toString()) && !isNaN(item.@minQty.toString()))
	{	
		var currentQuantity = Number(quantity);
		var maximumQuantity = Number(item.@maxQty.toString());
		var minimumQuantity = Number(item.@minQty.toString());
		
		if (currentQuantity >= minimumQuantity && currentQuantity <= maximumQuantity)
		{
			return true;
		}
	}
	
	return false;
}

/**
 *
 * @brief - Generates a grill view using the information from product-db.xml instead of the NewPos API getGrillView
 *
 *          Generated view sample:
 *
 *            <GrillInfo>
 *              <Component index="0" code="99900006" name="Big Mac Full Grill" backgroundImage="gui_fr_main_bigmac1.png" containerType="SANDWICH" maxExtraIngredients="2" isSelected="true" unitPrice="3.80" energy="0">
 *                <Item index="0" type="Composition" code="90000001" name="Viande" text="Viande" chargeThreshold="1" refundThreshold="0" unitPrice="0.30" defQty="1" minQty="0" maxQty="1" canSetLight="true" canSetOnly="true" singular="" plural="" image="grill_patty.png" isContainer="false" curQty="1" modifiers="0" isDefaultQty="true" quantityText="1" calloutQuantityText="1" />
 *                ...
 *                <Item index="4" type="Composition" code="90000042" name="Ketchup" text="Ketchup" chargeThreshold="1" refundThreshold="0" unitPrice="0.05" defQty="1" minQty="0" maxQty="2" canSetLight="true" canSetOnly="true" singular="" plural="" image="grill_ketchup.png" isContainer="false" curQty="1" modifiers="0" isDefaultQty="true" quantityText="" calloutQuantityText="Ordinaire" />
 *              </Component>
 *            </GrillInfo>
 *
 * @param - productCode - Product code from product-db.xml
 * @param - currentGrill - Define the grill current state.
 *                         Protocol: "GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;..."
 * @param - costInclusive - Define if the product has it's cost already included in another product.
 * @return - xml representing the grill view.
 * @author - Vladimir
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lGetGrillViewFromProductCode(productCode, currentGrill, costInclusive)
{
	if (!productCode || !csoProductInfo[productCode]) return null;
	
	var componentInfo = csoProductInfo[productCode];
	var componentNode = componentInfo.xmlNode;
	
	var xmlGrill = new XML('<GrillInfo/>');
	
	var xmlComp = new XML('<Component/>');
	
	xmlComp.@index = 0;
	xmlComp.@code = productCode;
	
	var language = sessionSale.get("LANGUAGE");
	xmlComp.@name = componentInfo.names[language] == null ? "" : componentInfo.names[language].csoName;
	xmlComp.@backgroundImage = componentInfo.csoImages.grillImage;
	
	xmlComp.@containerType = lGetContainerType(productCode);
	
	var maxExtraIngredients = lGetMaxExtraIngredients(productCode);
	if (maxExtraIngredients)
	{
		xmlComp.@maxExtraIngredients = maxExtraIngredients;
	}
	
	//Since the view will contain only the desired component, mark it as selected
	xmlComp.@isSelected = "true";
	
	// CSO-29 - NGK - Can Adds Non-Display on Grill Screen - 7098017
	var removeCanAdds = lGetCSOUserInterfaceStringParameter("hideCanAddsOnGrillScreen", "false") == "true";
	var deliveryLaterProductCode = lGetCSOUserInterfaceStringParameter("deliveryLaterProductCode", "");
	// CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
	var monopolyProductCode = lGetCSOUserInterfaceStringParameter("monopolyProductCode", "");
	
	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	// CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
	if (lGetHasAllergens(productCode))
	{
		xmlComp.@hasAllergens = "true";
		if (lGetHasSignaledAllergens(productCode))
		{
			xmlComp.@hasSignaledAllergens = "true";
			xmlComp.@signaledAllergens = "true";
		}
	}
	
	var itemIndex = 0;
	
	for each (var component in componentNode.Composition.Component)
	{
		// CSO-1055 - [DRM] KIOSK SP8 C1: All the selected grilled items are not displaying in Order Review screen and in drinks monitor for drinks and also none of the grilled ingredients displaying in customer receipt
		var componentProductCode = component.ProductCode.toString();
		if (!csoProductInfo[componentProductCode] || csoProductInfo[componentProductCode].xmlNode.@statusCode != "ACTIVE") continue;
		
		var itemInfo = csoProductInfo[component.ProductCode.toString()];
		
		if (component.MinQuantity.toString() == component.MaxQuantity.toString()) continue;
		
		var xmlItem = new XML('<Item/>');
		xmlItem.@index = itemIndex.toString();
		xmlItem.@type = "Composition";
		
		lAddGrillItemInfo(xmlItem, xmlComp, itemInfo, component, currentGrill);
		
		xmlComp.appendChild(xmlItem);
		
		itemIndex++;
	}
	
	if (!removeCanAdds)
	{
		for each (var canAdd in componentNode.CanAdds.Component)
		{
			// CSO-1055 - [DRM] KIOSK SP8 C1: All the selected grilled items are not displaying in Order Review screen and in drinks monitor for drinks and also none of the grilled ingredients displaying in customer receipt			
			var canAddProductCode = canAdd.ProductCode.toString();
			if (!csoProductInfo[canAddProductCode] || csoProductInfo[canAddProductCode].xmlNode.@statusCode != "ACTIVE") continue;
			
			var itemInfo = csoProductInfo[canAdd.ProductCode.toString()];
			var itemNode = itemInfo.xmlNode;
			
			if (canAdd.MinQuantity.toString() == canAdd.MaxQuantity.toString()) continue;
			if (!lCheckCanAdd(componentNode, itemNode)) continue;
			
			var xmlItem = new XML('<Item/>');
			xmlItem.@index = itemIndex.toString();
			xmlItem.@type = "CanAdds";

			lAddGrillItemInfo(xmlItem, xmlComp, itemInfo, canAdd, currentGrill);
			
			xmlComp.appendChild(xmlItem);
			
			itemIndex++;
		}
	}
	
	for each (var comment in componentNode.Comments.Component)
	{
		// CSO-1055 - [DRM] KIOSK SP8 C1: All the selected grilled items are not displaying in Order Review screen and in drinks monitor for drinks and also none of the grilled ingredients displaying in customer receipt
		var commentProductCode = comment.ProductCode.toString();
		if (!csoProductInfo[commentProductCode] || csoProductInfo[commentProductCode].xmlNode.@statusCode != "ACTIVE") continue;
	
		var itemInfo = csoProductInfo[comment.ProductCode.toString()];
		var itemNode = itemInfo.xmlNode;
		
		if (comment.MinQuantity.toString() == comment.MaxQuantity.toString()) continue;
		//CSO-1212 - Delivery Later Comment available for Take Away option
		if (deliveryLaterProductCode == comment.ProductCode.toString() && hlp.getSaleType() != 0) continue; 
        if (monopolyProductCode == comment.ProductCode.toString()) continue; 
		if (!lCheckComment(componentNode, itemNode)) continue;
		
		//SQC-9003 - Kisok freeze ordering "Ranch Snack Wrap(Crispy)"
		if (!lRemoveNotAllowedGrillInScreen(itemNode)) continue;
		
		var xmlItem = new XML('<Item/>');
		xmlItem.@index = itemIndex.toString();
		xmlItem.@type = "Comment";
		
		lAddGrillItemInfo(xmlItem, xmlComp, itemInfo, comment, currentGrill);
		
		xmlComp.appendChild(xmlItem);
		
		itemIndex++;
	}
	
	lUpdateGrillComponentAttributesBasedOnQuantity(xmlComp, costInclusive);
	
	xmlGrill.appendChild(xmlComp);
	
	return xmlGrill;
}

/**
 * @brief - Function used to verify if a comment is available according to the parameter doNotShowInGrillScreen from NP
 * @param - item - grill item
 * @return - true if the comment is valid, false otherwise.
 * @author - Leandro Oliveira
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lRemoveNotAllowedGrillInScreen(productNode){
	if (!productNode) return false;
	
	var doNotShowInGrillScreen = hlp.findParamInSectionConfig("doNotShowInGrillScreen","UserInterface");
	
	if (doNotShowInGrillScreen){
			var notShowGrills = doNotShowInGrillScreen.split("|");
			if (notShowGrills.length > 0){
				for each(var notAllowedGrillItem in notShowGrills){
					if (productNode.ProductCode == notAllowedGrillItem){
						return false;
					}
				}				
			}
	}
	
	return true;
}

/**
 * @brief - Add the attributes of a particular grill item. Used to build the grill view with the information from product-db.xml instead of the NewPos API getGrillView.
 * @param - xmlItem - partial grill item xml containing at least the item index and type (Composition, CanAdds or Comment)
 * @param - xmlComp - partial grill component xml containing at least the composition product code and container type
 * @param - itemInfo - grill item product info from csoProductInfo
 * @param - itemInParent - xml node from the product-db.xml that connects the grill component with the grill item.
 *                         For example:
 *
 *								<Product ...> <!-- Grill Component -->
 *									<ProductCode>99900006</ProductCode>
 *									<Composition>
 *										<Component> <!-- Connection Node -->
 *											<ProductCode>90000001</ProductCode>
 *											...
 *										</Component>
 *									</Composition>
 *									<CanAdds>
 *										<Component> <!-- Connection Node -->
 *											<ProductCode>90000051</ProductCode>
 *											...
 *										</Component>
 *									</CanAdds>
 *									<Comments>
 *										<Component> <!-- Connection Node -->
 *											<ProductCode>70000002</ProductCode>
 *											...
 *										</Component>
 *									</Comments>
 *								</Product>
 *                                    
 * @param - currentGrill - Define the grill current state.
 *                         Protocol: "GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;GRILL_PRODUCT_CODE,CURRENT_QUANTITY,MODIFIERS;..."
 * @author - Vladimir
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 * @modified - CSO-602 - CR 8424356 - Information Icon on Customization Screen - CSO v5.15.1
 */
function lAddGrillItemInfo(xmlItem, xmlComp, itemInfo, itemInParent, currentGrill)
{
	if (!itemInfo) return;
	var itemNode = itemInfo.xmlNode;
	
	xmlItem.@code = itemInfo.code;
	
	var language = sessionSale.get("LANGUAGE");
	xmlItem.@name = itemInfo.names[language] == null || itemInfo.names[language].longName == null ? "" : itemInfo.names[language].longName;
	xmlItem.@text = itemInfo.names[language] == null ? "" : itemInfo.names[language].csoName;
	
	xmlItem.@chargeThreshold = itemInParent.ChargeThreshold.toString();
	xmlItem.@refundThreshold = itemInParent.RefundThreshold.toString();
	
	xmlItem.@unitPrice = lFormatPrice(lGetProductFixedPrice(itemInfo.code));
	
	xmlItem.@defQty	= itemInParent.DefaultQuantity.toString();
	xmlItem.@minQty	= itemInParent.MinQuantity.toString();
	xmlItem.@maxQty	= itemInParent.MaxQuantity.toString();
	
	xmlItem.@canSetLight = lCanSetLight(itemNode);
	xmlItem.@canSetOnly = lCanSetOnly(itemNode);
	
	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	// CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
	if (lGetHasAllergens(itemInfo.code))
	{
		xmlItem.@hasAllergens = "true";
		if (lGetHasSignaledAllergens(itemInfo.code))
		{
			xmlItem.@hasSignaledAllergens = "true";
			xmlItem.@signaledAllergens = "true";
		}
	}
	
	if (itemNode.ProductUnit.length() > 0 && itemNode.ProductUnit != "") {
		xmlItem.@singular = PosCSOI18nGetMessageJS(itemNode.ProductUnit + ".SINGULAR");
		xmlItem.@plural	= PosCSOI18nGetMessageJS(itemNode.ProductUnit + ".PLURAL");
	} else {
		xmlItem.@singular = "";
		xmlItem.@plural = "";
	}
	
	xmlItem.@image = lGetGrillImage(itemNode, xmlComp.@containerType);
	xmlItem.@isContainer = (itemNode.CustomParameters.Parameter.(@name == "CSOIsContainer").@value == "true");
	// CSO-602 - CR 8424356 - Information Icon on Customization Screen - CSO v5.15.1
	
	if (isNutritionalInfoAvailable(itemInfo.code)) 
		xmlItem.@showNutrition = "true";
	
	var itemFound = false;
	
	if (currentGrill)
	{
		var currentGrillArray = currentGrill.split(";");
		for each(var grillInfo in currentGrillArray)
		{
			if (grillInfo)
			{
				var grillInfoArray = grillInfo.split(",");
				
				if (grillInfoArray[0] == itemInfo.code)
				{
					if ((grillInfoArray.length > 1) && lIsQuantityValidForGrillItem(xmlItem, grillInfoArray[1]))
					{
						xmlItem.@curQty = grillInfoArray[1];
					}
					else
					{
						xmlItem.@curQty = xmlItem.@defQty.toString();
					}
					
					if ((grillInfoArray.length > 2) && ((grillInfoArray[2] == "0") || (grillInfoArray[2] == "1")))
					{
						xmlItem.@modifiers = grillInfoArray[2];
					}
					else
					{
						xmlItem.@modifiers = "0";
					}
					
					itemFound = true;
					break;
				}
			}
		}
	}
	
	if (!itemFound)
	{
		xmlItem.@curQty = xmlItem.@defQty.toString();
		xmlItem.@modifiers = "0";
	}
	lUpdateGrillAllergen(xmlItem);
	lUpdateGrillItemAttributesBasedOnQuantity(xmlItem, xmlComp.@code);
}

/**
 * @brief - Used to set / update the attributes of a particular grill item based on it's current quantity and modifiers.
 *          Should be always executed for grill items whose current quantity or modifiers have been changed.
 * @param - xmlItem - grill item xml to be set / updated
 * @param - parentProductCode - product code of the grill component that contains the grill item
 * @author - Vladimir
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lUpdateGrillItemAttributesBasedOnQuantity(xmlItem, parentProductCode)
{
	xmlItem.@isDefaultQty = xmlItem.@curQty.toString() == xmlItem.@defQty.toString();
	
	xmlItem.@canRemove = Number(xmlItem.@curQty.toString()) > Number(xmlItem.@minQty.toString()) || (xmlItem.@modifiers.toString() == "1");
	xmlItem.@canAdd = Number(xmlItem.@curQty.toString()) < Number(xmlItem.@maxQty.toString()) || (xmlItem.@modifiers.toString() == "1");
	
	if (lIsPortionBasedItem(xmlItem))
	{
		xmlItem.@quantityText = lGetTextForPortionBasedItem(xmlItem);
		xmlItem.@calloutQuantityText = lGetTextForPortionBasedCallout(xmlItem);
	}
	else
	{
		xmlItem.@quantityText = lGetTextForNormalItem(xmlItem);
		xmlItem.@calloutQuantityText = lGetTextForNormalItem(xmlItem);
	}
	
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	var energy = lGetGrillItemEnergy(xmlItem, parentProductCode);
	// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
	if (energy != "") {
		xmlItem.@energy = energy.itemEnergy;
		xmlItem.@energyUnformated = energy.itemUnformatedEnergy;
		xmlItem.@energyMask = energy.itemEnergyMask;
		xmlItem.@energySuffix = energy.itemEnergySuffix;
	}
}

/**
 * @brief - Used to set / update the attributes of a particular grill component based on the current quantity and modifiers
 *          of the grill items inside of it.
 *          Should be always executed for the component if at least one of it's inner items quantity or modifiers have been changed.
 * @param - xmlComp - grill component xml to be set / updated
 * @param - costInclusive - Define if the component has it's cost already included in another product.
 * @author - Vladimir
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lUpdateGrillComponentAttributesBasedOnQuantity(xmlComp, costInclusive)
{
	xmlComp.@unitPrice = lCalculateComponentPrice(xmlComp, costInclusive);
	
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	var energy = lGetGrillCompositionEnergy(xmlComp);
	// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
	if (energy) {
		xmlComp.@energy = energy.compositionEnergy;
		xmlComp.@energyUnformated = energy.compositionUnformatedEnergy;
		xmlComp.@energyMask = energy.compositionEnergyMask;
		xmlComp.@energySuffix = energy.compositionEnergySuffix;
	}
	
	function lCalculateComponentPrice(xmlComp, costInclusive)
	{
		// SQC-9027 - [NGK5.15 - PDP] - After apply a grill, NGK updates grill screen with the grill price
		if (costInclusive == "true")
			return new BigDecimal("0.00");		
		var price = new BigDecimal(lGetProductFixedPrice(xmlComp.@code.toString()));
		for each (var item in xmlComp.Item)
		{
			var currentQuantity = Number(item.@curQty.toString());
			var chargeThreshold = Number(item.@chargeThreshold.toString());
			var refundThreshold = Number(item.@refundThreshold.toString());
			
			if (currentQuantity > chargeThreshold)
			{
				var multiplier = new BigDecimal(currentQuantity - chargeThreshold);
				var itemPrice = new BigDecimal(item.@unitPrice.toString());
				
				price = price.add(multiplier.multiply(itemPrice));
			}
			else if (currentQuantity < refundThreshold)
			{
				var multiplier = new BigDecimal(currentQuantity - refundThreshold);
				var itemPrice = new BigDecimal(item.@unitPrice.toString());
				
				price = price.add(multiplier.multiply(itemPrice));
			}
		}
		
		return lFormatPrice(price.toString());
	}
}

/**
 * @brief - Update the allergen info for the grill item
 * @param - item - grill component xml to be set / updated
 * @author - MY
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lUpdateGrillAllergen(item) {
	if((0==item.@curQty)&&("true"==item.@hasSignaledAllergens)) {
		item.@hasSignaledAllergens="false";
	}
	else
	if((item.@curQty>0)&&("true"==item.@signaledAllergens)) {
		item.@hasSignaledAllergens="true";
	}
}

/**
 *
 * @brief - Gets the grill view used on the kiosk.
 * @return - view - summarized grill view.
 * @author - Kalil
 */
function lGetGrillView(bRemoveMonopolyGrill) {
	var hlp = new BusinessObjectHelper;
	var grillView = hlp.getGrillView();
	
	var language = sessionSale.get("LANGUAGE");
	// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
	if((undefined==bRemoveMonopolyGrill)||(null==bRemoveMonopolyGrill)) {
		bRemoveMonopolyGrill=false;
	}
	
	if (grillView != null) {
	
		var regs			= grillView.split("<@");
	    var xmlGrill		= new XML('<GrillInfo/>');
	    var summaryLst		= null;
		var recipeLst		= null;
		var compDetailsLst	= null;
		var grillableLst	= null;
		var selectedComp	= null;
		
		for (var i = 0; i < regs.length; i++) {
			var reg = regs[i];
			if (reg.length > 0) {
				if (reg.substr(0, 1) == "0") { 										// 0-Grill Summary
					summaryLst = reg.substr(1, reg.length-3).split("|");
				} else if (reg.substr(0, 1) == "1") { 								// 1-Component Recipe
					recipeLst = reg.substr(1, reg.length-3).split("|");
				} else if (reg.substr(0, 1) == "2") { 								// 2-COMP DETAILS
					compDetailsLst = reg.substr(1, reg.length-3).split("|");
				} else if (reg.substr(0, 1) == "3") { 								// 3-Grill Components (Tabs)
					grillableLst = reg.substr(1, reg.length-3).split("|");
				} else if (reg.substr(0, 1) == "4") { 								// 4-Selected Component
					selectedComp = ltrim(reg.substr(1, 2));
				}
			}
		}
		
	    /** ADDS THE GRILLABLE ITEMS (COMPONENTS) */
		if (grillableLst != null) {
			
			var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
			var orderItem = kioskOrderView.Order.Item.(@currentSelected == "true" && @voided == "false");
		
			for (var i = 0; i < grillableLst.length; i++) {
				var isSelected = ((i + "") == selectedComp);
				var productCode = rtrim(grillableLst[i].substr(0, 40));

				var xmlComp = new XML('<Component/>');
				
				xmlComp.@index 		= i;
				xmlComp.@code 		= productCode;

				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				if (csoProductInfo[xmlComp.@code.toString()] == undefined || csoProductInfo[xmlComp.@code.toString()].xmlNode == undefined) {
					return null;
				}
				
				var mainProductInfo = csoProductInfo[xmlComp.@code.toString()];
				var mainProductNode = mainProductInfo.xmlNode;
				
				xmlComp.@name 		= mainProductInfo.names[language] == null ? "" : mainProductInfo.names[language].csoName;
				xmlComp.@backgroundImage	= mainProductInfo.csoImages.grillImage;
				
				if (sessionSale.get("IS_NGK") == "true")
				{
					xmlComp.@containerType = lGetContainerType(productCode);
					
					//CSO-258 - EU CR to Limit Can adds to a configured maximum - 7397812
					var maxExtraIngredients = lGetMaxExtraIngredients(productCode);
					if (maxExtraIngredients)
					{
						xmlComp.@maxExtraIngredients = maxExtraIngredients;
					}
				}
				
				var orderProduct = orderItem.Product[0];
				
				if (xmlComp.@code != orderProduct.@code) {
					orderProduct = orderProduct.Product.(@code == xmlComp.@code);
					if (orderProduct.length() == 0) {
						orderProduct = null;
					}
				}
				
				// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
				// In NGK the price can be lower because the refund threshold is supported
				if (sessionSale.get("IS_NGK") != "true")
				{
					if (orderProduct != null) {
						if (Number(orderProduct.@totalPrice) < Number(orderProduct.@unitPrice)) {
							orderProduct = null;
						}
					}
				}
				
				if (orderProduct != null) {
					if (sessionSale.get("IS_NGK") == "true")
					{
						// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
						// Added protection in the price calculation
						try
						{
							//NPS-17732 - Sev 3 - all stores - NewPos application is restarted after grill on CSO. - ACSI2957115
							var priceNotFixed = (Number(orderProduct.@totalPrice) / Number(orderProduct.@qty));
							var priceString = 0;
							if(isNaN(priceNotFixed)) 
								PosCSOLog(CSOLOG_INFORMATION, 18435, "lGetGrillView - The auxiliary variable priceString is not a number. The string '0' will be used.");
							else 
								priceString = priceNotFixed.toFixed(csoConfigurationInfo.currency.decimalsCount);
							
							xmlComp.@unitPrice = priceString;
						}
						catch(ex)
						{
							API.dbg("lGetGrillView - Unit Price calculation failed: " + ex);
						}
					}
					else
					{
						if (Number(orderProduct.@totalPrice) !== 0) {
							xmlComp.@name = xmlComp.@name + " " + PosCSOFormatAmountJS( (Number(orderProduct.@totalPrice) / Number(orderProduct.@qty)).toString()); // rtrim(grillableLst[i].substr(40));
						}
					}
				}
				
				xmlComp.@isSelected = (isSelected ? "true" : "false");
				if (isSelected) {
					// CSO-229 - NGK Support Deliver Early Feature - 7826861
					addRecipeItems(recipeLst, compDetailsLst, grillableLst, selectedComp, xmlComp, mainProductNode, orderItem, bRemoveMonopolyGrill);
				}
				
				// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				var energy = lGetGrillCompositionEnergy(xmlComp);
				// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
				if (energy)
				{
					xmlComp.@energy = energy.compositionEnergy;
					xmlComp.@energyUnformated = energy.compositionUnformatedEnergy;
					xmlComp.@energyMask = energy.compositionEnergyMask;
					xmlComp.@energySuffix = energy.compositionEnergySuffix;
				}
				
				xmlGrill.appendChild(xmlComp);
			}
		}
	    
	    // SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
	    return xmlGrill;
	}
	return null;
	
	/** Adds recipe items **/
	function addRecipeItems(recipeLst, compDetailsLst, grillableLst, selectedComp, xmlComp, mainProductNode, orderItem, bRemoveMonopolyGrill)
	{
		var swapItemsArray = lGetSwapProductArray(mainProductNode);
		var swapItemsAdded = 0;
		var itemsArray = new Array();
		var parentProductCode;
		var selectedItemCode;
		// CSO-29 - NGK - Can Adds Non-Display on Grill Screen - 7098017
		var removeCanAdds = lGetCSOUserInterfaceStringParameter("hideCanAddsOnGrillScreen", "false") == "true";
		// CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
		var monopolyProdCode=lGetCSOUserInterfaceStringParameter("monopolyProductCode", "");

		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		// CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
		if (lGetHasAllergens(xmlComp.@code))
		{
			xmlComp.@hasAllergens = "true";
			if (lGetHasSignaledAllergens(xmlComp.@code))
			{
				xmlComp.@hasSignaledAllergens = "true";
			}
		}
		
		for (var i=0; (recipeLst!=null) && (i<recipeLst.length); i++) {
			if (recipeLst[i].length > 4) {
				var aux 	= 0;
				
				// CSO-900 - Ingredient price added is NOT "displayed" when customising a sandwich - NPKR-246
				var recipeData = recipeLst[i];
				var NP6_New = false;
				
				// CSO-900 - Ingredient price added is NOT "displayed" when customising a sandwich - NPKR-246
				if (csoProductInfo[compDetailsLst[i]] != undefined)
				{
					var GrillCompInfo = csoProductInfo[compDetailsLst[i]];
					if((GrillCompInfo.xmlNode.Presentation.GrillBitmapName != null) &&
					   (GrillCompInfo.xmlNode.Presentation.GrillBitmapName != undefined)) {
					
						var grillBitmapName = GrillCompInfo.xmlNode.Presentation.GrillBitmapName.toString();

						var n1 = recipeLst[i].indexOf(grillBitmapName);
						if( n1 > 0)
						{
							recipeData = recipeLst[i].substring(0, n1);
							recipeData = recipeData + recipeLst[i].substring(n1 + grillBitmapName.length, recipeLst[i].length);
						}
					}

					// CSO-418 - Create a code protection when the Grill View has a wrong size in a component string. 
					// The value 84 is the size in characters that all grill string must have when it is whitout GrillBitmapName.
					// Some NP6.1 versions were sending the string with wrong size when they had   UTF8 characteres with two or more bytes in the string.
					if (recipeData.length == 84) NP6_New = true;
				}
				
				// CSO-900 - Ingredient price added is NOT "displayed" when customising a sandwich - NPKR-246
				if (NP6_New) {
					var gIndex 	= Number(recipeData.substring(aux, aux + 4));
					aux += 4;
					var gDesc 	= recipeData.substring(aux, aux + 47);
					aux += 47;
					var gPrice	= recipeData.substring(aux, aux + 11);
					aux += 11;
					var gGroup 	= recipeData.substring(aux, aux + 2); // not used (so far)
					aux += 2;
					var gX 		= recipeData.substring(aux, aux + 6); 
				}
				else {
					// When the size is wrong is necessary to do the decode of characters and the encode of character to try to fix this problem.
					var gIndex 	= Number(getField(recipeData	,  4));
					var gDesc 	= getField(recipeData			, 47);
					var gPrice	= getField(recipeData			, 11);
					var gGroup 	= getField(recipeData			,  2); // not used (so far)
					var gX 		= getField(recipeData			,  6); 
				}
				
				var szStr = recipeData.length;
				var start = szStr-12;

				var gCurQty	= recipeData.substring(start, start + 3);
				start+=3; 
				var gDefQty = recipeData.substring(start, start + 3);
				start+=3;
				var gMinQty = recipeData.substring(start, start + 3);
				start+=3;
				var gMaxQty = recipeData.substring(start, start + 3);
				
				// TRUE when the quantity was not change (operations minus neither plus were performed)
				var isDefaultQty =  (!PosCheckGrillProperty('?', '-1', gIndex));

				// Standard operations
				var canRemove	= getGrillStatus('-', gIndex);
				var canAdd		= getGrillStatus('+', gIndex);
		
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				// CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
				// bRemoveMonopolyGrill - remove only from grill screen
				if ((csoProductInfo[compDetailsLst[i]] != undefined) && ((compDetailsLst[i]!=monopolyProdCode)||(!bRemoveMonopolyGrill)))
				{				
					var productInfo = csoProductInfo[compDetailsLst[i]];
					var productNode = productInfo.xmlNode;
					
					// Creates the XML grill view.
					var xmlItem = new XML('<Item/>');
					
					// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
					// CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
					if (lGetHasAllergens(productInfo.code))
					{
						xmlItem.@hasAllergens = "true";
						if (lGetHasSignaledAllergens(productInfo.code))
						{
							xmlItem.@hasSignaledAllergens = "true";
						}
					}
					
					// Basic attributes of the recipe
					if (productInfo.isValid) {
					
						if (sessionSale.get("IS_NGK") == "true")
						{
							//CSO-229 - NGK Support Deliver Early Feature - 7826861
							if (!lCheckDeliveryLater(compDetailsLst[i], grillableLst, xmlComp, orderItem))
							{
								continue;
							}
							
							// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
							// Added charge threshold for CanAdds and comments
							// Also added refund threshold
							if (lGetItemType(mainProductNode, productNode) == "CanAdds")
							{
								xmlItem.@chargeThreshold	= mainProductNode.CanAdds.Component.(ProductCode == compDetailsLst[i]).ChargeThreshold;
								xmlItem.@refundThreshold	= mainProductNode.CanAdds.Component.(ProductCode == compDetailsLst[i]).RefundThreshold;
							}
							else if (lGetItemType(mainProductNode, productNode) == "Comment")
							{
								xmlItem.@chargeThreshold	= mainProductNode.Comments.Component.(ProductCode == compDetailsLst[i]).ChargeThreshold;
								xmlItem.@refundThreshold	= mainProductNode.Comments.Component.(ProductCode == compDetailsLst[i]).RefundThreshold;
							}
							else
							{
								xmlItem.@chargeThreshold	= mainProductNode.Composition.Component.(ProductCode == compDetailsLst[i]).ChargeThreshold;
								xmlItem.@refundThreshold	= mainProductNode.Composition.Component.(ProductCode == compDetailsLst[i]).RefundThreshold;
							}
						}
						else
						{
							//TODO NGK: Check if the ChargeThreshold fix above should be applied in Kiosk V4
							xmlItem.@chargeThreshold	= mainProductNode.Composition.Component.(ProductCode == compDetailsLst[i]).ChargeThreshold;
						}
						
						xmlItem.@index			= gIndex;
						xmlItem.@code			= compDetailsLst[i];
						xmlItem.@name			= rtrim(gDesc);
						xmlItem.@image			= productInfo.csoImages.grillImage;
						
						if (sessionSale.get("IS_NGK") == "true")
						{
							//SSU-67 - Create an attribute "unitPrice" for the GrillInfo Items
							try
							{
								//The price returned inside BusinessObjectHelper.getGrillView() is already formated (despite the fact that the order view is not),
								//so the direct conversion with Number() will fail.
								//Have to remove the thousand separator and replace the decimal separator before trying to convert the value.
								var priceString = trim(gPrice);
								priceString = priceString.replace(csoConfigurationInfo.currency.thousandSeparator, "");
								priceString = priceString.replace(csoConfigurationInfo.currency.decimalSeparator, ".");
								if (Number(priceString) > 0.0)
								{
									//The original string may not have the correct amount of decimals, so add them here
									xmlItem.@unitPrice = Number(priceString).toFixed(csoConfigurationInfo.currency.decimalsCount);
								}
							}
							catch(ex)
							{
								API.dbg("lGetGrillView - addRecipeItems - Price conversion failed: " + ex);
							}
						}
						else
						{
							xmlItem.@unitPrice = "+ " + PosCSOFormatAmountJS(trim(gPrice));
						}
										
						xmlItem.@curQty			= trim(gCurQty);
						xmlItem.@defQty			= trim(gDefQty);
						xmlItem.@minQty			= trim(gMinQty);
						xmlItem.@maxQty			= trim(gMaxQty);
						xmlItem.@isDefaultQty	= isDefaultQty;
						xmlItem.@text			= productInfo.names[language] == null ? "" : productInfo.names[language].csoName;
						// Available operations.
						xmlItem.@canRemove		= canRemove;
						xmlItem.@canAdd			= canAdd;
						
						//TODO: Check if the API PosCanSetGrillQualifier can be used instead
						xmlItem.@canSetLight	= lCanSetLight(productNode);
						xmlItem.@canSetOnly		= lCanSetOnly(productNode);
						
						// Collection of all set modifiers for byte 0 (zero)
						xmlItem.@modifiers		= hlp.getGrillModifiers(0, gIndex);
						
						xmlItem.@type			= lGetItemType(mainProductNode, productNode);
						
						// CSO-29 - NGK - Can Adds Non-Display on Grill Screen - 7098017
						if (sessionSale.get("IS_NGK") == "true")
						{
							if (xmlItem.@type.toString() == "CanAdds")
							{
								if (removeCanAdds)
								{
									continue;
								}
								
								// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
								// Filter the Can Adds based on DisplayOnCSO and KioskCanAdds
								if (!lCheckCanAdd(mainProductNode, productNode))
								{
									continue;
								}
							}
							
							if (xmlItem.@type.toString() == "Comment")
							{
								// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
								// Filter the Comments based on DisplayOnCSO and KioskComments
								if (!lCheckComment(mainProductNode, productNode))
								{
									continue;
								}
							}
						}
						
						if (productNode.ProductUnit.length() > 0 && productNode.ProductUnit != "") {
							xmlItem.@singular	= PosCSOI18nGetMessageJS(productNode.ProductUnit + ".SINGULAR");
							xmlItem.@plural		= PosCSOI18nGetMessageJS(productNode.ProductUnit + ".PLURAL");
						} else {
							xmlItem.@singular	= "";
							xmlItem.@plural		= "";
						}
						
						// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
						// Moved the logic to display the Make it Plain button to the GUI
						
						// @since - NPS-8384 - Kiosk GUI - Enable Portion-Based Configuration Options on the "Full" Customization Screen
						if (lIsPortionBasedItem(xmlItem)) {
							xmlItem.@quantityText = lGetTextForPortionBasedItem(xmlItem);
							xmlItem.@calloutQuantityText = lGetTextForPortionBasedCallout(xmlItem);
							
							// ******** GAMBI/POG ********
							// The NP6.1 returns these variables as false when sets a product as light.
							if (xmlItem.@modifiers != 0) {
								xmlItem.@canAdd = "true";
								xmlItem.@canRemove = "true";
							}
						}
						else
						{
							xmlItem.@quantityText = lGetTextForNormalItem(xmlItem);
							xmlItem.@calloutQuantityText = lGetTextForNormalItem(xmlItem);
						}
						
						// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
						// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
						// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
						var energy = lGetGrillItemEnergy(xmlItem, xmlComp.@code.toString());
						// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
						if (energy != "") {
							xmlItem.@energy = energy.itemEnergy;
							xmlItem.@energyUnformated = energy.itemUnformatedEnergy;
							xmlItem.@energyMask = energy.itemEnergyMask;
							xmlItem.@energySuffix = energy.itemEnergySuffix;
						}
						
						// @since - NPS-8385: Kiosk GUI - Enable a Swap Configuration Option on the Full Customization Screen.
						// Get the parent code of a SwapItem, if available.
						var parentProductCode = lIsSwapProduct(swapItemsArray, compDetailsLst[i]);
						
						// Separate the normal items from the swap items.
						if (parentProductCode == "") {
							itemsArray[compDetailsLst[i]] = xmlItem;
						} else {
							swapItemsArray[parentProductCode][compDetailsLst[i]] = xmlItem;
						}
						
						if (sessionSale.get("IS_NGK") == "true")
						{
							xmlItem.@image = lGetGrillImage(productNode, xmlComp.@containerType);
							xmlItem.@isContainer = (productNode.CustomParameters.Parameter.(@name == "CSOIsContainer").@value == "true");
						}
						
						// CSO-602 - CR 8424356 - Information Icon on Customization Screen - CSO v5.15.1
						if (isNutritionalInfoAvailable(compDetailsLst[i].toString())) 
							xmlItem.@showNutrition = "true";
					}
				}
			}
		}
		
		// @since - NPS-8385: Kiosk GUI - Enable a Swap Configuration Option on the Full Customization Screen.
		// Iterate through the SwapItems in order to add the selected item as the main product and the other items as its child.
		for (parentProductCode in swapItemsArray) {
			
			// Get the selected item.
			selectedItemCode = lGetSelectedSwapItem(swapItemsArray, parentProductCode);
			
			// If there is no selected item, set the main product as the parent product.
			if (selectedItemCode == "-1") {
				selectedItemCode = parentProductCode;
			}
				
			// Create the SwapItems tag and add all of the items that are not selected beneath it.
			swapItemsXML = new XML('<SwapItems />');
			
			for (var swapCode in swapItemsArray[parentProductCode]) {
				//EQA-205 - <Kiosk>Configured Seven Alternative items on swap screen for "Pain" of "Petite tab >Hamburger " product.
				if (swapCode != selectedItemCode && swapItemsAdded < 6) {
					swapItemsXML.appendChild(swapItemsArray[parentProductCode][swapCode]);
					swapItemsAdded++;
				}
			}
			
			// Add the SwapItems tag as a child of the selected item.
			if (sessionSale.get("IS_NGK") == "true")
			{
				var aux = new XML(swapItemsArray[parentProductCode][selectedItemCode]);
				itemsArray[selectedItemCode] = aux;
				itemsArray[selectedItemCode].appendChild(swapItemsXML);
			}
			else
			{
				itemsArray[selectedItemCode] = swapItemsArray[parentProductCode][selectedItemCode];
				itemsArray[selectedItemCode].appendChild(swapItemsXML);
			}
		}
		
		itemsArray = lSortGrillItems(itemsArray);
		
		// @since - NPS-8385: Kiosk GUI - Enable a Swap Configuration Option on the Full Customization Screen.
		// Create the final view.
		for each (product in itemsArray) {
			xmlComp.appendChild(product);
		}
		
		/** Gets a fiels based on the given size **/
		function getField(grillItem, sz) {
			// NPS-10518 - Added UTF-8 character encoding handling. Non-ASCI characters occupy more than one byte,
			// which may result in a reduction of the maximum quantity of characters permitted in a field.
			var field = decodeUtf8(encodeUtf8(grillItem).substring(aux, aux + sz));
			aux += sz;
			return field;
		}
		
		function lGetItemType(mainProductNode, productNode) {
		
			// @since - NPS-8385: Kiosk GUI - Enable a Swap Configuration Option on the Full Customization Screen.
			if ((productNode.@productClass == "COMMENT") || (mainProductNode.Comments.Component.(ProductCode == productNode.ProductCode).length()  > 0)) {
				return "Comment";
			}

			if (mainProductNode.Composition.Component.(ProductCode == productNode.ProductCode).length()  > 0) {
				return "Composition";
			}
			
			if (mainProductNode.CanAdds.Component.(ProductCode == productNode.ProductCode).length()  > 0) {
				return "CanAdds";
			}
			
			return "Unknown";
		}
		
		/**
		 * @brief - This function is used to filter products based on the sale type / delivery later
		 * @productCode - code of the product that should be checked
		 * @returns - false if the product should be filtered, true otherwise
		 * @modified - CSO-229 - NGK Support Deliver Early Feature - 7826861
		 */
		function lCheckDeliveryLater(productCode, grillableLst, xmlComp, orderItem) {
			var deliveryLaterProductCode = lGetParameterStr("deliveryLaterProductCode", "");
			
			if (deliveryLaterProductCode != "") {
				if (deliveryLaterProductCode == productCode) {
					var hlp = new BusinessObjectHelper;
					var saleType = hlp.getSaleType();
					
					if (saleType != 0) {
						return false;
					}
					
					//CSO-229 - NGK Support Deliver Early Feature - 7826861
					//Try to find the correspondent product in the NewPos / Kiosk view to check if there is any delivery earlier information
					var grillViewIndex = Number(xmlComp.@index.toString());
					var grillProductCode = xmlComp.@code.toString();
					
					var grillProductCount = 0;
					//Count how many times this particular product code appeared in the grill view up to the selected grill index
					for (var i = 0; (i <= grillViewIndex) && (i < grillableLst.length); i++)
					{
						if (grillProductCode == rtrim(grillableLst[i].substr(0, 40))) grillProductCount++;
					}
					
					if (grillProductCount > 0)
					{
						var kioskViewProducts = orderItem..Product.(@code == grillProductCode);
						var kioskViewIndex = -1;
						var kioskViewProductCount = 0;
						for (var j = 0; j < kioskViewProducts.length(); j++)
						{
							kioskViewProductCount += Number(kioskViewProducts[j].@npQty.toString());
							
							//In the grill view, each line contains one unit of each product
							//In the kiosk view those products could be grouped, depending on the current grill information
							//Assuming that the products are listed in both views in the same order,
							//use the above counting to find in which group our desired product is located
							if (kioskViewProductCount >= grillProductCount)
							{
								kioskViewIndex = j;
								break;
							}
						}
						
						if ((kioskViewIndex > -1) && (kioskViewIndex < kioskViewProducts.length()))
						{
							var absoluteQuantity = Number(kioskViewProducts[kioskViewIndex].@npQtyMult.toString());
							var deliveryEarlyQuantity = Number(kioskViewProducts[kioskViewIndex].@deliveryEarlyQty.toString());

							//If all units of this product are set as delivery earlier, filter the delivery later comment
							if (deliveryEarlyQuantity >= absoluteQuantity)
							{
								return false;
							}
						}
					}
				}
			}
			
			return true;
		}
	}
	
	/** Adds a xml attribute in the given XML buffer **/
	function addXMLAttribute(xml, name, value) {
		xml.append(" " + name + "=\"" + value + "\"");
	}
	
	/** Gets the grill status **/
	function getGrillStatus(type, index) {
		// Based on WF_ShowButtonGrill
		if (PosCheckGrillPropertyMulti('c','80000005','-1')) {
			return false;
		} else if (PosCheckGrillProperty(type, '-1', index)) {
			return (!PosCheckGrillProperty('0', '-1', index));
		}
		return false;
	}
}

/**
 * @brief - Gets the container type of the product.
 * @return - WRAP, SANDWICH, SALAD, DRINK, FRIES, NONE
 * @author - Kalil Garcia / Vladimir Dobroff
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 *          - Moved the logic from the function that creates the grill view
 */
function lGetContainerType(productCode)
{
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	var productInfo = csoProductInfo[productCode.toString()];
	if (productInfo && productInfo.xmlNode)
	{
		var productNode = productInfo.xmlNode;
		if (productNode.FamilyGroup == "REGULAR_DRINK" || productNode.ChoiceGroup=="DRINK") {
			return "DRINK"
		} else if (productNode.FamilyGroup == "FRIES") {
			return "FRIES";
		} else if (productNode.FamilyGroup == "SALAD") {
			return "SALAD";
		} else {
			var containerType = productNode.CustomParameters.Parameter.(@name == "CSOContainerType").@value;
			if (containerType != null && (ltrim(rtrim(containerType)).length > 0)) {
				return containerType;
			} else {
				return "NONE";
			}
		}
	}
	return null;
}

/**
 * @brief - Get the maximum extra ingredients for a particular product.
 * @return - string with the maximum value or null if it is not configured
 * @author - Vladimir Dobroff
 * @since - CSO-258 - EU CR to Limit Can adds to a configured maximum - 7397812
 *        - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 *          - Moved the logic from the function that creates the grill view
 */
function lGetMaxExtraIngredients(productCode)
{
	var returnValue = null;
	
	if (productCode && csoProductInfo[productCode] && csoProductInfo[productCode].xmlNode)
	{
		var productNode = csoProductInfo[productCode].xmlNode;
		var maxExtraIngredients = productNode.MaxExtraIngredientsQuantity;
		
		try
		{
			if (maxExtraIngredients.length() > 0 && 
				maxExtraIngredients[0].toString() &&
				!isNaN(maxExtraIngredients[0].toString()) &&
				(Number(maxExtraIngredients[0].toString()) > 0))
			{
				returnValue = maxExtraIngredients[0].toString();
			}
			else
			{
				maxExtraIngredients = productNode.CustomParameters.Parameter.(@name == "maxExtraIngredientsQuantity");
				if ((maxExtraIngredients.length() > 0) &&
					maxExtraIngredients[0].@value.toString() &&
					!isNaN(maxExtraIngredients[0].@value.toString()) &&
					(Number(maxExtraIngredients[0].@value.toString()) > 0))
				{
					returnValue = maxExtraIngredients[0].@value.toString();
				}
			}
		}
		catch(ex)
		{
			API.dbg("lGetMaxExtraIngredients - Could not retrieve MaxExtraIngredientsQuantity for product: " + productCode + ". Exception: " + ex);
		}
	}
	
	return returnValue;
}

/**
 * @brief - Get the grill image for a particular product.
 * @return - string with the grill image or empty string if it is not configured
 * @author - Kalil Garcia / Vladimir Dobroff
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 *          - Moved the logic from the function that creates the grill view
 */
function lGetGrillImage(productNode, containerType)
{
	var returnValue = "";
	
	if (productNode)
	{
		var grillImage = "";
		if (productNode.Presentation.CSOGrillImageName.length() > 0) grillImage = productNode.Presentation.CSOGrillImageName[0].toString();
		
		var grillContainerImage = "";
		if (productNode.CustomParameters.Parameter.(@name == "CSOGrillImageNameContainerType").length() > 0)
		{
			grillContainerImage = productNode.CustomParameters.Parameter.(@name == "CSOGrillImageNameContainerType")[0].@value;
			if (grillContainerImage == undefined || grillContainerImage == null) grillContainerImage = grillImage;
		}
		
		if (containerType == "WRAP") {
			if (grillContainerImage.indexOf(";") >= 0) { 
				grillContainerImage = grillContainerImage.split(";")[1];
			}
			returnValue = grillContainerImage;
		} else if (containerType == "SANDWICH") {
			if (grillContainerImage.indexOf(";") >= 0) { 
				grillContainerImage = grillContainerImage.split(";")[0];
			}
			returnValue = grillContainerImage;
		} else {
			returnValue = grillImage;
		}
	}
	
	return returnValue;
}

/**
 * @brief - This function is used to retrieve the energy information of a grill item in the grill view.
 * @xmlItem - grill item from the grill view whose energy will be calculated (the item must already contain the quantity attributes)
 * @parentProductCode - product code of the grill component that contains the grill item
 * @returns - energy value (formatted and rounded, depending of the nutritional configuration)
 *            return an empty string if energy information is not configured
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 *        - TODO: Review and try to simplify the logic
 */
function lGetGrillItemEnergy(xmlItem, parentProductCode)
{
	var grillItemEnergy = "";
	// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
	var grillItemUnformatedEnergy = "";
	var grillItemEnergyMask = "";
	var grillItemEnergySuffix = "";
	
	if (xmlItem)
	{
		if (lIsPortionBasedItem(xmlItem))
		{
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if(csoCalculateEnergyRecalculateEnergyOnGrill)
			{
				var productInfo = csoProductInfo[xmlItem.@code.toString()];
				var energy = "";
				
				if (productInfo) 
				{
					var defQty = Number(xmlItem.@defQty);
					if((xmlItem.@curQty == xmlItem.@defQty) && (defQty == 0))
					{
						var maxQty = Number(xmlItem.@maxQty);
						if(maxQty > 1)
							if(productInfo.energyInfo) energy = productInfo.energyInfo.CalculatedBaseEnergyInformation;
						else 
							if(productInfo.energyInfo) energy = productInfo.energyInfo.LightPortionEnergyInformation;
					}	
					else 
					{
						if(defQty != 0)
						{
							if(productInfo.energyInfo) energy = productInfo.energyInfo.CalculatedBaseEnergyInformation;
						}
						energy = CalcGrillEnergy(energy, xmlItem, productInfo);
						if (energy == "")
						{
							var curQty = Number(xmlItem.@curQty);
							if(curQty == 0)
								if(productInfo.energyInfo) energy = productInfo.energyInfo.CalculatedBaseEnergyInformation;
						}
					}
				}
				if (energy != "")
				{
					// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
					// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
					var format = GetEnergyFormat(productInfo.code);
					grillItemUnformatedEnergy = RoundEnergy(productInfo.code, energy);
					grillItemEnergy = FormatEnergyValue(grillItemUnformatedEnergy, productInfo.code);
					grillItemEnergyMask = format.energyMask;
					grillItemEnergySuffix = format.energySuffix;
				}								
			}
			else 
			{
				// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
				// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
				var energy = lGetEnergyInformation(xmlItem.@code.toString(), undefined, false);
				if (energy != "") grillItemUnformatedEnergy = energy;

				// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
				energy = lGetEnergyInformation(xmlItem.@code.toString());
				if (energy != "") grillItemEnergy = energy;

				// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
				var format = GetEnergyFormat(xmlItem.@code.toString());
				grillItemEnergyMask = format.energyMask;
				grillItemEnergySuffix = format.energySuffix;
			}
		}
		else
		{
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if(csoCalculateEnergyRecalculateEnergyOnGrill)
			{
				var productInfo = csoProductInfo[xmlItem.@code.toString()];
				if (productInfo) 
				{
					if ((productInfo.energyInfo) && (productInfo.energyInfo.CalculatedBaseEnergyInformation != ""))
					{
						var energy = CalcGrillEnergy(productInfo.energyInfo.CalculatedBaseEnergyInformation, xmlItem, productInfo);
						
						var curQty = Number(xmlItem.@curQty);
						if(curQty == 0)
						{
							if(productInfo.energyInfo) energy = productInfo.energyInfo.CalculatedEnergyInformation;
						}										
						if(energy != "")
						{
							// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
							// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
							var format = GetEnergyFormat(productInfo.code);
							grillItemUnformatedEnergy = RoundEnergy(productInfo.code, energy);
							grillItemEnergy = FormatEnergyValue(grillItemUnformatedEnergy, productInfo.code);
							grillItemEnergyMask = format.energyMask;
							grillItemEnergySuffix = format.energySuffix;
						}
					}
				}
			}
			else
			{
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
				var energy = lGetEnergyInformation(xmlItem.@code.toString());
				var energyUnformated = lGetEnergyInformation(xmlItem.@code.toString(), undefined, false);
				if ((energy != "") && (energyUnformated != ""))
				{
					if (parentProductCode && csoProductInfo[parentProductCode])
					{
						var mainProductNode = csoProductInfo[parentProductCode].xmlNode;
						var bFound = false;
						grillItemEnergy = energy;
						grillItemUnformatedEnergy = energyUnformated;
						// look for the choice quantities in the VM definition
						for each (var component in mainProductNode.Composition.Component) {
							if(component.ProductCode == xmlItem.@code.toString()) {
								if(component.MaxQuantity > 1) {
									grillItemEnergy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", energy);
									// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
									grillItemEnergyMask = "NGK_MSG_NUTRITION_EACH";
								}
								bFound = true;
								break;
							}
						}
						if (false == bFound) {
							for each (var component in mainProductNode.CanAdds.Component) {
								if(component.ProductCode == xmlItem.@code.toString()) {
									if(component.MaxQuantity > 1) {
										grillItemEnergy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", energy);
										// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
										grillItemEnergyMask = "NGK_MSG_NUTRITION_EACH";
									}
									break;
								}
							}
						}
					}
				}
			}
		}
	}
	
	// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
	return {
		itemEnergy: grillItemEnergy,
		itemUnformated: grillItemUnformatedEnergy,
		itemEnergyMask: grillItemEnergyMask,
		itemEnergySuffix: grillItemEnergySuffix
	};
	
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	//         - Extracted the code from the addRecipeItems function
	//         - Moved the calculation of the grill composition energy to another function.
	//           Now it is only used to calculate the grill item energy.
	//         - TODO: Review and try to simplify the logic
	function CalcGrillEnergy(energy, xmlItem, itemInfo)
	{
		if ((!lIsPortionBasedItem(xmlItem)) && (energy == ""))
		{
			return (energy);
		}
		if (lIsPortionBasedItem(xmlItem))
		{
			var currentEnergy = "";
			var curQty = Number(xmlItem.@curQty);
			if((xmlItem.@curQty != xmlItem.@defQty) && (curQty == 0))
			{
				currentEnergy = "";
			}
			else 
			{
				// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
				var portionType = lGetPortionType(xmlItem);
				if (portionType != 0)
				{
					currentEnergy = lGetPortionBasedEnergy(itemInfo.energyInfo, portionType);
				}
			}
			if(currentEnergy == energy)
			{
				return (energy);
			}
			var energyBefore = new BigDecimal(energy);
			var energyAfter = new BigDecimal(currentEnergy);
			if (energyBefore.compareTo(energyAfter) > 0)
			{
				energy = GetEnergyInformationSubtracted(energy, currentEnergy);
			}
			else 
			{
				energy = GetEnergyInformationSubtracted(currentEnergy, energy);
			}
			if((xmlItem.@curQty != xmlItem.@defQty) && (curQty == 0))
				energy = "";
			else 
				energy = currentEnergy;
		}
		else
		{
			if(xmlItem.@curQty != xmlItem.@defQty)
			{
				var curQty = Number(xmlItem.@curQty);
				var defQty = Number(xmlItem.@defQty);
				if(curQty < defQty)
				{
					var qtyChanged = defQty - curQty;
					var energyChange = GetEnergyInformationMultiplied(energy, qtyChanged.toString());
				}
				else 
				{
					var qtyChanged = curQty - defQty;
					var energyChange = GetEnergyInformationMultiplied(energy, qtyChanged.toString());
				}
			}
			energy = GetEnergyInformationMultiplied(energy, xmlItem.@curQty);
		}
		if (energy == "0")
			energy = "";
			
		return (energy);
	}
}

/**
 * @brief - This function is used to retrieve the energy information of a grill component in the grill view.
 * @xmlComp - grill component from the grill view (if it is the current selected component, must contain the grill items and their respective quantities)
 * @returns - energy value (formatted and rounded, depending of the nutritional configuration)
 *            return an empty string if energy information is not configured
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lGetGrillCompositionEnergy(xmlComp)
{
	var grillCompositionEnergy = "";
	// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
	var grillCompositionUnformatedEnergy = "";
	var grillCompositionEnergyMask = "";
	var grillCompositionEnergySuffix = "";
	
	if (xmlComp)
	{
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if((csoCalculateEnergyInformation) && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))
		{
			var productInfo = csoProductInfo[xmlComp.@code.toString()];
			if ((productInfo) && (productInfo.energyInfo))
			{
				if(csoCalculateEnergyRecalculateEnergyOnGrill && xmlComp.@isSelected.toString() == "true")
				{
					var rawDataEnergy = "";
					
					if (productInfo.energyInfo.CalculatedByCompositionEnergyInformation != "")
					{
						//Initial energy of the composition with it's default recipe
						rawDataEnergy = productInfo.energyInfo.CalculatedByCompositionEnergyInformation;
						
						//Update the energy of the composition based on the current recipe.
						//Must check the difference of each ingredient in comparison with the default recipe and add or subtract the energy difference.
						//Cannot just sum the current energy of each ingredient because the composition may contain other products that are not
                        //listed in the grill view, for example: bun with minimum, maximum and default quantity set as 1
						for each (var xmlItem in xmlComp.Item)
						{
							var itemInfo = csoProductInfo[xmlItem.@code.toString()];
							
							if(itemInfo && itemInfo.energyInfo)
							{
								if (lIsPortionBasedItem(xmlItem))
								{
									if (xmlItem.@curQty.toString() != xmlItem.@defQty.toString() || xmlItem.@modifiers.toString() != "0")
									{
										var currentPortionType = lGetPortionType(xmlItem);
										var defaultPortionType = lGetPortionType2(xmlItem.@defQty, xmlItem.@defQty, "0", xmlItem.@type, xmlItem.@maxQty);
										
										if (currentPortionType != defaultPortionType)
										{
											var currentPortionEnergy = lGetPortionBasedEnergy(itemInfo.energyInfo, currentPortionType);
											var defaultPortionEnergy = lGetPortionBasedEnergy(itemInfo.energyInfo, defaultPortionType);
											
											if (currentPortionEnergy && defaultPortionEnergy && currentPortionEnergy != defaultPortionEnergy)
											{
												currentEnergy = new BigDecimal(currentPortionEnergy);
												defaultEnergy = new BigDecimal(defaultPortionEnergy);
												
												if (currentEnergy.compareTo(defaultEnergy) > 0)
												{
													var energyDiff = GetEnergyInformationSubtracted(currentPortionEnergy, defaultPortionEnergy);
													rawDataEnergy = GetEnergyInformationAdded(rawDataEnergy, energyDiff)
												}
												else
												{
													var energyDiff = GetEnergyInformationSubtracted(defaultPortionEnergy, currentPortionEnergy);
													rawDataEnergy = GetEnergyInformationSubtracted(rawDataEnergy, energyDiff);
												}
											}
										}
									}
								}
								else
								{
									if (xmlItem.@curQty.toString() != xmlItem.@defQty.toString())
									{
										var energy = itemInfo.energyInfo.CalculatedBaseEnergyInformation;
										if (energy)
										{
											var curQty = Number(xmlItem.@curQty);
											var defQty = Number(xmlItem.@defQty);
											if(curQty > defQty)
											{
												var qtyDiff = curQty - defQty;
												
												var energyDiff = GetEnergyInformationMultiplied(energy, qtyDiff.toString());
												rawDataEnergy = GetEnergyInformationAdded(rawDataEnergy, energyDiff);
											}
											else
											{
												var qtyDiff = defQty - curQty;
												
												var energyDiff = GetEnergyInformationMultiplied(energy, qtyDiff.toString());
												rawDataEnergy = GetEnergyInformationSubtracted(rawDataEnergy, energyDiff);
											}
										}
									}
								}
							}
						}
					}
					
					if (rawDataEnergy != "")
					{
						// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
						// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
						var productCode = xmlComp.@code.toString();
						var format = GetEnergyFormat(productCode);
						grillCompositionUnformatedEnergy = RoundEnergy(productCode, rawDataEnergy);
						grillCompositionEnergy = FormatEnergyValue(grillCompositionUnformatedEnergy, productCode);
						grillCompositionEnergyMask = format.energyMask;
						grillCompositionEnergySuffix = format.energySuffix;
					}
				}
				else
				{
					if (productInfo.energyInfo.CalculatedEnergyInformation != "")
					{
						// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
						// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
						var productCode = xmlComp.@code.toString();
						var format = GetEnergyFormat(productCode);
						grillCompositionUnformatedEnergy = RoundEnergy(productCode, productInfo.energyInfo.CalculatedEnergyInformation);
						grillCompositionEnergy = FormatEnergyValue(grillCompositionUnformatedEnergy, productCode);;
						grillCompositionEnergyMask = format.energyMask;
						grillCompositionEnergySuffix = format.energySuffix;
					}
				}
			}
		}
		else
		{
			// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
			var energy = lGetEnergyInformation(xmlComp.@code.toString());
			if (energy != "") grillCompositionEnergy = energy;
		}
	}
	
	// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
	return {
		compositionEnergy: grillCompositionEnergy,
		compositionUnformatedEnergy: grillCompositionUnformatedEnergy,
		compositionEnergyMask: grillCompositionEnergyMask,
		compositionEnergySuffix: grillCompositionEnergySuffix
	}
}

/**
 * @brief - Function used to check if a grill composition / item has at least one configured allergen
 * @param - productCode - product that will be checked
 * @returns - true if configured, false otherwise
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lGetHasAllergens(productCode)
{
	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	// CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
	if (productCode && (csoEnableAllergensEnhancement == "true"))
	{
		var allergensFound = [];
		// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
		allergensFound = lFindAllergens(allergensFound, productCode, [], true, false, false, true);
		if (allergensFound.length > 0) return true;
	}
	return false;
}

/**
 * @brief - Function used to check if a grill composition / item has at least one of the allergens selected by the customer
 * @param - productCode - product that will be checked
 * @returns - true if contains a selected allergen, false otherwise
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lGetHasSignaledAllergens(productCode)
{
	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	// CSO-482 - Implement allergen notification and confirmation pop ups on Product Customization screen
	if (productCode && (csoEnableAllergensEnhancement == "true"))
	{
		// Look for signaled allergens
		var allergensFound = [];
		var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
		// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
		allergensFound = lFindAllergens(allergensFound, productCode, selectedAllergensList, true, false, false, false);
		if (allergensFound.length > 0) return true;
	}
	return false;
}

/**
 * @brief - This function is used to filter the Can Adds that can be displayed in the UI.
 *          Uses the DisplayOnCSO and KioskCanAdds parameters for the filtering
 * @mainProductNode - Parent product node
 * @productNode - Ingredient product node
 * @returns - false if the product should not be displayed, true otherwise
 * @since - CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
 */
function lCheckCanAdd(mainProductNode, productNode)
{
	var canAddComponent = mainProductNode.CanAdds.Component.(ProductCode == productNode.ProductCode);
	
	if (canAddComponent && canAddComponent.length() > 0)
	{
		if (canAddComponent[0].DisplayOnCSO.length() > 0)
		{
			if (canAddComponent[0].DisplayOnCSO[0].toString().toUpperCase() == "TRUE")
			{
				return true;
			}
		}
		else
		{
			var kioskCanAdds = mainProductNode.CustomParameters.Parameter.(@name == "KioskCanAdds");
			
			if ((kioskCanAdds.length() > 0) && kioskCanAdds[0] && kioskCanAdds[0].@value.toString())
			{
				var splittedCodes = kioskCanAdds[0].@value.toString().split("|");
				for each (code in splittedCodes)
				{
					if (productNode.ProductCode.toString() == code)
					{
						return true;
					}
				}	
			}
		}
	}
	
	return false;
}

/**
 * @brief - This function is used to filter the Comments that can be displayed in the UI.
 *          Uses the DisplayOnCSO and KioskComments parameters for the filtering
 * @mainProductNode - Parent product node
 * @productNode - Ingredient product node
 * @returns - false if the product should not be displayed, true otherwise
 * @since - CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
 */
function lCheckComment(mainProductNode, productNode)
{
    //SDO-10205 - NGK v5.91 - Delivery Later products that are NOT configured with <DisplayOnCSO> still appear on the delivery later screen
	if (!mainProductNode || !productNode) return false;
	
	var commentsComponent = mainProductNode.Comments.Component.(ProductCode == productNode.ProductCode);
	
	if (commentsComponent && commentsComponent.length() > 0)
	{
		if (commentsComponent[0].DisplayOnCSO.length() > 0)
		{
			if (commentsComponent[0].DisplayOnCSO[0].toString().toUpperCase() == "TRUE")
			{
				return true;
			}
		}
		else
		{
			var kioskComments = mainProductNode.CustomParameters.Parameter.(@name == "KioskComments");
			
			if ((kioskComments.length() > 0) && kioskComments[0] && kioskComments[0].@value.toString())
			{
				var splittedCodes = kioskComments[0].@value.toString().split("|");
				for each (code in splittedCodes)
				{
					if (productNode.ProductCode.toString() == code)
					{
						return true;
					}
				}	
			}
		}
	}
	
	return false;
}

/**
 * @brief - This function returns the portion type for a given portion based ingredient that is being grilled.
 * @xmlItem - This variable should contain a xml string that contains an ingredient (item) of a given product that is being grilled. It should begin
 * with the tag: <Item/>.
 * @returns - An integer for the current following quantities:
 *			  0 - None
 *			  1 - Light
 *			  2 - Regular
 *			  3 - Extra
 * @author - Felipe Armoni
 * @since - NPS-8384 - Kiosk GUI - Enable Portion-Based Configuration Options on the "Full" Customization Screen - 5383479 
 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
function lGetPortionType(xmlItem)
{	
	// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
	// CR - 7797958 - NGK Improvements to CYT Phase 1
	return lGetPortionType2(xmlItem.@curQty, xmlItem.@defQty, xmlItem.@modifiers, xmlItem.@type, xmlItem.@maxQty);
}

/**
 * @brief - This function returns the portion type for a given portion based ingredient that is being grilled.
 * @grillCurrentQuantity - item current quantity
 * @grillDefaultQuantity - item default quantity
 * @grillModifiers - view modifier
 * @grillItemType - "Composition", "CanAdds" or "Comment"
 * @returns - An integer for the current following quantities:
 *			  0 - None
 *			  1 - Light
 *			  2 - Regular
 *			  3 - Extra
 * @author - Felipe Armoni / Vladimir Dobroff
 * @since - NPS-8384 - Kiosk GUI - Enable Portion-Based Configuration Options on the "Full" Customization Screen - 5383479
 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
// CR - 7797958 - NGK Improvements to CYT Phase 1
function lGetPortionType2(grillCurrentQuantity, grillDefaultQuantity, grillModifiers, grillItemType, grillMaxQuantity)
{	
	var currentQuantity = parseInt(grillCurrentQuantity.toString());
	var defaultQuantity = parseInt(grillDefaultQuantity.toString());
	var modifiers = parseInt(grillModifiers.toString());
	var itemType = grillItemType.toString();
	// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
	// CR - 7797958 - NGK Improvements to CYT Phase 1
	var maxQuantity = parseInt(grillMaxQuantity.toString());
	var type;
	
	// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
	// CR - 7797958 - NGK Improvements to CYT Phase 1
	if (sessionSale.get("IS_NGK") == "true")
	{
		// None
		if (currentQuantity == 0) {
			type = 0;
		} 
		// Light
		else if (currentQuantity == defaultQuantity && modifiers == 1 && itemType == "Composition") {
			type = 1;
		}
		// Light for CanAdd and Comment
		else if (currentQuantity == (defaultQuantity + 1) && modifiers == 1 && (itemType == "CanAdds" || itemType == "Comment")) {
			type = 1;
		}
		// Regular for Composition 
		else if (currentQuantity == defaultQuantity && modifiers == 0  && itemType == "Composition") {
			type = 2;
		}
		// Regular for Comment (swap items)
		else if (currentQuantity == (defaultQuantity + 1) && modifiers == 0 && itemType == "Comment") {
			type = 2;
		}
		// Regular for "CanAdds" 
		else if (currentQuantity == (defaultQuantity + 1) && maxQuantity > 1 && modifiers == 0 && itemType == "CanAdds") {
			type = 2;
		}
		// Extra for Composition
		else if (currentQuantity == (defaultQuantity + 1)  && itemType == "Composition") {
			type = 3;
		}
		// Extra for comment and canAdds (has Regular for canAdds)
		else if (currentQuantity == defaultQuantity + 2 && (itemType == "CanAdds" || itemType == "Comment")) {
			type = 3;
		}
		// Extra for canAdds (when canAdds has not regular)
		else if (currentQuantity == (defaultQuantity + 1) && maxQuantity == 1 && itemType == "CanAdds") {
			type = 3;
		}
		// Unknown
		else {
			type = -1;
		}
	}
	else
	{	
		// None
		if (currentQuantity == 0) {
			type = 0;
		} 
		// Light
		else if (currentQuantity == defaultQuantity && modifiers == 1 && itemType == "Composition") {
			type = 1;
		}
		// Light for CanAdd and Comment
		else if (currentQuantity == (defaultQuantity + 1) && modifiers == 1 && (itemType == "CanAdds" || itemType == "Comment")) {
			type = 1;
		}
		// Regular
		else if (currentQuantity == defaultQuantity && modifiers == 0  && itemType == "Composition") {
			type = 2;
		}
		// Regular for Comment (swap items)
		else if (currentQuantity == (defaultQuantity + 1) && modifiers == 0 && itemType == "Comment") {
			type = 2;
		}
		// Extra
		else if (currentQuantity == (defaultQuantity + 1)  && itemType != "Comment") {
			type = 3;
		}
		// Extra for comment (swap items)
		else if (currentQuantity == defaultQuantity + 2 && itemType == "Comment") {
			type = 3;
		}
		// Unknown
		else {
			type = -1;
		}
	}
	return type;
}

function lCanSetLight(productNode) {
	if (productNode.Department.Id == "QL") {
		if (productNode.Department.ClassDepartment.Id == "A0" && productNode.Department.ClassDepartment.SubClassDepartment.Id == "A0") {
			return false;
		}
		
		if (productNode.Department.ClassDepartment.Id == "A2" && productNode.Department.ClassDepartment.SubClassDepartment.Id == "A2") {
			return false;
		}
	}
	
	return true;
}

function lCanSetOnly(productNode) {
	if (productNode.Department.Id == "QL") {
		if (productNode.Department.ClassDepartment.Id == "A0" && productNode.Department.ClassDepartment.SubClassDepartment.Id == "A0") {
			return false;
		}
		
		if (productNode.Department.ClassDepartment.Id == "A1" && productNode.Department.ClassDepartment.SubClassDepartment.Id == "A1") {
			return false;
		}
	}
	
	return true;
}

/**
 * @brief - This function returns the appropriate i18n text for a portion based item.
 * @author - Felipe Armoni
 * @since - NPS-8384 - Kiosk GUI - Enable Portion-Based Configuration Options on the "Full" Customization Screen - 5383479 
 */
function lGetTextForPortionBasedItem(xmlItem) {
	var portionType;
	var text;
	
	portionType = lGetPortionType(xmlItem);
	
	switch(portionType) {
	
		case 0:
			text = PosCSOI18nGetMessageJS("CSO_PORTION_GRILL_REMOVED");
			break;
			
		case 1:
			text = PosCSOI18nGetMessageJS("CSO_PORTION_GRILL_LIGHT");
			break;
		
		case 2:
			text = "";
			break;
		
		case 3:
			text = PosCSOI18nGetMessageJS("CSO_PORTION_GRILL_EXTRA");
			break;
			
		default:
			text = "";
			break;
	}
	
	return text;
}

/**
 * @brief - This function returns the appropriate i18n text for a portion based item.
 * OBS: This text is normally shown by the FullCutomizationCallout class.
 * @author - Felipe Armoni
 * @since - NPS-8384 - Kiosk GUI - Enable Portion-Based Configuration Options on the "Full" Customization Screen - 5383479 
 */
function lGetTextForPortionBasedCallout(xmlItem) {
	var portionType;
	var text;
	
	portionType = lGetPortionType(xmlItem);
	
	switch(portionType) {
	
		case 0:
			text = PosCSOI18nGetMessageJS("CSO_PORTION_GRILL_NONE");
			break;
			
		case 1:
			text = PosCSOI18nGetMessageJS("CSO_PORTION_GRILL_LIGHT");
			break;
		
		case 2:
			text = PosCSOI18nGetMessageJS("CSO_PORTION_GRILL_REGULAR");
			break;
		
		case 3:
			text = PosCSOI18nGetMessageJS("CSO_PORTION_GRILL_EXTRA");
			break;
			
		default:
			text = "";
			break;
	}
	
	return text;
}

/**
 * @brief - This function returns the appropriate i18n text for a normal item (non protion based).
 * @author - Felipe Armoni
 * @since - NPS-8384 - Kiosk GUI - Enable Portion-Based Configuration Options on the "Full" Customization Screen - 5383479 
 */
function lGetTextForNormalItem(xmlItem) {
	var text;
	
	if (xmlItem.@curQty == "0" && xmlItem.@isDefaultQty == "false") {
		text = PosCSOI18nGetMessageJS("CSO_MSG_GRILL_REMOVED");
	} else if (xmlItem.@curQty == "1") {
		text = xmlItem.@curQty + (xmlItem.@singular == "" ? "" : (" " + xmlItem.@singular));
	} else {
		text = xmlItem.@curQty + (xmlItem.@plural == "" ? "" : (" " + xmlItem.@plural));
	}
	
	return text;
}

/**
 * @brief - This function verifies if a given item matches the portion based criteria, and therefore should be treated as such.
 * @return - True if the current item should be treated as a portion based item or false if the current item should not be treated
 * 			 portion based item.
 * @author - Felipe Armoni
 * @since - NPS-8384 - Kiosk GUI - Enable Portion-Based Configuration Options on the "Full" Customization Screen - 5383479 
 */
function lIsPortionBasedItem(xmlItem) {		
	if ((xmlItem.@canSetLight == "true") && (xmlItem.@type == "Composition") && (xmlItem.@defQty > 0) && (xmlItem.@maxQty > xmlItem.@defQty) && (xmlItem.@minQty == 0)) {
		return true;		
		
	} else if ((xmlItem.@canSetLight == "true") && (xmlItem.@type == "CanAdds") && (xmlItem.@maxQty > xmlItem.@defQty) && (xmlItem.@minQty == 0)) {
		return true;
	
	// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	// Removed condition: NGK does not support portion based comments, so it should return false for them
	//} else if ((xmlItem.@canSetLight == "true") && (xmlItem.@type == "Comment") && (xmlItem.@maxQty > xmlItem.@defQty) && (xmlItem.@minQty == 0)) {
	//	return true;
		
	} else {
		return false;
	}			
}

/**
 * @brief - Get the selected item inside a swapItemsArray.
 * OBS: An item is considered selected when its curren quantity is greater than 0.
 * @param - swapItemsArray - An array containg the swap items. This array should contain the <Item ... /> tags.
 * @param - parentProductCode -
 * @returns - "-1" if there is no selected item in the current swapItemsArray, or a string containg the selected item product code.
 * @author - Felipe Armoni
 * @since - NPS-8385: Kiosk GUI - Enable a Swap Configuration Option on the Full Customization Screen.
 */
function lGetSelectedSwapItem(swapItemsArray, parentProductCode) {

	for (var swapItemCode in swapItemsArray[parentProductCode]) {
		if (swapItemsArray[parentProductCode][swapItemCode].@curQty > 0) {
			return swapItemCode;
		}
	}

	return "-1";
}

/**
 * @brief - Check to see if a given product code belongs to a swap item.
 * @param - swapItemsArray - Array that contains all of the valid swap items.
 * @para - productCode - Product code that one wishes to check.
 * @returns - If the productCode belongs to a swap product, returns the code of the corresponding parent product, otherwise returns an empty string ("").
 * @author - Felipe Armoni
 * @since - NPS-8385: Kiosk GUI - Enable a Swap Configuration Option on the Full Customization Screen.
 */
function lIsSwapProduct(swapItemsArray, productCode) {
	
	var parentProductIndex;
	
	for (parentProductIndex in swapItemsArray) {
		if (typeof (swapItemsArray[parentProductIndex][productCode]) != "undefined"){
			return parentProductIndex;
		}
	}
	
	return "";
}

/**
 * @brief - Creates an array that has by key the code of the Swap products supported by the ingredients of the current product.
 * @param - Main product node.
 * @returns - An array that the first key is the parent product and the second key is the swap product, for example: 
 * swapProductArray[parentProduct][swapProduct]. The value for each element of this array is set to "".
 * @author - Felipe Armoni
 * @since - NPS-8385: Kiosk GUI - Enable a Swap Configuration Option on the Full Customization Screen.
 */
function lGetSwapProductArray(mainProductNode) {
	
	var swapProductArray = [];
	var productNode;
	var monopolyProdCode=lGetCSOUserInterfaceStringParameter("monopolyProductCode", "");
	
	for each (var product in mainProductNode.Composition.Component) {
		// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
		if(monopolyProdCode==product.ProductCode) {
			continue;
		}
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[product.ProductCode.toString()] == undefined || csoProductInfo[product.ProductCode.toString()].xmlNode == undefined) {
			continue;
		}
		
		productNode = csoProductInfo[product.ProductCode.toString()].xmlNode;

		//SDO-5986: KIOSK V4: Regression RC9: When customer try to customize some specific items, Kiosk displays a message and become blocked.
		//In some configurations a coke may be a component of a coke (different code), both with size selection
		if (productNode.@productClass != "PRODUCT" &&
			productNode.@productClass != "VALUE_MEAL" &&
			productNode.@productClass != "CHOICE" &&
			productNode.@productClass != "GROUP") {
			// If a given product has Swap products:
			if (productNode.SizeSelection.Size.length() > 0) {
				
				var swapArray = [];
		
				// Add a reference to the parent product itself (this reference should allways be present at the product-db.xml.
				swapArray[productNode.ProductCode] = "";
		
				// Add a reference to each size if that size is supported by the main product (a size is supported by the main product if
				// it is also present in the comments section of the main product).
				for each (var size in productNode.SizeSelection.Size) {
					if (mainProductNode.Comments.Component.(ProductCode == size.@code).length() > 0) {
						swapArray[size.@code] = "";
					}
				}
				
				if (swapArray.length > 1) {
					swapProductArray[productNode.ProductCode] = swapArray;
				}
			}
		}
	}
	
	return swapProductArray;
}

/**
 * @brief - Sorts an Items array by their index value.
 * @returns - A new sorted items array.
 * @sice - NPS-8385: Kiosk GUI - Enable a Swap Configuration Option on the Full Customization Screen.
 * @author - Felipe Armoni
 */
function lSortGrillItems(itemsArray) {
	
	var newItemsArray = new Array();

	for each(var item in itemsArray) {
		newItemsArray[item.@index] = item;
	}
	
	return newItemsArray;
}

/**
 * @brief - Removes all left whitespace characters from the current
 */
function ltrim(s) {
	if (s == null) {
		return s;
	}
	
	s = String(s); 
	
	var index = 0;
	while(index < s.length && s[index] == ' '){	
		index++; 
	}
	return s.substring(index, s.length);
}

/**
 * @brief - Removes all right whitespace characters from the current
 */
function rtrim(s) {
	if (s == null) {
		return s;
	}
	
	s = String(s); 
	
	var index = s.length - 1;
	while(index > 0 && s[index] == ' ') {
		index-=1;	
	}
	return s.substring(0, index + 1);
}

/**
 * @brief - Removes all left and right whitespace characters from the current
 */
function trim(s) {
	if (s == null) {
		return s;
	}
	
	return ltrim(rtrim(s));
}

/**
 * @brief - Encodes a string into UTF-8
 * @since - NPS-10518 - Price of grill components shows incorrect value in grill screen on CSO Kiosk - ACSI0801225
 */
function encodeUtf8(s)
{
	// CSO-418 - Create a code protection when the Grill View has a wrong size in a component string. 
	try{
		var stringReturn = unescape(encodeURIComponent(s));
		return stringReturn;
	}
	catch(ex){
		PosCSOLog(CSOLOG_INFORMATION, 18436, "encodeUtf8 function failed. The original string was [" + s + "].");
		return "";
	}
  
}

/**
 * @brief - Decodes a UTF-8 string to UTF-16
 * @since - NPS-10518 - Price of grill components shows incorrect value in grill screen on CSO Kiosk - ACSI0801225
 */
function decodeUtf8(s)
{
	// CSO-418 - Create a code protection when the Grill View has a wrong size in a component string. 
	try{
		var stringReturn = decodeURIComponent(escape(s));
		return stringReturn;
	}
	catch(ex){
		PosCSOLog(CSOLOG_INFORMATION, 18437, "decodeUtf8 function failed. The original string was [" + s + "].");
		return "";
	}
}

/**
 * @brief - Verifies if the NP6 kernel context is on grill process.
 * @return - TRUE if the kernel is on grill process.
 * @author - Kalil
 */
function PosCSODoStopWhenOnGrillModeJS(isSilenceMode) {
    // @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	if(grillRecord.GrillOperationsForProduct.length > 0) {
		return !grillRecord.isGrillRunning();
	}
	
	var hlp = new BusinessObjectHelper;
	var isOnGrill = hlp.isGrilling();
	if ((isOnGrill) && (isSilenceMode == null || isSilenceMode == "false")) {
		PosShowMessage("MSG_BC_INV_OPER_WHEN_GRILLING");
	}
	return (!isOnGrill);
}

/**
 *
 * @brief - Verifies if the NP6 kernel context is on grill process.
 * @return - TRUE if the kernel is on grill process.
 * @author - Kalil
 */
function PosCSOGoAheadIfOnGrillModeJS(isSilenceMode) {
	// @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	if(grillRecord.GrillOperationsForProduct.length > 0) {
		return grillRecord.isGrillRunning();
	}
	
	var hlp = new BusinessObjectHelper;
	var isOnGrill = hlp.isGrilling();
	
	if (isOnGrill) {
		return (true);
	} else {
		if ((isSilenceMode == null || isSilenceMode == "false")) {
			PosShowMessage("Invalid action, grill mode is not active.");
		}
	}
	return (false);	
}

/**
 *
 * @brief - Creates a XML event informing the UI to show a image into dialog box
 * @return - True
 * @author - Christiano Meirelles
 */
function PosCSOShowLocalizedImagePopupJS(imageKey, timeout, soundName, value, position) {
	
	var hlp = new BusinessObjectHelper();
	var imageName = hlp.findParamInSectionWide(imageKey, "ImageDB_" + sessionSale.get("LANGUAGE"));
	
	return PosCSODoShowImageMessageJS(imageName, timeout, soundName, value, position);
}

/**
 * PosCSOShowImageOrderId
 *
 * @brief - CES-1786: Kiosk v4 RC3 - Ticket number position on the Manual Counter screen is only configurable via the workflow.xml file.
 * @param timeout - number of seconds to timeout
 * @param soundName - sound configured for this event
 * @return - True if shows the image, otherwise false
 * @author - Carolina Malagrino
*/ 
function PosCSOShowImageOrderId(timeout, soundName) {
	
	var hlp = new BusinessObjectHelper();
	var imageName = hlp.findParamInSectionWide("CSOManualCounterInstructions", "ImageDB_" + sessionSale.get("LANGUAGE"));
	
	/* Get ticket number position if parameter exists */
	var ticketNumberPosition = lGetParameterStr("ticketNumberPosition", "");
	if (ticketNumberPosition == "") {
		ticketNumberPosition = "(140,120),(140,340)";
		API.dbg("CSO PosCSOShowImageOrderId - ticketNumberPosition parameter not defined. Setting to default.");
	}
	
	var position = ticketNumberPosition.replace("|", "),(");
		
	PosSetSessionProperty("ticketNumberPosition", ticketNumberPosition, "false");
	
	var ctx = new SessionContext;
	var value = ctx.get("orderNumber");
	
	return PosCSODoShowImageMessageJS(imageName, timeout, soundName, value, position);
}

/**
 *
 * @brief - Creates a XML event informing the UI to show a image into dialog box
 * @return - TRUE
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoShowImageMessageJS(imageName, timeout, soundName, value, position) {
	
	var parameters = new Array();	
	parameters.push(new Array("ImageName", imageName));
	parameters.push(new Array("Timeout", timeout));
	parameters.push(new Array("SoundName", soundName));
	parameters.push(new Array("Value", value));
	parameters.push(new Array("Position", position));

	PosCSOSendSyncMessageJS("DLG_SYS_SHOW_IMAGE", parameters, new Array(1, 2, 3, 4, 5), "");
    return true;
}

function PosCSOShouldAskSaleTypeJS(screenNumber) {
	var screen = csoScreenInfo[screenNumber];
	
	if (screen == null) {
		API.dbg("CSO - PosCSOShouldAskSaleTypeJS: Screen Type is not valid for Kiosk.");
		return false;
	}
	
	if (csoCurrentState.currentScreen == null) {
		API.dbg("CSO - PosCSOShouldAskSaleTypeJS: There is no current screen. Do not ask for sale type");
		return false;
	}
	
	return (csoCurrentState.currentScreen.type == "2800" && screen.type != "2800");
}

/**
 *
 * @brief - Creates a XML event informing the UI to change its screen number.
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Kalil
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoShowScreenJS(screenNumber, showPrevious) {

	API.dbg("CSO - PosCSODoShowScreenJS: screenNumber: " + screenNumber);
	
	if (csoScreenInfo[screenNumber] == null) {
		API.dbg("CSO - PosCSODoShowScreenJS: Screen Type is not valid for Kiosk.");
		return false;
	}
	
	var xmlParameter = new XML("<Parameter />");
	xmlParameter.@name = "Number";
	xmlParameter.@value = screenNumber;
	
	var xmlEvent = new XML("<Event />");
	xmlEvent.@type = "ASYNC";
	xmlEvent.@name = "DLG_SYS_SHOW_SCREEN";
	
	xmlEvent.appendChild(xmlParameter);
	
	sessionSale.set("csoCurrentScreen", screenNumber);
	csoCurrentState.currentScreen = csoScreenInfo[screenNumber];

	// SDO-6068 - CSO - Local French Promotion - Ability to allow the customer to access the promotion conditions and its offers
	if(csoScreensVisited.length == 0){
		csoItemGroupManager.reset();
	}
	//NPS-9832 (FR:"Ability to return to previous screens;")---->
	if(!showPrevious && (csoScreenInfo[screenNumber].type == 2801 || csoScreenInfo[screenNumber].type == 2802)){
		if(csoScreensVisited.length == 0 || csoScreensVisited[csoScreensVisited.length - 1] != screenNumber){
			csoScreensVisited.push(screenNumber);
		}
	}//<---- NPS-9832 

	return PosSendUICmd(xmlEvent.toXMLString());
}

/**
 *
 * @brief - Creates a XML event informing the UI to change its screen number.
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Ferenc
 * @since - NPS-9832 Kiosk - Replace the black background by a light grey colour - 6384276 (FR:"Ability to return to previous screens;")
 */
function PosCSODoShowPreviousScreenJS(){
	if(csoScreensVisited.length > 0){
		if(csoScreensVisited.length > 1 && csoScreensVisited[csoScreensVisited.length - 1] == csoCurrentState.currentScreen.number){
			csoScreensVisited.pop();
		}
		var lastScreen = csoScreensVisited.pop();
		if(csoScreensVisited.length == 0){
			csoScreensVisited.push(lastScreen);
		}
		return PosCSODoShowScreenJS(lastScreen, true);
	}
	return false;
}

/**
 *
 * @brief - Clears the array that holds the list of visited screens for the "Previous" footer button
 * @author - Ferenc
 * @since - NPS-9832 Kiosk - Replace the black background by a light grey colour - 6384276 (FR:"Ability to return to previous screens;")
 *        - and - SQC-3680 KIOSK V4: When customer browse through the Kiosk tab, select some items, press "Done" and DO NOT confirm the order, "Previous" button doesn't memorize the last tab visited.
 */
function PosCSOCleanVisitedScreensList(){
	csoScreensVisited.splice(0, csoScreensVisited.length);
	return true;
}

/**
 * @brief - Registers the screen and button number pressed on CSO. These numbers are used for suggestive selling filtering.
 * @author - Ferenc Balassa
 * @since - SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
 */
function PosCSORegisterMainMenuTabJS(screenNumber, buttonNumber)
{	
	if (sessionSale.get("IS_NGK") != "true")
	{
		if(screenNumber != null && screenNumber != "" && buttonNumber != null && buttonNumber != ""){
			csoSelectedMainMenu.screenNumber = screenNumber;
			csoSelectedMainMenu.buttonNumber = buttonNumber;
		}
	}
	return true;
}

/**
 * @brief - Offers suggestive sale products for the user, if conditions meet.
 * @author - Ferenc Balassa
 * @since - SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
 */
function PosCSOGetSuggestiveSaleProducts(soldProductCode/*suggestive sale is tirggered after selling this product*/) {
	var userSelectedProducts = new Array();
	var currentLang = sessionSale.get("LANGUAGE");
	var saleType = hlp.getSaleType();
	
	// SDO-6842 - CSO - v4 - RC11 - Script error on end of sale
	var entry = "";
	
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	if (csoProductInfo[soldProductCode] != undefined && 
	    csoProductInfo[soldProductCode].xmlNode != undefined && 
	    csoProductInfo[soldProductCode].xmlNode.SizeSelection != undefined)
	{
		for each (var size in csoProductInfo[soldProductCode].xmlNode.SizeSelection.Size)
		{
			if (size.@code != undefined && size.@code == soldProductCode)
			{
				if (size.@entry != undefined)
				{
					entry = size.@entry.toString();
					break;
				}
			}
		}
	}
	
	for each (sp in csoSuggestivePromotions) {
		var validProducts = lGetValidProducts(sp, entry, saleType);
		if (validProducts.length > 0) {
			API.dbg("CSO - Suggestive Sale - valid products found:"+validProducts.toString());
			var productCodes = lGetUserSelection(sp, validProducts, currentLang);
			if (productCodes != "") {
				//SQC-4064 - Kiosk Local Promotion Drop 2 - Kiosk does not display Loop Meal when a suggested product is ordered
				var choicesCodes = productCodes.split("|");
				var first = true;
				for each (var productCode in choicesCodes) {
					if (first) {
						userSelectedProducts.push({ code:productCode, joinToMenu:sp.joinToMenu });
						first = false;
					}
					else {
						userSelectedProducts.push({ code:productCode, joinToMenu:false });
					}
				}
			}
		}
	}
	
	if(userSelectedProducts.length > 0){
		var log = ""; 
		for each(p in userSelectedProducts){ log += "{ code:"+p.code+", joinToMenu:"+sp.joinToMenu+" } "; }
		API.dbg("CSO - Suggestive Sale - user selected products:"+log);
	}
	
	return userSelectedProducts;
	
	function lGetValidProducts(sp, entry, saleType){
		var validProducts = new Array();

		if(sp.screens[csoSelectedMainMenu.screenNumber] != null){
			if(sp.screens[csoSelectedMainMenu.screenNumber].indexOf(csoSelectedMainMenu.buttonNumber) > -1){
				if((sp.size == "" || entry == "" || sp.size == entry)){
					if(lIsDaypartValid(sp.dayParts)){
						// NPS-12590 - NP6.1.21RC8HF6 - FR-SuggestiveSelling-Product issue - ACSI1690503
						var inactiveProducts = new Array();
						var daypartInvalid = new Array();
						var pricenodeInvalid = new Array();
						var salableInvalid = new Array();
						var outageInvalid = new Array();
						var salestypeInvalid = new Array();
						for each(code in sp.productGroupProducts){
							// NPS-12590 - NP6.1.21RC8HF6 - FR-SuggestiveSelling-Product issue - ACSI1690503
							if (csoProductInfo[code] == undefined ||
								!csoProductInfo[code].isValid)
							{
								inactiveProducts.push(code);
								continue;
							}
							
							if(!bCheckProductDayPartCode(code)){
								daypartInvalid.push(code);
								continue;
							}
							if(!PosCheckIfPriceNodeIsValid(csoProductInfo[code].xmlNode)){
								pricenodeInvalid.push(code);
								continue;
							}
							if(csoProductInfo[code].xmlNode.@salable != "true"){
								salableInvalid.push(code);
								continue;
							}
							if(isProductOutage(code)){
								outageInvalid.push(code);
								continue;
							}
							if((saleType == 0 && csoProductInfo[code].xmlNode.SalesType.@eatin == "true") 
							|| (saleType == 1 && csoProductInfo[code].xmlNode.SalesType.@takeout == "true")){
							validProducts.push(code);
							} else {
								salestypeInvalid.push(code);
							}
						}
						// NPS-12590 - NP6.1.21RC8HF6 - FR-SuggestiveSelling-Product issue - ACSI1690503
						if(inactiveProducts.length > 0) { API.dbg("CSO - Suggestive Sale - active validation failed for product(s) '" + inactiveProducts.toString() + "' in promotion with productgroup='" + sp.productGroup + "'."); }
						if(daypartInvalid.length > 0) { API.dbg("CSO - Suggestive Sale - daypart validation failed for product(s) '"+daypartInvalid.toString()+"' in promotion with productgroup='"+sp.productGroup+"'."); }
						if(pricenodeInvalid.length > 0) { API.dbg("CSO - Suggestive Sale - price node validation failed for product(s) '"+pricenodeInvalid.toString()+"' in promotion with productgroup='"+sp.productGroup+"'."); }
						if(salableInvalid.length > 0) { API.dbg("CSO - Suggestive Sale - salable validation failed for product(s) '"+salableInvalid.toString()+"' in promotion with productgroup='"+sp.productGroup+"'."); }
						if(outageInvalid.length > 0) { API.dbg("CSO - Suggestive Sale - outage validation failed for product(s) '"+outageInvalid.toString()+"' in promotion with productgroup='"+sp.productGroup+"'."); }
						if(salestypeInvalid.length > 0) { API.dbg("CSO - Suggestive Sale - sales type validation failed for product(s) '"+salestypeInvalid.toString()+"' in promotion with productgroup='"+sp.productGroup+"'."); }
					} else {
						API.dbg("CSO - Suggestive Sale - daypart validation failed: promotion with productgroup='"+sp.productGroup+"' does not have valid dayparts for now.");
					}
				} else {
					API.dbg("CSO - Suggestive Sale - size validation failed: promotion with productgroup='"+sp.productGroup+"', size='"+sp.size+"' does not match entry='"+entry+"', the size of previously sold product.");
				}
			} else {
				API.dbg("CSO - Suggestive Sale - screen validation failed: promotion with productgroup='"+sp.productGroup+"' does not contain button '"+csoSelectedMainMenu.buttonNumber+"' for screen number '"+csoSelectedMainMenu.screenNumber+"'.");
			}
		} else {
			API.dbg("CSO - Suggestive Sale - screen validation failed: promotion with productgroup='"+sp.productGroup+"' does not contain screen number '"+csoSelectedMainMenu.screenNumber+"'.");
		}

		return validProducts;
	}
	
	function lIsDaypartValid(dayparts){
		if(dayparts.length == 0 || csoConfigurationInfo.dayParts.length == 0) return true;

		var days = { 0:"SUN", 1:"MON", 2:"TUE", 3:"WED", 4:"THU", 5:"FRI", 6:"SAT" };
		
		var matchingDaypartNameFound = false;
		for each(name in dayparts){
			for each(daypart in csoConfigurationInfo.dayParts){
				if(daypart.name == name){
					matchingDaypartNameFound = true;
					var currentTime = new Date();
					var day = currentTime.getDay();
					var weekDay = daypart.weekDays[days[day]];

					if(weekDay == null){
						return true;
					}

					var dayPartStartTime = new Date();
					var dayPartEndTime = new Date();
					
					var time = weekDay.startTime.split(":");
					var startTimeHH = Number(time[0]);
					var startTimeMM = Number(time[1]);
					
					time = weekDay.endTime.split(":");
					var endTimeHH = Number(time[0]);
					var endTimeMM = Number(time[1]);

					dayPartStartTime.setHours(startTimeHH, startTimeMM, 0);
					dayPartEndTime.setHours(endTimeHH, endTimeMM, 0);
					
					if ((currentTime >= dayPartStartTime) && (currentTime <= dayPartEndTime))
					{
						return true;
					}
				}
			}
		}
		return !matchingDaypartNameFound;
	}
	
	function lGetUserSelection(sp, validProducts, currentLang){
		//SQC-4064 - Kiosk Local Promotion Drop 2 - Kiosk does not display Loop Meal when a suggested product is ordered
		var selectionXML = new XML("<SuggestiveSale />");
		var productsXML = new XML("<Products />");
		
		for each (var code in validProducts) {
			productsXML.appendChild(lCreateProductSuggestiveSellingXML(code, false));
		}
		
		selectionXML.appendChild(productsXML);
		
		var selectedProductCodes;
		
		CreateEventFile(selectionXML.toXMLString());
		selectedProductCodes = PosShowCalculator("DLG_SUGGESTIVE_SALE_CHOICES", "", "1", "0");
		
		return selectedProductCodes;
	}
	
	//SQC-4064 - Kiosk Local Promotion Drop 2 - Kiosk does not display Loop Meal when a suggested product is ordered		
	function lCreateProductSuggestiveSellingXML(productCode, costIncluded){
		var productSuggestiveSellingXML = new XML("<Product />");
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined) {
			return null;
		}
		
		var product = csoProductInfo[productCode];
		
		productSuggestiveSellingXML.@code = productCode;
		if(!costIncluded) productSuggestiveSellingXML.@price = product.unitPrice.getCurrent();
		productSuggestiveSellingXML.@image = lGetProductImage(product);
		productSuggestiveSellingXML.@name = lGetProductName(product);
		productSuggestiveSellingXML.@isSoldOut = isProductOutage(productCode);
		
		if (product.xmlNode.Composition){
			lCreateCompositionSuggestiveSellingXML(productSuggestiveSellingXML, product, costIncluded);
		}
		if (product.xmlNode.Choices){
			lCreateChoicesSuggestiveSellingXML(productSuggestiveSellingXML, product, costIncluded);
		}
		
		return productSuggestiveSellingXML;
	}
	
	function lCreateChoiceSuggestiveSellingXML(choiceCode, costIncluded){
		var choiceSuggestiveSellingXML = new XML("<Choice />");
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[choiceCode] == undefined) {
			return null;
		}
		
		var choice = csoProductInfo[choiceCode];
		
		choiceSuggestiveSellingXML.@code = choiceCode;
		if(!costIncluded) choiceSuggestiveSellingXML.@price = choice.unitPrice.getCurrent();
		choiceSuggestiveSellingXML.@group = choice.xmlNode.ChoiceGroup.toString();
		choiceSuggestiveSellingXML.@image = lGetProductImage(choice);
		choiceSuggestiveSellingXML.@name = lGetProductName(choice);
		choiceSuggestiveSellingXML.@isSoldOut = isProductOutage(choiceCode);
		
		if (choice.xmlNode.Composition){
			lCreateCompositionSuggestiveSellingXML(choiceSuggestiveSellingXML, choice, costIncluded);
		}
		if (choice.xmlNode.Choices){
			lCreateChoicesSuggestiveSellingXML(choiceSuggestiveSellingXML, choice, costIncluded);
		}
		
		return choiceSuggestiveSellingXML;
	}
	
	function lCreateCompositionSuggestiveSellingXML(productSuggestiveSellingXML, product, costIncluded){
		var componentsCostIncluded = false;
		
		for each (var componentXML in product.xmlNode.Composition.Component){
			var componentCode = componentXML.ProductCode.toString();
		
			componentsCostIncluded = costIncluded || lIsCompositionComponentsCostIncluded(product, componentCode);
			
			productSuggestiveSellingXML.appendChild(lCreateProductSuggestiveSellingXML(componentCode, componentsCostIncluded));
		}
	}
		
	function lCreateChoicesSuggestiveSellingXML(productSuggestiveSellingXML, product, costIncluded){
		var componentsCostIncluded = false;
		
		for each (var componentXML in product.xmlNode.Choices.Component){
			var componentCode = componentXML.ProductCode.toString();
			
			componentsCostIncluded = costIncluded || lIsChoiceComponentsCostIncluded(product, componentCode);
			productSuggestiveSellingXML.appendChild(lCreateChoiceSuggestiveSellingXML(componentCode, componentsCostIncluded));
		}
	}
			
	function lIsChoiceComponentsCostIncluded(product, componentCode){
		return product.xmlNode.Choices.Component.(ProductCode == componentCode).CostInclusive.toString() == "true";
	}
	
	function lIsCompositionComponentsCostIncluded(product, componentCode){
		return product.xmlNode.Composition.Component.(ProductCode == componentCode).CostInclusive.toString() == "true";
	}
	
	function lGetProductImage(product){
		return (product.csoImages.largeImage || product.csoImages.smallImage);
	}
	
	function lGetProductName(product){
		var currentLanguage = sessionSale.get("LANGUAGE");
		return (product.names[currentLanguage].csoName || "");
	}
}

/**
 *
 * @brief - Creates a XML event informing the UI to change its screen number.
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Kalil
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoPlaySoundJS(soundName) {
	var xml = lCreateKioskEvent("ASYNC", "DLG_SYS_PLAYSOUND", new Array("SoundName|" + soundName));
	return PosSendUICmd(xml);
}

/**
 *
 * @brief - Creates a XML event informing the UI to play a sound.
 * @return - TRUE
 * @author - Vladimir
 * @since - CSO-261 - NGK - ADA - Magnifier implementation - 7736790
 */
function PosCSODoPlaySoundFromParameterJS(parameterName)
{
    if (parameterName)
	{
	    var soundName = lGetCSOUserInterfaceStringParameter(parameterName, "");
		if (soundName)
		{
			var xml = lCreateKioskEvent("ASYNC", "DLG_SYS_PLAYSOUND", new Array("SoundName|" + soundName));
			PosSendUICmd(xml);
		}
	}
	
	return true;
}

/**
 *
 * @brief - Creates a XML event informing the UI to open the Barcode's dialog.
 * @param - attemptTimes - Number of attempts to read the barcode - since NPS-9457
 * @param - detectInterval - Interval in seconds to detect the barcode - since NPS-9457
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Leandro
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoShowBarcodeReaderJS(attemptTimes, detectInterval) {
	if (sessionSale.get("IS_NGK") == "true")
	{
		var xml = lCreateKioskEvent("ASYNC", "DLG_SYS_SHOW_BARCODEREADER", new Array("Attempts|" + attemptTimes, "DetectInterval|" + detectInterval));
		return PosSendUICmd(xml);
	}
	else
	{
		// CSO-21 - Create parameter to enable / disable keypad in barcode scanner
		var showKeypad = lGetParameterStr("barcodeScannerShowKeypad", "true");
		var xml = lCreateKioskEvent("ASYNC", "DLG_SYS_SHOW_BARCODEREADER", new Array("ShowKeypad|" + showKeypad, "Attempts|" + attemptTimes, "DetectInterval|" + detectInterval));
		return PosSendUICmd(xml);
	}
}

/**
 *
 * @brief - Creates a XML event informing the UI to close the Screen Popup.
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Leandro
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoCloseScreenPopupJS() {
	var xml = lCreateKioskEvent("ASYNC", "DLG_SYS_CLOSE_SCREENPOPUP", new Array());
	return PosSendUICmd(xml);
}

/**
 *
 * @brief - Creates a XML event informing the UI to close the all Screens Popup.
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Caio
 * @since - SQC-2002 CSO Redesign - The "timeout" of the button "Resize" isn't working.
 */
function PosCSODoCloseAllScreenPopupJS() {
	var xml = lCreateKioskEvent("ASYNC", "DLG_SYS_CLOSE_All_SCREENPOPUP", new Array());
	return PosSendUICmd(xml);
}

/**
 *
 * @brief - Local function responsible for creating the XML event for the TP UI.
 * @return - view - XML event.
 * @author - Kalil
 */
function lCreateKioskEvent(type, name, params) {
    var xml = new StringBuffer();
    xml.append(GLOBAL_UTF8_PROLOG_XML);
    xml.append("<Event ");
    {
        xml.append(" type=\"" + type + "\"");
        xml.append(" name=\"" + name + "\"");
        xml.append(">\n");
        for (var i=0; i<params.length; i++) {
			var p = params[i].split("|");
			xml.append("\t<Parameter name=\"" + p[0] + "\" value=\"" + p[1] + "\"/>\n");
        }
    }
    xml.append("</Event>");
    return xml.toString();
}

/**
 *
 * @brief - Verifies if there is a transaction in progress, if there isn't it shows a msg box and return false.
 * @return - rval - True
 * @author - Kalil
 */
function PosCSOIsTrnInProgressJS(isSilenceMode) {
	var isInProgress = (!PosNotATransactionInProgress("true"));
	
	if (isInProgress) {
		return (true);
	} else {
		if (isSilenceMode == 'false') {
			PosShowMessage("MSG_BC_NO_ORDER_IN_PROGRESS");
		}
		return (false);
	}
}

/**
 * @brief Function to display a sync message
 *
 * @param eventType
 * @param btnTexts - array with button texts (do not use char '|' inside the text)
 * @param btnValues - array with button values (do not use char '|' inside the value)
 * @param winTitle - window title
 * @return - Value selected | NULL = when cancel has been pressed.
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOSendSyncMessageJS(eventType, btnTexts, btnValues, winTitle) {
	var retValue = null;
	
	var tmpBtnTexts = new Array();
	for each(item in btnTexts) {
		//Array type
		if (item != null && typeof(item) == 'object' && item.length) {
			tmpBtnTexts.push(item.join("@"));
		} else {
			tmpBtnTexts.push(item);
		}
	}
	
	var hasSuceeded = PosItemSelection(tmpBtnTexts.join("|"), btnValues.join("|"), eventType,  winTitle);
	if (hasSuceeded) {
		retValue = sessionSale.get("SelectedButtonValue");
		API.dbg("[CSO - PosCSOSendSyncMessageJS] selected value = " + retValue);
	} else {
		API.dbg("[CSO - PosCSOSendSyncMessageJS] cancel has been pressed");
	}
	return retValue;
}

/**
 * @brief - Shows a synchronous pop up containing a given text.
 * @param - message - Text to be displayed inside the PopUp (must be a i18n tag).
 * @param - timeout - Timeout of the pop up in seconds (optional).
 * @authr - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 */
function PosCSOShowSimpleTextMessageJS(message, timeout) {
	
	var messageXml, parameter;
	
	if(timeout == undefined) {
		timeout = -1;
	}
	
	message = PosCSOI18nGetMessageJS(message);
	
	var parameters = new Array();
	parameters.push(new Array("Timeout", timeout));

	PosCSOSendSyncMessageJS("DLG_SIMPLE_MSG", parameters, new Array(1), message);
    return true;
}

/**
 * @brief Function to display a balloon message
 *
 * @param text - message title
 * @param optionTrue - button's text
 * @param optionFalse - button's text
 * @return - option selected
 * @author - Leandro
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOShowBalloonMessageJS(text, optionTrue, optionFalse) {
	return PosCSOSendSyncMessageJS("DLG_BALLOON", new Array(PosCSOI18nGetMessageJS(optionTrue), PosCSOI18nGetMessageJS(optionFalse)),
		new Array("true", "false"), text) == "true";
}

/**
 * @brief - This function displays a balloon message with buttons that have two lines of text.
 * The button/option that the user chose is stored on the MULTILINE_BALLOON_SELECTED_OPTION inside the sessionSale object.
 * @param text - Message title
 * @param optionTrue1stTitle - First line of the left button's text.
 * @param optionTrue2ndTitle - Second line of the left button's text.
 * @param optionFalse1stTitle - First line of the right button's text.
 * @param optionFalse2ndTitle - Second line of the right button's text.
 * @returns - True if the user clicked on a button, or false if the user did not click on any button and the timeout expired.
 * @author - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 */
function PosCSOShowMultilineBalloonMessageJS(text, optionTrue1stTitle, optionTrue2ndTitle, optionFalse1stTitle, optionFalse2ndTitle) {
	
	var popupResult;
	var result;
	
	popupResult = PosCSOSendSyncMessageJS("DLG_MULTILINE_BALLOON", new Array(PosCSOI18nGetMessageJS(optionTrue1stTitle), PosCSOI18nGetMessageJS(optionTrue2ndTitle),
				  PosCSOI18nGetMessageJS(optionFalse1stTitle), PosCSOI18nGetMessageJS(optionFalse2ndTitle)),
				  new Array("option1Selected", "option1Selected", "option2Selected", "option2Selected"), text);
		
	if (popupResult == null) {
		result = false;
		
	} else {
		sessionSale.set("MULTILINE_BALLOON_SELECTED_OPTION", popupResult);
		result = true;
	}
		
	return result;
}

/**
 * @brief - Process the result of the the multiline balloon dialog.
 * @returns - True if the first option was selected or false if the second option was selected.
 * @author - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 */
function PosCSOProcessMultilineBalloonResultJS() {
	
	var balloonResult = sessionSale.get("MULTILINE_BALLOON_SELECTED_OPTION");
	var result;
		
	if (balloonResult == "option1Selected") {
		result = true;
	
	} else {
		result = false;
		
	}
	
	return result;
}

/**
 * @brief Function to display a simple ask
 *
 * @param text - message title
 * @param optionTrue - button's text
 * @param optionFalse - button's text
 * @return - option selected
 * @author - Leandro
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOAskSimpleJS(text, optionTrue, optionFalse) {
	return PosCSOSendSyncMessageJS("SYNC_DLG", new Array(PosCSOI18nGetMessageJS(optionTrue), PosCSOI18nGetMessageJS(optionFalse)),
		new Array("true", "false"), text) == "true";
}

/**
 * @brief - Function that displays a simple dialog to ask a question.
 * @param - text - Dialog title
 * @param - optionTrueText - Text that will be displayed inside the first button.
 * @param - optionTrueImage - Image that will be displayed inside the first button.
 * @param - optionFalseText - Text that will be displayed inside the second button.
 * @param - optionFalseImage - Image that will be displayed inside the second button.
 * @param - buttonBackground (optional) - Background color of the buttons. If no color is specified, the default "GRAY" will be used.
 * @param - buttonBorderBackground (optional) - Background color of the buttons' border. If no color is specified, the default "LIGHTGRAY" will be used.
 * @retuns - True if the user clicked on the first button or false if the user clicked on the second button.
 * @since - WWR-1527 - New defects requiring changes to Kiosk GUI V4 to align with designs by Concept & Design
 * @author - Felipe Armoni
 */
function PosCSOAskSimpleWithImagesJS(text, optionTrueText, optionTrueImage, optionFalseText, optionFalseImage, buttonBackground, buttonBorderBackground) {
	
	if (buttonBackground == undefined)
		buttonBackground = "GRAY";
	
	if (buttonBorderBackground == undefined)
		buttonBorderBackground = "LIGHTGRAY";
	
	return PosCSOSendSyncMessageJS("SYNC_IMG_DLG", new Array(PosCSOI18nGetMessageJS(optionTrueText) + "@" + optionTrueImage + "@" + buttonBackground + "@" + buttonBorderBackground, PosCSOI18nGetMessageJS(optionFalseText) + "@" + optionFalseImage + "@" + buttonBackground + "@" + buttonBorderBackground),
			new Array("true", "false"), text) == "true";
}

/**
* @brief - Function that displays a simple dialog to ask a question.
* @param - text - Dialog title
* @param - optionTrueText - Text that will be displayed inside the first button.
* @param - optionTrueImage - Image that will be displayed inside the first button.
* @param - optionFalseText - Text that will be displayed inside the second button.
* @param - optionFalseImage - Image that will be displayed inside the second button.
* @param - buttonBackground (optional) - Background color of the buttons. If no color is specified, the default "GRAY" will be used.
* @param - buttonBorderBackground (optional) - Background color of the button's border. If no color is specified, the default "LIGHTGRAY" will be used.
* @param - centeredLayoutColors (optional) - Additional configuration parameters separated by '|'
*          Format:   "Popup BG color|Popup title color|Sale type button font color|Sale type button font size|Cancel button BG color|Cancel button border color|Cancel button font color"
*          Default:   "FORESTGREEN" |      "WHITE"    |      "FORESTGREEN"	      |          "20"            |      "DARKGREEN"     |     "DARKGREEN"         |       "WHITE"
* @return - "In" if the user clicked on the first button, "Out" if the user clicked on the second button or "Cancel" if the user clicked the third button.
* @since - NPS-9835 - Kiosk - Add a button to cancel the window and Centre the pictures in the window - 6384301
* @author - Vivian Cury, Vladimir Dobroff
*/
function PosCSOAskSimpleCenteredJS(text, optionTrueText, optionTrueImage, optionFalseText, optionFalseImage, buttonBackground, buttonBorderBackground, centeredLayoutColors) {
    
	if (centeredLayoutColors == undefined) centeredLayoutColors = "";
	var centeredPropertiesList = centeredLayoutColors.split("|");
	
	var popupTitle = text;
	var popupTitleColor = (centeredPropertiesList[1] == undefined || centeredPropertiesList[1] == "") ? "WHITE" : centeredPropertiesList[1];
	var popupBackgroundColor = (centeredPropertiesList[0] == undefined || centeredPropertiesList[0] == "") ? "FORESTGREEN" : centeredPropertiesList[0];
	
	var buttonEatInText = PosCSOI18nGetMessageJS(optionTrueText);
	var buttonEatInImage = optionTrueImage;
	var buttonEatInBackgroundColor = (buttonBackground == undefined) ? "GRAY" : buttonBackground;
	var buttonEatInBorderColor = (buttonBorderBackground == undefined) ? "LIGHTGRAY" : buttonBorderBackground;
	var buttonEatInFontColor = (centeredPropertiesList[2] == undefined || centeredPropertiesList[2] == "") ? "FORESTGREEN" : centeredPropertiesList[2];
	var buttonEatInFontSize = (centeredPropertiesList[3] == undefined || centeredPropertiesList[3] == "") ? "20" : centeredPropertiesList[3];
	
	var buttonEatOutText = PosCSOI18nGetMessageJS(optionFalseText);
	var buttonEatOutImage = optionFalseImage;
	var buttonEatOutBackgroundColor = (buttonBackground == undefined) ? "GRAY" : buttonBackground;
	var buttonEatOutBorderColor = (buttonBorderBackground == undefined) ? "LIGHTGRAY" : buttonBorderBackground;
	var buttonEatOutFontColor = (centeredPropertiesList[2] == undefined || centeredPropertiesList[2] == "") ? "FORESTGREEN" : centeredPropertiesList[2];
	var buttonEatOutFontSize = (centeredPropertiesList[3] == undefined || centeredPropertiesList[3] == "") ? "20" : centeredPropertiesList[3];
	
	var buttonCancelText = PosCSOI18nGetMessageJS("CSO_MSG_CANCEL");
	var buttonCancelBackgroundColor = (centeredPropertiesList[4] == undefined || centeredPropertiesList[4] == "") ? "DARKGREEN" : centeredPropertiesList[4];
	var buttonCancelBorderColor = (centeredPropertiesList[5] == undefined || centeredPropertiesList[5] == "") ? "DARKGREEN" : centeredPropertiesList[5];
	var buttonCancelFontColor = (centeredPropertiesList[6] == undefined || centeredPropertiesList[6] == "") ? "WHITE" : centeredPropertiesList[6];

	var result = PosCSOSendSyncMessageJS("DLG_ASK_CENTERED_ORDER_SALE_TYPE",
									new Array(popupTitleColor + "@" + popupBackgroundColor,
											  buttonEatInText + "@" + buttonEatInImage + "@" + buttonEatInBackgroundColor + "@" + buttonEatInBorderColor + "@" + buttonEatInFontColor + "@" + buttonEatInFontSize,
											  buttonEatOutText + "@" + buttonEatOutImage + "@" + buttonEatOutBackgroundColor + "@" + buttonEatOutBorderColor + "@" + buttonEatOutFontColor + "@" + buttonEatOutFontSize,
											  buttonCancelText + "@" + buttonCancelBackgroundColor + "@" + buttonCancelBorderColor + "@" + buttonCancelFontColor),
									new Array("In", "Out", "Cancel"), text);
	
	return result;

}

/**
 * @brief Function to display a Eat Location question
 * Note: The button background color, and the button background border will only be valid for image buttons.
 *
 * @param text - Eat location message
 * @param textIn - "Eat in" text
 * @param textOut - "Take out" text
 * @param isBalloon (optional) - if use balloon dialog
 * @return - true
 * @author - Leandro
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 * @remarks
 * This BC uses the following parameters for images in the Eat In or Take Out buttons and for background and border collor:
 * 		<Configuration type="POS">
 *			<Section name="CSO.UserInterface">
 *				<Parameter name="eatInImage value="image1_name.png""/>
 *				<Parameter name="takeOutImage" value="image2_name.png"/>
 *				<Parameter name="saleTypeButtonBackgroundColor" value="RED"/>
 *				<Parameter name="saleTypeButtonBackgroundBorder" value="GREY"/>
 *			</Section>
 *		</Configuration>
 *
 */
function PosCSOAskSaleTypeJS(text, textIn, textOut, isBalloonDialog) {
	var result;
	
	if (isBalloonDialog == "true") {
		if (sessionSale.get("SALETYPEDEFINED") ==  "true") {
			return true;
		}
		
		result = PosCSOShowBalloonMessageJS(text, textIn, textOut);
		
	} else {
	
		var imageIn = lGetParameterStr("eatInImage", undefined);
		var imageOut = lGetParameterStr("takeOutImage", undefined);
		var centeredLayout = lGetParameterStr("saleTypeCenteredLayout", undefined);
		var centeredLayoutColors;
		
		if (centeredLayout != undefined && centeredLayout == "true") {
		
			centeredLayoutColors = lGetParameterStr("saleTypeCenteredLayoutColors", undefined);
		   
			if (centeredLayoutColors == undefined || centeredLayoutColors == "") {
				API.dbg("The parameter saleTypeCenteredLayout is set to 'true' but saleTypeCenteredLayoutColors is not set.");
			}
		
			var buttonBackgroundColor = lGetParameterStr("saleTypeButtonBackgroundColor", undefined);
			var buttonBackgroundBorder = lGetParameterStr("saleTypeButtonBackgroundBorder", undefined);

			if (imageIn == undefined) imageIn = "";
			if (imageOut == undefined) imageOut = "";

			var buttonPressed = PosCSOAskSimpleCenteredJS(text, textIn, imageIn, textOut, imageOut, buttonBackgroundColor, buttonBackgroundBorder, centeredLayoutColors);
			
			if ( buttonPressed == "Cancel" )
			{
				return false;
			}

			result = ( buttonPressed == "In" );
			
		} else {
		
			if (imageIn == undefined || imageIn == "" || imageOut == undefined || imageOut == "") { // If one (or both) the images are undefined shows the standard popup with only text.
				result = PosCSOAskSimpleJS(text, textIn, textOut);
			} else { // If the images are specified
				var buttonBackgroundColor = lGetParameterStr("saleTypeButtonBackgroundColor", undefined);
				var buttonBackgroundBorder = lGetParameterStr("saleTypeButtonBackgroundBorder", undefined);
				result = PosCSOAskSimpleWithImagesJS(text, textIn, imageIn, textOut, imageOut, buttonBackgroundColor, buttonBackgroundBorder);
			}
		}
		
		PosSendUICmd('<Event type="ASYNC" name="DAT_SYS_REMOVE_BLOCK_LAYER"/>');
		
		var eatInOnlyMessage = PosCSOI18nGetMessageJS("CSO_MSG_EATIN_ONLY");
		var takeOutOnlyMessage = PosCSOI18nGetMessageJS("CSO_MSG_TAKEOUT_ONLY");
		
		var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_HIDE_PRODUCTS_BY_SALETYPE"/>');
		var saleTypeXml = new XML('<SaleType />');
		
		if (result) {
			saleTypeXml.@selectedType = "EATIN";
			
			if (takeOutOnlyMessage != "CSO_MSG_TAKEOUT_ONLY") {
				saleTypeXml.@notAvailableMessage = takeOutOnlyMessage;
			}
		} else {
			saleTypeXml.@selectedType = "TAKEOUT";
			
			if (eatInOnlyMessage != "CSO_MSG_EATIN_ONLY") {
				saleTypeXml.@notAvailableMessage = eatInOnlyMessage;
			}
		}

		eventXml.appendChild(saleTypeXml);
		PosSendUICmd(eventXml.toXMLString());
	}
	
	//type of sale (0=EAT IN;1=TAKE OUT;2=OTHER)
	if (result)
		PosSetSaleType(0);
	else
		PosSetSaleType(1);
		
	sessionSale.set("SALETYPEDEFINED", "true");
	
	return true;
}

function PosCSOClearHideProductsBySaleTypeJS() {
	return PosSendUICmd('<Event type="ASYNC" name="DAT_SYS_CLEAR_HIDE_PRODUCTS_BY_SALETYPE"/>');
}

/**
 *
 * @brief This function gets message from LocalMessage and SysMessage
 * @param key - message's key
 * @return message
 * @author Leandro, Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOI18nGetMessageJS(key, param1, param2) {
	var localMessage = key;
	
	// CSO-191 - Product descriptions for "add" items not appearing in NGK basket - NW-36
	if (typeof(param1) != "undefined" && typeof(param2) != "undefined") {
		localMessage = API.getLocalMsg(key, [param1, param2]);
	} else if (typeof(param1) != "undefined") {
		localMessage = API.getLocalMsg(key, [param1]);
	} else {
		localMessage = API.getLocalMsg(key);
	}
	
	if (key != localMessage)
		return localMessage;
	
	var hlp=new BusinessObjectHelper;
	
	if (typeof(param1) != "undefined" && typeof(param2) != "undefined") {
		return hlp.getSysMessage(key, param1, param2);
	} else if (typeof(param1) != "undefined") {
		return hlp.getSysMessage(key, param1);
	} else {
		return hlp.getSysMessage(key);
	}
}

/**
 * @brief Function to ask to insert card when is required
 *
 * @return - false when card is required and not inserted
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOAskInsertCardJS() {
	var hlp = new BusinessObjectHelper;
	var requireCardFirst = lGetCSOUserInterfaceStringParameter("requireCardFirst", "false").toLowerCase();
	if (requireCardFirst == 'true' && GLOBAL_CARD_READER_EVT != "1")
	{
	    var curLangCode = sessionSale.get("LANGUAGE");
	    var curLang = curLangCode.split("_");			
		PosCSOShowMediaJS("CSO_MSG_CARD_REQUIRED", hlp.findParamInSectionConfig("CSOSwipeCardFirst", "ImageDb_" + curLang[0]));
		return false;
	} 
	else 
	{
		return true;
	}
}

/**
 * @brief Function to display a media message
 * @param msg - Text to be displayed
 * @param media - Media to be displayed (Image or video)
 * @param cancelOnTimeout - true|false - Execute cancel order on screen timeout 
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOShowMediaCancelOnTimeoutJS(msg, media) {
	var params = Array("Msg|" + msg, 
	                   "Media|" + media,
					   "CancelOnTimeout|true");
	var xml = lCreateKioskEvent("ASYNC", "DLG_SYS_SHOW_MEDIA", params);
	return PosSendUICmd(xml);
}

/**
 * @brief Function to ask to remove card
 * @return - false when card is inserted
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOAskRemoveCardJS() {
	if (PosNotATransactionInProgress("false")) {
		var hlp = new BusinessObjectHelper;
		if (GLOBAL_CARD_READER_EVT == "1")
		{
			var curLangCode = sessionSale.get("LANGUAGE");
			var curLang = curLangCode.split("_");			
			PosCSOShowMediaJS("CSO_MSG_CARD_REMOVE", hlp.findParamInSectionConfig("CSOSwipeCardFirst", "ImageDb_" + curLang[0]));
			return false;
		}
		else 
		{
			return true;
		}
	}
}

/**
 * @brief Function to display a media message
 *
 * @param msg - Text to be displayed
 * @param media - Media to be displayed (Image or video)
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOShowMediaJS(msg, media) {
	var params = Array("Msg|" + msg, 
	                   "Media|" + media);
	var xml = lCreateKioskEvent("ASYNC", "DLG_SYS_SHOW_MEDIA", params);
	return PosSendUICmd(xml);
}

/**
* @brief - This BC retrieves the qualified promotions for the current order and sends a command to the UI to show the products to the customer
* The success data from PosGetPromotionsForOrder have the following format:
* 
*   <Promotion Code>-<Promotion Name>:<Product Code>-<Product Name>-<Product Price>,...,<Product Code>-<Product Name>-<Product Price>|...|<Promotion Code>-<Promotion Name>:<Product Code>-<Product Name>-<Product Price>,...,<Product Code>-<Product Name>-<Product Price>
* 
* Return - false in case of failure
*/
function PosCSODoShowPromoItemsJS() {

	sessionSale.set("BAR_CODE_PRODUCTS", null);

	if(PosGetPromotionsForOrder() == true) {
		var result = getLastSuccess("PosGetPromotionsForOrder");
		API.dbg("CSO - PosCSODoShowPromoItemsJS - PosGetPromotionsForOrder Result:["+result+"]");
		
		if (result == null) {
			return true;
		}
		
		var promotions = result.split("|");

		var hlp = new BusinessObjectHelper;
	    var maxReceiptsPerOrder = hlp.findParamInSectionWide("maxReceiptsPerOrder","Barcode");
	    if(maxReceiptsPerOrder == null || isNaN(parseInt(maxReceiptsPerOrder))) {
			API.dbg("CSO - PosCSODoShowPromoItemsJS - maxReceiptsPerOrder parameter invalid or missing. Default value assumed...");
	    	maxReceiptsPerOrder = "1";
	    }
		var selectedProductForPromotion = new Array();
		
		var language = sessionSale.get("LANGUAGE");
		
		for (var i=0; i < promotions.length && selectedProductForPromotion.length < Number(maxReceiptsPerOrder); i++) {
			
			var contents = new Array();
			var values = new Array();
		
			var promotion = promotions[i].split(":",2);
			var promotionCode = promotion[0].split("-",2)[0];
			var promotionName = promotion[0].split("-",2)[1];
			
			var products = promotion[1].split(",");
			for (var j=0; j < products.length; j++) {
				var productCode = products[j].split("-",3)[0];
				
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				if (csoProductInfo[productCode.toString()] != undefined) {
					var productInfo = csoProductInfo[productCode.toString()];
					
					var productName = productInfo.names[language] == null ? "" : productInfo.names[language].csoName;
					var imageName = productInfo.csoImages.largeImage;
					var productPrice = products[j].split("-",3)[2]
					
					contents.push(productCode + ":" + productName + ":" + imageName + ":" + productPrice);
					values.push(productCode);
				}
			}
			
			//productNames.push(PosCSOI18nGetMessageJS("CSO_MSG_PROMO_NOTHANKS"));
			//productCodes.push("-1");
			
			if(promotionName != "(null)") {
				var promoScreenTitle = PosCSOI18nGetMessageJS("CSO_MSG_PROMO_TITLE", promotionName);
			} else {
				var promoScreenTitle = PosCSOI18nGetMessageJS("CSO_MSG_PROMO_TITLE", " ");
			}
				
			
			var selectedProduct = "-1";
			
			var hasSuceeded = PosItemSelection(contents.join("|"), values.join("|"), "SYNC_DLG_PRODUCT_SELECTION",  promoScreenTitle);
			if (hasSuceeded) {
				selectedProduct = sessionSale.get("SelectedButtonValue");
			} else {
				API.dbg("CSO - PosCSODoShowPromoItemsJS: cancel has been pressed");
			}

			if (selectedProduct != "-1") {
				selectedProductForPromotion.push(promotionCode + ":" + selectedProduct);
			}
		}
		
		sessionSale.set("BAR_CODE_PRODUCTS", selectedProductForPromotion.join("|"));
		API.dbg("CSO - PosCSODoShowPromoItemsJS - Selected products:["+sessionSale.get("BAR_CODE_PRODUCTS")+"]");
		
	}
	
	return true;
}

/**
*
* @brief - This BC generates, prints and registers the barcodes for each qualified promotion selected by 
* the customer. The list of qualified promotions and selected productas has the following format:
* 
*   <Promotion Code>:<Product Code>|...|<Promotion Code>:<Product Code>
* 
* Return - false in case of failure
*/
function PosCSOPrintBarCodeJS() {
	
	var hlp = new BusinessObjectHelper;
	
	var promoItems = sessionSale.get("BAR_CODE_PRODUCTS");
	sessionSale.set("BAR_CODE_PRODUCTS", null);
	
	API.dbg("CSO - PosCSOPrintBarCodeJS - PromoItems:["+promoItems+"]");
	
	if (promoItems == null || promoItems == "") {
		return true;
	}
	
	var promotions = promoItems.split("|");
	
	API.dbg("CSO - PosCSOPrintBarCodeJS - Promotions Qty:["+promotions.length+"]");
	
	for (var i = 0; i < promotions.length; i++) {
		var promotion = promotions[i].split(":",2);
		
		if(PosCreateBarcode(promotion[0],promotion[1]) == true) {
			var result = getLastSuccess("PosCreateBarcode");
			result = result.split("|").join(":");
			API.dbg("CSO - PosCSOPrintBarCodeJS - PosCreateBarcode Result:["+result+"]");
			var printerList = hlp.findParamInSectionWide("PrinterList", "PrintFromKioskOnCounter");
			var printerAliases = hlp.findParamInSectionWide("PrinterAliases", "PrintFromKioskOnCounter");
			
			if(PosCreateReport("CUSTOMDATA","reportKioskBarcodeReceipt@reports.nps","NOPREVIEW|ALIAS",result,printerAliases,printerList) == true) {
				var barcode = result.split(":");
				if (PosCommitBarcode(barcode[0],barcode[1]) == false) {
					return false;
				}
			}
		} else {
			API.dbg("CSO - PosCSOPrintBarCodeJS - FAILURE");
			return false;
		}
	}
	
	return(true);
}

/**
 * @brief - This BC retrieves the redeemable product from the barcode string.
 * The success data from PosGetBarcodeProduct have the following format:
 * 
 *   <product code>|<available redemptions>
 *   
 * When the barcode is valid, the following message is sent to the UI:
 *  
 *   <Event type="ASYNC" name="BARCODE_INFO">
 *     <Parameter name="PRODUCT_CODE" value="1610"/>
 *     <Parameter name="MAX_REDEMPTIONS" value="1"/>
 *     <Parameter name="BARCODE" value="142436460900080333030201424364609000803330"/>
 *   </Event>
 * 
 * @param barcode - string - the receipt barcode\n
 * @success <i>the barcode is valid.</i>
 * @failure <i>barcode redemption is not enabled.</i>
 * @failure <i>barcode string is not valid.</i>
 * @failure <i>barcode restaurant is not valid.</i>
 * @failure <i>barcode redemption start/end date is not valid.</i>
 * @failure <i>limited barcode redemption has reached the maximum.</i>
 * @failure <i>barcode available redemptions could not be checked at the waystation (offline).</i>
 * @failure <i>product is not salable.</i>
 * @failure <i>product is not active.</i>
 * @failure <i>product has no price list configured.</i>
 * @failure <i>the product is not available.</i>
 */
function PosCSOGetBarcodeProductJS(barcode) {
	// CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
	if (sessionSale.get("IS_NGK") == "true") {
		if (PosNGKCheckCouponValidJS(barcode) == true) {
			return true;
		}
	}
	else {
		if (PosCSOCheckCouponValidJS(barcode) == true) {
			return true;
		}
	}
	
	if (typeof(PosGetBarcodeProduct) == "undefined") {
		return true;
	}

	if(PosGetBarcodeProduct(barcode) == true) {
		var result = getLastSuccess("PosGetBarcodeProduct");
		var info = result.split("|");
		
		var productCode = info[0];
		var maxRedemptions = info[1];
		
		// NPS-11479 - In coupon promotion with Gui4 we cannot show decimals in price field - ACSI1259136
		var decimalSeparator = csoConfigurationInfo.currency.decimalSeparator;
		var thousandSeparator = csoConfigurationInfo.currency.thousandSeparator;
		var currencyDecimals = csoConfigurationInfo.currency.decimalsCount;
		
		if (decimalSeparator == null || decimalSeparator == "" ||
			thousandSeparator == null || thousandSeparator == "")
		{
			decimalSeparator = ".";
			thousandSeparator = ",";
		}
		
		if (currencyDecimals == null)
		{
			currencyDecimals = 2;
		}
	
		var currencyMask = "###" + thousandSeparator + "###" + thousandSeparator +
						   "##0" + decimalSeparator + lStringReplicate("0", currencyDecimals);
		
		var resultXml = new XML('<Event type="ASYNC" name="DLG_PROMO_CONFIRMPRODUCT" />');
		
		var promoProductXml = new XML("<PromoProduct />");
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode.toString()] != undefined) {
			var productInfo = csoProductInfo[productCode.toString()];
			
			promoProductXml.@code = productCode;
			promoProductXml.@name = productInfo.names[sessionSale.get("LANGUAGE")].csoName;
			promoProductXml.@image = productInfo.csoImages.largeImage;
			promoProductXml.@price = sFormatCurrency(currencyMask, productInfo.price.getCurrent());
			promoProductXml.@isBarcode = true;
			promoProductXml.@barcode = barcode;
		}
		
		resultXml.appendChild(promoProductXml);

	    return(PosSendUICmd(resultXml.toString()));
	}

	var skipMessage = lGetCSOUserInterfaceStringParameter("skipMessages","");
	var sendErrorEvent = false;
	//If the MSG_BCODE_INVALID_BARCODE i18n is in the skipMessage parameter, an error event must go to the UI
	if(skipMessage)
	{
		var messages = skipMessage.split("|");
		for each (var message in messages) {
			if(message.toString().toLowerCase() == "msg_bcode_invalid_barcode"){
				sendErrorEvent = true;
				break;
			}
		}
	}
	
	if(sendErrorEvent == true){
		var noProductResultXml = new XML('<Event type="ASYNC" name="DAT_NO_PRODUCT_TO_REDEEM" />');
		var barcodeXml = new XML("<Barcode />");
		barcodeXml.@code = barcode;
		noProductResultXml.appendChild(barcodeXml);
		PosSendUICmd(noProductResultXml.toString());
	}
	
	return(false);
}

/**
 * @brief - 
 * @return - 
 * @author - Christiano Meirelles
 */
function PosCSOCheckCouponValidJS(couponCode) {
	
	var promoProducts = new Array();

	if (sessionSale.get("IS_NGK") == "true")
	{
		for each (var product in csoProductInfo) {
			if (product.xmlNode.Barcode == couponCode) {
				promoProducts.push(product);
			}
		}
	}
	else
	{
		for each (var product in csoProductInfo) {
			// NPS-11218 - Kiosk GUI 4 - Inactive Coupons allow the customer to get all the way through selecting before throwing an error - ACSI1101552
			if (product.xmlNode.Barcode == couponCode && product.isValid &&
				product.xmlNode.@salable.toLowerCase() == "true" &&
				bCheckProductDayPartCode(product.code) &&
				PosCheckIfPriceNodeIsValid(product.xmlNode)) {
				promoProducts.push(product);
			}
		}
	}
	
	if (promoProducts.length == 0) {
		return false;
	}
	
	var language = sessionSale.get("LANGUAGE");
	
	var contents = new Array();
	var values = new Array();
	
	for each (var promoProduct in promoProducts) {
		var productCode = promoProduct.code;
		var productName = promoProduct.names[language].csoName;
		var imageName = promoProduct.csoImages.largeImage;
		var productPrice = promoProduct.price.getCurrent();
		
		contents.push(productCode + ":" + productName + ":" + imageName + ":" + productPrice);
		values.push(productCode);
	}
	
	var productCode = "-1";
	
	if (promoProducts.length == 1) {
		productCode = promoProducts[0].code;
	} else {
		var screenTitle = PosCSOI18nGetMessageJS("CSO_MSG_COUPONSELECTION_TITLE");
		var hasSuceeded = PosItemSelection(contents.join("|"), values.join("|"), "SYNC_DLG_PRODUCT_SELECTION",  screenTitle);
		if (hasSuceeded) {
			productCode = sessionSale.get("SelectedButtonValue");
		} else {
			API.dbg("CSO - PosCSOCheckCouponValidJS: cancel has been pressed");
		}
	}
	
	API.dbg("CSO - PosCSOCheckCouponValidJS: Selected product code = ["+productCode+"]");
	
	if (values.indexOf(productCode) >= 0) {
		// NPS-11479 - In coupon promotion with Gui4 we cannot show decimals in price field - ACSI1259136
		var decimalSeparator = csoConfigurationInfo.currency.decimalSeparator;
		var thousandSeparator = csoConfigurationInfo.currency.thousandSeparator;
		var currencyDecimals = csoConfigurationInfo.currency.decimalsCount;
		
		if (decimalSeparator == null || decimalSeparator == "" ||
			thousandSeparator == null || thousandSeparator == "")
		{
			decimalSeparator = ".";
			thousandSeparator = ",";
		}
		
		if (currencyDecimals == null)
		{
			currencyDecimals = 2;
		}
	
		var currencyMask = "###" + thousandSeparator + "###" + thousandSeparator +
						   "##0" + decimalSeparator + lStringReplicate("0", currencyDecimals);
		
		var resultXml = new XML('<Event type="ASYNC" name="DLG_PROMO_CONFIRMPRODUCT" />');
		
		var promoProductXml = new XML("<PromoProduct />");
		promoProductXml.@code = productCode;
		
		var contentValues = contents[values.indexOf(productCode)].split(":");
		promoProductXml.@name = contentValues[1];
		promoProductXml.@image = contentValues[2];
		promoProductXml.@price = sFormatCurrency(currencyMask, contentValues[3]);
		promoProductXml.@isBarcode = false;
		
		resultXml.appendChild(promoProductXml);
		PosSendUICmd(resultXml.toString());
	}
	
	return true;
}

/**
 *
 * @brief - This function opens a Transaction in the UI.
 * @return - true
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOBeginTransaction() {
	PosSendUICmd('<Event type="ASYNC" name="DLG_SYS_BEGIN_TRAN" />');
	return true;
}

/**
 *
 * @brief - This function closes a Transaction in the UI.
 * @return - true
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOEndTransaction() {
	PosSendUICmd('<Event type="ASYNC" name="DLG_SYS_END_TRAN" />');
	return true;
}

/**
 *
 * @brief - This function checks the sale on Tender
 * 
 * @return - true : to continue workflow / false : to stop workflow
 */
function PosCSOCheckTenderAvailable() {
	var hlp = new BusinessObjectHelper;
	var orderView = new XML(getKioskView(hlp.getCurrentView()));

	var item = orderView.Order.Item.(@voided=="false");
	
	return item.toString().length > 0;
}

/**
 *
 * @brief - Creates a XML event informing the UI to request the product prices.
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOUpdateProductPricesJS() {
	var xmlProduct = new XML("<Product />");
	
	for each (var productCode in csoScreenProducts) {
		var xmlParameter = new XML('<Parameter />');
		
		xmlParameter.@name = productCode;
		xmlParameter.@value = getUpdatedPrice(productCode);
		xmlProduct.appendChild(xmlParameter);
	}
	
	var xmlEvent = new XML('<Event type="ASYNC" name="DAT_SYS_PRODUCT_PRICES" />');
	xmlEvent.appendChild(xmlProduct);
	
	return PosSendUICmd(xmlEvent.toXMLString());
	
	function getProductPriceBySaleType(productCode) {
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined || csoProductInfo[productCode].xmlNode == undefined) {
			return null;
		}
		
		var productXml = csoProductInfo[productCode].xmlNode;
		var saleType = orderFormatter().formatSaleType(hlp.getSaleType());

		return productXml.PriceList.PriceTag.Pricing.(@priceCode == saleType).Price;
	}
	
	//NPS-10164 - Kiosk GUI 4 - Drop 2 - Happy Meals not showing combined price - ACSI0780963
	function getUpdatedPrice(productCode, isChoice, maxDepth, depth, referenceProductCode) {
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined || csoProductInfo[productCode].xmlNode == undefined) {
			return 0.0;
		}
		
		var productXml = csoProductInfo[productCode].xmlNode;
		var price;
		var componentXml;
		var choiceXml;
		
		if (productXml.@statusCode != "ACTIVE") return 0.0;
		
		price = Number(getProductPriceBySaleType(productCode));

		if (typeof isChoice === "undefined") {
			isChoice = false;
		}
		if (typeof depth === "undefined") {
			depth = 1;
		}
		if (typeof maxDepth === "undefined") {
			maxDepth = 4;
		}

		if (depth === maxDepth) return price;
		
		if (isChoice) {
			if (productXml.Composition.Component != undefined) {
				componentXml = productXml.Composition.Component.(ProductCode == referenceProductCode && CostInclusive.toString() == "false");
				
				if (componentXml != undefined){
					price += Number(getUpdatedPrice(componentXml.ProductCode.toString(), false, maxDepth, depth + 1));
				}
			}
			if (productXml.Choices.Component != undefined){
				choiceXml = productXml.Choices.Component.(ProductCode == referenceProductCode && CostInclusive.toString() == "false");
				
				if (choiceXml  != undefined){
					price += Number(getUpdatedPrice(choiceXml.ProductCode.toString(), true, maxDepth, depth + 1, choiceXml.ReferenceProduct.toString()));
				}
			}
		}
		else {
			for each (var component in productXml.Composition.Component) {
				if (component.CostInclusive.toString() == "false"){
					price += lGetMultiplicativeFactor(component) * Number(getUpdatedPrice(component.ProductCode.toString(), false, maxDepth, depth + 1));
				}
			}
			for each (var choice in productXml.Choices.Component) {
				if (choice.CostInclusive.toString() == "false"){
					price += lGetMultiplicativeFactor(choice) * Number(getUpdatedPrice(choice.ProductCode.toString(), true, maxDepth, depth + 1, choice.ReferenceProduct.toString()));
				}
			}
		}
		
		return price;
	}
	
	//NPS-10164 - Kiosk GUI 4 - Drop 2 - Happy Meals not showing combined price - ACSI0780963
	function lGetMultiplicativeFactor(componentXml){
		var defaultQuantity = Number(componentXml.DefaultQuantity);
		var chargeThreshold = Number(componentXml.ChargeThreshold);
		
		return defaultQuantity - chargeThreshold;
	}
}

/**
 * @brief - Shows a screen with the following buttons: Retry EFT, Pay at Counter and Cancel sale.
 * @param - showRetryEFT - Boolean value indicating if the Retry EFT button should or should not be shown.
 * @param - retryOrCounterMsgLine1 - i18n tag: CSO_MSG_REROUTE_RETRY_OR_COUNTER_LINE_1
 * @param - retryOrCounterMsgLine2 - i18n tag: CSO_MSG_REROUTE_RETRY_OR_COUNTER_LINE_2
 * @param - retryEftMsg - i18n tag: CSO_BTN_REROUTE_RETRY_EFT
 * @param - cancelMsg - i18n tag: CSO_BTN_REROUTE_RETRY_CANCEL
 * @param - payAtCounterMsg - i18n tag: CSO_BTN_REROUTE_RETRY_COUNTER
 * @return - An integer with the user's choice: 1- Retry EFT, 2 - Pay at Counter and 3 - Cancel.
 * @author - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
*/
function lShowTenderRetryScreen(showRetryEFT, retryOrCounterMsgLine1, retryOrCounterMsgLine2, retryEftMsg, cancelMsg, payAtCounterMsg) {
	
	var buttons = new Array();
	var buttonsValues = new Array();
	var screenText;
	
	// NPS-12357 - BO - NP6.1.21 RC13 HF02- Issue with Payment decision dialog on kiosk - ACSI1600512
	var redirectEnable = lGetParameterStr("tender.redirectEnable", "true");

	if(!showRetryEFT && redirectEnable == "false"){
		return 3;
	}
	
	if (showRetryEFT) {
		buttons.push(PosCSOI18nGetMessageJS(retryEftMsg));
	}
	
	if(redirectEnable == "true"){
		buttons.push(PosCSOI18nGetMessageJS(payAtCounterMsg));
	}
	
	buttons.push(PosCSOI18nGetMessageJS(cancelMsg));
	
	if (showRetryEFT) {
		buttonsValues.push(1);
	}
	
	if(redirectEnable == "true"){
		buttonsValues.push(2);
	}
	
	buttonsValues.push(3);
	
	screenText = PosCSOI18nGetMessageJS(retryOrCounterMsgLine1) + "|" + PosCSOI18nGetMessageJS(retryOrCounterMsgLine2);
	
	PosCSOSendSyncMessageJS("RETRY_EFT_SYNC_DLG", buttons, buttonsValues, screenText);
	
	retValue = sessionSale.get("SelectedButtonValue");
	
	return retValue;
}

/**
 * lCalcMD5
  *
 * @brief - This function takes a string and return the hex representation of its MD5
 *
 * @return - hex representation of its MD5
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
*/
function lCalcMD5(str) {
  if (str == null) return null;
  
  var hex_chr = "0123456789abcdef";

  x = str2blks_MD5(str);
  a =  1732584193;
  b = -271733879;
  c = -1732584194;
  d =  271733878;

  for(i = 0; i < x.length; i += 16)
  {
    olda = a;
    oldb = b;
    oldc = c;
    oldd = d;

    a = ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = ff(c, d, a, b, x[i+10], 17, -42063);
    b = ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = ff(d, a, b, c, x[i+13], 12, -40341101);
    c = ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = ff(b, c, d, a, x[i+15], 22,  1236535329);    

    a = gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = gg(c, d, a, b, x[i+11], 14,  643717713);
    b = gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = gg(c, d, a, b, x[i+15], 14, -660478335);
    b = gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = gg(b, c, d, a, x[i+12], 20, -1926607734);
    
    a = hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = hh(b, c, d, a, x[i+14], 23, -35309556);
    a = hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = hh(d, a, b, c, x[i+12], 11, -421815835);
    c = hh(c, d, a, b, x[i+15], 16,  530742520);
    b = hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = ii(c, d, a, b, x[i+10], 15, -1051523);
    b = ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = ii(d, a, b, c, x[i+15], 10, -30611744);
    c = ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = add(a, olda);
    b = add(b, oldb);
    c = add(c, oldc);
    d = add(d, oldd);
  }
  return rhex(a) + rhex(b) + rhex(c) + rhex(d);
  
	function rhex(num)
	{
	  str = "";
	  for(j = 0; j <= 3; j++)
		str += hex_chr.charAt((num >> (j * 8 + 4)) & 0x0F) +
			   hex_chr.charAt((num >> (j * 8)) & 0x0F);
	  return str;
	}

	/*
	 * Convert a string to a sequence of 16-word blocks, stored as an array.
	 * Append padding bits and the length, as described in the MD5 standard.
	 */
	function str2blks_MD5(str)
	{
	  nblk = ((str.length + 8) >> 6) + 1;
	  blks = new Array(nblk * 16);
	  for(i = 0; i < nblk * 16; i++) blks[i] = 0;
	  for(i = 0; i < str.length; i++)
		blks[i >> 2] |= str.charCodeAt(i) << ((i % 4) * 8);
	  blks[i >> 2] |= 0x80 << ((i % 4) * 8);
	  blks[nblk * 16 - 2] = str.length * 8;
	  return blks;
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally 
	 * to work around bugs in some JS interpreters.
	 */
	function add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left
	 */
	function rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	/*
	 * These functions implement the basic operation for each round of the
	 * algorithm.
	 */
	function cmn(q, a, b, x, s, t)
	{
	  return add(rol(add(add(a, q), add(x, t)), s), b);
	}
	function ff(a, b, c, d, x, s, t)
	{
	  return cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function gg(a, b, c, d, x, s, t)
	{
	  return cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function hh(a, b, c, d, x, s, t)
	{
	  return cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function ii(a, b, c, d, x, s, t)
	{
	  return cmn(c ^ (b | (~d)), a, b, x, s, t);
	}
}

/** PosCSOSetScreenIDJS
 *
 * @brief - This BC sets the baseCSOScreenId and baseGrillScreenId session context variables.
 * It reads the parameters "baseCSOScreenId" and "baseGrillScreenId" from store-db.xml and sets the session context variables.
 * If the parameters are not defined, or if they are empty, i.e. value="", the default screens are used:
 * "baseCSOScreenId" defaults to "7000" and baseGrillScreenId defaults to "8453".
 * @return - always true
 * @author - Raphael Almeida
 * @since - CES-1512 - Kiosk GUI v3 RC8 - "baseCSOScreenId" and "baseGrillScreenId" values are only configurable in the workflow file. 
 * @remarks
 * This BC is inteded to replace the following steps in WF_CSO_UIInitialize:
 *	<Step cmd="PosSetSessionProperty  'baseCSOScreenId' '7000' 'false'"/>
 *	<Step cmd="PosSetSessionProperty  'baseGrillScreenId' '8453' 'false'"/>
 *
 * Instead of taking the values for "baseCSOScreenId" and "baseGrillScreenId" from workflow.xml, it takes them from store-db.xml, by the following parameters:
 *	<Configuration type="POS">
 *		<Section name="CSO.UserInterface">
 *			<Parameter name="baseCSOScreenId" value="7000"/>
 *			<Parameter name="baseGrillScreenId" value="8453"/>
 *		</Section>
 *	</Configuration>
 */
 function PosCSOSetScreenIDJS() {	
	var baseCSOScreenId = lGetParameterStr("baseCSOScreenId", "7000");
	var baseGrillScreenId = lGetParameterStr("baseGrillScreenId", "8453");
	if (baseCSOScreenId == "") {
		baseCSOScreenId = "7000";
		API.dbg("PosCSOSetScreenIDJS - baseCSOScreenId not defined. Setting to default 7000");
	}
	if (baseGrillScreenId == "") {
		baseGrillScreenId = "8453";
		API.dbg("PosCSOSetScreenIDJS - baseGrillScreenId not defined. Setting to default 8453");
	}
	PosSetSessionProperty("baseCSOScreenId", baseCSOScreenId, "false");
	PosSetSessionProperty("baseGrillScreenId", baseGrillScreenId, "false");
	
	return true;
}

/**
 * @brief - Verifies if the product is an alcoholic beverage
 * @param - productCode: the product that will be checked
 * @return - true | false
 * @author - Paulo Florencio
 * @since - SDO-6070 - CSO - Local French Promotion - Alcoholic beverage requires legal disclaimer
 */
function PosCSOIsProductAnAlcoholicBeverage(productCode){
	if (productCode === null || productCode.length === 0) {
		API.dbg("CSO - PosCSOIsProductAnAlcoholicBeverage: Invalid product code (productCode=[" + productCode + "])");
		return false;
	}
	
	var productCodeNumber = Number(productCode);
	var productCodeStr = Math.abs(productCodeNumber).toString();
	
	if (productCodeNumber !== -1 && csoProductInfo[productCodeStr] === null) {
		API.dbg("CSO - PosCSOAddLoopMealProductJS: Invalid product code (productCode=[" + productCode + "])");
		return false;
	}
	
	var productXmlNode = csoProductInfo[productCodeStr].xmlNode;
	
	var productFlaggedAsAlcoholicBeverage = productXmlNode.CustomParameters.Parameter.(@name == "CSORequireLegalDisclaimer") != undefined ?
											productXmlNode.CustomParameters.Parameter.(@name == "CSORequireLegalDisclaimer").@value.toString() :
											"false";

	if (productFlaggedAsAlcoholicBeverage == "true") {
		return true;
	}
	
	return false;
}

/**
 * @brief - Shows the pop-up for an alcoholic beverage
 * @return - true if the customer agrees to show his identity at the counter, false if the customer is under 18
 * @author - Paulo Florencio
 * @since - SDO-6070 - CSO - Local French Promotion - Alcoholic beverage requires legal disclaimer
 */
function PosCSOShowAlcoholicBeverageDisclaimer(){
	var formerImageFilename = lGetParameterStr("legalDisclaimerImage", "legalDisclaimerImage");
	var currentLangCode = sessionSale.get("LANGUAGE");
	var hlp = new BusinessObjectHelper;
	var imageFilename = hlp.findParamInSectionWide("legalDisclaimerImage", "ImageDB_" + currentLangCode);
	var disclaimerText = PosCSOI18nGetMessageJS("NGK_LEGAL_DISCLAIMER_TEXT");
	if(disclaimerText == "NGK_LEGAL_DISCLAIMER_TEXT") {
		disclaimerText="";
	}
	
	var result = (PosCSOSendSyncMessageJS(
		"SYNC_IMG_YES_NO_DLG",
		new Array(
			imageFilename + "@" + PosCSOI18nGetMessageJS("CSO_LOCALPROMO_LEGAL_ADULT"),
			PosCSOI18nGetMessageJS("CSO_LOCALPROMO_LEGAL_CHILD"),
			disclaimerText,
			formerImageFilename
		),
		new Array(
			"true",
			"false"
		),
		"") === "true");
	
	return result;
}


/**
 * @brief - Shows the barcode promotions for user selection.
 * @return - True, if a promotion was selected
 * @author - Paulo Florencio
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOShowBarcodeLocalPromotionsJS(){
	
	var buttons = [];
	var buttonsValues = [];
	var screenText;
	var returnValuePromotionsScreen;
	var returnValueProductsScreen;
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		//Added to fix a timeout issue related with this screen
		sessionSale.set("NGK_POPUP_RESULT", "REGULAR");
		
		if (!csoBarcodeLocalPromotions.isActive){
			return false;
		}
		
		lClearBarcodeLocalPromotionSession();
		lBuildScreenInfo();

		if (buttons.length > 0)
		{
			buttons.push(PosCSOI18nGetMessageJS("NGK_MSG_CANCEL"));
			buttonsValues.push("CANCEL");
		
			while(true)
			{
				returnValuePromotionsScreen = PosCSOSendSyncMessageJS("SYNC_BARCODE_PROMO_DLG", buttons, buttonsValues, screenText);
				
				if (returnValuePromotionsScreen != undefined && returnValuePromotionsScreen != "")
				{
					if (returnValuePromotionsScreen == "CANCEL")
					{
						return false;
					}
				
					sessionSale.set("SELECTED_BARCODE_LOCAL_PROMO_ID", returnValuePromotionsScreen);
					
					returnValueProductsScreen = lShowBarcodeLocalPromotionProductsJS();
					
					switch(returnValueProductsScreen)
					{
						case "CONFIRM":
							return true;
							
						case "CANCEL":
							return false;
							
						case "RETURN":
							break;
							
						default:
							sessionSale.set("NGK_POPUP_RESULT", "TIMEOUT");
							return false;
					}
				}
				else 
				{
					sessionSale.set("NGK_POPUP_RESULT", "TIMEOUT");
					return false;
				}
			}
		}
	}
	else
	{
		if (!csoBarcodeLocalPromotions.isActive){
			return false;
		}
		
		lClearBarcodeLocalPromotionSession();
		lBuildScreenInfo();

		if (buttons.length > 0){
			while(true){
				returnValuePromotionsScreen = PosCSOSendSyncMessageJS("SYNC_BARCODE_PROMO_DLG", buttons, buttonsValues, screenText);
				
				if (returnValuePromotionsScreen != undefined && returnValuePromotionsScreen != "") {
					sessionSale.set("SELECTED_BARCODE_LOCAL_PROMO_ID", returnValuePromotionsScreen);
					
					returnValueProductsScreen = lShowBarcodeLocalPromotionProductsJS();
					
					if (returnValueProductsScreen) {
						return (returnValueProductsScreen == "true");
					}
				}
				else {
					return false;
				}
			}
		}
	}
	
	return false;
	
	function lClearBarcodeLocalPromotionSession(){
		sessionSale.set("SELECTED_BARCODE_LOCAL_PROMO_ID", null);
		sessionSale.set("SELECTED_BARCODE_LOCAL_PROMO_PRODUCTS", null);
		sessionSale.set("SELECTED_BARCODE_LOCAL_PROMO_FILE_CONTENT", null);
	}
	
	function lBuildScreenInfo(){
		API.dbg("CSO - PosCSOShowBarcodeLocalPromotionsJS: Generating data to build barcode local promotions screen");
	
		var order = getOrder();
		var validator = barcodeLocalPromotionValidator();
	
		screenText = PosCSOI18nGetMessageJS("CSO_LOCALPROMO_BARCODE_WELCOME", csoConfigurationInfo.currency.symbol + order.amount);
	
		for each (var promotion in csoBarcodeLocalPromotions) {
			if(validator.validate(promotion, order)){
				buttons.push(lGetPromotionButtonValues(promotion));
				buttonsValues.push(promotion.xmlNode.@id.toString());
			}
		}
	}
	
	function lGetPromotionButtonValues(promotion){
		var name = promotion.xmlNode.@name.toString();
		var image = promotion.xmlNode.@image.toString();
		var isSoldOut = lAllPromotionProductsAreSoldOut(promotion);
	
		return name + "@" + image + "@" + isSoldOut;
	}
	
	function lAllPromotionProductsAreSoldOut(promotion){
		var products = promotion.xmlNode.Products.Product;
		
		for each(var product in products){
			if(!isProductOutage(product.@code.toString())){
				return false;
			}
		}
		return true;
	}

	function lShowBarcodeLocalPromotionProductsJS(){
		var returnValue;
		var selectedPromotionId = sessionSale.get("SELECTED_BARCODE_LOCAL_PROMO_ID");
		var promotionXml = lGenerateBarcodeLocalPromotionView(selectedPromotionId);
		
		CreateEventFile(promotionXml);
		
		if (sessionSale.get("IS_NGK") == "true")
		{
			return PosCSOSendSyncMessageJS("DLG_BARCODE_LOCAL_PROMOTION_OPTIONS", 
											[PosCSOI18nGetMessageJS("NGK_TMP_OK"), PosCSOI18nGetMessageJS("NGK_MSG_CANCEL"), PosCSOI18nGetMessageJS("NGK_MSG_RETURN")],
											["CONFIRM", "CANCEL", "RETURN"], "");
		}
		
		return PosCSOSendSyncMessageJS("DLG_BARCODE_LOCAL_PROMOTION_OPTIONS", [], ["true", "false"], "");
		
		function lGenerateBarcodeLocalPromotionView(selectedPromotionId){
			var currentLanguage = sessionSale.get("LANGUAGE");
			var promotion = csoBarcodeLocalPromotions[selectedPromotionId];
			var promotionNode = promotion.xmlNode.copy();

			var promotionXml = new XML("<Promotion />");
			
			promotionXml.@id = promotionNode.@id;
			
			var productsXml = lGenerateProductsView(promotionNode, currentLanguage);
			
			promotionXml.appendChild(productsXml);
			
			if (sessionSale.get("IS_NGK") == "true")
			{
				promotionXml.@name = promotionNode.@name;
				lSetMultiChoice(promotionXml);
			}
			
			return promotionXml.toXMLString();
		}
		
		function lGenerateProductsView(promotionNode, currentLanguage){
			var productsXml = new XML("<Products />");
			
			for each (var product in promotionNode.Products.Product)
			{
				// SQC-4106 - Kiosk Local Promotion Drop 2 - Products with salable false should not be displayed on Kiosk (barcode)
				var isValid = isPromotionProductValid(product);
				
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				if (csoProductInfo[product.@code.toString()] != undefined &&
					csoProductInfo[product.@code.toString()].xmlNode != undefined &&
					isValid == "true" &&
					csoProductInfo[product.@code.toString()].xmlNode.@salable == "true" &&
					(product.@priceTakeout != null || product.@priceEatIn != null))
				{
					product.@price = lGetProductPrice(product);
					productsXml.appendChild(product.copy());
				}
				else
				{
					API.dbg("Product code [" + product.@code.toString() + "] is not valid and was removed from barcode promotion");
				}
			}
			lGenerateProductView(productsXml, currentLanguage, false);
			
			return productsXml;
			
			function lGetProductPrice(product){
				var saleType = new BusinessObjectHelper().getSaleType();

				switch(saleType) {
					case 1:
						return product.@priceTakeout;
					default:
						return product.@priceEatin;
				}
			}
		}
		
		function lGenerateProductView(productList, currentLanguage){
			var currentNodeType = productList.localName();

			if (currentNodeType == "Choice" || currentNodeType == "Product"){
				lSetMissingAttributes(productList, currentLanguage);
			}
			
			for each(var element in productList.*){
				lGenerateProductView(element, currentLanguage)
			}
			
			function lSetMissingAttributes(node, currentLanguage){
				if(node.@code != null && csoProductInfo[node.@code] != null){
					var product = csoProductInfo[node.@code];
					
					if(product != null){
						node.@image = lGetProductImage(product);
						node.@name = lGetProductName(product);
						node.@isSoldOut = isProductOutage(product.code.toString());
						
						// CSO-142 - Legal-Disclaimer by language - CR updated - 7423781
						if (product.requireLegalDisclaimer){
							node.@legalDisclaimerImage = PosNGKGetAlcoholicBeverageDisclaimerImage();
							node.@legalDisclaimerText = PosNGKGetAlcoholicBeverageDisclaimerText();
						}
					}
				}
			}
			
			function lGetProductImage(product){
				return (product.csoImages.largeImage || product.csoImages.smallImage);
			}
			
			function lGetProductName(product){
				return (product.names[currentLanguage].csoName || "");
			}
		}
	}
}

/**
 * @brief - Stores the selected promotional products. These products will be used later to print the barcode.
 * @return - True
 * @author - Paulo Florencio
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOStoreSelectedBarcodePromotionProductsJS(){
	var returnMessage = PosGetPromptNumberOutputJS().toString(); //Get the message containing the product chosen in the Barcode Promotion Loop
	
	if(returnMessage){
		var selectedProducts = returnMessage.split("@")[0];
		
		sessionSale.set("SELECTED_BARCODE_LOCAL_PROMO_PRODUCTS", selectedProducts);
	}
	
	return true;
}

/**
 * @brief - Gets the value of the PromptNumberOutput
 * @return - The value of the PromptNumberOutput
 * @author - Paulo Florencio
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosGetPromptNumberOutputJS() {
	var hlp = new BusinessObjectHelper;
	return hlp.showCalculator("", "", 4, 0);
}

/**
 * @brief - Shows the Numeric Pad Screen
 * @return - True
 * @author - Fabricio Gabrielli da Silva
 * @since - NPS-13328 - PT- CR for RFM1: NGK-Vat number to print on a receipt. - 7565669
 */
function PosShowNumericPad(title, subTitle, maxDigits, image, noThanksButtonTittle, cancelButtonTittle) {

	if (isNaN(maxDigits))
	{
		API.dbg("PosShowNumericPad: Invalid (Not-a-Number) parameter value maxDigits: '" + maxDigits + "'.");
		return false;
	}
	else  if (maxDigits <= 0)
	{
		//Default value to prevent invalid parameters
		maxDigits = 100;
	}

	var hlp = new BusinessObjectHelper;
	var input = hlp.showCalculator("NUMERIC_PAD@" + title + "|" + subTitle + "|" + maxDigits + "|" + (image ? image : "") + "|" + (noThanksButtonTittle ? noThanksButtonTittle : "") + "|" + (cancelButtonTittle ? cancelButtonTittle : ""), "", 1, 0);
	API.dbg("PosShowNumericPad: The function has finished.");
	return input;
}
/**
 * @brief - Shows the Dynamic Form Screen
 *
 * The requestString must be a formated string like "NGK_I18N_KEY_FIELD1:VALUE:TRUE|NGK_I18N_KEY_FIELD2::TRUE"
 *
 * Each field must have 3 values splited by a ":". The first value is the text to be displayed in the screen,
 * the second the field's value (nothing if it has no value) and the last part set the field as required or not (value TRUE/FALSE).
 *
 * The character "|" split a field to another.
 * 
 * @author - Renato Tsuchida
 * @since - CSO-392 - NGK - NIF Number on all Transactions (Portugal) - 8079517
 */
function PosShowDynamicForm(title, subTitle, requestString) {
	if (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true) {
		PosCSOLog(CSOLOG_INFORMATION, 18435, "NGK - PosNGKNifInformation: This function does not work with Kiosk on 16x9 screen mode.");
		return "-2"; //Cancel button retur;
	}
	var input;
	var hlp = new BusinessObjectHelper;
	var formObject = null;
	var completed = false;
	if (requestString){
		var requiredFields = lGetRequiredFieldFromRequestString(requestString);
		do {
			var str = "DYNAMIC_FORM@" + title + "|" + subTitle + "|" + requestString;
			input = hlp.showCalculator(str);
			if (!input){
				return null;
			} 
			if (input == '-1' || input == "-2"){
				return input
			}
			var barcodeFolder = lGetParameterStr("localPromotionsBarcodeFolder", "..\\out\\LocalPromotionsBarcode\\");
			var read = hlp.PosReadFile(barcodeFolder + input)
			var file = new File(barcodeFolder + input);
			if(File.exists(barcodeFolder + input)) {
        		file.remove();
    		}
			formObject =  PosDynamicFormResultToObject(read);
			if (!formObject){
				formObject = {};
			}
			var missingFields = [];
			for (var i = 0; i < requiredFields.length; i++){
				if (!formObject[requiredFields[i]]){
					missingFields.push(PosCSOI18nGetMessageJS(requiredFields[i]));
				}
			}
			completed = missingFields.length == 0;
			if (!completed){
				var missingFieldsText = missingFields.join(', ');
				PosNGKSimpleMessageJS(PosCSOI18nGetMessageJS("NGK_DYNAMIC_FORM_REQUIRED_FIELDS", missingFieldsText), 'MSG_OK');
				if (PosCheckSessionProperty('NGK_POPUP_TIMEOUT', 'true')){
					return '-1';
				}
				var splitedRequest = requestString.split('|')
				for (var i = 0; i < splitedRequest.length; i++){
					var splited = splitedRequest[i].split(':');
					if (formObject[splited[0]]){						
						splited[1] = formObject[splited[0]];
					}
					splitedRequest[i] = splited.join(':');
				}
				requestString = splitedRequest.join('|');
			}
		} while(!completed);
	}
	return lConvertResultObjectToString(formObject);
	
	function lGetRequiredFieldFromRequestString(rString){
		var field = rString.split('|');
		var required = [];
		for (var i = 0; i < field.length; i++){
			if (field[i].indexOf(':') == -1){
				continue;
			} else {
				var fieldInfo = field[i].split(':');
				if (fieldInfo[2] && fieldInfo[2].toUpperCase() == "TRUE"){
					required.push(fieldInfo[0]);
				}
			}
		}
		return required;
	}
	
	function lConvertResultObjectToString(obj){
		if (!obj){
			return "";
		}
		var str = "";
		for (var prop in obj){
			str += prop + ':' + (obj[prop] ? obj[prop] : "") + '|';
		}
		return str;
	}
}

/**
 * @brief - Converts the result from PosShowDynamicForm to an object
 * The result parameter must be a formated string like "NGK_I18N_KEY_FIELD1:VALUE:TRUE|NGK_I18N_KEY_FIELD2::TRUE|"
 * @author - Renato Tsuchida
 * @since - CSO-392 - NGK - NIF Number on all Transactions (Portugal) - 8079517
 */
function PosDynamicFormResultToObject(result){
	if (!result || result.indexOf(':') == -1){
		return null;
	}
	var obj = {};
	var fields = result.split('|');
	for each (var field in fields){
		if (!field){
			continue;
		}
		if (field.indexOf(':') == -1){
			obj[field] = undefined;
			continue;
		}
		var splited = field.split(':');
		obj[splited[0]] = "";
		var x = [];
		for (var i = 1; i < splited.length; i++){
			x.push(splited[i])
		}
		obj[splited[0]] = x.join(':');
	}
	return obj;
}

/**
 * @brief - Gets the value of a i18n property from a PosShowDynamicForm result
 * 
 * @author - Renato Tsuchida
 * @since - CSO-392 - NGK - NIF Number on all Transactions (Portugal) - 8079517
 */
function PosGetValueFromDynamicFormResult(key, result){
	if (!key || !result){
		return null;
	}
	var obj = PosDynamicFormResultToObject(result);
	
	if (obj){
		return obj[key];	
	}
	return null;
}
/**
 * @brief - Creates the string format to be used in the DynamicForm.
 * @param - property - The property i18n key
 * @param - value - The value of the given property
 * @param - required - Sets if the given property is required of not
 * @return - Formated string with the given parameters
 * @author - Renato Tsuchida
 * @since - CSO-392 - NGK - NIF Number on all Transactions (Portugal) - 8079517
 */
function PosBuildDynamicFormString(property, value, required){
	var currentString = property + ':';
	if (value){
		currentString += value;
	}
	if (required){
		currentString += ':TRUE';
	}
	currentString += '|';
	return currentString;
}

/**
 * @brief - Checks if there are pending barcode promotions to be processed
 * @return - True
 * @author - Paulo Florencio
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOCheckPendingBarcodeLocalPromotionJS()
{
	var selectedPromotionId = sessionSale.get("SELECTED_BARCODE_LOCAL_PROMO_ID");
	var selectedProducts = sessionSale.get("SELECTED_BARCODE_LOCAL_PROMO_PRODUCTS");
	
	return selectedPromotionId && selectedProducts;
}

/**
 * @brief - Creates and stores a new barcode promotion file
 * @return - True, if the file was stored successfully
 * @author - Paulo Florencio
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOStoreNewBarcodeLocalPromotionFileJS()
{
	var promotionId = sessionSale.get("SELECTED_BARCODE_LOCAL_PROMO_ID");
	var productCodes = sessionSale.get("SELECTED_BARCODE_LOCAL_PROMO_PRODUCTS");
	var returnValue;
	
	var fileContent = lGenerateFileContent();
	
	lStoreFileContentForBarcodeReceiptCreation();
	
	API.dbg("Generating new barcode file");
	API.dbg("New barcode file content : " + fileContent);
	
	returnValue = PosCSOSendSyncMessageJS("DAT_BARCODE_LOCAL_PROMOTION_STORE", [], ["true", "false"], fileContent);
	
	return (returnValue === "true"); 
	
	function lGenerateFileContent() {
		var promotion = csoBarcodeLocalPromotions[promotionId];
		var promotionTagFromLocalPromotionsXml = promotion.xmlNode;
		var selectedProducts = productCodes.split("|");
		
		var newPromotionTag = lGeneratePromotionTag(promotionTagFromLocalPromotionsXml);
		var newProductsTag = lGenerateProductsTag(selectedProducts, promotionTagFromLocalPromotionsXml.Products);
		
		lSetProductPrice(newProductsTag);
		
		newPromotionTag.appendChild(newProductsTag);
		
		return newPromotionTag;
	}
	
	function lGeneratePromotionTag(promotionTagFromLocalPromotionsXml) {
		var newPromotionTag = new XML("<Promotion/>");
		
		var formatter = orderFormatter();
		var currentDate = new Date();
		var startDate = new Date();
		var endDate = new Date();
				
		startDate.setDate(currentDate.getDate() + csoBarcodeLocalPromotions.daysToStart);
		endDate.setDate(currentDate.getDate() + csoBarcodeLocalPromotions.daysToEnd);
			
		newPromotionTag.@barcode = lGenerateNewBarcodeNumber();
		newPromotionTag.@id = promotionId;
		newPromotionTag.@name = promotionTagFromLocalPromotionsXml.@name;
		newPromotionTag.@utilizationAmount = promotionTagFromLocalPromotionsXml.@utilizationAmount;
		newPromotionTag.@startDate = formatter.formatDate(startDate);
		newPromotionTag.@endDate = formatter.formatDate(endDate);
		
		return newPromotionTag;
		
		function lGenerateNewBarcodeNumber(){
			var storeNumber = csoConfigurationInfo.storeNumber;
			var posNumber = GetPosNumber();
			var currentDateTime = lFormatDateTime(new Date());
			
			return crc32(storeNumber + "-" + posNumber + "-" + currentDateTime);
		}
		
		function lFormatDateTime(date){
			var day = ("0" + date.getDate()).slice(-2);
			var month = ("0" + (date.getMonth() + 1)).slice(-2);
			var year = date.getFullYear();
			
			var hours = ("0" + date.getHours()).slice(-2);
			var minutes = ("0" + date.getMinutes()).slice(-2);
			var seconds = ("0" + date.getSeconds()).slice(-2);
			
			return year + month + day + hours + minutes + seconds;
		}
		
		function crc32 (str) {
			var table = "00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D";
		 
			str = Utf8Encode(str);
		 
			var x = 0;
			var y = 0;
			var crc = 0;
			
			for( var i = 0, iTop = str.length; i < iTop; i++ ) {
				y = ( crc ^ str.charCodeAt( i ) ) & 0xFF;
				x = "0x" + table.substr( y * 9, 8 );
				crc = ( crc >>> 8 ) ^ x;
			}
		 
			return pad(toUint32(crc ^ (-1)), 10);
			
			function Utf8Encode(string) {
				string = string.replace(/\r\n/g,"\n");
				var utftext = "";
		 
				for (var n = 0; n < string.length; n++) {
					var c = string.charCodeAt(n);
		 
					if (c < 128) {
						utftext += String.fromCharCode(c);
					}
					else if((c > 127) && (c < 2048)) {
						utftext += String.fromCharCode((c >> 6) | 192);
						utftext += String.fromCharCode((c & 63) | 128);
					}
					else {
						utftext += String.fromCharCode((c >> 12) | 224);
						utftext += String.fromCharCode(((c >> 6) & 63) | 128);
						utftext += String.fromCharCode((c & 63) | 128);
					}
		 
				}
		 
				return utftext;
			};
    
			function toUint32(number) {
				return number >>> 0;
			};
			
			function pad(number, length) {
				return ((Array(length + 1).join("0")) + number).slice(length * -1);
			}
		};
		
	}
	
	function lGenerateProductsTag(selectedProducts, currentTag) {
		var currentProductIndex = 0;
		
		return lTraverseProductsTag(selectedProducts, currentTag, new XML("<Products/>"));
		
		function lTraverseProductsTag(selectedProducts, currentTag, currentTopmostTag){
			if (currentProductIndex < selectedProducts.length) {
				var currentProductCode = selectedProducts[currentProductIndex];
				var childWithoutItsChildren;
			
				for each (var child in currentTag.*) {
					if (child.localName() === "Product" && child.@code.toString() === currentProductCode){
						childWithoutItsChildren = lGetShallowCopyFrom(child);
						currentTopmostTag.appendChild(childWithoutItsChildren);
						currentProductIndex++;
						lTraverseProductsTag(selectedProducts, child, childWithoutItsChildren);
					}
					else if (child.localName() === "Choice"){
						childWithoutItsChildren = lGetShallowCopyFrom(child);
						currentTopmostTag.appendChild(childWithoutItsChildren);
						lTraverseProductsTag(selectedProducts, child, childWithoutItsChildren);
					}
				}
			}

			return currentTopmostTag;
		}
		
		function lGetShallowCopyFrom(xmlNode){
			return xmlNode.copy().setChildren(new XMLList(""));
		}
	}

	function lSetProductPrice(productsTag) {
		var saleType = new BusinessObjectHelper().getSaleType();
				
		switch(saleType) {
			case 1:
				productsTag.Product[0].@price = productsTag.Product[0].@priceTakeout;
			default:
				productsTag.Product[0].@price = productsTag.Product[0].@priceEatin;
		}
	}
	
	function lStoreFileContentForBarcodeReceiptCreation() {
		sessionSale.set("SELECTED_BARCODE_LOCAL_PROMO_FILE_CONTENT", fileContent);
	}
}

/**
 * @brief - Prints a barcode promotion receipt
 * @return - True
 * @author - Paulo Florencio
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOPrintBarcodeLocalPromotionJS()
{
	var hlp = new BusinessObjectHelper;
	var printerList = hlp.findParamInSectionWide("PrinterList", "PrintFromKioskOnCounter");
	var printerAliases = hlp.findParamInSectionWide("PrinterAliases", "PrintFromKioskOnCounter");
	
	PosCreateReport("CUSTOMDATA","reportKioskBarcodePromotionReceipt@reports.nps","NOPREVIEW|ALIAS", lGetBarcodeReceiptData(), printerAliases, printerList);
	return true;
	
	function lGetBarcodeReceiptData()
	{
		var selectedProductsCodes = sessionSale.get("SELECTED_BARCODE_LOCAL_PROMO_PRODUCTS").split("|");
		var barcodeFileContent = new XML(sessionSale.get("SELECTED_BARCODE_LOCAL_PROMO_FILE_CONTENT"));

		return lGetProductsNames() + "@" + lGetSelectedProductPrice() + "@" + lGetUtilizationAmount() + "@" + lGetPromotionValidPeriod() + "@" + lGetBarcodeNumber();
	
		function lGetProductsNames(){
			var productsNames = [];
			var language = sessionSale.get("LANGUAGE");
			
			for each (var productCode in selectedProductsCodes)
			{
				productsNames.push(csoProductInfo[productCode].names[language].csoName);
			}
			
			return productsNames.join("|");
		}
		
		function lGetSelectedProductPrice(){
			return barcodeFileContent.Products.Product[0].@price.toString();
		}
		
		function lGetUtilizationAmount(){
			return barcodeFileContent.@utilizationAmount.toString();
		}
		
		function lGetPromotionValidPeriod(){
			var startDate = API.formatDate(barcodeFileContent.@startDate, csoConfigurationInfo.dateFormat);
			var endDate = API.formatDate(barcodeFileContent.@endDate, csoConfigurationInfo.dateFormat);
			return startDate + "|" + endDate;
		}
		
		function lGetBarcodeNumber(){
			return barcodeFileContent.@barcode.toString();
		}
	}
}

/**
* @brief - Function to check if the composition of a promotion is valid.
* @param - composition - The xml node composition to be checked
* @return - true if it's valid, false otherwise
* @author - Vivian Cury
* @since - SDO-6067 - CSO - Local French Promotion - Ability to display local promotions
*/
function sValidatePromotionComposition(composition) {
	var promotionOutage = false;

	for each (var condition in composition.Conditions.Condition)
	{
		var conditionValid = false;
		var conditionOutage = true;
		// SDO-7381 - Kiosk V4 RC13 - Kiosk gets out of sevice when promotion 5 is ordered
		var conditionSaleType = "";
		
		for each (var product in condition.Product)
		{
			// SDO-6555 - Kiosk Local Promotion - Not saleable products are displayed on Local Promotion
			// EQA-517 - [Kiosk v5][French Local Promotions][FR][LAB05] Doubled Sandwich - 'Product Is Not Priced' message appearing
			// SQC-5409 - Kiosk v4 - Script Error when starting transactions on Kiosk
			if (csoProductInfo[product.@code.toString()] != undefined &&
				csoProductInfo[product.@code.toString()].xmlNode.@salable != "true")
			{
				conditionOutage = false;
				continue;
			}
			
			var productValid = isPromotionProductValid(product);
			if (productValid == "true")
			{
				conditionValid = true;
				break;
			}
			else if (productValid == "false")
			{
				conditionOutage = false;
			}
			else if (productValid == "eatin" ||
					 productValid == "takeout")
			{
				conditionOutage = false;
				conditionSaleType = productValid;
			}
		}
		
		if (!conditionValid && !conditionOutage)
		{
			if (conditionSaleType == "")
			{
				return "false";
			}
			else
			{
				return conditionSaleType;
			}
		}
		else if (!conditionValid && conditionOutage)
		{
			promotionOutage = true;
		}
	}
	
	for each (var offer in composition.Offers.Offer)
	{
		var offerValid = false;
		var offerOutage = true;
		// SDO-7381 - Kiosk V4 RC13 - Kiosk gets out of sevice when promotion 5 is ordered
		var offerSaleType = "";
		
		for each (var product in offer.Product)
		{
			// SDO-6555 - Kiosk Local Promotion - Not saleable products are displayed on Local Promotion
			// EQA-517 - [Kiosk v5][French Local Promotions][FR][LAB05] Doubled Sandwich - 'Product Is Not Priced' message appearing
			// SQC-5409 - Kiosk v4 - Script Error when starting transactions on Kiosk
			if (csoProductInfo[product.@code.toString()] != undefined &&
				csoProductInfo[product.@code.toString()].xmlNode.@salable != "true")
			{
				offerOutage = false;
				continue;
			}
			
			var productValid = isPromotionProductValid(product);
			if (productValid == "true")
			{
				offerValid = true;
				break;
			}
			else if (productValid == "false")
			{
				offerOutage = false;
			}
			else if (productValid == "eatin" ||
					 productValid == "takeout")
			{
				offerOutage = false;
				offerSaleType = productValid;
			}
		}
		
		if (!offerValid && !offerOutage)
		{
			if (offerSaleType == "")
			{
				return "false";
			}
			else
			{
				return offerSaleType;
			}
		}
		else if (!offerValid && offerOutage)
		{
			promotionOutage = true;
		}
	}
	
	if (promotionOutage)
	{
		return "outage";
	}
	
	return "true";
}

/**
 * @brief - Get order properties
 * @return - Order properties
 * @author - Paulo Florencio | Vivian Cury
 * @since - SDO-6068 - CSO - Local French Promotion - Ability to validate promotion properties
 */
var getOrder = function() {
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	var formatter = orderFormatter();
	var kioskOrder = kioskOrderView.Order;
	
	var saleType;
	var weekDay;
	var startDate;
	var endDate;
	var time;
	var amount;
	var hasPurchaseMade;
	
	if (kioskOrder == undefined){
		var currentDate = new Date();
		
		saleType = formatter.formatSaleType(hlp.getSaleType());
		weekDay = formatter.formatWeekDay(currentDate.getDay());
		startDate = formatter.formatDate(currentDate);
		endDate = formatter.formatDate(currentDate);
		time = formatter.formatTime(currentDate);
		amount = "0.00";
		hasPurchaseMade = false;
	}
	else {
		saleType = formatter.formatSaleType(Number(kioskOrder.@saleType));
		weekDay = formatter.formatWeekDay(
						new Date(
							kioskOrder.@saleDate.substring(0,4),
							kioskOrder.@saleDate.substring(4,6)-1,
							kioskOrder.@saleDate.substring(6,8)
						).getDay()
					);
		startDate = kioskOrder.@saleDate.toString();
		endDate = kioskOrder.@saleDate.toString();
		time = kioskOrder.@saleTime.toString();
		var bdAmount = new BigDecimal(kioskOrder.@totalAmount.toString());
		
		var numPromoItems = 0;
		if (kioskOrder.Group != undefined) {
			for each (var group in kioskOrder.Group) {
				//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
				if (isLocalPromotion(group.@name.toString())) {
					var indexes = group.@memberIndexes.toString().split("|");
					numPromoItems = numPromoItems + indexes.length;
					
					// EQA-954 - [November Release][6.1.21RC13HF1][SL 2.80.02a][Local Promotions][Lab 05][FR] Kiosk displays minimum spend error when totalling an order after redeeming a Local Promotion coupon
					bdAmount = bdAmount.subtract(new BigDecimal(group.@groupPrice));
				}
			}
		}
		
		amount = bdAmount.toString();
		
		var numSaleItems = 0;
		for each (var item in kioskOrder.Item) {
			numSaleItems = numSaleItems + Number(item.Product.@qty);
		}
		
		hasPurchaseMade = (numSaleItems - numPromoItems) > 0;
	}
	
	return {
		saleType: saleType,
		weekDay: weekDay,
		startDate: startDate,
		endDate: endDate,
		time: time,
		amount: amount,
		hasPurchaseMade: hasPurchaseMade
	};
};

/**
* @brief - Function to reload the outage file. Should be called from BCEventsCSO every time the outage file is modified
* @return - true if the file was reloaded successfully
* @author - Vladimir Dobroff
* @since - NPS-11501 DA - NP6.1.21RC8-HF6 - FR-LocalPromo-Pilot#2: kiosks slowness - ACSI1268215 
*/
function PosCSOReloadProductOutage()
{
	try
	{
		var posDataPath	= hlp.PosGetDataDir();
		var outageFile  = posDataPath + "/prodoutage.xml";
		var currentOutageFile = csoOutageXml;
		
		csoOutageXml = new XML(hlp.PosReadFile(outageFile).replace(/^<\?xml\s+version\s*=\s*(["'])[^\1]+\1[^?]*\?>/, ""));
		
		//7958410 - Menu with no Active Products should not appear
		if (currentOutageFile != csoOutageXml)
			sessionSale.set("csoOutageReloaded", "true");
	}
	catch(ex)
	{
		API.dbg("Failed while getting outage file, due to: " + ex);
		return false;
	}
	
	return true;
}

/**
* @brief - Function to check if a product is in the outage file.
* @param - productCode - The product to be checked
* @return - true if it's in the outage file, false otherwise
* @author - Vivian Cury
* @since - SDO-6067 - CSO - Local French Promotion - Ability to display local promotions
*/
function isProductOutage(productCode)
{
	try
	{
		//NPS-11501 DA - NP6.1.21RC8-HF6 - FR-LocalPromo-Pilot#2: kiosks slowness - ACSI1268215 
		if (csoOutageXml == null)
		{
			if (!PosCSOReloadProductOutage()) return false;
		}
	
		var outage = csoOutageXml.Product.(@code == productCode).length();
		if (outage > 0)
		{
			return true;
		}
		
		return false;
	}
	catch(ex)
	{
		API.dbg("Failed while getting outage file, due to: " + ex);
		return false;
	}
}

/**
* @brief - Function to check if a promotion product, together with its inner choices, is valid.
* @param - product - The xml node product to be checked
* @return - true if it's valid, false otherwise
* @author - Vivian Cury
* @since - SDO-6067 - CSO - Local French Promotion - Ability to display local promotions
*/
function isPromotionProductValid(product)
{
	if (csoProductInfo[product.@code.toString()] == undefined ||
		!csoProductInfo[product.@code.toString()].isValid ||
		!bCheckProductDayPartCode(product.@code.toString()) ||
		!PosCheckIfPriceNodeIsValid(csoProductInfo[product.@code.toString()].xmlNode))
	{
		return "false";
	}
	
	if (isProductOutage(product.@code.toString()))
	{
		return "outage";
	}
	
	// SDO-7381 - Kiosk V4 RC13 - Kiosk gets out of sevice when promotion 5 is ordered
	var saleType = sCheckProductSaleType(product.@code.toString());
	if (saleType != "true")
	{
		return saleType;
	}
	
	var productOutage = false;
	
	for each (var choice in product.Choice)
	{
		if (csoProductInfo[choice.@code.toString()] == undefined ||
			!csoProductInfo[choice.@code.toString()].isValid ||
			!bCheckProductDayPartCode(choice.@code.toString()) ||
			(choice.costInclusive == "false" && !PosCheckIfPriceNodeIsValid(csoProductInfo[choice.@code.toString()].xmlNode)))
		{
			return "false";
		}

		if (isProductOutage(choice.@code.toString()))
		{
			return "outage";
		}
		
		var choiceValid = false;
		var choiceOutage = true;
		// SDO-7381 - Kiosk V4 RC13 - Kiosk gets out of sevice when promotion 5 is ordered
		var choiceSaleType = "";
		
		for each (var innerproduct in choice.Product)
		{
			var productValid = isPromotionProductValid(innerproduct);
			if (productValid == "true")
			{
				choiceValid = true;
				break;
			}
			else if (productValid == "false")
			{
				choiceOutage = false;
			}
			else if (productValid == "eatin" ||
					 productValid == "takeout")
			{
				choiceOutage = false;
				choiceSaleType = productValid;
			}
		}
		
		if (!choiceValid && !choiceOutage)
		{
			if (choiceSaleType == "")
			{
				return "false";
			}
			else
			{
				return choiceSaleType;
			}
		}
		else if (!choiceValid && choiceOutage)
		{
			productOutage = true;
		}
	}
	
	// SDO-6556 - Kiosk Local Promotion - Complement products for Doubled promotions are not being validated
	// EQA-517 - [Kiosk v5][French Local Promotions][FR][LAB05] Doubled Sandwich - 'Product Is Not Priced' message appearing
	for each (var complement in product.Complement)
	{
		var complementValid = false;
		var complementOutage = true;
		// SDO-7381 - Kiosk V4 RC13 - Kiosk gets out of sevice when promotion 5 is ordered
		var complementSaleType = "";
		
		for each (var innerproduct in complement.Product)
		{
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (csoProductInfo[innerproduct.@code.toString()] == undefined || csoProductInfo[innerproduct.@code.toString()].xmlNode == undefined) {
				continue;
			}
			
			if (csoProductInfo[innerproduct.@code.toString()].xmlNode.@salable != "true")
			{
				complementOutage = false;
				continue;
			}
			
			var productValid = isPromotionProductValid(innerproduct);
			if (productValid == "true")
			{
				complementValid = true;
				break;
			}
			else if (productValid == "false")
			{
				complementOutage = false;
			}
			else if (productValid == "eatin" ||
					 productValid == "takeout")
			{
				complementOutage = false;
				complementSaleType = productValid;
			}
		}
		
		if (!complementValid && !complementOutage)
		{
			if (complementSaleType == "")
			{
				return "false";
			}
			else
			{
				return complementSaleType;
			}
		}
		else if (!complementValid && complementOutage)
		{
			productOutage = true;
		}
	}
	
	if (productOutage)
	{
		return "outage";
	}
	
	return "true";
}

/**
* @brief - Function to check if a product can be sold in the current day time. Internally check the product Day Part Code and compare it to the current time.
* @param - productCode - The product whose configuration will be checked
* @return - true if can be sold, false otherwise
* @author - Vladimir Dobroff
* @since - SDO-6067 - CSO - Local French Promotion - Ability to display local promotions
*/
function bCheckProductDayPartCode(productCode)
{
	var hlp = new BusinessObjectHelper;

	if (csoProductInfo[productCode] == null)
	{
		API.dbg("bCheckProductDayPartCode - Invalid product code: " + productCode);
		return false;
	}
	
	var productXmlNode = csoProductInfo[productCode].xmlNode;
	
	if (productXmlNode == null)
	{
		API.dbg("bCheckProductDayPartCode - Invalid product code: " + productCode);
		return false;
	}
	
	var productDayPartCode = productXmlNode.DayPartCode;
	
	//if the product day part code is not configured, assume that the product can be sold during the whole day
	if ((productDayPartCode == null) || (productDayPartCode == undefined))
	{
		API.dbg("bCheckProductDayPartCode - Invalid Day Part Code for product: " + productCode);
		return true;
	}
	
	//Check if the product may be sold during the whole day
	if (productDayPartCode == "BREAKFAST_DAY_MENU")
	{
		return true;
	}

	var currentTime = new Date();
	var breakfastStartTime = new Date();
	var breakfastEndTime = new Date();     
	
	var breakfastStartString;
	var breakfastEndString;
	
	//Check for weekends
	if ((currentTime.getDay() == 0) || (currentTime.getDay() == 6))
	{
		breakfastStartString = storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekEnd;
		breakfastEndString = storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekEnd;
	}
	else
	{
		breakfastStartString = storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekDay;
		breakfastEndString = storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekDay;
	}
	
	//if the breakfast time is not configured, assume that the product can be sold during the whole day
	if ((breakfastStartString == null) || (breakfastEndString == null))
	{
		API.dbg("bCheckProductDayPartCode - Breakfast time not configured inside Store-db.xml (StoreDB->StoreProfile->BusinessLimits)");
		return true;
	}
	
	var startTimeHH = Number(breakfastStartString.split(":")[0]);
	var startTimeMM = Number(breakfastStartString.split(":")[1]);
	
	var endTimeHH = Number(breakfastEndString.split(":")[0]);
	var endTimeMM = Number(breakfastEndString.split(":")[1]);

	breakfastStartTime.setHours(startTimeHH, startTimeMM, 0);
	breakfastEndTime.setHours(endTimeHH, endTimeMM, 0);
	
	//PosShowMessage("productDayPartCode: " + productDayPartCode);
	//PosShowMessage("currentTime: " + currentTime);
	//PosShowMessage("currentTime.getDay(): " + currentTime.getDay());
	//PosShowMessage("breakfastStartTime: " + breakfastStartTime);
	//PosShowMessage("breakfastEndTime: " + breakfastEndTime);
	
	if (productDayPartCode == "BREAKFAST_MENU")
	{
		//Check if inside the breakfast limits
		if ((currentTime >= breakfastStartTime) && (currentTime <= breakfastEndTime))
		{
			return true;
		}
	}
	else if (productDayPartCode == "DAY_MENU")
	{
		//Check if inside the day limits
		if ((currentTime < breakfastStartTime) || (currentTime > breakfastEndTime))
		{
			return true;
		}
	}
	
	return false;
}

/**
 * @brief - Function to check if a product can be sold in the current sale type.
 * @param - productCode - The product whose configuration will be checked
 * @return - true if can be sold in any sale type, false if cannot be sold in any sale type
 *           eatin if can be sold only in eat-in, takeout if can be sold only in take-out
 * @author - Vivian Cury
 * @since - SDO-7381 - Kiosk V4 RC13 - Kiosk gets out of sevice when promotion 5 is ordered
 */
function sCheckProductSaleType(productCode)
{
	if (csoProductInfo[productCode] == null)
	{
		API.dbg("bCheckProductSaleType - Invalid product code: " + productCode);
		return "false";
	}
	
	var productXmlNode = csoProductInfo[productCode].xmlNode;
	
	if (productXmlNode == null)
	{
		API.dbg("bCheckProductSaleType - Invalid product code: " + productCode);
		return "false";
	}
	
	var productSaleType = productXmlNode.SalesType;
	
	//if the product sale type is not configured, assume that the product can be sold for any sale type
	if ((productSaleType == null) || (productSaleType == undefined))
	{
		return "true";
	}
	
	if (productSaleType.@eatin != undefined &&
		productSaleType.@eatin == "false" &&
		productSaleType.@takeout != undefined &&
		productSaleType.@takeout == "false")
	{
		API.dbg("bCheckProductSaleType - Product code disabled for all sale types: " + productCode);
		return "false";
	}
	else if (productSaleType.@eatin != undefined &&
			 productSaleType.@eatin == "false")
	{
		API.dbg("bCheckProductSaleType - Product code disabled for eatin: " + productCode);
		return "takeout";
	}
	else if (productSaleType.@takeout != undefined &&
			 productSaleType.@takeout == "false")
	{
		API.dbg("bCheckProductSaleType - Product code disabled for takeout: " + productCode);
		return "eatin";
	}
	
	if (productXmlNode.@productClass != undefined &&
		productXmlNode.@productClass == "VALUE_MEAL")
	{
		for each (var component in productXmlNode.Composition.Component)
		{
			var checkResult = sCheckProductSaleType(component.ProductCode.toString())
			if (checkResult != "true")
			{
				return checkResult;
			}
		}
	}
	
	return "true";
}

/**
 * @brief - Verifies if there's at least one promotion to be shown
 * @return - true | false
 * @author - Vivian Cury
 * @since - SDO-6067 - CSO - Local French Promotion - Ability to display local promotions
 */
 function PosCSOSendPromoAvailableJS() {

	var eventXML = new XML('<Event type="ASYNC" name="DLG_LOCAL_PROMOTION_AVAILABILITY" />');
	eventXML.@value = PosCSOIsLocalPromoAvailableJS();
	
	PosSendUICmd(eventXML.toXMLString());
	
	return true;
}

/**
 * @brief - This code was originaly inside PosCSOSendPromoAvailableJS. Created a separate function in order to reuse it in NGK
 * @return - true | false
 * @author - Vladimir
 * @since - NGK 5.1
 */
function PosCSOIsLocalPromoAvailableJS()
{
	var currentLang = sessionSale.get("LANGUAGE");
	var isPromoAvailable = false;
	
	// SQC-5266 - NGK v5.3 - OK Button on Local Promotions Warning Messages "Take Out Only", "Eat In Only" and Valid only during XX:XX hours to XX:XX hours is not working 
	// Also, the local promotions button should not be displayed if the only promotion available doesn't pass date validation
	var hlp = new BusinessObjectHelper();
	var formatter = orderFormatter();
	var validator = localPromotionValidator();
	var orderProperties = { saleType:formatter.formatSaleType(hlp.getSaleType()), 
							time:formatter.formatTime(new Date()),
							startDate:lGetBusinessDate(hlp),
							endDate:formatter.formatDate(new Date()),
							amount:0/*we do not validate for amount now*/};
	
	for each (var promo in csoLocalPromotions) {
		if (promo.display) {
			var promoNode = promo.xmlNode;
			var languageSectionXml = promoNode.Configuration.(@type == "Languages").Section.(@name == currentLang);
			
			if (languageSectionXml != undefined &&
				languageSectionXml.Parameter.(@name == "Title") != undefined) {
				var promotionCompositionIsValid = sValidatePromotionComposition(promoNode.Composition);
				var validationResult = validator.validate(promo, orderProperties);
				
				if (promotionCompositionIsValid != "false" && validationResult.dateValidation.isValid) {
					isPromoAvailable = true;
					API.dbg("PosCSOSendPromoAvailableJS - There are valid promotions available.");
					
					//NPS-11501 DA - NP6.1.21RC8-HF6 - FR-LocalPromo-Pilot#2: kiosks slowness - ACSI1268215
					//Since a valid promotion has already been found, there is no need to keep checking the remaining ones
					break;
				}
			}
		}
	}
	
	// SQC-4055 - CSO - Local French Promotion - Barcode button doesn't appear in some situations
	if (csoBarcodeLocalPromotions != undefined && csoBarcodeLocalPromotions.isActive != undefined && csoBarcodeLocalPromotions.isActive) {
		isPromoAvailable = true;
	}

	//CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
	//Disable French Local Promotions when Offers or Global Promotions are enabled
	if (sessionSale.get("IS_NGK") == "true")
	{
		var POSGlobalPromotionsEnabled = hlp.findParamInSectionWide("isEnabled", "Promotion") == "true";
		var POSOffersEnabled = hlp.findParamInSectionWide("isEnabled", "Offers") == "true";
		var CSOOffersEnabled = lGetCSOUserInterfaceStringParameter("enableOffers", "false") == "true";
		
		if (POSGlobalPromotionsEnabled || POSOffersEnabled || CSOOffersEnabled)
		{
			isPromoAvailable = false;
		}
	}
	
	return isPromoAvailable;
	
	function lGetBusinessDate(hlp){
		var helpDate = hlp.getBusinessDate(false);
		if(helpDate != null){
			var bd = new XML(hlp.getBusinessDate(false));
			if(bd != null && bd.@Register != null){
				return bd.@Register.toString();
			}
		}
		return "";
	}
}

//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
function isLocalPromotion(promoName) {
	if (csoLocalPromoBarcodesInUse[promoName] != undefined) {
		return true;
	}
	
	var currentLang = sessionSale.get("LANGUAGE");
	for each (var promo in csoLocalPromotions)
	{
		var localPromoName = (promo.xmlNode.Composition.@name != undefined) ? promo.xmlNode.Composition.@name.toString() :
						 promo.xmlNode.Configuration.(@type == "Languages").Section.(@name == currentLang)
							.Parameter.(@name == "Title").@value.toString();
		if (localPromoName == promoName)
		{
			return true;
		}
		
		// SDO-6850 - CSO - Local Promotions - Upselling promotions are not considered in the promotion limit
		// EQA-565 - Local Promotion quantity limit does not always work
		var upsellingName = PosCSOI18nGetMessageJS("CSO_LOCALPROMO_UPSELLING_TITLE_PREFIX") + " " + localPromoName;
		if (upsellingName == promoName)
		{
			return true;
		}
	}
	
	return false;
}

/**
 * @brief - Returns the number of promotional items in the order basket
 * @param - countUnlimitedPromotions - boolean indicating whether or not promotions configured as unlimited should be counted. Defaults to false.
 * @param - promotionId - When passed to the function, this parameter filters the count only to the given promotion
 * @return - Promotion quantity
 * @author - Paulo Florencio
 * @since - CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
 */
function getQuantityOfPromotionInTheBasket(countUnlimitedPromotions, promotionId)
{
	if (typeof countUnlimitedPromotions === "undefined") countUnlimitedPromotions = false;

	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	var quantity = 0;
	var groups;
	var promotionName;
	
	if (kioskOrderView.Order != undefined)
	{
		groups = kioskOrderView.Order.Group;
		
		if (typeof promotionId !== "undefined") {
			groups = groups.(@localPromotionId == promotionId);
		}
	
		for each (var group in groups)
		{
			// CSO-26 - CSO v4 - Local Promotions Button - Script Error
			if (group.@localPromotionId != undefined && group.@localPromotionId != "-1" &&
				(countUnlimitedPromotions || !csoLocalPromotions[group.@localPromotionId.toString()].isQuantityUnlimited())) {
				quantity++;
			}
		}
	}
	// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
	if(null!=sessionSale.get("NGK_DISCOUNT_BARCODE_APPLIED")) {
		quantity++;
	}
	return quantity;
}

/**
 * @brief - Show the list of available promotions
 * @return - true if there's a promotion selected, false otherwise
 * @author - Vivian Cury
 * @since - SDO-6067 - CSO - Local French Promotion - Ability to display local promotions
 */
 function PosCSOShowLocalPromotionsJS() {
	var buttonsSpaces = new Array();
	var buttonsValuesSpaces = new Array();
	var buttons = new Array();
	var buttonsValues = new Array();
	var screenText;
	
	var currentLang = sessionSale.get("LANGUAGE");
	
	var hlp = new BusinessObjectHelper();
	var businessDate =  lGetBusinessDate(hlp);
	var imageName = hlp.findParamInSectionWide("CSOPromoButtonBackground", "ImageDB_" + currentLang);
	
	var formatter = orderFormatter();
	var validator = localPromotionValidator();
	
	//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
	var hasUnlimitedPromotionsToDisplay = false;
	var displayablePromotions = [];
	var globalLimitReached = getQuantityOfPromotionInTheBasket() >= Number(lGetParameterStr("localPromoMaxNumber", "1"));
	var barcodeCount = 0;
	
	// SQC-4055 - CSO - Local French Promotion - Barcode button doesn't appear in some situations
	if (csoBarcodeLocalPromotions != undefined && csoBarcodeLocalPromotions.isActive != undefined && csoBarcodeLocalPromotions.isActive)
	{
		barcodeCount++;
	}
	
	//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
	for each (var promo in csoLocalPromotions) {
		if (promo.display) {
			var promoNode = promo.xmlNode;
			var languageSectionXml = promoNode.Configuration.(@type == "Languages").Section.(@name == currentLang);
			
			if (languageSectionXml != undefined &&
				languageSectionXml.Parameter.(@name == "Title") != undefined) {
				
				var promotionCompositionIsValid = sValidatePromotionComposition(promoNode.Composition);
				var orderProperties = { saleType:formatter.formatSaleType(hlp.getSaleType()), 
										time:formatter.formatTime(new Date()),
										startDate:businessDate,
										endDate:formatter.formatDate(new Date()),
										amount:0/*we do not validate for amount now*/};
				var validationResult = validator.validate(promo, orderProperties);
				
				if (promotionCompositionIsValid != "false" && validationResult.dateValidation.isValid) {
					if (promo.isQuantityUnlimited()) {
						hasUnlimitedPromotionsToDisplay = true;
					}

					// SDO-7381 - Kiosk V4 RC13 - Kiosk gets out of sevice when promotion 5 is ordered
					var productsSaleTypeValidation = ((promotionCompositionIsValid === "eatin" && orderProperties.saleType === "TAKEOUT") ||
													  (promotionCompositionIsValid === "takeout" && orderProperties.saleType === "EATIN")) ? false : true;
					
					displayablePromotions.push({
						promoNode: promoNode,
						title: languageSectionXml.Parameter.(@name == "Title").@value.toString(),
						outage: promotionCompositionIsValid === "outage",
						globalLimitReachedByPromotion: validator.hasReachedGlobalLimit(promoNode),
						promotionIsValid: validationResult.saleTypeValidation.isValid
								&& productsSaleTypeValidation
								&& validationResult.timeValidation.isValid
								&& !validator.hasReachedPromotionLimit(promoNode),
						validationOverlayText: (function(){
								if (!validationResult.saleTypeValidation.isValid) {
									return validationResult.saleTypeValidation.errorMessage;
								}
								if (!productsSaleTypeValidation) {
									if (promotionCompositionIsValid === "eatin" && orderProperties.saleType === "TAKEOUT") {
										return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_EAT_IN_ONLY");
									}
									else if (promotionCompositionIsValid === "takeout" && orderProperties.saleType === "EATIN") {
										return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_TAKE_OUT_ONLY");
									}
								}
								if (!validationResult.timeValidation.isValid) {
									return validationResult.timeValidation.errorMessage;
								}
								if (validator.hasReachedPromotionLimit(promoNode)) {
									return PosCSOI18nGetMessageJS("CSO_LOCALPROMO_PROMO_LIMIT_REACHED");
								}
								return "";
							})()
					});
				}
			}
		}
	}
	
	//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
	if (displayablePromotions.length + barcodeCount === 1)
	{
		if (displayablePromotions.length === 1)
		{
			if (!displayablePromotions[0].promotionIsValid){
				PosShowMessage(displayablePromotions[0].validationOverlayText);
			}
			else if (displayablePromotions[0].globalLimitReachedByPromotion){
				PosShowMessage(PosCSOI18nGetMessageJS("CSO_LOCALPROMO_MAX_NUMBER_REACHED"));
			}
			else if (displayablePromotions[0].outage){
				PosShowMessage(PosCSOI18nGetMessageJS("CSO_MSG_SOLD_OUT"));
			}
			else {
				// NPS-12165 - NP6.1.21 - FR-LocalPromo-CSO-Issues if only one LP configured - ACSI1501908
				sessionSale.set("SelectedButtonValue", displayablePromotions[0].promoNode.@id);
				sessionSale.set("SELECTED_LOCAL_PROMO_ID", displayablePromotions[0].promoNode.@id);
				return true;
			}
			
			// SQC-5266 - NGK v5.3 - OK Button on Local Promotions Warning Messages "Take Out Only", "Eat In Only" and Valid only during XX:XX hours to XX:XX hours is not working 
			if (sessionSale.get("IS_NGK") == "true")
			{
				PosNGKShowMainScreen();
			}
			return false;
		}
		if (barcodeCount === 1)
		{
			if (globalLimitReached) {
				PosShowMessage(PosCSOI18nGetMessageJS("CSO_LOCALPROMO_MAX_NUMBER_REACHED"));
			}
			else {
				PosCSODoShowLocalPromotionBarcodeReaderJS("REDEEM");
			}
			return false;
		}
	}
	else {
		for each (var promo in displayablePromotions) {
		
			buttonsSpaces[Number(promo.promoNode.@index)] = promo.title
															+ "@" + imageName
															+ "@" + promo.outage.toString()
															+ "@" + promo.globalLimitReachedByPromotion.toString()
															+ "@" + promo.promotionIsValid.toString()
															+ "@" + promo.validationOverlayText;
														
			buttonsValuesSpaces[Number(promo.promoNode.@index)] = promo.promoNode.@id;
		}
	}
	
	// Remove "blank spaces"
	for each (var button in buttonsSpaces) buttons.push(button);
	for each (var value in buttonsValuesSpaces) buttonsValues.push(value);
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		//EQA-556 - Have Coupon button not being displayed for Pay At Counter transactions
		//Removed the code that disables the button when selecting to pay at the counter
		//if (sessionSale.get("NGK_ORDER_REROUTE") == "PAY_HERE")
		//{
			//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
			if (csoBarcodeLocalPromotions != undefined && csoBarcodeLocalPromotions.isActive != undefined && csoBarcodeLocalPromotions.isActive)
			{
				// CSO-73 - NGK - "I have a coupon" button is never displayed
				buttons.push(PosCSOI18nGetMessageJS("CSO_LOCALPROMO_BARCODE_BUTTON_TITLE") + "@" + hlp.findParamInSectionWide("CSOPromoBarcodeBackground", "ImageDB_" + currentLang) +
								"@false@" + globalLimitReached + "@true" + "@" + "BARCODE" + "@");
				buttonsValues.push("BARCODE");
			}
		//}
	}
	else
	{
		//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
		//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
		if (csoBarcodeLocalPromotions != undefined && csoBarcodeLocalPromotions.isActive != undefined && csoBarcodeLocalPromotions.isActive)
		{
			buttons.push(PosCSOI18nGetMessageJS("CSO_LOCALPROMO_BARCODE_BUTTON_TITLE") + "@" + hlp.findParamInSectionWide("CSOPromoBarcodeBackground", "ImageDB_" + currentLang) +
							"@false@" + globalLimitReached + "@true@");
			buttonsValues.push("BARCODE");
		}
	}
	
	//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
	if (globalLimitReached)
	{
		if (hasUnlimitedPromotionsToDisplay) {
			screenText = PosCSOI18nGetMessageJS("CSO_LOCALPROMO_MAX_NUM_REACHED_UNLIMITED_AVAILABLE");
		}
		else {
			screenText = PosCSOI18nGetMessageJS("CSO_LOCALPROMO_MAX_NUMBER_REACHED");
		}
	}
	else
	{
		screenText = PosCSOI18nGetMessageJS("CSO_LOCALPROMO_WELCOME");
	}
	
	retValue = PosCSOSendSyncMessageJS("SYNC_PROMO_DLG", buttons, buttonsValues, screenText);
	
	if (retValue != undefined && retValue != "") {
		//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
		if (retValue == "BARCODE") {
			PosCSODoShowLocalPromotionBarcodeReaderJS("REDEEM");
			return false;
		} else {
			sessionSale.set("SELECTED_LOCAL_PROMO_ID", retValue);
			return true;
		}
	}
	
	return false;

	function lGetBusinessDate(hlp){
		var helpDate = hlp.getBusinessDate(false);
		if(helpDate != null){
			var bd = new XML(hlp.getBusinessDate(false));
			if(bd != null && bd.@Register != null){
				return bd.@Register.toString();
			}
		}
		return "";
	}
}

/**
 * @brief - Validate the properties of a specific promotion
 * @param - promotionId: the id of the promotion to be validated
 * @return - true if the promotion passed all validations, false otherwise
 * @author - Paulo Florencio | Vivian Cury
 * @since - SDO-6068 - CSO - Local French Promotion - Ability to validate promotion properties
 */
function PosCSOValidatePromotionPropertiesJS(promotionId){
	var order = getOrder();

	var validator = localPromotionValidator();
	var validationResult = validator.validate(csoLocalPromotions[promotionId], order);
	
	if (!validationResult.weekDayValidation.isValid) {
		PosShowMessage(validationResult.weekDayValidation.errorMessage);
		return false;
	}
	
	/*Sale type, date and time validation is moved to PosCSOShowLocalPromotionsJS, as a result of SDO-6164*/
	
	if (!validationResult.minimumAmountValidation.isValid) {
		PosShowMessage(validationResult.minimumAmountValidation.errorMessage);
		return false;
	}
	
	if (!validationResult.purchaseRequirementValidation.isValid) {
		PosShowMessage(validationResult.purchaseRequirementValidation.errorMessage);
		return false;
	}
	
	return true;
}

/**
 * @brief - Show the confirmation message of a specific promotion
 * @param - promotionId: the id of the promotion
 * @return - true if the customer pressed yes, false otherwise
 * @author - Vivian Cury
 * @since - SDO-6068 - CSO - Local French Promotion - Ability to validate promotion properties
 */
function PosCSOShowPromotionConfirmationMessageJS(promotionId) {
	var currentLang = sessionSale.get("LANGUAGE");
	var languageSectionXml = csoLocalPromotions[promotionId].xmlNode.Configuration.(@type == "Languages").Section.(@name == currentLang);
	
	if (languageSectionXml != undefined 
		&& languageSectionXml.Parameter.(@name == "ConfirmationMessage") != undefined
		&& languageSectionXml.Parameter.(@name == "ConfirmationMessage").@value != undefined
		&& languageSectionXml.Parameter.(@name == "ConfirmationMessage").@value != "")
	{
		if (sessionSale.get("IS_NGK") == "true")
		{
			var option=PosShowConfirmationMessage(languageSectionXml.Parameter.(@name == "ConfirmationMessage").@value, "MSG_NO", "MSG_YES");
			if(null==option) {
				return null;
			}
			if (option) {
				return false;
			}
		}
		else
		{
			if (!PosShowConfirmationMessage(languageSectionXml.Parameter.(@name == "ConfirmationMessage").@value, "MSG_YES", "MSG_NO")) {
				return false;
			}
		}
	}
	
	return true;
}

/**
 * @brief - Asks the promotion barcode
 * @param - promotionId: the id of the promotion
 * @return - true if the promotion doesn't have a barcode, false otherwise
 * @author - Vivian Cury
 * @since - SDO-6068 - CSO - Local French Promotion - Ability to validate promotion properties
 */
function PosCSOValidateBarcodeJS(promotionId) {
	var barcode;
	
	if (csoLocalPromotions[promotionId].xmlNode.Configuration.(@type == "Properties").Section.(@name == "Properties").Parameter.(@name == "Barcode") != undefined) {
		barcode = csoLocalPromotions[promotionId].xmlNode.Configuration.(@type == "Properties").Section.(@name == "Properties").Parameter.(@name == "Barcode").@value;
	}
	
	if (barcode != undefined && barcode != "") {
		if (sessionSale.get("IS_NGK") == "true")
		{
		    // CSO-114 - DA -GUIv4RC11 HF1- Local Promo - Manually typing barcode doesn't limit to 9 digits - 7123363
			var barcodeLength = barcode.toString().length;
			var xml = lCreateKioskEvent("ASYNC", "DLG_SHOW_PROMOTION_BARCODE", new Array("Mode|VALIDATE", "BarcodeLength|" + barcodeLength.toString()));
			PosSendUICmd(xml);
			return false;
		}
		else
		{
			var xml = lCreateKioskEvent("ASYNC", "DLG_SHOW_PROMOTION_BARCODE", new Array("VALIDATE"));
			PosSendUICmd(xml);
			return false;
		}
	}
	
	return true;
}

/**
 * @brief - Validates the promotion barcode
 * @param - enteredBarcode: the barcode entered by the customer
 * @return - true if the barcode is ok, false otherwise
 * @author - Vivian Cury
 * @since - SDO-6068 - CSO - Local French Promotion - Ability to validate promotion properties
 */
function PosCSOCheckLocalPromotionBarcodeJS(enteredBarcode) {
	var localPromoBarcode = csoLocalPromotions[sessionSale.get("SELECTED_LOCAL_PROMO_ID")]
								.xmlNode.Configuration.(@type == "Properties").Section.(@name == "Properties")
								.Parameter.(@name == "Barcode").@value;
	
	if (enteredBarcode != localPromoBarcode) {
		PosShowMessage("CSO_LOCALPROMO_BARCODE_MISMATCH");
		return false;
	}
	
	return true;
}

/**
 * @brief - Revalidates the promotion minimum amount and purchase required at check out
 * @return - true if it's still valid, false otherwise
 * @author - Vivian Cury
 * @since - SDO-6068 - CSO - Local French Promotion - Ability to validate promotion properties
 */
function PosCSOValidatePromosJS() {
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	var currentLang = sessionSale.get("LANGUAGE");
	var currentOrder = getOrder();

	for each (var group in kioskOrderView.Order.Group)
	{
		//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
		if (csoLocalPromoBarcodesInUse[group.@name.toString()] != undefined) {
			for each (var barcodePromo in csoLocalPromoBarcodesInUse[group.@name.toString()]) {
				// NPS-12477 - NP6.1.21RC8-HF6 - FR-25001406-LocalPromo-MinimumAmount issue - ACSI1601427
				if ((new BigDecimal(currentOrder.amount)).compareTo(new BigDecimal(barcodePromo.@utilizationAmount)) < 0) {
					PosShowMessage("CSO_LOCALPROMO_MINIMUM_AMOUNT_ON_DONE");
					return false;
				}
			}
			
			continue;
		}
		
		for each (var promo in csoLocalPromotions)
		{
			var promoName = (promo.xmlNode.Composition.@name != undefined) ? promo.xmlNode.Composition.@name.toString() :
						promo.xmlNode.Configuration.(@type == "Languages").Section.(@name == currentLang)
							.Parameter.(@name == "Title").@value.toString();
			if (promoName == group.@name.toString())
			{
				if (promo.xmlNode.Configuration.(@type == "Properties")
						.Section.(@name == "Properties").Parameter.(@name == "MinimumAmount") != undefined)
				{
					var promoMinAmount = promo.xmlNode.Configuration.(@type == "Properties")
											.Section.(@name == "Properties").Parameter.(@name == "MinimumAmount").@value.toString();
					
					// NPS-12477 - NP6.1.21RC8-HF6 - FR-25001406-LocalPromo-MinimumAmount issue - ACSI1601427
					if ((new BigDecimal(currentOrder.amount)).compareTo(new BigDecimal(promoMinAmount)) < 0)
					{
						PosShowMessage("CSO_LOCALPROMO_MINIMUM_AMOUNT_ON_DONE");
						return false;
					}
				}
				
				// SDO-6654 - [GQA][French Local Promotions][Kiosk RC11][Drop 1][VTE:Store#2]::No Warning message is displayed while totaling the order by clicking on <Done> button when "Purchase Required" property is configured for a promotion.
				if (promo.xmlNode.Configuration.(@type == "Properties")
						.Section.(@name == "Properties").Parameter.(@name == "PurchaseRequired") != undefined &&
					promo.xmlNode.Configuration.(@type == "Properties")
						.Section.(@name == "Properties").Parameter.(@name == "PurchaseRequired")
						.@value.toString().toUpperCase() == "TRUE")
				{
					if (!currentOrder.hasPurchaseMade)
					{
						PosShowMessage("CSO_LOCALPROMO_PURCHASE_REQUIRED_ON_DONE");
						return false;
					}
				}
				
				break;
			}
		}
	}
	
	return true;
}

/**
 * @brief - Sends the composition of the selected promotion to the UI
 * @return - 
 * @author - Vivian Cury
 * @since - 
 */
function PosCSOStartPromotionJS() {
	var selectedId = sessionSale.get("SELECTED_LOCAL_PROMO_ID");
	var eventXml = GenerateLocalPromotionView(selectedId);
	
	return PosSendUICmd(eventXml);
	
	function GenerateLocalPromotionView(promoId) {
		var currentLang = sessionSale.get("LANGUAGE");
		var promo = csoLocalPromotions[promoId];
		var promoNode = promo.xmlNode;
		
		var xmlResult = new XML('<Event type="ASYNC" name="DLG_LOCAL_PROMOTION_OPTIONS" />');
		var promotionXml = new XML("<Promotion />");
		
		promotionXml.@id = promoNode.@id;
		promotionXml.@type = promoNode.@type;
		
		var compositionXml = new XML("<Composition />");
		var conditionsXml = new XML("<Conditions />");
		var offersXml = new XML("<Offers />");
		
		compositionXml.@group = promoNode.Composition.@group;
		compositionXml.@name = promoNode.Composition.@name;
		
		for each (var condition in promoNode.Composition.Conditions.Condition)
		{
			var conditionXml = new XML("<Condition />");
			for each (var product in condition.Product)
			{
				// SDO-6483 - Kiosk Local Promotion - Inactive products are displayed on Local Promotion
				// EQA-517 - [Kiosk v5][French Local Promotions][FR][LAB05] Doubled Sandwich - 'Product Is Not Priced' message appearing
				// SQC-5409 - Kiosk v4 - Script Error when starting transactions on Kiosk
				if (csoProductInfo[product.@code.toString()] != undefined &&
					csoProductInfo[product.@code.toString()].xmlNode.@salable == "true")
				{
					var productValid = lGetPromotionValidProducts(product, true);
					if (productValid != undefined)
					{
						conditionXml.appendChild(productValid);
					}
				}
			}
			lSetPriceAndName(conditionXml, currentLang, false);
			conditionsXml.appendChild(conditionXml);
		}

		for each (var offer in promoNode.Composition.Offers.Offer)
		{
			var offerXml = new XML("<Offer />");
			offerXml.@canRefuseOffer = offer.@canRefuseOffer;
			
			for each (var product in offer.Product)
			{
				// SDO-6483 - Kiosk Local Promotion - Inactive products are displayed on Local Promotion
				// EQA-517 - [Kiosk v5][French Local Promotions][FR][LAB05] Doubled Sandwich - 'Product Is Not Priced' message appearing
				// SQC-5409 - Kiosk v4 - Script Error when starting transactions on Kiosk
				if (csoProductInfo[product.@code.toString()] != undefined &&
					csoProductInfo[product.@code.toString()].xmlNode.@salable == "true")
				{
					var productValid = lGetPromotionValidProducts(product, true);
					if (productValid != undefined)
					{
						offerXml.appendChild(productValid);
					}
				}
			}
			lSetPriceAndName(offerXml, currentLang, false);
			offersXml.appendChild(offerXml);
		}

		if (sessionSale.get("IS_NGK") == "true")
		{
			lSetMultiChoice(conditionsXml);
			lSetMultiChoice(offersXml);
		
			lSetAlcoholicDisclaimer(conditionsXml);
			lSetAlcoholicDisclaimer(offersXml);
		}
		
		compositionXml.appendChild(conditionsXml);
		compositionXml.appendChild(offersXml);
		promotionXml.appendChild(compositionXml);
		xmlResult.appendChild(promotionXml);
		
		//API.dbg(xmlResult.toXMLString());
		
		return xmlResult.toXMLString();
		
		// SDO-6483 - Kiosk Local Promotion - Inactive products are displayed on Local Promotion
		// EQA-517 - [Kiosk v5][French Local Promotions][FR][LAB05] Doubled Sandwich - 'Product Is Not Priced' message appearing
		function lGetPromotionValidProducts(productNode, isMainProduct)
		{
			if (csoProductInfo[productNode.@code.toString()] == undefined ||
				!csoProductInfo[productNode.@code.toString()].isValid ||
				!bCheckProductDayPartCode(productNode.@code.toString()) ||
				!PosCheckIfPriceNodeIsValid(csoProductInfo[productNode.@code.toString()].xmlNode))
			{
				return undefined;
			}
			
			var productXml = new XML("<Product />");
			productXml.@code = productNode.@code;
			if (productNode.@size != undefined) productXml.@size = productNode.@size;
			if (productNode.@free != undefined) productXml.@free = productNode.@free;
			if (productNode.@groupCode != undefined) productXml.@groupCode = productNode.@groupCode;
			if (productNode.Sizes != undefined)
			{
				// SDO-6825 - Kiosk Local Promotion - Kiosk could not sold a promotion in a specific scenario (Choices configured as showDimensionToCustomer="false")
				if (isMainProduct)
				{
					var sizeXml = new XML("<Sizes />");
					var sizeSelection = csoProductInfo[productNode.@code.toString()].xmlNode.SizeSelection;
					
					var hasSizesToDisplay = false;

					for each (var size in productNode.Sizes.Size)
					{
						var showDimension = sizeSelection.Size.(@entry == size.@entry).@showDimensionToCustomer;
						
						if (showDimension == undefined || showDimension != "false")
						{
							// NPS-13168 - NP6.1.21 RC8HF6 - FR-LocalPromo-Kiosk freeze after apply update of a new RFM Package - ACSI1801868
							// NPS-11261 - DA - NP6.1.21 - FR-LocalPromo-Golden menu issue - ACSI1154404
							// EQA-571 - Promotion Loop not fulfilling drink and side choices when Local Promotion is upsold to a Best Of meal
							if (size.@code != undefined && 
								csoProductInfo[size.@code.toString()] != undefined &&
								((csoProductInfo[size.@code.toString()].xmlNode.Choices == undefined && 
								csoProductInfo[productNode.@code.toString()].xmlNode.Choices == undefined) ||
								csoProductInfo[size.@code.toString()].xmlNode.Choices.Component.length() == csoProductInfo[productNode.@code.toString()].xmlNode.Choices.Component.length()))
							{
								// CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057 
								var timeRestrictionInfo = GetTimeRestrictionProductAvailability(size.@code, 0);
								if (timeRestrictionInfo != undefined || timeRestrictionInfo != null) {
									size.@isTimeRestricted = true;
									size.@timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod;
								}
								sizeXml.appendChild(new XML(size.toXMLString()));
								hasSizesToDisplay = true;
							}
						}
					}

					if (hasSizesToDisplay)
					{
						productXml.appendChild(sizeXml);
					}
				}
				else
				{
					productXml.appendChild(new XML(productNode.Sizes.toXMLString()));
				}
			}
			
			// CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
			if (isNutritionalInfoAvailable(productNode.@code.toString())) productXml.@showNutrition = "true";
			
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			// test if the item contains allergens
			var allergensFound=[];
			// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
			allergensFound = lFindAllergens(allergensFound, productNode.@code.toString(), [], false, true, false, true);
			if (allergensFound.length>0) {
				productXml.@hasAllergens = "true";

				// now look for signaled allergens
				allergensFound=[];
				var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				allergensFound = lFindAllergens(allergensFound, productNode.@code.toString(), selectedAllergensList, false, true, false, false);
				if (allergensFound.length>0) {
					productXml.@hasSignaledAllergens = "true";
				}
			}
			
			// CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057 
			var timeRestrictionInfo = GetTimeRestrictionProductAvailability(productNode.@code, 0);
			if (timeRestrictionInfo != undefined || timeRestrictionInfo != null) {
				productXml.@isTimeRestricted = true;
				productXml.@timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod;
			}
			if (productNode.FreeProducts != undefined) productXml.appendChild(new XML(productNode.FreeProducts.toXMLString()));
	
			for each (var choice in productNode.Choice)
			{
				if (csoProductInfo[choice.@code.toString()] == undefined ||
					!csoProductInfo[choice.@code.toString()].isValid ||
					!bCheckProductDayPartCode(choice.@code.toString()) ||
					(choice.costInclusive == "false" && !PosCheckIfPriceNodeIsValid(csoProductInfo[choice.@code.toString()].xmlNode)))
				{
					return undefined;
				}
				
				var choiceXml = new XML("<Choice />");
				choiceXml.@code = choice.@code;
				if (choice.@group != undefined) choiceXml.@group = choice.@group;
				
				var i = 0;
				for each (var innerproduct in choice.Product)
				{
					var productValid = lGetPromotionValidProducts(innerproduct, false);
					if (productValid != undefined)
					{
						choiceXml.appendChild(productValid);
						i++;
					}
				}
				
				if (i != 0)
				{
					productXml.appendChild(choiceXml);
				}
				else
				{
					return undefined;
				}
			}
			
			var j = 0;
			for each (var complement in productNode.Complement)
			{
				var complementXml = new XML("<Complement />");
				
				var i = 0;
				for each (var innerproduct in complement.Product)
				{
					var productValid = lGetPromotionValidProducts(innerproduct, true);
					if (productValid != undefined)
					{
						complementXml.appendChild(productValid);
						i++;
					}
				}
				
				if (i != 0)
				{
					productXml.appendChild(complementXml);
					j++;
				}
			}
			
			if (productNode.Complement != undefined && j == 0)
			{
				return undefined;
			}
	
			return productXml;
		}
		
		function lSetPriceAndName(productList, currentLang, costIncluded){
			//SQC-3939 - KIOSK V4: Local Promotions - Kiosk is displaying a price "0,00" for the drinks on value meal loop after the new build generated (B.48)
			var currentProduct;
			var currentNodeType = productList.localName();
			var elementCostIncluded = false;

			if (productList.@code != null && productList.@code !== "") {
				currentProduct = csoProductInfo[productList.@code.toString()];
			}
			
			if (currentNodeType == "Choice" || currentNodeType == "Product" || currentNodeType == "Size"){
				lSetMissingAttributes(productList, currentLang, costIncluded);
			}
			
			for each(var element in productList.*){
			
				if (currentProduct != null && element.@code != null){
				
					//SQC-3976 - Kiosk Local Promotion - Incorrect behabior when choices are set as cost inclusive "false"
					switch(currentNodeType){
						case "Choice":
							elementCostIncluded = costIncluded || lIsCompositionComponentsCostIncluded(currentProduct, element.@code);	
							break;
						default:
							elementCostIncluded = costIncluded || lIsChoiceComponentsCostIncluded(currentProduct, element.@code);
							break;
					}
				}
		
				lSetPriceAndName(element, currentLang, elementCostIncluded)
			}
			
			//SQC-3939 - KIOSK V4: Local Promotions - Kiosk is displaying a price "0,00" for the drinks on value meal loop after the new build generated (B.48)
			function lIsChoiceComponentsCostIncluded(product, componentCode){
				return product.xmlNode.Choices.Component.(ProductCode == componentCode).CostInclusive.toString() == "true";
			}
			
			//SQC-3939 - KIOSK V4: Local Promotions - Kiosk is displaying a price "0,00" for the drinks on value meal loop after the new build generated (B.48)
			function lIsCompositionComponentsCostIncluded(product, componentCode){
				return product.xmlNode.Composition.Component.(ProductCode == componentCode).CostInclusive.toString() == "true";
			}
			
			function lSetMissingAttributes(node, currentLang, costIncluded){
				if(node.@code != null && csoProductInfo[node.@code] != null){
					var nodeProduct = csoProductInfo[node.@code];
					if(nodeProduct != null){
						//SQC-3939 - KIOSK V4: Local Promotions - Kiosk is displaying a price "0,00" for the drinks on value meal loop after the new build generated (B.48)
						node.@price = PosCheckIfPriceNodeIsValid(nodeProduct.xmlNode) ? (costIncluded ? 0.0 : nodeProduct.unitPrice.getCurrent()) : "";//if price node is not valid, assign "" as value to hide the button
						node.@image = nodeProduct.csoImages.largeImage;
						if(node.@image == null || node.@image == ""){
							node.@image = nodeProduct.csoImages.smallImage;
						}
						var name = nodeProduct.names[currentLang].csoName;
						node.@name = (name == null) ? "" : name;
					}
				}
			}
		}
	}
}

/**
 * @brief - Adds the selected products of the current promotion to the order basket. If necessary, creates an item group.
 * @return - True, if all products could be successfully added to the order basket
 * @author - Ferenc Balassa
 * @since - SDO-6069 CSO - Local French Promotion - Ability to allow the customer to access the promotion conditions and its offers
 */
function PosCSOFinishPromotionJS(choiceCodes, offerCodes, auxData){
	var productCodes = choiceCodes;
	var choiceCodesArray = (choiceCodes != null) ? choiceCodes.split("|") : new Array();
	var offerCodesArray = (offerCodes != null) ? offerCodes.split("|") : new Array();
	var promotionId = sessionSale.get("SELECTED_LOCAL_PROMO_ID");
	var auxDataArray = auxData.split("|");
	// SQC-3994 - CSO - Local French Promotion - Promotion title does not show up in the order basket for promotions with only one item
	//var isItemGroupSelling = auxDataArray.shift();
	var isUpselling = (auxDataArray.shift() == "true");
	var freeCodes = auxDataArray;
	var groupCount = csoItemGroupManager.orderViewItemGroups.length;

	if(offerCodesArray.length > 0){
		csoItemGroupManager.showPriceProductCodes = offerCodesArray;
			productCodes += ("|" + offerCodes);
	}

	// SQC-3994 - CSO - Local French Promotion - Promotion title does not show up in the order basket for promotions with only one item
	//csoItemGroupManager.isItemGroupSelling = (isItemGroupSelling == "true");
	csoItemGroupManager.isItemGroupSelling = true;

	//SDO-6165 CSO - Local French Promotion - FR2. Ability to validate promotion properties - Justify Promo - Drop 2
	if (csoLocalPromotions[promotionId].xmlNode.Configuration.(@type == "Properties").Section.(@name == "Properties").Parameter.(@name == "JustifyPromotion") != undefined) {
		if(csoLocalPromotions[promotionId].xmlNode.Configuration.(@type == "Properties").Section.(@name == "Properties").Parameter.(@name == "JustifyPromotion").@value == "TRUE"){
			var justifyPromoProductCode = lGetParameterStr("justifyPromoProductCode", "");
			var justifyPromoProduct = csoProductInfo[justifyPromoProductCode];
			if(justifyPromoProduct != null && justifyPromoProduct.xmlNode.@productClass == "NON_FOOD_PRODUCT"){
				choiceCodesArray.push(justifyPromoProductCode);
				productCodes += ("|" + justifyPromoProductCode);
				csoItemGroupManager.isItemGroupSelling = true;// we must set it to item group, so that the justify promo product is removed when the corresponding local promo is removed
			}
		}
	}

	if(csoItemGroupManager.isItemGroupSelling){
		csoItemGroupManager.itemGroupToCustomize = null;
		csoItemGroupManager.hidePriceProductCodes = choiceCodesArray;
		var compositionName = csoLocalPromotions[promotionId].xmlNode.Composition.@name;
		if(compositionName != null && compositionName != ""){
			csoItemGroupManager.title = compositionName;
		} else {
			var currentLang = sessionSale.get("LANGUAGE");
			var languageSectionXml = csoLocalPromotions[promotionId].xmlNode.Configuration.(@type == "Languages").Section.(@name == currentLang);
			if (languageSectionXml != undefined && languageSectionXml.Parameter.(@name == "Title") != undefined) {
				csoItemGroupManager.title = languageSectionXml.Parameter.(@name == "Title").@value;
			}
		}
		
		if(isUpselling){
			csoItemGroupManager.title = PosCSOI18nGetMessageJS("CSO_LOCALPROMO_UPSELLING_TITLE_PREFIX") + " " + csoItemGroupManager.title;
		}
	}
	var prevTotalAmount = csoItemGroupManager.prevTotalAmount;

	if (sessionSale.get("IS_NGK") == "true")
	{
		//Call a Show screen before the DoSale, so the GUI may start the screen transition while NewPos executes this operation
		//Added to improve performance
		PosNGKShowMainScreen();
	}
	
	var doSaleSuccess = PosCSODoSaleJS(productCodes);
	
	//to trigger update of csoItemGroupManager data
	getKioskView(hlp.getCurrentView());
	
	//if there was a new itemgroup added, set free items and the itemgroup price
	if(groupCount < csoItemGroupManager.orderViewItemGroups.length){
		if(doSaleSuccess  && freeCodes != null && freeCodes.length > 0){
			var currentGroup = csoItemGroupManager.orderViewItemGroups[csoItemGroupManager.orderViewItemGroups.length - 1];
			var freeCode = freeCodes.shift();
			for each(member in currentGroup.members){
				if(member.code == freeCode){
					KioskViewHelper.PosDoSelIndex(member.index);
					PosDoPromoItem(1);
					member.free = true;
					freeCode = freeCodes.shift();
				}
			}
		}
		var xmlView = new XML(hlp.getCurrentView());
		
		if (sessionSale.get("IS_NGK") == "true")
		{
			//Fixing issue with floating point precision
			csoItemGroupManager.orderViewItemGroups[csoItemGroupManager.orderViewItemGroups.length - 1].groupPrice =  ((new BigDecimal(xmlView.@totalAmount.toString())).subtract(new BigDecimal(prevTotalAmount))).toString();
		}
		else
		{
			csoItemGroupManager.orderViewItemGroups[csoItemGroupManager.orderViewItemGroups.length - 1].groupPrice =  parseFloat(xmlView.@totalAmount.toString()) - prevTotalAmount;
		}
		
		//CSO-13 - CSO v4 - Local Promotions - Quantity Limitations - 6813436
		csoItemGroupManager.orderViewItemGroups[csoItemGroupManager.orderViewItemGroups.length - 1].localPromotionId = promotionId;
	}
	// SQC-3994 - CSO - Local French Promotion - Promotion title does not show up in the order basket for promotions with only one item
	//else if ((choiceCodesArray.length + offerCodesArray.length) == 1){
	//	//if there was just one item in the promotion, add it to csoSingleItemPromotions to disable the + sign and set it to free, if necessary
	//	var singleProduct = (choiceCodesArray.length == 1) ? choiceCodesArray[0] : offerCodesArray[0];
	//	if(csoSingleItemPromotions.indexOf(singleProduct) == -1){
	//		csoSingleItemPromotions.push(singleProduct);
	//	}
	//	if(freeCodes.length == 1){
	//		PosDoPromoItem(1);
	//	}
	//}

	return doSaleSuccess;
}

function PosFinishItemGroupCustomizationJS(){
	csoItemGroupManager.itemGroupToCustomize = null;
	//SDO-7084 - [Lab02][July Bundle][NewPOS 6.1.19 RC18 HF5] Kiosk v4 RC 10 HF1 - Grill screen logic: Removing ice from the second drink selection actually removes it from the first 
	csoGrillOrder = null;
	return true;
}

/**
 * @brief - Adds the isMultiChoice attribute for the necessary products inside a xml. Used to set the attribute in the local promotion messages
 * @return - true
 * @author - Vladimir Dobroff
 * @since - NGK 5.1 - FR4. Auto declining for choices with a single selection
 */
function lSetMultiChoice(xmlNode)
{
	var abstractChoiceXmlNodes = xmlNode..Choice;
	
	for each (var abstractChoice in abstractChoiceXmlNodes)
	{	
		if(abstractChoice.parent().@code != null && csoProductInfo[abstractChoice.parent().@code] != null)
		{
			var parentProductDbXmlNode = csoProductInfo[abstractChoice.parent().@code].xmlNode;
		
			if ((parentProductDbXmlNode.CustomParameters.Parameter.(@name == "ApplyMultiChoice") != undefined) &&
				(parentProductDbXmlNode.CustomParameters.Parameter.(@name == "ApplyMultiChoice").@value.toString() == "true"))
			{
				for each (var concreteChoice in abstractChoice.Product)
				{
					if(concreteChoice.@code != null && csoProductInfo[concreteChoice.@code] != null)
					{
						var concreteChoiceDbXmlNode = csoProductInfo[concreteChoice.@code].xmlNode;
						
						if ((concreteChoiceDbXmlNode.CustomParameters.Parameter.(@name == "AllowMultiChoice") != undefined) &&
							(concreteChoiceDbXmlNode.CustomParameters.Parameter.(@name == "AllowMultiChoice").@value.toString() == "true"))
						{
							concreteChoice.@isMultiChoice = "true";
						}
					}
				}
			}
		}	
	}
	
	return true;
}

/**
 * @brief - Adds the legal disclaimer attribute for the necessary products inside an xml. Used to set the attribute in the local promotion messages
 * @return - true
 * @author - Vladimir Dobroff
 * @since - NGK 5.1 - EQA-569 - Legal disclaimer for alcoholic beverages not appearing when ordered as part of Local Promotion
 */
function lSetAlcoholicDisclaimer(xmlNode)
{
	var productXmlNodes = xmlNode..Product;
	
	for each (var productXml in productXmlNodes)
	{
		if (productXml.@code != null && productXml.@code != undefined)
		{
			if (csoProductInfo[productXml.@code] != null && csoProductInfo[productXml.@code] != undefined)
			{
				var productDbXmlNode = csoProductInfo[productXml.@code].xmlNode;
				
				if (productDbXmlNode.CustomParameters.Parameter.(@name == "CSORequireLegalDisclaimer") != undefined &&
					productDbXmlNode.CustomParameters.Parameter.(@name == "CSORequireLegalDisclaimer").@value.toString() == "true")
				{
					// CSO-142 - Legal-Disclaimer by language - CR updated - 7423781
					productXml.@legalDisclaimerImage = PosNGKGetAlcoholicBeverageDisclaimerImage();
					productXml.@legalDisclaimerText = PosNGKGetAlcoholicBeverageDisclaimerText();
				}
			}
		}
	}
	
	return true;
}

/**
 * @brief - The OrderViewItemGroup contains data to produce a correct Group node in the kiosk order view.
 * @author - Ferenc Balassa
 * @since - SDO-6069 CSO - Local French Promotion - Ability to allow the customer to access the promotion conditions and its offers
 */
function OrderViewItemGroup(id, name, groupPrice, localPromotionId){
	this.groupId = id;
	this.members = new Array();
	this.canIncrease = false;
	this.name = name;
	// CSO-26 - CSO v4 - Local Promotions Button - Script Error
	this.localPromotionId = ((localPromotionId != undefined) ? localPromotionId : "-1");
	this.groupPrice = groupPrice;
	this.hideGroupTitle = false;
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		this.isSelected = false;
	
		var hlp = new BusinessObjectHelper();
		this.cartImage = hlp.findParamInSectionWide("CSOPromoButtonBackground", "ImageDB_" + sessionSale.get("LANGUAGE"));
	}
}

OrderViewItemGroup.prototype.clone = function(id){
	var clone = new OrderViewItemGroup(id, this.name, this.groupPrice, this.localPromotionId);
	clone.canIncrease = this.canIncrease;
	clone.hideGroupTitle = this.hideGroupTitle;
	clone.members = new Array();
	for each(m in this.members){
		clone.members.push({ code:m.code, key:m.key, index:m.index, showPrice:m.showPrice, free:m.free });
	}
	return clone;
}

OrderViewItemGroup.prototype.equals = function(other){
	if(this.canIncrease == other.canIncrease
	&& this.name == other.name
	&& this.localPromotionId == other.localPromotionId
	&& this.groupPrice == other.groupPrice
	&& this.hideGroupTitle == other.hideGroupTitle
	&& this.members.length == other.members.length){
		var equals = true;
		var i;
		for (i = 0; i < this.members.length; i++){
			if(this.members[i].code != other.members[i].code
			|| this.members[i].key != other.members[i].key
			|| this.members[i].index != other.members[i].index
			|| this.members[i].showPrice != other.members[i].showPrice
			|| this.members[i].free != other.members[i].free){
				equals = false; 
				break;
			}
		}
		return equals;
	}
	return false;
}

OrderViewItemGroup.prototype.getXml = function(){
	groupXml = new XML('<Group/>');
	groupXml.@groupId = this.groupId.toString();
	groupXml.@name = this.name;
	if (this.localPromotionId) groupXml.@localPromotionId = this.localPromotionId;
	var members = new Array();
	var showPrice = new Array();
	var freeProduct = new Array();
	//CSO-12 - CSO v4 - Implementation - Local Promotions - Order Basket Prices - 6829999
	var showAllPrices = (lGetParameterStr("localPromoShowPrices", "false") == "true");
	for each(m in this.members) {
		members.push(m.index);
		
		if (sessionSale.get("IS_NGK") == "true")
		{
			if(m.showPrice) showPrice.push(m.index);
		}
		else
		{
			//CSO-12 - CSO v4 - Implementation - Local Promotions - Order Basket Prices - 6829999
			if (showAllPrices) {
				showPrice.push(m.index);
			}
		}
		
		if (m.free) freeProduct.push(m.index);
	};
	
	groupXml.@memberIndexes = members.toString().replace(/,/g, "|");
	groupXml.@showPriceIndexes = showPrice.toString().replace(/,/g, "|");
	groupXml.@freeProductIndexes = freeProduct.toString().replace(/,/g, "|");
	groupXml.@canIncrease = this.canIncrease;
	groupXml.@groupPrice = this.groupPrice;
	groupXml.@hideGroupTitle = this.hideGroupTitle;
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		groupXml.@cartImage = this.cartImage;
		groupXml.@currentSelected = this.isSelected;
	}
	
	return groupXml;
}

OrderViewItemGroup.prototype.log = function(){
	API.dbg("order view groupId:"+this.groupId);
	for each(var m in this.members){ API.dbg("code:" + m.code + ", index:" + m.index + ", key:" + m.key + " showPrice:" + m.showPrice);}
}

/**
 * @brief - ItemGroupManager implements CRUD of order item groups of the current order.
 * @author - Ferenc Balassa
 * @since - SDO-6069 CSO - Local French Promotion - Ability to allow the customer to access the promotion conditions and its offers
 */
function ItemGroupManager(){
	this.id = 0;
	this.orderViewItemGroups = new Array();
	// SDO-11748 - [NGK 5.12] - he option "Yes" in the cancel order message does not work sometimes
	this.prevXmlOutExtract = { items:new Array(), productStatistics: {} };
	this.isItemGroupSelling = false;
	this.itemGroupToCustomize = null;
	if (sessionSale.get("IS_NGK") == "true")
	{
		//Fixing issue with floating point precision
		this.prevTotalAmount = "0";
	}
	else
	{
		this.prevTotalAmount = 0;
	}
	this.selectedItemExtract = null;
	this.isOrderGroupCloning = false;
	this.isItemCloning = false;
	
	//CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
	//Added here to reuse the resetSelectedGroup mechanism
	this.selectedGlobalPromoId = null;
	this.selectedGlobalPromoCounter = null;
}

ItemGroupManager.prototype.reset = function(){
	this.id = 0;
	this.orderViewItemGroups.splice(0, this.orderViewItemGroups.length);
	this.prevXmlOutExtract.items.splice(0, this.prevXmlOutExtract.items.length);
	// SDO-11748 - [NGK 5.12] - he option "Yes" in the cancel order message does not work sometimes
	this.prevXmlOutExtract.productStatistics = {};
	this.isItemGroupSelling = false;
	this.itemGroupToCustomize = null;
	if (sessionSale.get("IS_NGK") == "true")
	{
		//Fixing issue with floating point precision
		this.prevTotalAmount = "0";
	}
	else
	{
		this.prevTotalAmount = 0;
	}
	this.selectedItemExtract = null;
	this.isOrderGroupCloning = false;
	this.isItemCloning = false;
}

ItemGroupManager.prototype.createOrderViewItemGroup = function(){
	var group = new OrderViewItemGroup(this.id++, "", 0);
	this.orderViewItemGroups.push(group);
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		csoItemGroupManager.setSelectedGroup(group.groupId);
	}
	
	return group;
}

ItemGroupManager.prototype.duplicateOrderViewItemGroup = function(itemGroup){
	for(i = 0; i < csoItemGroupManager.orderViewItemGroups.length; i++){
		if(csoItemGroupManager.orderViewItemGroups[i] == itemGroup){
			var clonedGroup = itemGroup.clone(this.id++);
			csoItemGroupManager.orderViewItemGroups.splice(i, 0, clonedGroup);
			
			if (sessionSale.get("IS_NGK") == "true")
			{
				csoItemGroupManager.setSelectedGroup(clonedGroup.groupId);
			}
				
			break;
		}
	}
}

ItemGroupManager.prototype.getOrderViewItemGroup = function(groupId){
	for each(group in this.orderViewItemGroups){
		if(group.groupId == groupId) return group;
	}
	return null;
}

ItemGroupManager.prototype.hasClone = function(itemGroup){
	for each(group in this.orderViewItemGroups){
		if(group.groupId != itemGroup.groupId && group.equals(itemGroup)){
			return true;
		}
	}
	return false;
}

//Added for NGK
ItemGroupManager.prototype.getFirstClone = function(itemGroup){
	for each(group in this.orderViewItemGroups){
		if(group.groupId != itemGroup.groupId && group.equals(itemGroup)){
			return group;
		}
	}
	return null;
}

ItemGroupManager.prototype.destroyOrderViewItemGroup = function(itemGroup){
	var index = -1;
	var i;
	for(i = 0; i < this.orderViewItemGroups.length; i++){
		if(this.orderViewItemGroups[i].groupId == itemGroup.groupId){
			index = i;
			break;
		}
	}
	if(index > -1){
		this.orderViewItemGroups.splice(index, 1);
	}
}

ItemGroupManager.prototype.removeOrderViewItemGroupFromOrder = function(itemGroup) {
	// SDO-7443 - Kiosk V4 RC13 - Kiosk displays an error message if user order two promotions then delete one
	//The original code from the Kiosk V4 scripts has been modified in order to fix an issue when removing promotions from the order basket.
	//It seems that sometimes the PosDoQuantum operation could retain it's quantity value from a previous call.
	//Because of that, sometimes the PosDoPromoItem operation could be applied in the wrong quantity of products,
	//resulting in a MSG_BC_INVPROMO error message that would freeze the Kiosk.
	for each (var m in itemGroup.members) {
		KioskViewHelper.PosDoSelIndex(m.index);
	
		var kioskView = new XML(getKioskView(hlp.getCurrentView()));
		var qtyPromo = Number(kioskView.Order.Item.(@currentSelected == "true" && @voided == "false").@qtyPromo);
	
		//First, undo the promotion operation in the free products
		if (qtyPromo > 0){
			PosDoQuantum(-1);
			PosDoQuantum(0);
			PosDoPromoItem(1);
		}
	
		//Remove one unit of the current selected product
		PosDoVoidLine("1");
	
		//Apply again the promotion operation for the products that should continue as free
		if (m.free)
		{
			if ((qtyPromo - 1) > 0)
			{
				//The selected item is lost after void line
				KioskViewHelper.PosDoSelIndex(m.index);
				PosDoQuantum(-1);
				PosDoQuantum(qtyPromo - 1);
				PosDoPromoItem(1);
			}
		}
		else
		{
			if (qtyPromo > 0)
			{
				//The selected item is lost after void line
				KioskViewHelper.PosDoSelIndex(m.index);
				PosDoQuantum(-1);
				PosDoQuantum(qtyPromo);
				PosDoPromoItem(1);
			}
		}
	
		getKioskView(hlp.getCurrentView()); //to trigger update of item groups, since PosDoVoidLine may change indexes
	}
	
	HandleBarcodeInUse(itemGroup);
}

ItemGroupManager.prototype.updateOrderViewItemGroups = function(xmlOut){
	var xmlOutExtract = lGetExtract(xmlOut, this);
	
	if(this.orderViewItemGroups.length > 0 || this.isItemGroupSelling){
		lLogExtract(xmlOutExtract);
		var comparison = lCompareExtracts(this, xmlOutExtract);
		lLogComparison(comparison);
		if(this.isItemGroupSelling){
			lAddNewItemGroup(comparison, xmlOutExtract, this);
			this.isItemGroupSelling = false;
		}
		lUpdateItemGroups(comparison, this);
	}
	
	this.prevXmlOutExtract = xmlOutExtract;
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		//Fixing issue with floating point precision
		//SQC-3981 Promotion does not display the correct price when it is grilled
		var totalAmount = xmlOut.Order.@totalAmount.toString();
		if(this.itemGroupToCustomize != null){
			var totalDiff = (new BigDecimal(totalAmount)).subtract(new BigDecimal(this.prevTotalAmount));
			this.itemGroupToCustomize.groupPrice = ((new BigDecimal(this.itemGroupToCustomize.groupPrice)).add(totalDiff)).toString();
		}

		this.prevTotalAmount = totalAmount;
	}
	else
	{
		//SQC-3981 Promotion does not display the correct price when it is grilled
		var totalAmount = parseFloat(xmlOut.Order.@totalAmount.toString());
		if(this.itemGroupToCustomize != null){
			this.itemGroupToCustomize.groupPrice += (totalAmount - this.prevTotalAmount);
		}

		this.prevTotalAmount = totalAmount;
	}

	function lGetExtract(xmlOut, self){
		var items = new Array();
		var itemsWithDuplicateKey = new Array();
		// SDO-11748 - [NGK 5.12] - he option "Yes" in the cancel order message does not work sometimes
		if(xmlOut.Order != null && xmlOut.Order.Item != null){
			for each(item in xmlOut.Order.Item){
				if(item.@voided == "false"){
					var newItem = { code:item.Product[0].@code, qty:Number(item.Product[0].@qty), key:lGetItemKey(item), index:Number(item.@index) };
					var found = false;
					for each(i in items){
						if(i.key == newItem.key){
							if(itemsWithDuplicateKey[i.key] == null) { itemsWithDuplicateKey[i.key] = i; }
							found = true;
							break;
						}
					}
					items.push(newItem);
					if(item.@currentSelected == "true"){
						self.selectedItemExtract = newItem;
					}
				}
			}
		}
		//The index is not used during key generation because it keeps changing and we want the permanent and essential part of an item in the key.
		//However, when two items become indentical at a certain step of customization, we must keep the key unique.
		for each(d in itemsWithDuplicateKey){
			d.key += (d.index + ",");
		}
		return { items:items, productStatistics:lCreateStatistics(items) };

		function lGetItemKey(xmlNode, seed){
			if(seed == null) seed = "";
			if(xmlNode.Product != null){
				for each(p in xmlNode.Product){
					seed += (/*p.@qty + "," +*/ p.@code + "," + p.@name + "," );
					if(p.Grill != null){
						for each(g in p.Grill){
							seed += (g.@qty + "," + g.@name + ",");
						}
					}
					seed = lGetItemKey(p, seed);
				}
			}
			return seed;
		}
	}
	
	function lCreateStatistics(items){
		// SDO-11748 - [NGK 5.12] - he option "Yes" in the cancel order message does not work sometimes
		var productStatistics = {};
		for each(item in items){
			if(productStatistics[item.code] == null){
				productStatistics[item.code] = { items:new Array(), itemCount:1, totalQty:item.qty };
			} else {
				productStatistics[item.code].itemCount++;
				productStatistics[item.code].totalQty += item.qty;
			}
			productStatistics[item.code].items.push(item);
		}
		return productStatistics;
	}
	
	function lCompareExtracts(self, newExtract){
		var oldExtract = self.prevXmlOutExtract;
		var foundOldItems = new Array();//items with same key and qty
		var foundOldItemsWithQtyIncrease = new Array();//items with same key and higher qty
		var splitItems = new Array();
		var mergedItems = new Array();
		var newItems = new Array();
		var deletedItems = new Array();
		
		//examine each product code that existed in the previous extract
		var newStatistics = lCreateStatistics(newExtract.items);
		var oldStatistics = lCreateStatistics(oldExtract.items);
		for each(oldStat in oldStatistics){
			var code = oldStat.items[0].code;
			newStat = newStatistics[code];
			if(newStat == null){
				//no corresponding product code in new extract -> item is deleted
				lAddItemsToList(oldStat.items, deletedItems);
			} else {
				suspectedMergeItems = new Array();
					lResolveIdenticalItems(oldStat, newStat);

				if(oldStat.itemCount <= newStat.itemCount){
					//new or split
					if(oldStat.items == null || oldStat.items.length == 0){
						lAddItemsToList(newStat.items, newItems);
					} else {
						if(self.isItemGroupSelling){
							lCollectNewItems(oldStat, newStat);
						} else {
							if(oldStat.itemCount == newStat.itemCount){
								var i;
								for(i = 0; i < oldStat.itemCount; i++){
									var o = oldStat.items[i];
									var n = newStat.items[i];
									if(o.qty < n.qty){
										lAddItemToListAndCopyProperties(foundOldItemsWithQtyIncrease, o, n);
									} else {
										lAddItemToListAndCopyProperties(foundOldItems, o, n);
									}
								}
							} else {
								splitItems.push({ oldItems:oldStat.items, newItems:newStat.items });
							}
						}
					}
				} else {//if(oldStat.itemCount > newStat.itemCount)
					//deleted or merged
					if(newStat.items == null || newStat.items.length == 0){
						if(suspectedMergeItems.length == 1 && oldStat.items.length == 1
						   && oldStat.items[0].qty == (suspectedMergeItems[0].newQty - suspectedMergeItems[0].qty) ){
							var oldItems = new Array();
							oldItems.push(oldStat.items[0]);
							var smi = suspectedMergeItems[0];
							smi.index = smi.newIndex;
							oldItems.push(smi);
							var newItems = new Array();
							newItems.push(smi);
							
							mergedItems.push({ oldItems:oldItems, newItems:newItems });
						} else {
						lAddItemsToList(oldStat.items, deletedItems);
						}
					} else {
						mergedItems.push({ oldItems:oldStat.items, newItems:newStat.items });
					}
				}
			}
		}
		
		for each(newStat in newExtract.productStatistics){
			var code = newStat.items[0].code;
			oldStat = oldExtract.productStatistics[code];
			if(oldStat == null){
				//no corresponding product code in old extract -> item is brand new
				lAddItemsToList(newStat.items, newItems);
			}
		}
		
		return { foundOldItems:foundOldItems, foundOldItemsWithQtyIncrease:foundOldItemsWithQtyIncrease, deletedItems:deletedItems, newItems:newItems, splitItems:splitItems, mergedItems:mergedItems };
		
		function lCollectNewItems(oldStat, newStat){
			for each(newItem in newStat.items){
				if(lContainsKey(oldStat.items, newItem.key) == false){
					newItems.push(newItem);
				}
			}

			function lContainsKey(items, key){
				for each(item in items){
					if(item.key == key) return true;
				}
				return false;
			}
		}
		
		//items with same key AND quantity are added to found items and removed from statistics
		function lResolveIdenticalItems(oldStat, newStat){
			var i;
			for(i = oldStat.items.length - 1; i >= 0; i--){	
				var o = oldStat.items[i];
				var j;
				for(j = newStat.items.length - 1; j >= 0; j--){
					n = newStat.items[j];
					if(o.key == n.key){//SQC-3966 Kiosk Local Promotion - Incorrect items on order basket
						if(o.qty == n.qty){
							lAddItemToListAndCopyProperties(foundOldItems, o, n);
						lRemoveItemFromStat(oldStat, i);
						lRemoveItemFromStat(newStat, j);
						} else if (o.qty < n.qty){
							lAddItemToListAndCopyProperties(foundOldItemsWithQtyIncrease, o, n);
							suspectedMergeItems.push(o);
							lRemoveItemFromStat(oldStat, i);
							lRemoveItemFromStat(newStat, j);
						}
						break;
					}
				}
			}
		}
		
		function lAddItemToListAndCopyProperties(items, oldItem, newItem){
			oldItem.newIndex = newItem.index;
			oldItem.newKey = newItem.key;
			oldItem.newQty = newItem.qty;
			items.push(oldItem);
		}
		
		function lRemoveItemFromStat(stat, itemIndex){
			var item = stat.items[itemIndex];
			stat.itemCount--;
			stat.totalQty -= item.qty;
			stat.items.splice(itemIndex, 1);
		}
		
		function lAddItemsToList(items, list){
			for each(item in items){
				list.push(item);
			}
		}
	}
	
	function lAddNewItemGroup(comp, xmlOutExtract, self){
		var oviGroup = new OrderViewItemGroup(self.id++, self.title, self.groupPrice, self.localPromotionId);
		var hidePriceProductCodes = lGetCodes(self.hidePriceProductCodes, xmlOutExtract);
		var showPriceProductCodes = lGetCodes(self.showPriceProductCodes, xmlOutExtract);
		
		for each(code in hidePriceProductCodes){
			lAddMember(oviGroup, code, false);
		}

		for each(code in showPriceProductCodes){
			lAddMember(oviGroup, code, true);
		}

		if(oviGroup.members.length > 0){
			self.orderViewItemGroups.push(oviGroup);
			if (sessionSale.get("IS_NGK") == "true")
			{
				self.setSelectedGroup(oviGroup.groupId);
			}
		}
		
		function lAddMember(oviGroup, code, showPrice){
			for each(i in comp.newItems){
				if(i.code == code && (i.newAddedQty == null || i.newAddedQty < i.qty)){
					if(i.newAddedQty == null){
						i.newAddedQty = 1;
					} else {
						i.newAddedQty++;
					}
					oviGroup.members.push({ code:i.code, key:i.key, index:i.index, showPrice:showPrice, free:false });
					return;
				}
			}
			for each(i in comp.foundOldItemsWithQtyIncrease){
				if(i.code == code && (i.newAddedQty == null || i.newAddedQty < (i.newQty - i.qty))){
					if(i.newAddedQty == null){
						i.newAddedQty = 1;
					} else {
						i.newAddedQty++;
					}
					oviGroup.members.push({ code:i.code, key:i.newKey, index:i.newIndex, showPrice:showPrice, free:false });
					return;
				}
			}
		}
		
		function lGetCodes(codes, xmlOutExtract){
			var filteredArray = new Array();
			for each(code in codes){
				for each(i in xmlOutExtract.items){
					if(code == i.code){
						filteredArray.push(code);
						break;
					}
				}
			}
			return filteredArray;
		}
	}
	
	function lUpdateItemGroups(comp, self){
		//Update group members' key and index where 1 to 1 relation was already found
		for each(g in csoItemGroupManager.orderViewItemGroups){
			for each(m in g.members){
				var updated = false;
				for each(oldItem in comp.foundOldItems){
					if(oldItem.key == m.key){
						m.key = oldItem.newKey;
						m.index = oldItem.newIndex;
							updated = true;
							break;
					}
				}
				if(!updated){
					for each(oldItem in comp.foundOldItemsWithQtyIncrease){
						if(oldItem.key == m.key){
							m.key = oldItem.newKey;
							m.index = oldItem.newIndex;
							break;
						}
					}
				}
			}
		}
		
		//update reference to split items
		if(comp.splitItems.length > 0){
			for each(splitItem in comp.splitItems){
				var oldKey = splitItem.oldItems[0].key;
				if(self.itemGroupToCustomize != null){
					var group = self.itemGroupToCustomize;
					API.dbg("itemGroupToCustomize.groupId:"+group.groupId);
					var itemGroupMembersOfKey = lFilterForKey(group.members, oldKey);
					var i;
					var max = (itemGroupMembersOfKey.length < splitItem.newItems.length) ? itemGroupMembersOfKey.length : splitItem.newItems.length;
					API.dbg("itemGroupMembersOfKey.length:"+itemGroupMembersOfKey.length+", splitItem.newItems.length:"+splitItem.newItems.length+", splitItem.oldItems[0].qty:"+splitItem.oldItems[0].qty);
					//update members of the group that is being customized
					for(i = 0; i < max; i++){
						itemGroupMembersOfKey[i].key = splitItem.newItems[i].key;
						itemGroupMembersOfKey[i].index = splitItem.newItems[i].index;
					}
					//update members of all other groups
					if(splitItem.oldItems[0].qty > itemGroupMembersOfKey.length){
						for each(g in csoItemGroupManager.orderViewItemGroups){
							if(g.groupId != group.groupId){
								API.dbg("g.groupId:"+g.groupId);
								lUpdateItem(g.members, oldKey, (splitItem.newItems[1] == null) ? splitItem.newItems[0]:splitItem.newItems[1] );
							}
						}
					}
				} else {
					for each(g in csoItemGroupManager.orderViewItemGroups){
						//API.dbg("g.groupId:"+g.groupId);
						lUpdateItem(g.members, oldKey, (splitItem.newItems[1] == null) ? splitItem.newItems[0]:splitItem.newItems[1] );
					}
				}
			}
		}
		
		//update reference to merged items
		for each(mergedItem in comp.mergedItems){
			for each(g in csoItemGroupManager.orderViewItemGroups){
				for each(oldItem in mergedItem.oldItems){
					lUpdateItem(g.members, oldItem.key, mergedItem.newItems[0]);
				}
			}
		}
		
		csoItemGroupManager.log();
		
		function lFilterForKey(arr, key){
			var filteredArray = new Array();
			for each(m in arr) {
				if(m.key == key){
					filteredArray.push(m);
				}
			}
			return filteredArray;
		}
		
		function lUpdateItem(members, key, item){
			if(item != null){
				//API.dbg("lUpdateItem: key="+key);
				for each(m in members){
					//API.dbg("lUpdateItem m code:"+m.code+", qty:"+m.qty+", index:"+m.index+", key:"+m.key);
					if(m.key == key){
						//API.dbg("lUpdateItem: m.index="+m.index+", item.index:"+item.index+", m.key:"+m.key+", item.key:"+item.key );
						m.key = item.key;
						m.index = item.index;
					}
				}
			}
		}
	}
	
	function lLogStatistics(productStatistics){
		for each(p in productStatistics){
			API.dbg("code:"+p.items[0].code+", itemCount:"+p.itemCount+", totalQty:"+p.totalQty);
			for each(i in p.items){
				API.dbg("["+i.index+"] code:"+i.code+", qty:"+i.qty+", key:"+i.key);
			}
		}
	}
	
	function lLogExtract(e){
		API.dbg("--- Extract - index view ---");
		for each(i in e.items){
			API.dbg("["+i.index+"] code:"+i.code+", qty:"+i.qty+", key:"+i.key);
		}
		API.dbg("--- Extract - product statistics view ---");
		lLogStatistics(e.productStatistics);
	}
	
	function lLogComparison(comp){
		API.dbg("-------- lLogComparison ---------");
		API.dbg("comp.foundOldItems");
		for each(item in comp.foundOldItems){
			API.dbg("code:"+item.code+", qty:"+item.qty+", newQty:"+item.newQty+", newIndex:"+item.newIndex+", newKey:"+item.newKey);
		}
		API.dbg("comp.foundOldItemsWithQtyIncrease");
		for each(item in comp.foundOldItemsWithQtyIncrease){
			API.dbg("code:"+item.code+", qty:"+item.qty+", newQty:"+item.newQty+", newIndex:"+item.newIndex+", newKey:"+item.newKey);
		}
		API.dbg("comp.newItems");
		lLog(comp.newItems);
		API.dbg("comp.deletedItems");
		lLog(comp.deletedItems);
		API.dbg("comp.splitItems.oldItems");
		for each (i in comp.splitItems) lLog(i.oldItems);
		API.dbg("comp.splitItems.newItems");
		for each (i in comp.splitItems) lLog(i.newItems);
		API.dbg("comp.mergedItems.oldItems");
		for each (i in comp.mergedItems) lLog(i.oldItems);
		API.dbg("comp.mergedItems.newItems");
		for each (i in comp.mergedItems) lLog(i.newItems);
		API.dbg("-------- --------- ---------");
		function lLog(items){
			for each(item in items){
				API.dbg("code:"+item.code+", qty:"+item.qty+", index:"+item.index+", key:"+item.key);
			}
		}
	}
}

ItemGroupManager.prototype.getSelectedItemExtract = function(){
	var hlp = new BusinessObjectHelper();
	getKioskView(hlp.getCurrentView());//to update selectedItemExtract
	return this.selectedItemExtract;
}

ItemGroupManager.prototype.addGroupsToOrderView = function(xmlOut){
	for each(group in this.orderViewItemGroups){
		xmlOut.Order.appendChild(group.getXml());
	}
	if(this.orderViewItemGroups.length > 0){
		API.dbg(xmlOut.toXMLString());
	}
}

ItemGroupManager.prototype.log = function(){
	for each(var g in this.orderViewItemGroups){ g.log(); }
}

//Added for NGK
ItemGroupManager.prototype.resetSelectedGroup = function(){
	for each(group in this.orderViewItemGroups){
		group.isSelected = false;
	}
	
	//CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
	//Added here to reuse the resetSelectedGroup mechanism
	this.selectedGlobalPromoId = null;
	this.selectedGlobalPromoCounter = null;
	
	return true;
}

//Added for NGK
ItemGroupManager.prototype.setSelectedGroup = function(groupId){
	this.resetSelectedGroup();
	for each(group in this.orderViewItemGroups){
		if(group.groupId == groupId)
		{
			group.isSelected = true;
		}
	}
	return true;
}

function lGetItemGroupManager(){
	return csoItemGroupManager;
}

/**
 * @brief - Shows the Local Promotions barcode reader
 * @param - mode - If the barcode should be only validated or if it's going to be redeemed
 * @param - source - 'coupon' - coupon or anything else - local promotion // CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
 * @param - screenCarrousel
 * @param - screenMenu
 * @param - screenAds
 * @param - digitsLimit - size number of digits limitation of the barcode
 * @author - Vivian Cury
 * @since - SDO-6162 - CSO - Local French Promotion - FR1. Ability to display local promotions - I have a coupon - Drop 2
 * @modified - CSO-277 - Barcode manual entry panel limited to 10 digits
 * @modified - CSO-547 POS-276 - NGK - Support GMA Long Term Check-in - 8289930
 */
function PosCSODoShowLocalPromotionBarcodeReaderJS(mode, source, screenCarrousel, screenMenu, screenAds, digitsLimit) {
	var params = new Array();
	
	var displayKeyPadAlNum = false;

	// CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
	// replace mode if promotion source is coupon
	if((source == "COUPON")||(source == "coupon")||(source == "Coupon")) {
		mode="COUPON";
	}
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	// replace mode if  source is MOBILE check-in
	if((source == "MOBILE")||(source == "mobile")||(source == "Mobile")) {
		mode="MOBILE";
		params.push("Carrousel|"+screenCarrousel);
		params.push("Menu|"+screenMenu);
		params.push("Ads|"+screenAds);
		
		if (sessionSale.get("GMA_CONFLICTING_BARCODE") == "true")
		{
			displayKeyPadAlNum = true;
			sessionSale.set("GMA_CONFLICTING_BARCODE",false);
		}
		else{
			displayKeyPadAlNum = false;
		}

		var isEnabledlongTermMobileCheckin = lGetCSOUserInterfaceStringParameter("foundationalMobileCheckin.enable", "false");
		
		//SQC-8843 The "Enter" button on the mobile check-in not working properly
		// In case of not configured the minimum then use the default quantity defined on NP DS
		var minDigitsLimit = 0;
		if (isEnabledlongTermMobileCheckin.toLowerCase() == "true"){
			var xmlStoreDB = new XML(API.getStoredb());
			
			minDigitsLimit = Number(lGetSectionWideStringParameter("foundationalCheckInSearchMinChar", "OperationMode",4));
			
			// Set the default quantity in case of overflowed
			if (!minDigitsLimit || minDigitsLimit <4 || minDigitsLimit >10){
				minDigitsLimit = 4; // Default Value
			}
			
			digitsLimit = Number(lGetSectionWideStringParameter("foundationalCheckInSearchMaxChar", "OperationMode",10));
			
			if (!digitsLimit || minDigitsLimit > digitsLimit)
				digitsLimit = 10; // Default Value
		}		
	}
	
	params.push("DisplayKeyPadAlNum|"+ displayKeyPadAlNum);
	params.push("Mode|" + mode);
	params.push("DigitsLimit|" + digitsLimit);
	params.push("MinDigitsLimit|" + minDigitsLimit);
	var xml = lCreateKioskEvent("ASYNC", "DLG_SHOW_PROMOTION_BARCODE", params);
	PosSendUICmd(xml);
}

/**
 * @brief - Validates the mode returned by the barcode reader
 * @param - mode - If the barcode should be only validated or if it's going to be redeemed
 * @return - false for redeem, true for validate or for anything else
 * @author - Vivian Cury
 * @since - SDO-6162 - CSO - Local French Promotion - FR1. Ability to display local promotions - I have a coupon - Drop 2
 */
function PosCSOValidateBarcodeModeJS(mode) {
	if (mode == "REDEEM") {
		return false;
	}
	else if (mode == "VALIDATE") {
		return true;
	}
	
	return true;
}

/**
 * @brief - Test the mode parameter
 * @param - mode - if parameter if COUPON we must retrieve the promotion from the product-db.
 * @return - true for HAVE COUPON, false for anything else
 * @author - MY
 * @since - CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
 */
function PosCSOTestHaveCouponModeJS(mode) {
	if (mode == "COUPON") {
		return true;
	}
	else {
		return false;
	}
}

/**
 * @brief - Test the mode parameter
 * @param - mode - if parameter if MOBILE kiosk must read the barcode.
 * @return - true for MOBILE check-in, false for anything else
 * @author - MY
 * @since - CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
 */
function PosCSOTestMobileCheckinModeJS(mode) {
	if (mode == "MOBILE") {
		return true;
	}
	else {
		return false;
	}
}

/**
 * @brief - Redeems the Local Promotions barcode
 * @param - barcodeScan - the barcode number scanned
 * @return - true if it's valide, false otherwise
 * @author - Vivian Cury
 * @since - SDO-6162 - CSO - Local French Promotion - FR1. Ability to display local promotions - I have a coupon - Drop 2
 */
function PosCSORedeemLocalPromotionBarcodeJS(barcodeScan) {
	var numMaxPromo = Number(lGetParameterStr("localPromoMaxNumber", "1"));
	var numPromoSale = getQuantityOfPromotionInTheBasket();

	if (numPromoSale >= numMaxPromo) {
		PosShowMessage("CSO_LOCALPROMO_MAX_NUMBER_REACHED");
		return false;
	}
	
	// Barcodes generated by Kiosk have exactly 10 numbers
	if (barcodeScan.length != 10) {
		var promoBarcode;
		
		// First lets search for the barcode in localpromotions-db.xml file
		for each (var promo in csoLocalPromotions) {
			var barcode = promo.xmlNode.Configuration.(@type == "Properties").Section.(@name == "Properties").Parameter.(@name == "Barcode");

			if (barcode != undefined) {
				if (barcode.@value == barcodeScan) {
					promoBarcode = promo;
					break;
				}
			}
		}
		
		if (promoBarcode != undefined) {
			// We found the promotion, now we need to validate it
			var promoNode = promoBarcode.xmlNode;
			var currentLang = sessionSale.get("LANGUAGE");
			var languageSectionXml = promoNode.Configuration.(@type == "Languages").Section.(@name == currentLang);
			
			if (!promoBarcode.display ||
				languageSectionXml == undefined ||
				languageSectionXml.Parameter.(@name == "Title") == undefined) {
				PosShowMessage("CSO_LOCALPROMO_NOT_AVAILABLE");
				return false;
			}
			
			var promotionValid = sValidatePromotionComposition(promoNode.Composition);

			if (promotionValid == "false" || promotionValid == "outage") {
				PosShowMessage("CSO_LOCALPROMO_NOT_AVAILABLE");
				return false;
			}
			
			var orderProperties = getOrder();
			var validator = localPromotionValidator();
			var validationResult = validator.validate(promoBarcode, orderProperties);
			var promotionProperties = promoNode.Configuration.(@type == "Properties").Section.(@name == "Properties");
			
			if (!validationResult.saleTypeValidation.isValid) {
				PosShowMessage(validationResult.saleTypeValidation.errorMessage);
				return false;
			}
			
			if (!validationResult.dateValidation.isValid) {
				PosShowMessage(validationResult.dateValidation.errorMessage);
				return false;
			}
			
			if (!validationResult.timeValidation.isValid) {
				PosShowMessage(validationResult.timeValidation.errorMessage);
				return false;
			}
			
			if (!validationResult.weekDayValidation.isValid) {
				PosShowMessage(validationResult.weekDayValidation.errorMessage);
				return false;
			}
			
			if (!validationResult.minimumAmountValidation.isValid) {
				PosShowMessage(validationResult.minimumAmountValidation.errorMessage);
				return false;
			}
			
			if (!validationResult.purchaseRequirementValidation.isValid) {
				PosShowMessage(validationResult.purchaseRequirementValidation.errorMessage);
				return false;
			}

			// SQC-4093 - Kiosk Local Promotion Drop 2 - Barcode scan has differents behaviors when it is scanned by "local promotion" and "I have a coupom" buttons
			if (!PosCSOShowPromotionConfirmationMessageJS(promoNode.@id)) {
				return false;
			}
			
			// If we got here is because the validation is ok, so we call the Promotion Loop
			sessionSale.set("SELECTED_LOCAL_PROMO_ID", promoNode.@id);
			PosCSOStartPromotionJS();
			return true;
		}
	} else {
		// This is a barcode generated promotion, we need to lock the file and get its content
		//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
		var xmlEvent = new XML('<Event type="ASYNC" name="DAT_LOCALPROMO_GET_BARCODE_INFO" />');
		var barcodeXml = new XML("<Parameter />");
		barcodeXml.@name = "Barcode";
		barcodeXml.@value = barcodeScan;
		
		var timeoutXml = new XML("<Parameter />");
		timeoutXml.@name = "Timeout";
		timeoutXml.@value = lGetCSOUserInterfaceStringParameter("barcodeFileLockTimeoutInSeconds", "180");
		
		xmlEvent.appendChild(barcodeXml);
		xmlEvent.appendChild(timeoutXml);
		
		PosSendUICmd(xmlEvent.toXMLString());
		return false;
	}
	
	PosShowMessage("CSO_LOCALPROMO_NOT_FOUND");
	
	return false;
}

/**
 * @brief - Validates if the barcode can be used
 * @param - barcodeInfo - the barcode content
 * @return - true if it's valide, false otherwise
 * @author - Vivian Cury
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOValidateBarcodeInfoJS(barcodeInfo)
{
	if (barcodeInfo == "Locked") {
		PosShowMessage("CSO_LOCALPROMO_BARCODE_LOCKED");
		return false;
	}
	else if (barcodeInfo == "Used") {
		PosShowMessage("CSO_LOCALPROMO_BARCODE_USED");
		return false;
	}
	else if (barcodeInfo == "New") {
		PosShowMessage("CSO_LOCALPROMO_NOT_FOUND");
		return false;
	}
	
	var barcodeXML = new XML(barcodeInfo);
	var currentOrder = getOrder();
	var validator = barcodeLocalPromotionRedeemValidator();
	var validationResult = validator.validate(barcodeXML, currentOrder);
	
	if (!validationResult.dateValidation.isValid) {
		PosShowMessage(validationResult.dateValidation.errorMessage);
		return false;
	}
	
	if (!validationResult.utilizationAmountValidation.isValid) {
		PosShowMessage(validationResult.utilizationAmountValidation.errorMessage);
		return false;
	}
	
	return true;
}

/**
 * @brief - Add the barcode items to the order basket
 * @param - barcodeInfo - the barcode content
 * @return - true if succeded, false otherwise
 * @author - Vivian Cury
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOFinishBarcodePromotionJS(barcodeInfo)
{
	var barcodeXML = new XML(barcodeInfo);
	var productCodes = getBarcodePromotionProductCodes(barcodeXML.Products);
	
	var choiceCodes = productCodes.shift();
	var freeCodes = productCodes;
	
	var choiceCodesArray = (choiceCodes != null) ? choiceCodes.split("|") : new Array();
	
	// SQC-4113 - Kiosk Local Promotion Drop 2 - It's possible redeem a product when it is in the outage
	for each (var productCode in choiceCodesArray) {
		if (csoProductInfo[productCode] == undefined ||
			!csoProductInfo[productCode].isValid ||
			!bCheckProductDayPartCode(productCode) ||
			!PosCheckIfPriceNodeIsValid(csoProductInfo[productCode].xmlNode) ||
			isProductOutage(productCode)) {
			PosShowMessage("CSO_LOCALPROMO_INVALID_PRODUCT");
			return false;
		}
		
		if (csoProductInfo[productCode].xmlNode.@productClass == "VALUE_MEAL") {
			for each (var component in csoProductInfo[productCode].xmlNode.Composition.Component) {
				if (csoProductInfo[component.ProductCode] == undefined ||
					!csoProductInfo[component.ProductCode].isValid ||
					!bCheckProductDayPartCode(component.ProductCode) ||
					!PosCheckIfPriceNodeIsValid(csoProductInfo[component.ProductCode].xmlNode) ||
					isProductOutage(component.ProductCode)) {
					PosShowMessage("CSO_LOCALPROMO_INVALID_PRODUCT");
					return false;
				}
			}
		}
		// CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057 
		var timeRestrictionInfo = GetTimeRestrictionProductAvailability(productCode, 0);
		if (timeRestrictionInfo != undefined || timeRestrictionInfo != null) {
			// SQC-6338 - NGK 5.9 - When a product is out of it's allowed time, it's still possible to add it to the cart via I Have a Coupon
			PosCSOSendSyncMessageJS("SYNC_LOCALPROMO_REDEEM_TIMERESTRICTION_DLG",
									new Array(PosCSOI18nGetMessageJS("MSG_OK")),
									new Array("true","false"),
									timeRestrictionInfo.timeRestrictionsPeriod.toString());
			
			return false;
		}
	}
	
	var groupCount = csoItemGroupManager.orderViewItemGroups.length;

	csoItemGroupManager.isItemGroupSelling = true;

	if (csoItemGroupManager.isItemGroupSelling) {
		csoItemGroupManager.itemGroupToCustomize = null;
		csoItemGroupManager.hidePriceProductCodes = choiceCodesArray;
		csoItemGroupManager.title = barcodeXML.@name;
	}
	
	var prevTotalAmount = csoItemGroupManager.prevTotalAmount;
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		//Call a Show screen before the DoSale, so the GUI may start the screen transition while NewPos executes this operation
		//Added to improve performance
		PosNGKShowMainScreen();
	}
	
	var doSaleSuccess = PosCSODoSaleJS(choiceCodes);
	
	//to trigger update of csoItemGroupManager data
	getKioskView(hlp.getCurrentView());
	
	//if there was a new itemgroup added, set free items and the itemgroup price
	if (groupCount < csoItemGroupManager.orderViewItemGroups.length) {
		if (doSaleSuccess  && freeCodes != null && freeCodes != "" && freeCodes.length > 0) {
			API.dbg("Product(s) " + freeCodes + " will be promoted");
			var currentGroup = csoItemGroupManager.orderViewItemGroups[csoItemGroupManager.orderViewItemGroups.length - 1];
			var freeCode = freeCodes.shift();
			for each (member in currentGroup.members) {
				if (member.code == freeCode) {
					KioskViewHelper.PosDoSelIndex(member.index);
					PosDoPromoItem(1);
					member.free = true;
					freeCode = freeCodes.shift();
				}
			}
		} else if (doSaleSuccess) {
			var xmlView = new XML(hlp.getCurrentView());
			var saleType = hlp.getSaleType();
			
			var cartPrice = new BigDecimal(xmlView.@totalAmount.toString()).subtract(new BigDecimal(prevTotalAmount));
			var barcodePrice = cartPrice;
			
			if (barcodeXML.Products.Product.@priceEatin != undefined || barcodeXML.Products.Product.@priceTakeout != undefined) {
				if (saleType == 0) {
					barcodePrice = new BigDecimal(barcodeXML.Products.Product.@priceEatin);
				} else {
					barcodePrice = new BigDecimal(barcodeXML.Products.Product.@priceTakeout);
				}
			}
			
			if (barcodePrice.compareTo(cartPrice) < 0)
			{
				var storeDiscount = false;
				var currentGroup = csoItemGroupManager.orderViewItemGroups[csoItemGroupManager.orderViewItemGroups.length - 1];
				
				API.dbg("Product " + barcodeXML.Products.Product.@code + " will have a discount of " + API.formatNumber((cartPrice - barcodePrice), "##0.00").replace(/^\s+/,''));
				// EQA-956 - [November Release][6.1.21RC13HF1][SL 2.80.02a][Local Promotions][Lab 05][FR] Basket total price incorrect after subtracting a Local Promotion coupon
				var result = PosDoDiscount_CSL("0", "1", "1", API.formatNumber((cartPrice.subtract(barcodePrice)), "##0.00").replace(/^\s+/,''), (barcodeXML.@name + "|" + currentGroup.groupId));
				
				if (!result) {
					var messageBC = getLastFail("cPosAddDiscountAmount");
					if (messageBC != null) {
						API.dbg("Error applying discount: " + messageBC);
					}
					
					// Function PosDoDiscount_CSL returns false when a discount is given, but the sale is not closed
					// If getLastSuccess returns a value, then the discount was performed and we need to store it
					var amountSuccess = getLastSuccess("cPosAddDiscountAmount");
					if (amountSuccess != null) {
						storeDiscount = true;
					}
				}
				else {
					storeDiscount = true;
				}
				
				// EQA-955 - [November Release][6.1.21RC13HF1][SL 2.80.02a][Local Promotions][Lab 05][FR] Local Promotion coupon products being charged at regular price
				if (storeDiscount) {
					// if the discount was successful store it for later use
					if (csoLocalPromoBarcodesDiscounts[barcodeXML.@name] == undefined)
					{
						csoLocalPromoBarcodesDiscounts[barcodeXML.@name] = new Array();
					}
					
					csoLocalPromoBarcodesDiscounts[barcodeXML.@name].push({
						id: "0",
						type: "1",
						mode: "1",
						amount: API.formatNumber((cartPrice.subtract(barcodePrice)), "##0.00").replace(/^\s+/,''),
						description: (barcodeXML.@name + "|" + currentGroup.groupId),
						barcodePrice: barcodePrice
					});
				}
				
				PosRefreshSalePanel();
			}
		}
		
		var xmlView = new XML(hlp.getCurrentView());
		
		if (sessionSale.get("IS_NGK") == "true")
		{
			//Fixing issue with floating point precision
			csoItemGroupManager.orderViewItemGroups[csoItemGroupManager.orderViewItemGroups.length - 1].groupPrice =  ((new BigDecimal(xmlView.@totalAmount.toString())).subtract(new BigDecimal(prevTotalAmount))).toString();
		}
		else
		{
			csoItemGroupManager.orderViewItemGroups[csoItemGroupManager.orderViewItemGroups.length - 1].groupPrice =  new BigDecimal(xmlView.@totalAmount.toString()) - new BigDecimal(prevTotalAmount);
		}
	}
	
	if (doSaleSuccess) {
		if (csoLocalPromoBarcodesInUse[barcodeXML.@name] == undefined) {
			csoLocalPromoBarcodesInUse[barcodeXML.@name] = new Array();
		}
		
		csoLocalPromoBarcodesInUse[barcodeXML.@name].push(barcodeXML);
	}

	return doSaleSuccess;
}

/**
 * @brief - Get all the product codes from a structure with products and choices
 * @param - productsXML - products structure
 * @return - Array - First element is a string with the product codes separated by pipes, second 
 *		element is a string with all free products separated by pipes
 * @author - Vivian Cury
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function getBarcodePromotionProductCodes(productsXML)
{
	var codes = "";
	var freeCodes = "";
	var saleType = hlp.getSaleType();
	
	for each (var product in productsXML.Product) {
		if (codes != "") codes += "|";
		codes += product.@code;
		
		if (product.@priceEatin != undefined || product.@priceTakeout != undefined) {
			var price;
			if (saleType == 0) {
				price = new BigDecimal(product.@priceEatin);
			} else {
				price = new BigDecimal(product.@priceTakeout);
			}
			
			if (price == 0.0) {
				if (freeCodes != "") freeCodes += "|";
				freeCodes += product.@code;
			}
		}
		
		for each (var choice in product.Choice) {
			var codesArray = getBarcodePromotionProductCodes(choice);
			
			if (codes != "") codes += "|";
			codes += codesArray.shift();
			
			if (codesArray != undefined && codesArray != "") {
				if (freeCodes != "") freeCodes += "|";
				freeCodes += codesArray;
			}
		}
	}
	
	return new Array(codes, freeCodes);
}

/**
 * @brief - Release the barcode when it wasn't possible to redeem it
 * @param - barcodeInfo - the barcode content
 * @author - Vivian Cury
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOReleaseBarcodeJS(barcodeInfo) {
	if (barcodeInfo != "Locked" &&
		barcodeInfo != "Used" &&
		barcodeInfo != "New") {
		var barcodeXML = new XML(barcodeInfo);
		var result = PosCSOChangeBarcodeFileStatusJS(barcodeXML.@barcode, "AVAILABLE");
		
		if (!result) {
			API.dbg("The barcode [" + barcodeXML.@barcode + "] could not be released");
		}
	}
}

/**
 * @brief - Changes a barcode status
 * @param - barcode - the barcode number
 * @param - status - the new status
 * @author - Vivian Cury
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOChangeBarcodeFileStatusJS(barcode, status) {
	var result = PosCSOSendSyncMessageJS("DAT_LOCALPROMO_CHANGE_BARCODE_STATUS", new Array(status + "@" + barcode + "@" +
											lGetCSOUserInterfaceStringParameter("barcodeFileLockTimeoutInSeconds", "180")),
											new Array("true", "false"), "");
	return (result === "true");
}

/**
 * @brief - Changes all stored barcodes status
 * @param - status - the new status
 * @author - Vivian Cury
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOChangeStoredBarcodeStatusJS(status, reset) {
	var barcodeFail = new Array();
	
	for each (var barcodeArray in csoLocalPromoBarcodesInUse) {
		for each (var barcode in barcodeArray) {
			var result = PosCSOChangeBarcodeFileStatusJS(barcode.@barcode, status);
			
			if (!result) {
				if (status == "AVAILABLE") {
					API.dbg("The barcode [" + barcode.@barcode + "] could not be released");
				} else if (status == "LOCKED") {
					return result;
				} else if (status == "USED") {
					barcodeFail.push(barcode.@barcode);
				}
			}
		}
	}
	
	if (barcodeFail.length > 0)
	{
		var hlp = new BusinessObjectHelper();
		var posDataPath	= hlp.PosGetDataDir();
		var usedBarcodeFile  = posDataPath + "/usedbarcodes.xml";
		var usedBarcodeXml = new XML(hlp.PosReadFile(usedBarcodeFile));
		
		if (usedBarcodeXml.Used === undefined) {
			usedBarcodeXml = new XML('<Used />');
		}
		
		for each (var barcode in barcodeFail) {
			var barcodeXml = new XML("<Barcode />");
			barcodeXml.@value = barcode;
			
			usedBarcodeXml.appendChild(barcodeXml);
		}
		
		hlp.PosWriteFile(usedBarcodeFile, usedBarcodeXml.toXMLString());
	}
	
	if (reset == "true") {
		csoLocalPromoBarcodesInUse = [];
		csoLocalPromoBarcodesDiscounts = [];
	}
	
	return true;
}

/**
 * @brief - Remove the barcode from the order basket and release it
 * @param - itemGroup - the item group in the view
 * @author - Vivian Cury
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function HandleBarcodeInUse(itemGroup) {
	if (csoLocalPromoBarcodesInUse[itemGroup.name] != undefined) {
		var index = -1;
		
		for each (var barcode in csoLocalPromoBarcodesInUse[itemGroup.name]) {
			var promoProducts = (getBarcodePromotionProductCodes(barcode.Products).shift()).split("|");
			var foundPromo = true;
			
			for each (var member in itemGroup.members) {
				var codeIndex = promoProducts.indexOf(member.code.toString());
				if (codeIndex == -1) {
					foundPromo = false;
					break;
				}
				
				promoProducts.splice(codeIndex, 1);
			}
			
			if (foundPromo && promoProducts.length == 0) {
				index = csoLocalPromoBarcodesInUse[itemGroup.name].indexOf(barcode);
				var result = PosCSOChangeBarcodeFileStatusJS(barcode.@barcode, "AVAILABLE");
				if (!result) {
					API.dbg("The barcode [" + barcode.@barcode + "] could not be released");
				}
				break;
			}
		}
		
		if (index != -1) {
			csoLocalPromoBarcodesInUse[itemGroup.name].splice(index, 1);
		}
	}
}

/**
 * @brief - Remove the barcode from the order basket and release it when the order is sent to the FC
 * @author - Vivian Cury
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSORemoveLocalPromotionBarcodesJS() {
	if (csoLocalPromoBarcodesInUse != undefined && csoLocalPromoBarcodesInUse != [])
	{
		//Since NGK is calling the PosDoTotal only after this step in the workflow, it is not necessary for NGK
		if (sessionSale.get("IS_NGK") != "true")
		{
			PosDoBackFromTotal();
		}
			
		var groupIds = new Array();
		var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));

		for each (var group in kioskOrderView.Order.Group)
		{
			if (csoLocalPromoBarcodesInUse[group.@name] != undefined) {
				groupIds.push(group.@groupId);
			}
		}
		
		for each (var groupId in groupIds) {
			var itemGroup = csoItemGroupManager.getOrderViewItemGroup(groupId);
			
			if (itemGroup != null) {
				csoItemGroupManager.removeOrderViewItemGroupFromOrder(itemGroup);
				csoItemGroupManager.destroyOrderViewItemGroup(itemGroup);
			}
		}
		
		//Since NGK is calling the PosDoTotal only after this step in the workflow, it is not necessary for NGK
		if (sessionSale.get("IS_NGK") != "true")
		{
			PosDoTotal();
		}
	}
}

/**
 * @brief - Relocks the barcodes in use before tender
 * @author - Vivian Cury
 * @since - SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
 */
function PosCSOLockBarcodesBeforeTender() {
	var result = PosCSOChangeStoredBarcodeStatusJS("LOCKED", "false");
	
	if (!result) {
		PosShowMessage("CSO_LOCALPROMO_LOCK_ERROR");
	}
	
	return result;
}

/**
 * @brief - Check if the existing discounts were removed from the order
 * @author - Vivian Cury
 * @since - EQA-955 - [November Release][6.1.21RC13HF1][SL 2.80.02a][Local Promotions][Lab 05][FR] Local Promotion coupon products being charged at regular price 
 */
function PosCSOCheckLocalPromotionBarcodeDiscount() {
	if (csoLocalPromoBarcodesDiscounts != undefined && csoLocalPromoBarcodesDiscounts != [])
	{
		var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		var kioskOrder = kioskOrderView.Order;
		
		if (kioskOrder.Tender == undefined || kioskOrder.Tender.length() == 0)
		{
			lRedoLocalPromotionBarcodeDiscounts();
		}
	}
	
	return true;
}

/**
 * @brief - Reapply discounts to the order
 * @author - Vivian Cury
 * @since - EQA-955 - [November Release][6.1.21RC13HF1][SL 2.80.02a][Local Promotions][Lab 05][FR] Local Promotion coupon products being charged at regular price 
 */
function lRedoLocalPromotionBarcodeDiscounts() {
	for each (var discountArray in csoLocalPromoBarcodesDiscounts)
	{
		for each (var discount in discountArray)
		{
			API.dbg("Reapplying discount [" + discount.description + "] of value [" + discount.amount.toString() + "]");
			var result = PosDoDiscount_CSL(discount.id, discount.type, discount.mode, discount.amount, discount.description);
			
			if (!result) {
				var messageBC = getLastFail("cPosAddDiscountAmount");
				if (messageBC != null) {
					API.dbg("Error applying discount: " + messageBC);
				}
			}
		}
	}
	
	return true;
}

/**
 * @brief - Removes the discount from the order when the barcode item was removed
 * @author - Vivian Cury
 * @since - EQA-956 - [November Release][6.1.21RC13HF1][SL 2.80.02a][Local Promotions][Lab 05][FR] Basket total price incorrect after subtracting a Local Promotion coupon
 */
function lRemoveItemGroupDiscount(itemGroup) {
	var removeDiscount = false;
	
	if (csoLocalPromoBarcodesDiscounts != undefined && csoLocalPromoBarcodesDiscounts != [])
	{
		if (csoLocalPromoBarcodesDiscounts[itemGroup.name] != null)
		{
			var pushBackDiscounts = new Array();
			while (csoLocalPromoBarcodesDiscounts[itemGroup.name].length > 0)
			{
				var discount = csoLocalPromoBarcodesDiscounts[itemGroup.name].pop();
				if (discount.barcodePrice.compareTo(new BigDecimal(itemGroup.groupPrice)) == 0)
				{
					removeDiscount = true;
					break;
				}
				else
				{
					pushBackDiscounts.push(discount);
				}
			}
			
			for each (var discount in pushBackDiscounts)
			{
				csoLocalPromoBarcodesDiscounts[itemGroup.name].push(discount);
			}
			
			if (csoLocalPromoBarcodesDiscounts[itemGroup.name].length <= 0)
			{
				csoLocalPromoBarcodesDiscounts[itemGroup.name] = null;
			}
		}
	}
	
	if (removeDiscount)
	{
		// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
		if (typeof(PosClearDiscounts_CSL) == "function") {
			PosClearDiscounts_CSL();
		}
		// This is the only official way to remove discounts
		PosDoBackFromTotal();
		lRedoLocalPromotionBarcodeDiscounts();
	}
}

/**
 * @brief - Creates a file used to transmit large contents of synchronous events
 * @author - Paulo Florencio
 * @since - SQC-4063 - Kiosk Local Promotion Drop 2 - NewPOS Crash using attached localpromotions-db.xml
 */
function CreateEventFile(contents){
	if (contents.length > 0){
		var hlp = new BusinessObjectHelper();
		var posDataPath = hlp.PosGetDataDir();
		var eventFilePath  = posDataPath + "/eventFile.tmp";
		hlp.PosWriteFile(eventFilePath, contents);
	}
}

/**
 * @brief - Clean sale variables
 * @author - Vivian Cury
 * @since - SDO-6769 - CSO - Suggestive Selling - Screens that have no suggestive selling configured shows the suggestive selling screen
 */
function PosCSOCleanSale() {
	csoSelectedMainMenu = { screenNumber:0, buttonNumber:0 };
}

/**
 * @brief - Shows the table service screen for user selection.
 * @return - True
 * @author - Paulo Florencio
 * @since - CSO-1 - CSO v4 - 5435026 - Enhancements to Table Service Feature on Kiosk
 */
function PosCSOAskTableServiceJS(){
	
	var buttons = [];
	var buttonsValues = [];
	var screenTextAndColor = lGetCSOUserInterfaceStringParameter("tableService.title", "");
	var selectedZoneId;
	
	lBuildScreenInfo();
	
	if (buttonsValues.length > 0){
		selectedZoneId = PosCSOSendSyncMessageJS("SYNC_TABLE_SERVICE_DLG", buttons, buttonsValues, screenTextAndColor);
	
		if (selectedZoneId){
			ConfirmTableService(selectedZoneId);
			API.dbg("CSO - PosCSOAskTableServiceJS: Zone " + selectedZoneId.toString() + " selected");
		}
		else{
			API.dbg("CSO - PosCSOAskTableServiceJS: Table service refused");	
		}
	}
	
	return true;
	
	function lBuildScreenInfo(){
		API.dbg("CSO - PosCSOAskTableServiceJS: Generating data to build table service selection screen");	
		
		var floorPlanImageDefinition = lGetFormattedFloorPlanImageDefinition();
		var cancelButtonDefinition = lGetFormattedCancelButtonDefinition();
		
		if (floorPlanImageDefinition){
			buttons.push(floorPlanImageDefinition);
		}
		
		if (cancelButtonDefinition){
			buttons.push(cancelButtonDefinition);
		}
		
		for each (var zone in lGetZoneButtonsData()){
			buttons.push(zone.buttonData);
			buttonsValues.push(zone.number);
		}
		
		function lGetFloorPlanImageByPosNumber(posNumber){
			var floorPlanImage;
			var floorPlanKey;
			var floorPlanPrefix = lGetCSOUserInterfaceStringParameter("tableService.floorPlanPrefix", null);
			
			if (!floorPlanPrefix) return null;
			
			floorPlanKey = floorPlanPrefix.toString() + ("00" + posNumber.toString()).slice(-3);
			
			floorPlanImage = hlp.findParamInSectionWide(floorPlanKey, "ImageDB_" + sessionSale.get("LANGUAGE"));
			
			return floorPlanImage;
		}

		function lGetZoneButtonsData() {
			var MAX_NUMBER_OF_ZONES_ALLOWED = 8;
			var zones = [];
			var zoneButtonsDefinitions = lGetCSOUserInterfaceStringParameter("tableService.zoneDefinitions", null);
			var splittedZoneButtonsDefinitions;
			
			if (zoneButtonsDefinitions) {
				splittedZoneButtonsDefinitions = zoneButtonsDefinitions.split("|");
			
				if (splittedZoneButtonsDefinitions.length > 0) {
					for (var zoneNumber = 1; zoneNumber <= MAX_NUMBER_OF_ZONES_ALLOWED; zoneNumber++) {
						if (lIsZoneEnabled(zoneNumber) && splittedZoneButtonsDefinitions && typeof splittedZoneButtonsDefinitions[zoneNumber - 1] !== "undefined") {
							zones.push({
								number: zoneNumber,
								buttonData: lGetFormattedZoneButtonDefinition(zoneNumber, splittedZoneButtonsDefinitions[zoneNumber - 1])
							});
						}
					}
				}
			}
	
			return zones;
			
			function lGetFormattedZoneButtonDefinition(zoneNumber, zoneButtonDefinition){
				const ZONE_BUTTON_BORDER_COLOR = "GRAY";
				const ZONE_BUTTON_BACKGROUND_COLOR = "WHITE";
				const ZONE_BUTTON_TEXT_COLOR = "GRAY";
				const ZONE_BUTTON_TEXT = "CSO_MSG_TABLE_SERVICE_ZONE";
				
				var zoneButtonImage = lGetZoneButtonImage(zoneNumber);
				var hasImage = !!zoneButtonImage;
				var splittedZoneButtonDefinition = [];
				var formattedZoneButtonDefinition = [];
			
				if (zoneButtonDefinition) {
					splittedZoneButtonDefinition = zoneButtonDefinition.split(",");
				}
				
				formattedZoneButtonDefinition.push("zoneButton");
				formattedZoneButtonDefinition.push(hasImage.toString());
				formattedZoneButtonDefinition.push(splittedZoneButtonDefinition[0] || ZONE_BUTTON_TEXT);
				formattedZoneButtonDefinition.push(splittedZoneButtonDefinition[1] || ZONE_BUTTON_TEXT_COLOR);
				formattedZoneButtonDefinition.push(splittedZoneButtonDefinition[2] || ZONE_BUTTON_BACKGROUND_COLOR);
				formattedZoneButtonDefinition.push(splittedZoneButtonDefinition[2] || ZONE_BUTTON_BORDER_COLOR);
		
				if (hasImage){
					formattedZoneButtonDefinition.push(zoneButtonImage.toString());
				}
				
				return formattedZoneButtonDefinition.join("@");
				
				function lGetZoneButtonImage(zoneNumber){
					return hlp.findParamInSectionWide("tableService_zone_" + zoneNumber, "ImageDB_" + sessionSale.get("LANGUAGE"));
				}
			}
			
			function lIsZoneEnabled(zoneNumber){
				 return (lGetCSOUserInterfaceStringParameter("tableService.enable.zone" + zoneNumber, "true") === "true");
			}
		}
		
		function lGetFormattedFloorPlanImageDefinition(){
			return "floorPlanImage@" + lGetFloorPlanImageByPosNumber(GetPosNumber());
		}
		
		function lGetFormattedCancelButtonDefinition(){
			const CANCEL_BUTTON_BORDER_COLOR = "SILVER";
			const CANCEL_BUTTON_BACKGROUND_COLOR = "GRAY";
			const CANCEL_BUTTON_TEXT_COLOR = "WHITE";
			const CANCEL_BUTTON_TEXT = "CSO_MSG_TABLE_SERVICE_CANCEL_BUTTON";
			
			var cancelButtonDefinition =  lGetCSOUserInterfaceStringParameter("tableService.cancelButton", null);
			var splittedCancelButtonDefinition = [];
			var formattedCancelButtonDefinition = [];
			
			if (cancelButtonDefinition) {
				splittedCancelButtonDefinition = cancelButtonDefinition.split(",");
			}
			
			formattedCancelButtonDefinition.push("cancelButton");
			formattedCancelButtonDefinition.push(splittedCancelButtonDefinition[0] || CANCEL_BUTTON_TEXT);
			formattedCancelButtonDefinition.push(splittedCancelButtonDefinition[1] || CANCEL_BUTTON_TEXT_COLOR);
			formattedCancelButtonDefinition.push(splittedCancelButtonDefinition[2] || CANCEL_BUTTON_BACKGROUND_COLOR);
			formattedCancelButtonDefinition.push(splittedCancelButtonDefinition[3] || CANCEL_BUTTON_BORDER_COLOR);
			
			return formattedCancelButtonDefinition.join("@");
		}
	}
}

/**
 * @brief - Returns the current POS number without leading zeros
 * @return - POS number
 * @author - Paulo Florencio
 * @since - CSO-1 - CSO v4 - 5435026 - Enhancements to Table Service Feature on Kiosk
 */
function GetPosNumber(){
	var hlp    = new BusinessObjectHelper;
	var posDataPath  = hlp.PosGetDataDir();
	var posDbName  = hlp.PosGetPosDbName();
	var posDbFullName = (posDataPath + "/" + posDbName);
	var xmlBuffer   = hlp.PosReadFile(posDbFullName);

	if (xmlBuffer != null) {
		xmlBuffer = xmlBuffer.replace("<?xml","<!-- bug_336551");
		xmlBuffer = xmlBuffer.replace("?>","bug_336551 -->");
		var posDb = new XML(xmlBuffer);
		for each(service in posDb.Services.Service) {
			if ((service.@type == "POS") && (service.@startonload == "true")) {
				return Number(service.@name).toString();
			}
		}
	}
}

/**
 * @brief - Confirms a zone ID for table service
 * @param - zoneId - selected table service zone ID
  * @author - Paulo Florencio
 * @since - CSO-1 - CSO v4 - 5435026 - Enhancements to Table Service Feature on Kiosk
 */
function ConfirmTableService(zoneId){
	PosSetTableServiceArea(zoneId);
	sessionSale.set("CSO_isTableServiceActive", "true");
}

/**
 * @brief - Returns which table screen should be displayed. "True" for the screen with the floor plan; "false" for the screen without it.
 * @return - true or false
 * @author - Paulo Florencio
 * @since - CSO-1 - CSO v4 - 5435026 - Enhancements to Table Service Feature on Kiosk
 */
function PosDisplayTableServiceScreenWithFloorPlanJS(){
	return lGetCSOUserInterfaceStringParameter("tableService.displayScreenWithFloorPlan", "false") == "true";
}

function isPositiveInt(n)
{
	return parseInt(n) === Math.abs(n)
};


/**
 * @brief - Returns the grill view with the components' contents expanded.
 * @return - Grill view XML expanded
 * @author - Paulo Florencio
 * @since - SDO-7084 - [Lab02][July Bundle][NewPOS 6.1.19 RC18 HF5] Kiosk v4 RC 10 HF1 - Grill screen logic: Removing ice from the second drink selection actually removes it from the first 
 */
function GetExpandedGrillView() {
	// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
	var expandedGrillView = lGetGrillView();
	var currentGrillView;
	
	for (var i = 0; i < expandedGrillView.Component.length(); i++) {
		PosDoSelGrillIndex(expandedGrillView.Component[i].@index.toString());
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		currentGrillView = lGetGrillView();
		expandedGrillView.Component[i] = currentGrillView.Component[i];
	}
	
	return expandedGrillView;
}

//SDO-7129 - Kiosk V4RC12 - Incorrect gril behavior
var basketOrderManager = function() {
	var basketOrder = [];
	var previousKioskOrderView;
	var currentKioskOrderView;
	var itemPreviousIndex;
	
	var generateBasketOrder = function (kioskOrderView) {
		var order = [];
		
		for (var i = 0; i < kioskOrderView.length(); i++) {
			order.push(i);
		}
		
		return order;
	};
	
	var getItemNewIndex = function(previousIndex, notMappedIndexes) {
		for (var currentIndex = 0; currentIndex < currentKioskOrderView.length(); currentIndex++) {
			if (notMappedIndexes.indexOf(currentIndex) > -1 && formatForComparison(previousKioskOrderView[previousIndex]).toXMLString() == formatForComparison(currentKioskOrderView[currentIndex]).toXMLString()) {
				return currentIndex;
			}
		}
		return null;
	}
	
	var findSelectedIndexWhenItemCountDiminished = function() {
		var newBasketOrder = generateBasketOrder(currentKioskOrderView);
		var notMappedIndexes = newBasketOrder.slice(0);
		var itemNewIndex;
		
		for (var p = 0; p < previousKioskOrderView.length(); p++) {
			if (parseInt(p) !== parseInt(itemPreviousIndex)) {
				itemNewIndex = getItemNewIndex(p, notMappedIndexes);
				if (itemNewIndex != null) {
					newBasketOrder[itemNewIndex] = basketOrder[p];
					notMappedIndexes.splice(notMappedIndexes.indexOf(itemNewIndex), 1);
				}
			}
		}
		
		return notMappedIndexes[0];
	};
	
	var findSelectedIndexWhenItemCountIncreased = function() {
		var newBasketOrder = generateBasketOrder(currentKioskOrderView);
		var notMappedIndexes = newBasketOrder.slice(0);
		var itemNewIndex;
		
		for (var p = 0; p < previousKioskOrderView.length(); p++) {
			if (parseInt(p) !== parseInt(itemPreviousIndex)) {
				itemNewIndex = getItemNewIndex(p, notMappedIndexes);
				if (itemNewIndex != null) {
					newBasketOrder[itemNewIndex] = basketOrder[p];
					notMappedIndexes.splice(notMappedIndexes.indexOf(itemNewIndex), 1);
				}
			}
		}
		
		if (formatForComparison(previousKioskOrderView[itemPreviousIndex]).toXMLString() == increaseProductQuantity(formatForComparison(currentKioskOrderView[notMappedIndexes[0]])).toXMLString()) {
			return notMappedIndexes[1];
		}
		return notMappedIndexes[0];
	};
	
	var increaseProductQuantity = function(item) {
		for each (var product in item.descendants("Product")) {
			product.@qty = parseInt(product.@qty.toString()) + 1;
		}
		return item;
	};
	
	var findCurrentSelectedIndex = function() {
		var previousItemCount = previousKioskOrderView.length();
		var currentItemCount = currentKioskOrderView.length();
		
		if (previousItemCount < currentItemCount) {
			return findSelectedIndexWhenItemCountIncreased();
		}
		if (previousItemCount > currentItemCount) {
			return findSelectedIndexWhenItemCountDiminished();
		}
		return itemPreviousIndex;
	};
	
	var formatForComparison = function(item) {
		item.@currentSelected = "";
		item.@indexInternal = "";
		item.@index = "";
		item.Product[0].@totalPrice = "";
		item.Product[0].@totalTax = "";
		item.Product[0].@origQty = "";
		
		return item;
	};
	
	return {
		saveKioskOrderViewState: function(kioskOrderView) {
			previousKioskOrderView = kioskOrderView.Order[0].Item.copy();
			itemPreviousIndex = previousKioskOrderView.(@currentSelected == "true" && @voided == "false").@index.toString();
			
			basketOrder = generateBasketOrder(kioskOrderView);
		},
		getCorrectCurrentSelectedItemIndex: function(kioskOrderView) {
			currentKioskOrderView = kioskOrderView.Order[0].Item.copy();
			
			if (previousKioskOrderView.toXMLString() != currentKioskOrderView.toXMLString()) {
				return findCurrentSelectedIndex().toString();
			}
			return itemPreviousIndex;
		}
	};
};

//SDO-7084 - [Lab02][July Bundle][NewPOS 6.1.19 RC18 HF5] Kiosk v4 RC 10 HF1 - Grill screen logic: Removing ice from the second drink selection actually removes it from the first 
var grillOrderManager = function() {
	var grillOrder = [];
	var previousKioskGrillViewXml;
	var currentKioskGrillViewXml;
	var previousComponentIndex;

	var updateGrillOrder = function() {
		var notMappedIndexes = grillOrder.slice(0).sort();
		var newGrillOrder = grillOrder.slice(0);
		var previousComponent = grillOrder[previousComponentIndex];
		var componentNewIndex;
	
		for (var i = 0; i < previousKioskGrillViewXml.Component.length(); i++) {
			if (parseInt(i) !== parseInt(previousComponentIndex)) {
				componentNewIndex = getComponentNewIndex(i, notMappedIndexes);
				newGrillOrder[componentNewIndex] = grillOrder[i];
				notMappedIndexes.splice(notMappedIndexes.indexOf(componentNewIndex), 1);
			}
		}
		
		newGrillOrder[notMappedIndexes[0]] = previousComponent;
		grillOrder = newGrillOrder;
	};
	
	var formatForComparison = function(component) {
		component.@index = "";
		component.@name = "";
		return component;
	};
	
	var getComponentNewIndex = function(previousIndex, notMappedIndexes) {
		for (var currentIndex = 0; currentIndex < currentKioskGrillViewXml.Component.length(); currentIndex++) {
			if (notMappedIndexes.indexOf(currentIndex) > -1 && formatForComparison(previousKioskGrillViewXml.Component[previousIndex]).toXMLString() == formatForComparison(currentKioskGrillViewXml.Component[currentIndex]).toXMLString()) {
				return currentIndex;
			}
		}
	};
	
	return {
		initialize: function (kioskGrillViewXml) {
			grillOrder = [];
		
			for (var i = 0; i < kioskGrillViewXml.Component.length(); i++) {
				grillOrder.push(i);
			}
		},
		saveKioskGrillViewState: function(kioskGrillViewXml) {
			previousKioskGrillViewXml = kioskGrillViewXml.copy();
		},
		getCurrentIndex: function (correctIndex) {
			for (var i = 0; i < grillOrder.length; i++) {
				if (parseInt(grillOrder[i]) === parseInt(correctIndex)) {
					return i;
				}
			}
		},
		setComponentIndex: function(componentIndex) {
			previousComponentIndex = componentIndex;
		},
		update: function(kioskGrillViewXml){
			currentKioskGrillViewXml = kioskGrillViewXml.copy();
			
			if (previousKioskGrillViewXml.toXMLString() != currentKioskGrillViewXml.toXMLString()) {
				updateGrillOrder();
			}
		},
		getGrillOrderInfo: function () {
			return grillOrder.slice(0);
		},
		log: function (title) {
			if (title)
				API.dbg(title);
			API.dbg("current	correct");
			for (var i = 0; i < grillOrder.length; i++) {
				API.dbg(i.toString() + "		" + grillOrder[i].toString());
			}
		}
	}
};

/***************************************************** NGK Functions ***************************************************************************************/

/**
 * @brief Sends a WF name to the GUI which resends it to the NP6 app for execution (enqueue).
 *
 * @param WFName - The name of the workflow to be executed.
 * @return - true
 * @author - Kalil Garcia
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKEnqueueWFJS(WFName) {
	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_EXEC_WF" />');
	eventXml.appendChild(new XML('<WFName>'+WFName+'</WFName>'));
	return PosSendUICmd(eventXml.toString());
}

/**
 *
 * @brief - Creates a XML event informing the UI to change its screen number.
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Kalil
 * @since - NGK
 */
function PosNGKDoShowMenuJS(screenCarrousel, screenMenu, screenAds) {
	return PosNGKDoShowScreenJS(screenCarrousel + "|" + screenMenu + "|" + screenAds);
}

/**
 *
 * @brief - Creates a XML event informing the UI to change its screen number.
 * @param screenNumbers - screens to be displayed separated by "|"
 * @param screenProperties - Additional screen properties, as button visibility for example
 * @param goToPreviousScreen - When set to true will attempt to go to the previous menu screen
 * @param increaseImages - Since CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
 * @param buttonsDisplaySequence - Since CSO-1399 - POS-485 - KIOSK 5.x Nav Redesign - Product Wall Improvements and Standardization
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Vivian
 * @since - NGK
 */
function PosNGKDoShowScreenJS(screenNumbers, screenProperties, goToPreviousScreen, isMainScreen, increaseImages, buttonsDisplaySequence) {

	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775	
	if(("true"==sessionSale.get("NGK_MOA_ORDER") && (null==screenNumbers))) {
		// NGK_CURRENT_MENU is null until the first time a transition to the main screen occurs
		// For the mobile check-in case the screen numbers are stored in the session variables
		screenNumbers=sessionSale.get("NGK_SCREEN_CARROUSEL") + "|" + sessionSale.get("NGK_SCREEN_MENU") + "|" + sessionSale.get("NGK_SCREEN_ADS");
		
		//SQC-6262 - NGK v5.8 - Suggestive selling is not shown on the first MOA order
		// these session parameters come from the button 78 configuration. They MUST point to the main screen
		isMainScreen="true";
		// set the NGK_CARROUSEL_SCREEN or the kiosk will not perform the suggestive selling (local promotion)
		// because the csoSelectedMainMenu is not updated until a non MOA checkin order is performed after a kiosk restart
		sessionSale.set("NGK_CARROUSEL_SCREEN", sessionSale.get("NGK_SCREEN_CARROUSEL"));
		API.dbg("CSO - session context screenNumbers: " + screenNumbers);
	}

	var screens = screenNumbers.split("|");
	var splitedScreenNumbers;
	var returnButtons;
	
	// CSO-282 - CYT Redesign - 8024409
	var CYTLayoutModeFlag = false;
	
	if (isMainScreen == "true")
	{
		for each (screenNumber in screens)
		{
			if (ngkScreenInfo[screenNumber] && ngkScreenInfo[screenNumber].xmlNode.@type == "2852")
			{
				PosSetSessionProperty("NGK_MAIN_SCREEN", screenNumber);

				// CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
				if (increaseImages != null && increaseImages != undefined)
				{
					PosSetSessionProperty("NGK_MAIN_SCREEN_INCREASE_IMG", increaseImages);
				}
				else
				{
					PosSetSessionProperty("NGK_MAIN_SCREEN_INCREASE_IMG", "false");
				}
				
				//Added to fix an issue with local promotion suggestive selling
				var screenCarrousel = sessionSale.get("NGK_CARROUSEL_SCREEN");
				if (screenCarrousel && ngkScreenInfo[screenCarrousel])
				{
					var carrouselScreenXmlNode = ngkScreenInfo[screenCarrousel].xmlNode;
					var buttonParameters = carrouselScreenXmlNode.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number").(@value == screenNumber);
					
					if (buttonParameters != null)
					{
						for each (buttonParameter in buttonParameters)
						{
							csoSelectedMainMenu.screenNumber = screenCarrousel;
							csoSelectedMainMenu.buttonNumber = buttonParameter.parent().parent().@number.toString();
						}
					}
				}
				
				// CSO-282 - CYT Redesign - 8024409
				CYTLayoutModeFlag = CYTLayoutModeFlag | lCheckCYTMenuScreenLayoutMode(screenNumber);
			}
		}
	}
	
	//7958410 - Menu with no Active Products should not appear
	if (sessionSale.get("NGK_CARROUSEL_SCREEN") != null)
	{
			var hasCarrouselScreen;
			for each (screenNumber in screens)
			{
				if (screenNumber == sessionSale.get("NGK_CARROUSEL_SCREEN"))
				{
					hasCarrouselScreen = true;
					sessionSale.set("firstLoad", "true");
				}
				else
				{
					if (!hasCarrouselScreen)
					{						
						sessionSale.set("firstLoad", "false");
					}
				}
				
				if (hasCarrouselScreen)
				{
					ShouldSkipCarouselScreen(screenNumber);
				}
			}
			
		if (sessionSale.get("csoOutageReloaded") == "true" )
		{
			sessionSale.set("csoOutageReloaded", "false");
			if (!hasCarrouselScreen)
			{
				sessionSale.set("ReValidateCarouselScreen", "true");
				ShouldSkipCarouselScreen(screenNumber);
			}
			else
			{
				sessionSale.set("ReValidateCarouselScreen", "true");
			}
		}
		else if (hasCarrouselScreen)
		{
			sessionSale.set("ReValidateCarouselScreen", "false");
		}
		else
		{
			sessionSale.set("ReValidateCarouselScreen", "false");
		}
	}
	
	if (goToPreviousScreen == "true")
	{
		if (GLOBAL_NGK_SCREEN_STACK.length > 0)
		{
			// CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
			var lastScreen = GLOBAL_NGK_SCREEN_STACK.pop();
			screenNumbers = lastScreen.number;
			increaseImages = lastScreen.increase;
		}
		else
		{
			return true;
		}
	}	
	
	API.dbg("CSO - PosCSODoShowScreenJS: screenNumbers: " + screenNumbers);
	SetSessionProperty(screenNumbers);
	
	function SetSessionProperty(arrayScreenNumbers)
	{	
		splitedScreenNumbers = arrayScreenNumbers.split("|");
		
		for each(number in splitedScreenNumbers)
		{
			if (ngkScreenInfo[number] != null)
			{
				//Only apply the stack logic if it is a menu screen
				if (ngkScreenInfo[number].xmlNode.@type == "2852")
				{
					var ctx = new SessionContext;
				
					if (number == ctx.get("NGK_MAIN_SCREEN"))
					{
						//If it is the main menu reset the stack
						GLOBAL_NGK_SCREEN_STACK = new Array();
					}
					else
					{
						//Only push the menu into the stack if not going back
						if (goToPreviousScreen != "true")
						{
							var currentMenu = ctx.get("NGK_CURRENT_MENU");
							// CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
							var currentIncreaseImg = ctx.get("NGK_CURRENT_MENU_INCREASE_IMG");
						
							//Save the current menu in the stack
							if (currentMenu != null && currentMenu != number)
							{
								// CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
								GLOBAL_NGK_SCREEN_STACK.push({ number: currentMenu, increase: currentIncreaseImg });
							}
						}
					}
					
					PosSetSessionProperty("NGK_CURRENT_MENU", number);
					// CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
					if (increaseImages != null && increaseImages != undefined)
					{
						PosSetSessionProperty("NGK_CURRENT_MENU_INCREASE_IMG", increaseImages);
					}
					else
					{
						PosSetSessionProperty("NGK_CURRENT_MENU_INCREASE_IMG", "false");
					}

					// CSO-282 - CYT Redesign - 8024409
					CYTLayoutModeFlag = CYTLayoutModeFlag | lCheckCYTMenuScreenLayoutMode(screenNumber);
				}
			}
		}
		PosSetSessionProperty("NGK_CURRENT_SCREEN", arrayScreenNumbers);
	}	
	
	var xmlParameter = new XML("<Parameter />");
	var xmlEvent = new XML("<Event />");

	xmlParameter.@name = "Number";
	xmlParameter.@value = screenNumbers;
	
	xmlEvent.@type = "ASYNC";
	xmlEvent.@name = "DLG_SYS_SHOW_SCREEN";
	
	xmlEvent.appendChild(xmlParameter);
	
	// CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
	if (increaseImages != null && increaseImages != undefined) {
		var xmlIncreaseImg = new XML("<Parameter />");
		xmlIncreaseImg.@name = "IncreaseImages";
		xmlIncreaseImg.@value = increaseImages;
		
		xmlEvent.appendChild(xmlIncreaseImg);
	}

	// CSO-282 - CYT Redesign - 8024409
	if (CYTLayoutModeFlag)
	{
		var xmlLayoutMode = new XML("<Parameter />");
		xmlLayoutMode.@name = "CYTLayoutMode";
		xmlLayoutMode.@value = "1";
		xmlEvent.appendChild(xmlLayoutMode);
	}
	
	if (screenProperties)
	{
		xmlEvent.appendChild(screenProperties);
	}
	
	//TODO: Refactor the functions that modify the xmlEvent. 
	//Remove the duplicated code that check and add the button tag
	//CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
	//SQC-6247 - [NGK Promotions/ Digital Offers] NGK will respect the parameter "isEnabled" of section "Offers"?
	lAddOffersButton(splitedScreenNumbers, xmlEvent);
	// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
	lAddGlobalPromotionsButton(splitedScreenNumbers, xmlEvent);
	//SDO-7747 - NGK stops working when trying to sell a product with no price configured
	lAddInvalidScreenButtons(splitedScreenNumbers, xmlEvent);
	lAddDisabledReturnButtons(splitedScreenNumbers, xmlEvent);
	lAddNonDisplayScreenButtons(splitedScreenNumbers, xmlEvent);
	lAddNonDisplayScreenNumbers(splitedScreenNumbers, xmlEvent);
	//EQA-556 - Have Coupon button not being displayed for Pay At Counter transactions
	//Removed the code that disables the button when selecting to pay at the counter
	//lAddDisableBarcodeReader(splitedScreenNumbers, xmlEvent);
	//EQA-521 - Kiosk does not hide 'Local Promotion' button when all promotions are disabled
	lAddDisableLocalPromo(splitedScreenNumbers, xmlEvent);
	//CSO-33 - Retrofit from v4: IMPLEMENTATION OF THE DELI OF THE DAY - 6994607
	lAddDeliOfTheDayButtons(splitedScreenNumbers, xmlEvent);
	
	// CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057
	lAddTimeRestrictionProductAvailabilityButtons(splitedScreenNumbers, xmlEvent);
	// CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	lAddInfoIconScreenButtons(splitedScreenNumbers, xmlEvent);
	
	// CSO-233 - To implement a feature that will allow a Franchisee at the store to configure a `Take Out` only window of time in the late night hours. - 6998530
	lAddNotDisplayEatInButton(splitedScreenNumbers, xmlEvent);
	
	//7958410 - Menu with no Active Products should not appear
	lAddDisabledBYBPreBuildButtons(splitedScreenNumbers, xmlEvent);
	//7958410 - Menu with no Active Products should not appear
	lAddNotDisplayCarouselButtons();

	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	lAddAllergenInformationButtons(splitedScreenNumbers, xmlEvent);
	
		var xmlFirstLoadCarousel = new XML("<Parameter />");
			xmlFirstLoadCarousel.@name = "FirstLoadCarousel";
			xmlFirstLoadCarousel.@value = sessionSale.get("firstLoad");
			xmlEvent.appendChild(xmlFirstLoadCarousel);
		
		var xmlRefreshCarousel = new XML("<Parameter />");
			xmlRefreshCarousel.@name = "RefreshCarousel";
			xmlRefreshCarousel.@value = sessionSale.get("ReValidateCarouselScreen");
			xmlEvent.appendChild(xmlRefreshCarousel);
		
		var xmlScreenCodeToDisable = new XML("<Parameter />");
			xmlScreenCodeToDisable.@name = "ScreenCodeToDisable";
			xmlScreenCodeToDisable.@value = sessionSale.get("carouselButtonsListToHide")
			xmlEvent.appendChild(xmlScreenCodeToDisable);
			
		var xmlMainCarouselIndex = new XML("<Parameter />");
			xmlMainCarouselIndex.@name = "MainCarouselIndex";
			xmlMainCarouselIndex.@value = sessionSale.get("MainCarouselIndex");
			xmlEvent.appendChild(xmlMainCarouselIndex);
			
	if(buttonsDisplaySequence)
	{
		var xmlButtonsDisplaySequence = new XML("<Parameter />");
			xmlButtonsDisplaySequence.@name = "ButtonsDisplaySequence";
			xmlButtonsDisplaySequence.@value = buttonsDisplaySequence;
			xmlEvent.appendChild(xmlButtonsDisplaySequence);
	}
	
	if (!PosSendUICmd(xmlEvent.toXMLString())) return false;
	
	//CSO-32 - HIDE PRODUCT PRICES BUTTON ENHANCEMENTS - 6994584
	lSendNGKShowPriceMessage(true);
	
	return true;
	
	//7958410 - Menu with no Active Products should not appear
	function ShouldSkipCarouselScreen(screenNumber)
	{
		if (ngkScreenInfo[screenNumber] && ngkScreenInfo[screenNumber].xmlNode.@type == "2852")
		{
			var currentItem = screenNumber.toString();
			var updatedScreen = IsCarouselScreenValid(screenNumber);
			var indexof = screens.indexOf(currentItem);
						
			screens[indexof] = updatedScreen;
			splitedScreenNumbers = screenNumbers.replace(currentItem,updatedScreen);
			
		}
				
			var screenCarrousel = sessionSale.get("NGK_CARROUSEL_SCREEN");
		if (screenCarrousel && ngkScreenInfo[screenCarrousel])
		{
			var carrouselScreenXmlNode = ngkScreenInfo[screenCarrousel].xmlNode;
			var buttonParameters = carrouselScreenXmlNode.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number").(@value == screenNumber);
						
			if (buttonParameters != null)
			{
				for each (buttonParameter in buttonParameters)
				{
					csoSelectedMainMenu.screenNumber = screenCarrousel;
					csoSelectedMainMenu.buttonNumber = buttonParameter.parent().parent().@number.toString();
				}
			}
		}
		SetSessionProperty(screenNumbers);
	}
	
	// CSO-282 - CYT Redesign - 8024409
	function lCheckCYTMenuScreenLayoutMode(screenNumber)
	{
		var CYTRedesign = lGetCSOUserInterfaceStringParameter("cyt.redesign", "");
		if (CYTRedesign != null && CYTRedesign != undefined) 
		{
			if("true" == CYTRedesign.toLowerCase()) 
			{
				var CYTMenuScreenNumbers = lGetCSOUserInterfaceStringParameter("cyt.menuScreenNumbers", "");
				if (CYTMenuScreenNumbers != null && CYTMenuScreenNumbers != undefined)
				{
					var CYTMenuScreens = CYTMenuScreenNumbers.split("|");
					for (var i = 0; i < CYTMenuScreens.length; i++)
					{
						if(CYTMenuScreens[i] == screenNumber)
						{
							return (true);
						}
					}
				}
			}
		}
		return false;
	}
	
	function lAddDisabledReturnButtons(splitedScreenNumbers, xmlEvent)
	{
		if (GLOBAL_NGK_SCREEN_STACK.length == 0){
			for each (screenNumber in splitedScreenNumbers)
			{
				if (ngkScreenInfo[screenNumber] && ngkScreenInfo[screenNumber].xmlNode.@type == "2852") {
					returnButtons = lGetReturnButtonsFromScreen(screenNumber);
					
					if (returnButtons.length > 0) {
						xmlEvent = lGetScreenPropertiesWithReturnButtonsDisabled(returnButtons, screenNumber, xmlEvent);
					}
				}
			}
		}
		
		function lGetReturnButtonsFromScreen(screenNumber) {
			var returnButtons = [];
			
			for each (button in ngkScreenInfo[screenNumber].xmlNode.Button.(@category == "82")) {
				returnButtons.push(button.@number.toString());
			}
			
			return returnButtons;
		}
		
		function lGetScreenPropertiesWithReturnButtonsDisabled(returnButtons, screenNumber, xmlEvent) {

			var screenXml;
			var buttonFromScreenXml;
			var buttonXml;
			var screenFromScreenProperties;
			
			if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
			{
				screenFromScreenProperties = xmlEvent.Screen.(@number == screenNumber)[0];
			}
			
			if (screenFromScreenProperties) {
				screenXml = screenFromScreenProperties;
			}
			else {
				screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
				xmlEvent.appendChild(screenXml);
			}
			
			for each (returnButton in returnButtons) {
				buttonFromScreenXml = null;
				if (screenXml.Button.(@number == returnButton).length() > 0)
				{
					buttonFromScreenXml = screenXml.Button.(@number == returnButton)[0];
				}
				
				if (buttonFromScreenXml) {
					buttonXml = buttonFromScreenXml;
				}
				else {
					buttonXml = new XML("<Button number=\"" + returnButton + "\" />");
					screenXml.appendChild(buttonXml);
				}
				
				buttonXml.@enabled = "false";
			}
			
			return xmlEvent;
		}
		
	}
	
	function lAddNonDisplayScreenButtons(splitedScreenNumbers, xmlEvent)
	{
		var screenVisibility = lGetCSOUserInterfaceStringParameter("NGKNonDisplay.screenButtons", null);
		
		if (screenVisibility != null)
		{
			var splittedScreenVisibility = screenVisibility.split("|");

			for each (var screenNumber in splitedScreenNumbers)
			{
				if (ngkScreenInfo[screenNumber])
				{
					for each (var button in ngkScreenInfo[screenNumber].xmlNode.Button)
					{					
						for (var i = 0; i < splittedScreenVisibility.length; i++)
						{
							var buttonVisibility = splittedScreenVisibility[i].split("-");
							
							//the index 0 represent the screen 
							if (buttonVisibility[0] == screenNumber)
							{
								var screenXml;
								var buttonXml;
								
								if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
								{
									screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
								}
								else
								{
									screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
									xmlEvent.appendChild(screenXml);
								}
								
								for (var j = 1; j < buttonVisibility.length; j++)
								{
									if (button.@number.toString() == buttonVisibility[j])
									{
										if (screenXml.Button.(@number == buttonVisibility[j]).length() > 0)
										{
											buttonXml = screenXml.Button.(@number == buttonVisibility[j])[0];
										}
										else
										{
											buttonXml = new XML("<Button number=\"" + buttonVisibility[j] + "\" />");
											screenXml.appendChild(buttonXml);
										}
										
										buttonXml.@visible = "false";
									}
									
								}
							}
						}
						
					}
				}
			}
		}
		
	}
	
	function lAddNonDisplayScreenNumbers(splitedScreenNumbers, xmlEvent)
	{
		for each (var screenNumber in splitedScreenNumbers)
		{
			if (ngkScreenInfo[screenNumber])
			{	
				var node = ngkScreenInfo[screenNumber].xmlNode;
				var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number");

				if (ButtonParameters != null)
				{
					for each (var buttonParameter in ButtonParameters)
					{
						if (!PosNGKIsScreenValid(buttonParameter.@value))
						{						
							var buttonNumber = buttonParameter.parent().parent().@number;
							
							var screenXml;
							var buttonXml;
							
							if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
							{
								screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
							}
							else
							{
								screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
								xmlEvent.appendChild(screenXml);
							}
							
							if (screenXml.Button.(@number == buttonNumber).length() > 0)
							{
								buttonXml = screenXml.Button.(@number == buttonNumber)[0];
							}
							else
							{
								buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
								screenXml.appendChild(buttonXml);
							}
							
							buttonXml.@visible = "false";
						}
					}
				}
			}
		}
	
	}
	
	function lAddDisableBarcodeReader(splitedScreenNumbers, xmlEvent)
	{
		if (sessionSale.get("NGK_ORDER_REROUTE") != "PAY_HERE")
		{
			for each (var screenNumber in splitedScreenNumbers)
			{
				if (ngkScreenInfo[screenNumber])
				{	
					var node = ngkScreenInfo[screenNumber].xmlNode;
					var actionList = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOWLOCALPROMOTIONBARCODEREADER"));

					if (actionList != null)
					{
						for each (var action in actionList)
						{
							var buttonNumber = action.parent().@number;
							
							var screenXml;
							var buttonXml;
							
							if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
							{
								screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
							}
							else
							{
								screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
								xmlEvent.appendChild(screenXml);
							}
							
							if (screenXml.Button.(@number == buttonNumber).length() > 0)
							{
								buttonXml = screenXml.Button.(@number == buttonNumber)[0];
							}
							else
							{
								buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
								screenXml.appendChild(buttonXml);
							}
							
							buttonXml.@visible = "false";
						}
					}
				}
			}
		}
	}
	
	function lAddDisableLocalPromo(splitedScreenNumbers, xmlEvent)
	{
		for each (var screenNumber in splitedScreenNumbers)
		{
			if (ngkScreenInfo[screenNumber])
			{	
				var node = ngkScreenInfo[screenNumber].xmlNode;
				var actionList = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOWLOCALPROMOTIONS"));

				if (actionList != null)
				{
					for each (var action in actionList)
					{
						if (!PosCSOIsLocalPromoAvailableJS())
						{
							var buttonNumber = action.parent().@number;
							
							var screenXml;
							var buttonXml;
							
							if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
							{
								screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
							}
							else
							{
								screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
								xmlEvent.appendChild(screenXml);
							}
							
							if (screenXml.Button.(@number == buttonNumber).length() > 0)
							{
								buttonXml = screenXml.Button.(@number == buttonNumber)[0];
							}
							else
							{
								buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
								screenXml.appendChild(buttonXml);
							}
							
							buttonXml.@visible = "false";
						}
					}
				}
			}
		}
	}
	
	/**
	 * @brief - Modify the show screen message to include the Deli Of The Day Information.
	 * @param - splitedScreenNumbers - list of screens that will be displayed
	 * @param - xmlEvent - xml that should be modified to include the additional information
	 * @author - Vladimir
	 * @since - CSO-33 - Retrofit from v4: IMPLEMENTATION OF THE DELI OF THE DAY - 6994607
	 */
	function lAddDeliOfTheDayButtons(splitedScreenNumbers, xmlEvent)
	{
		for each (var screenNumber in splitedScreenNumbers)
		{
			if (!ngkScreenInfo[screenNumber]) continue;
			
			//Retrieve the buttons that are used to sold products
			var node = ngkScreenInfo[screenNumber].xmlNode;
			var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
			
			if (!(ButtonParameters.length() > 0)) continue;

			for each (var buttonParameter in ButtonParameters)
			{
				var productCode = buttonParameter.@value.toString();
				
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				if (csoProductInfo[productCode] == null || csoProductInfo[productCode] == undefined)
				{
					continue;
				}
				else
				{
					if (productCode && csoProductInfo[productCode] && csoProductInfo[productCode].xmlNode.@statusCode == "ACTIVE")
					{	
						var deliInfo = GetDeliOfTheDayInfo(productCode);
						if (!deliInfo) continue;
					
						var buttonNumber = buttonParameter.parent().parent().@number;
						
						//Create the button xml structure if it does not exist yet
						var screenXml;
						var buttonXml;
						
						if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
						{
							screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
						}
						else
						{
							screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
							xmlEvent.appendChild(screenXml);
						}
						
						if (screenXml.Button.(@number == buttonNumber).length() > 0)
						{
							buttonXml = screenXml.Button.(@number == buttonNumber)[0];
						}
						else
						{
							buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
							screenXml.appendChild(buttonXml);
						}
						
						//Add the Deli of the Day information to the button
						buttonXml.@deliOfTheDayActive = "true";
						buttonXml.@deliOfTheDayProductCode = deliInfo.deliOfTheDayProductCode;
						buttonXml.@deliOfTheDayI18nKey = deliInfo.deliOfTheDayI18nKey;
						buttonXml.@deliOfTheDayColor = deliInfo.deliOfTheDayColor;
					}
				}
			}
		}
	}
	
	/**
	 * @brief - Modify the show screen message to hide buttons that are mapped to invalid products
	 * @param - splitedScreenNumbers - list of screens that will be displayed
	 * @param - xmlEvent - xml that should be modified to include the additional information
	 * @author - Vladimir
	 * @since - SDO-7747 - NGK stops working when trying to sell a product with no price configured
	 */
	function lAddInvalidScreenButtons(splitedScreenNumbers, xmlEvent)
	{
		for each (var screenNumber in splitedScreenNumbers)
		{
			if (!ngkScreenInfo[screenNumber]) continue;
			
			//Retrieve the buttons that are used to sold products
			var node = ngkScreenInfo[screenNumber].xmlNode;
			var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
			
			// CSO-282 - CYT Redesign - 8024409
			var isCYTMode1Screens = false;
			var CYTRedesign = lGetCSOUserInterfaceStringParameter("cyt.redesign", "");
			if ((CYTRedesign != null) && (CYTRedesign != undefined) && ("true" == CYTRedesign.toLowerCase())) 
			{
				isCYTMode1Screens = lCheckCYTMenuScreenLayoutMode(screenNumber);
			}

			if ((!(ButtonParameters.length() > 0)) && (!(isCYTMode1Screens))) continue;

			if (ButtonParameters.length() > 0)
			{
				for each (var buttonParameter in ButtonParameters)
				{
					var productCode = buttonParameter.@value.toString();
					
					// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
					if (!productCode || 
						!csoProductInfo[productCode] || 
						!csoProductInfo[productCode].xmlNode ||
						csoProductInfo[productCode].xmlNode.@statusCode != "ACTIVE" ||
						!csoProductInfo[productCode].isValid || // CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load
						csoProductInfo[productCode].xmlNode.@salable != "true" ||
						!PosCheckIfPriceNodeIsValid(csoProductInfo[productCode].xmlNode) ||
						!PosCheckIfTaxEntryIsValid(csoProductInfo[productCode].xmlNode)) // WWR-2579 - CYT Phase 1 - Cycle 2: Incorrect behavior for "non priced", "non taxed", "inactive" items on KIOSK and POS
					{
						var buttonNumber = buttonParameter.parent().parent().@number;
						
						lAddHideButtonData(buttonNumber, xmlEvent, screenNumber);

					}
				}
			}
			
			// CSO-282 - CYT Redesign - 8024409
			if(isCYTMode1Screens)
			{
				//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
				var hasProductToSaleButton2 = false;
				var hasProductToSaleButton3 = false;
			
				//Retrive the CYT group filter information if it is configured
				//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
				var GroupButton2Array = [];
				var GroupButton3Array = [];

				//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
				var productTypeButton2 = node.Button.(@number == "2").Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("KEY_WF_CYT_SHOW_SCREEN")).Parameter.(@name == "ProductType").@value.toString();
				var GroupFilterButton = lGetCYTGroupFilter(node, "2");
				if (GroupFilterButton) GroupButton2Array = GroupFilterButton.split("|");
				
				//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
				var productTypeButton3 = node.Button.(@number == "3").Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("KEY_WF_CYT_SHOW_SCREEN")).Parameter.(@name == "ProductType").@value.toString();				
				GroupFilterButton = lGetCYTGroupFilter(node, "3");
				if (GroupFilterButton) GroupButton3Array = GroupFilterButton.split("|");
				
				for each (var productCYTCode in csoCYTProducts)
				{
					//In case loadInactiveProducts is set as true, do additional validations
					if (!productCYTCode || 
						!csoProductInfo[productCYTCode] || 
						!csoProductInfo[productCYTCode].xmlNode ||
						csoProductInfo[productCYTCode].xmlNode.@statusCode != "ACTIVE" ||
						csoProductInfo[productCYTCode].xmlNode.@salable != "true" ||
						!PosCheckIfPriceNodeIsValid(csoProductInfo[productCYTCode].xmlNode) ||
						!PosCheckIfTaxEntryIsValid(csoProductInfo[productCYTCode].xmlNode)) // WWR-2579 - CYT Phase 1 - Cycle 2: Incorrect behavior for "non priced", "non taxed", "inactive" items on KIOSK and POS
					{
						continue;
					}
					
					if (isProductOutage(productCYTCode)) continue;
					
					var productInfo = csoProductInfo[productCYTCode];
					
					var CSOCytGroupParameter = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytGroup");
					var CSOCytGroup = CSOCytGroupParameter != undefined && CSOCytGroupParameter.@value.toString() != "" ? CSOCytGroupParameter.@value.toString() : "";

					//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
					if( ((productInfo.isBybProduct)  && (productTypeButton2 == "CUSTOMIZED")) ||
					    ((productInfo.isBybPreBuilt) && (productTypeButton2 == "PRE_BUILT")) )
					{
						//If the filter is configured and this particular product
						//does not belong to the configured groups,
						//it should not be considered
						if ((GroupButton2Array.length == 0) || 
						    (CSOCytGroup != "" && GroupButton2Array.indexOf(CSOCytGroup) != -1)) hasProductToSaleButton2 = true;
					}

					//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
					if( ((productInfo.isBybProduct)  && (productTypeButton3 == "CUSTOMIZED")) ||
					    ((productInfo.isBybPreBuilt) && (productTypeButton3 == "PRE_BUILT")) )
					{
						//If the filter is configured and this particular product
						//does not belong to the configured groups,
						//it should not be considered
						if ((GroupButton3Array.length == 0) ||
						    (CSOCytGroup != "" && GroupButton3Array.indexOf(CSOCytGroup) != -1)) hasProductToSaleButton3 = true;
					}
				}
				//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
				if(!hasProductToSaleButton2)
				{
					lAddHideButtonData("2", xmlEvent, screenNumber);
				}
				//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
				if(!hasProductToSaleButton3)
				{
					lAddHideButtonData("3", xmlEvent, screenNumber);
				}
			}
			
			var POSPromotionsEnabled = hlp.findParamInSectionWide("isEnabled", "Promotion") == "true";
			if(!POSPromotionsEnabled)
				lAddInvalidPromotionScreen(screenNumber, xmlEvent);
		}
		
		/**
		 * @brief - Get the CYT group filter from a particular screen xml node
		 * @param - node - screen xml node
		 * @param - buttonNumber - Screen button number (CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen)
		 * @author - Vladimir Dobroff
		 * @since - CSO-282 - CYT Redesign
		 * @modified - CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
		 */
		function lGetCYTGroupFilter(node, buttonNumber)
		{
			var filter = "";
		
			//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
			var CYTGroupFilterParameter = node.Button.(@number == buttonNumber).Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("KEY_WF_CYT_SHOW_SCREEN")).Parameter.(@name == "GroupFilter");
			if (CYTGroupFilterParameter && CYTGroupFilterParameter.length() > 0)
			{
				filter = CYTGroupFilterParameter[0].@value.toString();
			}

			return filter;
		}
		
		// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
		function lAddInvalidPromotionScreen(screenNumber, xmlEvent)
		{
			//Retrieve the buttons that are used to show promotion screen
			var node = ngkScreenInfo[screenNumber].xmlNode;
			var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_NGK_SHOW_PROMOTIONS")).Parameter;
			if (ButtonParameters.length() > 0)
			{
				for each (var buttonParameter in ButtonParameters)
				{
					var buttonNumber = buttonParameter.parent().parent().@number;
						
					lAddHideButtonData(buttonNumber, xmlEvent, screenNumber);
				}
			}
		}
	
		function lAddHideButtonData(buttonNumber, xmlEvent, screenNumber)
		{
			//Create the button xml structure if it does not exist yet
			var screenXml;
			var buttonXml;
			
			if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
			{
				screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
			}
			else
			{
				screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
				xmlEvent.appendChild(screenXml);
			}
			
			if (screenXml.Button.(@number == buttonNumber).length() > 0)
			{
				buttonXml = screenXml.Button.(@number == buttonNumber)[0];
			}
			else
			{
				buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
				screenXml.appendChild(buttonXml);
			}
			
			buttonXml.@visible = "false";
		}
	}
	
	/**
	 * @brief - Modify the show screen message to show info buttons
	 * @param - splitedScreenNumbers - list of screens that will be displayed
	 * @param - xmlEvent - xml that should be modified to include the additional information
	 * @author - Vivian Cury
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 */
	function lAddInfoIconScreenButtons(splitedScreenNumbers, xmlEvent)
	{
		for each (var screenNumber in splitedScreenNumbers)
		{
			if (!ngkScreenInfo[screenNumber]) continue;
			
			//Retrieve the buttons that are used to sold products
			var node = ngkScreenInfo[screenNumber].xmlNode;
			var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
			
			if (!(ButtonParameters.length() > 0)) continue;

			for each (var buttonParameter in ButtonParameters)
			{
				var productCode = buttonParameter.@value.toString();

				// CSO-64 - NGK v5.3 - Display Nutritional Information - Info Icon Tutorial Message and Calories Display Near Price
				var calories = lGetEnergyInformation(productCode);
				// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				var energySuffix = csoCalculateEnergyInformation ? "" : GetProductEnergySuffix(csoProductInfo[productCode]);
				// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
				var hasNutritionalInfoAvailable = isNutritionalInfoAvailable(productCode);
				if ((hasNutritionalInfoAvailable) ||
				    ((calories != "") && (csoLoadCustomEnergyInformation != "") && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true )))
				{
					var buttonNumber = buttonParameter.parent().parent().@number;
					
					//Create the button xml structure if it does not exist yet
					var screenXml;
					var buttonXml;
					
					if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
					{
						screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
					}
					else
					{
						screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
						xmlEvent.appendChild(screenXml);
					}
					
					if (screenXml.Button.(@number == buttonNumber).length() > 0)
					{
						buttonXml = screenXml.Button.(@number == buttonNumber)[0];
					}
					else
					{
						buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
						screenXml.appendChild(buttonXml);
					}
				
					// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
					if (hasNutritionalInfoAvailable)
					{					
						buttonXml.@showNutrition = "true";
					}
					
					buttonXml.@totalCalories = lGetEnergyFormatedForProductWall(productCode, calories);
					
					// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
					// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
					if ((energySuffix != "") &&
					    (csoLoadCustomEnergyInformation != "") &&
					    ((!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true)))
					{
						buttonXml.@energySuffix = energySuffix;
					}
				}
			}
		}
		
		//CSO-1399 - POS-485 - KIOSK 5.x Nav Redesign - Product Wall Improvements and Standardization
		function lGetEnergyFormatedForProductWall(productCode, currentCalories)
		{
			//If layoutMode is US, use the old FDA calorie information
			if(csoLoadCustomEnergyInformation != "")
				return currentCalories;
			
			var nutritionalInfoProductWallType = lGetCSOUserInterfaceStringParameter("nutritionalInfoProductWallType", "");
			var firstType = nutritionalInfoProductWallType.split('|')[0];
			var secondType = nutritionalInfoProductWallType.split('|')[1];
			
			//If nutritionalInfoProductWallType is missing or invalid, then no calorie or kilojoule information will be displayed.
			if(nutritionalInfoProductWallType == "" ||
			(nutritionalInfoProductWallType.toUpperCase() != "KCAL" && nutritionalInfoProductWallType.toUpperCase() != "KJ" &&
			nutritionalInfoProductWallType.toUpperCase() != "KCAL|KJ" && nutritionalInfoProductWallType.toUpperCase() != "KJ|KCAL"))
			{
				return "";
			}

			var firstCalories = "";
			var secondCalories = "";
			
			if(firstType)
			{
				firstCalories = lGetEnergyInformation(productCode, null, null, firstType);
			}
			
			if(secondType)
			{
				secondCalories = lGetEnergyInformation(productCode, null, null, secondType);
			}
			
			if(firstCalories != "" && secondCalories != "")
				return firstCalories + " | " + secondCalories;
			if(firstCalories != "" && secondCalories == "")
				return firstCalories;
			if(firstCalories == "" && secondCalories != "")
				return secondCalories;
			
			return "";
		}
	}
	
	/**
	 * @brief - Modify the show screen message to hide buttons that are mapped to BYB products when using an invalid screen mode
	 * @param - splitedScreenNumbers - list of screens that will be displayed
	 * @param - xmlEvent - xml that should be modified to include the additional information
	 * @author - Vladimir
	 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 */
	function lAddDisabledBYBButtons(splitedScreenNumbers, xmlEvent)
	{
		if (PosCSOCheckSharedContext("NGK_LAYOUT", "9X16") ||
			PosCSOCheckSharedContext("NGK_LAYOUT", "5X4") || 
			PosCSOCheckSharedContext("NGK_LAYOUT", "ADA"))
		{
			for each (var screenNumber in splitedScreenNumbers)
			{
				if (!ngkScreenInfo[screenNumber]) continue;
				
				//Retrieve the buttons that are associated with BYB products
				var node = ngkScreenInfo[screenNumber].xmlNode;
				var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
				
				if (!(ButtonParameters.length() > 0)) continue;

				for each (var buttonParameter in ButtonParameters)
				{
					var productCode = buttonParameter.@value.toString();
					
					if (!productCode || 
						!csoProductInfo[productCode] || 
						(csoProductInfo[productCode].isBybProduct == true))
					{
						var buttonNumber = buttonParameter.parent().parent().@number;
						
						//Create the button xml structure if it does not exist yet
						var screenXml;
						var buttonXml;
						
						if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
						{
							screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
						}
						else
						{
							screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
							xmlEvent.appendChild(screenXml);
						}
						
						if (screenXml.Button.(@number == buttonNumber).length() > 0)
						{
							buttonXml = screenXml.Button.(@number == buttonNumber)[0];
						}
						else
						{
							buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
							screenXml.appendChild(buttonXml);
						}
						
						buttonXml.@visible = "false";
					}
				}
			}
		}
	}
	
	/**
	 * @brief - Modify the show screen message to hide buttons that are mapped to BYB products when using an invalid screen mode
	 * @param - splitedScreenNumbers - list of screens that will be displayed
	 * @param - xmlEvent - xml that should be modified to include the additional information
	 * @author - Vladimir
	 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 * @modified - CSO-459 - TSS .23 QR14 - Prebuild is not showing in CYT Screen
	 */
	function lAddDisabledBYBPreBuildButtons(splitedScreenNumbers, xmlEvent)
	{
		for each (var screenNumber in splitedScreenNumbers)
		{
			if (ngkScreenInfo[screenNumber])
			{	
				var node = ngkScreenInfo[screenNumber].xmlNode;
				var actionList = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("KEY_WF_SHOW_SCREEN_PRE_BUILT"));

				//CSO-459 - TSS .23 QR14 - Prebuild is not showing in CYT Screen
				if (actionList != null)
				{
					for each (var action in actionList)
					{
						var buttonParameters = action.Parameter.(@name == "Number");
						
						if (buttonParameters != null && buttonParameters.length() > 0)
						{
							if (!PosNGKIsScreenValid(buttonParameters[0].@value, true))
							{
								var buttonNumber = action.parent().@number;
								
								var screenXml;
								var buttonXml;
								
								if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
								{
									screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
								}
								else
								{
									screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
									xmlEvent.appendChild(screenXml);
								}
								
								if (screenXml.Button.(@number == buttonNumber).length() > 0)
								{
									buttonXml = screenXml.Button.(@number == buttonNumber)[0];
								}
								else
								{
									buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
									screenXml.appendChild(buttonXml);
								}
								
								buttonXml.@visible = "false";
							}
						}
					}
				}
			}
		}
	}
	
	/**
	 * @brief - Modify the show screen message to hide or display the offers button
	 * @param - splitedScreenNumbers - list of screens that will be displayed
	 * @param - xmlEvent - xml that should be modified to include the additional information
	 * @author - Vladimir
	 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
	 *        - SQC-6247 - [NGK Promotions/ Digital Offers] NGK will respect the parameter "isEnabled" of section "Offers"?
	 * 		  - SDO-12690 [Kiosk Offer Redemption]: SCAN OFFER button is disappeared when user navigate back to previous menu from current (Sub menu) by clicking on BACK button.
	 */
    function lAddOffersButton(splitedScreenNumbers, xmlEvent)
	{
		var menuScreen = false;
		
		for each (screenNumber in splitedScreenNumbers)
		{
			if (ngkScreenInfo[screenNumber] && ngkScreenInfo[screenNumber].xmlNode.@type == "2852")
			{
				menuScreen = true;
				break;
			}
		}
		
		if (menuScreen)
		{
			var xmlParameter = new XML("<Parameter />");
			xmlParameter.@name = "ShowOffersButton";
			
			var POSOffersEnabled = hlp.findParamInSectionWide("isEnabled", "Offers") == "true";
			var CSOOffersEnabled = lGetCSOUserInterfaceStringParameter("enableOffers", "false") == "true";
			
			//SQC-6247 - [NGK Promotions/ Digital Offers] NGK will respect the parameter "isEnabled" of section "Offers"?
			if (POSOffersEnabled && CSOOffersEnabled)
			{
				xmlParameter.@value = "true";
				xmlEvent.appendChild(xmlParameter);
			}
		}
	}
	
		/**
	 * @brief - Modify the show screen message to hide or display the global promotions button
	 * @param - splitedScreenNumbers - list of screens that will be displayed
	 * @param - xmlEvent - xml that should be modified to include the additional information
	 * @author - Robert Abreu
	 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
	 */
    function lAddGlobalPromotionsButton(splitedScreenNumbers, xmlEvent)
	{
		var menuScreen = false;
		
		for each (screenNumber in splitedScreenNumbers)
		{
			if (ngkScreenInfo[screenNumber] && ngkScreenInfo[screenNumber].xmlNode.@type == "2852")
			{
				menuScreen = true;
				break;
			}
		}
		
		if (menuScreen)
		{
			var xmlParameter = new XML("<Parameter />");
			xmlParameter.@name = "ShowGlobalPromotionsButton";
			
			var POSPromotionsEnabled = hlp.findParamInSectionWide("isEnabled", "Promotion") == "true";
			
			if (POSPromotionsEnabled)
			{
				xmlParameter.@value = "true";
				xmlEvent.appendChild(xmlParameter);
			}
		}
	}
	
	/**
	 * @brief  - Modify the show screen message to include products with time-based restriction sales.
	 * @param  - splitedScreenNumbers - list of screens that will be displayed
	 * @param  - xmlEvent - xml that should be modified to include the additional information
	 * @author - Jorge Olimpia
	 * @since  - CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057 
	 */
	function lAddTimeRestrictionProductAvailabilityButtons(splitedScreenNumbers, xmlEvent)
	{
		for each (var screenNumber in splitedScreenNumbers)
		{
			if (!ngkScreenInfo[screenNumber]) continue;
			//Retrieve the buttons that are used to sold products
			var node = ngkScreenInfo[screenNumber].xmlNode;
			var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
			if (!(ButtonParameters.length() > 0)) continue;
			for each (var buttonParameter in ButtonParameters)
			{
				var productCode = buttonParameter.@value.toString();
				if (csoProductInfo[productCode] == null || csoProductInfo[productCode] == undefined)
				{
					continue;
				}
				else
				{
					if (productCode && csoProductInfo[productCode] && csoProductInfo[productCode].xmlNode.@statusCode == "ACTIVE")
					{	
						var timeRestrictionInfo = GetTimeRestrictionProductAvailability(productCode, 0);
						if (timeRestrictionInfo == undefined || timeRestrictionInfo == null) continue;
						var buttonNumber = buttonParameter.parent().parent().@number;
						//Create the button xml structure if it does not exist yet
						var screenXml;
						var buttonXml;
						if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
						{
							screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
						}
						else
						{
							screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
							xmlEvent.appendChild(screenXml);
						}
						if (screenXml.Button.(@number == buttonNumber).length() > 0)
						{
							buttonXml = screenXml.Button.(@number == buttonNumber)[0];
						}
						else
						{
							buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
							screenXml.appendChild(buttonXml);
						}
						//Add the Deli of the Day information to the button
						buttonXml.@isProductRestricted = "true";
						buttonXml.@timeRestrictionsProductCode = productCode;
						buttonXml.@timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod;
					}
				}
			}
		}
	}
	
	/**
	 * @brief  - Modify the show screen message to remove the Eat In button
	 * @param  - splitedScreenNumbers - list of screens that will be displayed
	 * @param  - xmlEvent - xml that should be modified to include the additional information
	 * @author - Vladimir Dobroff
	 * @since  - NGK v5.9.1 - CSO-233 - To implement a feature that will allow a Franchisee at the store to configure a `Take Out` only window of time in the late night hours. - 6998530
	 */
	function lAddNotDisplayEatInButton(splitedScreenNumbers, xmlEvent)
	{
		for each (screenNumber in splitedScreenNumbers)
		{
			if (ngkScreenInfo[screenNumber] && ngkScreenInfo[screenNumber].xmlNode.@type == "2854")
			{
			    PosSetSessionProperty("CSO_EAT_IN_ENABLED_LOCAL", sessionSale.get("CSO_EAT_IN_ENABLED") != "false");
			
				if (sessionSale.get("CSO_EAT_IN_ENABLED_LOCAL") == "false")
				{
				    var buttonNumber = "72";
					
					//Create the button xml structure if it does not exist yet
					var screenXml;
					var buttonXml;
					
					if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
					{
						screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
					}
					else
					{
						screenXml = new XML("<Screen number=\"" + screenNumber + "\"/>");
						xmlEvent.appendChild(screenXml);
					}
					
					if (screenXml.Button.(@number == buttonNumber).length() > 0)
					{
						buttonXml = screenXml.Button.(@number == buttonNumber)[0];
					}
					else
					{
						buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
						screenXml.appendChild(buttonXml);
					}
					
					buttonXml.@visible = "false";
				}
			}
		}
	}
	
	/**
	 * @brief - Modify the show screen message to allergen information.
	 * @param - splitedScreenNumbers - list of screens that will be displayed
	 * @param - xmlEvent - xml that should be modified to include the additional information
	 * @author - MY
	 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	 */
	function lAddAllergenInformationButtons(splitedScreenNumbers, xmlEvent)
	{
		// match the allergens that the customer signalled with the product list to show
		var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
		var wfDoSale=PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE");

		for each (var screenNumber in splitedScreenNumbers)
		{
			if (!ngkScreenInfo[screenNumber]) continue;
			
			//Retrieve the buttons that are used to sold products
			var node = ngkScreenInfo[screenNumber].xmlNode;
			var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == wfDoSale).Parameter.(@name == "ProductCode");

			for each (var buttonParameter in ButtonParameters)
			{
				var productCode = buttonParameter.@value.toString();
				
				// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
				if (productCode)
				{
					// look for allergen items in all components of the product (recursive)
					var allergensFound = [];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allergensFound = lFindAllergens(allergensFound, productCode, [], false, true, false, true);
					if (allergensFound.length>0) {
						var buttonNumber = buttonParameter.parent().parent().@number;
						
						//Create the button xml structure if it does not exist yet
						var screenXml;
						var buttonXml;
						
						if (xmlEvent.Screen.(@number == screenNumber).length() > 0)
						{
							screenXml = xmlEvent.Screen.(@number == screenNumber)[0];
						}
						else
						{
							screenXml = <Screen number={screenNumber}/>;
							xmlEvent.appendChild(screenXml);
						}
						
						if (screenXml.Button.(@number == buttonNumber).length() > 0)
						{
							buttonXml = screenXml.Button.(@number == buttonNumber)[0];
						}
						else
						{
							buttonXml = <Button number={buttonNumber}/>;
							screenXml.appendChild(buttonXml);
						}
						
						// Add the allergen information to the button
						buttonXml.@hasAllergens = "true";
						
						allergensFound = [];
						// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
						allergensFound = lFindAllergens(allergensFound, productCode, selectedAllergensList, false, true, false, false);
						if (allergensFound.length>0) {
							buttonXml.@hasSignaledAllergens = "true";
						}
					}
				}
			}
		}
	}
}

function PosNGKReturnFromAskToPayAtCounter()
{	
	for each (screen in ngkScreenInfo)
	{
		var screenNode = screen.xmlNode;
		
		if ((screenNode.@type=="2854"))
		{
			PosNGKDoShowScreenJS(ngkScreenInfo[number].xmlNode.@number, null, null, true);
			return true;
		}
	}
	
	API.dbg("PosNGKReturnFromAskToPayAtCounter - Could not find screen type 2854: Sale Type");
	return false;
	
}

/**
 * @brief - Check if the Table Service is available
 * @author - Vladimir Dobroff
 * @modified - Jorge Olimpia
 *             CSO-230 - NGK Support Table Service for Pay At Counter Orders - 7826872
 */
function PosNGKIsTableServiceAvailableJS() {
	
	var hlp = new BusinessObjectHelper;
	
	// CSO-215 - NGK - CYT - enable Table Service for take out orders - 7809875
	// CSO-230 - NGK Support Table Service for Pay At Counter Orders - 7826872
	var enableEatIn = lGetParameterStr("tableService.eatIn", "ONLY_PAY_HERE");
	if (enableEatIn != "NEVER" &&
		enableEatIn != "ALWAYS" &&
		enableEatIn != "ONLY_PAY_HERE" &&
		enableEatIn != "ONLY_PAY_AT_COUNTER" &&
		enableEatIn != "ONLY_WITH_CYT" &&
		// CSO-673 - 8460767 - Table Service - Configure Table service to not display for CYT & Pay Here 
		enableEatIn != "ONLY_PAY_HERE_WITH_CYT" &&
		enableEatIn != "ONLY_PAY_AT_COUNTER_WITH_CYT" 
		)
	{
		enableEatIn = "ONLY_PAY_HERE";
	}
	
	var enableTakeOut = lGetParameterStr("tableService.takeOut", "");
	if (enableTakeOut == "" ||
		(enableTakeOut != "NEVER" &&
		 enableTakeOut != "ALWAYS" &&
		 enableTakeOut != "ONLY_PAY_HERE" &&
		 enableTakeOut != "ONLY_PAY_AT_COUNTER" &&
		 enableTakeOut != "ONLY_WITH_CYT" &&
		 // CSO-673 - 8460767 - Table Service - Configure Table service to not display for CYT & Pay Here 
		 enableTakeOut != "ONLY_PAY_HERE_WITH_CYT" &&
		 enableTakeOut != "ONLY_PAY_AT_COUNTER_WITH_CYT" 
		 ))
	{
		enableTakeOut = lGetParameterStr("tableService.enableForTakeOut", "NEVER");
		if (enableTakeOut.toUpperCase() == "TRUE")
		{
			enableTakeOut = "ALWAYS";
		}
		else
		{
			enableTakeOut = "NEVER";
		}
	}
	
	// NPS-17354 - (Kiosk 5.0-b35-RC10-QR5) - Table locator screen prompts with cancelled CYT VM in order. - ACSI2893306
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	
	// CSO-230 - NGK Support Table Service for Pay At Counter Orders - 7826872
		var saleType = hlp.getSaleType();
	switch(saleType) {
		// Eat In
		case 0: 
			if (!IsSaleTypeEnablesTableService(kioskOrderView, enableEatIn)) {
				return false;
			}
			break;
	
		// Take Out	
		case 1:
			if (!IsSaleTypeEnablesTableService(kioskOrderView, enableTakeOut)) {
				return false;
			}
			break;
		// Other
		default:
			return false;
	}

	// SQC-4670 - Kiosk V4RC12 - Table Service avaiable when minimumPurchaseAmount is defined as blank
	var minimumPurchaseAmount = trim(lGetCSOUserInterfaceStringParameter("tableService.MinimumPurchaseAmount", null));

	if ((minimumPurchaseAmount == null) || (minimumPurchaseAmount == "") || isNaN(Number(minimumPurchaseAmount)) ||
		(Number(minimumPurchaseAmount) > Number(kioskOrderView.Order.@totalAmount)) || (Number(minimumPurchaseAmount) == -1)) {
		return false;
	}
	
	return true;
	/**
	 * @brief    - Check if table service is available for the selected sale type
	 * @author   - Jorge Olimpia
	 * @since    - CSO-230 - NGK Support Table Service for Pay At Counter Orders - 7826872
	 * @modified - NPS-17354 - (Kiosk 5.0-b35-RC10-QR5) - Table locator screen prompts with cancelled CYT VM in order. - ACSI2893306
	 */
	function IsSaleTypeEnablesTableService(kioskOrderView, enableForSaleType) {
		if (enableForSaleType == undefined || enableForSaleType == null || enableForSaleType == "") {
			return false;
		}
		switch(enableForSaleType.toString().toUpperCase()) {
			case "NEVER":
				return false;
			case "ALWAYS":
				return true;
			case "ONLY_PAY_HERE":
				if (sessionSale.get("NGK_ORDER_REROUTE") == "PAY_HERE" || sessionSale.get("NGK_ORDER_REROUTE") == "PAY_MOBILE") {
					return true;
				}
				else {
					return false;
				}				
			case "ONLY_PAY_AT_COUNTER":
				if (sessionSale.get("NGK_ORDER_REROUTE") == "PAY_AT_COUNTER") {
					return true;
				}
				else {
					return false;
				}
			case "ONLY_WITH_CYT":
				// NPS-17354 - (Kiosk 5.0-b35-RC10-QR5) - Table locator screen prompts with cancelled CYT VM in order. - ACSI2893306
				var hasCYT = kioskOrderView..Item.(@voided == "false")..Product.(@isCYT == "true" && Number(@qty) > 0).length() > 0;
				return hasCYT;
			case "ONLY_PAY_HERE_WITH_CYT":
				// CSO-673 - 8460767 - Table Service - Configure Table service to not display for CYT & Pay Here 
				var hasCYT = kioskOrderView..Item.(@voided == "false")..Product.(@isCYT == "true" && Number(@qty) > 0).length() > 0;
				var isPayHere = sessionSale.get("NGK_ORDER_REROUTE") == "PAY_HERE" || sessionSale.get("NGK_ORDER_REROUTE") == "PAY_MOBILE";		
				return hasCYT && isPayHere;				
			case "ONLY_PAY_AT_COUNTER_WITH_CYT":
				// CSO-673 - 8460767 - Table Service - Configure Table service to not display for CYT & Pay Here 
				var hasCYT = kioskOrderView..Item.(@voided == "false")..Product.(@isCYT == "true" && Number(@qty) > 0).length() > 0;
				var isPayAtCounter = sessionSale.get("NGK_ORDER_REROUTE") == "PAY_AT_COUNTER";				
				return hasCYT && isPayAtCounter;
			default:
				return false;
		}
	}
}

/**
 * @brief Function to evaluate if customer wants to use Table Service feature
 *
 * @param titleMsg - header message
 * @param optionTableService - array with button texts (do not use char '|' inside the text)
 * @param optionCollectMyself - array with button values (do not use char '|' inside the value)
 * @param explanationMsg - explanation message
 * @return - true when table service option is selected; false when collectmyself option is selected
 * @author - Rafael Azevedo
 * @since - CSO-686 - 8427268 - Table Service - Clear Customer Choice Buttons	
 */
function PosIsTableServiceRequiredByCustomer(titleMsg, optionTableService, optionCollectMyself, explanationMsg)
{
	// if feature is not enabled, table service is automatically required by user
	var preSelection = lGetCSOUserInterfaceStringParameter("tableService.preSelectionScreen.enable", "false").toLowerCase();
	if(preSelection != "true")
		return true;
	
	var titleDefaultArray = new Array();
	var optionDefaultArray = new Array();
	var valuesDefaultArray = new Array();
	var emptyArray = new Array();
	
	// default values
	titleDefaultArray.push(new Array(PosCSOI18nGetMessageJS("CSO_TABLE_SERVICE_PRE_SELECTION_TLT"), "", "", "","no_image_key"));
	optionDefaultArray.push(new Array(PosCSOI18nGetMessageJS("CSO_TABLE_SERVICE_PRE_SELECTION_BTN_TABLE_SERVICE"), "", "", "", PosNGKGetLocalizedImageFromStoreDB("CSOpreSelectionTableServiceImage")));
	optionDefaultArray.push(new Array(PosCSOI18nGetMessageJS("CSO_TABLE_SERVICE_PRE_SELECTION_BTN_COLLECT_MYSELF"), "", "", "", PosNGKGetLocalizedImageFromStoreDB("CSOpreSelectionCollectMyselfImage")));
	optionDefaultArray.push(new Array(PosCSOI18nGetMessageJS("CSO_TABLE_SERVICE_PRE_SELECTION_MSG"), "","", "no_image_key"));
	
	// parameters treatement
	var titleMsgConfig = titleMsg ? titleMsg.split("|") : emptyArray;
	var explanationMsgConfig = explanationMsg ? explanationMsg.split("|"): emptyArray;
	var optionTableServiceConfig = optionTableService ? optionTableService.split("|"): emptyArray;
	var optionCollectMyselfConfig = optionCollectMyself ? optionCollectMyself.split("|"): emptyArray;
	
	var titleArray = new Array();
	var optionArray = new Array();
	var valuesArray = new Array();
	
	titleArray.push(new Array(PosCSOI18nGetMessageJS(titleMsgConfig[0]), titleMsgConfig[1], titleMsgConfig[2], titleMsgConfig[3], PosNGKGetLocalizedImageFromStoreDB(titleMsgConfig[4])));
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionTableServiceConfig[0]), optionTableServiceConfig[1], optionTableServiceConfig[2], optionTableServiceConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionTableServiceConfig[4])));
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionCollectMyselfConfig[0]), optionCollectMyselfConfig[1], optionCollectMyselfConfig[2], optionCollectMyselfConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionCollectMyselfConfig[4])));
	optionArray.push(new Array(PosCSOI18nGetMessageJS(explanationMsgConfig[0]), explanationMsgConfig[1], explanationMsgConfig[2], explanationMsgConfig[3], PosNGKGetLocalizedImageFromStoreDB(explanationMsgConfig[4])));
		
	// replace default values by parameters
	for(i=0; i<5; i++)
	{
		titleArray[0][i] = titleArray[0][i] ? titleArray[0][i] : titleDefaultArray[0][i];
		for(j=0; j<3; j++)
		{
			optionArray[j][i] = optionArray[j][i] ? optionArray[j][i] : optionDefaultArray[j][i];
		}
	}
		
	valuesArray.push("tableservice");
	valuesArray.push("collectmyself");
	
	returnValue = PosNGKSendSyncPickImageJS("DLG_ASK_TABLE_SERVICE_CHOICE", optionArray, valuesArray, titleArray);
	
	if(returnValue == "tableservice"){
		sessionSale.set("TABLE_SERVICE_REQUIRED_BY_THE_CUSTOMER", "required");
		return true;
	}
	else if(returnValue == "collectmyself"){
		sessionSale.set("TABLE_SERVICE_REQUIRED_BY_THE_CUSTOMER", "notrequired");
		// CSO-1381 - POS-252 - NGK-Table Service Reporting
		PosNGKDismissTableServiceArea();
		return false;		
	}
	
	return true;
}


/**
 * @brief Function to display a sync message. Based on PosCSOSendSyncMessageJS
 *
 * @param eventType
 * @param btnTexts - array with button texts (do not use char '|' inside the text)
 * @param btnValues - array with button values (do not use char '|' inside the value)
 * @param winTitle - window title
 * @return - Value selected | NULL = when cancel has been pressed.
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKSendSyncPickImageJS(eventType, btnTexts, btnValues, winTitle) {

	var retValue = null;

	API.dbg("[PosNGKSendSyncPickImageJS] - btnTexts: " + btnTexts);
	
	var tmpBtnTexts = new Array();
	for each(item in btnTexts) {
		//Array type
		if (item != null && typeof(item) == 'object' && item.length) {
			tmpBtnTexts.push(item.join("@"));
		} else {
			tmpBtnTexts.push(item);
		}
	}

	API.dbg("[PosNGKSendSyncPickImageJS] - tmpBtnTexts: " + tmpBtnTexts);

	var tmpWinTitle = new Array();
	for each(item in winTitle) {
		//Array type
		if (item != null && typeof(item) == 'object' && item.length) {
			tmpWinTitle.push(item.join("@"));
		} else {
			tmpWinTitle.push(item);
		}
	}	

	API.dbg("[PosNGKSendSyncPickImageJS] - vai executar PosItemSelection.");
	API.dbg("[PosNGKSendSyncPickImageJS] - tmpBtnTexts: " + tmpBtnTexts.join("|"));
	API.dbg("[PosNGKSendSyncPickImageJS] - btnValues: " + btnValues.join("|"));
	API.dbg("[PosNGKSendSyncPickImageJS] - tmpWinTitle: " + tmpWinTitle.join("|"));
	API.dbg("[PosNGKSendSyncPickImageJS] - eventType: " + eventType);

	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775	
	var hasSuceeded = PosItemSelection(tmpBtnTexts.join("|"), btnValues.join("|"), tmpWinTitle.join("|"), eventType);
	API.dbg("[CSO - PosNGKSendSyncPickImageJS] hasSuceeded = " + hasSuceeded);
	if (hasSuceeded) {
		retValue = sessionSale.get("SelectedButtonValue");
		API.dbg("[CSO - PosNGKSendSyncPickImageJS] selected value = " + retValue);
	} else {
		var retValue2 = sessionSale.get("SelectedButtonValue");
		API.dbg("[CSO - PosNGKSendSyncPickImageJS] selected value2 = " + retValue2);
		API.dbg("[CSO - PosNGKSendSyncPickImageJS] cancel has been pressed");
	}
	
	sessionSale.set("NGK_POPUP_TIMEOUT", (retValue == null ? "true" : "false"));
	
	return retValue;
}

/**
 * @brief Function to ask to insert card when is required
 * @param workflow - workflow to be called by the ui when the card is inserted
 * @return - false when card is required and not inserted
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKAskInsertCardJS(workflow) {
	// CSO-75 - Insert card popup causes script error
	//var requireCardFirst = lGetCSOUserInterfaceStringParameter("requireCardFirst", "false").toLowerCase();
	var requireCardFirst = "false";
	if (requireCardFirst == 'true' && GLOBAL_CARD_READER_EVT != "1")
	{
	    var curLangCode = sessionSale.get("LANGUAGE");
		PosNGKShowMediaJS("SYNC", "DLG_SYS_INSERT_CARD", "NGK_MSG_CARD_REQUIRED", PosNGKGetLocalizedImageFromStoreDB("insertYourCard"), workflow);
		return false;
	}
	else
	{
		return true;
	}
}

function PosNGKWaitForTheCardInsertionJS()
{
	// CSO-75 - Insert card popup causes script error
	//var requireCardFirst = lGetCSOUserInterfaceStringParameter("requireCardFirst", "false").toLowerCase();
	var requireCardFirst = "false";

	if (requireCardFirst == 'true') {
		var PosId = PosNGKGetPosId();
		var businessDate_Eurecs = "20080110"; 

		if (PosId.substr (0, 3) != "POS") 
		{
			PosId = "POS" + PosId;
		}
		// call reader status npTCLEvalEx("Eurecs_C3ReaderStatusFR " + businessDate_Eurecs + " " + STORE_ID + " " + PosId.substring(3) + " " + OperatorID);
		var ret = npTCLEvalEx("Eurecs_C3ReaderStatusFR " + businessDate_Eurecs + " " + STORE_ID + " " + PosId.substring (3) + " " + OperatorID);
		if(ret != "00")
		{
			API.dbg("PosCheckECashJS: Eurecs_C3ReaderStatusFR FAILED - return=" + ret);
			return false;
		}
		else
		{
			ret = npTCLEvalEx("Eurecs_C3WaitCardFR "+ businessDate_Eurecs + " " + STORE_ID + " " + PosId.substring (3) + " " + OperatorID);
			API.dbg("PosCheckECashJS: Eurecs_C3WaitCardFR return=" + ret)
			if (ret != "00")
			{
				API.dbg("PosCheckECashJS: Eurecs_C3WaitCardFR FAILED - return=" + ret);
				return false;
			}
		}
	}
	return true;
}

function PosNGKAskInsertCardAsyncJS() {
	// CSO-75 - Insert card popup causes script error
	//var requireCardFirst = lGetCSOUserInterfaceStringParameter("requireCardFirst", "false").toLowerCase();
	var requireCardFirst = "false";
	if (requireCardFirst == 'true' && GLOBAL_CARD_READER_EVT != "1")
	{
	    var curLangCode = sessionSale.get("LANGUAGE");
		PosNGKShowMediaJS("ASYNC", "DLG_SYS_INSERT_CARD", "NGK_MSG_CARD_REQUIRED", PosNGKGetLocalizedImageFromStoreDB("insertYourCard"), null);
	}
	return true;
}

/**
 * @brief Function to ask to remove card
 * @param workflow - workflow to be called by the ui when the card is removed
 * @return - false when card is inserted
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKAskRemoveCardJS(workflow)
{
	sessionSale.set("NGK_ORDER_REROUTE", "NONE");
	
	if (GLOBAL_CARD_READER_EVT == "1")
	{
		PosNGKShowMediaJS("SYNC", "DLG_SYS_REMOVE_CARD", "NGK_MSG_CARD_REMOVE", PosNGKGetLocalizedImageFromStoreDB("removeYourCard"), workflow);
		return false;
	}

	return true;
}

/**
 * @brief Function to display a media message
 *
 * @param eventType - SYNC or ASYNC
 * @param eventName - Event name
 * @param msg - Text to be displayed
 * @param media - Media to be displayed (Image or video)
 * @param workflow - workflow to be called afterwards. Can be null.
 * @return - TRUE when could send the XML to the UI driver.
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKShowMediaJS(eventType, eventName, msg, media, workflow) {

	localizedMsg = PosCSOI18nGetMessageJS(msg);

	var params = Array("Msg|" + localizedMsg, 
	                   "Media|" + media);
					   
	if (workflow != null)
	{
		params.push("Workflow|" + workflow);
	}
	
	var xml = lCreateKioskEvent(eventType, eventName, params);
	return PosSendUICmd(xml);
}

 /**
 * @brief - Creates a XML event informing the UI to change its screen number.
 *
 * <Event type="ASYNC" name="DLG_SYS_SHOW_SCREEN">
 *   <Parameter name="Number" value="9000|9027|9033"/>
 *   <Screen number="9000">
 *     <Button number="1" visible="false">
 *     <Button number="2" visible="false">
 *     ...
 *   </Screen>
 * </Event>
 *
 * @return - TRUE when able to send the XML to the GUI driver.
 * @author - Kalil
 * @since - NGK
 * @modified - CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
 */
 function PosNGKShowCarrouselJS(screenCarrousel, screenMenu, increaseImages)
 {
 	//CSO-33 - Retrofit from v4: IMPLEMENTATION OF THE DELI OF THE DAY - 6994607
	// CSO-328 - NGK Date-specific Override of Working Hours - 7977439
	if (PosCSOCheckSharedContext("NGK_SWITCH_DAYPART", "true") && GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE){
		GLOBAL_NGK_ORDER_START_DATE = GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE
	} else {
		GLOBAL_NGK_ORDER_START_DATE = new Date();
	}
 
	var screenInfo = ngkScreenInfo[screenCarrousel];
	
	if (!screenInfo)
	{
		API.dbg("NGK - PosNGKShowCarrouselJS: Missing carrousel screen");
		return false;
	}
	
	PosSetSessionProperty("NGK_CARROUSEL_SCREEN", screenCarrousel);
	
	//If the screenMenu is currently inactive, search for another one
	if (!PosNGKIsScreenValid(screenMenu))
	{
		var node = screenInfo.xmlNode;
		var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number");
		
		if (ButtonParameters != null)
		{
			for each (buttonParameter in ButtonParameters)
			{
				if (PosNGKIsScreenValid(buttonParameter.@value))
				{
					screenMenu = buttonParameter.@value;
					break;
				}
			}
		}
	}
	
	// SDO-6068 - CSO - Local French Promotion - Ability to allow the customer to access the promotion conditions and its offers
	csoItemGroupManager.reset();
	
	PosNGKUpdatePromotionalScreens();
	
	//NPS-12101 - CR to support 16x9 landscape mode on NGK - 6994488
	return PosNGKDoShowScreenJS(screenCarrousel + "|" + screenMenu + "|" + PosNGKGetFirstValidPromotionalSubScreen(), null, null, "true", increaseImages);
 }

/**
 *
 * @brief - Creates a XML event informing the UI to show an image inside a dialog box
 * @param - imageKey - imageKey that will be localized
 * @param - timeout - define the amount of time the dialog will be displayed (in seconds)
 * @param - soundName
 * @param - value
 * @param - position
 * @param - title - i18n key
 * @param - eventName - optional. May override the default message name ("DLG_SYS_SHOW_IMAGE") to allow dialog customization
 * @return - TRUE
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKDoShowImageMessageJS(imageKey, timeout, soundName, value, position, title, eventName, analyticsInfo) {
	
	if(eventName == '')
	  eventName = null;

	if(!analyticsInfo || analyticsInfo == '')
	{
		analyticsInfo = "ScreenNameKey:" + title;
	}

	var parameters = new Array();
	parameters.push(new Array("ImageName", PosNGKGetLocalizedImageFromStoreDB(imageKey)));
	parameters.push(new Array("Timeout", timeout));
	parameters.push(new Array("SoundName", soundName));
	parameters.push(new Array("Value", value));
	parameters.push(new Array("Position", position));
	// NPS-14854 - Kiosk analytics
	parameters.push(new Array("AnalyticsInfo", analyticsInfo));

	
	if (eventName != null)
	{
		// NPS-14854 - Kiosk analytics
		PosCSOSendSyncMessageJS(eventName, parameters, new Array(1, 2, 3, 4, 5, 6), title);
	}
	else
	{
		// NPS-14854 - Kiosk analytics
		PosCSOSendSyncMessageJS("DLG_SYS_SHOW_IMAGE", parameters, new Array(1, 2, 3, 4, 5, 6), title);
	}
	
    return true;
} 
 
/**
 *
 * @brief - Creates a XML event informing the UI to show a video inside a dialog box
 * @param - videoKey - videoKey that will be localized
 * @param - timeout - define the amount of time the dialog will be displayed (in seconds)
 * @param - value
 * @param - title - i18n key
 * @param - eventName - optional. May override the default message name ("DLG_SYS_SHOW_VIDEO") to allow dialog customization
 * @return - TRUE
 * @author - Gabor Hollosy
 * @since - NGK v5 - CSO-413 - Ability to configure "collection point" screens to display custom video
 */
function PosNGKDoShowVideoMessageJS(videoKey, timeout, value, title, eventName, analyticsInfo) {
	
	var parameters = 
		[
			["VideoName", PosNGKGetLocalizedVideoFromStoreDB(videoKey)],
			["Timeout", timeout],
			["Value", value],
			// NPS-14854 - Kiosk analytics
			["AnalyticsInfo", analyticsInfo]			
		];
	
	// NPS-14854 - Kiosk analytics
	PosCSOSendSyncMessageJS(eventName != null && eventName!='' ? eventName : "DLG_SYS_SHOW_VIDEO", parameters, [1, 2, 3, 4], title);
	
    return true;
} 

/**
 *
 * @brief - Creates a XML event informing the UI about the order number and the selected zone for table service
 * @param - imageName - the image found inside the images.zip (not the image key)
 * @param - timeout - define the amount of time the dialog will be displayed (in seconds)
 * @param - soundName
 * @param - value
 * @param - position
 * @param - title - i18n key
 * @param - eventName - optional. May override the default message name ("DLG_SYS_SHOW_ORDER_NUMBER_AND_ZONE") to allow dialog customization
 * @return - TRUE
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKDoShowOrderNumberAndZone(imageName, timeout, soundName, value, position, title, eventName) {
	
	var parameters = new Array();
	parameters.push(new Array("ImageName", PosNGKGetLocalizedImageFromStoreDB(imageName)));
	parameters.push(new Array("Timeout", timeout));
	parameters.push(new Array("SoundName", soundName));
	
	parameters.push(new Array("Value", PosCSOI18nGetMessageJS(value, PosNGKGetOrderNumber(), sessionSale.get("NGK_TABLE_SERVICE_SELECTED_ZONE"))));
	
	parameters.push(new Array("Position", position));

	if (eventName != null)
	{
		PosCSOSendSyncMessageJS(eventName, parameters, new Array(1, 2, 3, 4, 5), title);
	}
	else
	{
		PosCSOSendSyncMessageJS("DLG_SYS_SHOW_ORDER_NUMBER_AND_ZONE", parameters, new Array(1, 2, 3, 4, 5), title);
	}
	
    return true;
}

/**
 *
 * @brief - Creates a XML event informing the UI about the order number
 * @param - imageName - the image found inside the images.zip (not the image key)
 * @param - timeout - define the amount of time the dialog will be displayed (in seconds)
 * @param - soundName
 * @param - value
 * @param - position
 * @param - title - i18n key
 * @param - eventName - optional. May override the default message name ("DLG_SYS_SHOW_ORDER_NUMBER") to allow dialog customization
 * @return - TRUE
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKDoShowOrderNumber(imageName, timeout, soundName, value, position, title, eventName) {
	
	var parameters = new Array();
	
	var PODFrontCounter = PosNGKPointOfDistributionExistsInOrderView("FRONT_COUNTER", false);
	// CSO-86 - NGK use store level McCafe parameter to direct customers - 7056880
	var PODMcCafe = false;
	if (lGetCSOUserInterfaceStringParameter("enableMCCCollectionPoint", "true").toLowerCase() != "false")
	{
		PODMcCafe = PosNGKPointOfDistributionExistsInOrderView("MCCAFE", false);
	}
	
	var imageArray = imageName.split("|");
	var titleArray = title.split("|");
	
	if (PODFrontCounter && PODMcCafe)
	{
		parameters.push(new Array("ImageName", PosNGKGetLocalizedImageFromStoreDB(imageArray[2])));
		title = titleArray[2];
	}
	else if (PODMcCafe)
	{
		parameters.push(new Array("ImageName", PosNGKGetLocalizedImageFromStoreDB(imageArray[1])));
		title = titleArray[1];
	}
	else
	{
		parameters.push(new Array("ImageName", PosNGKGetLocalizedImageFromStoreDB(imageArray[0])));
		title = titleArray[0];
	}
	
	parameters.push(new Array("Timeout", timeout));
	parameters.push(new Array("SoundName", soundName));
	
	parameters.push(new Array("Value", PosCSOI18nGetMessageJS(value, PosNGKGetOrderNumber())));
	
	parameters.push(new Array("Position", position));

	if (eventName == null)
	{
		eventName = "DLG_SYS_SHOW_ORDER_NUMBER";
	}
	
	PosCSOSendSyncMessageJS(eventName, parameters, new Array(1, 2, 3, 4, 5), title);
	
    return true;
} 

/**
 * @brief - Based on PosCSOEndDeliveryLaterJS. Sets as delivery later all received items.
 * @param - deliveryLaterProductCode: Comment which represents the delivery later product.
 * @param - productCode: Represents the latest product code just ordered via the VML process.
 * @author - Kalil Garcia, Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function POSNGKPerformDeliveryLater(productCode, deliveryLaterProductCode)
{
	
	var desiredProductCode = productCode;
	var currentIndex = -1;
	
	if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId"))){
		API.dbg("NGK - POSNGKPerformDeliveryLater: Could not start grill process");
		return;
	}
	
	// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
	var kioskGrillViewXml = lGetGrillView();
	
	for each (var grillComponent in kioskGrillViewXml.Component) 
	{	
		if (grillComponent.@code.toString() != productCode) {
			continue;
		}
		
		PosDoSelGrillIndex(grillComponent.@index);
		
		API.dbg("NGK - POSNGKPerformDeliveryLater: grillComponent.@index=[" + grillComponent.@index + "]) - Selected");
		
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		kioskGrillViewXml = lGetGrillView();
		var newGrillComponent = kioskGrillViewXml.Component.(@index == grillComponent.@index);

		var itemIndex = -1;
		
		for each (var grillItem in newGrillComponent.Item) {
			API.dbg("CSO - PosCSOEndDeliveryLaterJS: grillItem.@code=[" + grillItem.@code + "])");
			if (grillItem.@code.toString() == deliveryLaterProductCode) {
				itemIndex = Number(grillItem.@index);
				break;
			}
		}
		
		API.dbg("NGK - POSNGKPerformDeliveryLater: itemIndex=[" + itemIndex + "])");
		
		if (itemIndex < 0) {
			API.dbg("NGK - POSNGKPerformDeliveryLater: kioskGrillViewXml=[" + kioskGrillViewXml + "])");
		}
		
		if (!PosCSODoGrillAddRemoveAllJS('+', '-1', itemIndex.toString())) {
			API.dbg("NGK - POSNGKPerformDeliveryLater: Could not change delivery later comment");
		}
		break;

	}
	
	if (!PosDoGrillEnd("3")) {
		API.dbg("CSO - PosCSOEndDeliveryLaterJS: Could not end grill process");
	}

	return;
}


/**
 * @brief - Verifies if a given product is eligable as delivery later.
 * 			Rules: Given product code must be grillable, and must have a Comment in its structure.
 * @param - 
 * @param - 
 * @return - true when is eligable;
 * @author - Kalil Garcia
 * @since - NGK v1.0 (French pilot)
 */

function PosNGKIsDeliveryLater(deliveryLaterProductCode, productCode) {

	var hlp = new BusinessObjectHelper;
	var saleType = hlp.getSaleType();
	var deliveryLaterProductInfo = csoProductInfo[deliveryLaterProductCode.toString()];
	
	if (saleType != 0) { // must be eat in.
		API.dbg("NGK - PosNGKIsDeliveryLater: Delivery later is only valid for eat in sale type.");
		return false;
	} else if (deliveryLaterProductInfo == null) {
		API.dbg("NGK - PosNGKIsDeliveryLater: Given delivery later product code is not present on Product-db.xml - ProductCode: " + deliveryLaterProductCode);
		return false;
	} else if (productCode == null) {
		API.dbg("NGK - PosNGKIsDeliveryLater: invalid product code [" + productCode + "]");
		return false;
	}
	
	var productInfo = csoProductInfo[productCode];
	
	if (productInfo != null)
	{
		var productNode = productInfo.xmlNode;
		
		//SDO-10205 - NGK v5.91 - Delivery Later products that are NOT configured with <DisplayOnCSO> still appear on the delivery later screen
		if (productInfo.xmlNode == null || deliveryLaterProductInfo.xmlNode == null)
		{
			return false;
		}
		
		//SDO-10205 - NGK v5.91 - Delivery Later products that are NOT configured with <DisplayOnCSO> still appear on the delivery later screen
		if (!lCheckComment(productInfo.xmlNode, deliveryLaterProductInfo.xmlNode))
		{
			return false;
		}
		
		if (productNode.Comments == null || productNode.Comments.Component == null || 
		    productNode.Comments.Component.(ProductCode == deliveryLaterProductCode).length() == 0)
		{
			return false;
		}
		
		if (productNode.Production == null || productNode.Production.Grillable == null)
		{
			return false;
		}
		
		if (productNode.Production.Grillable.@status == "true")
		{
			return true;
		}
		
	}
	return false;

}

/**
 * @brief Function to display a balloon message. Based on PosCSOShowBalloonMessageJS
 *
 * @param title - message title
 * @param optionTrue - button's title
 * @param optionFalse - button's title
 * @param welcomeMsg - welcome message // CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
 * @return - option selected
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 * @changed - CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
 */
function PosNGKAskOrderCheckoutConfirmationJS(screen, optionTrue, optionFalse, welcomeMsg, optionChangeEatingLocation) {

	var screenConfig = screen.split("|");
	var optionTrueConfig = optionTrue.split("|");
	var optionFalseConfig = optionFalse.split("|");

	// NPS-14854 - Kiosk analytics
	if(!screenConfig[5])
	   screenConfig[5] = "ScreenNameKey:" + screenConfig[0];

	var screenArray = new Array();
	// NPS-14854 - Kiosk analytics
	screenArray.push(new Array(PosCSOI18nGetMessageJS(screenConfig[0]), screenConfig[1], screenConfig[2], screenConfig[3], screenConfig[4], screenConfig[5]));
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	if((null != welcomeMsg)&&(welcomeMsg.length>0)) {
		// use the same collor pattern of the header
		// NPS-14854 - Kiosk analytics
		screenArray.push(new Array(welcomeMsg, screenConfig[1], screenConfig[2], screenConfig[3], screenConfig[4], screenConfig[5]));
	}
	
	var optionArray = new Array();
	// NPS-14854 - Kiosk analytics
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionFalseConfig[0]), optionFalseConfig[1], optionFalseConfig[2], optionFalseConfig[3], optionFalseConfig[4], optionFalseConfig[5], optionFalseConfig[6]));
	
	// CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
	var enableSaleTypeValidation = lGetCSOUserInterfaceStringParameter("product.enableSaleTypeValidation", "false");
			
	if (enableSaleTypeValidation == "true")
	{
		var updatedCartTotal = sessionSale.get("CART_TOTAL_UPDATED");
		var oldCartTotal = sessionSale.get("CART_TOTAL");
		
		if (oldCartTotal != null && oldCartTotal > 0 &&
		    updatedCartTotal != null && updatedCartTotal > 0 &&
			updatedCartTotal != oldCartTotal)
		{
			sessionSale.set("CART_TOTAL_UPDATED","0");
			sessionSale.set("CART_TOTAL","0");
			
			// NPS-14854 - Kiosk analytics
			var response =	PosCSOSendSyncMessageJS("SYNC_POPUP_LAYOUT_C", new Array(PosCSOI18nGetMessageJS("CSO_MSG_WARNING_EATIN_TAKEOUT_CLOSE")), ["closeResponse"], PosCSOI18nGetMessageJS("CSO_MSG_WARNING_PRICE_SUMMARY_MESSAGE") + "|ScreenNameKey:CSO_MSG_WARNING_PRICE_SUMMARY_MESSAGE");
			if(response == null)
			{
				API.dbg("PosNGKAskOrderCheckoutConfirmationJS TIMEOUT");
				sessionSale.set("NGK_POPUP_RESULT", "TIMEOUT");
				PosDoBackFromTotal();
				PosNGKVoidOrderJS();
				sessionSale.set("NGK_ORDER_CANCEL", "true");
				return false;
			}
		}
	}
	
	var returnValue;
	// CSO-464 - NGK- RMHC Donation Feature - 8011722
	var valuesArray;
	
	// Only Checks if it is enabled
	// SQC-7837 Problem in CSL_CSO when select any products and select "Done"
	// CSO-464 - NGK- RMHC Donation Feature - 8011722
	if(lGetCSOUserInterfaceStringParameter("product.enableSaleTypeValidation", "false") == "true" && 
	   optionChangeEatingLocation != undefined &&
	   optionChangeEatingLocation.length > 0)
	{
		var productSaleType = PosCheckSaleTypeFromCurrentProductInCart();
		if (productSaleType != "" && productSaleType != undefined && 
		    ((productSaleType == "EATIN" && sessionSale.get("NGK_SALE_TYPE") == "1") ||
			(productSaleType == "TAKEOUT" && sessionSale.get("NGK_SALE_TYPE") == "0")))
		{
			// If it has conflict, the change Eating location button must be dislayed
			var optionChangeEatingLocationConfig = optionChangeEatingLocation.split("|");
			// NPS-14854 - Kiosk analytics
			optionArray.push(new Array(PosCSOI18nGetMessageJS(optionChangeEatingLocationConfig[0]), optionChangeEatingLocationConfig[1], optionChangeEatingLocationConfig[2], optionChangeEatingLocationConfig[3], optionChangeEatingLocationConfig[4], optionChangeEatingLocationConfig[5],optionChangeEatingLocationConfig[6] ));
			valuesArray = new Array("false", "ChangeEatingLocation");
		}
		else //If it does not have conflict
		{
			// NPS-14854 - Kiosk analytics
			optionArray.push(new Array(PosCSOI18nGetMessageJS(optionTrueConfig[0]), optionTrueConfig[1], optionTrueConfig[2], optionTrueConfig[3], optionTrueConfig[4], optionTrueConfig[5], optionTrueConfig[6]));
			valuesArray = new Array("false", "true");
		}
	}
	else
	{
		//It's not enabled
		// NPS-14854 - Kiosk analytics
		optionArray.push(new Array(PosCSOI18nGetMessageJS(optionTrueConfig[0]), optionTrueConfig[1], optionTrueConfig[2], optionTrueConfig[3], optionTrueConfig[4], optionTrueConfig[5], optionTrueConfig[6] ));
		valuesArray = new Array("false", "true");
	}

	// CSO-464 - NGK- RMHC Donation Feature - 8011722
	if (PosCSORMHCCheckDonationAvailability() && (PosCSORMHCCheckDonationInCartStatus().toString().indexOf("found") > -1)) {
		
		// Donation Fixed Values
		var donationFixedValues = lGetParameterStr("RMHC.setAmountButtons", "");
		// Donation RoundUp Button Enabled
		var donationEnableRoundUpButton = lGetParameterStr("RMHC.enableRoundUpButton", "false");
		// Donation Product Code
		var donationProductCode = lGetParameterStr("RMHC.donationProductCode", "");
		
		// Get donation button values.
		var roundupValue = "";
		var fixedValues = PosNGKGetFixedAmountDonationValues(donationFixedValues);

		var hlp = new BusinessObjectHelper; 
		roundupValue = hlp.calculateDonationValue(donationProductCode, 0, "roundUp");
		
		// Add "donation button".
		// The donation buttons are send as normal buttons because the NP method doesn't handle the donation property.

		var donationProductCartStatus = PosCSORMHCCheckDonationInCartStatus();

		if (donationProductCartStatus == "found") {
			// 'Remove' button
			optionArray.push(new Array("DONATION", "REMOVE", PosCSOI18nGetMessageJS("CSO_RMHC_REMOVE_DONATION"), "", "", ""));
			valuesArray.push("REMOVE");
		}
		else {
			// 'Round up' button
			if (donationEnableRoundUpButton == "true") {
				optionArray.push(new Array("DONATION", "ROUNDUP", roundupValue, "", "", ""));
				valuesArray.push("ROUNDUP");
			}
			// 'Fixed' button
			for	(index = 0; index < fixedValues.length; index++) {
				sessionSale.set("DONATION.FIXED" + (index + 1).toString(), fixedValues[index]);
				optionArray.push(new Array("DONATION", "FIXED" + (index + 1).toString(), fixedValues[index], "", "", ""));
				valuesArray.push("FIXED" + (index + 1).toString());
			}
		}
	}

	// CSO-464 - NGK- RMHC Donation Feature - 8011722
	returnValue = PosNGKSendSyncPickImageJS("DLG_ASK_ORDER_CHECKOUT_CONFIRMATION", optionArray,	valuesArray, screenArray);

	sessionSale.set("DLG_ASK_ORDER_CHECKOUT_CONFIRMATION_RESULT", returnValue);
	
	if (returnValue == null)
	{
		sessionSale.set("NGK_POPUP_RESULT", "TIMEOUT");
		return false;
	}
	else if (returnValue != "true")
	{
		sessionSale.set("NGK_POPUP_RESULT", "FALSE");
		return false;
	}	
	else 
	{
		sessionSale.set("NGK_POPUP_RESULT", "TRUE");
	}

	return returnValue;
}

/**
 * @brief Function to display a popUp warning.
 *
 * @return - false if is timeout
 * @author - Leandro Pereira
 * @since - NGK v15.1
 * @changed - CSO-745 - POS-340 - Order Basket Redesign
 */
function PosNGKCheckConflictSaleType(){
	// CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
	var enableSaleTypeValidation = lGetCSOUserInterfaceStringParameter("product.enableSaleTypeValidation", "false");
			
	if (enableSaleTypeValidation == "true")
	{
		var updatedCartTotal = sessionSale.get("CART_TOTAL_UPDATED");
		var oldCartTotal = sessionSale.get("CART_TOTAL");
		//SQS-289 - [NGK5.17.1 - Ungated Scan] - Incorrect message displayed after edit a Global Promotion for the first time
		var oldSaleType = sessionSale.get("CART_SALE_TYPE");
		var updatedSaleType = sessionSale.get("NGK_SALE_TYPE");
		 
		if (oldCartTotal != null && oldCartTotal > 0 &&
		    updatedCartTotal != null && updatedCartTotal > 0 &&
			updatedCartTotal != oldCartTotal &&
			oldSaleType != null && updatedSaleType != null &&
			oldSaleType != updatedSaleType)
		{
			API.dbg("NGK - PosNGKCheckConflictSaleType: updatedCartTotal " + updatedCartTotal + " oldCartTotal " + oldCartTotal + " oldSaleType " + oldSaleType + " updatedSaleType " + updatedSaleType);
			
			sessionSale.set("CART_TOTAL_UPDATED","0");
			sessionSale.set("CART_TOTAL","0");
			// NPS-14854 - Kiosk analytics
			var response =	PosCSOSendSyncMessageJS("SYNC_POPUP_LAYOUT_C", new Array(PosCSOI18nGetMessageJS("CSO_MSG_WARNING_EATIN_TAKEOUT_CLOSE")), ["closeResponse"], PosCSOI18nGetMessageJS("CSO_MSG_WARNING_PRICE_SUMMARY_MESSAGE") + "|ScreenNameKey:CSO_MSG_WARNING_PRICE_SUMMARY_MESSAGE");
			if(response == null)
			{
				API.dbg("PosNGKAskOrderCheckoutConfirmationJS TIMEOUT");
				sessionSale.set("NGK_POPUP_RESULT", "TIMEOUT");
				PosDoBackFromTotal();
				PosDoVoidSale('false','false');
				sessionSale.set("NGK_ORDER_CANCEL", "true");
				return false;
			}
		}
	}
	return true;
}

/**
 * @brief Function to display a popUp warning.
 *
 * @return - true products config restrict chosen sale type; false otherwise
 * @author - Rafael Azevedo
 * @since - NGK v16.1 -  CSD-58 - FR10 - Display customer's name on the order review screen's header
 */
function PosNGKIsNeededToChangeEatingLocation()
{
	if(lGetCSOUserInterfaceStringParameter("product.enableSaleTypeValidation", "false") == "true")
	{
		var productSaleType = PosCheckSaleTypeFromCurrentProductInCart();
		return (productSaleType != "" && productSaleType != undefined && 
		    ((productSaleType == "EATIN" && sessionSale.get("NGK_SALE_TYPE") == "1") ||
			(productSaleType == "TAKEOUT" && sessionSale.get("NGK_SALE_TYPE") == "0")))
	}
	return false;
}

 /**
 * @brief  - Get an array of strings with the donation fixed values from a string
 * @author - Paulo Ferreira
 * @since  - CSO-464 - NGK- RMHC Donation Feature - 8011722
 * @params - donationValues - a string with the donation values separated by 'pipe'
 * @return - array of string with the values
 */
function PosNGKGetFixedAmountDonationValues(donationValues) {
	
	var donationArray = donationValues.split("|");
	var valuesArray = new Array();
	var decimalSeparator = csoConfigurationInfo.currency.decimalSeparator;
	var thousandSeparator = csoConfigurationInfo.currency.thousandSeparator;
	var currencyDecimals = csoConfigurationInfo.currency.decimalsCount;

	if (decimalSeparator == null || thousandSeparator == null || currencyDecimals == null ||
		decimalSeparator == "" || thousandSeparator == "" || currencyDecimals == "")
		return null;

	var currencyMask = "###" + thousandSeparator + "###" + thousandSeparator + "##0" + decimalSeparator + lStringReplicate("0", currencyDecimals);

	for each (var donation in donationArray) {
		var donationParsed = parseFloat(donation);
		if (isNaN(donationParsed)) continue;
		var formattedValue = sFormatCurrency(currencyMask, donation.toString());
		valuesArray.push(formattedValue.toString());
	}

	return valuesArray;
}

/**
 * @brief - Reset the session DLG_ASK_ORDER_CHECKOUT_CONFIRMATION_RESULT to string.empty
 * @since - CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
 * @author - Leandro Pereira
 */
function PosNGKResetCheckoutConfirmation() {
	
	sessionSale.set("DLG_ASK_ORDER_CHECKOUT_CONFIRMATION_RESULT", " ");
	return true;
}

/**
 * @brief Function to display a balloon message. Based on PosCSOShowBalloonMessageJS
 *
 * @param title - message title
 * @param optionTrue - button's title
 * @param optionFalse - button's title
 * @return - option selected
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKAskConfirmationMessageJS(screen, optionTrue, optionFalse, msgTitle) {

	var screenConfig = screen.split("|");
	var optionTrueConfig = optionTrue.split("|");
	var optionFalseConfig = optionFalse.split("|");
	
	
	var screenArray = new Array();
	// NPS-14854 - Kiosk analytics
	screenArray.push(new Array(PosCSOI18nGetMessageJS(screenConfig[0]), screenConfig[1], screenConfig[2], screenConfig[3], PosNGKGetLocalizedImageFromStoreDB(screenConfig[4]), screenConfig[5]));
	
	if (msgTitle != null && 
	    msgTitle != undefined)
		{
		   var msgTitleConfig = msgTitle.split("|");
		   if(msgTitleConfig.length > 2){
		   	// NPS-14854 - Kiosk analytics
			screenArray.push(new Array(PosCSOI18nGetMessageJS(msgTitleConfig[0]), msgTitleConfig[1], msgTitleConfig[2], msgTitleConfig[3], msgTitleConfig[4], msgTitleConfig[5]));	
		   }
		}
	
	var optionArray = new Array();
	// NPS-14854 - Kiosk analytics
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionTrueConfig[0]), optionTrueConfig[1], optionTrueConfig[2], optionTrueConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionTrueConfig[4]), optionTrueConfig[5], optionTrueConfig[6]));
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionFalseConfig[0]), optionFalseConfig[1], optionFalseConfig[2], optionFalseConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionFalseConfig[4]), optionFalseConfig[5], optionFalseConfig[6]));
	
	return PosNGKSendSyncPickImageJS("DLG_ASK_CONFIRMATION_MESSAGE", optionArray,
		new Array("true", "false"), screenArray) == "true";
}

/**
 * @brief Function to display a balloon message. Based on PosCSOShowBalloonMessageJS
 * @param title - message title
 * @param button - button's title
 * @return - option selected
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKSimpleMessageJS(title, button) 
{
	var titleConfig = title.split("|");
	var buttonConfig = button.split("|");

	var titleArray = new Array();
	titleArray.push(new Array(PosCSOI18nGetMessageJS(titleConfig[0]), titleConfig[1], titleConfig[2], titleConfig[3], PosNGKGetLocalizedImageFromStoreDB(titleConfig[4]), 'ScreenNameKey:' + titleConfig[0]));
	
	var optionArray = new Array();
	optionArray.push(new Array(PosCSOI18nGetMessageJS(buttonConfig[0]), buttonConfig[1], buttonConfig[2], buttonConfig[3], PosNGKGetLocalizedImageFromStoreDB(buttonConfig[4]), buttonConfig[5], 'EventLabelKey:' + buttonConfig[6]));
	
	PosNGKSendSyncPickImageJS("DLG_SIMPLE_DIALOG", optionArray, new Array("true"), titleArray);
	
	return true;
}

/**
 * @brief Function validate if the TableServicePuck is Enabled
 * @return - true if enabled, false if disabled
 * @author - Leandro Pereira
 * @since - NGK v5.0
 */
function PosNGKTableServicePuckAvailableJS() {
	var enableTableServicePuck = lGetCSOUserInterfaceStringParameter("tableService.enablePuck", "false");
	if (enableTableServicePuck == "true")
	{
		return true;
	}
	else
	{
		return false;
	}
	
	return false;
}


/**
 * @brief Function to send to the KVS the chosen number of the Zone
 * @return - CSO-255 NGK Improvements to Table service - PUCK system - 7861541
 * @author - Leandro Pereira
 * @since - NGK v5.0
 */
function PosNGKSetZoneNumberKVS(){
	var valueZoneNumberSelected  = sessionSale.get("ZoneValueSelected");

	if ( valueZoneNumberSelected <= 0)
		{
			return true;
		}
		
	if (typeof(PosSetTableServiceArea) == "function") 
	{
		PosSetTableServiceArea(valueZoneNumberSelected);
	}
	
	return true;
}


/**
 * CSO-255 NGK Improvements to Table service - PUCK system - 7861541
 * @brief Function to Build the main controls into puck Screen
 * @return - true if number is valid otherwise invalid number
 * @author - Leandro Pereira
 * @since - NGK V5.0
 * @modified - CSO-941 - [6.1.29-SP8][GQT][COE] Table service Clear choice - At kiosk instead of Cancel button it should display "Return to Menu" button.
 */
function PosNGKBuildControlTableServicePuckJS() {

	var title = lGetCSOUserInterfaceStringParameter("tableService.title", "CSO_MSG_TABLE_SERVICE_TITLE");
	// CSO-941 - [6.1.29-SP8][GQT][COE] Table service Clear choice - At kiosk instead of Cancel button it should display "Return to Menu" button.
	var noThanksConfig = lGetCSOUserInterfaceStringParameter("tableService.noThanksButton", "");	
	var cancelConfig = lGetCSOUserInterfaceStringParameter("tableService.cancelButton", "");
	
	// CSO-941 - [6.1.29-SP8][GQT][COE] Table service Clear choice - At kiosk instead of Cancel button it should display "Return to Menu" button.
	var noThanksButtonConfig = noThanksConfig.split(",");
	if (noThanksButtonConfig[0] == "") noThanksButtonConfig[0] = "CSO_MSG_TABLE_SERVICE_NO_THANKS_BUTTON";

	// CSO-941 - [6.1.29-SP8][GQT][COE] Table service Clear choice - At kiosk instead of Cancel button it should display "Return to Menu" button.
	var noThanksButton = noThanksButtonConfig[0] + ( noThanksButtonConfig[1] ? "," + noThanksButtonConfig[1] : ",GREEN" ) +
	                                               ( noThanksButtonConfig[2] ? "," + noThanksButtonConfig[2] : ",WHITE" ) +
	                                               ( noThanksButtonConfig[3] ? "," + noThanksButtonConfig[3] : ",WHITE" ) +
												   ( noThanksButtonConfig[4] ? "," + noThanksButtonConfig[4] : "," ) +
												   ( noThanksButtonConfig[5] ? "," + noThanksButtonConfig[5] : "," ) +
												   ( noThanksButtonConfig[6] ? "," + noThanksButtonConfig[6] : "EventLabelKey:"+ noThanksButtonConfig[0]);
	
	var titleConfig = title.split(",");
	
	//Added default value
	if (!titleConfig[0]) titleConfig[0] = "CSO_MSG_TABLE_SERVICE_TITLE";

	var headerImageServicePuck = lGetCSOUserInterfaceStringParameter("tableService.headerImage", "");
	var puckNumMaxDigits = lGetCSOUserInterfaceStringParameter("tableService.puck.maxDigits", 0);

	// CSO-941 - [6.1.29-SP8][GQT][COE] Table service Clear choice - At kiosk instead of Cancel button it should display "Return to Menu" button.
	var cancelButtonButtonConfig = cancelConfig.split(",");
	var result = undefined;
	if (!cancelButtonButtonConfig[0]) 
		result = PosShowNumericPad(titleConfig.join(","), "", puckNumMaxDigits,headerImageServicePuck, noThanksButton);
	else 
		result = PosShowNumericPad(titleConfig.join(","), "", puckNumMaxDigits,headerImageServicePuck, noThanksButton, cancelConfig);
	// CSO-1381 - POS-252 - NGK-Table Service Reporting
	if(result == "-3")
		PosNGKDismissTableServiceArea();
	
	return result;
}

/**
 * CSO-255 NGK Improvements to Table service - PUCK system - 7861541
 * @brief Function to ask which Zone should be used for the Table Service Puck
 * @return - true if a zone is selected, if the table service is not available or if it is not desired
 * @author - Leandro Pereira
 * @since - NGK V5.0
 */
function PosNGKAskTableServicePuckJS() {

	var selectedValue = null;
	var puckNumMaxValue = null;

	selectedValue = PosNGKBuildControlTableServicePuckJS();
	puckNumMaxValue = lGetCSOUserInterfaceStringParameter("tableService.puck.maxNumberValue", "");

		if ( puckNumMaxValue != "" && (parseInt(selectedValue) > parseInt(puckNumMaxValue)) )
		{
			var result = PosCSOSendSyncMessageJS(
				"DLG_NGK_SIMPLE_MSG", 
				new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"), 
				["true", "false"], 
				PosCSOI18nGetMessageJS("CSO_INVALID_NUMBER_TABLE_SERVICE_PUCK") + "|ScreenNameKey:CSO_INVALID_NUMBER_TABLE_SERVICE_PUCK");
				
			//SDO-10777 - NGK 5.10 - Timeout on PUCK warning screen does not cancel the order when the customer chooses not to continue
			if (result === null){
				return false;
			}
			PosNGKAskTableServicePuckJS();
		}
		else
		{
			//SDO-11057 - PUCK is being displayed as -3 on the NGK order number screen
			if (parseInt(selectedValue) >= 0)
			{
				//CSO-378 - NGK 5.10 - The word 'puck' at the end of the kiosk order for table locator is not configurable - EQA-1995
				var puckText = "Puck " + selectedValue;
				if (PosCSOI18nGetMessageJS("CSO_MSG_TABLE_SERVICE_PUCK") != "CSO_MSG_TABLE_SERVICE_PUCK")
				{
					puckText = PosCSOI18nGetMessageJS("CSO_MSG_TABLE_SERVICE_PUCK", selectedValue);
				}
				PosSetSessionProperty("NGK_TABLE_SERVICE_SELECTED_ZONE", puckText);
			}
			//CSO-771 - TSS NP6.1.28 NGK 5.14.35.501 - When a customer places an ‘eat in’ order and then opts out of adding tag ID by selecting ‘No Thanks’, the order gets last recorded Tag ID number added to it on FC expo. 
			sessionSale.set("ZoneValueSelected", selectedValue);			
		}
	
	// SQC-6783 - NGK 5.10 - Button cancel in the NIF screen stopped working
	//In case of timeout or cancel
	if ((selectedValue == null) ||
		(selectedValue == "") ||
		(selectedValue == "-1") ||
		(selectedValue == "-2"))
	{
		return false;
	}
	
	// SQC-6783 - NGK 5.10 - Button cancel in the NIF screen stopped working
	//In case of NoThanks
	if (selectedValue == "-3")
	{
		return true;
	}
	
	return (true)
}

/**
 * @brief Function to ask which Zone should be used for the Table Service
 * @return - false if canceled, true if a zone is selected, if the table service is not available or if it is not desired
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKAskTableServiceJS() {
	// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	var enableMap = lGetCSOUserInterfaceStringParameter("tableService.enableMap", "true") == "true";
	
	//Try to get the customized floor plan for this Kiosk. If it fails, try to get the default value for the current language
	var layoutPrefix = lGetCSOUserInterfaceStringParameter("tableService.floorPlanPrefix", null);
	var layoutImage = null;
	
	if (layoutPrefix != null && enableMap)
	{
		layoutImage = PosNGKGetLocalizedImageFromStoreDB(layoutPrefix + PosNGKGetPosId());
		if (layoutImage == null)
		{
			layoutImage = PosNGKGetLocalizedImageFromStoreDB(layoutPrefix);
		}
	}
	
	var zones = lGetCSOUserInterfaceStringParameter("tableService.zoneDefinitions", null);
	
	//CSO-60 - NGK v5.3 - Table Service Support Until 8 Zones - 7208944
	//Added default values
	var title = lGetCSOUserInterfaceStringParameter("tableService.title", "CSO_MSG_TABLE_SERVICE_TITLE");
	var noThanksButton = lGetCSOUserInterfaceStringParameter("tableService.noThanksButton", "CSO_MSG_TABLE_SERVICE_NO_THANKS_BUTTON");
	var cancelButton = lGetCSOUserInterfaceStringParameter("tableService.cancelButton", "CSO_MSG_TABLE_SERVICE_CANCEL_BUTTON");
	
	if ((enableMap && layoutImage == null) || (zones == null))
	{
		API.dbg("PosNGKAskTableServiceJS: missing configuration");
		return true;
	}
	
	var titleConfig = title.split(",");
	var zonesConfig = zones.split("|");
	
	var noThanksButtonConfig = noThanksButton.split(",");
	var cancelButtonConfig = cancelButton.split(",");
	
	//CSO-60 - NGK v5.3 - Table Service Support Until 8 Zones - 7208944
	//Added default value
	if (!titleConfig[0]) titleConfig[0] = "CSO_MSG_TABLE_SERVICE_TITLE";
	
	// NPS-14854 - Kiosk analytics
	if(!titleConfig[5]) titleConfig[5] = "ScreenNameKey:CSO_ANALYTICS_TABLE_SERVICE_SCREEN_NAME";
	
	var titleArray = new Array();
	// NPS-14854 - Kiosk analytics
	titleArray.push(new Array(PosCSOI18nGetMessageJS(titleConfig[0]), titleConfig[1], titleConfig[2], titleConfig[3], (layoutImage != null ? layoutImage : ""), titleConfig[5]));
	
	var buttonsArray = new Array();
	
	for (var i = 0; i < zonesConfig.length; i++)
	{
		//CSO-60 - NGK v5.3 - Table Service Support Until 8 Zones - 7208944
		//Added default values
		var singleZoneConfig = zonesConfig[i].split(",");
		if (!singleZoneConfig[0]) singleZoneConfig[0] = "CSO_MSG_TABLE_SERVICE_ZONE";
		//SQC-5201 - NGK v5.3 - Table Service Support default button and text colors are different from the specification
		if (!singleZoneConfig[1] || !csoColorInfo[singleZoneConfig[1]]) singleZoneConfig[1] = "WHITE";
		if (!singleZoneConfig[2] || !csoColorInfo[singleZoneConfig[2]]) singleZoneConfig[2] = "DARKGRAY";
		var singleZoneEnable = lGetCSOUserInterfaceStringParameter("tableService.enable.zone" + (i + 1).toString(), "true");
		
		// NPS-14854 - Kiosk analytics
		if(!singleZoneConfig[6]) singleZoneConfig[6]="EventLabelKey:" + singleZoneConfig[0];
		// NPS-14854 - Kiosk analytics
		buttonsArray.push(new Array(PosCSOI18nGetMessageJS(singleZoneConfig[0]), singleZoneConfig[1], singleZoneConfig[2], singleZoneConfig[3], singleZoneEnable, singleZoneConfig[5], singleZoneConfig[6]));
	}
	
	//CSO-60 - NGK v5.3 - Table Service Support Until 8 Zones - 7208944
	//Added default values
	if (!noThanksButtonConfig[0]) noThanksButtonConfig[0] = "CSO_MSG_TABLE_SERVICE_NO_THANKS_BUTTON";
	if (!cancelButtonConfig[0]) cancelButtonConfig[0] = "CSO_MSG_TABLE_SERVICE_CANCEL_BUTTON";
	
	// NPS-14854 - Kiosk analytics
	buttonsArray.push(new Array(PosCSOI18nGetMessageJS(noThanksButtonConfig[0]), noThanksButtonConfig[1], noThanksButtonConfig[2], noThanksButtonConfig[3], noThanksButtonConfig[4], noThanksButtonConfig[5], noThanksButtonConfig[6]));
	buttonsArray.push(new Array(PosCSOI18nGetMessageJS(cancelButtonConfig[0]), cancelButtonConfig[1], cancelButtonConfig[2], cancelButtonConfig[3], cancelButtonConfig[4], cancelButtonConfig[5], cancelButtonConfig[6]));
	
	var valuesArray = new Array();
	
	//The zone Id starts at 1.
	for (var i = 1; i <= zonesConfig.length; i++)
	{
		valuesArray.push(i.toString());
	}
	
	//Add "no thanks" and "cancel" as well
	valuesArray.push("NOTHANKS");
	valuesArray.push("CANCEL");
	
	var selectedValue = PosNGKSendSyncPickImageJS("DLG_ASK_TABLE_SERVICE", buttonsArray, valuesArray, titleArray);
	
	//CSO-255 NGK Improvements to Table service - PUCK system - 7861541
	sessionSale.set("ZoneValueSelected", selectedValue);
	
	//In case of timeout or cancel
	if ((selectedValue == null) || (selectedValue == "CANCEL"))
	{
		return false;
	}
	
	//In case of NoThanks
	if (selectedValue == "NOTHANKS")
	{
		//CSO-1381 - POS-252 - NGK-Table Service Reporting
		PosNGKDismissTableServiceArea();
		return true;
	}
	
	
	var singleZoneConfig = zonesConfig[selectedValue - 1].split(",");
	if (!singleZoneConfig[0]) singleZoneConfig[0] = "CSO_MSG_TABLE_SERVICE_ZONE";
	
	PosSetSessionProperty("NGK_TABLE_SERVICE_SELECTED_ZONE", PosCSOI18nGetMessageJS(singleZoneConfig[0]));
	
	return true;
	
}

/**
 * @brief Function to display a pop-up message asking the customer if the payment will be at the counter or in the kiosk.
 *        The title and the buttons must be specified in the format: 'I18N_KEY|COLOR|COLOR|COLOR|image.png'.
 *
 * @param screen - title and screen config
 * @param optionTrue - option true config
 * @param optionFalse - option false config
 * @param optionCancel - option cancel config
 * @return - option selected
 * @author - Kalil Garcia
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKAskToPayAtCounterJS(screen, optionTrue, optionFalse, optionCancel) {

	var screenConfig = screen.split("|");
	var optionTrueConfig = optionTrue.split("|");
	var optionFalseConfig = optionFalse.split("|");
	
	var optionCancelConfig = null;

	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	if ((optionCancel != null)&&(optionCancel != ""))
	{
		var optionCancelConfig = optionCancel.split("|");
	}
											  
	var screenArray = new Array();
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	// NPS-14854 - Kiosk analytics
	screenArray.push(new Array(PosCSOI18nGetMessageJS(screenConfig[0]), screenConfig[1], screenConfig[2], screenConfig[3], PosNGKGetLocalizedImageFromStoreDB(screenConfig[4]), screenConfig[5]));
	
	var optionArray = new Array();
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	// NPS-14854 - Kiosk analytics
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionTrueConfig[0]), optionTrueConfig[1], optionTrueConfig[2], optionTrueConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionTrueConfig[4]), optionTrueConfig[5], optionTrueConfig[6]));
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionFalseConfig[0]), optionFalseConfig[1], optionFalseConfig[2], optionFalseConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionFalseConfig[4]), optionFalseConfig[5], optionFalseConfig[6]));
	
	var result;
	
	if (optionCancelConfig != null)
	{
		// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
		// NPS-14854 - Kiosk analytics
		optionArray.push(new Array(PosCSOI18nGetMessageJS(optionCancelConfig[0]), optionCancelConfig[1], optionCancelConfig[2], optionCancelConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionCancelConfig[4]), optionCancelConfig[5], optionCancelConfig[6]));
		
		result = PosNGKSendSyncPickImageJS("DLG_ASK_FORWARD_ORDER_TO_FC", optionArray,
											new Array("true", "false", "cancel"), screenArray);
	}
	else
	{
		result = PosNGKSendSyncPickImageJS("DLG_ASK_FORWARD_ORDER_TO_FC", optionArray,
											new Array("true", "false"), screenArray);
	}
	
	sessionSale.set("NGK_CANCEL", "false");
	
	if (result == "true")
	{
		return true;
	}
	else if (result == "false")
	{
		return false;
	}
	else
	{
		sessionSale.set("NGK_CANCEL", "true");
		return false;
	}
	
	return false;
}

/**
 * @brief Function to display a pop-up message asking the customer if the sale type is Eat In or Take Out.
 *        The title and the buttons must be specified in the format: 'I18N_KEY|COLOR|COLOR|COLOR|image.png'.
 * @param screen - title and screen config
 * @param optionTrue - Eat In config
 * @param optionFalse - Take Out config
 * @param optionCancel - Option cancel config
 * @return - option selected
 * @author - Kalil Garcia / Vladimir Dobroff
 * @since - NGK v5.9.1 - CSO-233 - To implement a feature that will allow a Franchisee at the store to configure a `Take Out` only window of time in the late night hours. - 6998530
 * @altered - CSO-745 - POS-340 - Order Basket Redesign - Adjust for Eating Location - CSO-376
 */
function PosNGKAskSaleTypeJS(screen, optionTrue, optionFalse, optionCancel)
{
	var screenConfig = screen.split("|");
	var optionTrueConfig = optionTrue.split("|");
	var optionFalseConfig = optionFalse.split("|");
	
	if(!screenConfig[5])
		screenConfig[5] = 'ScreenNameKey:CSO_ANALYTICS_EATING_LOCATION_SCREEN_NAME';
	// CSD-47 - Ungated Scan - scan on all screens
	if(!screenConfig[6]) {
		API.dbg("[PosNGKAskSaleTypeJS] screenConfig[6] ["+screenConfig[6]+"] overwritten");
	}
	screenConfig[6] = 'UngatedScanMsgKey:CSO_UNGATED_POPUP_ERROR_TEXT';
		
	if(!optionTrueConfig[6])
		optionTrueConfig[6] = 'EventLabelKey:' + optionTrueConfig[0];

	if(!optionFalseConfig[6])
		optionFalseConfig[6] = 'EventLabelKey:' + optionFalseConfig[0];

	var optionCancelConfig = null;

	sessionSale.set("NGK_CANCEL", "false");
	
	if (sessionSale.get("CSO_EAT_IN_ENABLED_LOCAL") == "false")
	{
		//Do not show the sale type selection screen
		//The sale type will be Take Out
		return false;
	}
	
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	if ((optionCancel != null) && (optionCancel != ""))
	{
		var optionCancelConfig = optionCancel.split("|");
		if(!optionCancelConfig[6])
			optionCancelConfig[6] = 'EventLabelKey:' + optionCancelConfig[0];
	}
	
	// CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
	var enableSaleTypeValidation = lGetCSOUserInterfaceStringParameter("product.enableSaleTypeValidation", "false");
	if (enableSaleTypeValidation == "true")
	{
		var cartTotal = getCartTotal();
		sessionSale.set("CART_TOTAL", lFormatPrice(cartTotal));
	}
	
	var screenArray = new Array();
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	// NPS-14854 - Kiosk analytics

	screenArray.push(new Array(PosCSOI18nGetMessageJS(screenConfig[0]), screenConfig[1], screenConfig[2], screenConfig[3], PosNGKGetLocalizedImageFromStoreDB(screenConfig[4]), screenConfig[5], screenConfig[6]));
	
	var optionArray = new Array();
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	// NPS-14854 - Kiosk analytics
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionTrueConfig[0]), optionTrueConfig[1], optionTrueConfig[2], optionTrueConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionTrueConfig[4]), optionTrueConfig[5], optionTrueConfig[6]));
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionFalseConfig[0]), optionFalseConfig[1], optionFalseConfig[2], optionFalseConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionFalseConfig[4]), optionFalseConfig[5], optionFalseConfig[6]));
	
	var result;
	
	if (optionCancelConfig != null)
	{
		// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
		// NPS-14854 - Kiosk analytics
		optionArray.push(new Array(PosCSOI18nGetMessageJS(optionCancelConfig[0]), optionCancelConfig[1], optionCancelConfig[2], optionCancelConfig[3], PosNGKGetLocalizedImageFromStoreDB(optionCancelConfig[4]), optionCancelConfig[5], optionCancelConfig[6]));
		
		result = PosNGKSendSyncPickImageJS("DLG_ASK_FORWARD_ORDER_TO_FC", optionArray,
											new Array("true", "false", "cancel"), screenArray);
	}
	else
	{
		result = PosNGKSendSyncPickImageJS("DLG_ASK_FORWARD_ORDER_TO_FC", optionArray,
											new Array("true", "false"), screenArray);
	}
	
	if (result == "true")
	{
		sessionSale.set("SALETYPEDEFINED", true);
		return true;
	}
	else if (result == "false")
	{
		sessionSale.set("SALETYPEDEFINED", true);
		return false;
	}
	else
	{
		sessionSale.set("NGK_CANCEL", "true");
		return false;
	}
	
	return false;
}

/**
 * @brief Function to display a pop-up message asking the customer if the payment will be at the counter or in the kiosk.
 *        The title and the buttons must be specified in the format: 'I18N_KEY|COLOR|COLOR|COLOR|image.png'.
 *		  Will set a session variable called NGK_ORDER_REROUTE with one of those values:
 *          - PAY_AT_COUNTER
 *          - PAY_HERE
 * @param screen - title and screen config
 * @param optionTrue - option true config
 * @param optionFalse - option false config
 * @param optionBack - option back config
 * @param optionPayMobile - option mobile config // CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
 * @param errorMsgKey - message to show if a barcode is scanned(optional)
 * @return - option selected
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 * @modified - NGK v5.9.1 - CSO-227 - GB - CR for All kiosk stores - DA - NGK - UK National Operations has requested the ability to put Pay Here first on NGK before Pay at Counter - 7728305
 */
function PosNGKAskToPayAtCounterAndStoreResult(screen, optionPayAtCounter, optionPayHere, optionBack, optionPayMobile, errorMsgKey) {

	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	if ((sessionSale.get("NGK_ORDER_REROUTE") == "PAY_HERE") || 
			(sessionSale.get("NGK_ORDER_REROUTE") == "PAY_AT_COUNTER") ||
			(sessionSale.get("NGK_ORDER_REROUTE") == "PAY_MOBILE")) {
		// payment type already selected
		API.dbg("Payment type already selected ["+sessionSale.get("NGK_ORDER_REROUTE")+"]");
		return true;
	}
	var screenConfig = screen.split("|");
	var optionPayAtCounterConfig = optionPayAtCounter.split("|");
	var optionPayHereConfig = optionPayHere.split("|");
	
	if(!screenConfig[5])
		screenConfig[5] = 'ScreenNameKey:CSO_ANALYTICS_PAYMENT_SELECTION_SCREEN_NAME';
	// CSD-47 - Ungated Scan - scan on all screens
	if(!screenConfig[6]) {
		API.dbg("[PosNGKAskToPayAtCounterAndStoreResult] screenConfig[6] ["+screenConfig[6]+"] overwritten");
	}

	screenConfig[6] = 'UngatedScanMsgKey:' + (errorMsgKey ? errorMsgKey : 'CSO_UNGATED_POPUP_ERROR_TEXT');

	if(!optionPayAtCounterConfig[6])
		optionPayAtCounterConfig[6] = 'EventLabelKey:' + optionPayAtCounterConfig[0];
	if(!optionPayHereConfig[6])
		optionPayHereConfig[6] = 'EventLabelKey:' + optionPayHereConfig[0];



	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	var optionMobileConfig = null;
	var isMobileEnabled = false;
	
	if ((sessionSale.get("NGK_MOA_PAYMENT") == "1") && (optionPayMobile != null) && (sessionSale.get("NGK_ORDER_REROUTE") != "PAY_MOBILE")) {
		optionMobileConfig = optionPayMobile.split("|");
		
		if(!optionMobileConfig[6])
			optionMobileConfig[6] = 'EventLabelKey:' + optionMobileConfig[0];
		
		if(optionMobileConfig != null) {
			isMobileEnabled = lGetCSOUserInterfaceStringParameter("enableRecallMobileOrders", "true").toLowerCase();
		}
	}
	
	var optionBackConfig = null;
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	if ((optionBack != null) && (optionBack != ""))
	{
		optionBackConfig = optionBack.split("|");
		if(!optionBackConfig[6])
			optionBackConfig[6] = 'EventLabelKey:' + optionBackConfig[0];
	}
	
    var isEnabled = lGetCSOUserInterfaceStringParameter("payAtCounter.enabled", "true").toLowerCase();
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	// CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
	if (((isEnabled != "true") && (isMobileEnabled != "true")) ||
			(PosNGKTestZeroTotal()))	// do not ask for payment type if zero total order 
	{
		// feature is not enabled, by default the customer must pay in the kiosk
		sessionSale.set("NGK_ORDER_REROUTE", "PAY_HERE");
		sessionSale.set("NGK_POPUP_RESULT", "PAY_HERE");
		return true;
	}
	
	var screenArray = new Array();
	screenArray.push(new Array(PosCSOI18nGetMessageJS(screenConfig[0]), screenConfig[1], screenConfig[2], screenConfig[3], PosNGKGetLocalizedImageFromStoreDB(screenConfig[4]), screenConfig[5], screenConfig[6]));
	
	var optionArray = new Array();
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	var payTypeArray = new Array();
	
	var paymentTypeOrder = lGetCSOUserInterfaceStringParameter("paymentTypeOrder", "PAY_MOBILE|PAY_AT_COUNTER|PAY_HERE").toUpperCase().split("|");
	if (paymentTypeOrder.indexOf("PAY_MOBILE") == -1) paymentTypeOrder.push("PAY_MOBILE");
	if (paymentTypeOrder.indexOf("PAY_AT_COUNTER") == -1) paymentTypeOrder.push("PAY_AT_COUNTER");
	if (paymentTypeOrder.indexOf("PAY_HERE") == -1) paymentTypeOrder.push("PAY_HERE");
	//If the array ended with more than 3 elements, the parameter is not configured correctly, so use the default value
	if (paymentTypeOrder.length > 3) paymentTypeOrder = ["PAY_MOBILE", "PAY_AT_COUNTER", "PAY_HERE"];
	
	for each (paymentType in paymentTypeOrder)
	{
		if (paymentType == "PAY_MOBILE")
		{
			// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
			// NPS-14854 - Kiosk analytics
			if (isMobileEnabled == "true")
			{
				optionArray.push(new Array(PosCSOI18nGetMessageJS(optionMobileConfig[0]),
																  optionMobileConfig[1],
																  optionMobileConfig[2],
																  optionMobileConfig[3],
																  PosNGKGetLocalizedImageFromStoreDB(optionMobileConfig[4]),
																  optionMobileConfig[5],
																  optionMobileConfig[6]
																  ));
				payTypeArray.push("PAY_MOBILE");
			}
		}
		else if (paymentType == "PAY_AT_COUNTER")
		{
			if (isEnabled == "true")
			{
				optionArray.push(new Array(PosCSOI18nGetMessageJS(optionPayAtCounterConfig[0]),
																  optionPayAtCounterConfig[1],
																  optionPayAtCounterConfig[2],
																  optionPayAtCounterConfig[3],
																  PosNGKGetLocalizedImageFromStoreDB(optionPayAtCounterConfig[4]),
																  optionPayAtCounterConfig[5],
																  optionPayAtCounterConfig[6]
																  ));
				// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
				payTypeArray.push("PAY_AT_COUNTER");
			}
		}
		else if (paymentType == "PAY_HERE")
		{
			optionArray.push(new Array(PosCSOI18nGetMessageJS(optionPayHereConfig[0]),
															  optionPayHereConfig[1],
															  optionPayHereConfig[2],
															  optionPayHereConfig[3],
															  PosNGKGetLocalizedImageFromStoreDB(optionPayHereConfig[4]),
															  optionPayHereConfig[5],
															  optionPayHereConfig[6]
															  ));
			payTypeArray.push("PAY_HERE");
		}
		else
		{
			API.dbg("NGK - PosNGKAskToPayAtCounterAndStoreResult: Invalid paymentType: " + paymentType);
		}
	}
	
	if (optionBackConfig != null)
	{
		optionArray.push(new Array(PosCSOI18nGetMessageJS(optionBackConfig[0]),
														  optionBackConfig[1],
														  optionBackConfig[2],
														  optionBackConfig[3],
														  PosNGKGetLocalizedImageFromStoreDB(optionBackConfig[4]),
														  optionBackConfig[5],
														  optionBackConfig[6]
														  ));
		payTypeArray.push("BACK");
	}
	
	var result;
	result = PosNGKSendSyncPickImageJS("DLG_ASK_FORWARD_ORDER_TO_FC", optionArray, payTypeArray, screenArray);
	
	if (result != null)
	{
		sessionSale.set("NGK_POPUP_RESULT", result);
	}
	else
	{
		sessionSale.set("NGK_POPUP_RESULT", "TIMEOUT");
	}
	
	if (result == "PAY_AT_COUNTER")
	{
		sessionSale.set("NGK_ORDER_REROUTE", "PAY_AT_COUNTER");
		return true;
	}
	else if (result == "PAY_HERE")	// if payAtCounter.enabled is false, it should never return "PAY_HERE"
	{
		sessionSale.set("NGK_ORDER_REROUTE", "PAY_HERE");
		return true;
	}
	else if (result == "PAY_MOBILE") // CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	{
		sessionSale.set("NGK_ORDER_REROUTE", "PAY_MOBILE");
		return true;
	}
	else if (result == "BACK")
	{
		return true;
	}
	return false;
}

/**
 * @brief Function to display a balloon message. Based on PosCSOShowBalloonMessageJS
 *
 * @param text - message title
 * @param optionTrue - button's text
 * @param optionFalse - button's text
 * @return - option selected
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
 function PosNGKAskOrderCancellationConfirmationJS(screen, optionFalse, optionTrue) {

	var screenConfig = screen.split("|");
	var optionFalseConfig = optionFalse.split("|");
	var optionTrueConfig = optionTrue.split("|");

	// NPS-14854 - Kiosk analytics
	if(!screenConfig[5])	
		screenConfig[5] = "ScreenNameKey:CSO_ANALYTICS_CANCEL_ORDER_SCREEN_NAME";
	if(!optionFalseConfig[6])
		optionFalseConfig[6] = "EventLabelKey:CSO_ANALYTICS_CANCEL_ORDER_BTN_NO_EVT_LABEL,TranslateEventLabel:1";
	if(!optionTrueConfig[6])
		optionTrueConfig[6] = "EventLabelKey:CSO_ANALYTICS_CANCEL_ORDER_BTN_YES_EVT_LABEL,OrderPaymentStatus:3,TranslateEventLabel:1,Session:End"
										  
	var screenArray = new Array();
	// NPS-14854 - Kiosk analytics	
	screenArray.push(new Array(PosCSOI18nGetMessageJS(screenConfig[0]), screenConfig[1], screenConfig[2], screenConfig[3], screenConfig[4], screenConfig[5]));
	
	var optionArray = new Array();
	// NPS-14854 - Kiosk analytics
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionFalseConfig[0]), optionFalseConfig[1], optionFalseConfig[2], optionFalseConfig[3], optionFalseConfig[4], optionFalseConfig[5], optionFalseConfig[6]));
	optionArray.push(new Array(PosCSOI18nGetMessageJS(optionTrueConfig[0]), optionTrueConfig[1], optionTrueConfig[2], optionTrueConfig[3], optionTrueConfig[4], optionTrueConfig[5], optionTrueConfig[6]));
	
	var option=PosNGKSendSyncPickImageJS("DLG_ASK_ORDER_CANCELLATION_CONFIRMATION", optionArray,
		new Array("false", "true"), screenArray);
	if(null!=option) {
		return option == "true";
	}
	else {
		return option;
	}
}

/**
 * @brief Function to display a Eat Location question. Based on PosCSOAskSaleTypeJS
 * Note: The button background color, and the button background border will only be valid for image buttons.
 *
 * @param text - Eat location message
 * @param textIn - "Eat in" text
 * @param textOut - "Take out" text
 * @param isBalloon (optional) - if use balloon dialog
 * @return - true
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 * @remarks
 * This BC uses the following parameters for images in the Eat In or Take Out buttons and for background and border collor:
 * 		<Configuration type="POS">
 *			<Section name="CSO.UserInterface">
 *				<Parameter name="eatInImage value="image1_name.png""/>
 *				<Parameter name="takeOutImage" value="image2_name.png"/>
 *				<Parameter name="saleTypeButtonBackgroundColor" value="RED"/>
 *				<Parameter name="saleTypeButtonBackgroundBorder" value="GREY"/>
 *			</Section>
 *		</Configuration>
 *
 */
function PosNGKAskOrderSaleTypeJS(screen, textIn, textOut) {

	var result;
	
	var screenConfig = screen.split("|");
											  
	var screenArray = new Array();
	screenArray.push(new Array(PosCSOI18nGetMessageJS(screenConfig[0]), screenConfig[1], screenConfig[2], screenConfig[3], screenConfig[4]));
	
	var textInConfig = textIn.split("|");
	var textOutConfig = textOut.split("|");
	
	var imageIn = lGetParameterStr("eatInImage", "mcd.png");
	var imageOut = lGetParameterStr("takeOutImage", "mcd.png");
	
	var optionArray = new Array();
	optionArray.push(new Array(PosCSOI18nGetMessageJS(textInConfig[0]), textInConfig[1], textInConfig[2], textInConfig[3], imageIn));
	optionArray.push(new Array(PosCSOI18nGetMessageJS(textOutConfig[0]), textOutConfig[1], textOutConfig[2], textOutConfig[3], imageOut));
	
	//var buttonBackgroundColor = lGetParameterStr("saleTypeButtonBackgroundColor", "");
	//var buttonBackgroundBorder = lGetParameterStr("saleTypeButtonBackgroundBorder", "");
	
	//result = PosCSOAskSimpleWithImagesJS(text, textIn, imageIn, textOut, imageOut, buttonBackgroundColor, buttonBackgroundBorder);
		
	result = PosNGKSendSyncPickImageJS("DLG_ASK_ORDER_SALE_TYPE", optionArray,
			new Array("true", "false"), screenArray) == "true";
		

	PosSendUICmd('<Event type="ASYNC" name="DAT_SYS_REMOVE_BLOCK_LAYER"/>');
	
	var eatInOnlyMessage = PosCSOI18nGetMessageJS("CSO_MSG_EATIN_ONLY");
	var takeOutOnlyMessage = PosCSOI18nGetMessageJS("CSO_MSG_TAKEOUT_ONLY");
	
	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_HIDE_PRODUCTS_BY_SALETYPE"/>');
	var saleTypeXml = new XML('<SaleType />');
	
	if (result) {
		saleTypeXml.@selectedType = "EATIN";
		
		if (takeOutOnlyMessage != "CSO_MSG_TAKEOUT_ONLY") {
			saleTypeXml.@notAvailableMessage = takeOutOnlyMessage;
		}
	} else {
		saleTypeXml.@selectedType = "TAKEOUT";
		
		if (eatInOnlyMessage != "CSO_MSG_EATIN_ONLY") {
			saleTypeXml.@notAvailableMessage = eatInOnlyMessage;
		}
	}

	eventXml.appendChild(saleTypeXml);
	PosSendUICmd(eventXml.toXMLString());

	
	//type of sale (0=EAT IN;1=TAKE OUT;2=OTHER)
	if (result)
		PosSetSaleType(0);
	else
		PosSetSaleType(1);
		
	sessionSale.set("SALETYPEDEFINED", "true");
	
	return true;
}
 
/**
 *
 * @brief - Based on the WF_CSO_DoSale function. Try to perform a sale on the Kiosk. If the selected product has a size selection, a choice or both, start the option selection mode. Otherwise sell the product.
 * @param - productCode: the single product to be sale or the product and all it's options separated by pipes
 * @param - screenNumberSuggestiveSales: screen with the suggested items
 * @param - barcode: the bar code of the product
 * @param - forceHome: flag that indicates if it should force the return to the main screen at the end of sale // CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
 * @param - discountCoupon: flag that indicates that there is a discount to be applied after the sale
 * @param - rate: the discount rate to be applied
 * @param - isPromotionSale: If the product was sold by a promotion screen
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKOrderItemJS (productCode, screenNumberSuggestiveSales, barcode, forceHome, discountCoupon, rate, cytQrCodeIngredients, isPromotionSale) {
	var productCodeList = productCode.split("|");
	
	if (productCodeList.length == 0) {		
		API.dbg("NGK - PosNGKOrderItemJS: Invalid product code (productCode=[" + productCode + "])");
		return false;
	}
	
	// SQC-5970 - [BYB phase 1] - NGK takes about 15 seconds to add "4 BYB" in the cart
	//Remove aditional parameters from the first product code (example: "2040;DELIVERY_LATER")
	var code = productCodeList[0].split(";")[0]; // CSO-329 - Ability to Enter custom Names for CYT Items - 8031932

	// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
	code = code.split("@")[0];
	code = code.split(",")[0];
	
	//SDO-7747 - NGK stops working when trying to sell a product with no price configured
	//Check if the product code is valid
	if (!lIsProductValid(code) || !lIsProductPriceNodeValid(code))
	{		
		API.dbg("NGK - PosNGKOrderItemJS: Invalid product code (productCode=[" + productCodeList[0] + "])");
		return false;
	}
	
	// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
	// test the limit of monopoly items
	sessionSale.set("MONOPOLY_ERROR", "false");
	if(csoProductInfo[code].isMonopoly) {
		// count the promotions
		if(lCountPromotions()) {
			API.dbg("NGK - PosNGKOrderItemJS: promotions limit reached. Can't sell monopoly items");
			PosSetSessionProperty("MONOPOLY_ERROR", "true");
			return false;
		}
	}
	
	var orderSaleType = lGetOrderSaleType();
	var showUpliftPrices = (lGetCSOUserInterfaceStringParameter("showUpliftPrices", "false") == "true");
	
	// CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
	// var validSizeList = new Array();
	
	var showMealSizeSelectionAtTheEnd = (lGetCSOUserInterfaceStringParameter("showMealSizeSelectionAtTheEnd", "false") == "true");
	var deliveryLaterProductCode = lGetCSOUserInterfaceStringParameter("deliveryLaterProductCode", "");
	
	//Only generate the value meal xml if there is a single product in the array
	//Otherwise, assume that the product choices are already fulfilled and add them to the cart directly
	if ((productCodeList.length == 1) && (productCodeList[0].split(";").length == 1))
	{	
		//Additional conditions to generate the value meal xml instead of adding the item to the cart directly
		
		//if the store flag showMealSizeSelectionAtTheEnd is not set and the product have sizes or choices return a xml with all the possible options.
		var condition1 = (!showMealSizeSelectionAtTheEnd) &&
						 ((lGetNumberOfValidSizeSelections(code) > 1) || (lGetNumberOfChoices(code, 0, GLOBAL_NGK_MAX_RECURSION_LEVEL) > 0));
		
		//if the store flag showMealSizeSelectionAtTheEnd is set, only check if the product has choices.
		var condition2 = showMealSizeSelectionAtTheEnd && ((lGetNumberOfChoices(code, 0, GLOBAL_NGK_MAX_RECURSION_LEVEL) > 0) || (lGetIfAllLargerSizesAreOfTypeProduct(code)));
		
		// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
		var condition3=false;
		if (!csoProductInfo[code].isMonopoly) {
			//if there are suggested items
			condition3 = lHaveSuggestiveSales(screenNumberSuggestiveSales, code);
		}
		
		// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		// if there is a BYB product
		var condition4 = csoProductInfo[code].isBybProduct || csoProductInfo[code].isBybPreBuilt;

		//SQC-9021 [NGK 5.15 - PDP] Problems with "I have a coupon" flow
		var showVML = true;
		if (lIsPromotionalProduct(code,null) && isPromotionSale && showMealSizeSelectionAtTheEnd){
			if (lGetNumberOfChoices(code, 0, GLOBAL_NGK_MAX_RECURSION_LEVEL) == 0 || !(condition1 || condition2 || condition3 || condition4)){
				// Does not show only for promotion products, because of the sizes.
				showVML = false;
			}
		}
			
		//SQC-9021 [NGK 5.15 - PDP] Problems with "I have a coupon" flow
		if (showVML)
		{
			PosSetSessionProperty("HAS_SUGGESTIVE_SELLING", condition3.toString());

			var eventXml = new XML('<Event type="ASYNC" name="DLG_NGK_VML_SHOW_PRODUCTS"/>');
			var bybCodes = [];
			
			// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
			var customInfo="";
			var productConfig = productCodeList[0].split(";");
			var promoFlag = productConfig[0].split("@PROMO").length > 1;
			if (promoFlag)
			{
				var stringTemp = productConfig[0].split("@PROMO")[0];
				customInfo = (stringTemp.split("@").length > 1) ? stringTemp.split("@")[1] : "";
			}
			else
			{
				customInfo = (productConfig[0].split("@").length > 1) ? productConfig[0].split("@")[1] : "";
			}
			
			// SQC-9007 - [NGK 5.15 - PDP] - Single items with size selection configured where the size selection is a Value Meal should display the option "Make it a Meal" in the Product Detail Page
			var sizeSelectionXML = PosNGKGetValueMealXML(code, bybCodes, false, customInfo, false, "", "");
			if (sizeSelectionXML == null)
			{
				API.dbg("NGK - PosNGKOrderItemJS: Could not generate Size Selection XML for product code (productCode=[" + code + "])");
				return false;
			}
			
			lAddDeliveryLaterAtribute(sizeSelectionXML);
			eventXml.appendChild(sizeSelectionXML);
			
			// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
			if((!discountCoupon)&&(!csoProductInfo[code].isMonopoly)) {
				lGenerateSuggestiveSaleXML(screenNumberSuggestiveSales, eventXml, code);
			}

			// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
			var bybXML = lGenerateBYBXML(bybCodes);
			if (bybXML != null)
			{
				// CSO-327- CYT import via scanner - 8052105
				if (cytQrCodeIngredients != undefined || cytQrCodeIngredients != null || ltrim(rtrim(cytQrCodeIngredients)) != "") {
					bybXML = lAddCYTQrCodeIngredients(cytQrCodeIngredients, bybXML);
				}
				eventXml.appendChild(bybXML);
			}
			
			// CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
			lAddChoiceUpsellingPrice(eventXml);
			lReplaceSizePriceByCombinedPrice(eventXml);
			//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
			lAddSizeUpsellingPrice(eventXml);
			
			//CSO-36 - NGK v5.3 - Meal Loop Enhancements to Management/Display of Choices - 7160823
			var groupChoicesByFlavor = (lGetCSOUserInterfaceStringParameter("groupChoicesByFlavour", "false") == "true");
			if (groupChoicesByFlavor)
			{
				lAddFlavors(eventXml);
			}
			// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
			if(discountCoupon) {
				lAddDiscountByItem(eventXml, barcode, rate);
			}
			
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			// CSO-444 - Implement confirmation popup when adding allergic product to the cart
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
			if (selectedAllergensList.length > 0) {
				var allergensFound=[];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				lFindAllergens(allergensFound, code, selectedAllergensList, false, true, true);
				
				if (allergensFound.length > 0) {
					function lCheckUpsellLater(xmlEvent) {
						var checkUpsellLater = false;
					
						//SQC-9283 - [NGK5.15 - PDP] - The allergen alert does not work properly
						for each (var product in xmlEvent.Sizes.Product) {
							var sizeInfo = csoProductInfo[product.@code.toString()];
							if ((sizeInfo && (sizeInfo.hasComposition ||  sizeInfo.hasChoices)) ||
								(product.@isSelected == "true" && product.Choice.length() > 0)) {
								
								checkUpsellLater = true; 
								
								break;
							}
						}
						
						//CSO-845 - NGK 5.15.1 - Allergen Alerts are displayed twice instead of once when a product with an allergen is selected
						if (!showMealSizeSelectionAtTheEnd) {
							checkUpsellLater = false;
						}
						
						return checkUpsellLater;
					}
					
					if (eventXml.BYB.length() == 0 && (eventXml.Sizes.Product.length() == 1 || lCheckUpsellLater(eventXml))) {
						var allergenAccepted = PosNGKShowAllergenAlertCartConfirmationJS();
						if (!allergenAccepted) return true;
					}
				}
			}
						
			return PosSendUICmd(eventXml.toXMLString());
		}		
		
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		// CSO-444 - Implement confirmation popup when adding allergic product to the cart
		var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
		if (selectedAllergensList.length > 0) {
			for (var i = 0; i < productCodeList.length; i++) {
				var productCode = productCodeList[i].split(";")[0].split(",")[0];
				var allergensFound=[];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				lFindAllergens(allergensFound, productCode, selectedAllergensList, false, true, true);
				
				if (allergensFound.length > 0) {
					var allergenAccepted = PosNGKShowAllergenAlertCartConfirmationJS();
					if (!allergenAccepted) return true;
					break;
				}
			}
		}
			
		//Before selling, we need to verify if there is an alcoholic beverage
		for (var i = 0; i < productCodeList.length; i++)
		{
			var aux = productCodeList[i].split(";");
			
			// SQC-5970 - [BYB phase 1] - NGK takes about 15 seconds to add "4 BYB" in the cart
			var productInfo = csoProductInfo[aux[0].split(",")[0]];
			//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			if (productInfo != undefined && productInfo.requireLegalDisclaimer) {
				//We need to show the legal disclaimer
				// CSO-142 - Legal-Disclaimer by language - CR updated - 7423781
				// SQC-6327 - NGK 5.9 - Legal Disclaimer i18n messages are not being shown for single products
				var result = (PosCSOSendSyncMessageJS(
					"SYNC_LEGAL_DISCLAIMER_DLG",
					new Array(
						PosCSOI18nGetMessageJS("CSO_LOCALPROMO_LEGAL_ADULT"),
						PosCSOI18nGetMessageJS("CSO_LOCALPROMO_LEGAL_CHILD")
					),
					new Array(
						"true",
						"false"
					),
					"") === "true");
				
				if (!result)
				{
					// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
					var origin = sessionSale.get ('NGK_MONOPOLY_UNGATED_ORIGIN');
					PosSetSessionProperty ("NGK_MONOPOLY_UNGATED_ORIGIN", "");
					if(origin =="REVIEW") {
						PosNGKEnqueueWFJS(SHARED_CTX["KEY_WF_NGK_FINAL_SHOW_ORDER_REVIEW"]);
					}
					
					// CSD-51 - FR3 - Scanning and processing a barcode immediately
					var ungatedReturnScreen=sessionSale.get ('NGK_UNGATED_SCAN_RETURN_SCREEN');
					API.dbg("[UNGATED]PosNGKOrderItemJS ungatedReturnScreen["+ungatedReturnScreen+"]");
					if (('MAIN' == ungatedReturnScreen) ||
						('REVIEW' == ungatedReturnScreen)) {
						lGoToMainScreen(true);
					}
					else {
						// CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
						if('true'==forceHome) 
						{
							PosNGKShowMainScreen();
						}
					}
					return false;
				}
			}
		}
	}
	
	return true;
		
	// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
	/**
	 * @brief - Adds the discount later attribute.
	 * @param - eventXml: the last step of the value meal xml with all the possible products
	 * @param - rate: the discount rate to be applied
	 * @author - Mauricio Yokomizo
	 */
	function lAddDiscountByItem(eventXml, barcode, rate)
	{
		var discountXml = new XML('<DiscountByItem/>');
		discountXml.@barcode = barcode;
		discountXml.@rate = rate;
		
		eventXml.appendChild(discountXml);
	}
	
	/**
	 * @brief - Return if all the larger sizes are of type product, ignoring items with showDimensionToCustomer == false.
	 * @param - code: the product code (if not of type "PRODUCT" will return false)
	 * @param - bAutoEVM: auto EVM mode (CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM))
	 * @return - false - If no larger size is found.
	 *           false - If there are larger sizes, but at least one of them is not of type "PRODUCT".
	 *           true - If there are larger sizes and all of them are of type "PRODUCT".
	 * @author - Vladimir Dobroff
	 */
	function lGetIfAllLargerSizesAreOfTypeProduct(code, bAutoEVM)
	{
		if (!lIsProductValid(code.toString()))
		{
			return false;
		}
		
		var productXmlNode = csoProductInfo[code.toString()].xmlNode;
		
		if (productXmlNode.@productClass != "PRODUCT")
		{
			return false;
		}
		
		var allLargerSizesAreOfTypeProduct = false;

		for each (sizeOption in productXmlNode.SizeSelection.Size)
		{
			var showDimension = sizeOption.@showDimensionToCustomer;
			if (showDimension != "false")
			{
				//SDO-7747 - NGK stops working when trying to sell a product with no price configured
				if (lIsProductValid(sizeOption.@code) && lIsProductPriceNodeValid(sizeOption.@code))
				{
					//Don't check the base product
					if (sizeOption.@code.toString() != code.toString())
					{
						// CSO-455 - dimension pop-up price controls
						// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
						if (lCheckProductSize(sizeOption.@code, code, bAutoEVM) == "Larger" ||
							lCheckProductSize(sizeOption.@code, code, bAutoEVM) == "Equal" ||
							lCheckProductSize(sizeOption.@code, code, bAutoEVM) == "Ignore")
						{
							var sizeProduct = csoProductInfo[sizeOption.@code].xmlNode;
						
							if (sizeProduct.@productClass != "PRODUCT")
							{
								allLargerSizesAreOfTypeProduct = false;
								break;
							}
							else
							{
								allLargerSizesAreOfTypeProduct = true;
							}
						}
					}
				}
			}
		}
		
		return allLargerSizesAreOfTypeProduct;
	}
			
	/**
	 * @brief - Get the number of choices of a product
	 * @param - code: the product code
	 * @author - Vladimir Dobroff
	 */
	function lGetNumberOfChoices(code, currentRecursionDepth, maxRecursionDepth)
	{
		if(!lIsProductValid(code.toString()))
		{
			return 0;
		}
	
		var configProduct = csoProductInfo[code.toString()].xmlNode;
		
		var num = 0;
		
		for each (var component in configProduct.Choices.Component)
		{
			//SDO-7747 - NGK stops working when trying to sell a product with no price configured
			//Cannot check the price node here, since empty prices are valid for abstract choices
			//In this case only check if the product code is valid
			if (lIsProductValid(component.ProductCode))
			{
				num++;
			}
		}
		
		if (currentRecursionDepth < maxRecursionDepth)
		{		
			for each (var component in configProduct.Composition.Component)
			{
				num += lGetNumberOfChoices(component.ProductCode, currentRecursionDepth + 1, maxRecursionDepth);
			}
		}
	
		return num;
	}	
	
	/**
	 * @brief - Generates the sixth part of the xml that describes all the product options. In this case, includes only the suggested items.
	 * @param - screenCode: the screen code
	 * @param - parentXMLNode: xml node where the new structure will be attached
	 * @author - Vladimir Dobroff
	 */	
	function lGenerateSuggestiveSaleXML(screenCode, parentXMLNode, saleProductCode)
	{
		var suggestedCodes = new Array();
		var suggestiveSaleXml = new XML("<SuggestiveSales />");
		
		var haveSuggestedItems = false;
		var language = sessionSale.get("LANGUAGE");
		
		if (screenCode != null && PosNGKIsScreenValid(screenCode))
		{
			var screenXmlNode = lGetScreenXmlNode(screenCode);
			
			if (screenXmlNode == null)
			{
				API.dbg("NGK - PosNGKOrderItemJS.lGenerateSuggestiveSaleXML - Screen does not exist - ScreenCode:" + screenCode);
			}
			else
			{
				var ButtonParameters = screenXmlNode.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
				
				if (ButtonParameters != null)
				{
					// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
					var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");

					for each (buttonParameter in ButtonParameters)
					{
						var productCode = buttonParameter.@value;
						
						//SDO-7747 - NGK stops working when trying to sell a product with no price configured
						if (lIsProductValid(productCode) && lIsProductPriceNodeValid(productCode) && suggestedCodes.indexOf(productCode) == -1)
						{
							var productInfo = csoProductInfo[productCode.toString()]
							
							// SDO-11589 - NP6 1.23 MR2 Release V4.1[NGK V5.10 QR5]:NGK freezes when suggestive selling is enabled throwing a script error on the NGK screen.
							if (productInfo != null && productInfo.isValid
								&& (IsProductOfPointOfDistribution(productInfo, "FRONT_COUNTER")
								|| IsProductOfPointOfDistribution(productInfo, "MCCAFE") && ProductCanBeOrderedInPointOfDistribution("MCCAFE")
								|| IsProductOfPointOfDistribution(productInfo, "MCSALAD") && ProductCanBeOrderedInPointOfDistribution("MCSALAD")))
							{
								//CSO-732 - POS-407 - Suggestive Selling with choices and size selection
								var bybCodes = [];
								var suggestiveSizesXML = PosNGKGetValueMealXML(productCode, bybCodes, false, "", false, "", "");
								suggestiveSizesXML.@suggestiveCode = productCode;
								lAddDeliveryLaterAtribute(suggestiveSizesXML);
								
								suggestiveSaleXml.appendChild(suggestiveSizesXML);
								haveSuggestedItems = true;
							}
							else
							{
								API.dbg("NGK - PosNGKOrderItemJS.lGenerateSuggestiveSaleXML - Product does not exist or is not avaialble - ProductCode:" + productCode);
							}
						}
					}
				}
			}
		}
		
		// CSO-72 - NGK may display a script error during the value meal loop if a size entry doesn't have a code attribute
		var entry = "";
		for each (var size in csoProductInfo[saleProductCode].xmlNode.SizeSelection.Size)
		{
			if (size.@code.toString() == saleProductCode)
			{
				entry = size.@entry.toString();
				break;
			}
		}
		var saleType = hlp.getSaleType();
		
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
		
		for each (sp in csoSuggestivePromotions)
		{
			var validProducts = lGetValidProducts(sp, entry, saleType);
			if (validProducts.length > 0)
			{
				API.dbg("NGK - PosNGKOrderItemJS.lGenerateSuggestiveSaleXML - valid products found:" + validProducts.toString());

				for each (var productCode in validProducts)
				{
					//SDO-7747 - NGK stops working when trying to sell a product with no price configured
					if (lIsProductValid(productCode) && lIsProductPriceNodeValid(productCode) && suggestedCodes.indexOf(productCode) == -1)
					{
						var productInfo = csoProductInfo[productCode];
						
						// SDO-11589 - NP6 1.23 MR2 Release V4.1[NGK V5.10 QR5]:NGK freezes when suggestive selling is enabled throwing a script error on the NGK screen.
						if (productInfo != null && productInfo.isValid
							&& (IsProductOfPointOfDistribution(productInfo, "FRONT_COUNTER")
							|| IsProductOfPointOfDistribution(productInfo, "MCCAFE") && ProductCanBeOrderedInPointOfDistribution("MCCAFE")
							|| IsProductOfPointOfDistribution(productInfo, "MCSALAD") && ProductCanBeOrderedInPointOfDistribution("MCSALAD")))
						{
							// NPS-15090 - Suggestive sell does not activate choice loop for upsell items - ACSI2492737
							if (!lIsProductSuggestible(productInfo)){
								PosCSOLog(CSOLOG_INFORMATION, 18435, "NGK - PosNGKOrderItemJS.lGenerateSuggestiveSaleXML - The product " + productCode + " cannot be used for suggested sale because it is invalid or contain choices.");
								continue;
							}
							
							//CSO-732 - POS-407 - Suggestive Selling with choices and size selection
							var bybCodes = [];
							var suggestiveSizesXML = PosNGKGetValueMealXML(productCode, bybCodes, false, "", false, "", "");
							suggestiveSizesXML.@suggestiveCode = productCode;
							lAddDeliveryLaterAtribute(suggestiveSizesXML);
							
							suggestiveSaleXml.appendChild(suggestiveSizesXML);
							haveSuggestedItems = true;
						}
						else
						{
							API.dbg("NGK - PosNGKOrderItemJS.lGenerateSuggestiveSaleXML - Product does not exist or is not avaialble - ProductCode:" + productCode);
						}
					}
				}
			}
		}
		
		if (haveSuggestedItems)
		{
			parentXMLNode.appendChild(suggestiveSaleXml);
		}
	}
	
	function lCreateCompositionSuggestiveSellingXML(productSuggestiveSellingXML, product, costIncluded, isMain)
	{
		var componentsCostIncluded = false;
		
		for each (var componentXML in product.xmlNode.Composition.Component)
		{
			var componentCode = componentXML.ProductCode.toString();
		
			componentsCostIncluded = costIncluded || lIsCompositionComponentsCostIncluded(product, componentCode);
			// CSO-37 - NGK - Block Display of Some Choices - 7160831
			// Now this function can return a null value, when the product should not be included
			var productXML = lCreateProductSuggestiveSellingXML(componentCode, componentsCostIncluded, isMain);
			if (productXML != null && productXML != undefined)
			{
				productSuggestiveSellingXML.appendChild(productXML);
			}
		}
	}
	
	function lCreateProductSuggestiveSellingXML(productCode, costIncluded, isMain)
	{
		var productSuggestiveSellingXML;
		if (isMain)
		{
			productSuggestiveSellingXML = new XML("<Composition />");
		}
		else
		{
			productSuggestiveSellingXML = new XML("<Product />");
		}
		
		var product = csoProductInfo[productCode];

		// SDO-12525 - 1251 Kiosk Script error when ordering CYT - AUNP-10
		if (!product){
			return null;
		}
		
		// CSO-37 - NGK - Block Display of Some Choices - 7160831
		// isMain is false, then this is a product within a abstract choice and we need to check
		// if it must be removed
		//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		if (!isMain && product.removeFromMOT)
		{
			return null;
		}
		
		productSuggestiveSellingXML.@code = productCode;
		if (!costIncluded) productSuggestiveSellingXML.@price = product.unitPrice.getCurrent();
		productSuggestiveSellingXML.@image = lGetProductImage(product);
		productSuggestiveSellingXML.@name = lGetProductName(product);
		productSuggestiveSellingXML.@isSoldOut = isProductOutage(productCode);
		
		// CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
		if (isNutritionalInfoAvailable(productCode.toString()))
		{
			productSuggestiveSellingXML.@showNutrition = "true";
		}
		
		if (product.xmlNode.Composition)
		{
			lCreateCompositionSuggestiveSellingXML(productSuggestiveSellingXML, product, costIncluded, true);
		}
		
		if (product.xmlNode.Choices)
		{
			lCreateChoicesSuggestiveSellingXML(productSuggestiveSellingXML, product, costIncluded);
		}
		
		return productSuggestiveSellingXML;
	}
	
	function lCreateChoicesSuggestiveSellingXML(productSuggestiveSellingXML, product, costIncluded)
	{
		var componentsCostIncluded = false;
		
		for each (var componentXML in product.xmlNode.Choices.Component)
		{
			var componentCode = componentXML.ProductCode.toString();
			
			componentsCostIncluded = costIncluded || lIsChoiceComponentsCostIncluded(product, componentCode);
			productSuggestiveSellingXML.appendChild(lCreateChoiceSuggestiveSellingXML(componentCode, componentsCostIncluded));
		}
	}
	
	function lCreateChoiceSuggestiveSellingXML(choiceCode, costIncluded)
	{
		var choiceSuggestiveSellingXML = new XML("<Choice />");
		var choice = csoProductInfo[choiceCode];
		
		choiceSuggestiveSellingXML.@code = choiceCode;
		if (!costIncluded) choiceSuggestiveSellingXML.@price = choice.unitPrice.getCurrent();
		choiceSuggestiveSellingXML.@group = choice.xmlNode.ChoiceGroup.toString();
		choiceSuggestiveSellingXML.@image = lGetProductImage(choice);
		choiceSuggestiveSellingXML.@name = lGetProductName(choice);
		choiceSuggestiveSellingXML.@isSoldOut = isProductOutage(choiceCode);
		
		if (choice.xmlNode.Composition)
		{
			lCreateCompositionSuggestiveSellingXML(choiceSuggestiveSellingXML, choice, costIncluded, false);
		}
		
		if (choice.xmlNode.Choices)
		{
			lCreateChoicesSuggestiveSellingXML(choiceSuggestiveSellingXML, choice, costIncluded);
		}
		
		return choiceSuggestiveSellingXML;
	}
	
	function lIsCompositionComponentsCostIncluded(product, componentCode)
	{
		return product.xmlNode.Composition.Component.(ProductCode == componentCode).CostInclusive.toString() == "true";
	}
	
	function lIsChoiceComponentsCostIncluded(product, componentCode)
	{
		return product.xmlNode.Choices.Component.(ProductCode == componentCode).CostInclusive.toString() == "true";
	}
	
	function lGetProductImage(product)
	{
		return (product.csoImages.largeImage || product.csoImages.smallImage);
	}
	
	function lGetProductName(product)
	{
		var currentLanguage = sessionSale.get("LANGUAGE");
		return (product.names[currentLanguage].csoName || "");
	}
	
	function lHaveSuggestiveSales(screenCode, saleProductCode)
	{
		// NGK Suggestive sale - Screen
		//SSU - 68 - NGK - Implement extended day part validation for the suggestive selling screens
		if (screenCode != null && PosNGKIsScreenValid(screenCode))
		{
			var screenXmlNode = lGetScreenXmlNode(screenCode);
			
			if (screenXmlNode == null)
			{
				API.dbg("NGK - PosNGKOrderItemJS.lHaveSuggestiveSales - Screen does not exist - ScreenCode:" + screenCode);
			}
			else
			{
				var ButtonParameters = screenXmlNode.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
				
				if (ButtonParameters != null)
				{
					for each (buttonParameter in ButtonParameters)
					{
						var productCode = buttonParameter.@value;
						
						//SDO-7747 - NGK stops working when trying to sell a product with no price configured
						if (lIsProductValid(productCode) && lIsProductPriceNodeValid(productCode))
						{
							var productInfo = csoProductInfo[productCode.toString()];
							
							// SDO-11589 - NP6 1.23 MR2 Release V4.1[NGK V5.10 QR5]:NGK freezes when suggestive selling is enabled throwing a script error on the NGK screen.
							if (productInfo != null && productInfo.isValid
								&& (IsProductOfPointOfDistribution(productInfo, "FRONT_COUNTER")
								|| IsProductOfPointOfDistribution(productInfo, "MCCAFE") && ProductCanBeOrderedInPointOfDistribution("MCCAFE")
								|| IsProductOfPointOfDistribution(productInfo, "MCSALAD") && ProductCanBeOrderedInPointOfDistribution("MCSALAD")))
							{
								return true;
							}
							else
							{
								API.dbg("NGK - PosNGKOrderItemJS.lHaveSuggestiveSales - Product does not exist or is not avaialble - ProductCode:" + productCode);
							}

						}				
					}
				}
			}
		}
		
		// Local Promotions Suggestive Sale - localpromotions-db.xml
		// CSO-72 - NGK may display a script error during the value meal loop if a size entry doesn't have a code attribute
		var entry = "";
		for each (var size in csoProductInfo[saleProductCode].xmlNode.SizeSelection.Size)
		{
			if (size.@code.toString() == saleProductCode)
			{
				entry = size.@entry.toString();
				break;
			}
		}
		var saleType = hlp.getSaleType();
		
		for each (var sp in csoSuggestivePromotions)
		{
			if (lHaveValidProducts(sp, entry, saleType))
			{
				return true;
			}
		}
		
		API.dbg("NGK - PosNGKOrderItemJS.lHaveSuggestiveSales - There's no suggestive sale available - ProductCode: " + saleProductCode + ", ScreenNumber: " + csoSelectedMainMenu.screenNumber + ", ButtonNumber: " + csoSelectedMainMenu.buttonNumber);
		
		return false;
	}
	
	function lHaveValidProducts(sp, entry, saleType)
	{
		if (sp.screens[csoSelectedMainMenu.screenNumber] != null)
		{
			if (sp.screens[csoSelectedMainMenu.screenNumber].indexOf(csoSelectedMainMenu.buttonNumber) > -1)
			{
				if ((sp.size == "" || entry == "" || sp.size == entry))
				{
					if (lIsDaypartValid(sp.dayParts))
					{
						for each (var pcode in sp.productGroupProducts)
						{
							if (bCheckProductDayPartCode(pcode) &&
								PosCheckIfPriceNodeIsValid(csoProductInfo[pcode].xmlNode) &&
								csoProductInfo[pcode].xmlNode.@salable == "true" &&
								!isProductOutage(pcode) &&
								((saleType == 0 && csoProductInfo[pcode].xmlNode.SalesType.@eatin == "true") ||
								 (saleType == 1 && csoProductInfo[pcode].xmlNode.SalesType.@takeout == "true")))
							{
								return true;
							}
						}
					}
				}
			}
		}
		
		return false;
	}
	
	function lGetValidProducts(sp, entry, saleType)
	{
		var validProducts = new Array();
		
		if (sp.screens[csoSelectedMainMenu.screenNumber] != null)
		{
			if (sp.screens[csoSelectedMainMenu.screenNumber].indexOf(csoSelectedMainMenu.buttonNumber) > -1)
			{
				if ((sp.size == "" || entry == "" || sp.size == entry))
				{
					if (lIsDaypartValid(sp.dayParts))
					{
						var daypartInvalid = new Array();
						var pricenodeInvalid = new Array();
						var salableInvalid = new Array();
						var outageInvalid = new Array();
						var salestypeInvalid = new Array();
						
						for each (var pcode in sp.productGroupProducts)
						{
							if (!bCheckProductDayPartCode(pcode))
							{
								daypartInvalid.push(pcode);
								continue;
							}
							
							if (!PosCheckIfPriceNodeIsValid(csoProductInfo[pcode].xmlNode))
							{
								pricenodeInvalid.push(pcode);
								continue;
							}
							
							if (csoProductInfo[pcode].xmlNode.@salable != "true")
							{
								salableInvalid.push(pcode);
								continue;
							}
							
							if (isProductOutage(pcode))
							{
								outageInvalid.push(pcode);
								continue;
							}
							
							if ((saleType == 0 && csoProductInfo[pcode].xmlNode.SalesType.@eatin == "true") ||
								(saleType == 1 && csoProductInfo[pcode].xmlNode.SalesType.@takeout == "true"))
							{
								validProducts.push(pcode);
							}
							else
							{
								salestypeInvalid.push(pcode);
							}
						}
						
						if (daypartInvalid.length > 0)
						{
							API.dbg("CSO - Suggestive Sale - daypart validation failed for product(s) '" + daypartInvalid.toString() + "' in promotion with productgroup='" + sp.productGroup + "'.");
						}
						
						if (pricenodeInvalid.length > 0)
						{
							API.dbg("CSO - Suggestive Sale - price node validation failed for product(s) '" + pricenodeInvalid.toString() + "' in promotion with productgroup='" + sp.productGroup + "'.");
						}
						
						if (salableInvalid.length > 0)
						{
							API.dbg("CSO - Suggestive Sale - salable validation failed for product(s) '" + salableInvalid.toString() + "' in promotion with productgroup='" + sp.productGroup + "'.");
						}
						
						if (outageInvalid.length > 0)
						{
							API.dbg("CSO - Suggestive Sale - outage validation failed for product(s) '" + outageInvalid.toString() + "' in promotion with productgroup='" + sp.productGroup + "'.");
						}
						
						if (salestypeInvalid.length > 0)
						{
							API.dbg("CSO - Suggestive Sale - sales type validation failed for product(s) '" + salestypeInvalid.toString() + "' in promotion with productgroup='" + sp.productGroup + "'.");
						}
					}
					else
					{
						API.dbg("CSO - Suggestive Sale - daypart validation failed: promotion with productgroup='" + sp.productGroup + "' does not have valid dayparts for now.");
					}
				}
				else
				{
					API.dbg("CSO - Suggestive Sale - size validation failed: promotion with productgroup='" + sp.productGroup + "', size='" + sp.size + "' does not match entry='" + entry + "', the size of previously sold product.");
				}
			}
			else
			{
				API.dbg("CSO - Suggestive Sale - screen validation failed: promotion with productgroup='" + sp.productGroup + "' does not contain button '" + csoSelectedMainMenu.buttonNumber + "' for screen number '" + csoSelectedMainMenu.screenNumber + "'.");
			}
		}
		else
		{
			API.dbg("CSO - Suggestive Sale - screen validation failed: promotion with productgroup='" + sp.productGroup + "' does not contain screen number '" + csoSelectedMainMenu.screenNumber + "'.");
		}

		return validProducts;
	}
	
	function lIsDaypartValid(dayparts)
	{
		if (dayparts.length == 0 || csoConfigurationInfo.dayParts.length == 0) return true;

		var days = { 0:"SUN", 1:"MON", 2:"TUE", 3:"WED", 4:"THU", 5:"FRI", 6:"SAT" };
		var matchingDaypartNameFound = false;
		
		for each (var name in dayparts)
		{
			for each (var daypart in csoConfigurationInfo.dayParts)
			{
				if (daypart.name == name)
				{
					matchingDaypartNameFound = true;
					var currentTime = new Date();
					var day = currentTime.getDay();
					var weekDay = daypart.weekDays[days[day]];

					if (weekDay == null)
					{
						return true;
					}

					var dayPartStartTime = new Date();
					var dayPartEndTime = new Date();
					
					var time = weekDay.startTime.split(":");
					var startTimeHH = Number(time[0]);
					var startTimeMM = Number(time[1]);
					
					time = weekDay.endTime.split(":");
					var endTimeHH = Number(time[0]);
					var endTimeMM = Number(time[1]);

					dayPartStartTime.setHours(startTimeHH, startTimeMM, 0);
					dayPartEndTime.setHours(endTimeHH, endTimeMM, 0);
					
					if ((currentTime >= dayPartStartTime) && (currentTime <= dayPartEndTime))
					{
						return true;
					}
				}
			}
		}
		
		return !matchingDaypartNameFound;
	}
	
	/**
	 * @brief - Get a specific screen xml node from the screen.xml file.
	 * @param - screenNumber: the desired screen
	 * @author - Vladimir Dobroff
	 */	
	function lGetScreenXmlNode(screenNumber)
	{
		if (screenNumber == null)
		{
			return null;
		}
	
		if (ngkScreenInfo[screenNumber] != null)
		{
			return ngkScreenInfo[screenNumber].xmlNode;
		}
		
		return null;
	}	
			
	/**
	 * @brief Adds the main screen id (saved by PosNGKSaveMainScreen) to the value meal xml
	 * @author - Vladimir Dobroff
	 * @since - NGK v1.0 (French pilot)
	 */	
	function lAddMainScreenId(eventXml)
	{
		var ctx = new SessionContext;
		var mainScreen = ctx.get("NGK_MAIN_SCREEN");
		// CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
		var increaseImg = ctx.get("NGK_MAIN_SCREEN_INCREASE_IMG");
		if (mainScreen != null) {
			var mainScreenXml = new XML('<Screen/>');
			mainScreenXml.@topLevelMainScreen = mainScreen;
			eventXml.appendChild(mainScreenXml);
			PosNGKDoShowScreenJS(mainScreen, null, null, "true", increaseImg);
		}
	}

	/**
	 * @brief  - Add CYT ingredients that become from a QR Code reader
	 * @author - Jorge Olimpia
	 * @since  - CSO-327 - CYT import via scanner - 8052105
	 */
	function lAddCYTQrCodeIngredients(cytIngredients, xml) {
		if (cytIngredients == undefined || cytIngredients == null || ltrim(rtrim(cytIngredients)) == "") {
			API.dbg("PosNGKOrderItemJS - lAddCYTQrCodeIngredients - cytIngredients is undefined. [" + cytIngredients + "].");
			return xml;
		}
		
		var ingredients = cytIngredients.split(';');
		if (ingredients.length < 1) {
			API.dbg("PosNGKOrderItemJS - lAddCYTQrCodeIngredients - cytIngredients contains invalid values. [" + cytIngredients + "].");
			return xml;
		}
		
		var xmlBYB = xml;
        
        // SQC-7374 - [NGK 5.11] CYT via scanner - After scanning a CYT that has a missing quantity or no ingredient from a mandatory step, NGK displays the first step of the configured CYT. It should display the step that contais the missing ingredient
		var bybType = xmlBYB.Product.@bybType;
		
		var bybCategories = [];
		// SQC-7374 - [NGK 5.11] CYT via scanner - After scanning a CYT that has a missing quantity or no ingredient from a mandatory step, NGK displays the first step of the configured CYT. It should display the step that contais the missing ingredient
		// SQC-7377 - [NGK 5.11] CYT via scanner - Incorrect behavior when using Ingredient Quantity for portion based items on QR code 
		for each (var category in xmlBYB.Product.Category) {
			var cat = { title: category.@title, 
						type: category.@type, 
						minGroupQuantity: (category.@minGroupQuantity != undefined) ? category.@minGroupQuantity : "0",
						maxGroupQuantity: (category.@maxGroupQuantity != undefined) ? category.@maxGroupQuantity : "999999",
						currentGroupQuantity: "0",
						choiceDefaultQuantity: (category.@defaultQuantity != undefined) ? category.@defaultQuantity : "0",
						currentGroupChanged: false
			}
			
			if (parseInt(cat.maxGroupQuantity) == 0) {
				cat.maxGroupQuantity = "999999";
			}
			
			bybCategories.push(cat);
		}
		
		xmlBYB.Product.@isFromBarcode = "true";
		xmlBYB.Product.@hasWarning = "false"
		
		// Sort ingredients' array here, regarding their quantities.
		ingredients.sort(function(a,b) {			
			return (a.split(',').length > 1 ? parseInt(a.split(',')[1]) : 1) - (b.split(',').length > 1 ? parseInt(b.split(',')[1]) : 1);
		});
		
		for each (var ingredient in ingredients) {
			var groupAliasProductCodes = ingredient.split(',')[0];
			var aliasProductCodes = groupAliasProductCodes.split('|');
			
			for each (var alias in aliasProductCodes) {
				var productCode = PosNGKGetProductCodeFromAlias(alias);
				
				if (!bShowProduct(productCode)) {
					API.dbg("PosNGKOrderItemJS - lAddCYTQrCodeIngredients - Ingredient cannot be found in the list. Product code: [" + productCode + "].");
					xmlBYB.Product.@hasWarning = "true";
					continue;
				}
				
				if (isProductOutage(productCode)) {
					API.dbg("PosNGKOrderItemJS - lAddCYTQrCodeIngredients - Ingredient is outage. Product code: [" + productCode + "].");
					xmlBYB.Product.@hasWarning = "true";
					continue;
				}
				
				var productQuantity = ingredient.split(',').length > 1 ? ingredient.split(',')[1] : 1;				
				
				for each (var category in xmlBYB.Product.Category) {
					if (category.Item.(@code == productCode) != undefined) {
						
						// Get total of ingredients that are already in the recipe, regarding the selected category
						var totalIngredientsSet = 0;
						for each (var item in category) {
							totalIngredientsSet += item.@currQty != undefined ? parseInt(item.@currQty) : (item.@defaultQty != undefined ? parseInt(item.@defaultQty) : parseInt(item.@defaultQuantity));
						}
						
						for (var i = 0; i < bybCategories.length; i++) {
							if (category.@title == bybCategories[i].title) {
								var categoryCurrentQuantity = totalIngredientsSet;
								var categoryMaxQuantity = parseInt(bybCategories[i].maxGroupQuantity);
								var categoryPreviousQuantity = 0;
								
								if (categoryCurrentQuantity <= categoryMaxQuantity) {
									var remainingQuantity = categoryMaxQuantity - categoryCurrentQuantity;
									
									// Get previous quantity of selected ingredient.
									categoryPreviousQuantity = category.Item.(@code == productCode).@currQty != undefined ? category.Item.(@code == productCode).@currQty : (category.Item.(@code == productCode).@defaultQty != undefined ? category.Item.(@code == productCode).@defaultQty : category.Item.(@code == productCode).@defaultQuantity);
									
									// Variable to identifies selected ingredient as portion-based.
									var isPortionBased = (category.Item.(@code == productCode).@isPortionBased != undefined && category.Item.(@code == productCode).@isPortionBased == "true");
									
									// Ignores when the productQuantity is equals to currentQuantity, once it's using absolute quantity.
									if (categoryPreviousQuantity == parseInt(productQuantity) && !isPortionBased) {
										continue;
									}
									
									// Check if it is possible to add more ingredients in the recipe.
									if (parseInt(remainingQuantity) == 0 && parseInt(productQuantity) > 0 && !isPortionBased) {
										API.dbg("PosNGKOrderItemJS - lAddCYTQrCodeIngredients - Maximum quantity of ingredients was reached in this category: [" + category.@title + "]. Product code was not added in the recipe: [" + productCode + "].");
										xmlBYB.Product.@hasWarning = "true";
										
										continue;
									}
									
									if (isPortionBased) {
										/* Portion-based item */
										var defQty = category.Item.(@code == productCode).@defaultQty != undefined ? parseInt(category.Item.(@code == productCode).@defaultQty) : 0;
										var ingrType = defQty == 0 ? "CanAdds" : "Composition";										
										var maxQty = category.Item.(@code == productCode).@maxQty != undefined ? parseInt(category.Item.(@code == productCode).@maxQty) : 1;										
										var curQty = 0; 
										var modQty = 0;
										
										if ((parseInt(maxQty) - parseInt(categoryPreviousQuantity)) <= parseInt(remainingQuantity)) {
												curQty = maxQty > 1 && parseInt(productQuantity) > 2 ? 2 : 1;
												categoryCurrentQuantity = (categoryCurrentQuantity - parseInt(categoryPreviousQuantity)) + curQty;

										} else if (parseInt(maxQty) > parseInt(remainingQuantity) && parseInt(remainingQuantity) != 0) { 
											curQty = maxQty > 1 && parseInt(remainingQuantity) > 2 ? 2 : 1;
											categoryCurrentQuantity = (categoryCurrentQuantity - parseInt(categoryPreviousQuantity)) + (parseInt(remainingQuantity));
											
											API.dbg("PosNGKOrderItemJS - lAddCYTQrCodeIngredients - Maximum quantity of ingredients was reached in this category: [" + category.@title + "]. Product code was added with remaining quantity possible: [" + productCode + "].");
											xmlBYB.Product.@hasWarning = "true";
											
										} else if (parseInt(remainingQuantity) == 0 && parseInt(productQuantity) == 1) {
											// If the maximum ingredients was reached but the selected ingredient will be changed from regular to light, then set curQty to 1.
											curQty = 1;
										}
										
										if (curQty == 2) {
											modQty = 0;
										} else if (curQty == 1 && parseInt(productQuantity) == 2) {
											modQty = 0;
										} else if (curQty == 1 && parseInt(productQuantity) == 1) {
											modQty = 1;
										}
										
										category.Item.(@code == productCode).@currQty = curQty;
										category.Item.(@code == productCode).@portionBasedIndex = lGetPortionBasedDictionaryIndex(curQty, defQty, modQty, ingrType, maxQty);
										bybCategories[i].currentGroupChanged = true;
										
									} else {
										/* Per quantity item */
										// SQC-7373 - [NGK 5.11] CYT via scanner - After scanning a CYT with an invalid ingredient, NGK displays the first step of the configured CYT instead of the review screen with only valid ingredients
										if ((parseInt(productQuantity) - parseInt(categoryPreviousQuantity)) <= parseInt(remainingQuantity)) {										
											var ingredientMaxQty = (category.Item.(@code == productCode).@maxQty != undefined ? parseInt(category.Item.(@code == productCode).@maxQty) : 1);
											
											category.Item.(@code == productCode).@currQty = (parseInt(productQuantity) <= ingredientMaxQty ? parseInt(productQuantity) : ingredientMaxQty);
											categoryCurrentQuantity = (categoryCurrentQuantity - parseInt(categoryPreviousQuantity)) + parseInt(category.Item.(@code == productCode).@currQty);
											bybCategories[i].currentGroupChanged = true;

										} else if (parseInt(productQuantity) > parseInt(remainingQuantity) && parseInt(remainingQuantity) != 0) {
											var ingredientMaxQty = (category.Item.(@code == productCode).@maxQty != undefined ? parseInt(category.Item.(@code == productCode).@maxQty) : 1);
											
											if (ingredientMaxQty <= parseInt(remainingQuantity)) {
												category.Item.(@code == productCode).@currQty = ingredientMaxQty;
											} else {
												category.Item.(@code == productCode).@currQty = (parseInt(remainingQuantity));
											}
											
											categoryCurrentQuantity = (categoryCurrentQuantity - parseInt(categoryPreviousQuantity)) + (parseInt(category.Item.(@code == productCode).@currQty));
											bybCategories[i].currentGroupChanged = true;
											
											API.dbg("PosNGKOrderItemJS - lAddCYTQrCodeIngredients - Maximum quantity of ingredients was reached in this category: [" + category.@title + "]. Product code was added with remaining quantity possible: [" + productCode + "].");
											xmlBYB.Product.@hasWarning = "true";
										}
									}
								}
								
								bybCategories[i].currentGroupQuantity = categoryCurrentQuantity;
							}
						}
					}
				}
			}
		}
		
		// SQC-7374 - [NGK 5.11] CYT via scanner - After scanning a CYT that has a missing quantity or no ingredient from a mandatory step, NGK displays the first step of the configured CYT. It should display the step that contais the missing ingredient
		// After addding/removing ingredients, check if the mininum quantity of each category was filled.
		var missingCategoryIndex = 0;
		for (var i = 0; i < bybCategories.length; i++) {
			if (((parseInt(bybCategories[i].currentGroupQuantity) < parseInt(bybCategories[i].minGroupQuantity)) && bybCategories[i].currentGroupChanged == true && bybType == "PRE_BUILT") ||
                ((parseInt(bybCategories[i].currentGroupQuantity) < parseInt(bybCategories[i].minGroupQuantity)) && bybType == "CUSTOMIZED") ||
				 (bybCategories[i].type == "CHOICE" && (parseInt(bybCategories[i].currentGroupQuantity) < parseInt(bybCategories[i].choiceDefaultQuantity)))) {
				API.dbg("PosNGKOrderItemJS - lAddCYTQrCodeIngredients - Mininum quantity of ingredients was not filled for this category: [" + bybCategories[i].title + "].");
				xmlBYB.Product.@hasWarning = "true";
				xmlBYB.Product.@missingCategoryIndex = (i + 1);
				
				break;
			}
		}

		return xmlBYB;
	}
}

/**
	 * @brief - Adds the delivery later attribute for all the Products in the value meal xml with the delivery later comment.
	 * @param - mealXml: the last step of the value meal xml with all the possible products
	 * @author - Vladimir Dobroff
	 * @modified - CSO-732 - POS-407 - Suggestive Selling with choices and size selection
	 */
	function lAddDeliveryLaterAtribute(mealXml)
	{

		var deliveryLaterProductCode = lGetCSOUserInterfaceStringParameter("deliveryLaterProductCode", "");
	
		if (deliveryLaterProductCode == "")
		{
			return;
		}
	
		var deliveryLaterProductInfo = csoProductInfo[deliveryLaterProductCode.toString()];
		
		if (deliveryLaterProductInfo == null)
		{
			API.dbg("NGK - lAddDeliveryLaterAtribute: Given delivery later product code is not present on Product-db.xml - ProductCode: " + deliveryLaterProductCode);
			return;
		}

		var hlp = new BusinessObjectHelper;
		var saleType = hlp.getSaleType();

		//Delivery later is only valid for eat in
		if (saleType != 0)
		{
			return;
		}
	
		// SDO-10823 - NGK 5.10 - Delivery Later screen is displaying a product that should not be displayed after the order confirmation screen.
		for each(productItem in mealXml.Product)
		{
			var mainProdCode=productItem.@code.toString();
			var mainProductInfo = csoProductInfo[mainProdCode].xmlNode;
			if("true"==mainProductInfo.Production.Grillable.@status)
			{
				if (PosNGKIsDeliveryLater(deliveryLaterProductCode, mainProdCode))
				{
					productItem.@deliveryLater = "true";
				}
					
				var productXmlNodes = productItem..Product;
				for each (product in productXmlNodes)
				{
					if (PosNGKIsDeliveryLater(deliveryLaterProductCode, product.@code))
					{
						product.@deliveryLater = "true";
					}
				}
			}
		}
		
		var deliveryLaterXml = new XML('<DeliveryLater />');
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (deliveryLaterProductInfo != undefined) {
			deliveryLaterXml.@image = (deliveryLaterProductInfo.csoImages.grillImage == "" ? "gui_comment_getlater.png" : deliveryLaterProductInfo.csoImages.grillImage);
		}
		
		mealXml.appendChild(deliveryLaterXml);	
	}

// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
function ApplyDiscountAfterSale(barcode, productCode, rate) {

	API.dbg("CSO - ApplyDiscountAfterSale barcode[" + barcode + "] rate[" + rate + "] productCode[" + productCode + "]");

	if((null!=rate) && (rate.length>0)) {
		var sIndex=getProductIndex(productCode);
		if(sIndex.index>=0) {
			var retVal=false;
			if(sIndex.parent) {
				retVal=PosDoDiscountByItem("0", sIndex.index, "rate", rate);
			}
			else {
				retVal=PosDoDiscountByItem("0", sIndex.index, "rate", rate, productCode);
			}
			API.dbg("CSO - ApplyDiscountAfterSale PosDoDiscountByItem ["+retVal+"]");
			if(retVal) {
				sessionSale.set("NGK_DISCOUNT_BARCODE_APPLIED", barcode);
			}
		}
	}
}

// CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
// SQS-282 - [NGK5.17.1 - Ungated Scan] If I scan a Mobile Order, from Order Review, with only invalid items, kiosk display Order Review Empty
function lGoToMainScreen(clearUngateReturnScreen, isOrderEmpty)
{
	// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
	var origin = sessionSale.get ('NGK_MONOPOLY_UNGATED_ORIGIN');
	PosSetSessionProperty ("NGK_MONOPOLY_UNGATED_ORIGIN", "");
	
	var ungatedReturnScreen=sessionSale.get ('NGK_UNGATED_SCAN_RETURN_SCREEN');
	API.dbg("[UNGATED]lGoToMainScreen ungatedReturnScreen["+ungatedReturnScreen+"] clear["+clearUngateReturnScreen+"]");
	// CSD-49 - FR1 - Setting the barcode scanner to "always on" state and configuring the types of barcodes to be accepted
	// SQS-282 - [NGK5.17.1 - Ungated Scan] If I scan a Mobile Order, from Order Review, with only invalid items, kiosk display Order Review Empty
	if (!isOrderEmpty && ('REVIEW'==ungatedReturnScreen || 'REVIEW'==origin)) {
		PosNGKEnqueueWFJS(SHARED_CTX["KEY_WF_NGK_FINAL_SHOW_ORDER_REVIEW"]);
	}
	else {
		PosNGKShowMainScreen();
	}	
	
	var bruteForceRunning = PosCheckSessionProperty('BRUTE_FORCE_EXECUTING', 'true');
	if(clearUngateReturnScreen && !bruteForceRunning) {
		PosRemoveSessionProperty('NGK_UNGATED_SCAN_RETURN_SCREEN');
	}
	return;
}

/**
 *
 * @brief - Execute the NewPos sale commands to submit a list of products to the current sale
 * @param - orderDetails: the single product to be sold or the product and all it's options separated by pipes
 *        - current inject order protocol sample:
 *          PRODUCT_CODE,MULTIPLIER@CYT_CUSTOM_NAME@PROMO;COMPOSITION_CODE;DELIVERY_LATER;GRILL_CODE,QTY,PORTION_BASED;...|...
 * @param - firstProductCode: the first product code of the above string
 * @param - barcode: the bar code of the product
 * @param - rate: the discount rate to be applied
 * @param - forceHome: flag that indicates if it should force the return to the main screen at the end of sale // CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
 * @author - Vladimir Dobroff
 * @since - NGK v5.15 - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 *          Removed this code from PosNGKOrderItemJS so it could be reused after the auto grill
 */
function lFinalizeOrderItem(orderDetails, firstProductCode, barcode, rate, forceHome)
{
	// CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
	lGoToMainScreen(forceHome);

	// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	if (!PosNGKInjectOrderJS(orderDetails))
	{
		API.dbg("NGK - lFinalizeOrderItem - PosNGKInjectOrderJS: Could not finalize the sale (orderDetails=[" + orderDetails + "])");
		lGoToMainScreen("true");
		return false;
	}
	
	// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
	// the value meal loop is an assync process and the discount must be applied at the end
	ApplyDiscountAfterSale(barcode, firstProductCode, rate);
	
	// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
	PosNGKGrillMonopoly();
	
	// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
	// FR3 item 8.1.2
	if(csoProductInfo[firstProductCode].isMonopoly) {
		PosNGKShowMainScreen();
	}
	
	csoItemGroupManager.resetSelectedGroup();
	
	return true;
}

/**
 *
 * @brief - Finalize the auto grill process
 * @param - result: Contain the grill information of each product displayed in the auto grill screen separated by pipes.
 *          The content between the pipes uses the inject order protocol to describe the grill (for further reference check lFinalizeOrderItem).
 *          The information must be sent in the same order of the GrillableItem tags in DLG_GRILL_LIST message
 *          If a particular product hasn't been customized an empty string must be included.
 *          
 *                                  Big Mac (GrillableItem - index 0)                  | Coke (GrillableItem - index 1)
 *                           Meat    ;  Salad    ; Cheese    ; Ketchup                 |  Ice  
 *          Sample string: 90000001,1;90000020,-1;90000030,-1;90000042,-1,PORTION_BASED|90000090,-1
 *
 * @author - Vladimir Dobroff
 * @since - CSO-256 - NGK - Customization of Products - 7848282
 * @modified - NGK v5.15 - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function PosCSOProductCustomizationFinalize(result)
{
	if (!GLOBAL_NGK_AUTO_GRILL) return false;
	
	var forceHome = GLOBAL_NGK_AUTO_GRILL.forceHome;
	var barcode = GLOBAL_NGK_AUTO_GRILL.barcode;
	var code = GLOBAL_NGK_AUTO_GRILL.code;
	var rate = GLOBAL_NGK_AUTO_GRILL.rate;
	
	var injectOrderMatrix = GLOBAL_NGK_AUTO_GRILL.injectOrderMatrix;
	var injectOrderIndexes = GLOBAL_NGK_AUTO_GRILL.injectOrderIndexes;
	
	//If the workflow parameter is sent by the UI as an empty string it seems to arrive in the scripts as null.
	//The empty string is important and must be processed as well, because it may indicate that the grill has been removed
	//from a particular product.
	if (!result) result = "";
	
	//Rebuild the inject order string replacing the fragments that have been edited in the auto grill process
	var newGrillConfig = result.split("|");
	
	if (newGrillConfig.length == injectOrderIndexes.length)
	{
		for (var k = 0; k < injectOrderIndexes.length; k++)
		{
			index1 = injectOrderIndexes[k].i;
			index2 = injectOrderIndexes[k].j;
			
			var injectOrderFragment = injectOrderMatrix[index1][index2];
			
			var splittedInjectOrderFragment = injectOrderFragment.split(";");
			
			var newInjectOrderFragment = splittedInjectOrderFragment[0];
			
			if (newGrillConfig[k])
			{
				newInjectOrderFragment += ";" + newGrillConfig[k];
			}
			
			injectOrderMatrix[index1][index2] = newInjectOrderFragment;
		}
	}
	
	//Rebuild the inject order string
	var orderDetails = "";
		
	for (var i = 0; i < injectOrderMatrix.length; i++)
	{
		var aux = injectOrderMatrix[i].join(";");
		
		if (aux)
		{
			if (orderDetails) orderDetails += "|";
			orderDetails += aux;
		}
	}
	
	return lFinalizeOrderItem(orderDetails, code, barcode, rate, forceHome);
}

/**
 * @brief - look for monopoly comment in the kiosk view recursively
 * @param - prodItem - XML item from current product being analized
 * @param - monopolyProdCode - grill product code for monopoly comment
 * @author - MY
 * @since - CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function lLookForMonopolyComment(prodItem, monopolyProdCode)
{
	var hasMonopolyGrill=false;
	for each (var grill in prodItem.Grill) {
		if(Number(monopolyProdCode)==Number(grill.@code)) {
			hasMonopolyGrill=true;
			break;
		}
	}
	if(!hasMonopolyGrill) {
		for each (var prod in prodItem.Product) {
			hasMonopolyGrill=lLookForMonopolyComment(prod, monopolyProdCode);
			if(hasMonopolyGrill) {
				break;
			}
		}
	}
	return hasMonopolyGrill;
}

/**
 * @brief - look for the monopoly comment components tags
 * @param - prodInfo - csoProductInfo entry of the product to be checked
 * @param - monopolyProdCode - product code configured as monopoly comment (monopolyProductCode parameter)
 * @author - MY
 * @since - CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function lFindMonopolyComment(prodInfo, monopolyProdCode) {
	var bFound=false;
	if(prodInfo.isMonopoly) {
		for each (var comment in prodInfo.xmlNode.Comments.Component) {
			if(comment.ProductCode==monopolyProdCode) {
				// monopoly grill comment
				bFound=true;
			}
		}
	}
	return bFound;
}

/**
 * @brief - grill the item with the monopoly comment
 * @param - item - XML item from current product (kioskView.Order.Item)
 * @param - prodInfo - csoProductInfo entry of the current product
 * @param - monopolyProdCode - product code configured as monopoly comment (monopolyProductCode parameter)
 * @author - MY
 * @since - CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function lGrillMonopoly(item, prodInfo, monopolyProdCode) {
	
	var productCode=null;

	if("PRODUCT"==prodInfo.xmlNode.@productClass) {
		bFound=lFindMonopolyComment(prodInfo, monopolyProdCode);
		if(bFound) {
			productCode=item.Product.@code;
		}
	}
	else {
		var bFound=false;
		// is VM - need to find the component product that accepts the monopoly grill comment
		for each (var prod in item.Product.Product) {
			for each (var component in prodInfo.xmlNode.Composition.Component) {
				if(prod.@code==component.ProductCode) {
					// candidate to receive the grill
					var prodCandidate=csoProductInfo[component.ProductCode.toString()];
					bFound=lFindMonopolyComment(prodCandidate, monopolyProdCode);
					if(bFound) {
						productCode=component.ProductCode;
						break;
					}
				}
			}
			if(bFound) {
				break;
			}
		}
		// component not found -> look for any item that can get the monopoly grill comment
		if(!bFound) {
			for each (var prod in item.Product.Product) {
				var prodCandidate=csoProductInfo[prod.@code.toString()];
				bFound=lFindMonopolyComment(prodCandidate, monopolyProdCode);
				if(bFound) {
					productCode=prod.@code;
					break;
				}
			}
		}
	}

	if(bFound) {
		bFound=false;
		if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId"))){
			API.dbg("NGK - lGrillMonopoly: Could not start grill process");
			return false;
		}
		
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		var kioskGrillViewXml = lGetGrillView();
		for each (var grillComponent in kioskGrillViewXml.Component)
		{
			if (grillComponent.@code.toString() != productCode) {
				continue;
			}
			
			PosDoSelGrillIndex(grillComponent.@index);
			
			API.dbg("NGK - lGrillMonopoly: grillComponent.@index=[" + grillComponent.@index + "]) - Selected");
			
			// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
			kioskGrillViewXml = lGetGrillView();
			var newGrillComponent = kioskGrillViewXml.Component.(@index == grillComponent.@index);

			var itemIndex = -1;
			
			for each (var grillItem in newGrillComponent.Item) {
				API.dbg("CSO - lGrillMonopoly: grillItem.@code=[" + grillItem.@code + "])");
				if (grillItem.@code.toString() == monopolyProdCode) {
					itemIndex = Number(grillItem.@index);
					break;
				}
			}
			
			API.dbg("NGK - lGrillMonopoly: itemIndex=[" + itemIndex + "])");
			
			if (itemIndex < 0) {
				API.dbg("NGK - lGrillMonopoly: kioskGrillViewXml=[" + kioskGrillViewXml + "])");
			}
			
			// PosCSODoGrillAddRemoveAllJS only returns false if any parameter is incorrect
			bFound=PosCSODoGrillAddRemoveAllJS('+', '-1', itemIndex.toString());
			if (!bFound) {
				API.dbg("NGK - lGrillMonopoly: Could not change delivery later comment");
			}
			break;
		}
		
		if (!PosDoGrillEnd("3")) {
			API.dbg("CSO - lGrillMonopoly: Could not end grill process");
			bFound=false;
		}
	}

	return bFound;
}

/**
 * @brief - Sets the monopoly comment in all monopoly items.
 * @author - MY
 * @since - CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function PosNGKGrillMonopoly()
{
	var monopolyProdCode=lGetCSOUserInterfaceStringParameter("monopolyProductCode", "");
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	var itemCountBefore=kioskOrderView.Order.Item.length();
	API.dbg("PosNGKGrillMonopoly - items["+itemCountBefore+"]");
	var bSplit=true;
	while(bSplit) {
		for each (var item in kioskOrderView.Order.Item) {
			var prodInfo=csoProductInfo[item.Product.@code.toString()];
			if((null!=prodInfo)&&(undefined!=prodInfo)) {
				if(prodInfo.isMonopoly) {
					// check if it has monopoly comment
					var hasMonopolyMark=lLookForMonopolyComment(item.Product, monopolyProdCode);
					if(!hasMonopolyMark) {
						KioskViewHelper.PosDoSelIndex(item.@index);
						lGrillMonopoly(item, prodInfo, monopolyProdCode);
					}
				}
			}
			else {
				API.dbg("PosNGKGrillMonopoly - invalid product["+item.Product.@code+"]");
			}
		}
		// update the view
		kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		// if the number of items increased -> a split occurred
		bSplit=(itemCountBefore<kioskOrderView.Order.Item.length())?true:false;
	}
	API.dbg("PosNGKGrillMonopoly - END");
	return;
}

/**
 * @brief - Check if the monopoly grill comment has to be restored (MUST be in the middle of grill process)
 * @author - MY
 * @since - CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function PosCheckMonopolyGrillComment()
{
	var monopolyProdCode=lGetCSOUserInterfaceStringParameter("monopolyProductCode", "");
	API.dbg("PosCheckMonopolyGrillComment - monopolyProdCode["+monopolyProdCode+"]");
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	for each (var item in kioskOrderView.Order.Item) {
		if("true"==item.@currentSelected) {
			var prodInfo=csoProductInfo[item.Product.@code.toString()];
			if(prodInfo.isMonopoly) {
				// check if it has monopoly comment
				var hasMonopolyMark=lLookForMonopolyComment(item.Product, monopolyProdCode);
				if(!hasMonopolyMark) {

					// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
					var kioskGrillViewXml = lGetGrillView();
					var newGrillComponent = kioskGrillViewXml.Component.(@index == sessionSale.get("NGK_CURRENT_GRILL_INDEX"));
					var itemIndex = -1;
					
					for each (var grillItem in newGrillComponent.Item) {
						API.dbg("CSO - PosCheckMonopolyGrillComment: grillItem.@code=[" + grillItem.@code + "] monopolyProdCode["+monopolyProdCode+"]");
						if (grillItem.@code.toString() == monopolyProdCode) {
							itemIndex = Number(grillItem.@index);
							break;
						}
					}
					
					API.dbg("NGK - PosCheckMonopolyGrillComment: itemIndex=[" + itemIndex + "]");
					
					if (itemIndex < 0) {
						API.dbg("NGK - PosCheckMonopolyGrillComment: kioskGrillViewXml=[" + kioskGrillViewXml + "]");
					}
					
					if (!PosCSODoGrillAddRemoveAllJS('+', '-1', itemIndex.toString())) {
						API.dbg("NGK - PosCheckMonopolyGrillComment: Could not change monopoly comment");
					}
				}
			}
			break;
		}
	}
	return true;
}

/**
 * @brief - Check if the product code is a valid product in the csoProductInfo list. Also logs an API error if it is invalid
 * @param - code: product code
 * @author - Vladimir Dobroff
 */	
function lIsProductValid(code)
{
	if ((csoProductInfo[code.toString()] == null) || (csoProductInfo[code.toString()] == undefined))
	{
		API.dbg("NGK - PosNGKOrderItemJS.lIsProductValid - Product does not exist or is not avaialble - ProductCode:" + code);
	
		return false;
	}
	
	return true;
}

/**
 * @brief - Check if the product price node is valid
 * @param - code: product code
 * @author - Vladimir Dobroff
 * @since - SDO-7747 - NGK stops working when trying to sell a product with no price configured
 */	
function lIsProductPriceNodeValid(code)
{
	if (lIsProductValid(code.toString()))
	{
		if (PosCheckIfPriceNodeIsValid(csoProductInfo[code.toString()].xmlNode))
		{
			return true;
		}
	}
	
	return false;
}

/**
 * @brief - Gets the price of the current selected sale type.
 * @param - productNode to get the price from.
 * @author - Kalil Garcia
 */
function lGetPrice(productNode) {
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	if (productNode == null || productNode == undefined) { // productNode.PriceList == null
		return "0";
	} else {
		// CSD-205 - Customization does not work when the price tag of a component has new lines
		return productNode.PriceList.PriceTag.Pricing.(@priceCode == lGetOrderSaleType()).Price.toString().replace(/\s+/g, "");
	}
}

/**
 * @brief - Function to format a price as a floating point number
 * @author - Kalil Garcia
 * @since - NGK 5.0
 * @modified - CSO-74 - NGK - Prices over 999.99 are not displayed correctly
 *           - NPS-17122 - NP6_APMEA_KR_Script error popped up when customizing the drink swap selected for CYT EVM - ACSI2831993
 */
function lFormatPrice(price) {
	if (!price) {
		return "0.00";
	}
	
	// CSO-74 - NGK - Prices over 999.99 are not displayed correctly
	//return ltrim(API.formatNumber(price, "##########0.00"));
	
	// NPS-17122 - NP6_APMEA_KR_Script error popped up when customizing the drink swap selected for CYT EVM - ACSI2831993
	// Replaced the above code because the NewPos API.formatNumber may not format the string correctly.
	// Example: When formatting "1000", the result would be: "1,000.00". Notice that the resulting string will
	//          basically ignore the provided mask and will also ignore the thousand and decimal separator defined in store-db.xml.
	//          This would result in a script error when trying to parse the string as a number in other functions.
	// Note: The final formatting will be done in the UI side using the proper separators defined in store-db.xml.
	//       Anyway, make sure the returned string still has decimal places, to avoid other conversion problems.
	price = price.toString();
	if (price.indexOf(".") == -1){
	    price += ".00"
	}
	
	return ltrim(price);
}

function lGetOrderSaleType() {
	var saleType = new BusinessObjectHelper().getSaleType();	//0 - EATIN; 1 - TAKEOUT; 2 - OTHER
	switch(saleType) {
	case 0:
		return "EATIN";
	case 1:
		return "TAKEOUT";
	case 2:
		return "OTHER";
	}
	return "EATIN";	
}

/**
 * @brief - Receives an order injection from the GUI application.
 *
 *	The injection is based on the following layout:
 *
 *	PCODE - Product code (VM or single item);
 *	PROMO - Flag to promo the product code;
 *	PCODE - Product code of the choice, only valid if proceeded by grill operation;
 *	COMPCODE - Product code of the composition for the grill operation;
 *	QTY - Quantity for the grill operation;
 *
 *	Sample layout
 *	PCODE@PROMO;PCODE;COMPCODE,QTY|PCODE
 *
 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
function PosNGKInjectOrderJS(OrderDetails)
{
	if (!OrderDetails)
	{
		API.dbg("NGK - PosNGKInjectOrderJS: Invalid product code (productCode=[" + OrderDetails + "])");
		return false;
	}
	
	var productCodeList = OrderDetails.split("|");
	if (productCodeList.length == 0)
	{
		API.dbg("NGK - PosNGKInjectOrderJS: Invalid product code (productCode=[" + OrderDetails + "])");
		return false;
	}
	
	return lInjectItems(productCodeList);

	/**
	 * @brief - Injects the given items, performs all the grill operations and possible discount per item.
	 * @param - productCodeList - PCODE@PROMO:PCODE:COMPCODE,QTY
	 * @author - Kalil Garcia, Vladimir Dobroff
	 */
	function lInjectItems(productCodeList)
	{
		var retValue = true;
		
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		if (typeof(PosSaleIncrementItem) == "function" && sessionSale.get("IS_NGK") == "true") {

			// SQC-9029 - [NGK5.15 - PDP] Incorrect quantity sold when the sale displays Suggestive Selling
			var selectedChoices = [];
			for each (var p in productCodeList){
				selectedChoices.push(lGetProductCodeFromConfig(p));
			}
			var currentProductCode = selectedChoices[0];
			var choiceQty = lGetChoiceQuantity(currentProductCode)
			// SQC-9029 - [NGK5.15 - PDP] Incorrect quantity sold when the sale displays Suggestive Selling
			// Counting the components choices and the choices from each choice
			if (choiceQty > 0){
				for (var i = 1; i <= choiceQty; i++){
					choiceQty += lGetChoiceQuantity(selectedChoices[i]);
				}
			}

			// SQC-9058 - [NGK5.15 - PDP] - ADD TO ORDER button not working if a suggestive selling is configured on a CYT
			if (productCodeList.length == (choiceQty + 1)){
				retValue = lInjectIncrementItems(productCodeList);			
			} else {
				var vmCodeList = productCodeList.splice(0, choiceQty + 1)
				retValue = lInjectIncrementItems(vmCodeList) && lInjectIncrementItems(productCodeList);
			}
		}
		else {
			// CSO-291 - When select 2 the same CYT product are displayed incorrect on basket.
			// SQC-5970 - [BYB phase 1] - NGK takes about 15 seconds to add "4 BYB" in the cart
			//var enableQuantum = (lGetCSOUserInterfaceStringParameter("enableDoQuantumOnGrill", "false").toLowerCase() == "true");
			var enableQuantum = "false";
			
			for (var i = 0; i < productCodeList.length; i++)
			{
				if (!productCodeList[i])
				{
					API.dbg("NGK - PosNGKInjectOrderJS: Invalid product code (productCode=[" + orderDetails + "])");
					return false;
				}
				
				//PCODE@PROMO;PCODE;COMPCODE,QTY
				var productConfig = productCodeList[i].split(";");
				
				// CSO-327 - CYT import via scanner - 8052105 
				var currentProductCode = productConfig[0].split("@")[0].split(",")[0];
				var promoFlag = productConfig[0].split("@PROMO").length > 1;
				
				// SQC-5970 - [BYB phase 1] - NGK takes about 15 seconds to add "4 BYB" in the cart
				var quantity = (productConfig[0].split("@PROMO")[0].split(",").length > 1) ?
								productConfig[0].split("@PROMO")[0].split(",")[1] :
								"1";
				var qty = Number(quantity);

				for (var j = 0; j < qty; j++)
				{
					if (PosCSODoSaleJS(currentProductCode, null, null))
					{
						if ((promoFlag) && PosDoPromoItem('1'))
						{
							API.dbg("NGK - PosNGKInjectOrderJS: Item has been promoted (productCode=[" + currentProductCode + "])");
						}
					}
					else
					{
						API.dbg("NGK - PosNGKInjectOrderJS: Could not finalize the sale (productCode=[" + currentProductCode + "])");
						return false;
					}
					
					// SQC-5970 - [BYB phase 1] - NGK takes about 15 seconds to add "4 BYB" in the cart
					// If we are not supposed to use the PosDoQuantum function and
					//  if there is grill information, we should grill each item we sell
					if (!enableQuantum && productConfig.length > 1)
					{
						ExecuteGrillOperations(currentProductCode, productCodeList[i].substring(productCodeList[i].indexOf(";") + 1), null);
					}
				}
				
				// SQC-5970 - [BYB phase 1] - NGK takes about 15 seconds to add "4 BYB" in the cart
				// If we are supposed to use the PosDoQuantum function and
				//  if there is grill information, we should grill every item together
				if (enableQuantum && productConfig.length > 1)
				{
					ExecuteGrillOperations(currentProductCode, productCodeList[i].substring(productCodeList[i].indexOf(";") + 1), quantity);
					
					// Resets the previous quantity (if any) before an other action
					PosDoQuantum(-1);
				}
			}
		}
		
		// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
		if((sessionSale.get("IS_NGK") == "true") && (retValue))
		{
			//PCODE@PROMO;PCODE;COMPCODE,QTY
			var productConfig = productCodeList[0].split(";");
			var promoFlag = productConfig[0].split("@PROMO").length > 1;
			if(promoFlag)
			{
				var stringTemp = productConfig[0].split("@PROMO")[0];
				customInfo = (stringTemp.split("@").length > 1) ? stringTemp.split("@")[1] : "";
			}
			else
			{
				customInfo = (productConfig[0].split("@").length > 1) ? productConfig[0].split("@")[1] : "";
			}
			
			if((customInfo != null) && (customInfo != undefined ) && (customInfo != ""))
			{
				if (typeof(PosSetProductCustomField) == "function")
				{
					var hlp1 = new BusinessObjectHelper();
					var pr = hlp1.GetSelectedProductTicket();
					var viewByProduct=new XML(hlp1.GetIndexedCompositionViewByProductTicket(pr));
					var desiredItem=null;
					if(1==viewByProduct.Product.length) {
						desiredItem = hlp1.GetSelectedProductTicket(); 
					}
					else {
						// look for productCode in the viewByProduct
						for each (var item in viewByProduct.Product) {
							if(PosNGKIsCYTProduct(item.@code)){
								desiredItem = hlp1.GetProductTicketByIndex(item.@index);
								break;
							}
						}
					}
					if(null!=desiredItem) {
						hlp1.SaveProductTicket(desiredItem);
						if(!PosSetProductCustomField("customInfo", customInfo,1))
						{
							API.dbg("NGK - ERROR. PosSetProductCustomField retuned false. [CustomInfo: " + customInfo + "]");
						}
					}
					else {
						API.dbg("NGK - ERROR. PosSetProductCustomField product not found.");
					}
				}
				else {
					API.dbg("NGK - ERROR. PosSetProductCustomField doesn't exist.");
				}
			}
		}
		return retValue;

		/**
	 	* @brief  - Gets the quantity of choices of the given product
	 	* @param  - productCode - product code to be verified
		* @return - The quantity of choices that the product has
	 	* @author - Renato Tsuchida
	 	* @since  - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	 	*/
		function lGetChoiceQuantity(productCode){
			if (!productCode){
				return 0;
			}
			var prod = csoProductInfo[productCode];
			if (!prod || (!prod.hasChoices && !prod.hasComposition)){
				return 0;
			}

			var choices = 0;
			if (prod.hasChoices){
				for each (var choice in prod.xmlNode.Choices..Component){
					var choiceConfig = csoProductInfo[choice.ProductCode.toString()].xmlNode;
					var hasAutoChoice = false;
					for each (var comp in choiceConfig.Composition.Component)
						if (Number(comp.DefaultQuantity) > 0){
							hasAutoChoice = true;					
							break;
						}
					if(!hasAutoChoice)					
						choices += Number(choice.DefaultQuantity)
				}
			}

			if (prod.hasComposition){
				for each (var comp in prod.xmlNode.Composition..Component){
					// SQC-9047 - [NGK5.15 - PDP] After order "2 x Sausage Burrito Meal" Order Basket displays "3 x Sausage Burrito Meal"
					choices += (lGetChoiceQuantity(comp.ProductCode) * Number(comp.DefaultQuantity.toString()));
				}
			}
			return choices;
		};

		function lGetProductCodeFromConfig(prodConfig){
			var productConfig = prodConfig.split(";");
			return productConfig[0].split("@")[0].split(",")[0].toString();
		};
	}
	
	/**
	 * @brief  - Injects the given items, performs all the grill operations and possible discount per item using and increment 
	 *           quantity items using PosSaleIncrementItem function.
	 * @param  - productCodeList - PCODE@PROMO:PCODE:COMPCODE,QTY
	 * @author - Jorge Olimpia
	 * @since  - SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
	 */
	function lInjectIncrementItems(productCodeList)
	{
		var qty = 0;

		// SQC-9038 - [NGK5.15 - PDP] Grills not applied correctly, using "Auto Grill", when default quantity of composition or choice is greater than 1
		var choiceFrequency = {};
		
		for (var i = 0; i < productCodeList.length; i++)
		{
			if (!productCodeList[i])
			{
				API.dbg("NGK - PosNGKInjectOrderJS: Invalid product code (productCode=[" + orderDetails + "])");
				return false;
			}
			
			//PCODE@PROMO;PCODE;COMPCODE,QTY
			var productConfig = productCodeList[i].split(";");
			// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
			var currentProductCode = productConfig[0].split("@")[0].split(",")[0];

			if (!choiceFrequency[currentProductCode]){
				choiceFrequency[currentProductCode] = 1;
			} else {
				choiceFrequency[currentProductCode]++;
			}

			var promoFlag = productConfig[0].split("@PROMO").length > 1;

			var quantity = (productConfig[0].split("@PROMO")[0].split(",").length > 1) ?
							productConfig[0].split("@PROMO")[0].split(",")[1] :
							"1";

			qty = Number(quantity) - 1;

			if (PosCSODoSaleJS(currentProductCode, null, null)) {
				if ((promoFlag) && PosDoPromoItem('1')) {
					API.dbg("NGK - PosNGKInjectOrderJS: Item has been promoted (productCode=[" + currentProductCode + "])");
				}
				
			} else {
				API.dbg("NGK - PosNGKInjectOrderJS: Could not finalize the sale (productCode=[" + currentProductCode + "])");
				return false;
			}
				
			if (productConfig.length > 1) {
				// SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
				// SQC-9038 - [NGK5.15 - PDP] Grills not applied correctly, using "Auto Grill", when default quantity of composition or choice is greater than 1
				var frequency = null;
				if (choiceFrequency[currentProductCode] > 1){
					frequency = choiceFrequency[currentProductCode];
				}
				ExecuteGrillOperations(currentProductCode, productCodeList[i].substring(productCodeList[i].indexOf(";") + 1), null, frequency);
			}
		}
		
		// CSO-291 - When select 2 the same CYT product are displayed incorrect on basket.
		if (qty > 0) {
			var orderView = new XML(hlp.getCurrentView());
			var kioskOrderView = new XML(getKioskView(orderView.toString()));
			
			// This current selection is possible because CYT order does not implements Suggestive Selling.
			var orderItem = kioskOrderView.Order.Item.(@currentSelected == "true").(@voided == "false").@index.toString();
			if (orderItem != undefined && !isNaN(Number(orderItem))) {
				KioskViewHelper.PosDoSelIndex(Number(orderItem));
				PosSaleIncrementItem(qty);
			}
		}
		
		return true;
	}
}

/**
 * @brief - Execute grill operations for the given product
 * @param - currentProductCode: current selected product code
 *		  - grillList: list of grills to be performed
 *		  - quantity: quantity of items to be grilled
 * @author - Kalil Garcia / Vladimir Dobroff / Vivian Cury
 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 * @modified - SQC-5970 - [BYB phase 1] - NGK takes about 15 seconds to add "4 BYB" in the cart
 * @modified - SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
 * @modified - SQC-9038 - [NGK5.15 - PDP] Grills not applied correctly, using "Auto Grill", when default quantity of composition or choice is greater than 1
 * @modified - SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
 */
function ExecuteGrillOperations(currentProductCode, grillList, quantity, choiceCount, productGrillIndex)
{
	// SQC-5970 - [BYB phase 1] - NGK takes about 15 seconds to add "4 BYB" in the cart
	// Must check if the quantity was informed and if it is a number.
	var qty = Number(quantity);
	// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
	// this array will store the history of portion base of items that are added/removed multiple times in the same grill command
	var arrayPortionType = [];

	if ((quantity != null) && (!isNaN(qty))) {
		// Resets the previous quantity (if any)
		PosDoQuantum(-1);
		// Sets the given quantity (if the quantity is ZERO a void item will be performed when it is not last line)
		PosDoQuantum(qty);
	}
	
	var deliveryLaterProductCode = lGetCSOUserInterfaceStringParameter("deliveryLaterProductCode", "");
	var productConfig = grillList.split(";");

	// SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
	var componentFrequency = {};

	if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId")))
	{
		API.dbg("NGK - ExecuteGrillOperations: Could not start grill process");
		return;
	}
	
	// CSO-294 - Kiosk 5.10 :: CYT performance
	// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
	// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
	if ((typeof(PosDoGrillProduct) == "function" || typeof(PosDoGrillList) == "function" || typeof(PosDoGrillListUnit) == "function") &&
		sessionSale.get("IS_NGK") == "true")
	{
		// SDO-10639 - Grill the BYB and click on "Add to cart", product will not for the cart
		var grillIndexSelected = false;
		// SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
		if (productGrillIndex)
		{
			PosDoSelGrillIndex(productGrillIndex);
			sessionSale.set("NGK_CURRENT_GRILL_INDEX", productGrillIndex);
			grillIndexSelected = true;
		}
		
		// CSO-1072 - [DRM] KIOSK C2 MR1 QR2: Customizations for Fries and Drinks in a meal are NOT displaying correctly in Order Review Screen when customer modify the same ingredients using edit button
		var lGrillViewXml = lGetGrillView();

		for (var j = 0; j < productConfig.length; j++)
		{
			if (productConfig[j] == "DELIVERY_LATER")
			{
				POSNGKPerformDeliveryLater(currentProductCode, deliveryLaterProductCode);
			}
			else
			{
				var grillConfig = productConfig[j].split(",");
				
				//Check if the grillable components are deeper in the product hierarchy
				//For example: 2506;2040;90000001,-1 -> Big Mac value meal (2506) that contains a Big Mac (2040)
				if (grillConfig.length == 1)
				{
					// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
					// Execute grill operations for the previous product, before changing the selection
					// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
					if (typeof(PosDoGrillListUnit) == "function" && GLOBAL_GRILL_STRING != "")
					{
						PosDoGrillListUnit(GLOBAL_GRILL_STRING);
						GLOBAL_GRILL_STRING = "";
					}
					else
					if (typeof(PosDoGrillList) == "function" && GLOBAL_GRILL_STRING != "")
					{
						PosDoGrillList(GLOBAL_GRILL_STRING);
						GLOBAL_GRILL_STRING = "";
					}
					
					// SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
					var grillConfigSplit = grillConfig[0].split("@");
					if (grillConfigSplit.length > 1)
					{
						currentProductCode = grillConfigSplit[1];
						PosDoSelGrillIndex(grillConfigSplit[0]);
						sessionSale.set("NGK_CURRENT_GRILL_INDEX", grillConfigSplit[0]);
						grillIndexSelected = true;
					}
					else
					{
						currentProductCode = grillConfig[0];
						// SDO-10639 - Grill the BYB and click on "Add to cart", product will not for the cart
						//Product changed, so the correct grill index must be selected before the grill operations are executed
						grillIndexSelected = false;
					}
					

					// SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
					if (!componentFrequency[currentProductCode]){
						componentFrequency[currentProductCode] = 1;
					} else{
						componentFrequency[currentProductCode]++;
					}

					continue;
				}
				
				var grillComponent = grillConfig[0];
				var grillQty = Number(grillConfig[1]);
				var grillOperation = grillQty > 0 ? "+" : "-";
				var absGrillQty = Math.abs(grillQty);
				var isPortionBased = ((grillConfig.length > 2) && (grillConfig[2] == "PORTION_BASED"));
				
				if (absGrillQty != 0)
				{
					// SDO-10639 - Grill the BYB and click on "Add to cart", product will not for the cart
					if (!grillIndexSelected)
					{
						// SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
						var compCount = 1;
						
						for each (var grillViewComponent in lGrillViewXml.Component)
						{
							if (grillViewComponent.@code.toString() != currentProductCode)
							{
								continue;
							}
							// SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
							// SQC-9038 - [NGK5.15 - PDP] Grills not applied correctly, using "Auto Grill", when default quantity of composition or choice is greater than 1
							var compFrequency = choiceCount ? choiceCount : componentFrequency[grillViewComponent.@code.toString()];
							if (compFrequency != undefined && grillViewComponent.@code.toString() == currentProductCode && compCount != compFrequency)
							{
								compCount++;
								continue;
							}
							
							PosDoSelGrillIndex(grillViewComponent.@index);
							sessionSale.set("NGK_CURRENT_GRILL_INDEX", grillViewComponent.@index);
							
							API.dbg("NGK - lExecuteGrillOperation: grillViewComponent.@index=[" + grillViewComponent.@index + "]) - Selected");
							
							//Grill view must be updated because the selected index has been changed
							lGrillViewXml = lGetGrillView();
							
							grillIndexSelected = true;
							break;
						}
					}
					// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
					// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
					lExecuteGrillOperationByProduct(lGrillViewXml, grillComponent, grillOperation, absGrillQty, isPortionBased, (typeof(PosDoGrillList) == "function")||(typeof(PosDoGrillListUnit) == "function"), arrayPortionType);
				}
			}
		}
		
		// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
		// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
		if (typeof(PosDoGrillListUnit) == "function" && GLOBAL_GRILL_STRING != "")
		{
			PosDoGrillListUnit(GLOBAL_GRILL_STRING);
			GLOBAL_GRILL_STRING = "";
		}
		else
		if (typeof(PosDoGrillList) == "function" && GLOBAL_GRILL_STRING != "")
		{
			PosDoGrillList(GLOBAL_GRILL_STRING);
			GLOBAL_GRILL_STRING = "";
		}
	}
	else
	{
		// SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
		if (productGrillIndex)
		{
			PosDoSelGrillIndex(productGrillIndex);
			sessionSale.set("NGK_CURRENT_GRILL_INDEX", productGrillIndex);
		}
		
		for (var j = 0; j < productConfig.length; j++)
		{
			if (productConfig[j] == "DELIVERY_LATER")
			{
				POSNGKPerformDeliveryLater(currentProductCode, deliveryLaterProductCode);
			}
			else
			{
				var grillConfig = productConfig[j].split(",");
				
				//Check if the grillable components are deeper in the product hierarchy
				//For example: 2506:2040:90000001,-1 -> Big Mac value meal (2506) that contains a Big Mac (2040)
				if (grillConfig.length == 1)
				{
					// SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
					var grillConfigSplit = grillConfig[0].split("@");
					if (grillConfigSplit.length > 1)
					{
						currentProductCode = grillConfigSplit[1];
						PosDoSelGrillIndex(grillConfigSplit[0]);
						sessionSale.set("NGK_CURRENT_GRILL_INDEX", grillConfigSplit[0]);
						productGrillIndex = grillConfigSplit[0];
					}
					else
					{
						currentProductCode = grillConfig[0];
					}
					
					// SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
					if (!componentFrequency[currentProductCode]){
						componentFrequency[currentProductCode] = 1;
					} else{
						componentFrequency[currentProductCode]++;
					}

					continue;
				}
				
				var grillComponent = grillConfig[0];
				var grillQty = Number(grillConfig[1]);
				var grillOperation = grillQty > 0 ? "+" : "-";
				var absGrillQty = Math.abs(grillQty);
				var isPortionBased = ((grillConfig.length > 2) && (grillConfig[2] == "PORTION_BASED"))
				
				if (absGrillQty != 0)
				{
					// SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
					// SQC-9038 - [NGK5.15 - PDP] Grills not applied correctly, using "Auto Grill", when default quantity of composition or choice is greater than 1
					// SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
					lExecuteGrillOperation(currentProductCode, grillComponent, grillOperation, absGrillQty, isPortionBased, (choiceCount ? choiceCount : componentFrequency[currentProductCode]), productGrillIndex);
				}
			}
		}
	}

	if (!PosDoGrillEnd("3"))
	{
		API.dbg("NGK - PosNGKInjectOrderJS: Could not end grill process");
	}
	
	return;

	/**
	 * @brief - Function used to execute a grill operation
	 * @param - componentCode: Component that will be grilled.
	 * @param - productCode: Represents the last sold product
	 * @param - operation: Grill operation to be executed: "+" or "-"
	 * @param - isPortionBased: true or false
	 * @param - compCount - The position of the component which will be grilled
	 * @author - Kalil Garcia, Vladimir Dobroff
	 * @modified - SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
	 * @modified - SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
	 */
	function lExecuteGrillOperation(productCode, componentCode, operation, absGrillQty, isPortionBased, compCount, indexSelected)
	{
		var currentIndex = -1;
		
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		var kioskGrillViewXml = lGetGrillView();

		// SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
		if (!indexSelected)
		{
			// SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
			var count = 1;
			
			for each (var grillComponent in kioskGrillViewXml.Component) 
			{
				if (grillComponent.@code.toString() != productCode)
				{
					continue;
				}

				// SQC-8994 - [NGK 5.15 - PDP] - Ordering "2 Cheeseburger Meal" with grill in both cheeseburger, all grills are applied in the same item
				if (compCount != undefined && grillComponent.@code.toString() == productCode && count != compCount){
					count++;
					continue;
				}
				
				PosDoSelGrillIndex(grillComponent.@index);
				API.dbg("NGK - lExecuteGrillOperation: grillComponent.@index=[" + grillComponent.@index + "]) - Selected");
				sessionSale.set("NGK_CURRENT_GRILL_INDEX", grillComponent.@index);
				
				kioskGrillViewXml = lGetGrillView();
				indexSelected = grillComponent.@index;
				
				break;
			}
		}
		
		var newGrillComponent = kioskGrillViewXml.Component.(@index == indexSelected);
		var itemIndex = -1;
		
		for each (var grillItem in newGrillComponent.Item)
		{
			API.dbg("NGK - lExecuteGrillOperation: grillItem.@code=[" + grillItem.@code + "])");
			if (grillItem.@code.toString() == componentCode)
			{
				itemIndex = Number(grillItem.@index);
				break;
			}
		}
		
		API.dbg("NGK - lExecuteGrillOperation: itemIndex=[" + itemIndex + "])");
		if (itemIndex < 0)
		{
			API.dbg("NGK - lExecuteGrillOperation: Could not find '" + componentCode + "'");
		}
		else
		{
			for (var k = 0; k < absGrillQty; k++)
			{
				if (isPortionBased)
				{
					PosCSODoGrillAddRemovePortionBasedJS(operation, itemIndex);
				}
				else
				{
					if (!PosDoGrillOper(operation, "-1", itemIndex.toString()))
					{
						break;
					}
				}
			}
		}
		
		return;
	}
	
	/**
	 * @brief - Function used to execute a grill operation
	 * @param - grillViewXml: View with the product and its components.
	 * @param - componentCode: Component that will be grilled.
	 * @param - operation: Grill operation to be executed: "+" or "-"
	 * @param - absGrillQty
	 * @param - isPortionBased: true or false
	 * @param - saveToString: true or false
	 * @param - arrayPortionType: array of portion based items (CSO-546)
	 * @author - Vivian Cury
	 * @since - CSO-294 - Kiosk 5.10 :: CYT performance
	 * @modified - SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
	 */
	function lExecuteGrillOperationByProduct(grillViewXml, componentCode, operation, absGrillQty, isPortionBased, saveToString, arrayPortionType)
	{
		if (isPortionBased)
		{
			PosNGKDoGrillAddRemovePortionBasedProduct(operation, componentCode.toString(), grillViewXml, absGrillQty, saveToString, arrayPortionType);
		}
		else
		{
			for (var k = 0; k < absGrillQty; k++) {
				// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
				if (saveToString)
				{
					GLOBAL_GRILL_STRING += (operation + ",-1," + componentCode.toString() + "|");
				}
				else
				{
					if (!PosDoGrillProduct(operation, "-1", componentCode.toString())) {
						break;
					}
				}
			}
		}
		return;
	}
}

function GetPointOfDistributionConfigByName(name){
	for each (var pointOfDistribution in csoConfigurationInfo.pointsOfDistribution){
		if (pointOfDistribution.name === name){
			return pointOfDistribution;
		}
	}
	return null;
}

function IsAtWorkingHours(pointOfDistributionConfig, customDateTime){
	var formatter = orderFormatter();
	var currentDateTime = new NPDate();

	// SDO-16333 - Wrong daypart attract displaying on NGK - CNMR-219
	if (customDateTime && IsValidDate(customDateTime)){
		currentDateTime = customDateTime;
	}
	
	var weekDay = formatter.formatWeekDay(currentDateTime.getDay());
	
	// SDO-16333 - Wrong daypart attract displaying on NGK - CNMR-219
	if(weekDay == undefined || !IsValidDate(currentDateTime))
		return false;
	
	// CSO-328 - NGK Date-specific Override of Working Hours - 7977439
	var specificDateWorkingHours = pointOfDistributionConfig.workingHours[formatter.formatDate(currentDateTime)]
	if (specificDateWorkingHours) {
		return lIsInAnyPeriod(currentDateTime, specificDateWorkingHours);
	}
	specificDateWorkingHours = pointOfDistributionConfig.workingHours[formatter.formatDate(currentDateTime, true)]
	if (specificDateWorkingHours) {
		return lIsInAnyPeriod(currentDateTime, specificDateWorkingHours);
	}
	
	var workingHoursOfCurrentWeekDay = pointOfDistributionConfig.workingHours[weekDay];
	
	if(workingHoursOfCurrentWeekDay) {
		return lIsInAnyPeriod(currentDateTime, workingHoursOfCurrentWeekDay);
	}
	
	return true;

	function lIsInAnyPeriod(currentDateTime, workingHours) {
		//CSO-62 - Kiosk V5 - Working hours should support more than one time period per weekday
		for each (var period in workingHours)
		{
			// CSO-213 - NGK occasionally showing breakfast during regular menu - NW-50
			if (formatter.formatTime(currentDateTime) >= period.startTime.toString().replace(":","") &&
				formatter.formatTime(currentDateTime) <= period.endTime.toString().replace(":",""))
			{
				return true;
			}
		}
		return false;
	};
}

/**
 * @brief - Check if a given object is a valid date, based on ECMA-262
 * @param - date: date to be validated
 * @return - true if the date is valid, false otherwise
 * @author - Robert Abreu
 * @since - SDO-16333 - Wrong daypart attract displaying on NGK - CNMR-219
 */
function IsValidDate(date)
{
	if (Object.prototype.toString.call(date) === "[object NPDate]") {
		// it is a date
		if (isNaN(date.getDate()) && isNaN(date.getMonth()) && isNaN(date.getYear())) {
			// date is not valid
			return false;
		}
		else {
			// date is valid
			return true;
		}
	}
	else {
		// not a date
		return false;
	}
}

function IsProductOfPointOfDistribution(productInfo, pointOfDistributionName){
	for each (var pointOfDistribution in productInfo.pointsOfDistribution){
		if (pointOfDistribution.name === pointOfDistributionName){
			return true;
		}
	}
	return false;
}

/**
 * @brief - Validate the time of a specific working hours configuration
 * @param - pointOfDistributionName: the id of the working hours
 * @return - true if the working hour is valid, false otherwise
 * @author - Vladimir Dobroff
 * @since - NGK
 * @modified - SDO-11589 - NP6 1.23 MR2 Release V4.1[NGK V5.10 QR5]:NGK freezes when suggestive selling is enabled throwing a script error on the NGK screen.
 */
function ProductCanBeOrderedInPointOfDistribution(pointOfDistributionName){
	var pointOfDistributionConfig = GetPointOfDistributionConfigByName(pointOfDistributionName);
	
	// SDO-11589 - NP6 1.23 MR2 Release V4.1[NGK V5.10 QR5]:NGK freezes when suggestive selling is enabled throwing a script error on the NGK screen.
	if (!pointOfDistributionConfig) return true;
	return pointOfDistributionConfig.isEnabled && IsAtWorkingHours(pointOfDistributionConfig);
}

/**
 * @brief - Validate the properties of a specific promotion
 * @param - promotionId: the id of the promotion to be validated
 * @return - true if the promotion passed all validations, false otherwise
 * @author - Vivian Cury
 * @since - NGK (French promotions)
 */
function PosNGKValidatePromotionPropertiesJS(promotionId)
{
	var order = getOrder();

	var validator = localPromotionValidator();
	var validationResult = validator.validate(csoLocalPromotions[promotionId], order);
	
	if (!validationResult.weekDayValidation.isValid) {
		PosCSOSendSyncMessageJS("DLG_NGK_SIMPLE_MSG", new Array(PosCSOI18nGetMessageJS("MSG_OK")), ["true", "false"], validationResult.weekDayValidation.errorMessage);
		return false;
	}
	
	/*Sale type, date and time validation is moved to PosCSOShowLocalPromotionsJS, as a result of SDO-6164*/
	
	if (!validationResult.minimumAmountValidation.isValid) {
		PosCSOSendSyncMessageJS("DLG_NGK_SIMPLE_MSG", new Array(PosCSOI18nGetMessageJS("MSG_OK")), ["true", "false"], validationResult.minimumAmountValidation.errorMessage);
		return false;
	}
	
	if (!validationResult.purchaseRequirementValidation.isValid) {
		PosCSOSendSyncMessageJS("DLG_NGK_SIMPLE_MSG", new Array(PosCSOI18nGetMessageJS("MSG_OK")), ["true", "false"], validationResult.purchaseRequirementValidation.errorMessage);
		return false;
	}
	
	return true;
}

/**
 * @brief - Validates the promotion barcode
 * @param - enteredBarcode: the barcode entered by the customer
 * @return - true if the barcode is ok, false otherwise
 * @author - Vivian Cury
 * @since - NGK (French promotions)
 */
function PosNGKCheckLocalPromotionBarcodeJS(enteredBarcode)
{
	var localPromoBarcode = csoLocalPromotions[sessionSale.get("SELECTED_LOCAL_PROMO_ID")]
								.xmlNode.Configuration.(@type == "Properties").Section.(@name == "Properties")
								.Parameter.(@name == "Barcode").@value;
	
	if (enteredBarcode != localPromoBarcode) {
		PosCSOSendSyncMessageJS(
			"DLG_NGK_SIMPLE_MSG", 
			new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
			["true", "false"], 
			PosCSOI18nGetMessageJS("CSO_LOCALPROMO_BARCODE_MISMATCH") + "|ScreenNameKey:CSO_LOCALPROMO_BARCODE_MISMATCH");
		return false;
	}
	
	return true;
}

/**
 * @brief - Revalidates the promotion minimum amount and purchase required at check out
 * @return - true if it's still valid, false otherwise
 * @author - Vivian Cury
 * @since - NGK (French promotions)
 */
function PosNGKValidatePromosJS()
{
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	var currentLang = sessionSale.get("LANGUAGE");
	var currentOrder = getOrder();

	for each (var group in kioskOrderView.Order.Group)
	{
		//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
		if (csoLocalPromoBarcodesInUse[group.@name.toString()] != undefined) {
			for each (var barcodePromo in csoLocalPromoBarcodesInUse[group.@name.toString()]) {
				if (currentOrder.amount < parseFloat(barcodePromo.@utilizationAmount)) {
					PosCSOSendSyncMessageJS(
						"DLG_NGK_SIMPLE_MSG", 
						new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
						["true", "false"], 
						PosCSOI18nGetMessageJS("CSO_LOCALPROMO_MINIMUM_AMOUNT_ON_DONE") + "|ScreenNameKey:CSO_LOCALPROMO_MINIMUM_AMOUNT_ON_DONE");
					return false;
				}
			}
			
			continue;
		}
		
		// SDO-8254 - NGK v5.3 - It is possible to avoid the requirements from Local Promotions with minimum amount and purchase required
		if (csoLocalPromotions[group.@localPromotionId.toString()] != undefined)
		{
			var promo = csoLocalPromotions[group.@localPromotionId.toString()];
			if (promo.xmlNode.Configuration.(@type == "Properties")
					.Section.(@name == "Properties").Parameter.(@name == "MinimumAmount") != undefined)
			{
				var promoMinAmount = promo.xmlNode.Configuration.(@type == "Properties")
										.Section.(@name == "Properties").Parameter.(@name == "MinimumAmount").@value.toString();
				
				if (currentOrder.amount < promoMinAmount)
				{
					PosCSOSendSyncMessageJS(
						"DLG_NGK_SIMPLE_MSG", 
						new Array(PosCSOI18nGetMessageJS("CSO_BTN_AUTO_EVM_POPUP_OK") + "@@@@@@EventLabelKey:CSO_BTN_AUTO_EVM_POPUP_OK,TranslateEventLabel:1"),
						["true", "false"], 
						PosCSOI18nGetMessageJS("CSO_LOCALPROMO_MINIMUM_AMOUNT_ON_DONE") + "|ScreenNameKey:CSO_LOCALPROMO_MINIMUM_AMOUNT_ON_DONE");
					return false;
				}
			}
			
			if (promo.xmlNode.Configuration.(@type == "Properties")
					.Section.(@name == "Properties").Parameter.(@name == "PurchaseRequired") != undefined &&
				promo.xmlNode.Configuration.(@type == "Properties")
					.Section.(@name == "Properties").Parameter.(@name == "PurchaseRequired")
					.@value.toString().toUpperCase() == "TRUE")
			{
				if (!currentOrder.hasPurchaseMade)
				{
					PosCSOSendSyncMessageJS(
						"DLG_NGK_SIMPLE_MSG", 
						new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
						["true", "false"], 
						PosCSOI18nGetMessageJS("CSO_LOCALPROMO_PURCHASE_REQUIRED_ON_DONE") + "|ScreenNameKey:CSO_LOCALPROMO_PURCHASE_REQUIRED_ON_DONE");
					return false;
				}
			}
			
			break;
		}
	}
	
	return true;
}

/**
 * @brief - Redeems the Local Promotions barcode
 * @param - barcodeScan - the barcode number scanned
 * @return - true if it's valide, false otherwise
 * @author - Vivian Cury
 * @since - NGK (French promotions)
 */
function PosNGKRedeemLocalPromotionBarcodeJS(barcodeScan)
{
	// Barcodes generated by Kiosk have exactly 10 numbers
	if (barcodeScan.length != 10) {
		var promoBarcode;
		
		// First lets search for the barcode in localpromotions-db.xml file
		for each (var promo in csoLocalPromotions) {
			var barcode = promo.xmlNode.Configuration.(@type == "Properties").Section.(@name == "Properties").Parameter.(@name == "Barcode");

			if (barcode != undefined) {
				if (barcode.@value == barcodeScan) {
					promoBarcode = promo;
					break;
				}
			}
		}
		
		if (promoBarcode != undefined) {
			// We found the promotion, now we need to validate it
			var promoNode = promoBarcode.xmlNode;
			var currentLang = sessionSale.get("LANGUAGE");
			var languageSectionXml = promoNode.Configuration.(@type == "Languages").Section.(@name == currentLang);
			
			if (!promoBarcode.display ||
				languageSectionXml == undefined ||
				languageSectionXml.Parameter.(@name == "Title") == undefined) {
				// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
				return {
					flag: false,
					msg: PosCSOI18nGetMessageJS("CSO_LOCALPROMO_NOT_AVAILABLE")
				};
			}
			
			var promotionValid = sValidatePromotionComposition(promoNode.Composition);

			if (promotionValid == "false" || promotionValid == "outage") {
				// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
				return {
					flag: false,
					msg: PosCSOI18nGetMessageJS("CSO_LOCALPROMO_NOT_AVAILABLE")
				};
			}
			
			var orderProperties = getOrder();
			var validator = localPromotionValidator();
			var validationResult = validator.validate(promoBarcode, orderProperties);
			var promotionProperties = promoNode.Configuration.(@type == "Properties").Section.(@name == "Properties");
			
			if (!validationResult.saleTypeValidation.isValid) {
				// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
				return {
					flag: false,
					msg: validationResult.saleTypeValidation.errorMessage
				};
			}
			
			if (!validationResult.dateValidation.isValid) {
				// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
				return {
					flag: false,
					msg: validationResult.dateValidation.errorMessage
				};
			}
			
			if (!validationResult.timeValidation.isValid) {
				// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
				return {
					flag: false,
					msg: validationResult.timeValidation.errorMessage
				};
			}
			
			if (!validationResult.weekDayValidation.isValid) {
				// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
				return {
					flag: false,
					msg: validationResult.weekDayValidation.errorMessage
				};
			}
			
			if (!validationResult.minimumAmountValidation.isValid) {
				// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
				return {
					flag: false,
					msg: validationResult.minimumAmountValidation.errorMessage
				};
			}
			
			if (!validationResult.purchaseRequirementValidation.isValid) {
				// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
				return {
					flag: false,
					msg: validationResult.purchaseRequirementValidation.errorMessage
				};
			}

			// SQC-4093 - Kiosk Local Promotion Drop 2 - Barcode scan has differents behaviors when it is scanned by "local promotion" and "I have a coupom" buttons
			var retVal=PosCSOShowPromotionConfirmationMessageJS(promoNode.@id);
			if(null==retVal) {
				return null;
			}
			else if (!retVal) {
				// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
				return {
					flag: false,
					msg: null
				};
			}
			
			// If we got here is because the validation is ok, so we call the Promotion Loop
			sessionSale.set("SELECTED_LOCAL_PROMO_ID", promoNode.@id);
			PosCSOStartPromotionJS();
			return {
				flag: true,
				msg: null
			};
		}
	} else {
		// This is a barcode generated promotion, we need to lock the file and get its content
		//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
		var xmlEvent = new XML('<Event type="ASYNC" name="DAT_LOCALPROMO_GET_BARCODE_INFO" />');
		var barcodeXml = new XML("<Parameter />");
		barcodeXml.@name = "Barcode";
		barcodeXml.@value = barcodeScan;
		
		var timeoutXml = new XML("<Parameter />");
		timeoutXml.@name = "Timeout";
		timeoutXml.@value = lGetCSOUserInterfaceStringParameter("barcodeFileLockTimeoutInSeconds", "180");
		
		xmlEvent.appendChild(barcodeXml);
		xmlEvent.appendChild(timeoutXml);
		
		PosSendUICmd(xmlEvent.toXMLString());
		return {
			flag: true,
			msg: null
		};
	}
	
	// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
	return {
		flag: false,
		msg: PosCSOI18nGetMessageJS("CSO_LOCALPROMO_NOT_FOUND")
	};
}

/**
 * @brief - Redeems Promotions barcode
 * @param - barcodeScan - the barcode number scanned
 * @return - true if it's valide, false otherwise
 * @author - MY
 * @since - CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
 */
function PosNGKRedeemPromotionBarcodeJS(barcodeScan) {
	var retMsg;
	var hasPercentageDiscount=PosNGKCheckDiscountValidJS(barcodeScan);
	var retVal=false;

	var numMaxPromo = Number(lGetParameterStr("localPromoMaxNumber", "1"));
	var numPromoSale = getQuantityOfPromotionInTheBasket();
	var hasDiscount=false;
	if(null!=sessionSale.get("NGK_DISCOUNT_BARCODE_APPLIED")) {
		hasDiscount=true;
	}
	if (numPromoSale >= numMaxPromo) {
		if((!hasDiscount)||(!hasPercentageDiscount)) {
			// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
			PosCSOSendSyncMessageJS(
				"DLG_NGK_SIMPLE_MSG", 
				new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
				["true", "false"], 
				PosCSOI18nGetMessageJS("CSO_LOCALPROMO_NOT_FOUND") + "|ScreenNameKey:CSO_LOCALPROMO_NOT_FOUND");
			return (false);
		}
	}
	else {
		// try local promotion first
		retMsg=PosNGKRedeemLocalPromotionBarcodeJS(barcodeScan);
		if(null==retMsg) {
			// return true to abort the workflow
			return true;
		}
		retVal=retMsg.flag;
	}
	
	if(false == retVal) {
		if (!hasPercentageDiscount) {
			if(retMsg.msg != null) {
				PosCSOSendSyncMessageJS("DLG_NGK_SIMPLE_MSG", new Array(PosCSOI18nGetMessageJS("MSG_OK")), ["true", "false"], retMsg.msg);
			}
		}
		else {
			// try global promotion
			var retDiscount=PosNGKApplyDiscountValidJS(barcodeScan);
			if(null==retDiscount) {
				// return true to abort the workflow
				return true;
			}
			retVal=retDiscount.flag;
			if(false==retVal) {
				if(retDiscount.msg != null) {
					if(retDiscount.msg != "") {
						PosShowMessage(retDiscount.msg);
					}
				}
				else
				if(retMsg.msg != null) {
					PosCSOSendSyncMessageJS("DLG_NGK_SIMPLE_MSG", new Array(PosCSOI18nGetMessageJS("MSG_OK")), ["true", "false"], retMsg.msg);
				}
			}
			else {
				if(retDiscount.goHome) {
					// forces transition to main screen at the end of the workflow
					retVal=false;
				}
			}
		}
	}
	return (retVal);
}

/**
 * @brief - Validates if the barcode can be used
 * @param - barcodeInfo - the barcode content
 * @return - true if it's valide, false otherwise
 * @author - Vivian Cury
 * @since - NGK (French promotions)
 */
function PosNGKValidateBarcodeInfoJS(barcodeInfo)
{
	if (barcodeInfo == "Locked") {
		PosCSOSendSyncMessageJS(
			"DLG_NGK_SIMPLE_MSG", 
			new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
			["true", "false"], 
			PosCSOI18nGetMessageJS("CSO_LOCALPROMO_BARCODE_LOCKED") + "|ScreenNameKey:CSO_LOCALPROMO_BARCODE_LOCKED");
		return false;
	}
	else if (barcodeInfo == "Used") {
		PosCSOSendSyncMessageJS(
			"DLG_NGK_SIMPLE_MSG", 
			new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
			["true", "false"], 
			PosCSOI18nGetMessageJS("CSO_LOCALPROMO_BARCODE_USED") + "|ScreenNameKey:CSO_LOCALPROMO_BARCODE_USED");
		return false;
	}
	else if (barcodeInfo == "New") {
		PosCSOSendSyncMessageJS(
			"DLG_NGK_SIMPLE_MSG", 
			new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
			["true", "false"], 
			PosCSOI18nGetMessageJS("CSO_LOCALPROMO_NOT_FOUND") + "|ScreenNameKey:CSO_LOCALPROMO_NOT_FOUND");
		return false;
	}
	
	var barcodeXML = new XML(barcodeInfo);
	var currentOrder = getOrder();
	var validator = barcodeLocalPromotionRedeemValidator();
	var validationResult = validator.validate(barcodeXML, currentOrder);
	
	if (!validationResult.dateValidation.isValid) {
		PosCSOSendSyncMessageJS("DLG_NGK_SIMPLE_MSG", new Array(PosCSOI18nGetMessageJS("MSG_OK")), ["true", "false"], validationResult.dateValidation.errorMessage);
		return false;
	}
	
	if (!validationResult.utilizationAmountValidation.isValid) {
		PosCSOSendSyncMessageJS("DLG_NGK_SIMPLE_MSG", new Array(PosCSOI18nGetMessageJS("MSG_OK")), ["true", "false"], validationResult.utilizationAmountValidation.errorMessage);
		return false;
	}
	
	return true;
}

/**
 * @brief - Validates the NGK specific parameters and log errors if necessary
 * @author - Vladimir Dobroff
 * @since - NGK 5.1
 */
function PosNGKValidateStoreDbConfigurationJS()
{
	if (sessionSale.get("IS_NGK") == "true")
	{
		lValidatePromotionalScreenProducts();
	}
	
	function lValidatePromotionalScreenProducts()
	{
		var promotionalScreenProducts = lGetCSOUserInterfaceStringParameter("promotionalScreenProducts", null);
		
		if (promotionalScreenProducts != null)
		{
			var splittedPromotionalScreenProducts = promotionalScreenProducts.split("|");
		
			for each (promotionalConfig in splittedPromotionalScreenProducts)
			{
				var splittedPromotionalConfig = promotionalConfig.split("=");
			
				if (splittedPromotionalConfig[0])
				{
					if (!ngkScreenInfo[splittedPromotionalConfig[0]])
					{
						API.dbg("Promotional screen number "+ splittedPromotionalConfig[0] + " defined in the parameter [promotionalScreenProducts] is invalid."); 
					}
					else
					{
						if (splittedPromotionalConfig[1])
						{
							var productConfig = splittedPromotionalConfig[1].split(",");
							
							for each (productCode in productConfig)
							{	
								if (!csoProductInfo[productCode] || !csoProductInfo[productCode].isValid)
								{
									API.dbg("Product code " + productCode + " associated to the promotional screen number " + splittedPromotionalConfig[0] + " in the parameter [promotionalScreenProducts] is invalid."); 
								}
							}
						}
					}
				}
			}
		}
	}
}

/**
 * @brief - Replicate a given string a given number of times
 * @param - value - value to be replicated
 * @param - length - how many times the value should be replicated
 */
function lStringReplicate(value, length) {
	var result = "";
	for (var i = 0; i < length; i++) {
		result += value;
	}
	return result;
}

/**
 * @brief - Format a currency value according to the mask provided
 * @param - b - currency mask
 * @param - a - currency value
 */
function sFormatCurrency(b,a) {
	if (!b || isNaN(+a))return a;var a=b.charAt(0)=="-"?-a:+a,j=a<0?a=-a:0,e=b.match(/[^\d\-\+#]/g),h=e&&e[e.length-1]||".",e=e&&e[1]&&e[0]||",",b=b.split(h),a=a.toFixed(b[1]&&b[1].length),a=+a+"",d=b[1]&&b[1].lastIndexOf("0"),c=a.split(".");if(!c[1]||c[1]&&c[1].length<=d)a=(+a).toFixed(d+1);d=b[0].split(e);b[0]=d.join("");var f=b[0]&&b[0].indexOf("0");if(f>-1)for(;c[0].length<b[0].length-f;)c[0]="0"+c[0];else+c[0]==0&&(c[0]="");a=a.split(".");a[0]=c[0];if(c=d[1]&&d[d.length-1].length){for(var d=a[0],f="",k=d.length%c,g=0,i=d.length;g<i;g++)f+=d.charAt(g),!((g-k+1)%c)&&g<i-c&&(f+=e);a[0]=f}a[1]=b[1]&&a[1]?h+a[1]:"";return(j?"-":"")+a[0]+a[1]
}

/**
 * @brief - Get the current weekday
 * @return - The first two letters of the weekday (SU, MO, TU, WE, TH, FR or SA)
 * @author - Vladimir
 * @since - CSO-33 - Retrofit from v4: IMPLEMENTATION OF THE DELI OF THE DAY - 6994607
 */
function lGetWeekday()
{
	currentWeekday = "";

	if (!GLOBAL_NGK_ORDER_START_DATE)
	{
		GLOBAL_NGK_ORDER_START_DATE = new Date();
	}

	switch(GLOBAL_NGK_ORDER_START_DATE.getDay())
	{
		case 0:
			currentWeekday = "SU";
			break;
		case 1:
			currentWeekday = "MO";
			break;
		case 2:
			currentWeekday = "TU";
			break;
		case 3:
			currentWeekday = "WE";
			break;
		case 4:
			currentWeekday = "TH";
			break;
		case 5:
			currentWeekday = "FR";
			break;
		case 6:
			currentWeekday = "SA";
			break;
	}
	
	return currentWeekday;
}

/**
 * @brief - Get the number of days from current month
 * @return - Number of days from current month
 * @author - Dalton Pericles de Almeida
 * @since - CSO-359 - NGK to Support Fresh Fruit Fridays - 7460875
 */
function lGetQuantityDaysCurrentMonth()
{
	if (!GLOBAL_NGK_ORDER_START_DATE)
	{
		GLOBAL_NGK_ORDER_START_DATE = new Date();
	}
	/*
		This function uses a behaviour of the Date class that allows the third parameter (the day of the month) to be set
		outside of the regular range (1 - 31).
		When set as "32" the returned date will "overflow" to the next month. 
		Depending on the number of days that overflowed, it is possible to calculate the number of days of the desired month.	
	*/
	return (32 - new Date(GLOBAL_NGK_ORDER_START_DATE.getFullYear(), GLOBAL_NGK_ORDER_START_DATE.getMonth(), 32).getDate());
}

/**
 * @brief - Check if the current week is the first week of month
 * @return - The true if it is the first week
 * @author - Dalton Pericles de Almeida
 * @since - CSO-359 - NGK to Support Fresh Fruit Fridays - 7460875
 */
function lIsFirstWeek()
{
	if (!GLOBAL_NGK_ORDER_START_DATE)
	{
		GLOBAL_NGK_ORDER_START_DATE = new Date();
	}
	if(GLOBAL_NGK_ORDER_START_DATE.getDate() <= 7) return true;
	
	return false;
}

/**
 * @brief - Check if the current week is the last week of month
 * @return - The true if it is the last week
 * @author - Dalton Pericles de Almeida
 * @since - CSO-359 - NGK to Support Fresh Fruit Fridays - 7460875
 */
function lIsLastWeek()
{
	if (!GLOBAL_NGK_ORDER_START_DATE)
	{
		GLOBAL_NGK_ORDER_START_DATE = new Date();
	}
	
	if((lGetQuantityDaysCurrentMonth() - GLOBAL_NGK_ORDER_START_DATE.getDate()) < 7) return true;
	
	return false;
}

/**
 * @brief - Get the information about the Deli of The Day for a given product
 * @param - productCode - product whose configuration will be checked
 * @return - Structure with the Deli Of The Day product code, i18n string, and color.
 *           Will return null if the configuration is invalid for the current day or if it is not configured correctly
 * @author - Vladimir
 * @since - CSO-33 - Retrofit from v4: IMPLEMENTATION OF THE DELI OF THE DAY - 6994607
 */
function GetDeliOfTheDayInfo(productCode)
{
	if (!productCode) return null;
	
	var productInfo = csoProductInfo[productCode];	
	if (!productInfo) return null;
	
	// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
	if (productInfo.xmlNode != null || productInfo.xmlNode != undefined)
	{
		var deliParameter = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSODeliOfTheDay");
		if (!(deliParameter.length() > 0)) return null;
		
		deliOfTheDayInfo = deliParameter[0].@value.toString().split("|");
		
		//Validate day of the week
		var deliWeekdays = deliOfTheDayInfo[0];
		if (!deliWeekdays) return null;
		
		var currentWeekday = lGetWeekday();
		// CSO-359 - NGK to Support Fresh Fruit Fridays - 7460875
		var isFirstWeek = lIsFirstWeek();
		var isLastWeek = lIsLastWeek();
		var splittedWeekdays = deliWeekdays.split(",");
		var validWeekday = false;
		
		// CSO-359 - NGK to Support Fresh Fruit Fridays - 7460875
		for each (var weekdayData in splittedWeekdays)
		{
			// CSO-359 - NGK to Support Fresh Fruit Fridays - 7460875
			var splittedWeekdayData = weekdayData.split(":");
			
			// CSO-359 - NGK to Support Fresh Fruit Fridays - 7460875
			if (currentWeekday == splittedWeekdayData[0].toUpperCase())
			{
				// CSO-359 - NGK to Support Fresh Fruit Fridays - 7460875
				if (splittedWeekdayData.length > 1) 
				{
					var weekBeginOrEnd = splittedWeekdayData[1].toUpperCase();
					
					if ((weekBeginOrEnd == "BOMONTH") || (weekBeginOrEnd == "EOMONTH")) 
					{
						if((weekBeginOrEnd == "BOMONTH") && (isFirstWeek))
						{
							validWeekday = true;
						}
						else if((weekBeginOrEnd == "EOMONTH") && (isLastWeek))
						{
							validWeekday = true;
						}
						break;
					}
					else
					{
						PosCSOLog(CSOLOG_INFORMATION, 18435, "[GetDeliOfTheDayInfo] The string [" + weekBeginOrEnd + "] was not identified as [BOMONTH] or [EOMONTH]. Only the weekday [" + currentWeekday + "] will be considered");
						validWeekday = true;
						break;
					}
				}
				else 
				{
					validWeekday = true;
					break;
				}
			}
		}
		
		if (!validWeekday) return null;
		
		//Validate Deli Of The Day product code
		var deliProductCode = deliOfTheDayInfo[1];
		
		//SQC-5087 - Deli Of The Day non salable products issue
		if ((!deliProductCode) ||
			(!csoProductInfo[deliProductCode]) ||
			(!csoProductInfo[deliProductCode].xmlNode) ||
			(csoProductInfo[deliProductCode].xmlNode.@statusCode.toString() != "ACTIVE") ||
			(csoProductInfo[deliProductCode].xmlNode.@salable.toString() != "true"))
		{
			API.dbg("GetDeliOfTheDayInfo - Invalid Deli Of The Day product for: " + productCode);
			return null;
		}
		
		//Validate i18n
		var deliI18n = deliOfTheDayInfo[2];
		if (!deliI18n) deliI18n = "CSO_BTN_DELI_OF_THE_DAY";
		
		//Validate color
		var deliColor = deliOfTheDayInfo[3];
		if (!deliColor) deliColor = "RED";
		
		return {
			deliOfTheDayProductCode: deliProductCode,
			deliOfTheDayI18nKey: deliI18n,
			deliOfTheDayColor: deliColor
		};
	}
}

/**
 * @brief  - Get the information about the time restriction availability for a given product
 * @param  - productCode: product whose configuration will be checked
 *         - level      : number of levels of Composition that will be checked
 * @return - Structure with the product code and a set of period of time related to its time restriction.
 *           Will return null if the configuration is invalid, is not configured correctly or none of the conditions are true.
 * @author - Jorge Olimpia
 * @since  - CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057 
 */
function GetTimeRestrictionProductAvailability(productCode, level)
{
	if (!productCode || isNaN(level)) return null;
	var productInfo = csoProductInfo[productCode];	
	if (!productInfo) return null;
	if (productInfo.xmlNode == undefined || productInfo.xmlNode == null) {
		return null;
	}
	var formatter = orderFormatter();
	
	// CSO-252 - NGK 5.9 - Time based item configuration preventing customers from completing their order. - NW-132
	var currentDateTime = GLOBAL_NGK_ORDER_START_DATE;
	if (currentDateTime == undefined || currentDateTime == null) {
		currentDateTime = new Date();
	}
	
	var timeRestrictionsPeriod = "";
	var isProductAvailable = false;
	var timeRestrictionParameter = productInfo.xmlNode.TimeRestrictions;
	if (timeRestrictionParameter == undefined || timeRestrictionParameter == null) {
		if (Number(level) < 1) {
			for each (var component in productInfo.xmlNode.Composition.Component) {
				var componentTimeRestriction = GetTimeRestrictionProductAvailability(component.ProductCode, Number(level) + 1);
				if (componentTimeRestriction != null) {
					timeRestrictionsPeriod = componentTimeRestriction.timeRestrictionsPeriod;
					break;
				}
			}
		}
		else {
			isProductAvailable = true;
		}
	}
	else {
		for each (var tr in timeRestrictionParameter.AllowedTime) {
			var trStartTime = tr.@startTime.toString();
			var trEndTime = tr.@endTime.toString();
			if ((trStartTime == undefined || trStartTime == null || trStartTime == "") ||
				(trEndTime == undefined || trEndTime == null || trEndTime == "")) {
				continue;
			}
			timeRestrictionsPeriod += trStartTime + "," + trEndTime + "|";
			
			if (trStartTime.replace(":","") < trEndTime.replace(":","")) {
			if (formatter.formatTime(currentDateTime) >= trStartTime.replace(":","") && 
				formatter.formatTime(currentDateTime) <= trEndTime.replace(":","")) {
				isProductAvailable = true;
				break;
				}
			}
			else {
				if (formatter.formatTime(currentDateTime) >= trStartTime.replace(":","") && 
					trEndTime.replace(":","") <= formatter.formatTime(currentDateTime)) {
					isProductAvailable = true;
					break;
				}
			}
			
			
		}
		// Remove extra pipe at the end of the string
		if (timeRestrictionsPeriod != undefined && timeRestrictionsPeriod != null && timeRestrictionsPeriod.length > 1) {
			timeRestrictionsPeriod = timeRestrictionsPeriod.substring(0, timeRestrictionsPeriod.length - 1);
		}
	}
	if (!isProductAvailable && timeRestrictionsPeriod != null && timeRestrictionsPeriod.length > 0) {
		return {
		timeRestrictionsPeriod: timeRestrictionsPeriod
		};
	}
	else {
		return null;
	}
}
/**
 * @brief - Sends a message to the UI with the nutritional information of one or more product codes
 * @author - Vivian Cury
 * @param - ProductCodes - The products that should be added to the message
 * @param - IgnoreChoices - A boolean that indicates if the choices of the product should be ignored.
 * @param - CartIndex - index of the item in cart (optional). If the parameter exists the allergen list will be generated based on items actually sold in cart
 * @param - AllowAllergens - A boolean that indicates whether allergen alert activation should be enabled if it is possible.
 * @param - AllowSale - A boolean that indicates whether sale operation should be enabled if it is possible.
 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
 * @modified - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 *             CSO-491 - nutrition info pop-up - buttons add to cart and signal
 *             CSO-508 - Remove SIGNAL button of allergen/nutritional popup when opened during value meal loop, suggestive selling, upselling and promotions.
 */
function PosCSOShowNutritionalInformation(ProductCodes, IgnoreChoices, CartIndex, AllowAllergens, AllowSale)
{
	// SQC-5189 - NGK5.3 Display Nutritional Information - Nutritional Information not dislayed for choice items
	if (ProductCodes == "0" || ProductCodes == "")
	{
		API.dbg("Invalid product code [" + ProductCodes + "]");
		return false;
	}
	
	// Adding protection in case someone does not update the binaries
	if (IgnoreChoices == undefined || IgnoreChoices == "")
	{
		API.dbg("Expected parameter IgnoreChoices missing!! Please, check the binaries version!");
		IgnoreChoices = "false";
	}
	
	var xmlResult = new XML('<Event type="ASYNC" name="DLG_NUTRITIONAL_INFO" />');
	var productXml = <Products rootCodes={ProductCodes}/>;
	
	var numberOfItems = 0;
	var codes = ProductCodes.split("|");
	// CSO-101 - [NGKv5.3] Sandwich not shown in Value Meal nutrition popup when opened from order basket
	var codesVisited = "";

	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	var viewIndex=-1;
	var lastIndex=0;
	var allAllergens=null;
	var signaledAllergens=null;
	var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");

	var xmlView = null;
	if ( ("true"==csoEnableAllergensEnhancement) && CartIndex && !PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") ) {
		xmlView = new XML(hlp.getCurrentView());
		
		var retVal=lFindIndexInView(CartIndex, xmlView);
		viewIndex=retVal.first;
		lastIndex=retVal.last;
	}
	
	for each (var code in codes)
	{
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		if (viewIndex >= 0) {
			allAllergens=[];
			signaledAllergens=[];
			// get the allergens based on cart dynamically instead of statically from product-db
			for (var iIndex=viewIndex; iIndex<lastIndex; iIndex++) {
				if(code==xmlView.ItemView[iIndex].productCode) {
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allAllergens=lFindAllergensInCart([], iIndex, xmlView.ItemView, true, false, false);
					if (allAllergens.length>0) {
						// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
						signaledAllergens=lFindAllergensInCart(selectedAllergensList, iIndex, xmlView.ItemView, false, false, false);
					}

					break;
				}
			}
		}
		numberOfItems += addItemInformation(code, productXml, allAllergens, signaledAllergens);
	}
	
	xmlResult.appendChild(productXml);
	
	if (numberOfItems == 0)
	{
		API.dbg("There are no nutritional information to be displayed for product codes [" + ProductCodes + "]");
		return false;
	}

	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	// CSO-491 - nutrition info pop-up - buttons add to cart and signal
	var isLayout16x9 = PosCSOCheckSharedContext("NGK_LAYOUT", "16X9");
	if (!isLayout16x9 && csoEnableAllergensEnhancement == "true") {
		var buttonsXml = 
			<Buttons>
				<Button type="Close" title={PosCSOI18nGetMessageJS("CSO_ALLERGENS_BTN_CLOSE", "CSO_ALLERGENS_BTN_CLOSE")}/>
			</Buttons>;
		
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		// CSO-508 - Remove SIGNAL button of allergen/nutritional popup when opened during value meal loop, suggestive selling, upselling and promotions.
		if (AllowAllergens == undefined || AllowAllergens == "") AllowAllergens = "false";
		if (AllowAllergens.toLowerCase() == "true") {
			buttonsXml.appendChild(
				<Button type="ActivateAllergenAlerts" title={PosCSOI18nGetMessageJS("CSO_BTN_ACTIVATE_ALLERGENS_ALERTS", "CSO_BTN_ACTIVATE_ALLERGENS_ALERTS")}/>);
		}
		
		if (AllowSale == undefined || AllowSale == "") AllowSale = "false";
		if (AllowSale.toLowerCase() == "true") {
			buttonsXml.appendChild(
				<Button type="AddToCart" title={PosCSOI18nGetMessageJS("CSO_ALLERGENS_BTN_ADD_TO_CART", "CSO_ALLERGENS_BTN_ADD_TO_CART")}/>);
		}

		xmlResult.appendChild(buttonsXml);
	}

	return PosSendUICmd(xmlResult.toXMLString());
	
	/**
	 * @brief - Adds information for an item that could be a product or a value meal
	 * @author - Vivian Cury
	 * @param - productCode - The product code to be added
	 * @param - xml - The product xml
	 * @param - allAllergens - list of all allergens of the item in cart
	 * @param - signalAllergens - list of signalled allergens of the item in cart
	 * @return - The number of products added
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 * @modified - CSO-282 - CYT Redesign
	 */
	function addItemInformation(productCode, xml, allAllergens, signaledAllergens, ignoreRawItem)
	{
		var itemCount = 0;
		
		// SQC-5189 - NGK5.3 Display Nutritional Information - Nutritional Information not dislayed for choice items
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (productCode == "0" || productCode == "" || csoProductInfo[productCode] == undefined || csoProductInfo[productCode].xmlNode == undefined)
		{
			API.dbg("Invalid product code [" + productCode + "]");
			return 0;
		}
		
		if (csoProductInfo[productCode].xmlNode.@productClass == "PRODUCT")
		{
			itemCount += addProductInformation(productCode, xml, allAllergens, signaledAllergens);
		}
		else if (csoProductInfo[productCode].xmlNode.@productClass == "VALUE_MEAL")
		{
			itemCount += addValueMealInformation(productCode, xml, allAllergens, signaledAllergens);
		}
		// CSO-282 - CYT Redesign
		else if (!ignoreRawItem && csoProductInfo[productCode].xmlNode.@productClass == "RAW_ITEM")
		{
			itemCount += addRawItemInformation(productCode, xml, allAllergens, signaledAllergens);
		}
		
		return itemCount;
	}
	
	/**
	 * @brief - Adds information for a product code
	 * @author - Vivian Cury
	 * @param - productCode - The product code to be added
	 * @param - xml - The product xml
	 * @param - allAllergens - list of all allergens of the item in cart
	 * @param - allergens - list of signalled allergens of the item in cart
	 * @return - The number of products added
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 * @modified - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	 * @modified - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
	 */
	function addInformation(productCode, xml, allAllergens, allergens)
	{
		var nutritionValid = false;
		var dailyValueValid = false;
		var language = sessionSale.get("LANGUAGE");
		var productInfo = csoProductInfo[productCode];
		
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		var isLayout16x9 = PosCSOCheckSharedContext("NGK_LAYOUT", "16X9");

		// CSO-101 - [NGKv5.3] Sandwich not shown in Value Meal nutrition popup when opened from order basket
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (productInfo.xmlNode != undefined &&
			productInfo.xmlNode.CustomParameters != undefined &&
			productInfo.xmlNode.CustomParameters.Parameter != undefined &&
			codesVisited.indexOf(productCode) < 0)
		{
			var itemXml = new XML("<Item />");
			
			itemXml.@name = productInfo.names[language].csoName;
			itemXml.@code = productCode;
			itemXml.@image = productInfo.csoImages.largeImage;
			
			var nutritionXml = new XML("<NutritionalInfo />");
			var DVXml = new XML("<DailyValues />");
			
			// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
			if ((csoLoadCustomEnergyInformation != "") && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true ))
			{
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				var customEnergy = "";
				
				// SQC-7608 - [NGK 5.12] US Nutrition Enhancement - Nutritional information icon not displayed in the Order Basket even the product is configured with nutritional information
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if ((productInfo.energyInfo) &&
					(productInfo.energyInfo.EnergyInformation != "") &&
					((!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true)))
				{
					customEnergy = productInfo.energyInfo.EnergyInformation;				
				}
				
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if ((productInfo.energyInfo) &&
					(productInfo.energyInfo.CalculatedEnergyInformation != "") &&
					(csoCalculateEnergyInformation) &&
					(PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))
				{
					customEnergy = RoundEnergy(productInfo.code, productInfo.energyInfo.CalculatedEnergyInformation);
				}
			
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if(customEnergy != "")
				{
					nutritionValid = true;
					
					var infoXml = new XML("<Info />");

					// Check what type of energy is using.
					var nutritionalInfoDisplayOnMainMenu = lGetCSOUserInterfaceStringParameter("nutritionalInfoDisplayOnMainMenu", "");
						
					if ((nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KCAL") || (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KJ")){
						var type = "";
						if (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KCAL") type = PosCSOI18nGetMessageJS("nutritionalInfoKCal");
						if (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KJ") type = PosCSOI18nGetMessageJS("nutritionalInfoEnergy");
						infoXml.@value = PosCSOI18nGetMessageJS(customEnergy);
						infoXml.@type = type;
						nutritionXml.appendChild(infoXml);
					}
				}			
			}
			
			for each (var parameter in productInfo.xmlNode.CustomParameters.Parameter)
			{
				if (parameter.@name.indexOf("nutritionalInfo") == 0)
				{
					// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
					// CSO-710 - Nutritional info values not being displayed
					if ((parameter.@name == "nutritionalInfoEnergyBeverageCustomerSelfPourKCal") ||
						(parameter.@name == "nutritionalInfoEnergyBeverageCustomerSelfPour")     ||
						(parameter.@name == "nutritionalInfoEnergyRange")                        ||
						(parameter.@name == "nutritionalInfoEnergySuffix")                       ){
						
						// ignore those parameters
						// - nutritionalInfoEnergyRange
						// - nutritionalInfoEnergySuffix
						// - nutritionalInfoEnergyBeverageCustomerSelfPour
						// - nutritionalInfoEnergyBeverageCustomerSelfPourKCal
						
						continue;
						
					}
					// CSO-710 - Nutritional info values not being displayed
					else if (((csoLoadCustomEnergyInformation != "") || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true )) &&
					         ((parameter.@name == "nutritionalInfoEnergy") || (parameter.@name == "nutritionalInfoKCal"))) {
							 
						// ignore these parameters because they were already included previously
						
						continue;
						
					}
					else if ((parameter.@name == "nutritionalInfoAllergensCSO")&&(("true" != csoEnableAllergensEnhancement)||(isLayout16x9)))
					{
						nutritionValid = true;
						
						var allergens = parameter.@value.toString().split("|");
						for each (var allergen in allergens)
						{
							var infoXml = new XML("<Info />");
							infoXml.@type = PosCSOI18nGetMessageJS("nutritionalInfoAllergenes");
							infoXml.@value = PosCSOI18nGetMessageJS(allergen);
							
							nutritionXml.appendChild(infoXml);
						}
					}
					else if (parameter.@name.indexOf("DV") >= 0)
					{
						dailyValueValid = true;
						
						var valueXml = new XML("<Value />");
						valueXml.@description = PosCSOI18nGetMessageJS(parameter.@name.toString()) + ": " + PosCSOI18nGetMessageJS(parameter.@value.toString());
						
						DVXml.appendChild(valueXml);
					}
					else
					{
						// CSO-710 - Nutritional info values not being displayed
						nutritionValid = true;
						
						// CSO-710 - Nutritional info values not being displayed
						if ((parameter.@name != "nutritionalInfoAllergensCSO")||(("true" != csoEnableAllergensEnhancement)||(isLayout16x9))) {
							var infoXml = new XML("<Info />");
							// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
							var name = parameter.@name.toString();
							var value = parameter.@value.toString()
					
							infoXml.@type = PosCSOI18nGetMessageJS(name);
							infoXml.@value = PosCSOI18nGetMessageJS(value);
							nutritionXml.appendChild(infoXml);
						}
					}
				}
			}
			
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			if (("true" == csoEnableAllergensEnhancement)&&(!isLayout16x9)) {	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
				if(!allAllergens) {
					var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
					
					allAllergens=[];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allAllergens = lFindAllergens(allAllergens, productCode.toString(), [], false, true, false, true);
					allergens=[];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allergens = lFindAllergens(allergens, productCode.toString(), selectedAllergensList, false, true, false, false);
				}
				
				if (allAllergens.length>0) {
					nutritionValid = true;
				}
				for each (var allergen in allAllergens)
				{
					var infoXml = new XML("<Info />");
					infoXml.@type = PosCSOI18nGetMessageJS("nutritionalInfoAllergensCSO");
					infoXml.@value = PosCSOI18nGetMessageJS(allergen);
					for each (var signaledAllergen in allergens) {
						if(signaledAllergen==allergen) {
							infoXml.@active="true";
							break;
						}
					}
					// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
					// UI needs to check if this item was removed
					infoXml.@code=productCode;
					nutritionXml.appendChild(infoXml);
				}
			}
			
			if (nutritionValid)
			{
				itemXml.appendChild(nutritionXml);
			}
			
			if (dailyValueValid)
			{
				itemXml.appendChild(DVXml);
			}
			
			if (nutritionValid || dailyValueValid)
			{
				xml.appendChild(itemXml);
				codesVisited += productCode + "|";
			}
		}
		
		if (nutritionValid || dailyValueValid)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	
	/**
	 * @brief - Adds information for a value meal
	 * @author - Vivian Cury
	 * @param - productCode - The product code to be added
	 * @param - xml - The product xml
	 * @param - allAllergens - list of all allergens of the item in cart
	 * @param - signalAllergens - list of signalled allergens of the item in cart
	 * @return - The number of products added
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 */
	function addValueMealInformation(productCode, xml, allAllergens, signaledAllergens)
	{
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined){
			return null;
		}
		
		var itemCount = 0;
		var productInfo = csoProductInfo[productCode];
		
		for each (var component in productInfo.xmlNode.Composition.Component)
		{
			// CSO-282 - CYT Redesign
			itemCount += addItemInformation(component.ProductCode.toString(), xml, allAllergens, signaledAllergens, true);
		}
		
		var isCCM = lIsCCM(productInfo.xmlNode);
		
		// CSO-101 - [NGKv5.3] Sandwich not shown in Value Meal nutrition popup when opened from order basket
		if (IgnoreChoices.toLowerCase() != "true")
		{
			for each (var choice in productInfo.xmlNode.Choices.Component)
			{
				var referenceCode = null;
				if(isCCM)
				{
					referenceCode = lGetCSOCCMBaseProduct(choice.ProductCode.toString());
				}
				else
				{
					// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
					referenceCode = getChoiceReferenceCode(choice.ProductCode.toString());
				}

				if (referenceCode != null)
				{
					// CSO-282 - CYT Redesign
					itemCount += addItemInformation(referenceCode, xml, null, null, true);
				}
			}
		}
		
		return itemCount;
	}
	
	/**
	 * @brief - Adds information for a product
	 * @author - Vivian Cury
	 * @param - productCode - The product code to be added
	 * @param - xml - The product xml
	 * @param - allAllergens - list of all allergens of the item in cart
	 * @param - signalAllergens - list of signalled allergens of the item in cart
	 * @return - The number of products added
	 * @since - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	 */
	function addProductInformation(productCode, xml, allAllergens, signaledAllergens)
	{
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined){
			return null;
		}
		
		var itemCount = 0;
		var productInfo = csoProductInfo[productCode];
		
		itemCount += addInformation(productCode, xml, allAllergens, signaledAllergens);
		
		// CSO-101 - [NGKv5.3] Sandwich not shown in Value Meal nutrition popup when opened from order basket
		if (IgnoreChoices.toLowerCase() != "true")
		{
			for each (var choice in productInfo.xmlNode.Choices.Component)
			{
				var referenceCode = getChoiceReferenceCode(choice.ProductCode.toString());
				if (referenceCode)
				{
				    // CSO-282 - CYT Redesign - 8024409
					itemCount += addItemInformation(referenceCode, xml, null, null, true);
				}
			}
		}
		
		return itemCount;
	}
	
	/**
	 * @brief - Adds information for a product
	 * @author - Vladimir Dobroff
	 * @param - productCode - The product code to be added
	 * @param - xml - The product xml
	 * @param - allAllergens - list of all allergens of the item in cart
	 * @param - signalAllergens - list of signalled allergens of the item in cart
	 * @return - The number of products added
	 * @since - CSO-282 - CYT Redesign
	 */
	function addRawItemInformation(productCode, xml, allAllergens, signaledAllergens)
	{
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined){
			return null;
		}
		
		var itemCount = 0;
		var productInfo = csoProductInfo[productCode];
		
		itemCount += addInformation(productCode, xml, allAllergens, signaledAllergens);
		
		return itemCount;
	}
	
	/**
	 * @brief - Gets the choice reference product code
	 * @author - Vivian Cury
	 * @param - choiceCode - The choice code
	 * @return - Reference product code, if any
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 * @modified - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	 */
	function getChoiceReferenceCode(choiceCode)
	{
		if (!choiceCode)
		{
			return undefined;
		}

		var productInfo = csoProductInfo[choiceCode];

		if (productInfo && productInfo.isValid)
		{
			var CSOReferenceProductCode = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOReferenceProductCode").@value.toString();
			
			if (CSOReferenceProductCode)
			{
				var refProductInfo = csoProductInfo[CSOReferenceProductCode];
				
				if (refProductInfo && refProductInfo.isValid)
				{
					return CSOReferenceProductCode;
				}
			}
		}
		
		return undefined;
	}
}

/**
 * @brief - Verifies if there is nutritional information available for one or more product codes
 * @author - Vivian Cury
 * @param - ProductCodes - The product codes to be verified
 * @return - true if the products have nutritional information
		   - false otherwise
 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
 */
function isNutritionalInfoAvailable(ProductCodes)
{
	if (ProductCodes == "0")
	{
		API.dbg("Invalid product code [" + ProductCodes + "]");
		return false;
	}
	
	var codes = ProductCodes.split("|");
	for each (var code in codes)
	{
		if (isItemInfoAvailable(code))
		{
			//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
			//API.dbg("There is nutritional information available for product codes [" + ProductCodes + "]");
			return true;
		}
	}
	
	//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
	//API.dbg("There are no nutritional information available for product codes [" + ProductCodes + "]");
	return false;
	
	/**
	 * @brief - Verifies if there is nutritional information available for an item that could be a product or a value meal
	 * @author - Vivian Cury
	 * @param - productCode - The product code to be verified
	 * @return - true if the item have nutritional information
			   - false otherwise
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 * @modified - CSO-282 - CYT Redesign
	 *           - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
	 */
	function isItemInfoAvailable(productCode, ignoreRawItem)
	{
		if (productCode == "0")
		{
			return false;
		}

		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22		
		if (csoProductInfo[productCode] == null || csoProductInfo[productCode] == undefined)
		{
			return false;
		}

		if (csoProductInfo[productCode].xmlNode.@productClass == "PRODUCT")
		{
			if (isProductInfoAvailable(productCode))
			{
				return true;
			}
		}
		else if (csoProductInfo[productCode].xmlNode.@productClass == "VALUE_MEAL")
		{
			if (isValueMealInfoAvailable(productCode))
			{
				return true;
			}
		}
		// CSO-282 - CYT Redesign
		else if (!ignoreRawItem && csoProductInfo[productCode].xmlNode.@productClass == "RAW_ITEM")
		{
			if (isRawItemInfoAvailable(productCode))
			{
				return true;
			}
		}
		
		return false;
	}
	
	/**
	 * @brief - Verifies if there is nutritional information available for a product code
	 * @author - Vivian Cury
	 * @param - productCode - The product code to be verified
	 * @return - true if the product have nutritional information
			   - false otherwise
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 * @modified - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	 */
	function isInfoAvailable(productCode)
	{
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined) {
			return false;
		}
		
		var productInfo = csoProductInfo[productCode];
		
		if (productInfo.xmlNode.CustomParameters != undefined &&
			productInfo.xmlNode.CustomParameters.Parameter != undefined)
		{
			for each (var parameter in productInfo.xmlNode.CustomParameters.Parameter)
			{
				// CSO-728 - Nutritional being hidden incorrectly
				// CSO-843 - RS Request Form -NGK, Nutritinal Information not working as designe - INC9147351
				if(csoCalculateEnergyInformation)
				{
					if ((productInfo.energyInfo) && (productInfo.energyInfo.CalculatedEnergyInformation != ""))
					{
						return true;
					}
				}
			
				// CSO-728 - Nutritional being hidden incorrectly
				// CSO-843 - RS Request Form -NGK, Nutritinal Information not working as designe - INC9147351
				if ((productInfo.energyInfo) && (productInfo.energyInfo.EnergyInformation != ""))
				{
					return true;
				}
			
				// CSO-728 - Nutritional being hidden incorrectly
				// CSO-843 - RS Request Form -NGK, Nutritinal Information not working as designe - INC9147351
				var isNutritionInfo = parameter.@name.indexOf("nutritionalInfo") == 0;
				var isIgnoredParam = ( (parameter.@name == "nutritionalInfoEnergyBeverageCustomerSelfPourKCal") ||
									   (parameter.@name == "nutritionalInfoEnergyBeverageCustomerSelfPour") ||
									   (parameter.@name == "nutritionalInfoEnergyRange") ||
									   (parameter.@name == "nutritionalInfoEnergySuffix") );

				// CSO-843 - RS Request Form -NGK, Nutritinal Information not working as designe - INC9147351
				if (productInfo.energyInfo)
				{
					isIgnoredParam = isIgnoredParam || (parameter.@name == "nutritionalInfoEnergy") || (parameter.@name == "nutritionalInfoKCal");
				}
									  
				// CSO-728 - Nutritional being hidden incorrectly
				// CSO-843 - RS Request Form -NGK, Nutritinal Information not working as designe - INC9147351
				if(isNutritionInfo && !isIgnoredParam)
				{
					return true;
				}
			}
		}
		return false;
	}
	
	/**
	 * @brief - Verifies if there is nutritional information available for a product
	 * @author - Vivian Cury
	 * @param - productCode - The value meal code to be verified
	 * @return - true if the product have nutritional information
			   - false otherwise
	 * @since - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	 */
	function isProductInfoAvailable(productCode)
	{
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined) {
			return false;
		}
		
		var productInfo = csoProductInfo[productCode];
		
		if (isInfoAvailable(productCode))
		{
			return true;
		}
		
		var isCCM = lIsCCM(productInfo.xmlNode);
		
		for each (var choice in productInfo.xmlNode.Choices.Component)
		{
			var referenceCode = null;
			if(isCCM)
			{
				referenceCode = lGetCSOCCMBaseProduct(choice.ProductCode.toString());
			}
			else
			{
				referenceCode = getChoiceReferenceCode(choice.ProductCode.toString());
			}

			if (referenceCode != null)
			{
				// CSO-282 - CYT Redesign
				if (isItemInfoAvailable(referenceCode, true))
				{
					return true;
				}
			}
		}
		
		return false;
	}
	
	/**
	 * @brief - Verifies if there is nutritional information available for a product
	 * @author - Vladimir Dobroff
	 * @param - productCode - code to be verified
	 * @return - true if the product have nutritional information
			   - false otherwise
	 * @since - CSO-282 - CYT Redesign
	 */
	function isRawItemInfoAvailable(productCode)
	{
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined) {
			return false;
		}
		
		var productInfo = csoProductInfo[productCode];
		
		if (isInfoAvailable(productCode))
		{
			return true;
		}
		
		return false;
	}
	
	/**
	 * @brief - Verifies if there is nutritional information available for a value meal
	 * @author - Vivian Cury
	 * @param - productCode - The value meal code to be verified
	 * @return - true if the product have nutritional information
			   - false otherwise
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 */
	function isValueMealInfoAvailable(productCode)
	{
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined) {
			return false;
		}
		
		var productInfo = csoProductInfo[productCode];
		
		for each (var component in productInfo.xmlNode.Composition.Component)
		{
			// CSO-282 - CYT Redesign
			if (isItemInfoAvailable(component.ProductCode.toString(), true))
			{
				return true;
			}
		}
		
		var isCCM = lIsCCM(productInfo.xmlNode)
		
		for each (var choice in productInfo.xmlNode.Choices.Component)
		{
			
			var referenceCode = null;
			if(isCCM)
			{
				referenceCode = lGetCSOCCMBaseProduct(choice.ProductCode.toString());
			}
			else
			{
				// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
				referenceCode = getChoiceReferenceCode(choice.ProductCode.toString());
			}

			if (referenceCode != null)
			{
				// CSO-282 - CYT Redesign
				if (isItemInfoAvailable(referenceCode, true))
				{
					return true;
				}
			}
		}
		
		return false;
	}
	
	/**
	 * @brief - Gets the choice reference product code
	 * @author - Vivian Cury
	 * @param - rule - The reference product rule
	 * @param - choiceCode - The choice code
	 * @return - Reference product code, if any
	 * @since - CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
	 * @modified - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	 */
	function getChoiceReferenceCode(choiceCode)
	{
		if (!choiceCode)
		{
			return undefined;
		}

		var productInfo = csoProductInfo[choiceCode];

		if (productInfo && productInfo.isValid)
		{
			var CSOReferenceProductCode = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOReferenceProductCode").@value.toString();
			
			if (CSOReferenceProductCode)
			{
				var refProductInfo = csoProductInfo[CSOReferenceProductCode];
				
				if (refProductInfo && refProductInfo.isValid)
				{
					return CSOReferenceProductCode;
				}
			}
		}
		
		return undefined;
	}
}

/**
 * @brief - Calcutes calories information to an item
 * @author - Vivian Cury
 * @param - ProductCode - The product code to calculate the calories
 * @param - ProductClasses - The classes that can be checked for nutritional information (optional)
 * @param - bUseI18N - true if the information should be returned with the i18n key, false otherwise (optional)
 * @param - desiredNutritionalInfoType - Desired type to return the nutritionalInfo (KJ or KCAL) (optional)
 * @return - The text with the calories to be displayed on Kiosk
 * @since - CSO-64 - NGK v5.3 - Display Nutritional Information - Info Icon Tutorial Message and Calories Display Near Price
 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 *           - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
 */
function lGetEnergyInformation(ProductCode, ProductClasses, bUseI18N, desiredNutritionalInfoType)
{
	// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
	// If the custom parameter is different than -1, the property from the product must be directly returned.
	if ((csoLoadCustomEnergyInformation != "") && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true)){
		// SQC-7599 - [NGK 5.12] US Nutrition Enhancement - CSL_CSO error is displayed when I try access some buttons of the carousel
		if (!ProductCode) return "";
		var productInfo = csoProductInfo[ProductCode];	
		if (!productInfo) return "";

		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717		
		if((bUseI18N != undefined) && (bUseI18N == false))
		{
			if(csoCalculateEnergyInformation)
			{
				var energy = lGetCustomEnergyInformation(ProductCode);
				energy = RoundEnergy(ProductCode, energy);
				
				// The energy value is already rounded
				return energy;
			}
			
			if ((productInfo.energyInfo) && (productInfo.energyInfo.EnergyInformation != ""))
			{
				return (productInfo.energyInfo.EnergyInformation);
			}
		}
		else 
		{
			var energy = lGetCustomEnergyInformation(ProductCode);
			
			if((energy != "") && (csoCalculateEnergyInformation)) 
			{
				// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
				energy = FormatEnergyValue(RoundEnergy(ProductCode, energy), ProductCode);
				// The energy value is already rounded and formatted.
				return energy;
			}
			return energy;
		}
		return "";
	}

	var nutritionalInfoDisplayOnMainMenu = lGetCSOUserInterfaceStringParameter("nutritionalInfoDisplayOnMainMenu", "");
	
	if (nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KCAL" ||
		nutritionalInfoDisplayOnMainMenu.toUpperCase() == "KJ")
	{
		if(csoLoadCustomEnergyInformation == "US" || desiredNutritionalInfoType == undefined || desiredNutritionalInfoType == "")
			desiredNutritionalInfoType = nutritionalInfoDisplayOnMainMenu;
	}
	else
	{
		API.dbg("Parameter nutritionalInfoDisplayOnMainMenu is not set or is set with an invalid value: [" + nutritionalInfoDisplayOnMainMenu + "]");
	}
	
	//CSO-1399 - POS-485 - KIOSK 5.x Nav Redesign - Product Wall Improvements and Standardization
	if (!desiredNutritionalInfoType || (desiredNutritionalInfoType.toUpperCase() != "KCAL" && desiredNutritionalInfoType.toUpperCase() != "KJ"))
	{
		API.dbg("lGetEnergyInformation - Invalid nutritional type parameter: [" + desiredNutritionalInfoType + "]");
		return "";
	}
	
	if (ProductCode == "0" || ProductCode == "")
	{
		API.dbg("lGetEnergyInformation - Invalid product code: [" + ProductCode + "]");
		return "";
	}
	
	var totalCalories = new BigDecimal("0.00");
	totalCalories = totalCalories.setScale(2, BigDecimal.ROUND_HALF_EVEN);
	
	// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	var calories = lGetItemCalories(ProductCode, desiredNutritionalInfoType, ProductClasses);
	
	if (calories != "")
	{
		totalCalories = totalCalories.add(new BigDecimal(calories));
		totalCalories = totalCalories.setScale(0, BigDecimal.ROUND_HALF_EVEN);
	}
	
	if (totalCalories.compareTo(BigDecimal.ZERO) > 0)
	{
		// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		if (bUseI18N != undefined && !bUseI18N)
		{
			return totalCalories.toString();
		}
		else
		{
			var caloriesText = "";
			
			if (desiredNutritionalInfoType.toUpperCase() == "KCAL")
			{
				caloriesText = PosCSOI18nGetMessageJS("nutritionalInfoKCalTotal", totalCalories.toString());
			}
			else if (desiredNutritionalInfoType.toUpperCase() == "KJ")
			{
				caloriesText = PosCSOI18nGetMessageJS("nutritionalInfoEnergyTotal", totalCalories.toString());
			}
			
			return caloriesText;
		}
	}
	else
	{
		API.dbg("There's no calorie value to be displayed for product code: [" + ProductCode + "]");
	}
	
	return "";
	
	/**
	 * @brief - Calcutes the calories information to a product
	 * @author - Vivian Cury
	 * @param - productCode - The product code to calculate the calories
	 * @param - calorieType - The type of calorie to calculate (KCAL or KJ)
	 * @param - productClasses - The classes that can be checked for nutritional information
	 * @return - String with product's calories
	 * @since - CSO-64 - NGK v5.3 - Display Nutritional Information - Info Icon Tutorial Message and Calories Display Near Price
	 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 *	     - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	 */
	function lGetItemCalories(productCode, calorieType, productClasses)
	{
		var totalCalories = new BigDecimal("0.00");
		totalCalories = totalCalories.setScale(2, BigDecimal.ROUND_HALF_EVEN);
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined || csoProductInfo[productCode].xmlNode == undefined) {
			return totalCalories;
		}
		
		// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		if (productClasses != undefined)
		{
			if (productClasses.indexOf(csoProductInfo[productCode].xmlNode.@productClass) >= 0)
			{
				if (csoProductInfo[productCode].xmlNode.@productClass == "VALUE_MEAL")
				{
					var calories = lGetValueMealCalories(productCode, calorieType);
					
					if (calories != "")
					{
						totalCalories = totalCalories.add(new BigDecimal(calories));
					}
				}
				else
				{
					var calories = lGetProductCalories(productCode, calorieType);
				
					if (calories != "")
					{
						totalCalories = totalCalories.add(new BigDecimal(calories));
					}
				}
			}
		}
		else
		{
			if (csoProductInfo[productCode].xmlNode.@productClass == "VALUE_MEAL")
			{
				var calories = lGetValueMealCalories(productCode, calorieType);
				
				if (calories != "")
				{
					totalCalories = totalCalories.add(new BigDecimal(calories));
				}
			}
			else if (csoProductInfo[productCode].xmlNode.@productClass == "PRODUCT")
			{
				var calories = lGetProductCalories(productCode, calorieType);
				
				if (calories != "")
				{
					totalCalories = totalCalories.add(new BigDecimal(calories));
				}
			}
		}
		
		return totalCalories.toString();
	}
	
	/**
	 * @brief - Calcutes the calories information to a value meal
	 * @author - Vivian Cury
	 * @param - productCode - The value meal code to calculate the calories
	 * @param - calorieType - The type of calorie to calculate (KCAL or KJ)
	 * @return - String with value meal's calories
	 * @since - CSO-64 - NGK v5.3 - Display Nutritional Information - Info Icon Tutorial Message and Calories Display Near Price
	 */
	function lGetValueMealCalories(productCode, calorieType)
	{
		var totalCalories = new BigDecimal("0.00");
		totalCalories = totalCalories.setScale(2, BigDecimal.ROUND_HALF_EVEN);
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined) {
			return totalCalories;
		}
		
		var productInfo = csoProductInfo[productCode];
		
		var isCCM = lIsCCM(productInfo.xmlNode);
		
		for each (var component in productInfo.xmlNode.Composition.Component)
		{
			// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
			var calories = lGetItemCalories(component.ProductCode.toString(), calorieType);
			
			if (calories != "")
			{
				// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
				var compQty = new BigDecimal(component.DefaultQuantity.toString());
				calories = compQty.multiply(new BigDecimal(calories));
				
				totalCalories = totalCalories.add(calories);
			}
		}
		
		for each (var choice in productInfo.xmlNode.Choices.Component)
		{
			var referenceCode = null;
			if(isCCM)
			{
				referenceCode = lGetCSOCCMBaseProduct(choice.ProductCode.toString());
			}
			else
			{	// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
				referenceCode = getChoiceReferenceCode(choice.ProductCode.toString());
			}

			if (referenceCode != null)
			{
				// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
				var calories = lGetItemCalories(referenceCode, calorieType);
			
				if (calories != "")
				{
					// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
					var choiceQty = new BigDecimal(isCCM && choice.FlexibleChoice.toString().toUpperCase() == "TRUE"  ? choice.MinQuantity.toString() : choice.DefaultQuantity.toString());
					calories = choiceQty.multiply(new BigDecimal(calories));
					
					totalCalories = totalCalories.add(calories);
				}
			}
		}
		
		return totalCalories.toString();
	}
	
	/**
	 * @brief - Calcutes the calories information to a product
	 * @author - Vivian Cury
	 * @param - productCode - The value meal code to calculate the calories
	 * @param - calorieType - The type of calorie to calculate (KCAL or KJ)
	 * @return - String with value meal's calories
	 * @since - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	 */
	function lGetProductCalories(productCode, calorieType)
	{
		var totalCalories = new BigDecimal("0.00");
		totalCalories = totalCalories.setScale(2, BigDecimal.ROUND_HALF_EVEN);
		
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] == undefined) {
			return totalCalories;
		}
		
		var productInfo = csoProductInfo[productCode];
		
		var productCalories = lGetCalories(productCode, calorieType);
		if (productCalories != "")
		{
			totalCalories = totalCalories.add(new BigDecimal(productCalories));
		}
		
		var isCCM = lIsCCM(productInfo.xmlNode);
		
		for each (var choice in productInfo.xmlNode.Choices.Component)
		{
			var referenceCode = null;
			if(isCCM)
			{
				referenceCode = lGetCSOCCMBaseProduct(choice.ProductCode.toString());
			}
			else
			{
				// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
				referenceCode = getChoiceReferenceCode(choice.ProductCode.toString());
			}

			if (referenceCode != null)
			{
				var calories = lGetItemCalories(referenceCode, calorieType);

				if (calories != "")
				{
					// CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
					var choiceQty = new BigDecimal(isCCM && choice.FlexibleChoice.toString().toUpperCase() == "TRUE" ? choice.MinQuantity.toString() : choice.DefaultQuantity.toString());
					calories = choiceQty.multiply(new BigDecimal(calories));
					totalCalories = totalCalories.add(calories);
				}
			}
		}
		
		return totalCalories.toString();
	}
	
	/**
	 * @brief - Gets the calories information of a product in product-db
	 * @author - Vivian Cury
	 * @param - productCode - The product code to calculate the calories
	 * @param - calorieType - The type of calorie to calculate (KCAL or KJ)
	 * @return - String with product's calories
	 * @since - CSO-64 - NGK v5.3 - Display Nutritional Information - Info Icon Tutorial Message and Calories Display Near Price
	 */
	function lGetCalories(productCode, calorieType)
	{
		// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
		if (csoProductInfo[productCode] != undefined && 
		    csoProductInfo[productCode].xmlNode != undefined && 
			csoProductInfo[productCode].xmlNode.CustomParameters != null)
		{
			if (calorieType.toUpperCase() == "KJ" &&
				csoProductInfo[productCode].xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergy") != null)
			{
				return csoProductInfo[productCode].xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoEnergy").@value.toString();
			}
			
			if (calorieType.toUpperCase() == "KCAL" &&
				csoProductInfo[productCode].xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoKCal") != null)
			{
				return csoProductInfo[productCode].xmlNode.CustomParameters.Parameter.(@name == "nutritionalInfoKCal").@value.toString();
			}
		}
		
		return "";
	}
	
	/**
	 * @brief - Gets the choice reference product code
	 * @author - Vivian Cury
	 * @param - rule - The reference product rule
	 * @param - choiceCode - The choice code
	 * @return - Reference product code, if any
	 * @since - CSO-64 - NGK v5.3 - Display Nutritional Information - Info Icon Tutorial Message and Calories Display Near Price
	 * @modified - CSO-194 - kJ display not functioning correctly for Value Meals assigned to the keyboard (Dinner boxes, happy meals) - NW-35
	 */
	function getChoiceReferenceCode(choiceCode)
	{
		if (!choiceCode)
		{
			return undefined;
		}

		var productInfo = csoProductInfo[choiceCode];

		if (productInfo && productInfo.isValid)
		{
			var CSOReferenceProductCode = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOReferenceProductCode").@value.toString();
			
			if (CSOReferenceProductCode)
			{
				var refProductInfo = csoProductInfo[CSOReferenceProductCode];
				
				if (refProductInfo && refProductInfo.isValid)
				{
					return CSOReferenceProductCode;
				}
			}
		}
		
		return undefined;
	}
}

/**
 * @brief - Save the current view so it can be reinjected later
 * @author - Vladimir Dobroff
 * @return - true
 * @since - NGK 5.5 - CSO-85 - EU CR for NGK Multi Payment Service Platform Support - 7359977
 */
function PosNGKSaveOrderJS()
{
	var hlp = new BusinessObjectHelper;
	GLOBAL_NGK_SAVED_VIEW = hlp.getCurrentView();
	
	return true;
}

/**
 * @brief - Wrapper to void the sale
 * @author - Vladimir Dobroff
 * @return - true
 * @since - NGK 5.5 - CSO-85 - EU CR for NGK Multi Payment Service Platform Support - 7359977
 */
function PosNGKVoidOrderJS()
{
	SideSaleHelper.Cancel();
	PosDoVoidSale('false','false');
	return true;
}

/**
 * @brief - Reinject the saved view in a new order. Used after the RemPOD has been changed
 * @author - Vladimir Dobroff
 * @return - true
 * @since - NGK 5.5 - CSO-85 - EU CR for NGK Multi Payment Service Platform Support - 7359977
 */
function PosNGKReinjectOrderJS()
{
	if (GLOBAL_NGK_SAVED_VIEW)
	{
		var hlp	= new BusinessObjectHelper;

		var savedViewXML = new XML(GLOBAL_NGK_SAVED_VIEW);

		//Start a new sale by setting the sale type and ordering at least one product
		PosSetSaleType(sessionSale.get("NGK_SALE_TYPE"));
		
		var orderProducts = savedViewXML.ItemView.productCode;
		if (orderProducts.length() > 0)
		{
			var orderFirstProduct = orderProducts[0].toString();
			
			PosDoSale(orderFirstProduct);
			
			var newView = hlp.getCurrentView();
			var newViewXML = new XML(newView);
			
			//Remove all the child nodes of the new view
			newViewXML.setChildren(new XMLList());
			
			//Merge the saved view with the new view
			
			//Replace the child nodes of the new view with the child nodes of the saved view
			var savedViewChildren = savedViewXML.*;
			for each (child in savedViewChildren)
			{
				newViewXML.appendChild(child.copy());
			}
			
			//Replace the price attributes of the new view with the price attributes of the saved view
			if (savedViewXML.@BPTotalAmount.toString()) newViewXML.@BPTotalAmount = savedViewXML.@BPTotalAmount.toString();
			if (savedViewXML.@BPGrossAmount.toString()) newViewXML.@BPGrossAmount = savedViewXML.@BPGrossAmount.toString();
			if (savedViewXML.@BPTotalTax.toString()) newViewXML.@BPTotalTax = savedViewXML.@BPTotalTax.toString();
			if (savedViewXML.@BDTotalAmount.toString()) newViewXML.@BDTotalAmount = savedViewXML.@BDTotalAmount.toString();
			if (savedViewXML.@BDGrossAmount.toString()) newViewXML.@BDGrossAmount = savedViewXML.@BDGrossAmount.toString();
			if (savedViewXML.@BDTotalTax.toString()) newViewXML.@BDTotalTax = savedViewXML.@BDTotalTax.toString();
			if (savedViewXML.@totalAmount.toString()) newViewXML.@totalAmount = savedViewXML.@totalAmount.toString();
			if (savedViewXML.@grossAmount.toString()) newViewXML.@grossAmount = savedViewXML.@grossAmount.toString();
			if (savedViewXML.@totalTax.toString()) newViewXML.@totalTax = savedViewXML.@totalTax.toString();
			if (savedViewXML.@totalDue.toString()) newViewXML.@totalDue = savedViewXML.@totalDue.toString();
			if (savedViewXML.@nativeTotalDue.toString()) newViewXML.@nativeTotalDue = savedViewXML.@nativeTotalDue.toString();
			if (savedViewXML.@totalDueCurrency.toString()) newViewXML.@totalDueCurrency = savedViewXML.@totalDueCurrency.toString();
			// CSO-230 - NGK Support Table Service for Pay At Counter Orders - 7826872
			if (savedViewXML.@tableServiceArea.toString()) newViewXML.@tableServiceArea = savedViewXML.@tableServiceArea.toString();
			
			//Reinject the merged view
			hlp.setCurrentView(newViewXML.toXMLString());
			
			//Force view internal update
			PosRefreshSalePanel();
		}
		
		GLOBAL_NGK_SAVED_VIEW = null;
	}
	
	return true;
}

/**
 * @brief - Check if the NewPos Suppress Discount feature is enabled
 * @return - true or false
 * @author - Vladimir Dobroff
 * @since - NGK 5.6 - CSO-79 - NGK- Use Existing NP6 Suppress Discount Feature - 7376320
 */
function isNewPosSuppressDiscountEnabled()
{
	//Cache the result in a global variable to avoid performance issues
	if (GLOBAL_NGK_SUPPRESS_DISCOUNT_ENABLED == null)
	{
		GLOBAL_NGK_SUPPRESS_DISCOUNT_ENABLED = false;
		
		var showAsSinglePrice = hlp.findParamInSectionWide("VMDisplay_ShowAsSinglePrice", "ValueMealDisplay");
		var suppressDiscount = hlp.findParamInSectionWide("VMDisplay_SuppressDiscount", "ValueMealDisplay");
		
		//NewPos is not case sensitive when checking the parameter values.
		//Also, both parameters must be enabled, otherwise the suppress discount will not be applied.
		if (showAsSinglePrice && suppressDiscount &&
		   (showAsSinglePrice.toUpperCase() == "ENABLED") &&
		   (suppressDiscount.toUpperCase() == "ENABLED"))
		{
			GLOBAL_NGK_SUPPRESS_DISCOUNT_ENABLED = true;
		}
	}
	
	return GLOBAL_NGK_SUPPRESS_DISCOUNT_ENABLED;
}

function PosCSOGetGrillView()
{
	var hlp = new BusinessObjectHelper;
	
	var resultXml = new XML('<Event type="ASYNC" name="TST_GRILL_VIEW" />');
	var grillView = new XML('<GrillView />');
		grillView.@value = hlp.getGrillView();
	resultXml.appendChild(grillView);
	return PosSendUICmd(resultXml.toString());
}

/**
 * getDiscount - try to retrieve the barcode
 * return - array of discount fields
 * author - MY
 * since - CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
 */
function getDiscount(couponCode) {
	// barcode max size 10 (hardcoded)
	if((0==couponCode.length)||(couponCode.length>10)) {
		PosShowMessage("NGK_MSG_INVALID_BARCODE");
	}
	var hlp = new BusinessObjectHelper;
	// look for barcode in the CSO.PROMOTION (store db)
	var discount = hlp.findParamInSectionConfig(couponCode, "CSO.PROMOTION");

	if(null==discount) {
		// no discount found
		return null;
	}

	// analyse the discount type
	var field=discount.split("|");
	var rate=field[0];
	if((null==rate)||(0==rate.length)) {
		// invalid discount
		return null;
	}
	return field;
}

/**
 * getProductIndex - look for valid product code to apply discount
 * return - index
 * author - MY
 * since - CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
 */
function getProductIndex(productCode) {
	var order=new XML(hlp.getCurrentView());
	var bFound=false;
	var parentQty=0;
	var parentPromo=false;
	var index=-1;
	var isParent=true;

	//API.dbg("[CSO-153] view[" + order + "]");
	API.dbg("CSO - productCode[" + productCode + "]");

	// index is only counted for the parent item
	// if the item is a component of a value meal the product code is required
	for each (var item in order.ItemView) {
		if(0 == item.level) {
			index++;
			// parent item
			parentQty=item.quantity;
			if(item.quantityPromo==item.quantity) {
				parentPromo=true;
			}
			
			if((item.productCode==productCode)
					&& (parentQty > 0)
					&& (!parentPromo)) {			// non promo and qty > 0
				bFound=true;
				isParent=true;
				break;
			}
		}
		else {
			var itemValue=new BigDecimal (item.totalPrice);
			if((item.productCode==productCode)
					&& (item.quantityPromo<item.quantity)				// non promo and qty > 0
					&& (false==item.isGrillLine)						// not grill
					&& (itemValue.compareTo(BigDecimal.ZERO) > 0)		// non cost inclusive
					&& (parentQty>0)
					&& (!parentPromo)){
				bFound=true;
				isParent=false;
				break;
			}
		}
	}
	if(false==bFound) {
		index=-1;
	}
	API.dbg("CSO - Found[" + bFound.toString() + "] index["+index+"] isParent["+isParent+"]");

	return {
		index: index,
		parent: isParent
	};
}

/**
 * @brief - 
 * @return - 
 * @author - MY
 * @since - CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
 */
function PosNGKCheckDiscountValidJS(couponCode) {

	var field=getDiscount(couponCode);
	if(null==field) {
		// invalid discount
		return false;
	}
	var rate=field[0];
	var productCode=field[1];	// optional
	var initialPeriod=Number(field[2]);	// optional
	var finalPeriod=Number(field[3]);	// optional
	var today = new Date();
	var day = ("0" + today.getDate()).slice(-2);
	var month = ("0" + (today.getMonth() + 1)).slice(-2);
	var year = today.getFullYear();
	var currentDate=Number(year+month+day);
	var reason=REASON_OK;

	if((null!=field[2]) && (field[2].length>0)&& (!PosValidateBusinessDate(field[2]))) {
		API.dbg("CSO - PosNGKCheckDiscountValidJS initial date invalid[" + field[2] + "]");
		reason=REASON_INVALIDDATE;
	}
	if((null!=field[3]) && (field[3].length>0)&& (!PosValidateBusinessDate(field[3]))) {
		API.dbg("CSO - PosNGKCheckDiscountValidJS final date invalid[" + field[3] + "]");
		reason=REASON_INVALIDDATE;
	}

	if(reason == REASON_OK) {
		// check dates - not testing if final date is before initial - all coupons will be invalid if so
		if(initialPeriod>0) {
			if(currentDate>=initialPeriod) {
				if((finalPeriod>0) && (currentDate>finalPeriod)) {
					// expired
					reason=REASON_EXPIRED;
				}
			}
			else {
				// not valid yet
				reason=REASON_NOTYET;
			}
		}
	}
	API.dbg("CSO - PosNGKCheckDiscountValidJS. Reason[" + reason + "]");
	if(reason != REASON_OK) {
		return false;
	}
	return true;
}

/**
 * @brief - 
 * @return - 
 * @author - MY
 * @since - CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
 */
function PosNGKApplyDiscountValidJS(couponCode) {

	API.dbg("CSO - PosNGKApplyDiscountValidJS coupon[" + couponCode + "]");

	var retVal=false;
	var retHome=true;
	var retMsg=null;
	var field=getDiscount(couponCode);
	if(null==field) {
		// invalid discount
		API.dbg("CSO - PosNGKApplyDiscountValidJS invalid discount");
		return {
			flag: false,
			goHome: true,
			msg: PosCSOI18nGetMessageJS("CSO_LOCALPROMO_NOT_FOUND")
		};
	}
	var rate=field[0];
	var productCode=field[1];	// optional

	API.dbg("CSO - PosNGKApplyDiscountValidJS rate[" + rate + "] product[" + productCode + "]");
	
	var currentCoupon=sessionSale.get("NGK_DISCOUNT_BARCODE_APPLIED");
	if(null != currentCoupon) {
		if(currentCoupon!=couponCode) {
			// already have coupon - ask customer wants to replace
			var result = PosNGKAskOrderCancellationConfirmationJS ("CSO_MSG_COUPON_ALREADY_REDEEMED|WHITE|GREEN|GREEN", "MSG_NO|RED|WHITE|WHITE|", "MSG_YES|GREEN|WHITE|WHITE|");
			if (null==result) {
				return result;
			}
			if (!result) {
				// don't want replace coupon - return empty message to show no message
				API.dbg("CSO - PosNGKApplyDiscountValidJS - keep the discount");

				return {
					flag: false,
					goHome: true,
					msg: ""
				};
			}
			else {
				API.dbg("CSO - PosNGKApplyDiscountValidJS - change the discount coupon");
				
				sessionSale.set("NGK_DISCOUNT_BARCODE_APPLIED", null);
				// cancel previous discount
				if (typeof(PosClearDiscounts_CSL) == "function") {
					PosClearDiscounts_CSL();
				}
				else {
					// This is the only official way to remove discounts
					PosDoBackFromTotal();
				}
				
				// reapply other discounts
				lRedoLocalPromotionBarcodeDiscounts();
			}
		}
		else {
			API.dbg("CSO - PosNGKApplyDiscountValidJS coupon already applied");

			return {
				flag: false,
				goHome: true,
				msg: PosCSOI18nGetMessageJS("CSO_MSG_COUPON_ALREADY_APPLIED")
			};
		}
	}
	
	if((null!=productCode) && (productCode.length > 0)) {
		// locate productCode in view to get index
		var sIndex=getProductIndex(productCode);
		if(sIndex.index<0) {
			API.dbg("CSO - PosNGKApplyDiscountValidJS - not sold yet");

			// check if can sell the product
			if (!lIsProductValid(productCode) || !lIsProductPriceNodeValid(productCode) || (isProductOutage(productCode))) {
				return {
					flag: false,
					goHome: true,
					msg: PosCSOI18nGetMessageJS("CSO_MSG_COUPON_PRODUCT_NOT_FOUND_IN_ORDER")
				};
			}
			
			// return to kiosk to verify outage, perform sale (discount applied at the end of value meal loop
			var resultXml = new XML('<Event type="ASYNC" name="DLG_VALIDATE_ITEM_DISCOUNT" />');
		
			var itemDiscountXml = new XML("<ItemDiscount />");
			itemDiscountXml.@rate=rate;
			itemDiscountXml.@barcode=couponCode;
			itemDiscountXml.@productCode=productCode;

			resultXml.appendChild(itemDiscountXml);
			PosSendUICmd(resultXml.toString());
			retVal=true;
			retHome=false;		// will not call main screen transition
		}
		else {
			// apply discount to an existing item
			API.dbg("CSO - PosNGKApplyDiscountValidJS - apply discount index[" + sIndex.index + "]");
			if(sIndex.parent) {
				retVal=PosDoDiscountByItem("0", sIndex.index, "rate", rate);
			}
			else {
				retVal=PosDoDiscountByItem("0", sIndex.index, "rate", rate, productCode);
			}
			API.dbg("CSO - PosNGKApplyDiscountValidJS PosDoDiscountByItem ["+retVal+"]");
			if(!retVal) {
				retMsg=PosCSOI18nGetMessageJS("CSO_MSG_COUPON_PRODUCT_DISCOUNT_FAILED");
			}
			else {
				sessionSale.set("NGK_DISCOUNT_BARCODE_APPLIED", couponCode);
			}
		}
	}
	else {
		// apply order discount - "DISCOUNT_BY_ORDER" will be used to identify that a coupon order discount was applied
		retVal = PosDoDiscount_CSL("0", "1", "2", rate, "DISCOUNT_BY_ORDER");
		API.dbg("CSO - PosNGKApplyDiscountValidJS PosDoDiscount_CSL ["+retVal+"]");
		if (!retVal) {
			// Function PosDoDiscount_CSL returns false when a discount is given, but the sale is not closed
			// If getLastSuccess returns a value, then the discount was performed and we need to store it
			var amountSuccess = getLastSuccess("cPosAddDiscountRate");
			if (amountSuccess != null) {
				retVal = true;
				sessionSale.set("NGK_DISCOUNT_BARCODE_APPLIED", couponCode);
			}
			else {
				retMsg=PosCSOI18nGetMessageJS("CSO_MSG_COUPON_ORDER_DISCOUNT_FAILED");
			}
		}
	}
	//API.dbg("[CSO-153]retVal["+retVal+"] retHome["+retHome+"]");
	return {
		flag: retVal,
		goHome: retHome,
		msg: retMsg
	};
}

/**
 * @brief - 
 * @return - 
 * @author - MY
 * @since - CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
 */
function PosNGKFinishApplyDiscountJS(productCode, Rate, Barcode, Outage) {
	var retVal=false;
	API.dbg("CSO - PosNGKFinishApplyDiscountJS barcode[" + Barcode + " rate[" + Rate + "] productCode[" + productCode + "] Outage[" + Outage + "]");
	if(Outage=="false") {
		retVal=PosNGKOrderItemJS (productCode, null, Barcode, "true", "true", Rate);
	}
	else {
		PosShowMessage("CSO_MSG_COUPON_PRODUCT_IN_OUTAGE");
		retVal=false;
	}
	return (retVal);
}

/**
 * @brief - 
 * @return - 
 * @author - MY
 * @since - CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
 */
function PosNGKCheckCouponValidJS(couponCode) {
	
	var promoProducts = new Array();
	// NPS-11479 - In coupon promotion with Gui4 we cannot show decimals in price field - ACSI1259136
	var decimalSeparator = csoConfigurationInfo.currency.decimalSeparator;
	var thousandSeparator = csoConfigurationInfo.currency.thousandSeparator;
	var currencyDecimals = csoConfigurationInfo.currency.decimalsCount;
	
	if (decimalSeparator == null || decimalSeparator == "" ||
		thousandSeparator == null || thousandSeparator == "")
	{
		decimalSeparator = ".";
		thousandSeparator = ",";
	}
	
	if (currencyDecimals == null)
	{
		currencyDecimals = 2;
	}

	var currencyMask = "###" + thousandSeparator + "###" + thousandSeparator +
					   "##0" + decimalSeparator + lStringReplicate("0", currencyDecimals);

	for each (var product in csoProductInfo) {
		// CSO-158 [NGKv5.7] NGK allows breakfast coupons to be redeemed during lunch daypart - EQA-1552
		if ((product.xmlNode.Barcode == couponCode) && (bCheckProductDayPartCode(product.code))){
			promoProducts.push(product);
		}
	}
	
	if (promoProducts.length == 0) {
		API.dbg("CSO - No products to redeem");
		return false;
	}
	
	var language = sessionSale.get("LANGUAGE");
	
	var contents = new Array();
	var values = new Array();
	
	for each (var promoProduct in promoProducts) {
		var productCode = promoProduct.code;
		var productName = promoProduct.names[language].csoName;
		var imageName = promoProduct.csoImages.largeImage;
		// NPS-13836 - Sev4 - All Stores - NGK 5.7.2 - Voucher Validation screen doesn't show symbol - ACSI2118887
		var productPrice = "";		
		if (sessionSale.get("IS_NGK") == "true") {
			// NPS-18315 - Meal price not displaying correctly for coupon items. - ACSI3042503
			productPrice = lGetProductCombinedPrice(promoProduct.code.toString(), true);
		}
		else {
			productPrice = sFormatCurrency(currencyMask, promoProduct.price.getCurrent());
		}

		//CSO-108 - add nutrition and outage information
		var bNutritionInfo=false;
		bNutritionInfo = isNutritionalInfoAvailable(productCode);

		var calories = lGetEnergyInformation(productCode);
		
		// SQC-6337 - NGK 5.9 - Time restrictions is not displaying time as AM/PM format on promotions screen
		var timeRestrictionsPeriod = "";
		var timeRestrictionInfo = GetTimeRestrictionProductAvailability(productCode, 0);
		if (timeRestrictionInfo != undefined || timeRestrictionInfo != null) {
			timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod.replace(/[,]/g, "*");
			timeRestrictionsPeriod = timeRestrictionsPeriod.replace(/[:]/g, "-");
			timeRestrictionsPeriod = timeRestrictionsPeriod.replace(/[|]/g, "#");
		}
		
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		var allergensFound=[];
		// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
		allergensFound = lFindAllergens(allergensFound, productCode.toString(), [], false, true, false, true);
		var hasAllergensSignaled="false";
		var hasAllergens="false";
		if (allergensFound.length>0) {
			hasAllergens = "true";
			
			allergensFound = [];
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
			// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
			allergensFound = lFindAllergens(allergensFound, productCode.toString(), selectedAllergensList, false, true, false, false);
			if (allergensFound.length>0) {
				hasAllergensSignaled = "true";
			}
		}
		
		// SQC-6337 - NGK 5.9 - Time restrictions is not displaying time as AM/PM format on promotions screen
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627 - added signaled allergens list
		contents.push(productCode + ":" + productName + ":" + imageName + ":" + productPrice + ":" + bNutritionInfo + ":" + calories + ":" + timeRestrictionsPeriod + ":"+ hasAllergens + ":"+ hasAllergensSignaled);
		values.push(productCode);
	}
	
	var productCode = "-1";
	
	if (promoProducts.length == 1) {
		productCode = promoProducts[0].code;

		API.dbg("CSO - PosCSOCheckCouponValidJS: Selected product code = ["+productCode+"]");

		var resultXml = new XML('<Event type="ASYNC" name="DLG_PROMO_CONFIRMPRODUCT" />');
		
		var promoProductXml = new XML("<PromoProduct />");
		var contentValues = contents[values.indexOf(productCode)];
		promoProductXml.@Value=contentValues;

		resultXml.appendChild(promoProductXml);
		PosSendUICmd(resultXml.toString());
	} else {
		var resultXml = new XML('<Event type="ASYNC" name="DLG_PROMO_PRODUCT_SELECTION" />');
		
		var promoProductXml = new XML("<PromoProduct />");
		promoProductXml.@Value = contents.join("|");
		promoProductXml.@BarCode = couponCode;

		resultXml.appendChild(promoProductXml);
		PosSendUICmd(resultXml.toString());
	}
	return true;
}

/**
 * @brief - Generates the BYB xml
 * @param - bybArray: The array with the byb products
 * @param - grillSequence: grill items list sorted by chronological selling order
 * @return - BYB xml
 * @author - Vivian Cury
 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
function lGenerateBYBXML(bybArray, grillSequence)
{
	var bybXml = new XML("<BYB />");
	var count = 0;
	var orderSaleType = lGetOrderSaleType();
	// SQC-5949 - [BYB phase 1] - Cheese is not added in BYB (it is not displayed in the cart)
	var removeCanAdds = lGetCSOUserInterfaceStringParameter("hideCanAddsOnGrillScreen", "false") == "true";
	
	for each (var bybProduct in bybArray)
	{
		if (bybProduct.productCode == undefined || !lIsProductValid(bybProduct.productCode))
		{
			continue;
		}

		// CSO-228 - NGK Support CYT phase 2 configuration - 7826843
		var bybProductXML; 
		var productCYTVersion = csoProductInfo[bybProduct.productCode.toString()];

		if (productCYTVersion != undefined && productCYTVersion != null) {
			
			switch (productCYTVersion.cytVersion) {
			case 1:
				// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
				bybProductXML = lGenerateBYBProductXML(bybProduct.productCode, bybProduct.parentCostInclusive, bybProduct.autoSelectItems, bybProduct.customInfo);
				break;
			
			case 2:
				// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
				// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
				bybProductXML = lGenerateCYTProductXML(bybProduct.productCode, bybProduct.parentCostInclusive, bybProduct.autoSelectItems, bybProduct.customInfo, grillSequence);
				break;
			
			default:
				break;
			}
		}
				
		if (bybProductXML != null && bybProductXML != undefined)
		{
			bybXml.appendChild(bybProductXML);
			count++;
		}
	}

	return ((count > 0) ? bybXml : null);
	
	/**
	 * @brief - Generates the BYB product xml
	 * @param - code: BYB product code
	 * @param - costInclusive
	 * @param - bybAutoSelection: The BYB auto selections for the grill operation and
				for the pre build sandwich
	 * @param - customInfo	// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
	 * @return - BYB product xml
	 * @author - Vivian Cury
	 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 */
	function lGenerateBYBProductXML(code, costInclusive, bybAutoSelection, customInfo)
	{
		if (!lIsProductValid(code)) return null;
		
		var language = sessionSale.get("LANGUAGE");
		var productInfo = csoProductInfo[code.toString()];
		// SDO-9780 - NGK BYBAutoSelection is adding a "ghost" product for the "SOCAL STYLE" product
		var autoSelectionProducts = bybAutoSelection.toString().split("|");
	
		var bybProductXML = new XML("<Product />");
		bybProductXML.@code = code;
		
		var bybMutExclusive = ((productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBMutuallyExclusiveCategories") != undefined) ?
							   productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBMutuallyExclusiveCategories").@value.toString() :
							   "");
		var bybOrder = ((productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBDisplayOrder") != undefined) ?
						productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBDisplayOrder").@value.toString() :
						"");
		if (bybOrder == "") return null;
		
		var categories = [];
		// SDO-10222 - NGK 5.91 - Display Order configured with invalid values with incorrect behaviour on BYB Phase 1
		var choices = [];
		
		if (productInfo == null || !productInfo.isValid) {
			API.dbg("NGK - PosNGKOrderItemJS.lGenerateValueMealXML - Product does not exist or is not available - ProductCode: " + code);
			return null;
		}
		
		bybProductXML.@name = (productInfo.names[language.toString()] == null ? "" : productInfo.names[language.toString()].csoName);
		bybProductXML.@image = productInfo.csoImages.dimensionImage;
		bybProductXML.@bybType = ((productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBType") != undefined) ?
								  productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBType").@value.toString() :
								  "");
		// CSO-282 - CYT Redesign
		bybProductXML.@reviewImage = ((productInfo.xmlNode.CustomParameters.Parameter.(@name == "CYTReviewImage") != undefined) ?
									  productInfo.xmlNode.CustomParameters.Parameter.(@name == "CYTReviewImage").@value.toString() :
									  "");
		
		if (costInclusive)
		{
			costInclusive = true;
			bybProductXML.@costInclusive = "true";
			bybProductXML.@price = lFormatPrice("0");
		}
		else
		{
			// CSO-324 - TSS MR2 QR6 - On Kiosk prices are not showing correctly for Grill Thriller and SoCal Style CYT Prebuilt items
			// Get only the CYT main product price because additional prices are calculated at UI.
			bybProductXML.@price = lFormatPrice(lGetPriceTagValueBySaleType(productInfo.xmlNode.ProductCode.toString()));
		}
		
		// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
		// Adds customInfo data.
		if((customInfo != null) && (customInfo != undefined) && (customInfo != ""))
		{
			bybProductXML.@customInfo = customInfo;
		}
		
		// Adds the composition to the structure.
		// CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		if (productInfo.hasComposition)
		{
			lGenerateBYBCompositionXML(productInfo.xmlNode);
		}
		
		//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		if (productInfo.hasChoices)
		{
			for each (var abstractChoice in productInfo.xmlNode.Choices.Component) 
			{
				lGenerateBYBChoiceXml(abstractChoice, costInclusive);
			}
		}
		
		// SQC-5949 - [BYB phase 1] - Cheese is not added in BYB (it is not displayed in the cart)
		if (productInfo.xmlNode.CanAdds.Component.length() > 0 && !removeCanAdds)
		{
			for each (var canAdd in productInfo.xmlNode.CanAdds.Component)
			{
				// CSO-245 - NGK 5.8 - Unable to customise (grill) CYT (Set builds) after adding to basket - NW-90
				if (csoProductInfo[canAdd.ProductCode])
				{
					var canAddNode = csoProductInfo[canAdd.ProductCode].xmlNode;
					if (lCheckCanAdd(productInfo.xmlNode, canAddNode))
					{
						lGenerateBYBCanAddXml(canAdd);
					}
				}
			}
		}
		
		var hasItems = 0;
		for each (var category in bybOrder.split("|"))
		{
			hasItems += addCategory(bybProductXML, category.toUpperCase(), false);
		}
	
		// SDO-10222 - NGK 5.91 - Display Order configured with invalid values with incorrect behaviour on BYB Phase 1
		for each (var category in choices)
		{
			var hasOrderedCategory = false;
			for each (var orderedCategory in bybOrder.split("|"))
			{
				if (orderedCategory.toUpperCase() == category.toUpperCase())
				{
					hasOrderedCategory = true;
				}
			}
			
			if (!hasOrderedCategory) 
				hasItems += addCategory(bybProductXML, category.toUpperCase(), false);
		}
		
		hasItems += addCategory(bybProductXML, "NO_CATEGORY", true);
		
		if (!hasItems) return null;
		
		return bybProductXML;
		
		/**
		 * @brief - Generates a BYB composition xml
		 * @param - productVM: Product xml node
		 * @author - Vivian Cury
		 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		 * @modified - SDO-10221 - NGK 5.91 - Price inconsistency for portion-based products with invalid configurations on BYB Phase 1
		 *           - SDO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
		 *           - CSO-344 - Nutrition :: CYT :: Phase 1
		 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
		 */
		function lGenerateBYBCompositionXML(productVM)
		{
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
			
			for each (var composition in productVM.Composition.Component)
			{
				var compositionInfo = csoProductInfo[composition.ProductCode];
			
				if (compositionInfo != null)
				{
					var compCategory = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBCategory") != undefined) ?
										compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBCategory").@value.toString().toUpperCase() :
										"NO_CATEGORY");

					var abstractCompXml = new XML("<Category />");
					abstractCompXml.@title = compCategory;
					abstractCompXml.@type = "GRILL";
					
					var mainCompositionXml = new XML("<Item />");
					mainCompositionXml.@code = composition.ProductCode;
					mainCompositionXml.@name = compositionInfo.names[language.toString()] == null ? "" : compositionInfo.names[language.toString()].csoName;
					
					if (composition.CostInclusive == "true")
					{
						mainCompositionXml.@costInclusive = "true";
					}
					
					// CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
					//Modified to include only the current component price.
					//The price combination will be performed in another step.
					//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
					mainCompositionXml.@price = lFormatPrice(lGetProductFixedPrice(compositionInfo.xmlNode.ProductCode.toString()));
					
					mainCompositionXml.@image = compositionInfo.csoImages.largeImage;
					mainCompositionXml.@previewImage = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBPreviewImage") != undefined) ?
														compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBPreviewImage").@value.toString().toUpperCase() :
														"");
					
					// CSO-282 - CYT Redesign
					if (compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer") != undefined) {
						mainCompositionXml.@isContainer = compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer").@value.toString();
					}
					else if (mainCompositionXml.@previewImage.indexOf("|") >= 0) {
						mainCompositionXml.@isContainer = "true";
					}
					else {
						mainCompositionXml.@isContainer = "false";
					}
					
					mainCompositionXml.@containerType = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType") != undefined) ?
													    compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType").@value.toString() :
													    "none");
					// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
					mainCompositionXml.@ingredientSplit = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit") != undefined) ?
														  compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit").@value.toString() :
														  "false");
																
					mainCompositionXml.@ingredientOrder = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder") != undefined && 
															!isNaN(compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value)) ?
																compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value :
																1);
					// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
					mainCompositionXml.@ingredientSplitGroup = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup") != undefined && 
															!isNaN(compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value)) ?
																compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value :
																0);
																
					
					mainCompositionXml.@defaultQty = composition.DefaultQuantity;
					mainCompositionXml.@maxQty = composition.MaxQuantity;
					mainCompositionXml.@minQty = composition.MinQuantity;
					mainCompositionXml.@chargeTH = composition.ChargeThreshold;
					// SQC-6325 - [CTY0] Price is not updated after remove meat of the CTY Burger
					mainCompositionXml.@refundTH = composition.RefundThreshold;
					mainCompositionXml.@isPortionBased = (lCanSetLight(compositionInfo.xmlNode) &&
														  ((new BigDecimal(composition.DefaultQuantity)).compareTo(BigDecimal.ZERO) > 0) &&
														  ((new BigDecimal(composition.MaxQuantity)).compareTo(new BigDecimal(composition.DefaultQuantity)) > 0) &&
														  ((new BigDecimal(composition.MinQuantity)).compareTo(BigDecimal.ZERO) == 0)) ? "true" : "false";
					if (mainCompositionXml.@isPortionBased == "true")
					{
						// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
						// CR - 7797958 - NGK Improvements to CYT Phase 1
						mainCompositionXml.@portionBasedDictionary = lGeneratePortionBasedDictionary(composition.DefaultQuantity, "Composition", composition.MaxQuantity);
						mainCompositionXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(composition.DefaultQuantity, composition.DefaultQuantity, "0", "Composition", composition.MaxQuantity);
						mainCompositionXml.@portionBasedDefaultIndex = lGetPortionBasedDictionaryIndex(composition.DefaultQuantity, composition.DefaultQuantity, "0", "Composition", composition.MaxQuantity);
					}
					
					// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
					// CSO-344 - Nutrition :: CYT :: Phase 1
					// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
					if ((csoLoadCustomEnergyInformation == "") || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
						mainCompositionXml.@calories = lGetEnergyInformation(composition.ProductCode, "PRODUCT|RAW_ITEM", false);
					else{
						// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
						if (!csoCalculateEnergyInformation)
						{
							mainCompositionXml.@energy = lGetCustomEnergyInformation(composition.ProductCode);
							// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
							if (csoProductInfo[composition.ProductCode].hasEnergySuffix == true)
								mainCompositionXml.@customSuffix = GetProductEnergySuffix(composition.ProductCode);
							
							if (mainCompositionXml.@energy != ""){
								mainCompositionXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", mainCompositionXml.@energy);

								// SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
								var canSetLight = compositionInfo.canSetLight.toString();

								if ((Number(mainCompositionXml.@maxQty) > 1) &&
									(canSetLight == "false"))
								{
									mainCompositionXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", mainCompositionXml.@energy);
								}
							}
						}
						else
						{
							// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
							if (compositionInfo.energyInfo)
							{
								if (mainCompositionXml.@isPortionBased == "true")
								{									
									mainCompositionXml.@portionBasedEnergy = lGetPortionBasedEnergyList(compositionInfo.energyInfo);
									mainCompositionXml.@roundedPortionBasedEnergy = lGetPortionBasedRoundedEnergyList(compositionInfo.energyInfo);
								}
								else
								{
									mainCompositionXml.@energy = compositionInfo.energyInfo.CalculatedEnergyInformation;
									var maxQty = Number(composition.MaxQuantity);
									mainCompositionXml.@roundedEnergy = lGetRoundedEnergyList(compositionInfo.energyInfo, maxQty);
								}
							}
						}
					}

					// CSO-282 - CYT Redesign
					mainCompositionXml.@showNutrition = isNutritionalInfoAvailable(composition.ProductCode);
					if (compositionInfo.xmlNode.ProductUnit.length() > 0 && compositionInfo.xmlNode.ProductUnit != "")
					{
						mainCompositionXml.@productUnit	= compositionInfo.xmlNode.ProductUnit;
					}
					
					// CSO-282 - CYT Redesign
					mainCompositionXml.@displayQuantityAsMultiple = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytDisplayQuantityAsMultiple") != undefined) ?
																	  compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytDisplayQuantityAsMultiple").@value.toString() :
																	  "false");
					
					// SDO-9780 - NGK BYBAutoSelection is adding a "ghost" product for the "SOCAL STYLE" product
					for each (var productSelection in autoSelectionProducts) {
						var selections = productSelection.split(":");
						
						if (selections[0] != composition.ProductCode) {
							continue;
						}
						
						if (selections.length > 1)
						{
							// SDO-10221 - NGK 5.91 - Price inconsistency for portion-based products with invalid configurations on BYB Phase 1
							// Added maximum quantity verification to assure that the added quantity is not exceeded.
							var maxQuantityValue = selections[1];
							if (productInfo.xmlNode.Composition.Component.length() > 0) {
								for each (var compositionComponent in productInfo.xmlNode.Composition.Component) {
									if (compositionComponent.ProductCode == composition.ProductCode) {
										if (compositionComponent.MaxQuantity < maxQuantityValue) {
											maxQuantityValue = compositionComponent.MaxQuantity;
										}
									}
								}
							}
							mainCompositionXml.@currQty = maxQuantityValue;
						}
						else
						{
							mainCompositionXml.@currQty = "1";
						}
						
						if (mainCompositionXml.@isPortionBased == "true")
						{
							if (selections.length > 2)
							{
								//Retrieve the portion based index based on the new pos view information (quantity and modifier)
								// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
								// CR - 7797958 - NGK Improvements to CYT Phase 1
								mainCompositionXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(selections[1], composition.DefaultQuantity, selections[2], "Composition", composition.MaxQuantity);
							}
							else if (selections.length > 1)
							{
								//Retrieve the portion based index based on the value defined in the custom parameter BYBAutoSelection (ProductCode:PortionType|...) 
								// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
								// CR - 7797958 - NGK Improvements to CYT Phase 1
								//CSO-789 - NGK 5.15 - CYT Customisation Screen after item is added to basket shows all items as "Light" affecting calorie value
								mainCompositionXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(selections[1], composition.DefaultQuantity, "0", "Composition", composition.MaxQuantity);
							}
							else
							{
								//If the custom parameter BYBAutoSelection doesn't define the portion type use the default value (Regular)
								// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
								// CR - 7797958 - NGK Improvements to CYT Phase 1
								//CSO-789 - NGK 5.15 - CYT Customisation Screen after item is added to basket shows all items as "Light" affecting calorie value
								mainCompositionXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex("2", composition.DefaultQuantity, "0", "Composition", composition.MaxQuantity);
							}
						}
						
						break;
					}
					
					// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
					var allergensFound=[];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allergensFound = lFindAllergens(allergensFound, composition.ProductCode, [], false, true, false, true);
					if (allergensFound.length>0) {
						mainCompositionXml.@hasAllergens = "true";
						
						allergensFound = [];
						// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
						allergensFound = lFindAllergens(allergensFound, composition.ProductCode, selectedAllergensList, false, true, false, false);
						if (allergensFound.length>0) {
							mainCompositionXml.@hasSignaledAllergens = "true";
						}
					}
					
					abstractCompXml.appendChild(mainCompositionXml);
					
					if (categories[compCategory] == undefined)
					{
						categories[compCategory] = new Array();
					}
					
					categories[compCategory].push(abstractCompXml);
				}
			}
		}
		
		/**
		 * @brief - Generates a BYB choice xml
		 * @param - abstractChoice: Abstract choice component
		 * @param - parentCostInclusive
		 * @author - Vivian Cury
		 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		 * @modified - SDO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
		 *           - CSO-344 - Nutrition :: CYT :: Phase 1
		 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
		 */
		function lGenerateBYBChoiceXml(abstractChoice, parentCostInclusive)
		{
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
			
			if (!lIsProductValid(abstractChoice.ProductCode)) return null;
			
			var abstractChoiceInfo = csoProductInfo[abstractChoice.ProductCode.toString()];
			var choiceCategory = ((abstractChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBCategory") != undefined) ?
								   abstractChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBCategory").@value.toString().toUpperCase() :
								   "NO_CATEGORY");
			// SDO-10222 - NGK 5.91 - Display Order configured with invalid values with incorrect behaviour on BYB Phase 1
			choices.push(choiceCategory);
		
			var abstractChoiceXml = new XML("<Category />");
			abstractChoiceXml.@title = choiceCategory;
			abstractChoiceXml.@type = "CHOICE";
			abstractChoiceXml.@defaultQuantity = abstractChoice.DefaultQuantity;
			abstractChoiceXml.@code = abstractChoice.ProductCode;
			
			if (abstractChoice.CostInclusive == "true" || parentCostInclusive)
			{
				parentCostInclusive = true;
				abstractChoiceXml.@costInclusive = "true";
				abstractChoiceXml.@price = lFormatPrice("0");
			}
			else
			{
				abstractChoiceXml.@price = lFormatPrice(lGetPrice(abstractChoiceInfo.xmlNode));
			}

			var hasAutoChoice = false;
			
			//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
			if (abstractChoiceInfo.hasComposition)
			{
				for each (var concreteChoice in abstractChoiceInfo.xmlNode.Composition.Component)
				{
					var concreteChoiceXml = new XML("<Item />");
					concreteChoiceXml.@code = concreteChoice.ProductCode;
					
					//SDO-7747 - NGK stops working when trying to sell a product with no price configured
					if (!lIsProductValid(concreteChoice.ProductCode)) continue;
					if (!lIsProductPriceNodeValid(concreteChoice.ProductCode)) continue;
					
					var concreteChoiceInfo = csoProductInfo[concreteChoice.ProductCode.toString()];
					
					concreteChoiceXml.@name = concreteChoiceInfo.names[language.toString()] == null ? "" : concreteChoiceInfo.names[language.toString()].csoName;
					
					if ((concreteChoice.CostInclusive == "true") || parentCostInclusive)
					{
						concreteChoiceXml.@costInclusive = "true";
						concreteChoiceXml.@price = abstractChoiceXml.@price.toString();
					}
					else
					{
						//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
						try
						{
							concreteChoiceXml.@price = lFormatPrice(lGetProductFixedPrice(concreteChoiceInfo.xmlNode.ProductCode.toString()));
						}
						catch(ex)
						{
							API.dbg("lGenerateChoiceXml - Price conversion failed: " + ex);
							concreteChoiceXml.@price = lFormatPrice("0");
						}
					}
					
					concreteChoiceXml.@orderSaleType = orderSaleType;
					concreteChoiceXml.@image = concreteChoiceInfo.csoImages.largeImage;
					concreteChoiceXml.@previewImage = ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBPreviewImage") != undefined) ?
													   concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBPreviewImage").@value.toString().toUpperCase() :
													   "");
					
					// CSO-282 - CYT Redesign
					if (concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer") != undefined) {
						concreteChoiceXml.@isContainer = concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer").@value.toString();
					}
					else if (concreteChoiceXml.@previewImage.indexOf("|") >= 0) {
						concreteChoiceXml.@isContainer = "true";
					}
					else {
						concreteChoiceXml.@isContainer = "false";
					}
														
					concreteChoiceXml.@containerType = ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType") != undefined) ?
													    concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType").@value.toString() :
													    "none");
					// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
					concreteChoiceXml.@ingredientSplit = ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit") != undefined) ?
														  concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit").@value.toString() :
														  "false");
																
					concreteChoiceXml.@ingredientOrder = ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder") != undefined && 
															!isNaN(concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value)) ?
																concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value :
																1);
					// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
					concreteChoiceXml.@ingredientSplitGroup = ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup") != undefined && 
															!isNaN(concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value)) ?
																concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value :
																0);											
																 
					concreteChoiceXml.@defaultQuantity = concreteChoice.DefaultQuantity;
					
					// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
					// CSO-344 - Nutrition :: CYT :: Phase 1
					// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
					if ((csoLoadCustomEnergyInformation == "") || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
						concreteChoiceXml.@calories = lGetEnergyInformation(concreteChoice.ProductCode, "PRODUCT|RAW_ITEM", false);
					else{
						// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
						if (!csoCalculateEnergyInformation)
						{
							concreteChoiceXml.@energy = lGetCustomEnergyInformation(concreteChoice.ProductCode);
							// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
							if (csoProductInfo[concreteChoice.ProductCode].hasEnergySuffix == true)
								concreteChoiceXml.@customSuffix = GetProductEnergySuffix(concreteChoice.ProductCode);
							
							if (concreteChoiceXml.@energy != ""){
								concreteChoiceXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", concreteChoiceXml.@energy);

								// SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
								var canSetLight = concreteChoiceInfo.canSetLight.toString();

								if ((Number(concreteChoiceXml.@maxQty) > 1) &&
									(canSetLight == "false")){
									concreteChoiceXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", concreteChoiceXml.@energy);
								}
							}
						}
						else 
						{
							// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
							if (concreteChoiceInfo.energyInfo)
							{
								concreteChoiceXml.@energy = concreteChoiceInfo.energyInfo.CalculatedEnergyInformation;
								concreteChoiceXml.@roundedEnergy = lGetRoundedEnergyList(concreteChoiceInfo.energyInfo, 1);
							}
						}
					}

					// CSO-282 - CYT Redesign
					concreteChoiceXml.@showNutrition = isNutritionalInfoAvailable(concreteChoice.ProductCode);
					if (concreteChoiceInfo.xmlNode.ProductUnit.length() > 0 && concreteChoiceInfo.xmlNode.ProductUnit != "")
					{
						concreteChoiceXml.@productUnit = concreteChoiceInfo.xmlNode.ProductUnit;
					}
					
					// SDO-9780 - NGK BYBAutoSelection is adding a "ghost" product for the "SOCAL STYLE" product
					for each (var productSelection in autoSelectionProducts) {
						var selections = productSelection.split(":");
						
						if (selections[0] != concreteChoice.ProductCode) {
							continue;
						}
						
						if (selections.length > 1)
						{
							concreteChoiceXml.@currQty = selections[1];
						}
						else
						{
							concreteChoiceXml.@currQty = "1";
						}
						
						break;
					}
					
					if (concreteChoice.DefaultQuantity > 0)
					{
						hasAutoChoice = true;
					}
					
					// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
					var allergensFound=[];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allergensFound = lFindAllergens(allergensFound, concreteChoice.ProductCode, [], false, true, false, true);
					if (allergensFound.length>0) {
						concreteChoiceXml.@hasAllergens = "true";
						
						allergensFound = [];
						// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
						allergensFound = lFindAllergens(allergensFound, concreteChoice.ProductCode, selectedAllergensList, false, true, false, false);
						if (allergensFound.length>0) {
							concreteChoiceXml.@hasSignaledAllergens = "true";
						}
					}

					abstractChoiceXml.appendChild(concreteChoiceXml);
				}
			}
			
			if (!hasAutoChoice)
			{
				if (categories[choiceCategory] == undefined)
				{
					categories[choiceCategory] = new Array();
				}
				
				categories[choiceCategory].push(abstractChoiceXml);
			}
		}
		
		/**
		 * @brief - Generates a BYB can add xml
		 * @param - abstractChoice: Can add component
		 * @author - Vivian Cury
		 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		 * @modified - SDO-10221 - NGK 5.91 - Price inconsistency for portion-based products with invalid configurations on BYB Phase 1
		 *           - SDO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
		 *           - CSO-344 - Nutrition :: CYT :: Phase 1
		 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
		 */
		function lGenerateBYBCanAddXml(canAdd)
		{
			if (!lIsProductValid(canAdd.ProductCode)) return null;
			var canAddInfo = csoProductInfo[canAdd.ProductCode];
			
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
			
			var compCategory = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBCategory") != undefined) ?
								canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBCategory").@value.toString().toUpperCase() :
								"NO_CATEGORY");
			var canAddXml = new XML("<Item />");
			canAddXml.@code = canAdd.ProductCode;
			canAddXml.@name = canAddInfo.names[language.toString()] == null ? "" : canAddInfo.names[language.toString()].csoName;
			
			if (canAdd.CostInclusive == "true")
			{
				canAddXml.@costInclusive = "true";
			}
			
			// CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
			//Modified to include only the current component price.
			//The price combination will be performed in another step.
			canAddXml.@price = lFormatPrice(lGetPrice(canAddInfo.xmlNode));
			
			canAddXml.@image = canAddInfo.csoImages.largeImage;
			canAddXml.@previewImage = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBPreviewImage") != undefined) ?
									   canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBPreviewImage").@value.toString().toUpperCase() :
									   "");
						
			// CSO-282 - CYT Redesign
			if (canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer") != undefined) {
				canAddXml.@isContainer = canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer").@value.toString();
			}
			else if (canAddXml.@previewImage.indexOf("|") >= 0) {
				canAddXml.@isContainer = "true";
			}
			else {
				canAddXml.@isContainer = "false";
			}

			canAddXml.@containerType = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType") != undefined) ?
									   canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType").@value.toString() :
									   "none");
			// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
			canAddXml.@ingredientSplit = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit") != undefined) ?
										  canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit").@value.toString() :
										  "false");
														
			canAddXml.@ingredientOrder = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder") != undefined && 
											!isNaN(canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value)) ?
												canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value :
												1);
			// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
			canAddXml.@ingredientSplitGroup = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup") != undefined && 
											!isNaN(canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value)) ?
												canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value :
												0);									
														 
			canAddXml.@defaultQty = canAdd.DefaultQuantity;
			canAddXml.@maxQty = canAdd.MaxQuantity;
			canAddXml.@minQty = canAdd.MinQuantity;
			canAddXml.@chargeTH = canAdd.ChargeThreshold;
			// SQC-6325 - [CTY0] Price is not updated after remove meat of the CTY Burger
			canAddXml.@refundTH = canAdd.RefundThreshold;
			canAddXml.@isPortionBased = (lCanSetLight(canAddInfo.xmlNode) &&
										 ((new BigDecimal(canAdd.MaxQuantity)).compareTo(new BigDecimal(canAdd.DefaultQuantity)) > 0) &&
										 ((new BigDecimal(canAdd.MinQuantity)).compareTo(BigDecimal.ZERO) == 0)) ? "true" : "false";
			if (canAddXml.@isPortionBased == "true")
			{
				// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
				// CR - 7797958 - NGK Improvements to CYT Phase 1
				canAddXml.@portionBasedDictionary = lGeneratePortionBasedDictionary(canAdd.DefaultQuantity, "CanAdds", canAdd.MaxQuantity);
				canAddXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(canAdd.DefaultQuantity, canAdd.DefaultQuantity, "0", "CanAdds", canAdd.MaxQuantity);
				canAddXml.@portionBasedDefaultIndex = lGetPortionBasedDictionaryIndex(canAdd.DefaultQuantity, canAdd.DefaultQuantity, "0", "CanAdds", canAdd.MaxQuantity);
			}
			
			// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
			// CSO-344 - Nutrition :: CYT :: Phase 1
			// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
			if ((csoLoadCustomEnergyInformation == "") || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
				canAddXml.@calories = lGetEnergyInformation(canAdd.ProductCode, "PRODUCT|RAW_ITEM", false);
			else{
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if (!csoCalculateEnergyInformation)
				{
					canAddXml.@energy = lGetCustomEnergyInformation(canAdd.ProductCode);
					// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
					if (csoProductInfo[canAdd.ProductCode].hasEnergySuffix == true)
						canAddXml.@customSuffix = GetProductEnergySuffix(canAdd.ProductCode);
					
					if (canAddXml.@energy != ""){
						canAddXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", canAddXml.@energy);

						// SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
						var canSetLight = canAddInfo.canSetLight.toString();;

						if ((Number(canAddXml.@maxQty) > 1) &&
							(canSetLight == "false"))
						{
							canAddXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", canAddXml.@energy);
						}
					}
				}
				else 
				{
					// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
					if (canAddInfo.energyInfo)
					{
						if (canAddXml.@isPortionBased == "true")
						{
							canAddXml.@portionBasedEnergy = lGetPortionBasedEnergyList(canAddInfo.energyInfo);
							canAddXml.@roundedPortionBasedEnergy = lGetPortionBasedRoundedEnergyList(canAddInfo.energyInfo);
						}
						else
						{
							canAddXml.@energy = canAddInfo.energyInfo.CalculatedEnergyInformation;
							var maxQty = Number(canAdd.MaxQuantity);
							canAddXml.@roundedEnergy = lGetRoundedEnergyList(canAddInfo.energyInfo, maxQty);
						}
					}
				}
			}
			

			// CSO-282 - CYT Redesign
			canAddXml.@showNutrition = isNutritionalInfoAvailable(canAdd.ProductCode);
			if (canAddInfo.xmlNode.ProductUnit.length() > 0 && canAddInfo.xmlNode.ProductUnit != "")
			{
				canAddXml.@productUnit = canAddInfo.xmlNode.ProductUnit;
			}
			
			// CSO-282 - CYT Redesign
			canAddXml.@displayQuantityAsMultiple = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytDisplayQuantityAsMultiple") != undefined) ?
													  canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytDisplayQuantityAsMultiple").@value.toString() :
													  "false");
													  
			// SDO-9780 - NGK BYBAutoSelection is adding a "ghost" product for the "SOCAL STYLE" product
			for each (var productSelection in autoSelectionProducts) {
				var selections = productSelection.split(":");
				
				if (selections[0] != canAdd.ProductCode) {
					continue;
				}

				if (selections.length > 1)
				{	
					// SDO-10221 - NGK 5.91 - Price inconsistency for portion-based products with invalid configurations on BYB Phase 1
					// Added maximum quantity verification to assure that the added quantity is not exceeded.
					var maxQuantityValue = selections[1];
					if (productInfo.xmlNode.CanAdds.Component.length() > 0) {
						for each (var canAddComponent in productInfo.xmlNode.CanAdds.Component) {
							if (canAddComponent.ProductCode == canAdd.ProductCode) {
								if (canAddComponent.MaxQuantity < maxQuantityValue) {
									maxQuantityValue = canAddComponent.MaxQuantity;
								}
							}
						}
					}							
					canAddXml.@currQty = maxQuantityValue;
				}
				else
				{
					canAddXml.@currQty = "1";
				}
				
				if (canAddXml.@isPortionBased.toString() == "true")
				{
					if (selections.length > 2)
					{
						//Retrieve the portion based index based on the new pos view information (quantity and modifier)
						// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
						// CR - 7797958 - NGK Improvements to CYT Phase 1
						canAddXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(selections[1], canAdd.DefaultQuantity, selections[2], "CanAdds", canAdd.MaxQuantity);
					}
					else if (selections.length > 1)
					{
						//Retrieve the portion based index based on the value defined in the custom parameter BYBAutoSelection (ProductCode:PortionType|...) 
						// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
						// CR - 7797958 - NGK Improvements to CYT Phase 1
						canAddXml.@portionBasedIndex = lConvertPortionTypeToDictionaryIndex(selections[1], "CanAdds", canAdd.MaxQuantity);
					}
					else
					{
						//If the custom parameter BYBAutoSelection doesn't define the portion type use the default value (Light)
						// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
						// CR - 7797958 - NGK Improvements to CYT Phase 1
						if(parseInt(canAdd.MaxQuantity) > 1)
						{
							canAddXml.@portionBasedIndex = lConvertPortionTypeToDictionaryIndex("2", "CanAdds", canAdd.MaxQuantity);
						}
						else {
							canAddXml.@portionBasedIndex = lConvertPortionTypeToDictionaryIndex("1", "CanAdds", canAdd.MaxQuantity);
						}
					}
				}
				
				break;
			}
			
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			var allergensFound=[];
			// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
			allergensFound = lFindAllergens(allergensFound, canAdd.ProductCode, [], false, true, false, true);
			if (allergensFound.length>0) {
				canAddXml.@hasAllergens = "true";
				
				allergensFound = [];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				allergensFound = lFindAllergens(allergensFound, canAdd.ProductCode, selectedAllergensList, false, true, false, false);
				if (allergensFound.length>0) {
					canAddXml.@hasSignaledAllergens = "true";
				}
			}
			
			if (categories[compCategory] == undefined)
			{
				categories[compCategory] = new Array();
			}
			
			categories[compCategory].push(canAddXml);
		}
		
		/**
		 * @brief - Adds a category xml to the main xml node
		 * @param - prodXML: The main xml node
		 * @param - categoryName: The category name
		 * @param - validateChoice: true if choices must be checked, false otherwise
		 * @author - Vivian Cury
		 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		 * @modified - SDO-10221 - NGK 5.91 - Price inconsistency for portion-based products with invalid configurations on BYB Phase 1
		 */
		function addCategory(prodXML, categoryName, validateChoice)
		{
			var count = 0;
			if (categories[categoryName] != undefined)
			{
				var canAddGroupXML = null;
				
				for each (var item in categories[categoryName])
				{
					if (!validateChoice || (item.@type != undefined && item.@type == "CHOICE"))
					{
						if (item.@title != undefined)
						{
							if (item.@type != undefined && item.@type == "CHOICE")
							{
								prodXML.appendChild(item);
								count++;
							}
							else
							{
								if (canAddGroupXML == null)
								{
									canAddGroupXML = item;
									
									if (bybMutExclusive.split("|").indexOf(categoryName) >= 0)
									{
										canAddGroupXML.@isMutuallyExclusive = "true";
									}
								}
								else
								{
									// SDO-10221 - NGK 5.91 - Price inconsistency for portion-based products with invalid configurations on BYB Phase 1
									canAddGroupXML.appendChild(item.Item);
								}
							}
						}
						else
						{
							if (canAddGroupXML == null)
							{
								canAddGroupXML = new XML("<Category />");
								canAddGroupXML.@title = categoryName;
								canAddGroupXML.@type = "GRILL";
								
								if (bybMutExclusive.split("|").indexOf(categoryName) >= 0)
								{
									canAddGroupXML.@isMutuallyExclusive = "true";
								}
							}
							
							canAddGroupXML.appendChild(item);
						}
					}
				}
				
				if (canAddGroupXML != null)
				{
					prodXML.appendChild(canAddGroupXML);
					count++;
				}
			}
			
			return count;
		}
	}

	/**
	 * @brief  - Generates the CYT product xml (version 2)
	 * @param  - productCode: CYT product code
	 * @param  - costInclusive
	 * @param  - cytAutoSelection: Auto selections for grill operation and pre-built sandwich.
	 * @param  - customInfo	// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
	 * @param  - grillSequence: grill items list sorted by chronological selling order
	 * @return - CYT product xml
	 * @author - Jorge Olimpia
	 * @since  - CSO-228 - NGK Support CYT phase 2 configuration - 7826843
	 */
	function lGenerateCYTProductXML(productCode, costInclusive, cytAutoSelection, customInfo, grillSequence) {
		if (!lIsProductValid(productCode)) {
			API.dbg("NGK - PosNGKOrderItemJS.lGenerateCYTProductXML - Product does not exist or is not available - ProductCode: " + productCode);
			return null;
		}
		
		var productInfo = csoProductInfo[productCode.toString()];
		if (productInfo == null || !productInfo.isValid) {
			API.dbg("NGK - PosNGKOrderItemJS.lGenerateCYTProductXML - Product's structure is not available - ProductCode: " + productCode);
			return null;
		}
		
		var bybOrder = "";
		if (productInfo.xmlNode.SmartRouting.CytGroupDisplayOrder != undefined) {
			for each (var groupItem in productInfo.xmlNode.SmartRouting.CytGroupDisplayOrder.Group) {
				bybOrder = bybOrder.length == 0 ? groupItem.toString().toUpperCase() : bybOrder + "|" + groupItem.toString().toUpperCase();
			}
		} 

		if (bybOrder == "") {
			API.dbg("NGK - PosNGKOrderItemJS.lGenerateCYTProductXML - Product does not contain a CytGroupDisplayOrder tag - ProductCode: " + productCode);
			return null;
		}
		
		var autoSelectionProducts = cytAutoSelection.toString().split("|");
		// SDO-10289 - NGK 5.91 - Pre-built products with incorrect behavior
		var removeCanAdds = lGetCSOUserInterfaceStringParameter("hideCanAddsOnGrillScreen", "false") == "true";
		
		var language = sessionSale.get("LANGUAGE");
	    var cytProductXML = new XML("<Product />");
		var categories = [];
		
		// CSO-282 - CYT Redesign
		// This array contains product codes related to the ingredients available in this product, ordered by register
		var ingredientsOrder = [];
		
		var cytMutExclusive = "";
		
		cytProductXML.@code = productCode;
		cytProductXML.@name = (productInfo.names[language.toString()] == null ? "" : productInfo.names[language.toString()].csoName);
		cytProductXML.@image = productInfo.csoImages.dimensionImage;
		cytProductXML.@bybType = ((productInfo.xmlNode.SmartRouting.CytProduct != undefined && productInfo.xmlNode.SmartRouting.CytProduct.toString() != "") ?
								  productInfo.xmlNode.SmartRouting.CytProduct.toString().toUpperCase() :
									  "");
		
		if (costInclusive) {
			costInclusive = true;
			cytProductXML.@costInclusive = "true";
			cytProductXML.@price = lFormatPrice("0");
		}
		else {
			// CSO-324 - TSS MR2 QR6 - On Kiosk prices are not showing correctly for Grill Thriller and SoCal Style CYT Prebuilt items
			// Get only the CYT main product price because additional prices are calculated at UI.
			cytProductXML.@price = lFormatPrice(lGetPriceTagValueBySaleType(productInfo.xmlNode.ProductCode.toString()));
		}
		
		// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
		// Adds customInfo data.
		if((customInfo != null) && (customInfo != undefined) && (customInfo != ""))
		{
			cytProductXML.@customInfo = customInfo;
		}		
		
		// Adds the Composition to the structure.
		if (productInfo.hasComposition) {
			lGenerateCYTCompositionXML(productInfo.xmlNode);
		}
		
		// Adds the Choice to the structure.
		if (productInfo.hasChoices) {
			for each (var abstractChoice in productInfo.xmlNode.Choices.Component) {
				lGenerateCYTChoiceXml(abstractChoice, costInclusive);
			}
		}
		
		// Adds the CanAdds to the structure.
		if (productInfo.xmlNode.CanAdds.Component.length() > 0 && !removeCanAdds) {
			for each (var canAdd in productInfo.xmlNode.CanAdds.Component) {
				// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
				// Script error
				if (csoProductInfo[canAdd.ProductCode])
				{
					var canAddNode = csoProductInfo[canAdd.ProductCode].xmlNode;
					if (lCheckCanAdd(productInfo.xmlNode, canAddNode)) {
						lGenerateCYTCanAddXml(canAdd);
					}
				}
			}
		}
		
		var hasItems = 0;
		for each (var category in bybOrder.split("|")) {
			hasItems += addCYTCategory(cytProductXML, category.toUpperCase(), false);
		}
		
		hasItems += addCYTCategory(cytProductXML, "NO_CATEGORY", true);
		
		if (!hasItems){
			API.dbg("NGK - PosNGKOrderItemJS.lGenerateCYTProductXML - Product does not contain any item - ProductCode: " + productCode);
			return null;
		}
		
		// CSO-282 - CYT Redesign
		cytProductXML.@ingredientsOrder = ingredientsOrder;
		
		// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
		if(grillSequence) {
			cytProductXML.@grillSequence=grillSequence;
		}
		
		return cytProductXML;
		
		/**
		 * @brief  - Generates a CYT composition xml (version 2)
		 * @param  - product: Product xml node
		 * @author - Jorge Olimpia
		 * @since  - CSO-228 - NGK Support CYT phase 2 configuration - 7826843
		 * @modified - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
		 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
		 */
		function lGenerateCYTCompositionXML(product)
		{
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
			
			for each (var composition in product.Composition.Component) {
				var compositionInfo = csoProductInfo[composition.ProductCode];
				// CSO-282 - CYT Redesign
				ingredientsOrder.push(composition.ProductCode);

				var compCategory = "";
				if (compositionInfo.xmlNode.SmartRouting.CytIngredientGroup != undefined && 
					compositionInfo.xmlNode.SmartRouting.CytIngredientGroup.toString() != "") {
					compCategory = compositionInfo.xmlNode.SmartRouting.CytIngredientGroup.toString().toUpperCase();
				}
				else {
					compCategory = "NO_CATEGORY";
				}

				if (storeDbXml.StoreDB.CytIngredientGroups != undefined) {
					if (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory) == undefined) {
						continue;
					}
				}
				else {
					continue;
				}
				
				var abstractCompXml = new XML("<Category />");
				abstractCompXml.@title = compCategory;
				abstractCompXml.@type = "GRILL";
				
				if (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@mutuallyExclusive != undefined &&
					storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@mutuallyExclusive == true) {
					cytMutExclusive = cytMutExclusive.length == 0 ? compCategory : cytMutExclusive + "|" + compCategory;
				}
				
				abstractCompXml.@minGroupQuantity = (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@minQuantity != undefined && 
													!isNaN(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@minQuantity)) ?
													new BigDecimal(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@minQuantity) :
													0;
				
				// When maxGroupQuantity is equals to zero, then consider product recipe's maximum quantity.
				abstractCompXml.@maxGroupQuantity = (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@maxQuantity != undefined && 
													!isNaN(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@maxQuantity)) ?
													new BigDecimal(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@maxQuantity) :
													0;

				// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
				abstractCompXml.@chargeThreshold = (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@chargeThreshold != undefined && 
													!isNaN(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@chargeThreshold)) ?
													new BigDecimal(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@chargeThreshold) :
													-1;

				var mainCompositionXml = new XML("<Item />");
				
				mainCompositionXml.@code = composition.ProductCode;
				mainCompositionXml.@name = compositionInfo.names[language.toString()] == null ? "" : compositionInfo.names[language.toString()].csoName;
				mainCompositionXml.@price = lFormatPrice(lGetProductFixedPrice(compositionInfo.xmlNode.ProductCode.toString()));
				mainCompositionXml.@image = compositionInfo.csoImages.largeImage;
				
				if (composition.CostInclusive == "true") {
					mainCompositionXml.@costInclusive = "true";
				}
				
				if (compositionInfo.xmlNode.Presentation.CytPreviewImage != undefined && 
					compositionInfo.xmlNode.Presentation.CytPreviewImage.toString() != "") {
					var previewImage = compositionInfo.xmlNode.Presentation.CytPreviewImage.toString().toUpperCase();
					
					if (compositionInfo.xmlNode.Presentation.CytPreviewImageBottom != undefined &&
						compositionInfo.xmlNode.Presentation.CytPreviewImageBottom.toString() != "") {
						previewImage += "|" + compositionInfo.xmlNode.Presentation.CytPreviewImageBottom.toString().toUpperCase();
					}
					
					mainCompositionXml.@previewImage = previewImage;
				}
				else {
					mainCompositionXml.@previewImage = "";
				}

				// CSO-282 - CYT Redesign
				if (compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer") != undefined) {
					mainCompositionXml.@isContainer = compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer").@value.toString();
				}
				else if (mainCompositionXml.@previewImage.indexOf("|") >= 0) {
					mainCompositionXml.@isContainer = "true";
				}
				else {
					mainCompositionXml.@isContainer = "false";
				}

				mainCompositionXml.@containerType = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType") != undefined) ?
													compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType").@value.toString() :
													"none");
				// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
				mainCompositionXml.@ingredientSplit =  ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit") != undefined) ?
														  compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit").@value.toString() :
														  "false");
															
				mainCompositionXml.@ingredientOrder = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder") != undefined && 
													    !isNaN(compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value)) ?
													        compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value :
													        1);
				// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
				mainCompositionXml.@ingredientSplitGroup = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup") != undefined && 
													    !isNaN(compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value)) ?
													        compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value :
													        0);											
				
				mainCompositionXml.@defaultQty = composition.DefaultQuantity;
				mainCompositionXml.@maxQty = composition.MaxQuantity;
				mainCompositionXml.@minQty = composition.MinQuantity;
				mainCompositionXml.@chargeTH = composition.ChargeThreshold;
				mainCompositionXml.@refundTH = composition.RefundThreshold;
				mainCompositionXml.@isPortionBased = (lCanSetLight(compositionInfo.xmlNode) &&
													  ((new BigDecimal(composition.DefaultQuantity)).compareTo(BigDecimal.ZERO) > 0) &&
													  ((new BigDecimal(composition.MaxQuantity)).compareTo(new BigDecimal(composition.DefaultQuantity)) > 0) &&
													  ((new BigDecimal(composition.MinQuantity)).compareTo(BigDecimal.ZERO) == 0)) ? "true" : "false";
				if (mainCompositionXml.@isPortionBased == "true") {
					// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
					// CR - 7797958 - NGK Improvements to CYT Phase 1
					mainCompositionXml.@portionBasedDictionary = lGeneratePortionBasedDictionary(composition.DefaultQuantity, "Composition", composition.MaxQuantity);
					mainCompositionXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(composition.DefaultQuantity, composition.DefaultQuantity, "0", "Composition", composition.MaxQuantity);
					mainCompositionXml.@portionBasedDefaultIndex = lGetPortionBasedDictionaryIndex(composition.DefaultQuantity, composition.DefaultQuantity, "0", "Composition", composition.MaxQuantity);
				}
				
				// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
				// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
				if ((csoLoadCustomEnergyInformation == "") || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
					mainCompositionXml.@calories = lGetEnergyInformation(composition.ProductCode, "PRODUCT|RAW_ITEM", false);
				else{
					// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
					if (!csoCalculateEnergyInformation)
					{
						mainCompositionXml.@energy = lGetCustomEnergyInformation(composition.ProductCode);
						// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
						if (csoProductInfo[composition.ProductCode].hasEnergySuffix == true)
							mainCompositionXml.@customSuffix = GetProductEnergySuffix(composition.ProductCode);
						
						if (mainCompositionXml.@energy != ""){
							mainCompositionXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", mainCompositionXml.@energy);

							// SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
							var canSetLight = compositionInfo.canSetLight.toString();

							// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
							if ((Number(mainCompositionXml.@maxQty) > 1) &&
								(canSetLight == "false"))
							{
								mainCompositionXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", mainCompositionXml.@energy);
							}
						}
					}
					else 
					{
						// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
						if (compositionInfo.energyInfo)
						{
							if (mainCompositionXml.@isPortionBased == "true")
							{									
								mainCompositionXml.@portionBasedEnergy = lGetPortionBasedEnergyList(compositionInfo.energyInfo);
								mainCompositionXml.@roundedPortionBasedEnergy = lGetPortionBasedRoundedEnergyList(compositionInfo.energyInfo);
							}
							else
							{
								mainCompositionXml.@energy = compositionInfo.energyInfo.CalculatedEnergyInformation;
								var maxQty = Number(composition.MaxQuantity);
								mainCompositionXml.@roundedEnergy = lGetRoundedEnergyList(compositionInfo.energyInfo, maxQty);
							}
						}
					}
				}

				// CSO-282 - CYT Redesign
				mainCompositionXml.@showNutrition = isNutritionalInfoAvailable(composition.ProductCode);
				if (compositionInfo.xmlNode.ProductUnit.length() > 0 && compositionInfo.xmlNode.ProductUnit != "")
				{
					mainCompositionXml.@productUnit = compositionInfo.xmlNode.ProductUnit;
				}

				// CSO-282 - CYT Redesign
				mainCompositionXml.@displayQuantityAsMultiple = ((compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytDisplayQuantityAsMultiple") != undefined) ?
																	  compositionInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytDisplayQuantityAsMultiple").@value.toString() :
																	  "false");
			
				for each (var productSelection in autoSelectionProducts) {
					var selections = productSelection.split(":");
					
					if (selections[0] != composition.ProductCode) {
						continue;
					}
					
					if (selections.length > 1)
					{
						mainCompositionXml.@currQty = selections[1];
					}
					else
					{
						mainCompositionXml.@currQty = "1";
					}
					
					if (mainCompositionXml.@isPortionBased == "true")
					{
						if (selections.length > 2)
						{
							//Retrieve the portion based index based on the new pos view information (quantity and modifier)
							// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
							// CR - 7797958 - NGK Improvements to CYT Phase 1
							mainCompositionXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(selections[1], composition.DefaultQuantity, selections[2], "Composition", composition.MaxQuantity);
						}
						else if (selections.length > 1)
						{
							//Retrieve the portion based index based on the value defined in the custom parameter BYBAutoSelection (ProductCode:PortionType|...) 
							// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
							// CR - 7797958 - NGK Improvements to CYT Phase 1
							//CSO-789 - NGK 5.15 - CYT Customisation Screen after item is added to basket shows all items as "Light" affecting calorie value
							mainCompositionXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(selections[1], composition.DefaultQuantity, "0", "Composition", composition.MaxQuantity);
						}
						else
						{
							//If the custom parameter BYBAutoSelection doesn't define the portion type use the default value (Regular)
							// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
							// CR - 7797958 - NGK Improvements to CYT Phase 1
							//CSO-789 - NGK 5.15 - CYT Customisation Screen after item is added to basket shows all items as "Light" affecting calorie value
							mainCompositionXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex("2", composition.DefaultQuantity, "0", "Composition", composition.MaxQuantity);
						}
					}
					
					break;
				}
				
				// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
				var allergensFound=[];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				allergensFound = lFindAllergens(allergensFound, composition.ProductCode, [], false, true, false, true);
				if (allergensFound.length>0) {
					mainCompositionXml.@hasAllergens = "true";
					
					allergensFound = [];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allergensFound = lFindAllergens(allergensFound, composition.ProductCode, selectedAllergensList, false, true, false, false);
					if (allergensFound.length>0) {
						mainCompositionXml.@hasSignaledAllergens = "true";
					}
				}
				
				abstractCompXml.appendChild(mainCompositionXml);
				
				if (categories[compCategory] == undefined) {
					categories[compCategory] = new Array();
					categories[compCategory].push(abstractCompXml);
				}
				else
					categories[compCategory].push(mainCompositionXml);
				
				
			}
		}
		
		/**
		 * @brief  - Generates a CYT choice xml (version 2)
		 * @param  - abstractChoice: Abstract choice component
		 * @param  - parentCostInclusive
		 * @author - Jorge Olimpia
		 * @since  - CSO-228 - NGK Support CYT phase 2 configuration - 7826843
		 * @modified - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
		 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
		 */
		function lGenerateCYTChoiceXml(abstractChoice, parentCostInclusive)
		{
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
			
			if (!lIsProductValid(abstractChoice.ProductCode)) return null;
			
			var abstractChoiceInfo = csoProductInfo[abstractChoice.ProductCode.toString()];
			
			var choiceCategory = "";
			if (abstractChoiceInfo.xmlNode.SmartRouting.CytIngredientGroup != undefined) {
				choiceCategory = abstractChoiceInfo.xmlNode.SmartRouting.CytIngredientGroup.toString().toUpperCase();
			}
			else {
				choiceCategory = "NO_CATEGORY";
			}
			
			if (storeDbXml.StoreDB.CytIngredientGroups != undefined) {
				if (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory) == undefined) {
					return;
				}
			}
			else {
				return;
			}
		
			var abstractChoiceXml = new XML("<Category />");
			abstractChoiceXml.@title = choiceCategory;
			abstractChoiceXml.@type = "CHOICE";
			abstractChoiceXml.@defaultQuantity = abstractChoice.DefaultQuantity;
			abstractChoiceXml.@code = abstractChoice.ProductCode;
			
			if (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@mutuallyExclusive != undefined &&
				storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@mutuallyExclusive == true) {
				cytMutExclusive = cytMutExclusive.length == 0 ? choiceCategory : cytMutExclusive + "|" + choiceCategory;
			}
			
			abstractChoiceXml.@minGroupQuantity = (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@minQuantity != undefined && 
												!isNaN(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@minQuantity)) ?
												Number(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@minQuantity) :
												0;
			
			// When maxGroupQuantity is equals to zero, then consider product recipe's maximum quantity.
			abstractChoiceXml.@maxGroupQuantity = (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@maxQuantity != undefined && 
												!isNaN(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@maxQuantity)) ?
												Number(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@maxQuantity) :
												0;

			// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
			abstractChoiceXml.@chargeThreshold = (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@chargeThreshold != undefined && 
												!isNaN(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@chargeThreshold)) ?
												Number(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == choiceCategory).@chargeThreshold) :
												-1;
					
			if (abstractChoice.CostInclusive == "true" || parentCostInclusive)
			{
				parentCostInclusive = true;
				abstractChoiceXml.@costInclusive = "true";
				abstractChoiceXml.@price = lFormatPrice("0");
			}
			else
			{
				abstractChoiceXml.@price = lFormatPrice(lGetPrice(abstractChoiceInfo.xmlNode));
			}

			var hasAutoChoice = false;
			
			if (abstractChoiceInfo.hasComposition)
			{
				for each (var concreteChoice in abstractChoiceInfo.xmlNode.Composition.Component)
				{
					// CSO-282 - CYT Redesign
					ingredientsOrder.push(concreteChoice.ProductCode);
				
					var concreteChoiceXml = new XML("<Item />");
					concreteChoiceXml.@code = concreteChoice.ProductCode;
					
					if (!lIsProductValid(concreteChoice.ProductCode)) continue;
					if (!lIsProductPriceNodeValid(concreteChoice.ProductCode)) continue;
					
					var concreteChoiceInfo = csoProductInfo[concreteChoice.ProductCode.toString()];
					
					concreteChoiceXml.@name = concreteChoiceInfo.names[language.toString()] == null ? "" : concreteChoiceInfo.names[language.toString()].csoName;
					
					if ((concreteChoice.CostInclusive == "true") || parentCostInclusive)
					{
						concreteChoiceXml.@costInclusive = "true";
						concreteChoiceXml.@price = abstractChoiceXml.@price.toString();
					}
					else
					{
						try
						{
							concreteChoiceXml.@price = lFormatPrice(lGetProductFixedPrice(concreteChoiceInfo.xmlNode.ProductCode.toString()));
						}
						catch(ex)
						{
							API.dbg("lGenerateChoiceXml - Price conversion failed: " + ex);
							concreteChoiceXml.@price = lFormatPrice("0");
						}
					}
					
					concreteChoiceXml.@orderSaleType = orderSaleType;
					concreteChoiceXml.@image = concreteChoiceInfo.csoImages.largeImage;
					
					if (concreteChoiceInfo.xmlNode.Presentation.CytPreviewImage != undefined &&
						concreteChoiceInfo.xmlNode.Presentation.CytPreviewImage.toString() != "") {
						var previewImage = concreteChoiceInfo.xmlNode.Presentation.CytPreviewImage.toString().toUpperCase();
						
						if (concreteChoiceInfo.xmlNode.Presentation.CytPreviewImageBottom != undefined &&
							concreteChoiceInfo.xmlNode.Presentation.CytPreviewImageBottom.toString() != "") {
							previewImage += "|" + concreteChoiceInfo.xmlNode.Presentation.CytPreviewImageBottom.toString().toUpperCase();
						}
						
						concreteChoiceXml.@previewImage = previewImage;
					}
					else {
						concreteChoiceXml.@previewImage = "";
					}

					// CSO-282 - CYT Redesign
					if (concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer") != undefined) {
						concreteChoiceXml.@isContainer = concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer").@value.toString();
					}
					else if (concreteChoiceXml.@previewImage.indexOf("|") >= 0) {
						concreteChoiceXml.@isContainer = "true";
					}
					else {
						concreteChoiceXml.@isContainer = "false";
					}

					concreteChoiceXml.@containerType = ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType") != undefined) ?
													   concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType").@value.toString() :
													   "none");
					// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
					concreteChoiceXml.@ingredientSplit = ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit") != undefined) ?
														  concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit").@value.toString() :
														  "false");
																
					concreteChoiceXml.@ingredientOrder = ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder") != undefined && 
														   !isNaN(concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value)) ?
																concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value :
																1);
					// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
					concreteChoiceXml.@ingredientSplitGroup = ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup") != undefined && 
														   !isNaN(concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value)) ?
																concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value :
																0);											
					
					concreteChoiceXml.@defaultQuantity = concreteChoice.DefaultQuantity;
					
					// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
					// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
					if ((csoLoadCustomEnergyInformation == "") || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
						concreteChoiceXml.@calories = lGetEnergyInformation(concreteChoice.ProductCode, "PRODUCT|RAW_ITEM", false);
					else{
						// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
						if (!csoCalculateEnergyInformation)
						{
							concreteChoiceXml.@energy = lGetCustomEnergyInformation(concreteChoice.ProductCode);
							// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
							if (csoProductInfo[concreteChoice.ProductCode].hasEnergySuffix == true)
							{
								concreteChoiceXml.@customSuffix = GetProductEnergySuffix(concreteChoice.ProductCode);
							}
							
							if (concreteChoiceXml.@energy != ""){
								concreteChoiceXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", concreteChoiceXml.@energy);

								// SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
								var canSetLight = concreteChoiceInfo.canSetLight.toString();;

								if ((Number(concreteChoiceXml.@maxQty) > 1) &&
									(canSetLight == "false"))
								{
									concreteChoiceXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", concreteChoiceXml.@energy);
								}
							}
						}
						else 
						{
							// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
							if (concreteChoiceInfo.energyInfo)
							{
								concreteChoiceXml.@energy = concreteChoiceInfo.energyInfo.CalculatedEnergyInformation;
								concreteChoiceXml.@roundedEnergy = lGetRoundedEnergyList(concreteChoiceInfo.energyInfo, 1);
							}
						}
					}

					// CSO-282 - CYT Redesign
					concreteChoiceXml.@showNutrition = isNutritionalInfoAvailable(concreteChoice.ProductCode);
					if (concreteChoiceInfo.xmlNode.ProductUnit.length() > 0 && concreteChoiceInfo.xmlNode.ProductUnit != "")
					{
						concreteChoiceXml.@productUnit = concreteChoiceInfo.xmlNode.ProductUnit;
					}
					
					for each (var productSelection in autoSelectionProducts) {
						var selections = productSelection.split(":");
						
						if (selections[0] != concreteChoice.ProductCode) {
							continue;
						}
						
						if (selections.length > 1)
						{
							concreteChoiceXml.@currQty = selections[1];
						}
						else
						{
							concreteChoiceXml.@currQty = "1";
						}
						
						break;
					}
					
					if (concreteChoice.DefaultQuantity > 0) {
						hasAutoChoice = true;
					}
					
					// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
					var allergensFound=[];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allergensFound = lFindAllergens(allergensFound, composition.ProductCode, [], false, true, false, true);
					if (allergensFound.length>0) {
						concreteChoiceXml.@hasAllergens = "true";
					
						allergensFound = [];
						// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
						allergensFound = lFindAllergens(allergensFound, composition.ProductCode, selectedAllergensList, false, true, false, false);
						if (allergensFound.length>0) {
							concreteChoiceXml.@hasSignaledAllergens = "true";
						}
					}
					
					abstractChoiceXml.appendChild(concreteChoiceXml);
				}
			}
			
			if (!hasAutoChoice) {
				if (categories[choiceCategory] == undefined) {
					categories[choiceCategory] = new Array();
				}
				
				categories[choiceCategory].push(abstractChoiceXml);
			}
		}
		
		/**
		 * @brief  - Generates a CYT CanAdd xml (version 2)
		 * @param  - abstractChoice: CanAdd component
		 * @author - Jorge Olimpia
		 * @since  - CSO-228 - NGK Support CYT phase 2 configuration - 7826843
		 * @modified - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
		 *           - CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
		 */
		function lGenerateCYTCanAddXml(canAdd)
		{
			if (!lIsProductValid(canAdd.ProductCode)) return null;
			var canAddInfo = csoProductInfo[canAdd.ProductCode];
			
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");

			// CSO-282 - CYT Redesign
			ingredientsOrder.push(canAdd.ProductCode);

			var compCategory = "";
			if (canAddInfo.xmlNode.SmartRouting.CytIngredientGroup != undefined) {
				compCategory = canAddInfo.xmlNode.SmartRouting.CytIngredientGroup.toString().toUpperCase();
			}
			else {
				compCategory = "NO_CATEGORY";
			}
			
			if (storeDbXml.StoreDB.CytIngredientGroups != undefined) {
				if (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory) == undefined) {
					return;
				}
			}
			else {
				return;
			}
				
			var canAddXml = new XML("<Item />");
			canAddXml.@code = canAdd.ProductCode;
			canAddXml.@name = canAddInfo.names[language.toString()] == null ? "" : canAddInfo.names[language.toString()].csoName;
			
			if (canAdd.CostInclusive == "true") {
				canAddXml.@costInclusive = "true";
			}
			
			canAddXml.@price = lFormatPrice(lGetPrice(canAddInfo.xmlNode));
			canAddXml.@image = canAddInfo.csoImages.largeImage;
			
			if (canAddInfo.xmlNode.Presentation.CytPreviewImage != undefined &&
				canAddInfo.xmlNode.Presentation.CytPreviewImage.toString() != "") {
				var previewImage = canAddInfo.xmlNode.Presentation.CytPreviewImage.toString().toUpperCase();
				
				if (canAddInfo.xmlNode.Presentation.CytPreviewImageBottom != undefined &&
					canAddInfo.xmlNode.Presentation.CytPreviewImageBottom.toString() != "") {
					previewImage += "|" + canAddInfo.xmlNode.Presentation.CytPreviewImageBottom.toString().toUpperCase();
				}
				
				canAddXml.@previewImage = previewImage;
			}
			else {
				canAddXml.@previewImage = "";
			}

			// CSO-282 - CYT Redesign
			if (canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer") != undefined) {
				canAddXml.@isContainer = canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsContainer").@value.toString();
			}
			else if (canAddXml.@previewImage.indexOf("|") >= 0) {
				canAddXml.@isContainer = "true";
			}
			else {
				canAddXml.@isContainer = "false";
			}

			canAddXml.@containerType = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType") != undefined) ?
									   canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOContainerType").@value.toString() :
									   "none");
			// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
			canAddXml.@ingredientSplit = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit") != undefined) ?
											canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplit").@value.toString() :
											"false");
														
			canAddXml.@ingredientOrder = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder") != undefined && 
										   !isNaN(canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value)) ?
											canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientOrder").@value :
											1);
			// SQC-7332 - [NGK 5.11] CYT Redesign - Split of ingredients is not working correctly
			canAddXml.@ingredientSplitGroup = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup") != undefined && 
										   !isNaN(canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value)) ?
											canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "cyt.ingredientSplitGroup").@value :
											0);
			
			canAddXml.@defaultQty = canAdd.DefaultQuantity;
			canAddXml.@maxQty = canAdd.MaxQuantity;
			canAddXml.@minQty = canAdd.MinQuantity;
			canAddXml.@chargeTH = canAdd.ChargeThreshold;
			canAddXml.@refundTH = canAdd.RefundThreshold;
			canAddXml.@isPortionBased = (lCanSetLight(canAddInfo.xmlNode) &&
										 ((new BigDecimal(canAdd.MaxQuantity)).compareTo(new BigDecimal(canAdd.DefaultQuantity)) >= 0) &&
										 ((new BigDecimal(canAdd.MinQuantity)).compareTo(BigDecimal.ZERO) == 0)) ? "true" : "false";
			if (canAddXml.@isPortionBased == "true") {
				// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
				// CR - 7797958 - NGK Improvements to CYT Phase 1
				canAddXml.@portionBasedDictionary = lGeneratePortionBasedDictionary(canAdd.DefaultQuantity, "CanAdds", canAdd.MaxQuantity);
				canAddXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(canAdd.DefaultQuantity, canAdd.DefaultQuantity, "0", "CanAdds", canAdd.MaxQuantity);
				canAddXml.@portionBasedDefaultIndex = lGetPortionBasedDictionaryIndex(canAdd.DefaultQuantity, canAdd.DefaultQuantity, "0", "CanAdds", canAdd.MaxQuantity);
			}
			

			// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
			// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
			if ((csoLoadCustomEnergyInformation == "") || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
				canAddXml.@calories = lGetEnergyInformation(canAdd.ProductCode, "PRODUCT|RAW_ITEM", false);
			else{
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if (!csoCalculateEnergyInformation)
				{
					canAddXml.@energy = lGetCustomEnergyInformation(canAdd.ProductCode);
					// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix					
					if (csoProductInfo[canAdd.ProductCode].hasEnergySuffix == true)
						canAddXml.@customSuffix = GetProductEnergySuffix(canAdd.ProductCode);
					
					if (canAddXml.@energy != ""){
						canAddXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", canAddXml.@energy);
						
						// SQC-7351 - [NGK 5.12] US Nutrition Enhancement - Ingredients configured as "Portion Based" display the information "each"
						var canSetLight = canAddInfo.canSetLight.toString();;
						
						// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
						if ((Number(canAddXml.@maxQty) > 1) &&
							(canSetLight == "false"))
						{
							canAddXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_EACH", canAddXml.@energy);
						}
					}
				}
				else
				{
					// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
					if (canAddInfo.energyInfo)
					{
						if (canAddXml.@isPortionBased == "true")
						{
							canAddXml.@portionBasedEnergy = lGetPortionBasedEnergyList(canAddInfo.energyInfo);
							canAddXml.@roundedPortionBasedEnergy = lGetPortionBasedRoundedEnergyList(canAddInfo.energyInfo);
						}
						else
						{
							canAddXml.@energy = canAddInfo.energyInfo.CalculatedEnergyInformation;
							var maxQty = Number(canAdd.MaxQuantity);
							canAddXml.@roundedEnergy = lGetRoundedEnergyList(canAddInfo.energyInfo, maxQty);
						}
					}
				}
			}
			
			// CSO-282 - CYT Redesign
			canAddXml.@showNutrition = isNutritionalInfoAvailable(canAdd.ProductCode);
			if (canAddInfo.xmlNode.ProductUnit.length() > 0 && canAddInfo.xmlNode.ProductUnit != "")
			{
				canAddXml.@productUnit = canAddInfo.xmlNode.ProductUnit;
			}
			
			// CSO-282 - CYT Redesign
			canAddXml.@displayQuantityAsMultiple = ((canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytDisplayQuantityAsMultiple") != undefined) ?
				canAddInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytDisplayQuantityAsMultiple").@value.toString() :
				"false");
			
			for each (var productSelection in autoSelectionProducts) {
				var selections = productSelection.split(":");
				
				if (selections[0] != canAdd.ProductCode) {
					continue;
				}

				if (selections.length > 1)
				{
					canAddXml.@currQty = selections[1];
				}
				else
				{
					canAddXml.@currQty = "1";
				}
				
				if (canAddXml.@isPortionBased.toString() == "true")
				{
					if (selections.length > 2)
					{
						//Retrieve the portion based index based on the new pos view information (quantity and modifier)
						// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
						// CR - 7797958 - NGK Improvements to CYT Phase 1
						canAddXml.@portionBasedIndex = lGetPortionBasedDictionaryIndex(selections[1], canAdd.DefaultQuantity, selections[2], "CanAdds", canAdd.MaxQuantity);
					}
					else if (selections.length > 1)
					{
						//Retrieve the portion based index based on the value defined in the custom parameter BYBAutoSelection (ProductCode:PortionType|...) 
						// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
						// CR - 7797958 - NGK Improvements to CYT Phase 1
						canAddXml.@portionBasedIndex = lConvertPortionTypeToDictionaryIndex(selections[1], "CanAdds", canAdd.MaxQuantity);
					}
					else
					{
						//If the custom parameter BYBAutoSelection doesn't define the portion type use the default value (Light)
						// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
						// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
						if(parseInt(canAdd.MaxQuantity) > 1)
						{
							canAddXml.@portionBasedIndex = lConvertPortionTypeToDictionaryIndex("2", "CanAdds", canAdd.MaxQuantity);						
						}
						else {
							canAddXml.@portionBasedIndex = lConvertPortionTypeToDictionaryIndex("1", "CanAdds", canAdd.MaxQuantity);						
						}
					}
				}
				
				break;
			}
			
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			var allergensFound=[];
			// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
			allergensFound = lFindAllergens(allergensFound, canAdd.ProductCode, [], false, true, false, true);
			if (allergensFound.length>0) {
				canAddXml.@hasAllergens = "true";
				
				allergensFound = [];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				allergensFound = lFindAllergens(allergensFound, canAdd.ProductCode, selectedAllergensList, false, true, false, false);
				if (allergensFound.length>0) {
					canAddXml.@hasSignaledAllergens = "true";
				}
			}
			
			if (categories[compCategory] == undefined) {
				categories[compCategory] = new Array();
			}
			
			if (storeDbXml.StoreDB.CytIngredientGroups != undefined) {
				if (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory) != undefined) {
					if (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@mutuallyExclusive != undefined &&
						storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == compCategory).@mutuallyExclusive == true) {
						cytMutExclusive = cytMutExclusive.length == 0 ? compCategory : cytMutExclusive + "|" + compCategory;
					}
				}
			}
					
			categories[compCategory].push(canAddXml);
		}
		
		/**
		 * @brief  - Adds a CYT category xml to the main CYT xml node
		 * @param  - prodXML: The main xml node
		 * @param  - categoryName: The category name
		 * @param  - validateChoice: true if choices must be checked, false otherwise
		 * @author - Jorge Olimpia
		 * @since  - CSO-228 - NGK Support CYT phase 2 configuration - 7826843
		 */
		function addCYTCategory(prodXML, categoryName, validateChoice)
		{
			var count = 0;
			if (categories[categoryName] != undefined)
			{
				var canAddGroupXML = null;
				
				for each (var item in categories[categoryName]) {
					if (!validateChoice || (item.@type != undefined && item.@type == "CHOICE")) {
						if (item.@title != undefined) {
							if (item.@type != undefined && item.@type == "CHOICE") {
								prodXML.appendChild(item);
								count++;
							}
							else {
								if (canAddGroupXML == null) {
									canAddGroupXML = item;
									
									if (cytMutExclusive.split("|").indexOf(categoryName) >= 0) {
										canAddGroupXML.@isMutuallyExclusive = "true";
									}
								}
								else {
									for each (var comp in item.Composition) {
										canAddGroupXML.appendChild(comp);
									}
								}
							}
						}
						else {
							if (canAddGroupXML == null) {
								canAddGroupXML = new XML("<Category />");
								canAddGroupXML.@title = categoryName;
								canAddGroupXML.@type = "GRILL";
								
								if (storeDbXml.StoreDB.CytIngredientGroups != undefined) {
									if (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName) != undefined) {
										canAddGroupXML.@minGroupQuantity = (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName).@minQuantity != undefined && 
																			!isNaN(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName).@minQuantity)) ?
																			Number(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName).@minQuantity) :
																			0;
										
										// When maxGroupQuantity is equals to zero, then consider product recipe's maximum quantity.
										canAddGroupXML.@maxGroupQuantity = (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName).@maxQuantity != undefined && 
																			!isNaN(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName).@maxQuantity)) ?
																			Number(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName).@maxQuantity) :
																			0;
										// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
										canAddGroupXML.@chargeThreshold = (storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName).@chargeThreshold != undefined && 
																			!isNaN(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName).@chargeThreshold)) ?
																			Number(storeDbXml.StoreDB.CytIngredientGroups.Group.(@name.toUpperCase() == categoryName).@chargeThreshold) :
																			-1;								
									}
								}
								
								if (cytMutExclusive.split("|").indexOf(categoryName) >= 0) {
									canAddGroupXML.@isMutuallyExclusive = "true";
								}
							}
							
							canAddGroupXML.appendChild(item);
						}
					}
				}
				
				if (canAddGroupXML != null) {
					prodXML.appendChild(canAddGroupXML);
					count++;
				}
			}
			
			return count;
		}
	}
}

/**
 * @brief
 *	Function that generates a dictionary mapping the portion based information that will be interpreted by the UI
 *	Dictionary examples: "0,0;1,1;2,1;3,2" (dictionary for a composition supporting light)
 *						 "0,0;2,1;3,2" (dictionary for a composition not supporting light)
 *						 "0,0;1,1;3,1" (dictionary for a can add)
 *	Format: "portion_type,quantity;..."
 *	Where: portion_type: 0 -> None, 1 -> Light, 2 -> Regular, 3 -> Extra
 *		   quantity -> Correspondent item quantity that will be used to calculate the price
 * @return - string with the portion based dictionary
 * @author - Vladimir Dobroff
 * @since - NGK 5.7.1 - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
// CR - 7797958 - NGK Improvements to CYT Phase 1
function lGeneratePortionBasedDictionary(defaultQuantity, itemType, maxQuantity)
{
	var portionDictionary = "";
	var defaultQuantityString = defaultQuantity.toString();
	var showLightPortion = lGetCSOUserInterfaceStringParameter("showLightPortion", "true") == "true";

	if (itemType == "Composition")
	{
		if (showLightPortion)
		{
			portionDictionary = "0,0" +
								";1," + defaultQuantityString +
								";2," + defaultQuantityString +
								";3," + (Number(defaultQuantityString) + 1).toString();
		}
		else
		{
			portionDictionary = "0,0" +
								";2," + defaultQuantityString +
								";3," + (Number(defaultQuantityString) + 1).toString();
		}
	}
	else if (itemType == "CanAdds")
	{
		// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
		// CR - 7797958 - NGK Improvements to CYT Phase 1
		if (sessionSale.get("IS_NGK") == "true")
		{
			if (Number(maxQuantity) > 1) 
			{
				// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
				if (showLightPortion)
				{
					portionDictionary = "0,0" +
										";1," + (Number(defaultQuantityString) + 1).toString() +
										";2," + (Number(defaultQuantityString) + 1).toString() +										
										";3," + (Number(defaultQuantityString) + 2).toString();
				}
				else {
					portionDictionary = "0,0" +
										";2," + (Number(defaultQuantityString) + 1).toString() +										
										";3," + (Number(defaultQuantityString) + 2).toString();
				}
			}
			else 
			{
				portionDictionary = "0,0" +
									";1," + (Number(defaultQuantityString) + 1).toString() +
									";3," + (Number(defaultQuantityString) + 1).toString();
			}
		}
		else 
		{
			portionDictionary = "0,0" +
								";1," + (Number(defaultQuantityString) + 1).toString() +
								";3," + (Number(defaultQuantityString) + 1).toString();
		}
	}
	return portionDictionary;
}

/**
 * @brief
 *	Function that converts the item current portion to an index of the dictionary created by the previous function (lGeneratePortionBasedDictionary)
 *	Example: Dictionary:       "0,0;1,1;3,1"
 *			 Possible indexes:   0   1   2
 * @param - itemType: "Composition" or "CanAdds"
 * @return - portion based dictionary index
 * @author - Vladimir Dobroff
 * @since - NGK 5.7.1 - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
// CR - 7797958 - NGK Improvements to CYT Phase 1
function lGetPortionBasedDictionaryIndex(currentQuantity, defaultQuantity, modifiers, itemType, maxQuantity)
{
	// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
	// CR - 7797958 - NGK Improvements to CYT Phase 1
	var portionType = lGetPortionType2(currentQuantity, defaultQuantity, modifiers, itemType, maxQuantity);
	
	// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
	// CR - 7797958 - NGK Improvements to CYT Phase 1
	return lConvertPortionTypeToDictionaryIndex(portionType, itemType, maxQuantity);
}

/**
 * @brief
 *	Function that converts the item current portion to an index of the dictionary created by the previous function (lGeneratePortionBasedDictionary)
 * @param - portionType: 0, 1, 2 or 3
 *          where: 0 - None, 1 - Light, 2 - Regular, 3 - Extra
 * @param - itemType: "Composition" or "CanAdds"
 * @return - portion based dictionary index
 * @author - Vladimir Dobroff
 * @since - NGK 5.7.1 - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
// CR - 7797958 - NGK Improvements to CYT Phase 1
function lConvertPortionTypeToDictionaryIndex(portionType, itemType, maxQuantity)
{
	var index = 0;
	var showLightPortion = lGetCSOUserInterfaceStringParameter("showLightPortion", "true") == "true";
	
	if (itemType == "Composition")
	{
		if (showLightPortion)
		{
			if (portionType == 0) index = 0;
			if (portionType == 1) index = 1;
			if (portionType == 2) index = 2;
			if (portionType == 3) index = 3;
		}
		else
		{
			if (portionType == 0) index = 0;
			if (portionType == 2) index = 1;
			if (portionType == 3) index = 2;
		}
	}
	else if (itemType == "CanAdds")
	{
		if (portionType == 0) index = 0;
		// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
		// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
		if ((sessionSale.get("IS_NGK") == "true") && (parseInt(maxQuantity) > 1))
		{
			// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
			if (showLightPortion)
			{
				if (portionType == 1) index = 1;
				if (portionType == 2) index = 2;
				if (portionType == 3) index = 3;
			}
			else
			{
				if (portionType == 2) index = 1;
				if (portionType == 3) index = 2;
			}
		}
		else
		{
			// SDO-10541 - Change the NGK v5 to allow use the "showLightPortion" parameter in "Can-Add" that has "regular" option.
			if (portionType == 1) index = 1;
			if (portionType == 3) index = 2;
		}
	}
	return index;
}

/**
 * @brief - Send the UI the BYB information to start the BYB grill
 * @param - productCode: BYB product code
 * @param - cartIndex: Product cart index
 * @return - true if the message was sent successfully to the UI, false otherwise
 * @author - Vivian Cury
 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 * @modified - CSO-745 - POS-340 - Order Basket Redesign
 *             CSO-819 - Problem in change choice operation for CYT VM
 */
function PosNGKGrillBYB(productCode, cartIndex)
{
	// CSO-745 - POS-340 - Order Basket Redesign - Adjust for Eating Location - CSO-376
	// CSO-819 - Problem in change choice operation for CYT VM
	// encapsulates the function lPosNGKGrillBYB
	var bybXml=lPosNGKGrillBYB(productCode, cartIndex);
	if (bybXml != null)
	{
		var eventXml = new XML('<Event type="ASYNC" name="DLG_NGK_SHOW_BYB_GRILL"/>');
		eventXml.appendChild(bybXml);
		return PosSendUICmd(eventXml.toXMLString());
	}
	
	API.dbg("PosNGKGrillBYB:: It was not possible to create the byb message.");
	return false;
}

/**
 * @brief - Generates the BYB information to start the BYB grill
 * @param - productCode: BYB product code
 * @param - cartIndex: Product cart index
 * @return - the XML with the BYB grill information or null in case of error
 * @author - Vivian Cury
 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 * @modified - CSO-745 - POS-340 - Order Basket Redesign
 *             CSO-819 - Problem in change choice operation for CYT VM
 */
function lPosNGKGrillBYB(productCode, cartIndex, sellSequence)
{
	var bybArray = [];
	
	var productInfo=csoProductInfo[productCode];	
	var selectedItems = lGetBybAutoSelection(productInfo);
	var grillSequence = "";
	
	var customInfo = ""; // CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
	// SDO-11867 - [DRM] CYT-C2 [Kiosk Offer Redemption]: Customization screen is not consistent when user customize CYT product from offer basket and normal order basket.
	KioskViewHelper.PosDoSelIndex(cartIndex);

	var kioskView = new XML(getKioskView(hlp.getCurrentView()));
	var kioskViewItems = kioskView.Order.Item.(@index == cartIndex);
	
	if (kioskViewItems != undefined && kioskViewItems.length() > 0)
	{
		var outerProduct = lFindBYBProductNode(kioskViewItems[0], productCode, sellSequence);

		// SDO-10611 - Grill screen is not displayed for CYT Value Meal when the parameter "VMTaxBreakDown" is set to "false"
		if (outerProduct === null){
			API.dbg("lPosNGKGrillBYB: BYB Product could not be found in view");
			outerProduct = lFindBYBProductNodeInValueMeal(kioskViewItems[0], productCode);
		}
		
		if (outerProduct)
		{
			API.dbg("lPosNGKGrillBYB: BYB Product found");
			grillSequence = outerProduct.@grillSequence;
			
			// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
			if(outerProduct.customFields)
			{
				customInfo = outerProduct.customFields.parameter.(@name == "customInfo").@value.toString();
			}
			for each (var innerProduct in outerProduct.Product)
			{
				if (innerProduct.@code != undefined && innerProduct.@npQty != undefined)
				{
					if (selectedItems != "")
					{
						selectedItems += "|";
					}
					
					//Use npQty instead of qty, because qty apply additional logic that multiply it with the parent quantity
					selectedItems += (innerProduct.@code + ":" + innerProduct.@npQty);
				}
			}
			
			for each (var innerGrill in outerProduct.Grill)
			{
				//Use npQty instead of qty, because qty apply additional logic that may return an incorrect value for portion based can adds
				if (innerGrill.@code != undefined && innerGrill.@npQty != undefined)
				{
					if (selectedItems != "")
					{
						selectedItems += "|";
					}
					
					selectedItems += (innerGrill.@code + ":" + innerGrill.@npQty + ":" + innerGrill.@modifiers);
				}
			}
		}
		else
		{
			API.dbg("PosNGKGrillBYB:: It was not possible to find the BYB product code " + productCode + " in the kiosk view.");			
		}
	}
	
	// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
	bybArray[productCode] = { productCode: productCode, parentCostInclusive: false, autoSelectItems: selectedItems, customInfo: customInfo };
	// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
	var bybXml = lGenerateBYBXML(bybArray, grillSequence);
	return (bybXml);
	
	
	/**
	 * @brief Search for the BYB product node in the Kiosk view recursively
	 * @return - Product view node
	 * @author - Vladimir Dobroff
	 * @since - NGK 5.7.1 - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 */
	function lFindBYBProductNode(kioskViewNode, productCode, sellSequence)
	{
		API.dbg("lFindBYBProductNode KVN" + kioskViewNode + " PC" + productCode + " SS" + sellSequence);
		
		var productNode = null;
		
		if (kioskViewNode && productCode)
		{
			for each (var product in kioskViewNode.Product)
			{
				if (product.@code.toString() == productCode && (!sellSequence || product.@sellSequence.indexOf(sellSequence) != -1))
				{
					return product;
				}
				else
				{
					productNode = lFindBYBProductNode(product, productCode, sellSequence);
					
					if (productNode)
					{
						return productNode;
					}
				}
			}			
		}
		
		return productNode;
	}

	/**
	 * @brief Search for the BYB product inside a value meal node in the Kiosk view
	 * @return - Product value meal view node
	 * @author - Renato Tsuchida
	 * @since - SDO-10611 - Grill screen is not displayed for CYT Value Meal when the parameter "VMTaxBreakDown" is set to "false"
	 */
	function lFindBYBProductNodeInValueMeal(kioskViewNode, productCode) {
		if (kioskViewNode && productCode){
			for each (var node in kioskViewNode.Product){
				var product = csoProductInfo[node.@code.toString()];
				if (product == null){
					continue;
				}
				var composition = product.xmlNode.Composition.Component;
				for each (var c in composition){
					if (c.ProductCode == productCode){
						return node;
					}
				}
			}
		}
		return null;
	}
	
	/**
	 * @brief Returns bybAutoSelection info based on CYT version
	 * @return - bybAutoSelection info
	 * @author - Rafael Azevedo
	 * @since - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
	 */
	function lGetBybAutoSelection(productInfo)
	{
		return  productInfo.isBybPreBuilt && 
				productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection") != undefined &&
				productInfo.cytVersion != undefined && productInfo.cytVersion == 1 
				?
				productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection").@value.toString() 
				:
				""
	}
}

/**
 * @brief - Sends a message to the UI to display the pre build screen
 * @param - screenNumber: The number of the screen to be displayed
 * @return - true
 * @author - Vivian Cury
 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
function PosNGKShowBYBPreBuiltsJS(screenNumber)
{	
	if (ngkScreenInfo[screenNumber] && ngkScreenInfo[screenNumber].xmlNode.@type == "2852")
	{
		//Added to fix an issue with local promotion suggestive selling
		var screenCarrousel = sessionSale.get("NGK_CARROUSEL_SCREEN");
		if (screenCarrousel && ngkScreenInfo[screenCarrousel])
		{
			var carrouselScreenXmlNode = ngkScreenInfo[screenCarrousel].xmlNode;
			var buttonParameters = carrouselScreenXmlNode.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("KEY_WF_SHOW_SCREEN_PRE_BUILT")).Parameter.(@name == "Number").(@value == screenNumber);
			
			if (buttonParameters != null)
			{
				for each (buttonParameter in buttonParameters)
				{
					csoSelectedMainMenu.screenNumber = screenCarrousel;
					csoSelectedMainMenu.buttonNumber = buttonParameter.parent().parent().@number.toString();
				}
			}
		}
	}
	
	PosSetSessionProperty("NGK_CURRENT_SCREEN", screenNumber);
	API.dbg("CSO - PosNGKShowBYBPreBuiltsJS: screenNumber: " + screenNumber);
	
	var xmlParameter = new XML("<Parameter />");
	xmlParameter.@name = "Number";
	xmlParameter.@value = screenNumber;
	
	var xmlEvent = new XML("<Event />");
	xmlEvent.@type = "ASYNC";
	xmlEvent.@name = "DLG_SYS_SHOW_SCREEN_PRE_BUILT";
	
	xmlEvent.appendChild(xmlParameter);
	
	//SDO-7747 - NGK stops working when trying to sell a product with no price configured
	lAddAditionalInfo(screenNumber, xmlEvent);
	
	if (!PosSendUICmd(xmlEvent.toXMLString())) return false;
	
	//CSO-32 - HIDE PRODUCT PRICES BUTTON ENHANCEMENTS - 6994584
	lSendNGKShowPriceMessage(true);
	
	return true;
	
	/**
	 * @brief - Modify the show pre build screen message
	 * @param - screenNum - screen that will be displayed
	 * @param - xmlEvent - xml that should be modified to include the additional information
	 * @author - Vladimir / Vivian Cury
	 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 */
	function lAddAditionalInfo(screenNum, xmlEvent)
	{
		if (!ngkScreenInfo[screenNum]) return;
		
		//Retrieve the buttons that are used to sold products
		var node = ngkScreenInfo[screenNum].xmlNode;
		
		var screenVisibility = lGetCSOUserInterfaceStringParameter("NGKNonDisplay.screenButtons", null);
		var splittedScreenVisibility = [];
		if (screenVisibility != null)
		{
			splittedScreenVisibility = screenVisibility.split("|");
		}

		for each (var button in node.Button)
		{
			var buttonParameter = button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
			if (buttonParameter != undefined)
			{
				var productCode = buttonParameter.@value.toString();
				
				// SQC-6427 - to select the product "Grill Thriller" of BYB, the product goes to the car but not out of screen
				if (!productCode || 
					!csoProductInfo[productCode] || 
					csoProductInfo[productCode].xmlNode.@statusCode != "ACTIVE" ||
					csoProductInfo[productCode].xmlNode.@salable != "true" ||
					!PosCheckIfPriceNodeIsValid(csoProductInfo[productCode].xmlNode) ||
					(!csoProductInfo[productCode].isBybProduct &&
					 !csoProductInfo[productCode].isBybPreBuilt))
				{
					var buttonNumber = buttonParameter.parent().parent().@number;
					
					//Create the button xml structure if it does not exist yet
					var screenXml;
					var buttonXml;
					
					if (xmlEvent.Screen.(@number == screenNum).length() > 0)
					{
						screenXml = xmlEvent.Screen.(@number == screenNum)[0];
					}
					else
					{
						screenXml = new XML("<Screen number=\"" + screenNum + "\"/>");
						xmlEvent.appendChild(screenXml);
					}
					
					if (screenXml.Button.(@number == buttonNumber).length() > 0)
					{
						buttonXml = screenXml.Button.(@number == buttonNumber)[0];
					}
					else
					{
						buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
						screenXml.appendChild(buttonXml);
					}
					
					buttonXml.@visible = "false";
				}
				else
				{
					// CSO-64 - NGK v5.3 - Display Nutritional Information - Info Icon Tutorial Message and Calories Display Near Price
					var calories = lGetEnergyInformation(productCode, undefined, false);
					// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
					var hasNutritionalInfoAvailable = isNutritionalInfoAvailable(productCode);
					if ((hasNutritionalInfoAvailable) ||
						((calories != "") && (csoLoadCustomEnergyInformation != "") && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true )))
					{
						var buttonNumber = buttonParameter.parent().parent().@number;
						
						//Create the button xml structure if it does not exist yet
						var screenXml;
						var buttonXml;
						
						if (xmlEvent.Screen.(@number == screenNum).length() > 0)
						{
							screenXml = xmlEvent.Screen.(@number == screenNum)[0];
						}
						else
						{
							screenXml = new XML("<Screen number=\"" + screenNum + "\"/>");
							xmlEvent.appendChild(screenXml);
						}
						
						if (screenXml.Button.(@number == buttonNumber).length() > 0)
						{
							buttonXml = screenXml.Button.(@number == buttonNumber)[0];
						}
						else
						{
							buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
							screenXml.appendChild(buttonXml);
						}
						
						// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
						if (hasNutritionalInfoAvailable)
						{
							buttonXml.@showNutrition = "true";
						}
					
						// CSO-64 - NGK v5.3 - Display Nutritional Information - Info Icon Tutorial Message and Calories Display Near Price					
						if (calories != "")
						{
							buttonXml.@totalCalories = calories;
						}
					}
				}
			}
			
			var buttonScreenParameter = button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number");
			if (buttonScreenParameter != undefined)
			{
				if (!PosNGKIsScreenValid(buttonScreenParameter.@value))
				{
					var buttonNumber = buttonScreenParameter.parent().parent().@number;
					
					var screenXml;
					var buttonXml;
					
					if (xmlEvent.Screen.(@number == screenNum).length() > 0)
					{
						screenXml = xmlEvent.Screen.(@number == screenNum)[0];
					}
					else
					{
						screenXml = new XML("<Screen number=\"" + screenNum + "\"/>");
						xmlEvent.appendChild(screenXml);
					}
					
					if (screenXml.Button.(@number == buttonNumber).length() > 0)
					{
						buttonXml = screenXml.Button.(@number == buttonNumber)[0];
					}
					else
					{
						buttonXml = new XML("<Button number=\"" + buttonNumber + "\" />");
						screenXml.appendChild(buttonXml);
					}
					
					buttonXml.@visible = "false";
				}
			}
			
			for (var i = 0; i < splittedScreenVisibility.length; i++)
			{
				var buttonVisibility = splittedScreenVisibility[i].split("-");
				
				//the index 0 represent the screen 
				if (buttonVisibility[0] == screenNum)
				{
					var screenXml;
					var buttonXml;
					
					if (xmlEvent.Screen.(@number == screenNum).length() > 0)
					{
						screenXml = xmlEvent.Screen.(@number == screenNum)[0];
					}
					else
					{
						screenXml = new XML("<Screen number=\"" + screenNum + "\"/>");
						xmlEvent.appendChild(screenXml);
					}
					
					for (var j = 1; j < buttonVisibility.length; j++)
					{
						if (button.@number.toString() == buttonVisibility[j])
						{
							if (screenXml.Button.(@number == buttonVisibility[j]).length() > 0)
							{
								buttonXml = screenXml.Button.(@number == buttonVisibility[j])[0];
							}
							else
							{
								buttonXml = new XML("<Button number=\"" + buttonVisibility[j] + "\" />");
								screenXml.appendChild(buttonXml);
							}
							
							buttonXml.@visible = "false";
						}
					}
				}
			}
		}
	}
}

/**
 * @brief - Show the allergen disclaimer
 * @return - 
 * @author - MY
 * @since - CSO-141 - NGK Display Allergen Disclaimer - 7475764
 * @modified - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			   CSO-441 - Extend Allergen Disclaimer popup
 */
function PosCSOShowAllergensDisclaimer() {
	var isLayout16x9 = PosCSOCheckSharedContext("NGK_LAYOUT", "16X9");
	var currentLangCode = sessionSale.get("LANGUAGE");

	var xmlEvent = <Event type="ASYNC" name="DLG_ALLERGENS_DISCLAIMER"/>;
	var xmlDisclaimer = 
			<Disclaimer enableAllergensEnhancement={csoEnableAllergensEnhancement == "true"}>
				<Text value={PosCSOI18nGetMessageJS("CSO_ALLERGENS_DISCLAIMER_CONTENT")}/>
				<Image value={hlp.findParamInSectionWide("allergensContentImage", "ImageDB_" + currentLangCode)}/>
			</Disclaimer>;
	var xmlButtons = <Buttons/>;

	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	// CSO-441 - Extend Allergen Disclaimer popup
	if (!isLayout16x9 && csoEnableAllergensEnhancement == "true") {
		var xmlBackButton = <Button 
			type="Back" 
			title={PosCSOI18nGetMessageJS("CSO_ALLERGENS_DISCLAIMER_BACKBUTTON", "CSO_ALLERGENS_DISCLAIMER_BACKBUTTON")}/>;
		var xmlNextButton = <Button 
			type="Next" 
			title={PosCSOI18nGetMessageJS("CSO_ALLERGENS_DISCLAIMER_NEXTBUTTON", "CSO_ALLERGENS_DISCLAIMER_NEXTBUTTON")}/>;
	
		xmlButtons.appendChild(xmlBackButton);
		xmlButtons.appendChild(xmlNextButton);
	}
	else {
		var xmlOkButton = <Button 
			type="Ok" 
			title={PosCSOI18nGetMessageJS("NGK_BTN_OK", "NGK_BTN_OK")}/>;
		xmlButtons.appendChild(xmlOkButton);
	}

	xmlDisclaimer.appendChild(xmlButtons);
	xmlEvent.appendChild(xmlDisclaimer);
	
	return PosSendUICmd(xmlEvent.toXMLString());
}

/**
 * @brief - Shows the allergens signal screen
 * @return - 
 * @author - Gabor Hollosy
 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 *          CSO-443 - Implement the Allergen Signal screen
 * @modified - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 *             CSO-506 - Implement allergen notification pop up if a product in cart already contains allergen
 */
function PosNGKShowAllergensSignalScreenJS() {
	var xmlEvent = 
		<Event type="ASYNC" name="DLG_ALLERGENS_SIGNAL">
			<Title>{PosCSOI18nGetMessageJS("CSO_ALLERGENS_SIGNAL_SCREEN_TITLE", "CSO_ALLERGENS_SIGNAL_SCREEN_TITLE")}</Title>
			<Subtitle>{PosCSOI18nGetMessageJS("CSO_ALLERGENS_SIGNAL_SCREEN_SUBTITLE", "CSO_ALLERGENS_SIGNAL_SCREEN_SUBTITLE")}</Subtitle>
		</Event>;

	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	// CSO-506 - Implement allergen notification pop up if a product in cart already contains allergen
	var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
	var xmlAllergens = <Allergens/>;
	for each (var allergen in csoAllergenInfo) {
		xmlAllergens.appendChild(
			<Allergen name={allergen.nameKey} 
					  title={PosCSOI18nGetMessageJS(allergen.nameKey, allergen.nameKey)} 
					  imageKey={allergen.imageKey}
					  isSelected={selectedAllergensList.indexOf(allergen.nameKey) >= 0}/>);
	}

	var xmlButtons = 
		<Buttons>
			<Button 
				type="Cancel" 
				title={PosCSOI18nGetMessageJS("NGK_MSG_CANCEL", "NGK_MSG_CANCEL")}/>
			<Button 
				type="ActivateAlert" 
				title={PosCSOI18nGetMessageJS("CSO_BTN_ACTIVATE_ALERTS", "CSO_BTN_ACTIVATE_ALERTS")}/>
		</Buttons>;

	xmlEvent.appendChild(xmlAllergens);
	xmlEvent.appendChild(xmlButtons);

	return PosSendUICmd(xmlEvent.toXMLString());
}

/**
 * @brief - Shows the allergen alert cart confirmation.
 * @return - 
 * @author - Gabor Hollosy
 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 *          CSO-444 - Implement confirmation popup when adding allergic product to the cart
 */
function PosNGKShowAllergenAlertCartConfirmationJS() {
	var enableAllergensAlerts = lGetCSOUserInterfaceStringParameter("allergens.enableAlerts", "false").toLowerCase();
	if (enableAllergensAlerts != "true") return true;
	
	var decision = PosCSOSendSyncMessageJS(
		"SYNC_POPUP_LAYOUT_A", 
		new Array(
			new Array("MSG_NO", "IsCancel=true", "IsDefault=false"),
			new Array("MSG_YES", "IsCancel=false", "IsDefault=true")), 
		["reject", "accept"], 
		PosCSOI18nGetMessageJS("CSO_MSG_ALLERGENS_CONFIRMATION_POPUP") + "|ScreenNameKey:CSO_MSG_ALLERGENS_CONFIRMATION_POPUP");
		
	return decision == 'accept';
}

/**
 * @brief - Checks whether there is any signaled allergens in the cart.
 * @return - true, if cart contains any signaled allergens; otherwise, false.
 * @author - Gabor Hollosy
 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 *          CSO-506 - Implement allergen notification pop up if a product in cart already contains allergen
 */
function PosCSOCheckSignaledAllergensInCartJS() {
	var xmlKioskView = new XML(getKioskView(hlp.getCurrentView()));
	for each (var xmlProduct in xmlKioskView..Product) {
		if (xmlProduct.@hasSignaledAllergens == "true") 
			return true;
	}
	return false;
}

/**
 * @brief - Shows the notification alert that there are signaled allergens in the cart.
 * @return - true, if notification is confirmed.
 * @author - Gabor Hollosy
 * @since - CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
 *          CSO-506 - Implement allergen notification pop up if a product in cart already contains allergen
 */
function PosCSOShowSignaledAllergensInCartNotificationJS() {
	var enableAllergensAlerts = lGetCSOUserInterfaceStringParameter("allergens.enableAlerts", "false").toLowerCase();
	if (enableAllergensAlerts != "true") return true;
	
	var decision = PosCSOSendSyncMessageJS(
		"SYNC_POPUP_LAYOUT_A", 
		new Array(
			new Array("MSG_OK", "IsCancel=false", "IsDefault=true")), 
		["ok"], 
		PosCSOI18nGetMessageJS("CSO_MSG_ALLERGENS_AFTER_SALE_WARNING_POPUP") + "|" + "ScreenNameKey:CSO_MSG_ALLERGENS_AFTER_SALE_WARNING_POPUP");
		
	return decision == "ok";
}

/**
 * @brief - Responsible for applying rules whether the GMA Long Term is enabled
 * @author - Leandro Pereira
 * @return - true, whether the sale was created
 * @since - CSO-547 POS-276 - NGK - Support GMA Long Term Check-in - 8289930
 * @altered - SQC-8844 - Kiosk is not able to retrieve order using foundational Checkin 
 *          - CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times
 */
function lIsBarcodeGMALongTermMatched(barcode){
	var isEnabledlongTermMobileCheckin = lGetCSOUserInterfaceStringParameter("foundationalMobileCheckin.enable", "false");
	var mobileOrderCheckInSkipThresholdDifferencePrice = lGetCSOUserInterfaceStringParameter("mobileOrderCheckInSkipThresholdDifferencePrice", "false") == "true";
	
	if (isEnabledlongTermMobileCheckin.toLowerCase() == "true"){
		//CSO-783 - Include a protection in the core scripts when PosCSORedeemMobileBarcode is called.
		try{
			// CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times
			var mobileOrdering = getMobileOrderingObject();
			
			// CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times
			var prodInfoList = lSearchStagingOrders(mobileOrdering);

			// CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times		
			return lSearchBarcodeOnStagingArea(prodInfoList, barcode, mobileOrderCheckInSkipThresholdDifferencePrice, mobileOrdering);
		}
		catch(ex){
			sessionSale.set("GMA_NPSHARP_CONECTION_ERROR", true);
			return false
		}
	}
	else{
		//CSD-174 - [NGK 5.17.1 - Doubt about expected behavior after reading an invalid coupon when UngatedScan is set to accept "DigitalOffers|MobileOrder|RFMCoupons|PromotionCoupon"
		if (!PosGetOrderFromNPSharpByCode(barcode)) {
			return false;
		}
		var ctx=new SessionContext;
		var prodInfo = ctx.get("prodInfoFromNPSharp");
		
		if (lCheckAndAskVoidSale())
		{
			if(!PosCreateSaleFromProdInfo(prodInfo, "true", mobileOrderCheckInSkipThresholdDifferencePrice))
				return false;
		}
		else
		{
			return false;
		}
		
		return true;
	}
	
	/**
	 * @brief - Checks if there's an order in progress and if has items, then ask the customer
	 * @author - Robert Abreu
	 * @return - true, if the sale is empty or if user chooses to clean the sale
	 * @since - CSD-147 - [NGK 5.17.1 - Doubt about expected behavior after reading an invalid coupon when UngatedScan is set to accept "DigitalOffers|MobileOrder|RFMCoupons|PromotionCoupon"
	 */
	function lCheckAndAskVoidSale()
	{
		var orderHasItems = false;
		var npView = hlp.getCurrentView();
		//If theres no sale in progress, the view will be null
		if(npView == null)
			return true;
		
		var kioskOrderView = new XML(getKioskView(npView));
		for each (var item in kioskOrderView.Order.Item) {
			if(item.@voided == "false")
			{
				orderHasItems = true;
				break;
			}
		}
		
		if(orderHasItems)
		{
			var buttonsArray = new Array();
			var titleArray = new Array();
			buttonsArray.push(new Array(PosCSOI18nGetMessageJS("CSO_UNGATED_POPUP_YES_BUTTON"), "GREEN", "WHITE", "WHITE", "no_image_key"));
			buttonsArray.push(new Array(PosCSOI18nGetMessageJS("CSO_UNGATED_POPUP_NO_BUTTON"), "RED", "WHITE", "WHITE", "no_image_key"));
			titleArray.push(new Array(PosCSOI18nGetMessageJS("CSO_UNGATED_MOBILE_ORDER_PROMPT"), "WHITE", "WHITE", "GREEN","no_image_key"));
			
			var retVal = PosNGKSendSyncPickImageJS("DLG_DEAL_MESSAGE", buttonsArray, new Array("true", "false"), titleArray);
			
			if(retVal == "true")
			{
				sessionSale.set("SALETYPEDEFINED", "false");
				sessionSale.set("NGK_ORDER_REROUTE", "NONE");
				PosNGKVoidOrderJS();
				return true;
			}
			
			sessionSale.set("GMA_USER_CANCELED_OPERATION", true);
			return false;
		}
		else
		{
			sessionSale.set("SALETYPEDEFINED", "false");
			sessionSale.set("NGK_ORDER_REROUTE", "NONE");
			PosNGKVoidOrderJS();
		}
		
		return true;
	}
	
	
	/**
	 * @brief - Search Barcode on ECP 
	 * @author - Leandro Pereira
	 * @since - CSO-547 POS-276 - NGK - Support GMA Long Term Check-in - 8289930
	 */	
	function lSearchBarcodeOnECP(barcode, ignorePriceDiff){
		// If did not find any record on stating, then, Search on ECP
		var prodInfoEcp = lSearchEcpOrders(barcode);
		if (!prodInfoEcp)
			return false;
		
		var productInfoXML = new XML(prodInfoEcp);
		var	prodInfoListOnECP = productInfoXML.ProdInfo;
		
		// Found more than 1 on ECP
		if (prodInfoListOnECP.length() == 1){
			//CSD-174 - [NGK 5.17.1 - Doubt about expected behavior after reading an invalid coupon when UngatedScan is set to accept "DigitalOffers|MobileOrder|RFMCoupons|PromotionCoupon"
			if(!lCheckAndAskVoidSale())
				return false;
			
			if (!PosCreateSaleFromProdInfo(prodInfoListOnECP, "true", ignorePriceDiff)){
				return false;
			}
			else{
				return true;
			}
		}
		else if (prodInfoListOnECP.length() >1){
			sessionSale.set("GMA_CONFLICTING_BARCODE", true);
		}
		return false;
	}
	
	
	/*
	 * @brief - Get the Mobile Ordering Object
	 * @author - Dalton Pericles de Almeida
	 * @since - CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times
	 */
	function getMobileOrderingObject()
	{
		var mobileOrdering = new NpSharpService('MobileOrdering');
		return mobileOrdering;
	}	
	
	/**
	 * @brief - Search Barcode on Staging Area
	 * @author - Leandro Pereira
	 * @since - CSO-547 POS-276 - NGK - Support GMA Long Term Check-in - 8289930
	 * @altered - CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times	 
	 */
	function lSearchBarcodeOnStagingArea(prodInfoList, barcode, ignorePriceDiff, mobileOrdering){
		
		var productInfoXML = new XML(prodInfoList);
		var listProdInfoOnStaging = productInfoXML.ProdInfo;
		//CSO-1291 - [AU] Kiosk 5.17 - GMA5 Mobile Order Code cannot be recalled in Kiosk - AUDG-947
		if(listProdInfoOnStaging == undefined)
			listProdInfoOnStaging = productInfoXML..ProdInfo;
		var recordsFoundOnStaging = new Array();
		// CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times
		var fullBarcodeFromProdInfo = "";

		// Start Seaching barcode On Staging area
		for(var i = 0; i < listProdInfoOnStaging.length(); i++) {
			//Concat short with the long code
			var fullBarcode = listProdInfoOnStaging[i].Order.@shortCode + listProdInfoOnStaging[i].Order.@longCode;
			//CSO-1291 - [AU] Kiosk 5.17 - GMA5 Mobile Order Code cannot be recalled in Kiosk - AUDG-947
			if(typeof(fullBarcode) != typeof(""))
			{
				API.dbg("lSearchBarcodeOnStagingArea - converting fullBarcode from " + typeof(fullBarcode) + " to string");
				fullBarcode = fullBarcode.toString();
			}
			
			if (barcode == fullBarcode.substring(0,barcode.length))
			{
				// CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times
				fullBarcodeFromProdInfo = fullBarcode;
				recordsFoundOnStaging.push(listProdInfoOnStaging[i]);
			}
		}// End searching On stagingDB
		
		if (recordsFoundOnStaging.length == 1){
			//CSD-174 - [NGK 5.17.1 - Doubt about expected behavior after reading an invalid coupon when UngatedScan is set to accept "DigitalOffers|MobileOrder|RFMCoupons|PromotionCoupon"
			if(!lCheckAndAskVoidSale())
				return false;
			
			if (!PosCreateSaleFromProdInfo(recordsFoundOnStaging, "true", ignorePriceDiff)){
				return false;
			}
			else{
			
				// CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times
				var hlp = new BusinessObjectHelper;
				var view = hlp.getCurrentView();
				var params = { 'order' : {'View' :  view.toString()} , 'key' : fullBarcodeFromProdInfo.toString()};
				
				if((mobileOrdering == null) || (mobileOrdering == undefined)) 
					mobileOrdering = new NpSharpService('MobileOrdering');
				
				mobileOrdering.Call('ProcessRecallOrder', params);
				return true;
			}
		}
		else if (recordsFoundOnStaging.length >1){
			// Display PopUp warning to enter the full barcode
			sessionSale.set("GMA_CONFLICTING_BARCODE", true);
			return false;
		}
		return lSearchBarcodeOnECP(barcode, ignorePriceDiff); // Try to search on ECP
	}
}

/**
 * @brief - Search a barcode on ECP
 * @returns - ProdInfo with the respective product
 * @param - barcode digits
 * @author - Leandro Pereira
 * @since - CSO-547 POS-276 - NGK - Support GMA Long Term Check-in - 8289930
 */
function lSearchEcpOrders(barcode){
	// Code sent by New POS Team to be reused
	var multichannel = new NpSharpService('Multichannel');
	var params = { 'action' : 'SearchEcpOrders' , 'parameters' : {'Code' : barcode}, 'payload' :''};
	var ret = multichannel.Call('GenericEcpRequest', params);
	
	
	var result = "";
	if (ret && ret.Payload){
		var hlp = new FOEHelper();
		result = hlp.revertDataFromBase64(ret.Payload);
	}else{
		PosCSOLog(CSOLOG_INFORMATION, 18435, "lSearchEcpOrders - input value: " + barcode + " Message: It was not possible to recover the order at the ECP Server");
	}
		
		
	return result;
}

/**
 * @brief - Search a barcode on Staging
 * @returns - ProdInfo with the respectives products
 * @author - Leandro Pereira
 * @since - CSO-547 POS-276 - NGK - Support GMA Long Term Check-in - 8289930
 * @altered - CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times
 */
function lSearchStagingOrders(mobileOrdering){
	
	// CSO-938 - [6.1.29-SP8][GQT][BR] Kiosk - Possibility to recall the same mobile order multiple times
	if((mobileOrdering == null) || (mobileOrdering == undefined))
		mobileOrdering = new NpSharpService('MobileOrdering');

	var params = { '' : ''};
	
	return mobileOrdering.Call('ProcessListOrders', params);
}

/**
 * @brief - Redeem mobile barcode
 * @return - 
 * @author - MY
 * @since - CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
 * @altered - CSO-547 POS-276 - NGK - Support GMA Long Term Check-in - 8289930
 */
function PosCSORedeemMobileBarcode(barcode) {

	var hlp = new BusinessObjectHelper;
	if ((typeof(hlp.GetMobileOrderStatus) != "function")
		||(typeof(hlp.getMobileInvalidItems) != "function")
		||(typeof(posCheckInMobileOrder) != "function") 
		||(typeof(PosCreateSaleFromProdInfo) != "function")){
		// GetMobileOrderStatus helper doesn't exist before 6_1_23.
		// mobile redeem will not be allowed if NP engine is not updated.
		PosShowMessage("CSO_LOCALPROMO_BARCODE_SERVICE_NOT_AVAILABLE");
		return false;
	}
	
	//CSO-783 - Include a protection in the core scripts when PosCSORedeemMobileBarcode is called.
	sessionSale.set("GMA_NPSHARP_CONECTION_ERROR", false);
	
	//CSD-174 - [NGK 5.17.1 - Doubt about expected behavior after reading an invalid coupon when UngatedScan is set to accept "DigitalOffers|MobileOrder|RFMCoupons|PromotionCoupon"
	sessionSale.set("GMA_USER_CANCELED_OPERATION", false);
	
	// Get the view
	if(lIsBarcodeGMALongTermMatched(barcode)) {
		// NPS-22752 - POS-399 - Ungated Scan - Configure Scanner Hardware to always ON states
		// reset session variables only in case of success
		sessionSale.set("SALETYPEDEFINED", "false");
		sessionSale.set("NGK_ORDER_REROUTE", "NONE");
		sessionSale.set("DISPLAYED_PAYMENT_SELECTION","false");
		
		// REMEMBER: mobile order is different from mobile payment
		sessionSale.set("NGK_MOA_ORDER", "true");
		
		var mobilePriceDifference = sessionSale.get("mobilePriceDifference");
		
		if (Number(mobilePriceDifference) != 0){
			PosShowMessage("CSO_GMA_MSG_DIFF_PRICE");
			//* MESSAGE: The prices in your order are different from the prices in this restaurant.
		}
		
		// CSO-233 - To implement a feature that will allow a Franchisee at the store to configure a `Take Out` only window of time in the late night hours. - 6998530
		//If Eat In is disabled, force Take Out as the sale type regardless of what is set in the view
		if (sessionSale.get("CSO_EAT_IN_ENABLED_LOCAL") == "false")
		{
			PosNGKSetSaleType("1");
			// SQC-6428 - NGK V5.91 - When adding a mobile order to the cart, and the product price is different for take out, the price is not correctly shown
			// add to force a view refresh
			PosRefreshSalePanel();
		}

		var orderView = new XML(hlp.getCurrentView());
		var iMobilePayment=Number(orderView.@paymentType);
		API.dbg("CSO - iMobilePayment[" +iMobilePayment+ "]");
		sessionSale.set("NGK_MOA_PAYMENT", iMobilePayment);
		
		// CSO-697 - RS Request Form -Removal of Welcome . entry on Kiosk - GMA - INC9112168
		var customerGreeting = PosCSOI18nGetMessageJS("CSO_MSG_WELCOME_MSG_MOA", orderView.Customer.@nickname);
		customerGreeting += PosCSOI18nGetMessageJS("CSO_MSG_BARCODE_SUCCESS_MSG_MOA");
		
		invalidItemsView = new XML("<View>"+hlp.getMobileInvalidItems()+"</View>");
		API.dbg("CSO - hlp.getMobileInvalidItems["+invalidItemsView+"]");

		// get the invalid items
		if(invalidItemsView.InvalidItemView.length() > 0) {
			var xmlResult = new XML('<Event type="ASYNC" name="DLG_SHOW_INVALID_ITEMS" />');
			var invalidItems = new XML("<InvalidItems />");
			invalidItems.@Title=PosCSOI18nGetMessageJS("CSO_MSG_INVALID_ITEMS_MOA");
			invalidItems.@TitleCollor="RED";
			invalidItems.@Text=PosCSOI18nGetMessageJS("CSO_MSG_CONFIRM_INVALID_ITEMS_MOA");
			invalidItems.@TextCollor="RED";
			invalidItems.@ConfirmButtonCollor="WHITE";
			invalidItems.@CancelButtonCollor="RED";

			invalidItems.@WelcomeText=customerGreeting;

			for each(var item in invalidItemsView.InvalidItemView) {
				var invalidItem = new XML("<InvalidItem />");
				invalidItem.@name = item.name;
				invalidItem.@productCode = item.productCode;
				invalidItem.@quantity = item.quantity;
				invalidItem.@validationCode = item.validationCode;
				invalidItems.appendChild(invalidItem);
			}
			API.dbg("CSO - MOA Invalid Items["+invalidItems+"]");
			xmlResult.appendChild(invalidItems);
			
			// NPS-14854 - Kiosk analytics
			var analyticsInfo = new XML('<AnalyticsInfo>ScreenNameKey:CSO_MSG_INVALID_ITEMS_MOA</AnalyticsInfo>');
			xmlResult.appendChild(analyticsInfo);			
			var customerId = new XML('<CustomerId>' + orderView.Customer.@id.toString() + '</CustomerId>');
			xmlResult.appendChild(customerId);
			return (PosSendUICmd(xmlResult.toXMLString()));

		}

		// if not MOA payment and there is at least 1 valid item must show the welcome msg popup
		var isValidOrder=false;
		if(0==iMobilePayment) {
			// look for at least 1 valid sold item
			for each(var item in orderView.ItemView) {
				if((item.quantity>0) && (item.level==0)) {
					isValidOrder=true;
					break;
				}
			}
		}
		if(true==isValidOrder) {
			var xmlResult = new XML('<Event type="ASYNC" name="DLG_SHOW_WELCOME_MSG" />');
			var welcomeMsg = new XML("<WelcomeMsg />");
			// NPS-14854 - Kiosk analytics
			var analyticsInfo = new XML('<AnalyticsInfo>ScreenNameKey:CSO_MSG_WELCOME_MSG_MOA</AnalyticsInfo>');

			welcomeMsg.@WelcomeText=customerGreeting;
			
			xmlResult.appendChild(welcomeMsg);
			// NPS-14854 - Kiosk analytics
			xmlResult.appendChild(analyticsInfo);
			var customerId = new XML('<CustomerId>' + orderView.Customer.@id.toString() + '</CustomerId>');
			xmlResult.appendChild(customerId);
			return (PosSendUICmd(xmlResult.toXMLString()));
		}

		return(PosCSOFinishRedeemMobileCheckin(iMobilePayment, orderView, true, customerGreeting));
	}
	else {
		//CSD-174 - [NGK 5.17.1 - Doubt about expected behavior after reading an invalid coupon when UngatedScan is set to accept "DigitalOffers|MobileOrder|RFMCoupons|PromotionCoupon"
		if (sessionSale.get("GMA_USER_CANCELED_OPERATION") == "false")
		{
			//CSO-783 - Include a protection in the core scripts when PosCSORedeemMobileBarcode is called.
			if (sessionSale.get("GMA_NPSHARP_CONECTION_ERROR") == "true"){
				PosShowMessage("CSO_GMA_MSG_UNREACHABLE_SERVER");
			}	
			else if (sessionSale.get("GMA_CONFLICTING_BARCODE") == "true"){
				PosShowMessage("CSO_GMA_MSG_DUPLICITY_SEARCH_RESULT");
				// The partial entered code is not enough to recover your order. Please, enter the remaining digits.
			}
			else{
				var errorMsg = getLastFail("PosGetOrderFromNPSharpByCode");
				lHandleMOAFailMessage(errorMsg);	
			}
		}
		return false;
	}
	
	/**
	* @brief - Displays the error message by Redeemed a mobile barcode
	* @return - returns the error message
	* @author - Leandro Pereira
	* @since - CSO-558 Mobile Check-In - UX Enhancements 
	*/
	function lHandleMOAFailMessage(errorMsg){
		
		if (errorMsg != undefined && errorMsg != null)
		{
			errorMsg = errorMsg.toString().toUpperCase();
		}

		switch(errorMsg) {
			case "INVALID RESPONSE":
				PosShowMessage("NGK_MSG_INVALID_BARCODE");
				//MESSAGE: It was not possible to recover your order, the entered code may be either invalid or expired.			
				break;
			case "TIMEOUT TRYING TO REACH THE SERVER":
				PosShowMessage("CSO_GMA_MSG_UNREACHABLE_SERVER");
				//*MESSAGE: It was not possible to contact our server.
				break;
			default:
				PosShowMessage("CSO_GMA_MSG_GENERIC_WARNING");
				//*MESSAGE: It was not possible to recover your order.
				break;
		}
	}
}

/**
 * @brief - Continue Redeem mobile barcode (after invalid items confirmation)
 * @return - 
 * @author - MY
 * @since - CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
 */
function PosCSOContinueRedeemMobileCheckin() {
	var iMobilePayment = Number(sessionSale.get("NGK_MOA_PAYMENT"));
	var orderView = new XML(hlp.getCurrentView());

	return(PosCSOFinishRedeemMobileCheckin(iMobilePayment, orderView, false,""));
}

/**
 * @brief - Finish the redeem mobile barcode
 * @return - 
 * @author - MY
 * @since - CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
 */
function PosCSOFinishRedeemMobileCheckin(iMobilePayment, orderView, showWelcome, customerGreeting) {
	sessionSale.set("NGK_WELCOME_MESSAGE", customerGreeting);
	var isValidOrder=false;

	// look for at least 1 valid sold item
	for each(var item in orderView.ItemView) {
		if((item.quantity>0) && (item.level==0)) {
			isValidOrder=true;
			break;
		}
	}
	
	API.dbg("CSO - NGK_MOA_PAYMENT["+iMobilePayment+"] isValidOrder["+isValidOrder.toString()+"]");
	//  MOA payment
	if((1==iMobilePayment)&&(true==isValidOrder)) {
		var xmlResult = new XML('<Event type="ASYNC" name="DLG_CONFIRM_MOBILE_ORDER" />');
		var paramXml = new XML("<Params />");
		
		if(showWelcome) {
			paramXml.@WelcomeText = customerGreeting;
		}
		else {
			paramXml.@WelcomeText = "";
		}
		
		var customerId = new XML('<CustomerId>' + orderView.Customer.@id.toString() + '</CustomerId>');
		xmlResult.appendChild(customerId);
		xmlResult.appendChild(paramXml);
		
		return PosSendUICmd(xmlResult.toXMLString());
	}
	else {
		PosCSODoActionFinishJS("WF_NGK_RedeemLocalPromotionBarcode", "SUCCESS", hlp.getCurrentView());

		var screenMenu=sessionSale.get("NGK_SCREEN_MENU");
		var screenCarrousel=sessionSale.get("NGK_SCREEN_CARROUSEL");

		if(!screenMenu || screenCarrousel) {
			lGoToMainScreen(true, !isValidOrder);
		}
		else  {
			PosNGKShowCarrouselJS(screenCarrousel, screenMenu);
		}
		return true;
	}
}

/**
 * @brief - Call the mobile payment and handle error
 * @return - boolean
 * @author - MY
 * @since - CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
 */
function PosNGKDoMobilePayment () {
	if (typeof(PosDoMobilePayment) != "function") {
		API.dbg("CSO - Invalid PosDoMobilePaymentJS function");
		PosShowMessage("CSO_MSG_FAIL_MOBILE_PAYMENT");
		return false;
	}
	var ret=PosDoMobilePayment ();
	API.dbg("CSO - PosNGKDoMobilePayment [" + ret+"]");
	if(!ret) {
		var errorMsg=getLastFail("PosDoMobilePayment");
		API.dbg("CSO - PosDoMobilePayment msg["+errorMsg+"]");
		if((null==errorMsg) || (0==errorMsg.length)) {
			PosShowMessage("CSO_MSG_FAIL_MOBILE_PAYMENT");
		}
		else {
			PosShowMessage(errorMsg);
		}
	}
	else {
		// test if order is tendered
		ret = PosNGKDoTenderJS(0, -1, false);
	}
	return ret;
}

/**
 * @brief  - Get the message related to beverage disclaimer
 * @return - an image name, according logical rules defined on design specification.
 * @author - Jorge Olimpia
 * @since  - CSO-142 - Legal-Disclaimer by language - CR updated - 7423781
 */
function PosNGKGetAlcoholicBeverageDisclaimerImage(){
	var currentLangCode = sessionSale.get("LANGUAGE");
	var hlp = new BusinessObjectHelper;
	
	var imageName = hlp.findParamInSectionWide("legalDisclaimerImage", "ImageDB_" + currentLangCode);
	
	if (imageName == null || imageName == undefined){
		imageName = lGetParameterStr("legalDisclaimerImage", "legalDisclaimerImage");
	}
	
	return imageName;
}

/**
 * @brief  - Get the message related to beverage disclaimer
 * @return - a text message, according logical rules defined on design specification.
 * @author - Jorge Olimpia
 * @since  - CSO-142 - Legal-Disclaimer by language - CR updated - 7423781
 */
function PosNGKGetAlcoholicBeverageDisclaimerText(){
	var currentLangCode = sessionSale.get("LANGUAGE");
	var hlp = new BusinessObjectHelper;	
	var message = PosCSOI18nGetMessageJS("NGK_LEGAL_DISCLAIMER_TEXT");
	
	return message;
}


/**
 * @brief - Show the offers barcode reader
 * @author - Vladimir Dobroff
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 */
function PosNGKShowOfferBarcodeReader()
{
	// CSD-51 - FR3 - Scanning and processing a barcode immediately 
	PosRemoveSessionProperty('NGK_UNGATED_SCAN_RETURN_SCREEN');
	
	var hlp = new BusinessObjectHelper;
	var paramValue = hlp.findParamInSectionWide("offersCodeLengthKeyboard", "Offers")
	
	if (paramValue != undefined && paramValue != null && isNaN(paramValue) == false)
	{
		if (paramValue < 1 || paramValue > 15)
		{
			// Set to default value
			paramValue = DEFAULT_KEYBOARD_SIZE;
		}
	}
	else
	{
		// Set to default value
		paramValue = DEFAULT_KEYBOARD_SIZE;
	}
	
	var xml = new XML('<Event type="ASYNC" name="DLG_SHOW_OFFERS_BARCODE_READER" />');
	var offersXml = new XML("<Offer />");
	
	var codeLengthKeyboardXML = new XML("<CodeLengthKeyboard />");
	codeLengthKeyboardXML.@value = paramValue;
	
	offersXml.appendChild(codeLengthKeyboardXML);
	xml.appendChild(offersXml);
	
	return PosSendUICmd(xml);
}

/**
 * @brief - Show the offers barcode error
 * @author - Vladimir Dobroff
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 *        - Message example:
 *          <Event type="ASYNC" name="DLG_SHOW_OFFERS_BARCODE_ERROR">
 *            <Offer>
 *              <ErrorMessage value="NGK_MSG_OFFERS_GENERIC_ERROR" />
 *            <Offer/>
 *          </Event>
 * @modified - CSO-1221- [6.1.31-SP8.5][GQT][COE] - Pop-up message for offer scan is not correct and does not include required buttons
 */
function PosNGKShowOfferBarcodeError(errorKey, isRejectionCauseError)
{
	var ungatedReturnScreen=sessionSale.get ('NGK_UNGATED_SCAN_RETURN_SCREEN');
	API.dbg("[UNGATED]PosNGKShowOfferBarcodeError ungatedReturnScreen["+ungatedReturnScreen+"]");
	
	// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
	PosSetSessionProperty ("NGK_MONOPOLY_CURRENT_BARCODE_TO_VALIDATION", "");

	// CSD-51 - FR3 - Scanning and processing a barcode immediately
	if (('MAIN' == ungatedReturnScreen) ||
		('REVIEW' == ungatedReturnScreen)) {
		
		// unblock the UI when offer returns error
		PosNGKCloseBlockPopup();
		
		if(!isRejectionCauseError)
			PosCSOSendSyncMessageJS("SYNC_POPUP_LAYOUT_A", new Array(PosCSOI18nGetMessageJS("CSO_UNGATED_POPUP_CONTINUE_BUTTON")), ["close"], PosCSOI18nGetMessageJS(errorKey) + "|ScreenNameKey:"+errorKey);

		PosNGKEnableScanJS();

		// this is necessary to refresh the cart when an offer is removed
		PosNGKUngatedScanReturnScreen(true);
	}
	else {
		// CSD-51 - FR3 - Scanning and processing a barcode immediately 
		PosRemoveSessionProperty('NGK_UNGATED_SCAN_RETURN_SCREEN');
		
		if(!isRejectionCauseError)
		{
			var xml = new XML('<Event type="ASYNC" name="DLG_SHOW_OFFERS_BARCODE_ERROR" />');
			var offerXml = new XML("<Offer />");
			
			var errorXml = new XML("<ErrorMessage />");
			if (errorKey)
			{
				errorXml.@value = errorKey;
			}
			else
			{
				errorXml.@value = "";
			}
			
			offerXml.appendChild(errorXml);
			xml.appendChild(offerXml);
			// CSO-1221 - [6.1.31-SP8.5][GQT][COE] - Pop-up message for offer scan is not correct and does not include required buttons
			PosCSOSendSyncMessageJS(
				"DLG_NGK_OFFER_BARCODE_ERROR", 
				new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
				["true", "false"], 
				PosCSOI18nGetMessageJS("CSO_ACTIVE_MODE_LBL_ERROR_DEAL_NOT_RECOGNIZED") + "|ScreenNameKey:CSO_ACTIVE_MODE_LBL_ERROR_DEAL_NOT_RECOGNIZED");
			return PosSendUICmd(xml);
		}
	}
	
	//CSO-1221- [6.1.31-SP8.5][GQT][COE] - Pop-up message for offer scan is not correct and does not include required buttons
	if(isRejectionCauseError)
	{
		PosRemoveSessionProperty('NGK_UNGATED_SCAN_RETURN_SCREEN');
		var offerDetails = PosGetCurrentOfferDetail("ALL").split("|");
		
		var promotion = {
			RejectionCause: errorKey,
			Name: offerDetails[0] != undefined ? offerDetails[0] : "",
			ShortDescription: offerDetails[1] != undefined ? offerDetails[1] : "",
			LongDescription: offerDetails[2] != undefined ? offerDetails[2] : "",
		}
		
		return ShowDealErrorPopup(promotion);
	}
}

/**
 * @brief - Shows the offers barcode welcome
 * @author - Vladimir Dobroff
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 *        - Message example:
 *          <Event type="ASYNC" name="DLG_SHOW_OFFERS_BARCODE_WELCOME">
 *            <Offer>
 *              <WelcomeMessage value="NGK_MSG_OFFERS_WELCOME" />
 *              <CustomerName value="XXXXX" />
 *              <OfferName value="YYYY" />
 *              <OfferDescription value="ZZZZ" />
 *            <Offer/>
 *          </Event>
 */
function PosNGKShowOfferBarcodeWelcome(isMonopoly)
{
	// NPS-22752 - POS-399 - Ungated Scan - Configure Scanner Hardware to always ON states
	// must clear payment info if a moa order and payment type is mobile payment
	if("true"==sessionSale.get("DISPLAYED_PAYMENT_SELECTION")) {
		sessionSale.set("DISPLAYED_PAYMENT_SELECTION", "false");
	}
	if(sessionSale.get("NGK_ORDER_REROUTE") == "PAY_MOBILE") {
		sessionSale.set("NGK_ORDER_REROUTE", "NONE");
	}
	// reset any previous moa information 
	sessionSale.set("NGK_MOA_PAYMENT", 0);
	sessionSale.set("NGK_MOA_ORDER", "false");
	
	var xml = new XML('<Event type="ASYNC" name="DLG_SHOW_OFFERS_BARCODE_WELCOME" />');
	
	var offerXml = BuildOfferInformationXml(true, isMonopoly);
	
	xml.appendChild(offerXml);
	
	var offer = JSON.parse(offerXml.Data);
	
	var offerName = offerXml.OfferName.@value;
	PosSetSessionProperty("OFFER_APPLIED_NAME", offerName);
	
	if (IsValidRejectionCause(offer.RejectionCause))
    {
        return PosSendUICmd(xml);
    }
    else
    {
        PosNGKShowOfferBarcodeError(offer.RejectionCause, true);
		PosDoClearOffer("false");
    }
}

/**
 * @brief - Processes Offer Error
 * @author - Dalton Pericles de Almeida
 * @since - CSO-391 - US Frequency Offers Integration (NGK) - 8207548
 */
function PosNGKProcessOffersError(nStatusCode)
{
	switch(nStatusCode) {
		case 2:
			PosNGKShowOfferBarcodeError("NGK_MSG_OFFERS_INVALID_BARCODE", false);
			break;
		case 3:
			PosRefreshSalePanel();
			PosNGKShowPunchCardWelcome();
			break;
		case 4: //CSO-1346 - [6.1.31-SP8.5][GQT][COE][US] Unexpected message is displaying while we click on "Ok" button after scanning same punch card offer twice
			//Ignore the nStatusCode=4 to prevent double pop-up when scanning PunchCards
			break;
		default:
			PosNGKShowOfferBarcodeError("NGK_MSG_OFFERS_GENERIC_ERROR", false);
			break;
	}
}

/**
 * @brief - Shows the Punch Card check in
 * @author - Dalton Pericles de Almeida
 * @since - CSO-391 - US Frequency Offers Integration (NGK) - 8207548
 *        - Message example:
 *          <Event type="ASYNC" name="DLG_SHOW_OFFERS_BARCODE_WELCOME">
 *            <Offer>
 *              <WelcomeMessage value="CSO_CUSTOMER_CHECKING_WELCOME_MESSAGE_TITLE" />
 *              <CustomerName value="XXXXX" />
 *              <OfferName value="" />
 *              <OfferDescription value="CSO_CUSTOMER_CHECKING_WELCOME_MESSAGE_CONTENT" />
 *            <Offer/>
 *          </Event>
 */
function PosNGKShowPunchCardWelcome()
{
	// CSD-51 - FR3 - Scanning and processing a barcode immediately 
	PosRemoveSessionProperty('NGK_UNGATED_SCAN_RETURN_SCREEN');
	
	var xml = new XML('<Event type="ASYNC" name="DLG_SHOW_OFFERS_BARCODE_WELCOME" />');
	
	var offerXml = BuildOfferInformationXml(false, false);
	
	xml.appendChild(offerXml);
	
    return PosSendUICmd(xml);
}

/**
 * @brief - Build the xml used in the welcome popup of offers and punchcard
 * @author - rabreu
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 * @altered - CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
 */
function BuildOfferInformationXml(loadOfferDetails, isMonopoly)
{
	var offerXml = new XML("<Offer />");
	
	var customerNameXml = new XML("<CustomerName />");
	
	var hlp = new BusinessObjectHelper;
	var orderView = new XML(hlp.getCurrentView());
	var customerName = orderView.Customer.@nickname.toString();
	
	// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
	if ((isMonopoly != undefined) && (isMonopoly != null) && (isMonopoly))
	{
		var showSuccessClaimMessage = lGetCSOUserInterfaceStringParameter("monopoly.displayPrizeCongratsScreen", "true").toLowerCase() != "false";
		
		if (showSuccessClaimMessage)
		{
			PosNGKSimpleMessageJS(PosCSOI18nGetMessageJS("NGK_MSG_PRIZE_TICKET_SUCCESS_CLAIM"), "MSG_OK");
		}
	}
	else
	{
		if (customerName)
		{
			customerNameXml.@value = customerName;
		}
	}
	
	var customerIDXml = new XML("<CustomerID />");
	var customerID = orderView.Customer.@id.toString();
	
	if (customerID)
	{
		customerIDXml.@value = customerID;
	}
	
	var offerIDXml = new XML("<OfferID />");
	var offerID = orderView.Offers.@offerId.toString();
	
	if (offerID)
	{
		offerIDXml.@value = offerID;
	}
	
	var welcomeXml;
	var offerNameXml;
	var offerDescriptionXml;
	
	if(loadOfferDetails)
	{
		welcomeXml = new XML("<WelcomeMessage />");
		welcomeXml.@value = "NGK_MSG_OFFERS_WELCOME";
	
		offerNameXml = new XML("<OfferName />");
		offerNameXml.@value = PosGetCurrentOfferDetail("TITLE");
	
		offerDescriptionXml = new XML("<OfferDescription />");
		offerDescriptionXml.@value = PosGetCurrentOfferDetail("SHORTDESCRIPTION");
	}
	else
	{
		welcomeXml = new XML("<WelcomeMessage />");
		welcomeXml.@value = "CSO_CUSTOMER_CHECKING_WELCOME_MESSAGE_TITLE|NGK_MSG_OFFERS_WELCOME";
	
		offerNameXml = new XML("<OfferName />");
		offerNameXml.@value = "";
	
		offerDescriptionXml = new XML("<OfferDescription />");
		offerDescriptionXml.@value = "CSO_CUSTOMER_CHECKING_WELCOME_MESSAGE_CONTENT";
	}
	
	// SDO-16797 NGK 5.17 Applies offer but does not allow check out - AUNP-10
	var isOfferAppliedXml = new XML("<IsOfferApplied />");
	isOfferAppliedXml.@value = lIsOfferApplied();
	
	offerXml.appendChild(welcomeXml);
	offerXml.appendChild(customerNameXml);
	offerXml.appendChild(customerIDXml);
	offerXml.appendChild(offerIDXml);
	offerXml.appendChild(offerNameXml);
	offerXml.appendChild(offerDescriptionXml);

	// SDO-16797 NGK 5.17 Applies offer but does not allow check out - AUNP-10
	offerXml.appendChild(isOfferAppliedXml);
	
	offerXml.Data = hlp.validateOffer(offerID, customerID);
	
	return offerXml;
	
	
	/**
	* @brief - Checks if the Offer is already applied
	* @author - Leandro Pereira
	* @since - SDO-16797 NGK 5.17 Applies offer but does not allow check out - AUNP-10
	*/
	function lIsOfferApplied(){
		var hlp = new BusinessObjectHelper;
		var orderView = new XML(hlp.getCurrentView());
		var kioskOrderView = new XML(getKioskView(orderView.toString()));;

		if(kioskOrderView.Order.Offers != undefined)
		{
			var isOfferApplied = kioskOrderView.Order.Offers.Offer.@applied.toString();

			if (isOfferApplied == "true"){
				return true;
			}
		}
		return false;
	}
}

/**
 * @brief - Processes Offer Message
 * @author - rabreu
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 * @altered - CSO-1264 - [6.1.31-SP8.5][GQT][COE] After scan punch card, it will get stuck on pop up screen
 */
function PosNGKProcessOffersMessage(offerClientMessage)
{
	var offerMessageSyncType = "DLG_DEAL_MESSAGE";
	var buttonsArray = new Array();
	var titleArray = new Array();
	
	switch(offerClientMessage)
	{
		case 2: // REMOVE_OFFER_REWARD
			// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
			var ctx = new SessionContext;
			var waitingResponse = ctx.get("WAITING_APPLY_MONOPOLY_RESPONSE");
			if (waitingResponse == "true") PosNGKCloseProcessMonopoly();
		
			buttonsArray.push(new Array(PosCSOI18nGetMessageJS("NGK_MSG_YES"), "GREEN", "WHITE", "WHITE", "no_image_key"));
			buttonsArray.push(new Array(PosCSOI18nGetMessageJS("NGK_TMP_NO"), "RED", "WHITE", "WHITE", "no_image_key"));
			var offerName = sessionSale.get("OFFER_APPLIED_NAME");
			var changeOfferQuestion = PosCSOI18nGetMessageJS("CSO_LBL_REMOVE_CURRENT_OFFER", offerName);
			titleArray.push(new Array(changeOfferQuestion, "WHITE", "WHITE", "GREEN","no_image_key"));
			var retVal = PosNGKSendSyncPickImageJS(offerMessageSyncType, buttonsArray, new Array("true", "false"), titleArray);

			//If the offer is already applied, its items should be removed
			if(retVal == "true")
			{
				var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
				if(kioskOrderView.Order.Offers.length() > 0)
				{
					PosNGKDoVoidPromotionAndItemsJS(kioskOrderView.Order.Offers.Offer.@promotionId, kioskOrderView.Order.Offers.Offer.@promotionCounter);
				}
				return true;
			}
			else
			{
				ctx.set("WAITING_APPLY_BY_RANDOM_CODE_RESPONSE", "false", false);
				
				// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
				ctx.set("WAITING_APPLY_MONOPOLY_RESPONSE", "false", false);
				
				PosNGKShowMainScreen();
				return false;
			}
		case 3: // REMOVE_CURRENT_CARD
			// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
			var ctx = new SessionContext;
			var waitingResponse = ctx.get("WAITING_APPLY_MONOPOLY_RESPONSE");
			if (waitingResponse == "true") PosNGKCloseProcessMonopoly();
			var npView = new XML(hlp.getCurrentView());
			if ((npView.Customer != undefined) && (npView.Customer != null))
			{
				if ((npView.Customer.@id != undefined) && (npView.Customer.@id != null))
				{
					var customerId = parseInt(npView.Customer.@id.toString());
					if(customerId != 0)
					{					
						//SQS-278 - [NGK5.17.1 - Ungated Scan] Incorrect behavior if an Offer is scanned after a Mobile Order (same customer ID)
						if(PosCheckSessionProperty("NGK_MOA_ORDER", "true"))
						{
							buttonsArray.push(new Array(PosCSOI18nGetMessageJS("NGK_MSG_YES"), "GREEN", "WHITE", "WHITE", "no_image_key"));
							buttonsArray.push(new Array(PosCSOI18nGetMessageJS("CSO_UNGATED_POPUP_NO_BUTTON"), "RED", "WHITE", "WHITE", "no_image_key"));
							titleArray.push(new Array(PosCSOI18nGetMessageJS("CSO_LBL_REPLACE_CURRENT_CUSTOMERID"), "WHITE", "WHITE", "GREEN","no_image_key"));
						}
						else
						{
							buttonsArray.push(new Array(PosCSOI18nGetMessageJS("NGK_MSG_YES"), "GREEN", "WHITE", "WHITE", "no_image_key"));
							buttonsArray.push(new Array(PosCSOI18nGetMessageJS("NGK_TMP_NO"), "RED", "WHITE", "WHITE", "no_image_key"));
							titleArray.push(new Array(PosCSOI18nGetMessageJS("CSO_LBL_REMOVE_CURRENT_PUNCHCARD"), "WHITE", "WHITE", "GREEN","no_image_key"));
						}
						
						var retVal = PosNGKSendSyncPickImageJS(offerMessageSyncType, buttonsArray, new Array("true", "false"), titleArray);

						if(retVal == "false")
						{
							var ctx = new SessionContext;
							ctx.set("WAITING_APPLY_BY_RANDOM_CODE_RESPONSE", "false", false);
							
							// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
							ctx.set("WAITING_APPLY_MONOPOLY_RESPONSE", "false", false);

							PosNGKShowMainScreen();
							return false;
						}
					}
				}
			}
			return true;
		case 4: // IGNORED_MOST_RECENT
			var npView = new XML(hlp.getCurrentView());
			//Only show the message if there's already a customer check in
			if(npView.Customer != undefined) {
				buttonsArray.push(new Array(PosCSOI18nGetMessageJS("MSG_OK"), "GREEN", "WHITE"));
				titleArray.push(new Array(PosCSOI18nGetMessageJS("CSO_LBL_ACK_PUNCHCARD_SCAN"), "", "", "","no_image_key"));
				PosNGKSendSyncPickImageJS(offerMessageSyncType, buttonsArray, new Array("true", "false"), titleArray);
				//CSO-1346 - [6.1.31-SP8.5][GQT][COE][US] Unexpected message is displaying while we click on "Ok" button after scanning same punch card offer twice
				PosNGKCloseBlockPopup();
				PosNGKEnableScanJS();
				PosNGKUngatedScanReturnScreen(true);
			}
			break;
		case 5: // USED_MOST_RECENT
			break;
		case 0: // OFFERS_DISABLED
		break;
		case 1: // LOYALTY_DISABLED
		break;
		default:
			break;
	}
	
	return true;
}

/**
 * @brief - Send the duplicate barcode offer to UI. Needs to have the DLG_DEAL_MESSAGE type for BruteForce
 * @author - rabreu
 * @since - SQS-274 - [NGK5.17.1 - Ungated Scan] It is not possible scan a Global Promotion Coupon from Order Summary
 */
function PosNGKSendDuplicateOfferMessage()
{
	var buttonsArray = new Array();
	var titleArray = new Array();
	
	buttonsArray.push(new Array(PosCSOI18nGetMessageJS("MSG_OK"), "GREEN", "WHITE"));
	titleArray.push(new Array(PosCSOI18nGetMessageJS("NGK_MSG_OFFERS_POPUP_WARNING_DUPLICATED"), "", "", "","no_image_key"));
	PosNGKSendSyncPickImageJS("DLG_DEAL_MESSAGE", buttonsArray, new Array("true", "false"), titleArray);
}

/**
 * @brief This function implements the BC,Business Component: <b>PosCreateSale</b>\n
 *
 * Persistence:<b>Persisted</b>\n
 * This BC is responsible for creating a new Sale. \n
 * In a workflow sequence it is called:<b>PosCreateSale</b>\n
 * In java script it should be called:<b>PosCreateSale()</b>\n
 * Hooks: onCreatedSale(nTransactionType,0) - when a sale is created\n
 * Property Messages:none\n
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 */
function PosCreateSale()
{
	var cmd = "PosCreateSale";
	CSL_dbglog(7, SRC_BC_SALES, cmd, "Start");
	return executeBC(cmd);
}

/**
 * @brief - Get a field from the offers detail XML
 * @param - field - TITLE, SHORTDESCRIPTION or LONGDESCRIPTION
 * @return - The text inside the field requested or an empty string if the field was not found
 * @author - Vivian Cury
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 */
function PosGetCurrentOfferDetail(fieldName, language)
{
	//CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
	var ctx = new SessionContext;
	var waitingResponse = ctx.get("WAITING_APPLY_BY_RANDOM_CODE_RESPONSE");
	if (waitingResponse == "true")
	{
		return "";
	}
	var waitingResponse = ctx.get("WAITING_APPLY_MONOPOLY_RESPONSE");
	if (waitingResponse == "true")
	{
		return "";
	}
	
	var info = "";
	
	// If there is no order in progress, there is no offer to get the title
	if (!PosCSOIsTrnInProgressJS("true"))
	{
		return "";
	}
	
	// The function PosViewOfferDetails calls the PosCreateReport, so we have to execute the
	//  BC PosGetOfferDetails
	if (!executeBC("PosGetOfferDetails"))
	{
		return "";
	}
	
	// Get result as Encoded xml (some xml symbols are removed to be able to use getLastSuccess)
	var xmlEncode = getLastSuccess("PosGetOfferDetails");
	
	if (xmlEncode != null &&
		typeof(DecodeToXml) == "function")
	{
		// CSO-530 - PosGetCurrentOfferDetail :: Change position of API.dbg
		API.dbg("PosGetCurrentOfferDetail:: original details xml [" + DecodeToXml(xmlEncode.toString()) + "]");
		
		// We need to replace symbols before calling the Decode function
		var regExp = new RegExp("&", "g");
		xmlEncode = xmlEncode.toString().replace(regExp, "&amp;");
		
		API.dbg("PosGetCurrentOfferDetail:: modified details xml [" + DecodeToXml(xmlEncode.toString()) + "]");
		
		var xmlDecode = new XML(DecodeToXml(xmlEncode.toString()));
		
		if (xmlDecode.Languages != undefined)
		{
			// NPS-14854 - Kiosk analytics
			var currentLang = !language ? sessionSale.get("LANGUAGE") : language;
			
			API.dbg("PosGetCurrentOfferDetail:: current language [" + currentLang + "]");
			
			var languageXml = xmlDecode.Languages.Language.(@code == currentLang);
			if (languageXml == undefined)
			{
				// We couldn't find the language with the default separator "_", so
				//  let's search for the language code and the country code
				//  regardless of the separator
				var langCountry = currentLang.split("_");
				
				for each (var lang in xmlDecode.Languages.Language)
				{
					// SDO-11360 - COE QA MR2- Offer name and offer description are not shown
					if (lang.@code != undefined &&
						lang.@code.indexOf(langCountry[0]) >= 0 &&
						lang.@code.indexOf(langCountry[1]) >= 0)
					{
						languageXml = lang;
						break;
					}
				}
				
				// If we still don't find the language with the country, let's try
				//  to find only the language
				if (languageXml == undefined) {
					// CSO-532 - GMA - Kiosk Check In with Offer shows - No Offer In Progress
					languageXml = xmlDecode.Languages.Language.(@code.indexOf(langCountry[0]) >= 0)[0];
				}

				// CSO-532 - GMA - Kiosk Check In with Offer shows - No Offer In Progress
				// If we still don't find the language, let's get the first one
				if (languageXml == undefined) {
					languageXml = xmlDecode.Languages.Language[0];
				}
			}
			
			if (languageXml != undefined)
			{
				if (fieldName.toUpperCase() == "TITLE")
				{
					if (languageXml.Name != undefined)
					{
						info = languageXml.Name.toString();
					}
				}
				else if (fieldName.toUpperCase() == "SHORTDESCRIPTION")
				{
					if (languageXml.ShortDescription != undefined)
					{
						info = languageXml.ShortDescription.toString();
					}
				}
				else if (fieldName.toUpperCase() == "LONGDESCRIPTION")
				{
					if (languageXml.LongDescription != undefined)
					{
						info = languageXml.LongDescription.toString();
					}
				}
				else if (fieldName.toUpperCase() == "ALL")
				{
					if (languageXml.Name != undefined)
					{
						info += languageXml.Name.toString();
					}
					info += "|";
					if (languageXml.ShortDescription != undefined)
					{
						info += languageXml.ShortDescription.toString();
					}
					info += "|";
					if (languageXml.LongDescription != undefined)
					{
						info += languageXml.LongDescription.toString();
					}
					info += "|";
					info += xmlDecode.@type + "|";
				}
			}
		}
	}
	
	API.dbg("PosGetCurrentOfferDetail:: Field [" + fieldName + "] :: Value [" + info + "]");
	
	return info;
}

/**
 * @brief - Validate if there are offers not applied in the cart
 * @param - messageTxt - The message that will be displayed to the customer in case there is
 *                       an offer not applied in the cart.
 * @param - optionTrue - Text, Foreground and Background for the "Yes" button
 * @param - optionFalse - Text, Foreground and Background for the "No" button
 * @param - optionSeeConditions - Text, Foreground and Background for the "See Conditions" button
 * @return - true to continue the tender process, false otherwise
 * @author - Vivian Cury
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 */
function PosNGKValidateOffers(messageTxt, optionTrue, optionFalse, optionSeeConditions)
{
	//SQC-6284 - [Promotion/ Offers] - Kiosk displays script error after update to version NGK 5.8 when the environment is running 6.1.19 (version without Global Promotion/ Offers)
	if (typeof(PosIsOfferApplied) != "function") return true;

	var orderView = hlp.getCurrentView();
	
	// We need to check if there is an offer in progress (In the cart but not applied)
	//  and if the offer is not applied
	if (orderView.indexOf("<Offers ") > -1 &&
		!PosIsOfferApplied())
	{
		var title = PosGetCurrentOfferDetail("TITLE");
		var description = PosGetCurrentOfferDetail("SHORTDESCRIPTION");
		
		// NPS-14854 - Kiosk analytics	
		var defaultLanguageTitle = PosGetCurrentOfferDetail("TITLE", sessionSale.get("DEFAULT_LANGUAGE"));
		
		if (messageTxt == undefined || messageTxt == "")
		{
			messageTxt = "NGK_MSG_OFFERS_OFFER_NOT_APPLIED";
		}
		
		if (optionTrue == undefined || optionTrue == "")
		{
			optionTrue = "MSG_YES|GREEN|WHITE";
		}
		
		if (optionFalse == undefined || optionFalse == "")
		{
			optionFalse = "MSG_NO|DARKRED|WHITE";
		}
		
		if (optionSeeConditions == undefined || optionSeeConditions == "")
		{
			optionSeeConditions = "NGK_BTN_OFFERS_OFFER_READ_CONDITION|DARKGRAY|WHITE";
		}
		
		var optionTrueConfig = optionTrue.split("|");
		var optionFalseConfig = optionFalse.split("|");
		var optionSeeConditionsConfig = optionSeeConditions.split("|");
		
		if (optionTrueConfig.length < 2)
		{
			optionTrueConfig.push("GREEN");
		}
		
		if (optionTrueConfig.length < 3)
		{
			optionTrueConfig.push("WHITE");
		}
		
		if (optionFalseConfig.length < 2)
		{
			optionFalseConfig.push("DARKRED");
		}
		
		if (optionFalseConfig.length < 3)
		{
			optionFalseConfig.push("WHITE");
		}
		
		if (optionSeeConditionsConfig.length < 2)
		{
			optionSeeConditionsConfig.push("DARKGRAY");
		}
		
		if (optionSeeConditionsConfig.length < 3)
		{
			optionSeeConditionsConfig.push("WHITE");
		}
		
		var titleArray = new Array();
		titleArray.push(new Array(PosCSOI18nGetMessageJS(messageTxt, title)));
		
		var buttonsArray = new Array();
		buttonsArray.push(new Array(PosCSOI18nGetMessageJS(optionTrueConfig[0]), optionTrueConfig[1], optionTrueConfig[2]));
		buttonsArray.push(new Array(PosCSOI18nGetMessageJS(optionFalseConfig[0]), optionFalseConfig[1], optionFalseConfig[2]));
		buttonsArray.push(new Array(PosCSOI18nGetMessageJS(optionSeeConditionsConfig[0]), optionSeeConditionsConfig[1], optionSeeConditionsConfig[2]));
		buttonsArray.push(new Array(title, description, defaultLanguageTitle));
		
		return PosNGKSendSyncPickImageJS("DLG_ASK_CONTINUE_WITHOUT_OFFER", buttonsArray,
			new Array("false", "true"), titleArray) == "true";
	}
	
	return true;
}

/**
 * @brief - Removes a promotion from the order
 * @returns - true.
 * @param - promoId: promotion identifier
 * @param - promoCounter: promotion counter
 * @author - Vladimir Dobroff
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 * @modified - CSO-745 - POS-340 - Order Basket Redesign
 */
function PosNGKRemovePromotionJS(promoId, promoCounter)
{
    API.dbg("CSO - PosNGKRemovePromotionJS: promoId: " + promoId + " promoCounter: " + promoCounter);
	PosPromotionUndo(promoId, promoCounter);
	
	return true;
}

/**
 * @brief - Removes an offer from the order
 * @returns - true.
 * @author - Vladimir Dobroff
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 * @modified - CSO-745 - POS-340 - Order Basket Redesign
 * @modified - CSO-1444 - [DRM] Kiosk SP8.5 MR1QR0 B21 TC2 :[Mobile offer redemption]: Offer name with "Offer not yet applied message" is not getting displayed on order review screen when offer is scanned but offer condition is not met.
 * @modifiedBy - Luiz Russo on CSO-1444: This function should remove the items related to the Offer it is clearing, hence the parameter offerId.
 */
function PosNGKRemoveOfferJS(offerId)
{
	API.dbg("CSO - PosNGKRemoveOfferJS - offerId: " + offerId);
	if (offerId){
		var orderView = new XML(hlp.getCurrentView());
		for each(var item in orderView.ItemView){
			//Void lines with the items that have the current offerId AND are NOT already void, to avoid voiding a valid product or trying to void an already void line.
			if (item.ActiveMode && item.ActiveMode.@offerId == offerId && item.quantity > 0){
				API.dbg("CSO - PosNGKRemoveOfferJS - ProductCode: " + item.productCode + "; SellSequence: " + item.sellSequence);
				PosDoSelBySellSequence(item.sellSequence);
				PosDoVoidLine();
			}
		}
	}
	
	PosDoClearOffer("false");
	
	return true;
}

/**
 * @brief  - Checks if the current barcode is equal to the last one.
 * @param  - barcode - inserted barcode
 * @author - Renato Tsuchida
 * @return - return if the current barcode is equal to the lasted used barcode in the same order
 * @since  - CSO-420 - [DRM] CYT C2 [KIOSK Offers] - Incorrect error message is displayed and the offer gets removed from the order basket when the same QR code is scanned twice on the KIOSK
			 CSO-428 - [DRM] CYT C2 [KIOSK Offers] - No confirmation message is displayed for the user when user scans same offer with different QR code or scans a new offer on the KIOSK
 */
function PosNGKCompareWithLastBarcode(barcode) {
	if (!GLOBAL_NGK_LAST_BARCODE || !barcode) {
		return false;

	}
	return GLOBAL_NGK_LAST_BARCODE == barcode;
}

/**
 * @brief  - Verify if the current order has an offer applied
 * @author - Renato Tsuchida
 * @since  - CSO-420 - [DRM] CYT C2 [KIOSK Offers] - Incorrect error message is displayed and the offer gets removed from the order basket when the same QR code is scanned twice on the KIOSK
			 CSO-428 - [DRM] CYT C2 [KIOSK Offers] - No confirmation message is displayed for the user when user scans same offer with different QR code or scans a new offer on the KIOSK
 */
function PosNGKHasOfferApplied() {
	
	var hlp = new BusinessObjectHelper;
	var view = new XML(hlp.getCurrentView());

	if (view.Offers && view.Offers.@offerId.toString()){
		return true;
	}
	return false;
}

/**
 * @brief  - Get a field from the offers detail XML
 * @param  - code - contains the value read from the input method used to this; inputMethod - indicates how the code was input (barcode, keyboard, nfc, rfid, etc)
 * @return -
 * @author - Jorge Olimpia
 * @since  - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 */
function PosNGKApplyOfferCode(code, inputMethod)
{
	API.dbg("CSO - PosNGKApplyOfferCode: code: " + code + " inputMethod: " + inputMethod);
	
	// CSO-420 - [DRM] CYT C2 [KIOSK Offers] - Incorrect error message is displayed and the offer gets removed from the order basket when the same QR code is scanned twice on the KIOSK
	// CSO-428 - [DRM] CYT C2 [KIOSK Offers] - No confirmation message is displayed for the user when user scans same offer with different QR code or scans a new offer on the KIOSK
	var hasApplied = false;
	switch(inputMethod.toUpperCase())
	{
		case "QRCODE":
			hasApplied = PosApplyByMobileCode(code);
			break;
		case "KEYBOARD":
			hasApplied = PosApplyByRandomCode(code);
			break;
		default:
			hasApplied = false;
			break;
	}
	
	// CSO-420 - [DRM] CYT C2 [KIOSK Offers] - Incorrect error message is displayed and the offer gets removed from the order basket when the same QR code is scanned twice on the KIOSK
	// CSO-428 - [DRM] CYT C2 [KIOSK Offers] - No confirmation message is displayed for the user when user scans same offer with different QR code or scans a new offer on the KIOSK
	if (hasApplied){
		GLOBAL_NGK_LAST_BARCODE = code;
	}
	return hasApplied;
}

/**
 * @brief  - Process the delivery earlier information
 * @return - true, if the delivery earlier screen should be displayed, false otherwise
 * @author - Vladimir Dobroff
 * @since  - CSO-229 - NGK Support Deliver Early Feature - 7826861
 */
function PosCSOProcessDeliveryEarlierJS()
{
	var hlp = new BusinessObjectHelper;
	
	sessionSale.set("DELIVERY_EARLIER_SUMARY", null);
	
	//Check if the delivery earlier API is available
	if (typeof(hlp.getDeliverEarlierCurrentLine) != "function" ||
		typeof(PosSetProductDeliverEarlierQuantity) != "function")
	{
		return false;
	}
	
	// CSO-1192 - POS-430 - Kiosk - Ability to Treat Smart Routed Products as Regular Products for Ordering
	// SQS-268 - [Kiosk 5.17.1 - Smart Routed Products as Regular Products] Delivery earlier
	if (csoUseCYTAsRegular)
	{
		return false;
	}

	//Check the store-db.xml parameter that defines the deliver earlier mode (AUTOMATIC, SMART_REMINDER or DISABLED)
	var mode = hlp.findParamInSectionWide("deliverEarlyMode", "SmartRouting");
	if ((mode == null) || (mode != "AUTOMATIC" && mode != "SMART_REMINDER" && mode != "DISABLED")) mode = "SMART_REMINDER";
	if (mode == "DISABLED") return false;
	
	API.dbg("CSO - PosCSOProcessDeliveryEarlierJS: deliverEarlyMode: " + mode);
	
	var deliveryLaterProductCode = lGetCSOUserInterfaceStringParameter("deliveryLaterProductCode", null);
	
	API.dbg("CSO - PosCSOProcessDeliveryEarlierJS: deliveryLaterProductCode: " + deliveryLaterProductCode);
	
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	
	var index = 0;
	var deliveryEarlierXml = new XML('<DeliveryEarlier />');
	
	deliveryEarlierItems = new Array();
	
	for each (var item in kioskOrderView.Order.Item)
	{	
		if (item.@voided.toString() == "true")
		{
			continue;
		}
		
		var currentViewIndex = item.@index.toString();
		
		if (!KioskViewHelper.PosDoSelIndex(currentViewIndex)){
			API.dbg("CSO - PosCSOProcessDeliveryEarlierJS: Could not select line index (index=[" + currentViewIndex + "])");
			return false;
		}
		
		// Delivery Earlier view attributes
		//
		// - deliverEarlierQty: is the current quantity set as delivery earlier (will already be multiplied by the parent product quantity)
		// - quantity: is the maximum quantity that can be set as delivery earlier (will already be multiplied by the parent product quantity)
		// - The view follows a similar pattern to the NewPos view, regarding item grouping
		//   For example, we could have two Item tags with the product code 5 in the view below, if one of the products is grilled
		//
		//  Sample of the delivery earlier view of a selected order line
		//
		//	<DeliverEarlierInfo>
		//		<Item index="0" productCode="5" quantity="3" deliverEarlierQty="3"/>
		//		<Item index="1" productCode="521" quantity="3" deliverEarlierQty="2"/>
		//	</DeliverEarlierInfo>
		
		var deliverEarlierInfoXml = new XML(hlp.getDeliverEarlierCurrentLine());
		
		API.dbg("PosCSOProcessDeliveryEarlierJS - currentViewIndex: " + currentViewIndex + " - DeliverEarlierInfo: " + deliverEarlierInfoXml.toXMLString());
		
		for (var i = 0; i < deliverEarlierInfoXml.Item.length(); i++)
		{
			var earlierItem = deliverEarlierInfoXml.Item[i];
			var productCode = earlierItem.@productCode.toString();
			
			//Try to find the product in the kiosk view that corresponds to the product in the delivery earlier view
			//This is necessary to filter the products that already contain delivery later information
			
			var viewIndex = -1;
			for (var j = 0; j <= i; j++)
			{
				//Increment the index based on how many times the product appeared in the delivery earlier view
				if (productCode == deliverEarlierInfoXml.Item[j].@productCode.toString())
				{
					viewIndex++;
				}
			}
			
			var viewProduct = null;
			//Get all the Product nodes from the kiosk view item with the same code as the delivery earlier product code
			//The E4X operation below (..) gets all the nodes inside the product hierarchy (child, grandchild, etc..)
			var kioskViewProducts = item..Product.(@code == productCode);
			if ((viewIndex >= 0) && (viewIndex < kioskViewProducts.length()))
			{
				//Use the count from the previous step as the index.
				//The order of appearance of the products in the views should be the same (New Pos view / delivery earlier view)
				//This was one of the delivery earlier API requirements since there is no other way to cross reference products between the views
				viewProduct = kioskViewProducts[viewIndex];
			}
			else
			{
				API.dbg("PosCSOProcessDeliveryEarlierJS - WARNING - Could not find the product from the delivery earlier view in the kiosk view.");
			}
			
			//Check if the equivalent product contains the delivery later grill
			//If contains, skip this product in the delivery earlier screen
			//Additional note: The product can be skipped in this situation because it will be splitted from other products with the same code
			//                 as the result of the grill operation that added the delivery later information
			if (viewProduct && (viewProduct.Grill.length() > 0) && deliveryLaterProductCode)
			{
				if (viewProduct.Grill.(@code == deliveryLaterProductCode).length() > 0)
				{
					continue;
				}
			}
			
			var totalQty = Number(earlierItem.@quantity.toString());
			
			if (mode == "AUTOMATIC")
			{
				PosSetProductDeliverEarlierQuantity(earlierItem.@index.toString(), totalQty);
			}
			else
			{
				var deliverEarlierQty = Number(earlierItem.@deliverEarlierQty.toString());
				var deliverRegularQty = totalQty - deliverEarlierQty;
				
				if (csoProductInfo[productCode] == undefined || csoProductInfo[productCode].xmlNode == undefined) {
					continue;
				}
				
				var productInfo = csoProductInfo[productCode];
				
				//Create one element in the xml for each product unit that supports delivery earlier
				for (var j = 0; j < totalQty; j++)
				{
					var itemXml = new XML ("<Item />");
					itemXml.@index = index;
					itemXml.@code = productCode;
					itemXml.@name = productInfo.names[sessionSale.get("LANGUAGE")] ? productInfo.names[sessionSale.get("LANGUAGE")].csoName : "";
					itemXml.@image = productInfo.csoImages.largeImage;
					
					if (j < deliverEarlierQty)
					{
						itemXml.@earlier = "true";
					}
					else
					{
						itemXml.@earlier = "false";
					}
					
					var localItemXml = new XML("<Item />");
					localItemXml.@earlier = itemXml.@earlier.toString();
					localItemXml.@kioskViewIndex = currentViewIndex;
					localItemXml.@earlierViewIndex = earlierItem.@index.toString();
					
					deliveryEarlierItems[index] = localItemXml;
					
					index++;
					deliveryEarlierXml.appendChild(itemXml);
				}
			}
		}
	}
	
	if (index == 0)
	{
		if (mode == "AUTOMATIC")
		{
			//SDO-10131 - After performing a delivery earlier operation the NewPos view is not updated correctly
			if (typeof(PosUpdateView) == "function")
			{
				//Force NewPos internal view update, otherwise the next call to hlp.getCurrentView() may not contain the delivery earlier information
				PosUpdateView();
			}
		}
		
		sessionSale.set("DELIVERY_EARLIER_SUMARY", null);
		return false;
	}
	
	var resultXml = new XML('<Event type="ASYNC" name="DLG_SYS_SHOW_EARLIER_SUMARY" />');
	resultXml.appendChild(deliveryEarlierXml);
	sessionSale.set("DELIVERY_EARLIER_SUMARY", resultXml.toString());
	
	return true;
}

/**
 * @brief  - Send the message with the Delivery Earlier information
 * @return - true
 * @author - Vladimir Dobroff
 * @since  - CSO-229 - NGK Support Deliver Early Feature - 7826861
 */
function PosCSOShowDeliveryEarlierJS() {
	/* SAMPLE
	<Event type="ASYNC" name="DLG_SYS_SHOW_EARLIER_SUMARY">
		<DeliveryEarlier earlierImage="gui_comment_getearlier.png" bigImage="gui_comment_getearlier.png" screenNumber="101">
			<Item index="0" code="8500" name="Med Coke" image="gui_ch_main_coke.png" earlier="false" />
			<Item index="1" code="7322" name="Medium Frites" image="gui_ch_main_frites.png" earlier="false" />
		</DeliveryEarlier>
	</Event>
	*/
	
	var deliveryEarlierSumary = sessionSale.get("DELIVERY_EARLIER_SUMARY");
	if (deliveryEarlierSumary != null && deliveryEarlierSumary != "") {
		PosSendUICmd(deliveryEarlierSumary);
	}
	sessionSale.set("DELIVERY_EARLIER_SUMARY", null);
	
	return true;
}

/**
 * @brief  - Set the delivery earlier status for a given index
 * @return - true
 * @author - Vladimir Dobroff
 * @since  - CSO-229 - NGK Support Deliver Early Feature - 7826861
 */
function PosCSOSetDeliveryEarlierJS(index, earlier)
{
	/* Response message sample
	<Event type="ASYNC" name="DLG_SYS_UPDATE_EARLIER_SUMARY">
		<Item index="0" earlier="false" />
		<Item index="1" earlier="true" />
	</Event>
	*/
	
	var indexNumber = Number(index);
	
	var resultXml = new XML('<Event type="ASYNC" name="DLG_SYS_UPDATE_EARLIER_SUMARY" />');
	if ((indexNumber >= 0) && (indexNumber < deliveryEarlierItems.length))
	{
		if (deliveryEarlierItems[indexNumber] == undefined) {
			API.dbg("PosCSOSetDeliveryEarlierJS - ERROR - Could not find the delivery earlier item for index [" + index + "]");
			return false;
		}
		
		deliveryEarlierItems[indexNumber].@earlier = earlier;
		
		var itemXml = new XML("<Item />");
		itemXml.@index = indexNumber;
		itemXml.@earlier = earlier;
	
		resultXml.appendChild(itemXml);
		PosSendUICmd(resultXml.toString());
	}
	
	return true;
}

/**
 * @brief  - Apply or discard the delivery earlier changes
 * @return - true
 * @author - Vladimir Dobroff
 * @since  - CSO-229 - NGK Support Deliver Early Feature - 7826861
 */
function PosCSOEndDeliveryEarlierJS(confirmChanges)
{
	//Check if the API is available
	if(typeof(PosSetProductDeliverEarlierQuantity) != "function") 
	{
		return true;
	}
	
	if (confirmChanges == "true")
	{	
		for (var i = 0; i < deliveryEarlierItems.length; i++)
		{
			var currentKioskViewIndex = deliveryEarlierItems[i].@kioskViewIndex.toString();
			var currentDeliveryEarlierViewIndex = deliveryEarlierItems[i].@earlierViewIndex.toString();
			
			var quantity = 0;
			
			for (j = 0; j < deliveryEarlierItems.length; j++)
			{
				if ((currentKioskViewIndex == deliveryEarlierItems[j].@kioskViewIndex.toString()) &&
					(currentDeliveryEarlierViewIndex == deliveryEarlierItems[j].@earlierViewIndex.toString()) &&
					(deliveryEarlierItems[j].@earlier.toString() == "true"))
				{
					quantity++;
				}
			}
			
			if (!KioskViewHelper.PosDoSelIndex(currentKioskViewIndex)){
				API.dbg("CSO - PosCSOEndDeliveryEarlierJS: Could not select line index (index=[" + currentKioskViewIndex + "])");
				return false;
			}
			
			PosSetProductDeliverEarlierQuantity(currentDeliveryEarlierViewIndex, quantity);
		}
	}
	
	//SDO-10131 - After performing a delivery earlier operation the NewPos view is not updated correctly
	if (typeof(PosUpdateView) == "function")
	{
		//Force NewPos internal view update, otherwise the next call to hlp.getCurrentView() may not contain the delivery earlier information
		PosUpdateView();
	}
	
	deliveryEarlierItems = new Array();
	return true;
}

/**
 * @brief  - Performs the update of selected choices in a selected value meal sent by the UI
 * @param  - itemIndex: Index of selected value meal in the cart.
 * @param  - choiceList: List of choices to be changed.
 * @param  - grillsList: List of new grills in the current value meal.
 * @return - True: Changes were done successfully; False: No changes were done.
 * @author - Jorge Olimpia, Robert Abreu
 * @since  - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
 * @modified - CSO-538 - [DRM] CYT C3 [KIOSK Ordering] - New choice item in meal is not added with default can Add, component and comments, instead previously customized can add, component and comments are displayed.
 * @modified - CSO-685 - Change Choice Refactoring.
 * @modified - CSO-745 - POS-340 - Order Basket Redesign
 */
function PosNGKPerformValueMealUpdateChoice(sellSequence, choiceList, grillInstructions) {
	API.dbg("[PosNGKPerformValueMealUpdateChoice] sellSequence["+sellSequence+"] choiceList["+choiceList+"] grillInstructions["+grillInstructions+"]");
	var itemIndex = KioskViewHelper.FindCurrentIndex(sellSequence);
	if (!itemIndex) {
		API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - No itemIndex defined.");
		return false;
	}
	
	KioskViewHelper.PosDoSelIndex(itemIndex);
	var helper = new BusinessObjectHelper;
	var kioskOrderView = new XML(getKioskView(helper.getCurrentView()));
	API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - current view: [" + kioskOrderView.toString() + "]");
	
	var oldItem = kioskOrderView.Order.Item.(@index == itemIndex);	
	var valueMeal = new XML(PosNGKGetValueMealXML(oldItem.Product.@code, null, false, "", true, "", "", false));
	API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - Product configuration: " + valueMeal.toString());	
	var oldItemQuantity = oldItem.Product.@qty;
	var selectedVML = valueMeal.Sizes.Product.(@code == oldItem.Product.@code);
	
	//CSO-817 - NGK 5.15.1 - VML PDP gets "stuck" when you select a side that is a VM.
	//This array will store all the choice nodes that have an auto choice product
	var choicesWithAutoChoicesArray = [];
	var hasAutoChoices = lVMLHasAutoChoice(selectedVML.Choice);
	if(hasAutoChoices)
		API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - AutoChoices activated for this product");
		
	var newChoiceTree = null;
	if(choiceList) {
		newChoiceTree = choiceList.split("|");
	}
	var oldFormatedValueMeal = new Array();
	// SQC-10032 - [Kiosk 5.16 - Order Basket] Kiosk does not keep the grill option in the PDP screen after perform change choice
	var oldGrillView = new XML(lGetGrillView());
	
	var cartItemQuantity = kioskOrderView.Order.Item.(@voided == 'false').length();
	
	//Create the string with all the old choices in the value meal
	for each(var prod in oldItem.Product.Product) {
		CreateOldProductChoicesList(prod, oldItem.Product.@code, oldFormatedValueMeal, parseInt(oldItem.Product.@qty));
	}
		
	for each(var line in oldFormatedValueMeal) {
		API.dbg("NGK - UpdateChoice - Old product: " + line);
	}
	if(newChoiceTree) {
		for each(var line in newChoiceTree) {
			API.dbg("NGK - UpdateChoice - New product: " + line);
		}
	}
	
	var choiceIndex = 1;
	var productIndex = 2;
	var sellSequenceIndex = 3;
	var choiceSelectedIndex = 4;
	var alreadyProcessed = 5;
	
	if(newChoiceTree) {
		//Mark the choices unchanged
		for (i = 0; i < newChoiceTree.length; i++) {
			for (j = 0; j < oldFormatedValueMeal.length; j++) {
				// SQC-10032 - [Kiosk 5.16 - Order Basket] Kiosk does not keep the grill option in the PDP screen after perform change choice
				var newChoiceTreeSplited=newChoiceTree[i].split("@")[0];
				var choiceChanged=(newChoiceTree[i].split("@")[1].toLowerCase()=="true") ? true : false;
				if(!choiceChanged && (newChoiceTreeSplited == oldFormatedValueMeal[j])) {
					oldFormatedValueMeal[j] = oldFormatedValueMeal[j] + ";(Equal)";
					// choice changed flag is moved to the end of the new string
					newChoiceTree[i] = newChoiceTreeSplited + ";(Equal)" + "@" + choiceChanged.toString();
					break;
				}
			}
		}	
		
		for each(var choiceTree in newChoiceTree) {
			// SQC-10032 - [Kiosk 5.16 - Order Basket] Kiosk does not keep the grill option in the PDP screen after perform change choice
			var newChoiceTreeSplited=choiceTree.split("@")[0];
			var choiceChanged=(choiceTree.split("@")[1].toLowerCase()=="true") ? true : false;
			var newChoice = newChoiceTreeSplited.split(";");
			if(newChoice.length == alreadyProcessed && !choiceChanged) //Choice already processed
				continue;
			
			var changeChoiceMade = false;

			for (i = 0; i < oldFormatedValueMeal.length; i++) {
				var oldChoice = oldFormatedValueMeal[i].split(";");

				if(newChoice[choiceIndex] == oldChoice[choiceIndex] && choiceChanged)
				{
					if(oldChoice.length == choiceSelectedIndex){
						// SQC-10032 - [Kiosk 5.16 - Order Basket] Kiosk does not keep the grill option in the PDP screen after perform change choice
						if(oldChoice[productIndex] != newChoice[productIndex] && choiceChanged){
							if(newChoice[productIndex] == "-1" && newChoice[sellSequenceIndex] == oldChoice[sellSequenceIndex])
							{
								oldFormatedValueMeal[i] = oldFormatedValueMeal[i] + ";(Removed)";
								PosDoSelBySellSequence(newChoice[sellSequenceIndex]);
								PosClearSingleChoiceBySellSequence();
								KioskViewHelper.PosDoSelIndex(itemIndex);
							}
							else if(newChoice[productIndex] == "NoChoice")
							{
								oldFormatedValueMeal[i] = oldFormatedValueMeal[i] + ";(Invalid)";
							}
							else if(newChoice[productIndex] != "-1")
							{
								oldFormatedValueMeal[i] = oldFormatedValueMeal[i] + ";(Resolved)";
								PosChangeChoice("1", oldChoice[productIndex], newChoice[productIndex]);
								changeChoiceMade = true;
							}
						}
						else{
							oldFormatedValueMeal[i] = oldFormatedValueMeal[i] + ";(Equal-different product)";
						}
						break;
					}
				}
			}
			// SQC-10032 - [Kiosk 5.16 - Order Basket] Kiosk does not keep the grill option in the PDP screen after perform change choice
			// CSO-1111 - NP6.1.23.MR30QR6B7671 - NGK5.16 QR1 - The order is missing required items. Please add the missing items
			if(!changeChoiceMade && choiceChanged) {
				var choiceResolved = false;
				
				if(newChoice[productIndex] == -1)
				{
					choiceResolved = true;
					oldFormatedValueMeal.push(newChoice + ";(No product selected)");
				}
				
				//CSO-817 - NGK 5.15.1 - VML PDP gets "stuck" when you select a side that is a VM.
				//If no choice was selected and the VML has auto choices, check if its necessary to change
				if(hasAutoChoices) {
					var autoChoiceCode = "";
					//Check if this choice has an auto choice product, and return its code
					for each(var autoChoiceNode in choicesWithAutoChoicesArray) {
						if(autoChoiceNode.@code == newChoice[choiceIndex]){
							autoChoiceCode = lAutoChoiceProduct(autoChoiceNode);
							break;
						}
					}
					//If there's an auto choice and it's different from the choice selected for the user, perform a change choice
					if(autoChoiceCode != "" && autoChoiceCode != newChoice[productIndex]) {
						choiceResolved = PosChangeChoice("1", autoChoiceCode, newChoice[productIndex]);
						if(choiceResolved)
							oldFormatedValueMeal.push(newChoice + ";(AutoChoice - Resolved)");						
					}
				}
				//If there's no auto choice or if for any reason the choice was not resolved yet, try the DoChoice
				//Actually, the NP6 don't automatic select the auto choice if the product is chosen a second time
				if(!choiceResolved) {
					PosDoChoice(newChoice[productIndex]);
					oldFormatedValueMeal.push(newChoice + ";(Added)");
				}
			}
			
			//Check if the number of items in cart has changed
			var newKioskOrderView = new XML(getKioskView(helper.getCurrentView()));
			var newCartItemQuantity = newKioskOrderView.Order.Item.(@voided == 'false').length();
			
			// Comparing the new view with the previous one to verify if a join was done.
			var sameViewItemQuantity = cartItemQuantity ==  newCartItemQuantity;
			
			//If a join was done, try to get the new index of the product
			if(!sameViewItemQuantity)
			{			
				itemIndex = -1;
				cartItemQuantity = newCartItemQuantity;			
				//If the number has changed, try to find the new PosSelIndex
				for each(var item in newKioskOrderView.Order.Item) {
					if(item.@currentSelected == true && item.Product.@code == oldItem.Product.@code){
						itemIndex = item.@index;
						break;
					}
				}
				
				if(itemIndex == -1){
					API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - Value meal not found after product join.");
					API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - New Kiosk view: [" + newKioskOrderView.toString() + "]");
					return true;
				}
				else{
					KioskViewHelper.PosDoSelIndex(itemIndex);
				}
			}
		
			// CSO-1383 - Cannot Grill this item message shown - NP.6130.2.0.HF0-K5.17.2-SLU2
			// Checking if the new choice is Grillable, to avoid trying to Grill something unGrillable.
			var newProduct = selectedVML.Choice.Product.(@code == newChoice[productIndex]);
			var isChoiceGrillable = newProduct.@isGrillable == true;
			
			// SQC-10032 - [Kiosk 5.16 - Order Basket] Kiosk does not keep the grill option in the PDP screen after perform change choice
			//If the ChangeChoice was called
			if ((changeChoiceMade == true || choiceChanged) && isChoiceGrillable) {
				// Checking if the previous view already has the new choice with the same quantity.
				var oldChoiceQty = 0;
				var oldProduct = kioskOrderView.Order.Item.(@index == itemIndex);
				for each(var product in oldItem.Product.Product) {
					if(product.@code == newChoice[productIndex]){
						oldChoiceQty += parseInt(product.@qty);
					}
				}
				
				var newChoiceQty = 0;
				for each(var product in newKioskOrderView.Order.Item.(@index == itemIndex).Product.Product) {
					if(product.@code == newChoice[productIndex]){
						newChoiceQty += parseInt(product.@qty);
					}
				}
				
				var sameChoiceQuantity = oldChoiceQty == newChoiceQty;
				
				// CSO-1335 - HSAP Voucher Change Choice Issue
				var newProduct = newKioskOrderView.Order.Item.(@index == itemIndex).Product.Product.(@code == newChoice[productIndex]);
				var alreadyGrilled = newProduct && newProduct.Grill.length() > 0;
				
				// CSO-1335 - HSAP Voucher Change Choice Issue
				API.dbg("Clear grill - Product [" + newChoice[productIndex] + "] Same choice quantity [" + sameChoiceQuantity + "] Already Grilled [" + alreadyGrilled + "] Choice changed [" + choiceChanged + "]");
				
				// If the new choice was grilled and was not in the previous view and there wasn't a join, do clear grill.
				// Or, if the same choice was re-selected by the user - SQC-10032 - [Kiosk 5.16 - Order Basket] Kiosk does not keep the grill option in the PDP screen after perform change choice
				// SQS-326 - [NGK5.17 HF8] Grill instructions are not getting removed after performs change choice (removed sameViewItemQuantity)
				if ((!sameChoiceQuantity || choiceChanged) && alreadyGrilled){
					API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - Clear grill started for product " + newChoice[productIndex]);
					lChoiceClearGrill(lFindNewChoiceIndex(newChoice[productIndex], oldGrillView));
				}
			}
			
			kioskOrderView = newKioskOrderView;
			oldItem = kioskOrderView.Order.Item.(@index == itemIndex);
		}
	}
	KioskViewHelper.PosDoSelIndex(itemIndex);		
	
	//Apply grill made during the PDP
	if(grillInstructions)
	{
		var instructions = grillInstructions.split("|");
		for each(var instruction in instructions) {
			
			var details  = instruction.split("@");
			
			var currentState = details[0];
			var productCode  = details[1].split(":")[0];
			var grillOperations = details[1].split(":")[1];

			var grillIndex = KioskGrillViewHelper.FindGrillIndexByState(productCode, currentState);

			if(grillIndex == -1) {
				API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - [FAIL] Index not found! Grill will not be performed");				
			}
			else {
				ExecuteGrillOperations(productCode, grillOperations, null, null, grillIndex);
			}
			
		}
	}
	
	for each(var line in oldFormatedValueMeal) {
		API.dbg("NGK - UpdateChoice - Changes made in old product: " + line);
	}
	
	/**
	 * @brief  - Create a string with the product code and its resolved choice, if avaliable, in the format 'p:ParentProductCode;ResolvedChoiceCode;ProductCode'
	 * @param  - product: Product to be evaluated
	 * @param  - parentCode: Code of the parent of the current evaluated product
	 * @author - Robert Abreu
	 * @since  - CSO-685 - Change Choice Refactoring
	 */
	function CreateOldProductChoicesList(product, parentCode, oldFormatedValueMeal, parentQty){		
		
		if(!parentQty)
			parentQty = 1;
		
		var sellSequenceArray = [];
		
		for each(var seq in product.@sellSequence.toString().split('|'))
		{
			if(seq!=undefined && seq!='')
				sellSequenceArray.push(seq);
		}
		
		if(product.@solvedChoice != ""){
			var itemQty = parseInt(product.@qty)/parentQty;
			for (var i = 0; i < itemQty; i++) { //One block for each product
				
				// Workaround for cases where np does not consider qty when creating sell sequence
				seq = i < sellSequenceArray.length ? sellSequenceArray[i] : sellSequenceArray[sellSequenceArray.length - 1];
				
				oldFormatedValueMeal.push("p:" + parentCode + ";" + product.@solvedChoice + ";" + product.@code + ";" + (seq ? seq : ""));
			}
		}
		
		for each(var prod in product.Product) {
			CreateOldProductChoicesList(prod, product.@code, oldFormatedValueMeal, parentQty);
		}
	}
	
	/**
	 * @brief  - Clear Grill of a product.
	 * @param  - choiceIndex: index of the choice that will have its grill cleared.
	 * @author - Renato Tsuchida
	 * @since  - CSO-538 - [DRM] CYT C3 [KIOSK Ordering] - New choice item in meal is not added with default can Add, component and comments, instead previously customized can add, component and comments are displayed.
	 */
	function lChoiceClearGrill(choiceIndex){
		if (choiceIndex == null){
			API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - lChoiceClearGrill - Index is null");
			return;
		}
		
		PosCSOCustomizeProductComponentJS(choiceIndex);
		// CSO-617 - Replace all references of PosClearGrill by PosClearGrillUnit
		PosClearGrillUnitJS();
		PosDoGrillEnd(3); // 3 means commit and end
	}

	/**
	 * @brief  - Gets the index of the new product.
	 * @param  - newChoice: code of the new product.
	 * @author - Renato Tsuchida, Robert Abreu
	 * @since  - CSO-538 - [DRM] CYT C3 [KIOSK Ordering] - New choice item in meal is not added with default can Add, component and comments, instead previously customized can add, component and comments are displayed.
	 * @modified - CSO-685 - Change Choice Refactoring
	 */
	function lFindNewChoiceIndex(newChoice, oldGrillView){
		if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId"))){
			API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - Could not start grill for item (product [" + newChoice + "])");
			return null;
		}

		var grillView = lGetGrillView();
		if (!grillView){
			API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - lFindNewChoiceIndex - Could not load grill view");
			PosDoGrillEnd(3); // 3 means commit and end
			return null;
		}
		
		var kioskGrillViewXml = new XML(grillView);
		PosDoGrillEnd(3); // 3 means commit and end

		var indexInNewView = -1;
		var indexInOldView = -1;
		//Find the index of the new choice in the new view ensuring that this choice didnt exists in old grill view
		for each (var comp in kioskGrillViewXml.Component) {		
			if (comp.@code.toString() == newChoice) {
				indexInNewView = comp.@index.toString();
				if(oldGrillView != null)
				{	//Checks if this index already exists in the old grill view
					for each (var oldComp in oldGrillView.Component) {
						if (oldComp.@code.toString() == newChoice && oldComp.@index.toString() == indexInNewView) {
							indexInNewView = -1;
							break;
						}
					}
				}
			}
		}
		
		if(indexInNewView == -1){
			API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - lFindNewChoiceIndex - Could not find the new choice");
			return null;
		}
		else
		{
			API.dbg("NGK - PosNGKPerformValueMealUpdateChoice - lFindNewChoiceIndex - Clearing product [" + newChoice + "]. Index [" + indexInNewView + "].");
			oldGrillView = kioskGrillViewXml;
			return indexInNewView;
		}
	}
	
	/**
	 * @brief  - Recursively check if some auto choice exists.
	 * @param  - choiceNode: A product with class CHOICE to be analized.
	 * @author - Robert Abreu
	 * @since  - CSO-817 - NGK 5.15.1 - VML PDP gets "stuck" when you select a side that is a VM.
	 */
	function lVMLHasAutoChoice(choiceNode)
	{	
		if(!choiceNode || choiceNode == ""){
			return false;
		}
		
		for each (var choice in choiceNode) {
			for each (var product in choice.Product) {
				//If one product is configured as auto-choice is enough
				if(parseInt(product.@defaultQuantity) > 0) {
					choicesWithAutoChoicesArray.push(choice);
					break;
				}
				lVMLHasAutoChoice(product.Choice);
			}

			lVMLHasAutoChoice(choice.Choice);
		}
		
		if(choicesWithAutoChoicesArray.length > 0)
		return true;
	
		return false;
	}
	
	/**
	 * @brief  - Find the product that is auto choice (i.e defaultQuantity > 0) in the choices of the selectedChoiceCode.
	 * @param  - parentChoice: parent choice of the product selected.
	 * @author - Robert Abreu
	 * @since  - CSO-817 - NGK 5.15.1 - VML PDP gets "stuck" when you select a side that is a VM.
	 */
	function lAutoChoiceProduct(parentChoice)
	{	
		//Find the product with defaultQuantity > 0 if exists
		for each (var product in parentChoice.Product) {
			if(parseInt(product.@defaultQuantity) > 0){
				return product.@code;
			}
		}
		
		return "";
	}
}

/**
 * @brief  - Get value meal product info based in a selected item in the cart.
 * @param  - itemIndex: index of the selected item in the cart.
 * @param  - qtyItemInCart: Quantity of the item in cart (may be different from the qty of the item in view for grouped items)
 * @author - Jorge Olimpia
 * @since  - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
 * @altered - CSO-745 - POS-340 - Order Basket Redesign
 */	
function lNGKGetValueMeal(itemIndex, qtyItemInCart) {
	if (itemIndex == undefined || itemIndex == "") {
		API.dbg("NGK - POSNGKGetValueMeal - Invalid item index: [" + itemIndex + "]");
		return false;
	}
	
	var arr = itemIndex.split("|");
	if(arr.length > 0){
		itemIndex = arr[0];
	}
	
	//Added for NGK - logic to identify the current selected group / product
	if (sessionSale.get("IS_NGK") == "true")
	{
		csoItemGroupManager.resetSelectedGroup();
		
		// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
		//First check if the item is already associated with an offer or global promotion
		var promoInfo = GetPromotionAssociatedToItem(itemIndex);
		if (promoInfo)
		{
			//If there is a promotion associated with the item, the promotion must be set as selected
			csoItemGroupManager.selectedGlobalPromoId = promoInfo.promoId;
			csoItemGroupManager.selectedGlobalPromoCounter = promoInfo.promoCounter;
		}
		else
		{
			csoItemGroupManager.itemGroupToCustomize = (arr.length > 1) ? csoItemGroupManager.getOrderViewItemGroup(arr[1]) : null;

			if (csoItemGroupManager.itemGroupToCustomize != null)
			{
				csoItemGroupManager.setSelectedGroup(csoItemGroupManager.itemGroupToCustomize.groupId);
			}
		}
	}
	else
	{
		csoItemGroupManager.itemGroupToCustomize = (arr.length > 1) ? csoItemGroupManager.getOrderViewItemGroup(arr[1]) : null;
	}
	
	var hlp = new BusinessObjectHelper;
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	API.dbg("NGK - POSNGKGetValueMeal - current view: [" + kioskOrderView.toString() + "]");
	
	var productCode = kioskOrderView.Order.Item.(@index == itemIndex).Product.@code;
	if (productCode == undefined || productCode == "" || productCode == "0") {
		API.dbg("NGK - POSNGKGetValueMeal - Invalid product code: [" + productCode + "]");
		return false;
	}
	
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	var productCompositionEnergyBase = "";
	var productConfiguredEnergyBase = "";
	if(csoCalculateEnergyInformation)
	{
		var productInfo = csoProductInfo[productCode.toString()];	
		if(productInfo)
		{
			// SQC-9953 - [Kiosk 5.16 - Order Basket] - Calories incorrect in PDP screen , after select Button "Edit" from Order Summary
			if(productInfo.xmlNode.@productClass.toUpperCase() == "VALUE_MEAL") {
				for each(var component in productInfo.xmlNode.Composition.Component) 
				{
					var configuredEnergy = lGetCustomEnergyInformation(component.ProductCode);
					if(configuredEnergy != "") productConfiguredEnergyBase = GetEnergyInformationAdded(productConfiguredEnergyBase, configuredEnergy);
					// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
					var viewElement = kioskOrderView.Order.Item.(@index == itemIndex).Product.Product.(@code == component.ProductCode);
					var energyBase = GetEnergyBasePerProduct(viewElement.@energyBase, viewElement.@qty);
					if((energyBase) && (energyBase != "")) productCompositionEnergyBase = GetEnergyInformationAdded(productCompositionEnergyBase, energyBase);
				}
			}
			else {
				var configuredEnergy = lGetCustomEnergyInformation(productCode);
				if(configuredEnergy != "") productConfiguredEnergyBase = GetEnergyInformationAdded(productConfiguredEnergyBase, configuredEnergy);
				// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
				var viewElement = kioskOrderView.Order.Item.(@index == itemIndex).Product.(@code == productCode)
				var energyBase = GetEnergyBasePerProduct(viewElement.@energyBase, viewElement.@qty);
				if((energyBase) && (energyBase != "")) productCompositionEnergyBase = GetEnergyInformationAdded(productCompositionEnergyBase, energyBase);
			}
		}
	}
		
	var orderSaleType = lGetOrderSaleType();
	var validSizeList = [];
	
	var eventXml = new XML('<Event type="ASYNC" name="DLG_NGK_VML_START_UPDATE_CHOICE"/>');
	var bybCodes = [];
	
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	var vmlXML = PosNGKGetValueMealXML(productCode, bybCodes, false, "", true, productCompositionEnergyBase, productConfiguredEnergyBase, false);
	if (vmlXML == null) {
		API.dbg("NGK - POSNGKGetValueMeal - Could not generate a XML for product code (productCode=[" + productCode + "])");
		return false;
	}
	// CSO-867 - Make it a Meal does not work properly if the choice has a choice
	lAddDeliveryLaterAtribute(vmlXML);
	
	// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	// add current grill information of item in cart
	var kioskViewItems = kioskOrderView.Order.Item.(@index == itemIndex);
	
	eventXml.appendChild(vmlXML);
	
	// CSO-745 - POS-340 - Order Basket Redesign
	// CSO-819 - Problem in change choice operation for CYT VM
	var cytGrill=lListCYTGrill(kioskViewItems.Product, kioskViewItems.@index);
	if(cytGrill) {
		eventXml.appendChild(cytGrill);
	}
	
	// CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
	lAddChoiceUpsellingPrice(eventXml);
	lReplaceSizePriceByCombinedPrice(eventXml);
	//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
	lAddSizeUpsellingPrice(eventXml);
				
	//CSO-36 - NGK v5.3 - Meal Loop Enhancements to Management/Display of Choices - 7160823
	var groupChoicesByFlavor = (lGetCSOUserInterfaceStringParameter("groupChoicesByFlavour", "false") == "true");
	if (groupChoicesByFlavor) {
		lAddFlavors(eventXml);
	}
	
	// SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
	var productGrill= lListGrill(kioskViewItems.Product, qtyItemInCart, itemIndex);
	if(productGrill) {
		// CSO-745 - POS-340 - Order Basket Redesign 
		// the second arr parameter indicates that it is a group item (local promotion id, promotion id or offer id)
		var strIsGroup=(arr.length > 1)?'true':'false';
		var productSelected=new XML('<ProductSelected type="CC" isGroup="'+strIsGroup+'"/>');
		productSelected.appendChild(productGrill);
		vmlXML.appendChild(productSelected);
	}
	
	// Updates value meal initial price in eventXml to be displayed at change choice's screen.
	lUpdateTotalPriceAddedRemovedItems(itemIndex);
	
	return (eventXml.toXMLString());
	
	/**********************/
	/**
	 * @brief  - Updates value meal initial price in eventXml to be displayed at change choice's screen.
	 * @param  - itemIndex: selected value meal index at the cart.
	 * @author - Jorge Olimpia
	 * @since  - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
	 * @modified - CSD-81 - [Regression 5.17] CYT x PDP information
	 */	
	function lUpdateTotalPriceAddedRemovedItems(itemIndex) {
		
		if (kioskOrderView.Order.Item.(@index == itemIndex) != undefined) {
			var totalPriceAddedRemovedItems = new BigDecimal("0.00");
			var meal = eventXml.Sizes.Product.(@code == productCode);
			if(meal != undefined)
			{
				for each (var product in kioskOrderView.Order.Item.(@index == itemIndex).Product.(@code == meal.@code).Grill) {
					var selectedItemTotalPrice = new BigDecimal(product.@totalPrice);
					totalPriceAddedRemovedItems = totalPriceAddedRemovedItems.add(selectedItemTotalPrice);
				}
				if(meal.length() > 0)
					meal[0].@extraPrice = totalPriceAddedRemovedItems;
			}
			totalPriceAddedRemovedItems = new BigDecimal("0.00");
			var composition = eventXml.Sizes.Product.(@code == productCode).Composition;
			if (composition != undefined) {
				for each (var product in kioskOrderView.Order.Item.(@index == itemIndex).Product.Product.(@code == composition.@code).Grill) {
					API.dbg("NGK - POSNGKGetValueMeal - lUpdateTotalPriceAddedRemovedItems - composition code: [" + composition.@code.toString() + "], totalPrice: [" + product.@totalPrice + "]");
					var selectedItemTotalPrice = new BigDecimal(product.@totalPrice);
					totalPriceAddedRemovedItems = totalPriceAddedRemovedItems.add(selectedItemTotalPrice);
				}
				if(composition.length() > 0)
					composition[0].@extraPrice = totalPriceAddedRemovedItems;
			}
		}
	}
	
	/**
	 * @brief - Get the energy value devided by the quantity provided
	 * @param - energyMult: energy multiplied
	 * @param - qty: quantity to divide
	 * @author - Vivian Cury
	 * @since - CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
	 */
	function GetEnergyBasePerProduct(energyMult, qty)
	{
		var energyBD = new BigDecimal(energyMult);
		var qtyBD = new BigDecimal(qty);
		//SQS-163 - [NGK5.16QR1HF2 - Nutritonal] I cannot edit a specific product from Order Review
		var energyPerProduct = energyBD;
		if(qtyBD.compareTo(BigDecimal.ZERO) != 0)
			energyPerProduct = energyBD.divide(qtyBD);
		
		return energyPerProduct.toString();
	}
}

/**
 * @brief  - Get value meal product info based in a selected item in the cart.
 * @param  - itemIndex: index of the selected item in the cart.
 * @param  - qty: Quantity of the item in cart (may be different from the qty of the item in view for grouped items)
 * @author - Jorge Olimpia
 * @since  - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
 * @altered - CSO-745 - POS-340 - Order Basket Redesign
 */
function POSNGKGetValueMeal(itemIndex, qty) {
	return PosSendUICmd(lNGKGetValueMeal(itemIndex, qty));
}

/**
 * @brief    - Generates a xml containing a selected value meal product structure.
 * @param    - productCode: the product code
 * @param    - bybArray: array of byb products
 * @param    - isMakeMeal: used by make it a meal to not include the item of the same size selection
 * @param    - customInfo: the name that the customer choose for his CYT. Use empty string ("")if no name was chosen.
 * @param    - bDisplayAutoChoice: used to decide if auto choices with more than one filler will be added to the XML.
 * @param    - itemEnergy: energy value of the selected item.
 * @param    - itemConfiguredEnergy: configured energy value of the selected item.  
 * @param    - bAutoEVM: auto EVM mode (CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM))
 * @param    - itemQty: (optional) quantity of items of the selected item.
 * @param    - leanSizes: flag to indicate whether value meal size information shall be fully loaded or not [used to avoid redundancy when loading promotion steps data] - (CSO-1295 - SP8.5 PR1-Kiosk: Overall Kiosk performance has become slow compared to SP8.)
 * @author   - Jorge Olimpia
 * @since    - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
 * @modified - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 *           - CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
 */	
function PosNGKGetValueMealXML(productCode, bybArray, isMakeMeal, customInfo, bDisplayAutoChoice, itemEnergy, itemConfiguredEnergy, bAutoEVM, itemQty, leanSizes) {

	var validSizeList = [];
	lGenerateListOfValidSizeSelections(productCode,isMakeMeal, itemQty);
	
	//CSO-1251 - NGK 5.17 - Active Promotions containing products/meals with Auto Choices that have extra items in the choice causing Kiosk to "hang"
	var VMHasAutoChoice = false;
	
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
	var vmlXML =  new XML("<Sizes />");;
	if(lIsCCM(csoProductInfo[productCode].xmlNode))
	{
		var ccmvmlXML = lGenerateValueMealXML(productCode, 0 , false, null, false, null, true, 0, 0, false);
		ccmvmlXML.@isCCM = "true";		
		ccmvmlXML.@showCCMPrice = !checkHidePrice(productCode);
		vmlXML.appendChild(ccmvmlXML);
	}
	else
	{
		vmlXML = lGenerateSizeSelectionXML(productCode, bybArray, isMakeMeal, customInfo, bDisplayAutoChoice, itemEnergy, itemConfiguredEnergy, itemQty, bAutoEVM, leanSizes);
		if(!leanSizes)
			lGenerateCCMXML(productCode, vmlXML);
	}

	return vmlXML;	

	/**
	 * @brief - Generates the first part of the xml that describes all the product options. In this case, includes only the available Size Selections.
	 * @param - productCode: the product code
	 * @param - bybArray: array of byb products
	 * @param - isMakeMeal: used by make it a meal to not include the item of the same size selection
	 * @param - customInfo: the name that the customer choose for his CYT. Use empty string ("")if no name was chosen.
	 * @param - bDisplayAutoChoice: used to decide if auto choices with more than one filler will be added to the XML.
	 * @param - itemEnergy: energy value of the selected item.
	 * @param - itemConfiguredEnergy: configured energy value of the selected item.	 
	 * @param - itemQty: quantity of items of the selected item. 
	 * @param - bAutoEVM: auto EVM mode (CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM))
	 * @param - leanSizes: flag to indicate whether value meal size information shall be fully loaded or not [used to avoid redundancy when loading promotion steps data] (CSO-1295 - SP8.5 PR1-Kiosk: Overall Kiosk performance has become slow compared to SP8.)
	 * @author - Vladimir Dobroff
	 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 * @modified - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	 *           - CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
	 */	
	function lGenerateSizeSelectionXML(productCode, bybArray, isMakeMeal, customInfo, bDisplayAutoChoice, itemEnergy, itemConfiguredEnergy, itemQty, bAutoEVM, leanSizes) {
		/* SAMPLE
		<Sizes name="BO McTimber" title="Would you like your main meal as menu?">
			<Product code="1762" name="BO McTimber" price="6.2" image=""/>
			  ...
			</Product>
			<Product code="1763" name="MXBO McTimber" price="7.2" image=""/>
			  ...
			</Product>
			<Product code="1761" name="Mc Timber" price="3.6" image=""/>
			  ...
			</Product>
		</Sizes>
		*/
		
		if (!lIsProductValid(productCode))
		{
			return null;
		}
		
		var productInfo = csoProductInfo[productCode.toString()];
		
		var sizesXml = new XML("<Sizes />");
		sizesXml.@title = lGetViewTitle("UPSELLING");
		
		var valueMealXML = null;
		
		// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
		// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
		if ((lGetNumberOfValidSizeSelections(productCode, bAutoEVM) > 1) && (!productInfo.isMonopoly))
		{
			for each (sizeOption in productInfo.xmlNode.SizeSelection.Size) 
			{
				if((!isMakeMeal)||(sizeOption.@code!=productCode)) {
					var bCanMakeMeal=false;
					// SQC-7017 - If I have an item in the cart and uses the "make meal" funcionality to change it into a VM (VM with default quantity of composition = 2, ) NGK displays a message informing that the selected size is not valid. Is this the correct behavior?
					if (typeof(PosChangeSizeSelectionWithList) == "function")  {
						bCanMakeMeal=true;
					}
					else {
						if(undefined!=itemQty) {
							// SQC-7393 - [NGK 5.11] Make it a Meal - Make it a Meal does not work for some products
							if(""!=sizeOption.@code.toString()) {
								var prodInfoVM = csoProductInfo[sizeOption.@code.toString()];
								// SQC-7427 - [NGK 5.11] Make it a Meal does not work using the attached environment
								// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
								if((null!=prodInfoVM)&&(undefined!=prodInfoVM) &&
										((!productInfo.isMonopoly)||(productInfo.isMonopoly && prodInfoVM.isMonopoly))) {
									var sizeProduct = prodInfoVM.xmlNode;
									for each (var component in sizeProduct.Composition.Component) {
										if(component.ProductCode==productCode) {
											if(itemQty>=component.DefaultQuantity) {
												bCanMakeMeal=true;
											}
											break;
										}
									}
								}
								else {
									API.dbg("NGK - PosNGKOrderItemJS.lGenerateSizeSelectionXML - invalid item ["+sizeOption.@code.toString()+"]");
								}
							}
							else {
								API.dbg("NGK - PosNGKGetValueMealXML.lGenerateSizeSelectionXML - size selection ["+sizeOption.@entry.toString()+"] with no product code");
							}
						}
						else {
							// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
							if(""!=sizeOption.@code.toString()) {
								var prodInfoVM = csoProductInfo[sizeOption.@code.toString()];
								// SQC-7427 - [NGK 5.11] Make it a Meal does not work using the attached environment
								if((null!=prodInfoVM)&&(undefined!=prodInfoVM) &&
										((!productInfo.isMonopoly)||(productInfo.isMonopoly && prodInfoVM.isMonopoly))) {
									bCanMakeMeal=true;
								}
								else {
									API.dbg("NGK - PosNGKOrderItemJS.lGenerateSizeSelectionXML - invalid item ["+sizeOption.@code.toString()+"]");
								}
							}
							else {
								API.dbg("NGK - PosNGKGetValueMealXML.lGenerateSizeSelectionXML - size selection ["+sizeOption.@entry.toString()+"] with no product code");
							}
						}
					}

					valueMealXML = null;
					
					//SDO-7747 - NGK stops working when trying to sell a product with no price configured
					if (bCanMakeMeal && lIsProductValid(sizeOption.@code) && lIsProductPriceNodeValid(sizeOption.@code))
					{
						// NPS-8867 Kiosk GUI - Enable Configuration for the Display of Kiosk Dimension Groups - 5834449
						// Add only the valid size selection options to the Size Selection View.
						var showDimension = sizeOption.@showDimensionToCustomer != "false";
						
						// EQA-527 - Price formatting issue on upselling popup when ordering meal
						// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
						if (lCheckProductSize(sizeOption.@code, productCode, bAutoEVM) == "Smaller" ||
							lCheckProductSize(sizeOption.@code, productCode, bAutoEVM) == "Error")
						{
							showDimension = false;
						}
						
						if (showDimension) 
						{
							if (productCode == sizeOption.@code)
							{
								// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
								// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
								// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
								valueMealXML = lGenerateValueMealXML(sizeOption.@code, sizeOption.@entry, true, bybArray, isMakeMeal, customInfo, bDisplayAutoChoice, itemEnergy, itemConfiguredEnergy, bAutoEVM);
							}
							else
							{
								// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
								// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
								// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
								valueMealXML = lGenerateValueMealXML(sizeOption.@code, sizeOption.@entry, false, bybArray, isMakeMeal, customInfo, bDisplayAutoChoice, itemEnergy, itemConfiguredEnergy, bAutoEVM, leanSizes);
							}
							
							if (valueMealXML != null && valueMealXML != undefined)
							{
								sizesXml.appendChild(valueMealXML);
							}
						}
					}
				}
			}
		}
		else
		{
			// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
			var valueMealXML = lGenerateValueMealXML(productCode, "0", true, bybArray, isMakeMeal, customInfo, bDisplayAutoChoice, itemEnergy, itemConfiguredEnergy, bAutoEVM);
			if (valueMealXML != null && valueMealXML != undefined)
			{
				sizesXml.appendChild(valueMealXML);
			}
		}
		return sizesXml;
		
	}


	function lGenerateCCMXML(productCode, sizesXml)
	{
		var CCMs = csoCCMInfo[productCode];
		
		var maxSize = 0;
		for each(var prod in sizesXml.Product)
		{
			maxSize = prod.size > maxSize ? prod.size : maxSize;
		}

		for each(var ccmCode in CCMs)
		{
			var valueMealXML = lGenerateValueMealXML(ccmCode, maxSize++, false, null, false, null, true, 0, 0, false);
			
			valueMealXML.@isCCM = "true";
			valueMealXML.@showCCMPrice = !checkHidePrice(ccmCode);
			
			var preSelected = new XML("<PreSelected />");
			var productPreSelectionInfo = new XML('<Product code="'+ productCode +'"/>');
			preSelected.appendChild(productPreSelectionInfo);
			valueMealXML.appendChild(preSelected);

			if(valueMealXML != undefined)
				sizesXml.appendChild(valueMealXML);
		}
		
		return;
	}

	/**
	 * @brief - Generates the second part of the xml that describes all the product options.
	 * @param - code: the product code
	 * @param - sizeIndex
	 * @param - isSelected
	 * @param - bybArray: array of byb products
	 * @param - customInfo: cyt name
	 * @param - bDisplayAutoChoice: used to decide if auto choices with more than one filler will be added to the XML.
	 * @param - itemSelectedCurrentEnergy: current energy value for the selected item
	 * @param - itemSelectedConfiguredEnergy: configured energy value for the selected item
	 * @param - bAutoEVM: auto EVM mode (CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM))
	 * @param - leanSizes: flag to indicate whether value meal size information shall be fully loaded or not [used to avoid redundancy when loading promotion steps data] (CSO-1295 - SP8.5 PR1-Kiosk: Overall Kiosk performance has become slow compared to SP8.)
	 * @author - Vladimir Dobroff
	 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 *           - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	 *           - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	 *           - CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
	 *           - CSO-722 Show Grill On Sale with New Value Meal Loop/PDP in 5.15
	 */
	function lGenerateValueMealXML(code, sizeIndex, isSelected, bybArray, isMakeMeal, customInfo, bDisplayAutoChoice, itemSelectedCurrentEnergy, itemSelectedConfiguredEnergy, bAutoEVM, leanSizes) {
	
		/* SAMPLE
		<Product code="1762" name="BO McTimber" price="6.2" image=""/>
			<Choice code="10000002" name="MEDIUM MENU DRINK ?" price="6.2" title="Please, choose your drink..." image="" defaultQuantity="1">
				<Product code="6278" name="" price="0" image="Gui_fr_main_Badoit.png" defaultQuantity="0"/>
				<Product code="9309" name="The Glace BestOf" price="0" image="gui_fr_main_IceT3.png" defaultQuantity="0"/>
				<Product code="9311" name="Coke Best Of" price="0" image="gui_fr_main_cocacola.png" defaultQuantity="0"/>
			</Choice>
			<Choice code="10000010" name="BEST OF SIDE?" price="6.2" title="Please, choose your side order..." image="" defaultQuantity="1">
				<Product code="3012" name="Frite Best Of" price="0" image="gui_fr_main_moyennefrite.png" defaultQuantity="0"/>
				<Product code="3017" name="Potatoes Best Of" price="0" image="gui_fr_main_moyennepotatoes.png" defaultQuantity="0"/>
				<Product code="4115" name="Petite salade Best Of" price="0" image="gui_fr_main_ptsalade2.png" defaultQuantity="0"/>
			</Choice>
		</Product>
		*/
	
		VMHasAutoChoice = false;
	
		var language = sessionSale.get("LANGUAGE");
	
	    var valueMealXml = new XML("<Product />");
		valueMealXml.@code = code;
		valueMealXml.@size = sizeIndex;
		
		if (isSelected == true)
		{
			valueMealXml.@isSelected = "true";
		}
		
		if (!lIsProductValid(code)) return null;
		
		var productInfo = csoProductInfo[code.toString()];

		// CSO-546 POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
		valueMealXml.@isGrillable = productInfo.isGrillable;
		valueMealXml.@isMonopoly = productInfo.isMonopoly;
		
		// CSO-722 Show Grill On Sale with New Value Meal Loop/PDP in 5.15
		valueMealXml.@showGrillOnSale = AvailabilityToShowGrillOnSale(code);
		
		if (productInfo == null || !productInfo.isValid) {
			API.dbg("NGK - PosNGKOrderItemJS.lGenerateValueMealXML - Product does not exist or is not avaialble - ProductCode:" + code);
			return null;
		}
		
		//CSO-1351 - POS-409 - NGK Analytics Phase 2
		var defaultLanguage = sessionSale.get("DEFAULT_LANGUAGE");
		valueMealXml.@defaultName = (productInfo.names[defaultLanguage.toString()] == null ? "" : productInfo.names[defaultLanguage.toString()].csoName);
		
		//CSO-831 - NGK 5.15.1 - PDP Suggestive Sell needs to use CSOName not CSOSizeName
		valueMealXml.@name = (productInfo.names[language.toString()] == null ? "" : productInfo.names[language.toString()].csoName);
		var sizeName = (productInfo.names[language.toString()] == null ? "" : productInfo.names[language.toString()].csoSizeName);
		if (!sizeName) 
			valueMealXml.@sizeName = valueMealXml.@name;
	    else 
			valueMealXml.@sizeName = sizeName;
			
		// CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
		var vmlPrice = lGetProductFixedPrice(productInfo.xmlNode.ProductCode.toString());
		valueMealXml.@price = lFormatPrice(vmlPrice);
		valueMealXml.@image = productInfo.csoImages.dimensionImage;

		// CSO-1374 - POS-521 - NGK - Support for Price per Unit on PDP
		var pricePerUnitInfo = lRetrievePricePerUnitInfo(code, new BigDecimal(vmlPrice));
		if(pricePerUnitInfo.value != undefined ) {
			valueMealXml.@pricePerUnitValue = pricePerUnitInfo.value;
			valueMealXml.@pricePerUnitLabelUnit = pricePerUnitInfo.labelUnit;
			valueMealXml.@pricePerUnitBaselineUnitofMeasure = pricePerUnitInfo.baselineUnitOfMeasure;
		}

		if(leanSizes)
			return valueMealXml;
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		var energy = "";
		if ((csoCalculateEnergyInformation) && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))
		{
			if(isSelected == true)
			{
				if (productInfo.xmlNode.@productClass.toUpperCase() == "VALUE_MEAL") 
				{
					energy = lGetCustomEnergyInformation(code);
					
					if(itemSelectedConfiguredEnergy != "") energy = GetEnergyInformationSubtracted(energy, itemSelectedConfiguredEnergy);
						
					energy = GetEnergyInformationAdded(energy, itemSelectedCurrentEnergy);				
				}
				else 
				{
					energy = (itemSelectedCurrentEnergy != "" ? itemSelectedCurrentEnergy : lGetCustomEnergyInformation(code));
				}
			}
			else
			{
				energy = lGetCustomEnergyInformation(code);
				if ((energy != "") && (itemSelectedCurrentEnergy != ""))
				{
					if(itemSelectedConfiguredEnergy != "") energy = GetEnergyInformationSubtracted(energy, itemSelectedConfiguredEnergy);

					energy = GetEnergyInformationAdded(energy, itemSelectedCurrentEnergy);				
				}
			}
		}
		else 
		{
			energy = lGetCustomEnergyInformation(code);
		}

		// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
		// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if (energy != "")
		{
			var energyBase = energy;
			// SQC-10043 - [Kiosk 5.16 - Order Basket] Calories incorrect in PDP screen , after select Button "Make it Default"
			// assuming that itemSelectedConfiguredEnergy empty means that there is no grill applied yet -> energy has the configured energy value
			var configuredEnergyBase = itemSelectedConfiguredEnergy ? itemSelectedConfiguredEnergy : energy;
			// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
			var configuredEnergyUnformated = energy;

			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if ((csoCalculateEnergyInformation) && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))
			{
				// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
				// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
				energy = RoundEnergy(code.toString(), energy), code.toString();
				configuredEnergyUnformated = configuredEnergyBase = energy;
				energy = FormatEnergyValue(energy);
				
				// SQC-10043 - [Kiosk 5.16 - Order Basket] Calories incorrect in PDP screen , after select Button "Make it Default"
				if ((productInfo.xmlNode.@productClass.toUpperCase() != "VALUE_MEAL") && (itemSelectedConfiguredEnergy)) {
					configuredEnergyBase = RoundEnergy(code.toString(), itemSelectedConfiguredEnergy);
				}
			}
			valueMealXml.@energy = energy;
			// SQC-10043 - [Kiosk 5.16 - Order Basket] Calories incorrect in PDP screen , after select Button "Make it Default"
			valueMealXml.@configuredEnergy = configuredEnergyBase;
			
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			valueMealXml.@energyBase = energyBase;
			
			// CSO-981 - [DRM] KIOSK SP8 C0P3: Nutrition values are not recalculating in the VM PDP screen, if the product quantities are increased. But the price is increasing
			var format = GetEnergyFormat(code.toString());
			valueMealXml.@energyMask = format.energyMask;
			valueMealXml.@energyUnformated = configuredEnergyUnformated;
			
			// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
			if ((!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
			{
				if (csoProductInfo[code].hasEnergySuffix == true) valueMealXml.@customSuffix = GetProductEnergySuffix(csoProductInfo[code]);
			}
		}
		
		// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
		// Even that the energy attribute has not value, the UI needs this information when it will calculate the energy on its own.
		if ( (csoCalculateEnergyInformation) &&
 		     (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true) &&
			 (csoProductInfo[code]) &&
			 (csoProductInfo[code].hasEnergySuffix) )
		{
			valueMealXml.@energySuffix = PosCSOI18nGetMessageJS(GetProductEnergySuffix(csoProductInfo[code]));
		}

		// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		if (bybArray && (productInfo.isBybProduct || productInfo.isBybPreBuilt))
		{
			valueMealXml.@isBYB = "true";
			if (bybArray[code] == undefined)
			{
				// SDO-10289 - NGK 5.91 - Pre-built products with incorrect behavior
				var bybAutoSelection = ((productInfo.isBybPreBuilt && 
										 productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection") != undefined &&
										 (productInfo.cytVersion != undefined && productInfo.cytVersion == 1)) ?
										productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection").@value.toString() :
										"");
				// CSO-329 - Ability to Enter custom Names for CYT Items - 8031932
				bybArray[code] = { productCode: code, parentCostInclusive: false, autoSelectItems: bybAutoSelection, customInfo: customInfo };
			}
		}
		
		// CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
		// CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		if (productInfo.isNutritionalInfoAvailableInVML)
		{
			valueMealXml.@showNutrition = "true";
		}
		
		// CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		if (productInfo.requireLegalDisclaimer) {
			// CSO-142 - Legal-Disclaimer by language - CR updated - 7423781
			valueMealXml.@legalDisclaimerImage = PosNGKGetAlcoholicBeverageDisclaimerImage();
			valueMealXml.@legalDisclaimerText = PosNGKGetAlcoholicBeverageDisclaimerText();
		}
		
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
		var allergensFound=[];
		// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
		allergensFound = lFindAllergens(allergensFound, code.toString(), [], false, true, false, true);
		if (allergensFound.length>0) {
			valueMealXml.@hasAllergens = "true";
		
			allergensFound = [];
			// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
			allergensFound = lFindAllergens(allergensFound, code.toString(), selectedAllergensList, false, true, false, false);
			if (allergensFound.length>0) {
				valueMealXml.@hasSignaledAllergens = "true";
			}
		}

		// CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057 
		var timeRestrictionInfo = GetTimeRestrictionProductAvailability(code, 0);
		if (timeRestrictionInfo != undefined || timeRestrictionInfo != null) {
			valueMealXml.@isTimeRestricted = true;
			valueMealXml.@timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod;
		}
		// Adds the composition to the structure.
		// CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		// CSO-1125 - [DRM] KIOSK SP8(TIG/DIG Pre-prod):Multiple customization buttons (Want to change the ingredients?) are displayed with different grill options on PDP screen of breakfast sandwiches (muffin, bagel and biscuit) and KIOSK gets stuck after removing ingredients
		if (productInfo.hasComposition && productInfo.xmlNode.@productClass.toUpperCase() != "PRODUCT")
		{
			// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
			lGenerateCompositionXML(valueMealXml, productInfo.xmlNode, false, 0, GLOBAL_NGK_MAX_RECURSION_LEVEL, sizeIndex, true, bybArray, isMakeMeal, bDisplayAutoChoice);
		}
		
		// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		if (productInfo.hasChoices)
		{
			for each (var abstractChoice in productInfo.xmlNode.Choices.Component) 
			{
				// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
				lGenerateChoiceXml(valueMealXml, abstractChoice, false, 0, GLOBAL_NGK_MAX_RECURSION_LEVEL, sizeIndex, true, bybArray, isMakeMeal, bDisplayAutoChoice, bAutoEVM);
			}
		}
		
		valueMealXml.@hasAutoChoice = VMHasAutoChoice;
		
		return valueMealXml;
	}

	/**
	 * @brief - Generates the third part of the xml that describes all the product options. Includes the available Components and their Choices recursively.
	 * @param - valueMealXml: the partially generated value meal xml from the previous step
	 *        - productVM: the product node
	 *		  - parentCostInclusive: mark if the price has already been included somewhere in the hierarchy
	 *		  - currentRecursionDepth: used to control the current recursion depth.
	 *        - maxRecursionDepth: limit how many inner choices will be processed. Used to avoid infinite recursion
	 *		  - sizeIndex: the root product size
	 *		  - includeSize: if the size group should be added
	 *		  - bybArray: array of byb products
	 *        - isMakeMeal
	 *        - bDisplayAutoChoice: used to decide if auto choices with more than one filler will be added to the XML.
	 * @author - Kalil Garcia, Vladimir Dobroff
	 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 *           - CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
	 * @altered  - CSO-722 Show Grill On Sale with New Value Meal Loop/PDP in 5.15
	 */
	function lGenerateCompositionXML(valueMealXml, productVM, parentCostInclusive, currentRecursionDepth, maxRecursionDepth, sizeIndex, includeSize, bybArray, isMakeMeal, bDisplayAutoChoice) {
		
		var language = sessionSale.get("LANGUAGE");
		
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
		
		for each (var composition in productVM.Composition.Component) {
		
			var productInfo = csoProductInfo[composition.ProductCode];
			
			if (productInfo == null || productInfo == undefined)
			{
				continue;
			}
			
			//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
			//The product will only be added if it has at least one choice or one composition
			//This verification has been added because some databases do not mark the products as raw items,
			//which caused unecessary information to be added to the value meal message
			// CSO-182 - NGK Crashing with the error message "out of memory" - NW-22
			/*SQC-9041 [NGK5.15 - PDP] - CYT must be displayed in VML, after select the option "Make it a Meal" in PDP
			  :: It was added the PosNGKIsCYTProduct validation to allow cyt empty ( without compositions)
			*/
			if ((productInfo != null) && (productInfo.xmlNode.@productClass != "RAW_ITEM") && 
				//[CSO-951] KIOSK SP8B1 Pre-Release Build 14: For breakfast sandwich meals, the hashbrown (side item) is not displayed on VM PDP
                (productInfo.hasChoices || productInfo.hasComposition || PosNGKIsCYTProduct(productInfo.xmlNode.ProductCode.toString()) || productInfo.hasCanAdds || productInfo.hasComments)) {
			
				var mainCompositionXml = new XML("<Composition />");
				mainCompositionXml.@code = composition.ProductCode;
				mainCompositionXml.@name = productInfo.names[language.toString()] == null ? "" : productInfo.names[language.toString()].csoName;
				
				// CSO-546 POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
				mainCompositionXml.@isGrillable = productInfo.isGrillable;

				// CSO-722 Show Grill On Sale with New Value Meal Loop/PDP in 5.15
				mainCompositionXml.@showGrillOnSale = AvailabilityToShowGrillOnSale(composition.ProductCode);

				var costInclusive = false;
				
				// CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
				//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
				if (productInfo.isNutritionalInfoAvailableInVML)
				{
					mainCompositionXml.@showNutrition = "true";
				}
				
				if (composition.CostInclusive == "true" || parentCostInclusive)
				{
					costInclusive = true;
					mainCompositionXml.@price = lFormatPrice("0");
				}
				else
				{
					// CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
					//Modified to include only the current component price.
					//The price combination will be performed in another step.
					//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
					mainCompositionXml.@price = lFormatPrice(lGetProductFixedPrice(productInfo.xmlNode.ProductCode.toString()));
				}
				
				mainCompositionXml.@image = productInfo.csoImages.dimensionImage;
				// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
				if (bybArray && (productInfo.isBybProduct || productInfo.isBybPreBuilt))
				{
					mainCompositionXml.@isBYB = "true";
					if (bybArray[composition.ProductCode] == undefined)
					{
						// SDO-10289 - NGK 5.91 - Pre-built products with incorrect behavior
						var bybAutoSelection = ((productInfo.isBybPreBuilt && 
												 productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection") != undefined &&
												 (productInfo.cytVersion != undefined && productInfo.cytVersion == 1)) ?
												productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection").@value.toString() :
												"");
						bybArray[composition.ProductCode] = { productCode: composition.ProductCode, parentCostInclusive: false, autoSelectItems: bybAutoSelection };
					}
				}
				
				//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
				if (productInfo.requireLegalDisclaimer) {
					// CSO-142 - Legal-Disclaimer by language - CR updated - 7423781
					mainCompositionXml.@legalDisclaimerImage = PosNGKGetAlcoholicBeverageDisclaimerImage();
					mainCompositionXml.@legalDisclaimerText = PosNGKGetAlcoholicBeverageDisclaimerText();
				}
				// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
				var allergensFound=[];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				allergensFound = lFindAllergens(allergensFound, composition.ProductCode, [], false, true, false, true);
				if (allergensFound.length>0) {
					mainCompositionXml.@hasAllergens = "true";
				
					allergensFound = [];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allergensFound = lFindAllergens(allergensFound, composition.ProductCode, selectedAllergensList, false, true, false, false);
					if (allergensFound.length>0) {
						mainCompositionXml.@hasSignaledAllergens = "true";
					}
				}
				// CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057 
				var timeRestrictionInfo = GetTimeRestrictionProductAvailability(composition.ProductCode, 0);
				if (timeRestrictionInfo != undefined || timeRestrictionInfo != null) {
					mainCompositionXml.@isTimeRestricted = true;
					mainCompositionXml.@timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod;
				}

				// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
				if (currentRecursionDepth < maxRecursionDepth && !productInfo.isBybProduct && !productInfo.isBybPreBuilt)
				{
					//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
					if (productInfo.hasComposition)
					{
						//Go to the next composition level
						lGenerateCompositionXML(mainCompositionXml, productInfo.xmlNode, costInclusive, currentRecursionDepth + 1, maxRecursionDepth, sizeIndex, includeSize, bybArray, isMakeMeal, bDisplayAutoChoice);
					}
					
					//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
					if (productInfo.hasChoices)
					{
						//Add the choices for each composition item.
						for each (var abstractChoice in productInfo.xmlNode.Choices.Component) {
							// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
							lGenerateChoiceXml(mainCompositionXml, abstractChoice, costInclusive, currentRecursionDepth + 1, maxRecursionDepth, sizeIndex, includeSize, bybArray, isMakeMeal, bDisplayAutoChoice, bAutoEVM);
						}
					}
				}
				
				// NPS-13589 - NGK doesn't respect multiple choice queries (e.g. Nugget Sauces) - ACSI2037138
				for (var i = 0; i < composition.DefaultQuantity; i++) {
					// have to clone the xml or the next appends will be inserted after the first composition tag
					// If this happens the order of choice tags will be listed backwards
					var copyCompositionXml = new XML(mainCompositionXml.toXMLString());
					valueMealXml.appendChild(copyCompositionXml);
				}
			}
		}
	}

	/**
	 * @brief - Generates the fourth part of the xml that describes all the product options. Includes the available Choices, inner Choices and inner Components recursively.
	 * @param - valueMealXml: the partially generated value meal xml from the previous step
	 *        - abstractChoice: a node contained inside product->choices->Component
	 *		  - parentCostInclusive: mark if the price has already been included somewhere in the hierarchy
	 *		  - currentRecursionDepth: used to control the current recursion depth.
	 *        - maxRecursionDepth: limit how many inner choices will be processed. Used to avoid infinite recursion
	 *		  - sizeIndex: the root product size
	 *		  - includeSize: if the size group should be added
	 *		  - bybArray: array of byb products
	 *        - isMakeMeal
	 *        - bDisplayAutoChoice: used to decide if auto choices with more than one filler will be added to the XML.
	 *		  - bAutoEVM: auto EVM mode (CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM))
	 * @author - Vladimir Dobroff
	 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 *           - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	 *           - CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
	 * @altered  - CSO-722 Show Grill On Sale with New Value Meal Loop/PDP in 5.15
	 */	
	function lGenerateChoiceXml(valueMealXml, abstractChoice, parentCostInclusive, currentRecursionDepth, maxRecursionDepth, sizeIndex, includeSize, bybArray, isMakeMeal, bDisplayAutoChoice, bAutoEVM) {
	
		/***** CSO-259 - ADDED ******/
		var orderSaleType = lGetOrderSaleType();
		var showMealSizeSelectionAtTheEnd = (lGetCSOUserInterfaceStringParameter("showMealSizeSelectionAtTheEnd", "false") == "true");
		
		if (!lIsProductValid(abstractChoice.ProductCode)) return null;
		
		var includeMultiChoice = false;
		
		if ((abstractChoice.parent().parent().CustomParameters.Parameter.(@name == "ApplyMultiChoice") != undefined) &&
		    (abstractChoice.parent().parent().CustomParameters.Parameter.(@name == "ApplyMultiChoice").@value.toString() == "true"))
		{
			includeMultiChoice = true;
		}
		
		var abstractChoiceInfo = csoProductInfo[abstractChoice.ProductCode.toString()];
	
		var abstractChoiceXml = new XML("<Choice />");
		abstractChoiceXml.@code = abstractChoice.ProductCode;
		
		var language = sessionSale.get("LANGUAGE");
		
		abstractChoiceXml.@name = abstractChoiceInfo.names[language] == null ? "" : abstractChoiceInfo.names[language].csoName;
		
		if ((abstractChoice.CostInclusive == "true") || parentCostInclusive)
		{
			parentCostInclusive = true;
			abstractChoiceXml.@costInclusive = "true";
			abstractChoiceXml.@price = lFormatPrice("0");
		}
		else
		{
			abstractChoiceXml.@price = lFormatPrice(lGetPrice(abstractChoiceInfo.xmlNode));
		}
		
		abstractChoiceXml.@title = lGetViewTitle(abstractChoiceInfo.xmlNode.ChoiceGroup);
		abstractChoiceXml.@image = abstractChoiceInfo.csoImages.largeImage;
		abstractChoiceXml.@defaultQuantity = abstractChoice.DefaultQuantity;
		abstractChoiceXml.@maxQuantity = abstractChoice.MaxQuantity;
		abstractChoiceXml.@minQuantity = abstractChoice.MinQuantity;
		abstractChoiceXml.@anchor = abstractChoice.Anchor;
		abstractChoiceXml.@flexibleChoice = abstractChoice.FlexibleChoice;
		abstractChoiceXml.@isForceUpCharge = isForceUpCharge(abstractChoice) || valueMealXml.@isForceUpCharge == "true";
		
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		if((csoCalculateEnergyInformation) &&
		   (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true) &&
		   (abstractChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOExcludedInNutritionalAccount").@value.toString().toLowerCase() == "true"))
		{
			abstractChoiceXml.@excludedInNutritionalAccount = "true";				
		}
		
		//CSO-766 - POS-362 - Customer Choice on NGK (8618134)
		abstractChoiceXml.@fulfillmentPriorityForCCM = "999";
		if(abstractChoiceInfo.xmlNode.FulfillmentPriorityForCCM != undefined && abstractChoiceInfo.xmlNode.FulfillmentPriorityForCCM != "")
			abstractChoiceXml.@fulfillmentPriorityForCCM = abstractChoiceInfo.xmlNode.FulfillmentPriorityForCCM;

		var hasAutoChoice = false;
		// CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
		var iCountOptions = 0;
		
		// CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
		//Added to include sub choices prices
		//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		if (abstractChoiceInfo.hasChoices)
		{
			for each (var innerAbstractChoice in abstractChoiceInfo.xmlNode.Choices.Component)
			{
				var costInclusive = false;
				if ((innerAbstractChoice.CostInclusive == "true") || parentCostInclusive)
				{
					costInclusive = true;
				}
				
				// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
				// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
				lGenerateChoiceXml(abstractChoiceXml, innerAbstractChoice, costInclusive, currentRecursionDepth + 1, maxRecursionDepth, sizeIndex, includeSize, bybArray, isMakeMeal, bDisplayAutoChoice, bAutoEVM)
			}
		}
		
		//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
		if (abstractChoiceInfo.hasComposition)
		{
			// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
			var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");

			for each (var concreteChoice in abstractChoiceInfo.xmlNode.Composition.Component)
			{
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				var concreteChoiceInfo = csoProductInfo[concreteChoice.ProductCode.toString()];
				
				if ((concreteChoiceInfo == null) || (concreteChoiceInfo == undefined))
				{
					continue;
				}
				
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if((csoCalculateEnergyInformation) && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))	
				{
					if (concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour") != undefined) 
					{
						if (csoIsCustomerSelfPour == "TRUE")
						{
							if(concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "false")
							{
								continue;
							}
						}
						else 
						{
							if(concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOIsSelfPour").@value.toString().toLowerCase() == "true")	
							{
								continue;
							}
						}
					}
				}
				
				var concreteChoiceXml = new XML("<Product />");
				concreteChoiceXml.@code = concreteChoice.ProductCode;
				
				//SDO-7747 - NGK stops working when trying to sell a product with no price configured
				if (!lIsProductValid(concreteChoice.ProductCode)) continue;
				if (!lIsProductPriceNodeValid(concreteChoice.ProductCode)) continue;
				
				var concreteChoiceInfo = csoProductInfo[concreteChoice.ProductCode.toString()];
				
				// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if (((!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true)) &&
				    (concreteChoiceInfo.energyInfo) &&
				    (concreteChoiceInfo.energyInfo.EnergyInformation != ""))
				{
					concreteChoiceXml.@energy = lGetCustomEnergyInformation(concreteChoice.ProductCode);
					// SQC-7583 - [NGK 5.12] US Nutrition Enhancement - NGK doesn't use the key from the i18n when another language is selectedprivate string energySuffix
					// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
					if (csoProductInfo[concreteChoice.ProductCode].hasEnergySuffix == true) 
					{	
						concreteChoiceXml.@customSuffix = GetProductEnergySuffix(concreteChoice);
					}
					concreteChoiceXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", concreteChoiceXml.@energy);
				}

				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if ((csoCalculateEnergyInformation) &&
				    (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true) &&
				    (concreteChoiceInfo.energyInfo) &&
				    (concreteChoiceInfo.energyInfo.CalculatedEnergyInformation != ""))
				{
					var itemEnergy = lGetCustomEnergyInformation(concreteChoice.ProductCode);
					// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
					var concreteChoiceCode = concreteChoice.ProductCode.toString();
					concreteChoiceXml.@energy = FormatEnergyValue(RoundEnergy(concreteChoiceCode, itemEnergy), concreteChoiceCode);
					
					// CSO-731 - 5.14 US Nutrition-"Adds" Prefix
					var addPrefixParameter = concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalAddPrefix");
					var choiceAddPrefix = (addPrefixParameter && addPrefixParameter.@value.toString().toUpperCase() == "TRUE") ? true : false;
					if(choiceAddPrefix) concreteChoiceXml.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", concreteChoiceXml.@energy);
				}
				
				// CSO-290 - NGK-Make Meal Functionality after Adding to Basket - 7913753
				if(isMakeMeal) {
					// test if the size of the choice product is the same of the VM
					var bFound=false;
					
					// CSO-290 - NGK-Make Meal Functionality after Adding to Basket - 7913753
					if (typeof(PosChangeSizeSelectionWithList) != "function")  {
						// known issue to be solved by NP update
						// the choice can be selectable only if it has a salable equivalent product
						bFound=false;
						// NPS-21847 - RFM2 - APMEA - PROD - 2.11.3.0.2.4 - Large meal is not availabe once select Make it Meal. - INC9171092
						if (concreteChoiceInfo.xmlNode.SizeSelection &&
							concreteChoiceInfo.xmlNode.SizeSelection.Size &&
							concreteChoiceInfo.xmlNode.SizeSelection.Size.length() > 0)
						{
							for each (var sizeItem in concreteChoiceInfo.xmlNode.SizeSelection.Size) {
								if(csoProductInfo[sizeItem.@code.toString()] != undefined) {
									var choiceItem = csoProductInfo[sizeItem.@code.toString()].xmlNode;
									if(("ACTIVE"==choiceItem.@statusCode)&&("true"==choiceItem.@salable)) {
										bFound=true;
										break;
									}
								}
							}
							if(!bFound) {
								// CSO-534 - Item is incorrectly disabled during make meal loop
								// fix the problem of showing disabled choices in VML
								if (concreteChoice.DefaultQuantity > 0)
								{
									hasAutoChoice = true;
								}
								continue;
							}
						}
					}
				}

				// CSO-37 - NGK - Block Display of Some Choices - 7160831
				// Removing choices from the value meal
				//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
				if (concreteChoiceInfo.removeFromMOT)
				{
					continue;
				}
				
				concreteChoiceXml.@name = concreteChoiceInfo.names[language.toString()] == null ? "" : concreteChoiceInfo.names[language.toString()].csoName;
				
				var costInclusive = false;
				
				if(abstractChoiceXml.@isForceUpCharge=="true") {
					concreteChoiceXml.@costInclusive = concreteChoice.CostInclusive;
					if(concreteChoiceXml.@costInclusive == "true") {
						//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
						try
						{
							concreteChoiceXml.@price = lFormatPrice(lGetProductFixedPrice(concreteChoiceInfo.xmlNode.ProductCode.toString()));
						}
						catch(ex)
						{
							API.dbg("lGenerateChoiceXml - Price conversion failed: " + ex);
							concreteChoiceXml.@price = lFormatPrice("0");
						}
					}
					else {
						concreteChoiceXml.@price = abstractChoiceXml.@price.toString();
					}

				}
				else if ((concreteChoice.CostInclusive == "true" || parentCostInclusive))
				{
					costInclusive = true;
					concreteChoiceXml.@costInclusive = "true";
					concreteChoiceXml.@price = abstractChoiceXml.@price.toString();
				}
				else
				{
					//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
					try
					{
						concreteChoiceXml.@price = lFormatPrice(lGetProductFixedPrice(concreteChoiceInfo.xmlNode.ProductCode.toString()));
					}
					catch(ex)
					{
						API.dbg("lGenerateChoiceXml - Price conversion failed: " + ex);
						concreteChoiceXml.@price = lFormatPrice("0");
					}
				}
				
				// CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
				//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
				if (concreteChoiceInfo.isNutritionalInfoAvailableInVML)
				{
					concreteChoiceXml.@showNutrition = "true";
				}
				
				concreteChoiceXml.@orderSaleType = orderSaleType;
				concreteChoiceXml.@image = concreteChoiceInfo.csoImages.largeImage;
				concreteChoiceXml.@defaultQuantity = concreteChoice.DefaultQuantity;

				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				if((csoCalculateEnergyInformation) &&
				   (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true) &&
				   (concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOExcludedInNutritionalAccount").@value.toString().toLowerCase() == "true"))
				{
					concreteChoiceXml.@excludedInNutritionalAccount = "true";				
				}
				
				//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
				if (concreteChoiceInfo.requireLegalDisclaimer) {
					// CSO-142 - Legal-Disclaimer by language - CR updated - 7423781
					concreteChoiceXml.@legalDisclaimerImage = PosNGKGetAlcoholicBeverageDisclaimerImage();
					concreteChoiceXml.@legalDisclaimerText = PosNGKGetAlcoholicBeverageDisclaimerText();
				}
				
				// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
				var allergensFound=[];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				allergensFound = lFindAllergens(allergensFound, concreteChoice.ProductCode.toString(), [], false, true, false, true);
				if (allergensFound.length>0) {
					concreteChoiceXml.@hasAllergens = "true";
				
					allergensFound = [];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allergensFound = lFindAllergens(allergensFound, concreteChoice.ProductCode, selectedAllergensList, false, true, false, false);
					if (allergensFound.length>0) {
						concreteChoiceXml.@hasSignaledAllergens = "true";
					}
				}
				
				// CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057 
				var timeRestrictionInfo = GetTimeRestrictionProductAvailability(concreteChoiceInfo.xmlNode.ProductCode, 0);
				if (timeRestrictionInfo != undefined || timeRestrictionInfo != null) {
					concreteChoiceXml.@isTimeRestricted = true;
					concreteChoiceXml.@timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod;
				}
				if (includeMultiChoice)
				{
					if ((concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "AllowMultiChoice") != undefined) &&
						(concreteChoiceInfo.xmlNode.CustomParameters.Parameter.(@name == "AllowMultiChoice").@value.toString() == "true"))
					{
						concreteChoiceXml.@isMultiChoice = "true";
					}
				}
				
				// CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
				iCountOptions++;
				if (concreteChoice.DefaultQuantity > 0)
				{
					hasAutoChoice = true;
				}
				
				//if (includeSize)
				//{
				//	includeSize = lGenerateSizeXML(concreteChoiceXml, concreteChoiceInfo.xmlNode, sizeIndex);
				//}
				
				//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
				//There is no need to add the choice size information if the upselling is at the beggining of the VML
				if (showMealSizeSelectionAtTheEnd)
				{
					// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
					lGenerateSizeXML(concreteChoiceXml, concreteChoiceInfo.xmlNode, sizeIndex, bAutoEVM);
				}
				
				//Limit the choice depth to be included in the xml to avoid infinite recursion
				if (currentRecursionDepth < maxRecursionDepth)
				{
					//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
					if (concreteChoiceInfo.hasComposition)
					{
						// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
						lGenerateCompositionXML(concreteChoiceXml, concreteChoiceInfo.xmlNode, costInclusive, currentRecursionDepth + 1, maxRecursionDepth, sizeIndex, includeSize, bybArray, isMakeMeal, bDisplayAutoChoice);
					}
				
					//CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
					if (concreteChoiceInfo.hasChoices)
					{
						for each(var innerAbstractChoice in concreteChoiceInfo.xmlNode.Choices.Component)
						{
							// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
							// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
							lGenerateChoiceXml(concreteChoiceXml, innerAbstractChoice, costInclusive, currentRecursionDepth + 1, maxRecursionDepth, sizeIndex, includeSize, bybArray, isMakeMeal, bDisplayAutoChoice, bAutoEVM);
						}
					}
				}

				// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
				concreteChoiceXml.@isGrillable = concreteChoiceInfo.isGrillable;
				
				// CSO-722 Show Grill On Sale with New Value Meal Loop/PDP in 5.15
				concreteChoiceXml.@showGrillOnSale = AvailabilityToShowGrillOnSale(concreteChoice.ProductCode);
				
				abstractChoiceXml.appendChild(concreteChoiceXml);
			}
		}
		
		// CSD-214 - Choice wall is not hiding sub-choices if all products are hidden it shows "out of stock"	
		var hasContent = abstractChoiceXml.Product.length() > 0 || abstractChoiceXml.Choice.length() > 0
		if(!hasContent)
			return;

		//CSO-1251 - NGK 5.17 - Active Promotions containing products/meals with Auto Choices that have extra items in the choice causing Kiosk to "hang"
		if(hasAutoChoice)
			VMHasAutoChoice = hasAutoChoice;
		
		// CSO-590 - NGK 5.13 Change Choices button issue for single auto choice - ACSI3062652
		if (!hasAutoChoice ||
			(bDisplayAutoChoice && iCountOptions > 1)) {
			valueMealXml.appendChild(abstractChoiceXml);
		}	
	
	}
	
	/**
	 * @brief - Get the choice group title
	 * @param - choiceGroup: The product database xml tag with the choice group
	 * @author - Vladimir Dobroff
	 */
	function lGetViewTitle(choiceGroup) {
		
		if (choiceGroup == null || choiceGroup == "") {
			return PosCSOI18nGetMessageJS("CSO_LOOPMEAL_TITLE");
		}
		
		var i18nKey = "CSO_LOOPMEAL_TITLE_" + choiceGroup.toUpperCase();
		
		var title = PosCSOI18nGetMessageJS(i18nKey);
		if (title == i18nKey) {
			return PosCSOI18nGetMessageJS("CSO_LOOPMEAL_TITLE");
		}
		
		return title;
	}

	/**
	 * @brief - Generates the fifth part of the xml that describes all the product options. Includes the available Choices, inner Choices and inner Components recursively.
	 * @param - valueMealXml: the partially generated value meal xml from the previous step
	 *        - xmlNode: a node contained inside product->SizeSelection->Size
	 *		  - sizeIndex: the root product size
	 *		  - bAutoEVM: auto EVM mode (CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM))
	 * @return - true if there is at least one size
	 * @author - Vladimir Dobroff
	 */
	function lGenerateSizeXML(valueMealXml, xmlNode, sizeIndex, bAutoEVM)
	{
		var numberOfSizes = 0;
	
		if (xmlNode.SizeSelection != null && xmlNode.SizeSelection != "undefined")
		{
			var sizesXml = new XML("<Sizes />");
		
			for each (var size in xmlNode.SizeSelection.Size)
			{
				var sizeXml = new XML("<Size />");
				
				sizeXml.@entry = size.@entry;
				sizeXml.@code = size.@code;
				
				// CSO-204 - NGK - APMEA (AU) - Time-based item configuration - 7754057 
				var timeRestrictionInfo = GetTimeRestrictionProductAvailability(size.@code, 0);
				if (timeRestrictionInfo != undefined || timeRestrictionInfo != null) {
					sizeXml.@isTimeRestricted = true;
					sizeXml.@timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod;
				}
				if (lIsValidSize(sizeIndex))
				{
					// CSO-455 - dimension pop-up price controls
					// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
					if ((lGetCSOUserInterfaceStringParameter("vml.sizeSelection.validatePrice", "true") == "false" &&
						 parseInt(size.@entry) != parseInt(sizeIndex)) ||
						parseInt(size.@entry) > parseInt(sizeIndex) ||
						bAutoEVM)
					{
						sizesXml.appendChild(sizeXml);
						
						numberOfSizes++;
					}
				}
			}
			
			if (numberOfSizes > 0)
			{
				valueMealXml.appendChild(sizesXml);
			}
		}
		
		return (numberOfSizes > 0);
		
	}	

	/**
	 * @brief - Check if the size exists inside the size list
	 * @param - size: the product SizeSelection->Size->entry attribute
	 * @return - true if the size is valid
	 * @author - Vladimir Dobroff
	 */
	function lIsValidSize(size)
	{
		if (validSizeList != null)
		{
			for (var i = 0; i < validSizeList.length; i++)
			{
				if (validSizeList[i] == size)
				{
					return true;
				}
			}
			
		}
	
		return false;
	}

	/**
	 * @brief - Generates a list of sizes for the given product
	 * @param - code: the product code
	 * @param - isMakeMeal: used by make it a meal to not include the item of the same size selection
	 * @param - itemQty: quantity of items of the selected item. 
	 * @author - Vladimir Dobroff
	 */	
	function lGenerateListOfValidSizeSelections(code, isMakeMeal, itemQty)
	{
		if (!lIsProductValid(code.toString())) 
		{
			return;
		}

		// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
		var prodInfo = csoProductInfo[code.toString()];
		var configProduct = prodInfo.xmlNode;
		var isMonopoly=prodInfo.isMonopoly;
		
		for each (sizeOption in configProduct.SizeSelection.Size)
		{
			// CSO-290 - NGK-Make Meal Functionality after Adding to Basket - 7913753
			if((!isMakeMeal)||(sizeOption.@code!=code)) {
				var bCanMakeMeal=false;
				// SQC-7017 - If I have an item in the cart and uses the "make meal" funcionality to change it into a VM (VM with default quantity of composition = 2, ) NGK displays a message informing that the selected size is not valid. Is this the correct behavior?
				if (typeof(PosChangeSizeSelectionWithList) == "function")  {
					bCanMakeMeal=true;
				}
				else {
					if(undefined!=itemQty) {
						// SQC-7393 - [NGK 5.11] Make it a Meal - Make it a Meal does not work for some products
						if(""!=sizeOption.@code.toString()) {
							// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
							var prodInfoVM = csoProductInfo[sizeOption.@code.toString()];
							// SQC-7427 - [NGK 5.11] Make it a Meal does not work using the attached environment
							if((null!=prodInfoVM)&&(undefined!=prodInfoVM) &&
									((!isMonopoly)||(isMonopoly && prodInfoVM.isMonopoly))) {
								var sizeProduct = prodInfoVM.xmlNode;
								for each (var component in sizeProduct.Composition.Component) {
									if(component.ProductCode==code) {
										if(itemQty>=component.DefaultQuantity) {
											bCanMakeMeal=true;
										}
										break;
									}
								}
							}
							else {
								API.dbg("NGK - PosNGKOrderItemJS.lGenerateListOfValidSizeSelections - invalid item ["+sizeOption.@code.toString()+"]");
							}
						}
						else {
							API.dbg("NGK - PosNGKOrderItemJS.lGenerateListOfValidSizeSelections - size selection ["+sizeOption.@entry.toString()+"] with no product code");
						}
					}
					else {
						bCanMakeMeal=true;
					}
				}

				//NPS-13828 - Sev 2- 1 store - Dimension Issue in Pilot NGK store - ACSI2122377
				//SDO-7747 - NGK stops working when trying to sell a product with no price configured
				if (bCanMakeMeal && lIsProductValid(sizeOption.@code.toString()) && lIsProductPriceNodeValid(sizeOption.@code.toString()))
				{
					var showDimension = sizeOption.@showDimensionToCustomer != "false";
					
					if (showDimension)
					{
						//Also validate the price
						// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
						if (lCheckProductSize(sizeOption.@code, code, bAutoEVM) == "Smaller" ||
							lCheckProductSize(sizeOption.@code, code, bAutoEVM) == "Error")
						{
							showDimension = false;
						}
					}
					
					if (showDimension)
					{
						validSizeList.push(sizeOption.@entry);
					}
				}
			}
		}
	}

	/**
	 * @brief - Retrieve the price per unit info from product if it exists
	 * @param - productCode: the product code
	 * @param - price: product price
	 * @since - CSO-1374 - POS-521 - NGK - Support for Price per Unit on PDP
	 * @author - Rafael Azevedo	 
	*/
	function lRetrievePricePerUnitInfo(productCode, price) {
		
		var result = { value: undefined };

		var pricePerUnitEnabled = lGetCSOUserInterfaceStringParameter("pricePerUnit.Enabled", "false").toLowerCase() == "true";
		if(!pricePerUnitEnabled || csoLoadCustomEnergyInformation)
			return result;
		
		var productInfo = csoProductInfo[productCode];
		if(productInfo && productInfo.xmlNode.@productClass != "PRODUCT")
			return result;

		var zero = new BigDecimal("0");
		var convert = function(value) { if(ltrim(rtrim(value)) == "") return new BigDecimal("-1"); try { return new BigDecimal(value); } catch(ex) { return new BigDecimal("-1");}}

		var orderSaleType = lGetOrderSaleType();
		var pricePerUnitParameter;
		switch(orderSaleType){
			case "EATIN":
				pricePerUnitParameter = "PriceperUnitEatin";
				break;
			case "TAKEOUT":
				pricePerUnitParameter = "PriceperUnitTakeout";
				break;
			case "OTHER":
				pricePerUnitParameter = "PriceperUnitOther";
		}


		var pricePerUnitStringValue = GetCustomParameter(productCode, pricePerUnitParameter, "NaN");
		var pricePerUnitNumberValue = convert(pricePerUnitStringValue);

		var baselineUnitOfMeasureStringValue = GetCustomParameter(productCode, "BaselineUnitofMeasure", "NaN");
		var baselineUnitOfMeasureNumberValue = convert(baselineUnitOfMeasureStringValue);

		if(pricePerUnitNumberValue <= 0) {
			
			var menuItemVolumeUnitStringValue = GetCustomParameter(productCode, "MenuItemVolumeUnit", "NaN");
			var menuItemVolumeUnitNumberValue = convert(menuItemVolumeUnitStringValue);

			if(menuItemVolumeUnitNumberValue > zero && baselineUnitOfMeasureNumberValue >= zero)
				pricePerUnitNumberValue = price.multiply(baselineUnitOfMeasureNumberValue).divide(menuItemVolumeUnitNumberValue, Rounding_Mode.ROUND_UP);
		}

		var labelUnit = productInfo.xmlNode.CustomParameters.Parameter.(@name == "LabelUnit").@value;;
		if(pricePerUnitNumberValue >= zero && baselineUnitOfMeasureNumberValue > zero && labelUnit != "") {
			result.value = pricePerUnitNumberValue;
			result.baselineUnitOfMeasure = baselineUnitOfMeasureStringValue;
			result.labelUnit = labelUnit;
		}

		return result;
	}
}

/**
 * @brief - Return whether the product is available to autoGrill
 * @param - code: the product code
 * @author - Leandro Pereira
 * @since - CSO-722 Show Grill On Sale with New Value Meal Loop/PDP in 5.15
 * @altered - CSD-183 [NGK5.17.1 - REGRESSION] - Grill screen isn't displayed automatically when a value meal is selected
*/
function AvailabilityToShowGrillOnSale(productCode) {	
	var showGrillOnSaleOnStore = lGetCSOUserInterfaceStringParameter("grill.showOnSale", "false").toLowerCase() == "true";
	var showGrillOnSaleOnProduct =  GetCustomParameter(productCode, "ShowGrillOnSale", "false").toLowerCase() == "true";
	return showGrillOnSaleOnStore && showGrillOnSaleOnProduct;
}

/**
 * @brief    - Modify the value meal message to include flavor selection
 * @author   - Vladimir Dobroff
 * @since    - CSO-36 - NGK v5.3 - Meal Loop Enhancements to Management/Display of Choices - 7160823
 * @modified - CSO-89 - NGK is not grouping choices when showMealSizeSelectionAtTheEnd is set to false
 *           - CSO-94 - Improve NGK performance when choices have 300 products grouped in flavors
 *           - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
 *           - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 */	
function lAddFlavors(eventXml) {
	//CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
	var showMealSizeSelectionAtTheEnd = (lGetCSOUserInterfaceStringParameter("showMealSizeSelectionAtTheEnd", "false") == "true");
	
	var language = sessionSale.get("LANGUAGE");
	var containFlavorSelection = false;

	if (eventXml.Sizes.Product.length() > 0)
	{
		for each (var sizeSelection in eventXml.Sizes.Product)
		{
			//Get all the choices in the product hierarchy
			var choices = sizeSelection..Choice;
			
			//The choice list iteration must be done in reverse order, so that choices that contain other choices works properly.
			//  Example: 
			//    <Choice code="10000001">
			//	    <Product code="7008">
			//	      <Choice code="10000050">
			//		    <Product code="8960"/>
			//In this case, if the products of the choice 10000001 are processed first, and the product 7008 is duplicated using the copy() command,
			//when processing the choice 10000050 it will not affect the duplicated node.
			for (var index = choices.length() - 1; index >= 0; index--)
			{
				var choice = choices[index];
			
				var choiceContainGroups = false;
				var groupedProductsDictionary = new Object();
				var choiceProductsDictionary = new Object();
				
				//Create a dictionary for fast access to the choice products
				for each (var choiceProduct in choice.Product)
				{
					choiceProductsDictionary[choiceProduct.@code.toString()] = choiceProduct;
				}
				
				for each (var choiceProduct in choice.Product)
				{
					//Check if the current product has already been grouped
					if (groupedProductsDictionary[choiceProduct.@code.toString()]) continue;

					// SWU-326 - NY Kiosk: NGK showing Inactive Products in Drink Choices
					if (!bShowProduct(choiceProduct.@code.toString())) continue;
					
					var choiceProductInfo = csoProductInfo[choiceProduct.@code.toString()];
					if (!choiceProductInfo) continue;
					var choiceProductNode = choiceProductInfo.xmlNode;
					if (!choiceProductNode) continue;
					
					//Check the choice product size configuration
					//If the product itself is not configured, do not attempt to group
					//CSO-72 - NGK may display a script error during the value meal loop if a size entry doesn't have a code attribute
					var validSize = false;
					for each (var size in choiceProductNode.SizeSelection.Size)
					{
						if (size.@code.toString() == choiceProductInfo.code)
						{
							validSize = true;
						}
					}
					if (!validSize) continue;
					
					//The flavor group will be created only if there are at least two products to be grouped
					var flavorNode = null;
					
					// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
					var flavorEnergyArray = new Array();

					// CSO-731 - 5.14 US Nutrition-"Adds" Prefix
					var flavorAddPrefix = false;
					
					for each (var size in choiceProductNode.SizeSelection.Size)
					{
						//CSO-93 - [NGKv5.3] Remove check for showDimensionToCustomer when grouping products inside a choice (Task 7160823 - FR1)
						//if (size.@showDimensionToCustomer == "false") continue;
						
						//Some databases may not have a code configured inside a size entry
						if (!size.@code.toString()) continue;
						
						//Skip the product own size, since it has already been checked
						if (size.@code.toString() == choiceProduct.@code.toString()) continue;
						
						//Skip products that are already grouped
						if (groupedProductsDictionary[size.@code.toString()]) continue;
						
						//Check if the size exist in the choice using the choice dictionary
						var sizeProduct = choiceProductsDictionary[size.@code.toString()];
						if (sizeProduct)
						{
							var duplicatedProduct = null;
						
							if (!flavorNode)
							{
								flavorNode = new XML("<Flavor/>");
								flavorNode.@name = choiceProductInfo.names[language] ? choiceProductInfo.names[language].csoGenericName : "";
								flavorNode.@image = choiceProduct.@image.toString();

								duplicatedProduct = choiceProduct.copy();
								duplicatedProduct.@sizeName = choiceProductInfo.names[language] ? choiceProductInfo.names[language].csoSizeName : "";
								
								flavorNode.appendChild(duplicatedProduct);

								// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
								// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
								if (((!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true)) &&
								    (choiceProductInfo.energyInfo) &&
								    (choiceProductInfo.energyInfo.EnergyInformation != ""))
								{
									flavorEnergyArray.push(choiceProductInfo.energyInfo.EnergyInformation);
								}	
								
								// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
								if ((csoCalculateEnergyInformation) &&
								    (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true) &&
								    (choiceProductInfo.energyInfo) &&
								    (choiceProductInfo.energyInfo.CalculatedEnergyInformation != ""))
								{
									flavorEnergyArray.push(choiceProductInfo.energyInfo.CalculatedEnergyInformation);
								}	

								// CSO-731 - 5.14 US Nutrition-"Adds" Prefix
								if ((csoCalculateEnergyInformation) && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))
								{
									var addPrefixParameter = choiceProductInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalAddPrefix");
									flavorAddPrefix = (addPrefixParameter && addPrefixParameter.@value.toString().toUpperCase() == "TRUE") ? true : false;
								}
								
								choiceProduct.@isGroupedByFlavor = "true";
								groupedProductsDictionary[choiceProduct.@code.toString()] = true;
							}
							
							var sizeProductInfo = csoProductInfo[size.@code.toString()];
							
							// CSO-731 - 5.14 US Nutrition-"Adds" Prefix
							if ((flavorAddPrefix) && (csoCalculateEnergyInformation) && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))
							{
								var addPrefixParameter = sizeProductInfo.xmlNode.CustomParameters.Parameter.(@name == "CSONutritionalAddPrefix");
								flavorAddPrefix = (addPrefixParameter && addPrefixParameter.@value.toString().toUpperCase() == "TRUE") ? true : false;
							}
							
							duplicatedProduct = sizeProduct.copy();
							duplicatedProduct.@sizeName = sizeProductInfo && sizeProductInfo.names[language] ? sizeProductInfo.names[language].csoSizeName : "";
							
							flavorNode.appendChild(duplicatedProduct);
							
							// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
							// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
							if (((!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true)) &&
							    (sizeProductInfo.energyInfo) &&
							    (sizeProductInfo.energyInfo.EnergyInformation != ""))
							{
								flavorEnergyArray.push(sizeProductInfo.energyInfo.EnergyInformation);
							}						
							
							// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
							if ((csoCalculateEnergyInformation) &&
							    (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true) &&
							    (sizeProductInfo.energyInfo) &&
							    (sizeProductInfo.energyInfo.CalculatedEnergyInformation != ""))
							{
								flavorEnergyArray.push(sizeProductInfo.energyInfo.CalculatedEnergyInformation);
							}						
							
							sizeProduct.@isGroupedByFlavor = "true";
							groupedProductsDictionary[size.@code.toString()] = true;
						}
					}
					
					if (flavorNode)
					{
						choiceContainGroups = true;
						containFlavorSelection = true;

						// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
						if (flavorEnergyArray.length > 0){
							// Retrieve the energy scale to be displayed as configured.
							var nutritionalInfoDisplayOnMainMenu = lGetCSOUserInterfaceStringParameter("nutritionalInfoDisplayOnMainMenu", "").toUpperCase();

							var flavorEnergy = GetEnergyInformationSorted(flavorEnergyArray);

							// If this retrieved parameter is not one of those values, it must not be considered.
							if ((nutritionalInfoDisplayOnMainMenu != "KCAL") &&	(nutritionalInfoDisplayOnMainMenu != "KJ")) continue;
							
							// SQC-7496 - [NGK 5.12] US Nutrition Enhancement - Problems in Energy Range exhibition in sub choice
							// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
							if (flavorEnergy != ""){
								if ((csoCalculateEnergyInformation) && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true))
									flavorEnergy = RoundEnergy("Flavor", flavorEnergy);
									
								// CSO-672 - US Nutrition :: Display the configured suffix when calculation is enabled
								flavorNode.@energy = FormatEnergyValue(flavorEnergy, "");
									
								// CSO-731 - 5.14 US Nutrition-"Adds" Prefix
								if ((flavorAddPrefix) || (!csoCalculateEnergyInformation) || (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") == true))
									flavorNode.@energy = PosCSOI18nGetMessageJS("NGK_MSG_NUTRITION_ADDTEXT", flavorNode.@energy);
							}
						}
						
						//Must be inserted in order to preserve the product order from product-db.xml
						choice.insertChildBefore(choiceProduct, flavorNode);
					}
				}
				
				//Remove the products that have been grouped by flavor
				if (choiceContainGroups)
				{
					//It is faster to recreate the list than delete the products individually by using E4X expressions
					//The following command is too expensive:
					//    delete choice.Product.(@code == "XXXX")[0];
					//Also, the following command does not work because the filter return a xml list:
					//    delete choice.Product.(@keep == "false")
					var choiceChildren = choice.*;
					choice.setChildren(new XMLList());
					
					for each (child in choiceChildren)
					{
						if (child.@isGroupedByFlavor != "true")
						{
							choice.appendChild(child.copy());
						}
					}
				}
			}
			
			if (containFlavorSelection && showMealSizeSelectionAtTheEnd)
			{
				//break the loop as there is no reason to proceed.
				//Since the size selection is at the end and at least one choice has flavors, 
				//the size options will be removed
				break;
			}
		}
	
		//If at least one flavor group has been created, disable the upselling at the end of the value meal loop
		//This is accomplished by removing the size options from the xml
		if (containFlavorSelection && showMealSizeSelectionAtTheEnd)
		{
			var gotProduct = false;
			for each(var prod in eventXml.Sizes.Product)
			{
				if(prod.@isSelected != undefined && prod.@isSelected == "true")
				{
					var copy = prod.copy();
					eventXml.Sizes.setChildren(new XMLList());
					eventXml.Sizes.appendChild(copy);
					gotProduct = true;
					break;
				}	
			}
			
			if(!gotProduct)
			{
				var product = eventXml.Sizes.Product[0].copy();
				eventXml.Sizes.setChildren(new XMLList());
				eventXml.Sizes.appendChild(product);
			}
		}
	}
}

/**
 * @brief    - Calculates and add the upselling price for each choice of the event xml whose cost is not included
 * @author   - Vladimir Dobroff
 * @since    - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
 * @modified - NGK 5.6 - CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
 *           - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
 */	
function lAddChoiceUpsellingPrice(eventXml) {
	//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
	//Even if the choice uplift price will not be shown it must be calculated and added to the value meal message.
	//Otherwise the total price box displayed at the top of the value meal screen will not be updated correctly by the UI
	//if (!showUpliftPrices)
	//{
	//	return;
	//}

	for each (product in eventXml.Sizes.Product)
	{
		var combinationRule = lGetProductPriceCombinationRule(product.@code.toString());
	
		//Get all choices in the product hierarchy
		var choices = product..Choice;
		
		if ((choices != null) && (choices != undefined) && (choices.length() > 0))
		{
			//Must be done in reverse order so that choices that contain other sub choices works properly
			//This way the parent choice reference product will take precedence over the sub choice
			for (var index = choices.length() - 1; index >= 0; index--)
			{
				var currentChoice  = choices[index];
				
				if (currentChoice.@costInclusive.toString() == "true" && currentChoice.@isForceUpCharge=="false") 
					continue;
				
				//Set the uselling price of the choice products as their regular price as a fallback
				lSetUpsellPriceAsRegularPrice(currentChoice);
			
				if (combinationRule == "RULE1")
				{
					//If the product is using the first rule, any reference product defined in the choices will be ignored.
					//Only the reference product defined in the base product will be checked.
					//If the choice contains the reference product defined in the base product, calculate the upsell price for this choice's products
					if (isCSOCombineToVMPriceDefined(product.@code.toString()))
					{
						var referenceCode = lGetCSOReferenceProduct(product.@code.toString());
						
						if (referenceCode)
						{
							//Check if the code exists inside the choice
							if (lCheckIfProductExistInChoice(referenceCode, currentChoice))
							{
								lSetChoicePricesBasedOnRule1(referenceCode, currentChoice);
							}
						}
					}
				}
				else if (combinationRule == "RULE2")
				{
					if (isCSOCombineToVMPriceDefined(currentChoice.@code.toString()))
					{
						var referenceCode = lGetCSOReferenceProduct(currentChoice.@code.toString());

						if (referenceCode)
						{
							lSetChoicePricesBasedOnRule2(referenceCode, currentChoice);
						}
					}
				}
				else if (combinationRule == "RULE3")
				{
					var choiceParentCode = currentChoice.parent().@code.toString();
					if (!choiceParentCode) continue;
					
					var productInfo = csoProductInfo[choiceParentCode];
					if (!productInfo) continue;
					
					var referenceCode = productInfo.xmlNode.Choices.Component.(ProductCode == currentChoice.@code.toString()).ReferenceProduct.toString();
					
					if (referenceCode)
					{
						lSetChoicePricesBasedOnRule3(referenceCode, currentChoice);
					}
				}
				else if (combinationRule == "RULE4")
				{
					var referenceCode = lGetCSOCCMBaseProduct(currentChoice.@code.toString());
					
					if (referenceCode)
					{
						lSetChoicePricesBasedOnRule4(referenceCode, currentChoice);
					}
				}
			}
		}
	}
	
	//Set the upselling price of the choice products as their regular price.
	//Used as a fallback in case none of the combination rules can be applied
	function lSetUpsellPriceAsRegularPrice(choice)
	{
		for each (var choiceProduct in choice.Product)
		{
			choiceProduct.@upsellingPrice = choiceProduct.@price.toString();
			choiceProduct.@upsellingPriceFlexibleChoice = choiceProduct.@price.toString();
		}
		for each (var subChoice in choice.Choice)
		{
			lSetUpsellPriceAsRegularPrice(subChoice);
		}
	}
	
	//Checks if a product code exists inside a choice and it's subchoices
	function lCheckIfProductExistInChoice(productCode, choice)
	{
		for each (var choiceProduct in choice.Product)
		{
			if (choiceProduct.@code.toString() == productCode) return true;
		}
		for each (var subChoice in choice.Choice)
		{
			if (lCheckIfProductExistInChoice(productCode, subChoice)) return true;
		}
		
		return false;
	}
	
	function lSetChoicePricesBasedOnRule1(referenceCode, choice)
	{
		var refPrice = new BigDecimal(lGetProductFixedPrice(referenceCode));
		
		for each (var choiceProduct in choice.Product)
		{
			var currentPrice = new BigDecimal("0.00");
			if (choiceProduct.@costInclusive.toString() == "true")
			{
				currentPrice = new BigDecimal(choiceProduct.@price);
			}
			else
			{
				currentPrice = new BigDecimal(lGetProductFixedPrice(choiceProduct.@code));
			}
			
			var suppressDiscount = currentPrice.compareTo(refPrice) < 0 && choice.@isForceUpCharge  == "true";
			var diff = lFormatPrice(currentPrice.subtract(refPrice).toString());
			choiceProduct.@upsellingPrice = suppressDiscount ? lFormatPrice("0.00") : diff;
			// CSO-766 - POS-362 - Customer Choice on NGK (8618134)
			choiceProduct.@upsellingPriceFlexibleChoice = currentPrice;
		}
		for each (var subChoice in choice.Choice)
		{
			//CSO-30 - NGK - Support for Sub Choices within the Meal Loop - 7098035
			//  - Fixed function name mistype when checking sub choices recursively
			lSetChoicePricesBasedOnRule1(referenceCode, subChoice);
		}
	}
	
	function lSetChoicePricesBasedOnRule2(referenceCode, choice)
	{
		var refPrice = new BigDecimal(lGetProductFixedPrice(referenceCode));
		refPrice = refPrice.add(new BigDecimal(lGetCSOProductAdditionalPrice(referenceCode)));
		
		for each (var choiceProduct in choice.Product)
		{
			var currentPrice = new BigDecimal("0.00");
			if (choiceProduct.@costInclusive.toString() == "true")
			{
				currentPrice = new BigDecimal(choiceProduct.@price);
			}
			else
			{
				currentPrice = new BigDecimal(lGetProductFixedPrice(choiceProduct.@code));
				currentPrice = currentPrice.add(new BigDecimal(lGetCSOProductAdditionalPrice(choiceProduct.@code)));
			}
			var suppressDiscount = currentPrice.compareTo(refPrice) < 0 && choice.@isForceUpCharge  == "true";
			var diff = lFormatPrice(currentPrice.subtract(refPrice).toString());
			choiceProduct.@upsellingPrice = suppressDiscount ? lFormatPrice("0.00") : diff;
			
			// CSO-766 - POS-362 - Customer Choice on NGK (8618134)
			choiceProduct.@upsellingPriceFlexibleChoice = currentPrice;
		}
		for each (var subChoice in choice.Choice)
		{
			lSetChoicePricesBasedOnRule2(referenceCode, subChoice);
		}
	}

	function lSetChoicePricesBasedOnRule3(referenceCode, choice)
	{
		var refPrice = new BigDecimal(lGetProductFixedPrice(referenceCode));
		refPrice = refPrice.add(new BigDecimal(lGetNewPosProductAdditionalPrice(referenceCode)));
		
		for each (var choiceProduct in choice.Product)
		{
			var currentPrice = new BigDecimal("0.00");
			if (choiceProduct.@costInclusive.toString() == "true")
			{
				currentPrice = new BigDecimal(choiceProduct.@price);
			}
			// force up charge is not applied to cost-inclusive = false products;
			else if(choiceProduct.@costInclusive.toString() != "true" && choice.@isForceUpCharge == "true")
			{
				choiceProduct.@upsellingPrice = lFormatPrice("0.00");
				continue;
			}
			else
			{
				currentPrice = new BigDecimal(lGetProductFixedPrice(choiceProduct.@code));
				currentPrice = currentPrice.add(new BigDecimal(lGetNewPosProductAdditionalPrice(choiceProduct.@code)));
			}
			
			//CSO-79 - NGK- Use Existing NP6 Suppress Discount Feature - 7376320
			//The supress discount rule is only applied if the choice cost is not included
			var diff = lFormatPrice(currentPrice.subtract(refPrice).toString());
			var suppressDiscount = currentPrice.compareTo(refPrice) < 0  && ((isNewPosSuppressDiscountEnabled() && choiceProduct.@costInclusive.toString() != "true") || choice.@isForceUpCharge == "true");
			choiceProduct.@upsellingPrice = suppressDiscount ? lFormatPrice("0.00") : diff;
			// CSO-766 - POS-362 - Customer Choice on NGK (8618134)
			choiceProduct.@upsellingPriceFlexibleChoice = currentPrice;
		}
		for each (var subChoice in choice.Choice)
		{
			lSetChoicePricesBasedOnRule3(referenceCode, subChoice);
		}
	}
	
	function lSetChoicePricesBasedOnRule4(referenceCode, choice)
	{
		var refPrice = new BigDecimal(lGetProductFixedPrice(referenceCode));
		refPrice = refPrice.add(new BigDecimal(lGetCSOProductAdditionalPrice(referenceCode)));
		
		for each (var choiceProduct in choice.Product)
		{
			var currentPrice = new BigDecimal("0.00");
			if (choiceProduct.@costInclusive.toString() == "true")
			{
				currentPrice = new BigDecimal(choiceProduct.@price);
			}
			else
			{
				currentPrice = new BigDecimal(lGetProductFixedPrice(choiceProduct.@code));
				currentPrice = currentPrice.add(new BigDecimal(lGetCSOProductAdditionalPrice(choiceProduct.@code)));
			}
		
			choiceProduct.@upsellingPrice = lFormatPrice((currentPrice.subtract(refPrice)).toString());
			// CSO-766 - POS-362 - Customer Choice on NGK (8618134)
			choiceProduct.@upsellingPriceFlexibleChoice = currentPrice;
		}
		for each (var subChoice in choice.Choice)
		{
			lSetChoicePricesBasedOnRule4(referenceCode, subChoice);
		}
	}
}

/**
 * @brief    - Verifies if a choice is configured with the tag FORCE_UPCHARGE
 * @author   - Rafael Azevedo
 * @since    - CSO-1333	- POS-353 - CR - Automatic increase of EVM price - Kiosk Implementation 
 */	
function isForceUpCharge(component){
	
	var code = component.ProductCode.toString();
	var refCode = component.ReferenceProduct.toString();
	var costInclusive = component.CostInclusive.toString();
	var chargeThreshold = Number(component.ChargeThreshold.toString());

	if(!code || !refCode || !costInclusive || costInclusive != "true" || !chargeThreshold || chargeThreshold == 0)
		return false;

	var productInfo = csoProductInfo[code];

	if(!productInfo)
		return false;

	var product = productInfo.xmlNode;
	
	if(!product || !product.Tags || product.Tags.Tag.length() == 0)
		return false;
	
	if(product.Tags.(Tag == "FORCE_UPCHARGE").length() == 0)
		return false;
	
	return true;
}


/**
 * @brief    - Calculates the combined price of each size option and replace it in the event xml
 * @author   - Vladimir Dobroff
 * @since    - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
 * @modified - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
 */	
function lReplaceSizePriceByCombinedPrice(eventXml) {
	for each (product in eventXml.Sizes.Product)
	{
		var productInfo = csoProductInfo[product.@code.toString()];
	
		if (productInfo)
		{
			var price = lGetProductCombinedPrice(product.@code.toString(), undefined, product.PreSelected);
			var formattedPrice = lFormatPrice(price);
			
			product.@price = formattedPrice;
		}
	}
}

/**
 * @brief    - Modify the sizes price based on the uplift rule (price = product price - base product price )
 * @param    - eventXml: the last step of the value meal xml with all the possible products
 * @author   - Vladimir Dobroff
 * @modified - CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
 *           - Renamed the function for clarification
 *           - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
 */	
function lAddSizeUpsellingPrice(eventXml) {
	var basePrice = new BigDecimal("0.00");

	for each (product in eventXml.Sizes.Product)
	{
		if (product.@isSelected == "true")
		{
			try
			{
				basePrice = new BigDecimal(product.@price);
			}
			catch(ex)
			{
				basePrice = new BigDecimal("0.00");
			}
		}
	}
	
	for each (product in eventXml.Sizes.Product)
	{
		if (product.@isSelected != "true")
		{
			var price = new BigDecimal("0.00");
			
			try
			{
				price = new BigDecimal(product.@price);
			}
			catch(ex)
			{
				price = new BigDecimal("0.00");
			}
			
			// CSO-455 - dimension pop-up price controls
			// Upselling prices should also verify the suppress discount parameter
			if (lGetCSOUserInterfaceStringParameter("vml.sizeSelection.displayNegativePrice", "true") == "true" ||
				price.compareTo(basePrice) > 0)
			{
				product.@upsellingPrice = lFormatPrice(price.subtract(basePrice).toString());
			}
			else
			{
				product.@upsellingPrice = lFormatPrice("0.00");
			}
		}
	}		
}

/**
 * @brief    - Check a product size in comparison to another product (productCode should exist inside the baseProduct SizeSelection xml node).
 * @param    - productCode
 * @param    - baseProductCode
 * @param    - bAutoEVM: auto EVM mode (CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM))
 * @return   - "Larger" - If productCode is larger than baseProductCode.
 *		     - "Equal" - If productCode is equal to baseProductCode.
 *           - "Smaler" - If productCode is smaller than baseProductCode.
 *           - "Error" - If at least one of the products is invalid
 * @author   - Vladimir Dobroff
 * @modified - CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
 */	
function lCheckProductSize(productCode, baseProductCode, bAutoEVM)
{
	if (!lIsProductValid(productCode) || !lIsProductValid(baseProductCode))
	{
		API.dbg("NGK - PosNGKOrderItemJS.lCheckProductSize - Product does not exist or is not avaialble - ProductCode: " + productCode + " BaseProductCode: " + baseProductCode);
		return "Error";
	}
	
	var productConfig = csoProductInfo[productCode.toString()].xmlNode;
	var baseProductConfig = csoProductInfo[baseProductCode.toString()].xmlNode;
	
	// CSO-455 - dimension pop-up price controls
	// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
	// SQS-193 [NGK5.17 - Active Mode] Kiosk does not group products configured with Dimension/ Flavor Group
	var gettingFromPromotion = sessionSale.get("GET_VALUE_MEAL_FROM_PROMOTION");
	
	if (gettingFromPromotion == "true" || (bAutoEVM)||(lGetCSOUserInterfaceStringParameter("vml.sizeSelection.validatePrice", "true") == "false"))
	{
		return "Ignore";
	}
	
	if (GLOBAL_NGK_UPLIFT_BY_PRICE_INSTEAD_OF_SIZE)
	{
		// CSO-103 - Upselling price calculation enhancement - 7471603
		var baseProductPrice = new BigDecimal(lGetProductCombinedPrice(baseProductConfig.ProductCode));
		
		// CSO-103 - Upselling price calculation enhancement - 7471603
		if ((new BigDecimal(lGetProductCombinedPrice(productConfig.ProductCode))).compareTo(baseProductPrice) > 0)
		{
			return "Larger";
		}
		// CSO-103 - Upselling price calculation enhancement - 7471603
		else if ((new BigDecimal(lGetProductCombinedPrice(productConfig.ProductCode))).compareTo(baseProductPrice) == 0)
		{
			return "Equal";
		}
		else
		{
			return "Smaller"
		}
	}
	else
	{
		var baseProductSize = 0;
		
		for each (sizeOption in baseProductConfig.SizeSelection.Size)
		{
			if (baseProductCode == sizeOption.@code)
			{
				baseProductSize = sizeOption.@entry;
			}
		}
		
		for each (sizeOption in baseProductConfig.SizeSelection.Size)
		{
			if (productCode == sizeOption.@code)
			{
				if (parseInt(sizeOption.@entry) > baseProductSize)
				{
					return "Larger";
				}
				else if (parseInt(sizeOption.@entry) == baseProductSize)
				{
					return "Equal";
				}
				else
				{
					return "Smaller";
				}
			}
		}
	}
	
	return "Error";
}

/**
 * @brief    - Get the number of valid size selections (ignore items with showDimensionToCustomer == false)
 * @param    - code: the product code
 * @param    - bAutoEVM: auto EVM mode (CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM))
 * @author   - Vladimir Dobroff
 * @modified - Jorge Olimpia
 * @since    - SQC-6708 - NGK 5.10 - Script error when adding CYT PRE_BUILT products to the cart.
 */	
function lGetNumberOfValidSizeSelections(code, bAutoEVM) {
	if (!lIsProductValid(code.toString())) {
		return 0;
	}

	var configProduct = csoProductInfo[code.toString()].xmlNode;
	var num = 0;
	
	for each (sizeOption in configProduct.SizeSelection.Size)
	{
		//NPS-13828 - Sev 2- 1 store - Dimension Issue in Pilot NGK store - ACSI2122377
		//SDO-7747 - NGK stops working when trying to sell a product with no price configured
		if (lIsProductValid(sizeOption.@code.toString()) && lIsProductPriceNodeValid(sizeOption.@code.toString()))
		{
			var showDimension = sizeOption.@showDimensionToCustomer != "false";
			
			if (showDimension)
			{
				//Also validate the price
				// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
				if (lCheckProductSize(sizeOption.@code, code, bAutoEVM) == "Smaller" ||
					lCheckProductSize(sizeOption.@code, code, bAutoEVM) == "Error")
				{
					showDimension = false;
				}
			}
			
			if (showDimension)
			{
				num++;
			}
		}
	}
	return num;
}

/**
 * @brief - Check if the product code is a valid product in the csoProductInfo list.
 * @param - productCode: product code
 * @since - SWU-326 - NY Kiosk: NGK showing Inactive Products in Drink Choices
 * @author - Vivian Cury
 * @changed - CSO-608 - Consider new NewPOS parameter "inactivateProductsWithInactiveIngredients" on the product load 
 */	
function bShowProduct(productCode)
{
	if (!productCode || 
		!csoProductInfo[productCode] || 
		!csoProductInfo[productCode].xmlNode ||
		csoProductInfo[productCode].xmlNode.@statusCode != "ACTIVE" ||
		!csoProductInfo[productCode].isValid ||
		csoProductInfo[productCode].xmlNode.@salable != "true" ||
		!PosCheckIfPriceNodeIsValid(csoProductInfo[productCode].xmlNode) ||
		!PosCheckIfTaxEntryIsValid(csoProductInfo[productCode].xmlNode))
	{
		return false;
	}
	
	return true;
}

/**
 * @brief  - Show an alert pop-up.
 * @return - true
 * @param  - title: a text or a i18n key that represents the title.
 * @param  - message: a text or a i18n key that represents the message.
 * @param  - labelOkButton: a text or a i18n key that represents the OK button's label.
 * @author - Jorge Olimpia
 * @since  - CSO-261 - NGK - ADA - Magnifier implementation - 7736790
 */
function PosNGKShowSimpleMessagePopUp(title, message, labelOkButton) {	
	var alertTitle = PosCSOI18nGetMessageJS(title);
	var alertMessage = PosCSOI18nGetMessageJS(message);
	var alertLabelOkButton = PosCSOI18nGetMessageJS(labelOkButton);
	
	var eventXml = new XML('<Event type="ASYNC" name="DLG_POPUP_SIMPLE_MESSAGE"/>');
	eventXml.title = alertTitle;
	eventXml.message = alertMessage;
	eventXml.labelOkButton = alertLabelOkButton;
	eventXml.AnalyticsInfo = "ScreenNameKey:" + title + ";EventLabelKey:"+ labelOkButton;

	PosSendUICmd(eventXml.toXMLString());
	
	return true;
}

/**
 *
 * @brief - Get the custom parameter
 * @return - 
 * @author - MY
 * @since - CSO-256 - NGK - Customization of Products - 7848282
 */
function GetCustomParameter(productCode, CustParam, DefaultValue) {
	var productInfo = csoProductInfo[productCode];
	var retParam=DefaultValue;

	if (!productInfo) {
		API.dbg("CSO - [GetCustomParameter] Product "+productCode+" not found");
	}
	else {
		if (productInfo.xmlNode != null && productInfo.xmlNode != undefined) {
			if(productInfo.xmlNode.CustomParameters.Parameter.(@name == CustParam).length() > 0) {
				retParam = productInfo.xmlNode.CustomParameters.Parameter.(@name == CustParam).@value.toLowerCase();
				API.dbg("CSO - [GetCustomParameter] ["+CustParam+"]->["+retParam+"]");
			}
		}
	}
	return(retParam);
}

/**
 *
 * @brief - Look for the product in the arrayPortionType
 * @param  - arrayPortionType: array of products codes and portion type (pipe separated)
 * @param  - code: product code to look for
 * @return - the index of the product in the array or -1 if not found
 * @author - MY
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function FindPortionType(arrayPortionType, code) {
	var iIndex=-1;
	if(arrayPortionType) {
		for(iIndex=arrayPortionType.length; iIndex--; ) {
			if((arrayPortionType[iIndex])&&(arrayPortionType[iIndex].split("|")[0]==code)) {
				break;
			}
		}
	}
	return (iIndex);
}

/**
 * @brief  - This function adds or removes a given quantity of a portion based ingredient during the full grill process.
 * @param  - oper: Operation that will be made.
 * @param  - productCode: Product code that will be grilled.
 * @param  - xmlView: XML containing a grill view.
 * @param  - absGrillQty
 * @param  - saveToString: true or false
 * @param - arrayPortionType: array of portion based items (CSO-546)
 * @author - Jorge Olimpia
 * @since  - SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
 * @modified - SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
 * @modified - SQC-9038 - Grills not applied correctly, using "Auto Grill", when default quantity of composition or choice is greater than 1
 */
function PosNGKDoGrillAddRemovePortionBasedProduct(oper, productCode, xmlView, absGrillQty, saveToString, arrayPortionType) {
	var grillItem = xmlView.Component.(@isSelected == "true").Item.(Number(@code) == Number(productCode));
	var hasRegular = (parseInt(grillItem.@maxQty) > 1) && (grillItem.@type == "CanAdds");
	
	var componentIndex = xmlView.Component.(@isSelected == "true").@index;
	
	// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	var portionIndex=FindPortionType(arrayPortionType, productCode.toString()+componentIndex);
	
	var portionType;
	if(portionIndex>=0) {
		portionType=Number(arrayPortionType[portionIndex].split("|")[1]);
	}
	else {
		portionType = lGetPortionType2(grillItem.@curQty, grillItem.@defQty, grillItem.@modifiers, grillItem.@type, grillItem.@maxQty);
	}
	
	switch(portionType) {
			
		// None
		case 0:
			lDoNoneAddRemoveProduct(oper, productCode, grillItem.@type, hasRegular);
			break;
			
		// Light
		case 1:
			lDoLightAddRemoveProduct(oper, productCode, grillItem.@type);
			break;
		
		// Regular
		case 2:
			lDoRegularAddRemoveProduct(oper, productCode, grillItem.@type);
			break;
		
		// Extra
		case 3:
			lDoExtraAddRemoveProduct(oper, productCode, grillItem.@type, hasRegular);
			break;
			
		default:
			return false;
	}
	
	// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
	// update the portion type array
	if (oper == "-" || oper == "m") {
		portionType-=absGrillQty;
	}
	else {
		portionType+=absGrillQty;
	}

	if(arrayPortionType) {
		if(portionIndex>=0) {
			arrayPortionType[portionIndex]=productCode.toString()+componentIndex+"|"+portionType;
		}
		else {
			// add new entry
			arrayPortionType.push(productCode.toString()+componentIndex+"|"+portionType);
		}
	}
	
	return true;
	
	function lDoNoneAddRemoveProduct(oper, productCode, type, hasRegular) {
		var showLightPortion = lGetCSOUserInterfaceStringParameter("showLightPortion", "true") == "true";		

		if (oper == "-" || oper == "m") {
			return false;
			
		} else if ((oper == "+" || oper == "p") && type == "Composition") {
			if (showLightPortion)
			{
				// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
				if (saveToString)
				{
					// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
					if(typeof(PosDoGrillListUnit) == "function") {
						GLOBAL_GRILL_STRING += ("+,-1," + productCode + "|0,1," + productCode + "|");
					}
					else {
						GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|0,1," + productCode + "|");
					}
				}
				else
				{
					PosDoGrillProduct("c", "-1", productCode);
					PosDoGrillProduct("0", "1", productCode);
				}
				
				if (parseInt(absGrillQty) > 1) {
					absGrillQty--;
					lDoLightAddRemoveProduct(oper, productCode, type);
				}
			}
			else
			{
				// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
				if (saveToString)
				{
					// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
					if(typeof(PosDoGrillListUnit) == "function") {
						GLOBAL_GRILL_STRING += ("+,-1," + productCode + "|");
					}
					else {
						GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|");
					}
				}
				else
				{
					PosDoGrillProduct("c", "-1", productCode);
				}
				
				if (parseInt(absGrillQty) > 1) {
					absGrillQty--;
					lDoRegularAddRemoveProduct(oper, productCode, type);
				}
			}
		} else if ((oper == "+" || oper == "p") && 
				   ((type == "Comment") || (type == "CanAdds" && (sessionSale.get("IS_NGK") != "true")))) {
			// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
			if (saveToString)
			{
				GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|+,-1," + productCode + "|0,1," + productCode + "|");
			}
			else
			{
				PosDoGrillProduct("c", "-1", productCode);
				PosDoGrillProduct("+", "-1", productCode);
				PosDoGrillProduct("0", "1", productCode);
			}
		} else if ((oper == "+" || oper == "p") && type == "CanAdds") {
			if((hasRegular) && (!showLightPortion))
			{
				// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
				if (saveToString)
				{
					// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
					if(typeof(PosDoGrillListUnit) == "function") {
						GLOBAL_GRILL_STRING += ("+,-1," + productCode + "|");
					}
					else {
						GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|+,-1," + productCode + "|");
					}
				}
				else
				{
					PosDoGrillProduct("c", "-1", productCode);
					PosDoGrillProduct("+", "-1", productCode);
				}
				
				if (parseInt(absGrillQty) > 1) {
					absGrillQty--;
					lDoRegularAddRemoveProduct(oper, productCode, type);
				}
			}
			else 
			{
				// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
				if (saveToString)
				{
					// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
					if(typeof(PosDoGrillListUnit) == "function") {
						GLOBAL_GRILL_STRING += ("+,-1," + productCode + "|0,1," + productCode + "|");
					}
					else {
						GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|+,-1," + productCode + "|0,1," + productCode + "|");
					}
				}
				else
				{
					PosDoGrillProduct("c", "-1", productCode);
					PosDoGrillProduct("+", "-1", productCode);
					PosDoGrillProduct("0", "1", productCode);
				}
				
				if (parseInt(absGrillQty) > 1) {
					absGrillQty--;
					lDoLightAddRemoveProduct(oper, productCode, type);
				}
			}
		} else {
			return false;
		}
		
		return true;
	}
	
	function lDoLightAddRemoveProduct(oper, productCode, type) {
	
		if (oper == "-" || oper == "m") {
			// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
			if (saveToString)
			{
				// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
				if(typeof(PosDoGrillListUnit) == "function") {
					GLOBAL_GRILL_STRING += ("0,1," + productCode + "|-,-1," + productCode + "|");
				}
				else {
					GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|0,1," + productCode + "|-,-1," + productCode + "|");
				}
			}
			else
			{
				PosDoGrillProduct('c','-1',productCode);
				PosDoGrillProduct("0", "1", productCode);
				PosDoGrillProduct("-", "-1", productCode);
			}
		} else if ((oper == "+" || oper == "p") && (type == "Composition")) {
			// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
			if (saveToString)
			{
				// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
				if(typeof(PosDoGrillListUnit) == "function") {
					GLOBAL_GRILL_STRING += ("0,1," + productCode + "|");
				}
				else {
					GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|0,1," + productCode + "|");
				}
			}
			else
			{
				PosDoGrillProduct("c", "-1", productCode);
				PosDoGrillProduct("0", "1", productCode);
			}
			
			if (parseInt(absGrillQty) > 1) {
				absGrillQty--;
				lDoRegularAddRemoveProduct(oper, productCode, type);
			}
			
		} else if ((oper == "+" || oper == "p") && (type == "CanAdds" ||  type == "Comment")) {
			// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
			if (saveToString)
			{
				// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
				if(typeof(PosDoGrillListUnit) == "function") {
					GLOBAL_GRILL_STRING += ("0,1," + productCode + "|");
				}
				else {
					GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|0,1," + productCode + "|+,-1," + productCode + "|");
				}
			}
			else
			{
				PosDoGrillProduct('c','-1',productCode);
				PosDoGrillProduct("0", "1", productCode);
				PosDoGrillProduct("+", "-1", productCode);
			}
			
			if (parseInt(absGrillQty) > 1) {
				absGrillQty--;
				lDoRegularAddRemoveProduct(oper, productCode, type);
			}
			
		} else {
			return false;
		}
		
		return true;
	}
	
	function lDoRegularAddRemoveProduct(oper, productCode, type) {
		
		if (oper == "-" || oper == "m") {
			var showLightPortion = lGetCSOUserInterfaceStringParameter("showLightPortion", "true") == "true";
			if (showLightPortion)
			{
				// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
				if (saveToString)
				{
					// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
					if(typeof(PosDoGrillListUnit) == "function") {
						GLOBAL_GRILL_STRING += ("0,1," + productCode + "|");
					}
					else {
						GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|0,1," + productCode + "|");
					}
				}
				else
				{
					PosDoGrillProduct("c", "-1", productCode);
					PosDoGrillProduct("0", "1", productCode);
				}
				
				if (parseInt(absGrillQty) > 1) {
					absGrillQty--;
					lDoLightAddRemoveProduct(oper, productCode, type);
				}
			}
			else
			{
				// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
				if (saveToString)
				{
					GLOBAL_GRILL_STRING += ("-,-1," + productCode + "|");
				}
				else
				{
					PosDoGrillProduct("-", "-1", productCode);
				}
			}
		} else if (oper == "+" || oper == "p") {
			// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
			if (saveToString)
			{
				GLOBAL_GRILL_STRING += ("+,-1," + productCode + "|");
			}
			else
			{
				PosDoGrillProduct("+", "-1", productCode);
			}
		} else {
			return false;
		}
		
		return true;
	}
	
	function lDoExtraAddRemoveProduct(oper, productCode, type, hasRegular) {
	
		if ((oper == "-" || oper == "m") && (type == "Composition" || type == "Comment")) {
			// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
			if (saveToString)
			{
				GLOBAL_GRILL_STRING += ("-,-1," + productCode + "|");
			}
			else
			{
				PosDoGrillProduct("-", "-1", productCode);
			}
			
			if (parseInt(absGrillQty) > 1) {
				absGrillQty--;
				lDoRegularAddRemoveProduct(oper, productCode, type);
			}
		}
			
		else if ((oper == "-" || oper == "m") && type == "CanAdds") {
			// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
			if (saveToString)
			{
				// CSO-545 - POS-321 - Kiosk CYT-Ingredient Group Charge Threshold - 8464926
				if(typeof(PosDoGrillListUnit) == "function") {
					GLOBAL_GRILL_STRING += ("-,-1," + productCode + "|");
				}
				else {
					GLOBAL_GRILL_STRING += ("c,-1," + productCode + "|+,-1," + productCode + "|");
				}
			}
			else
			{
				PosDoGrillProduct('c','-1',productCode);
				PosDoGrillProduct("+", "-1", productCode);
			}
			
			if(hasRegular == false)
			{
				// SDO-10604 - NGK 5.10 - NGK Performance when adding CYT products to the cart is still not satisfactory
				if (saveToString)
				{
					GLOBAL_GRILL_STRING += ("0,1," + productCode + "|");
				}
				else
				{
					PosDoGrillProduct("0", "1", productCode);
				}
				
				if (parseInt(absGrillQty) > 1) {
					absGrillQty--;
					lDoLightAddRemoveProduct(oper, productCode, type);
				}
			}
			
			if (parseInt(absGrillQty) > 1) {
				absGrillQty--;
				lDoRegularAddRemoveProduct(oper, productCode, type);
			}
			
		} else {
			return false;
		}
		
		return true;
	}
}

/**
 *
 * @brief - Test if the product can be converted to meal and return a list of possible VM
 * @param - productInfo: product information from csoProductInfo
 * @param - qty
 * @param - isMonopoly: If the item is monopoly, non monopoly VM items must be filtered (CSO-394)
 * @return - list of upgradable items
 * @author - MY
 * @since - CSO-290 - NGK-Make Meal Functionality after Adding to Basket - 7913753
 */
function lListMakeMeal(productInfo, qty, isMonopoly) {
	var bCanMakeMeal=false;

	// check if product type is PRODUCT and it has at least one valid size selection that is a value meal
	if("PRODUCT"==productInfo.@productClass) {
		for each(var sizeSelection in productInfo.SizeSelection.Size) {
			if(("false"!=sizeSelection.@showDimensionToCustomer.toLowerCase())&&(productInfo.ProductCode!=sizeSelection.@code)) {
				var vmProductInfo=csoProductInfo[sizeSelection.@code.toString()];
				if((null!=vmProductInfo)&&(undefined!=vmProductInfo)) {
					var mealProductInfo = vmProductInfo.xmlNode;
					// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
					// if item is monopoly only VM monopolys are accepted
					if(("VALUE_MEAL"==mealProductInfo.@productClass)&&("ACTIVE"==mealProductInfo.@statusCode) &&
							((!isMonopoly) || (isMonopoly && vmProductInfo.isMonopoly))) {
						// SQC-7017 - If I have an item in the cart and uses the "make meal" funcionality to change it into a VM (VM with default quantity of composition = 2, ) NGK displays a message informing that the selected size is not valid. Is this the correct behavior?
						if (typeof(PosChangeSizeSelectionWithList) == "function")  {
							bCanMakeMeal=true;
						}
						else {
							// look for the selected item in the possible upgrade item composition
							for each (var componentItem in mealProductInfo.Composition.Component) {
								if(componentItem.ProductCode == productInfo.ProductCode) {
									// test if there are enough items to upsize
									if(qty>=componentItem.DefaultQuantity) {
										bCanMakeMeal=true;
									}
									break;
								}
							}
							if(bCanMakeMeal) {
								break;
							}
						}
					}
				}
				else {
					API.dbg("[lListMakeMeal] upgrade product ["+sizeSelection.@code+"] not found");
				}
			}
		}
	}
	API.dbg("[lListMakeMeal] product["+productInfo.ProductCode+"] can upgrade["+bCanMakeMeal+"]");
	return bCanMakeMeal;
}

/**
 *
 * @brief - Test if the product can be converted to meal
 * @param - productInfo: product information from csoProductInfo
 * @return - true if can be converted to VM and false if not
 * @author - MY
 * @since - CSO-290 - NGK-Make Meal Functionality after Adding to Basket - 7913753
 */
function lCanMakeMeal(prodCode, qty) {
	var productInfo = csoProductInfo[prodCode.toString()];
	// CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
	return (lListMakeMeal(productInfo.xmlNode, qty, productInfo.isMonopoly));
}

/**
 *
 * @brief - Get the grill list from the kiosk view xml (recursively)
 * @param - productView: product information from kioskview
 * @param - qtyItemInCart: Quantity of the item in cart (may be different from the qty of the item in view for grouped items)
 * @return - 
 * @author - MY
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 * @altered - CSO-745 - POS-340 - Order Basket Redesign
 * @modified - SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
 */

function lListGrill (productView, qtyItemInCart, itemIndex) {	

	var productGrill=new XML('<Product code="'+productView.@code+'" qty="' + productView.@qty + '" solvedChoice="' + productView.@solvedChoice + '" sellSequence="'+ productView.@sellSequence + '"  />');
	// CSO-745 - POS-340 - Order Basket Redesign 
	if (qtyItemInCart) {
		productGrill.@qtyCartItem = qtyItemInCart;
	}
	if ("true" == productView.@hasAllergens.toLowerCase()) {
		productGrill.@hasAllergens = "true";
	}
	if ("true" == productView.@hasSignaledAllergens.toLowerCase()) {
		productGrill.@hasSignaledAllergens = "true";
	}
	if (productView.Grill.length() > 0) {
		var appliedGrillList = [];
		for each (var grill in productView.Grill) {
			var grillItem = new XML('<Grill/>');
			grillItem.@code = grill.@code;
			grillItem.@modifiers = grill.@modifiers;
			grillItem.@defQty = grill.@defQty;
			grillItem.@qty = grill.@npQty;
			grillItem.@maxQty = grill.@maxQty;
			grillItem.@minQty = grill.@minQty;
			grillItem.@npQty = grill.@npQty;
			grillItem.@npQtyMult = grill.@npQtyMult;
			grillItem.@text = grill.@text;
			grillItem.@unitPrice = grill.@unitPrice;
			grillItem.@unitTax = grill.@unitTax;
			grillItem.@totalPrice = grill.@totalPrice;
			grillItem.@totalTax = grill.@totalTax;
			grillItem.@isCYT = grill.@isCYT;
			grillItem.@name = grill.@name;
			grillItem.@cartImage = grill.@cartImage;
			grillItem.@origQty = grill.@origQty;
			grillItem.@deliveryEarlyQty = grill.@deliveryEarlyQty;
			grillItem.@solvedChoice = grill.@solvedChoice;
			grillItem.@isSingleAutoChoice = grill.@isSingleAutoChoice;
			grillItem.@grillSequence = grill.@grillSequence;
			// CSO-1162 - Germany v30 Adoption - {NGK 5.17 - wrong price in customize screen}
			grillItem.@parentQty = qtyItemInCart;
			
			productGrill.appendChild(grillItem);

			//"INPROGRESS:99900006,4,0;90000042,1,1|APPLIED:99900006,2,0;90000042,1,0"
			var grillStr = grill.@code + ',' + grill.@npQty + ',' + grill.@modifiers;
			appliedGrillList.push(grillStr);
		}
		
		productGrill.@appliedGrills = appliedGrillList.join(";");
	}

	// do it for all subitems
	for each (var subitem in productView.Product) {
		// SQC-10033 - [Kiosk 5.16 - Order Basket] Incorrect grill after edit Family Box
		var subItemQty = Number(subitem.@qty);        
		if (subItemQty != 1)
		{
			subitem.@qty = "1";
		}
		
		for (var u = 0; u < subItemQty/qtyItemInCart; u++)
		{
			var grillList = lListGrill(subitem, qtyItemInCart);
			if (grillList) {
				productGrill.appendChild(grillList);
			}
		}
	}
	
	return productGrill;
}

/**
 *
 * @brief - Get the grill info for the first CYT found (a VM can't have more than 1 CYT)
 * @param - productView: item information from kioskview
 * @return - 
 * @author - MY
 * @since - CSO-745 - POS-340 - Order Basket Redesign
 *          CSO-819 - Problem in change choice operation for CYT VM
 */
function lListCYTGrill (productView, itemIndex) {
/*
    <Item voided="false" qtyPromo="0" currentSelected="false" indexInternal="0" isCYT="true" customizable="true" barcode="" isRedeemable="false" canIncrease="true" canMakeMeal="true" index="0" totalKCAL="390" hasNutritionInfo="true">
      <Product qty="1" npQty="1" npQtyMult="1" code="99900080" unitPrice="3.60" unitTax="0.24" totalPrice="3.6" totalTax="0.24" isCYT="true" name="CYT v2" cartImage="" origQty="1" deliveryEarlyQty="0" solvedChoice="" isSingleAutoChoice="false" grillSequence="">
        <Product qty="1" npQty="1" npQtyMult="1" code="99900103" unitPrice="1.20" unitTax="0.20" totalPrice="0.00" totalTax="0.00" isCYT="true" name="Buttered Toasted Artisan Roll" cartImage="" origQty="1" deliveryEarlyQty="0" solvedChoice="99900082" isSingleAutoChoice="false" grillSequence=""/>
        <Grill modifiers="0" defQty="0" modQty="1" qty="1" maxQty="5" minQty="0" npQty="1" npQtyMult="1" text="- Ajouter 1 American Cheese" code="99900084" unitPrice="0.30" unitTax="0.05" totalPrice="0.00" totalTax="0.00" isCYT="true" name="American Cheese" cartImage="" origQty="1" deliveryEarlyQty="0" solvedChoice="" isSingleAutoChoice="false" grillSequence=""/>
        <Grill modifiers="1" defQty="0" qty="0" maxQty="1" minQty="0" npQty="1" npQtyMult="1" text="- Light Guacamole" code="99900088" unitPrice="1.20" unitTax="0.20" totalPrice="0.00" totalTax="0.00" isCYT="true" name="Guacamole" cartImage="" origQty="0" deliveryEarlyQty="0" solvedChoice="" isSingleAutoChoice="false" grillSequence=""/>
        <Grill modifiers="0" defQty="0" modQty="1" qty="1" maxQty="1" minQty="0" npQty="1" npQtyMult="1" text="- Ajouter 1 Sliced Jalapeños" code="99900089" unitPrice="1.20" unitTax="0.20" totalPrice="0.00" totalTax="0.00" isCYT="true" name="Sliced Jalapeños" cartImage="" origQty="1" deliveryEarlyQty="0" solvedChoice="" isSingleAutoChoice="false" grillSequence=""/>
      </Product>
    </Item>
    <Item voided="false" qtyPromo="0" currentSelected="true" indexInternal="1" isCYT="false" customizable="true" barcode="" isRedeemable="false" canIncrease="true" canMakeMeal="false" index="1" totalKCAL="320" hasNutritionInfo="true">
      <Product qty="1" npQty="1" npQtyMult="1" hasAllergens="true" code="99900044" unitPrice="6.10" unitTax="0.40" totalPrice="6.1" totalTax="0.4" isCYT="false" name="Medium Meal Build Your Burger" cartImage="" origQty="1" deliveryEarlyQty="0" solvedChoice="" isSingleAutoChoice="false" grillSequence="">
        <Product qty="1" npQty="1" npQtyMult="1" code="9311" unitPrice="0.00" unitTax="0.00" totalPrice="0.00" totalTax="0.00" isCYT="false" name="Coca Cola 40cl." cartImage="" origQty="1" deliveryEarlyQty="0" solvedChoice="10000002" isSingleAutoChoice="false" grillSequence=""/>
        <Product qty="1" npQty="1" npQtyMult="1" code="3012" unitPrice="0.00" unitTax="0.00" totalPrice="0.00" totalTax="0.00" isCYT="false" name="Frite Moyenne" cartImage="" origQty="1" deliveryEarlyQty="0" solvedChoice="10000010" isSingleAutoChoice="false" grillSequence=""/>
        <Product qty="1" npQty="1" npQtyMult="1" hasAllergens="true" code="99900019" unitPrice="0.00" unitTax="0.00" totalPrice="0.00" totalTax="0.40" isCYT="true" name="Build Your Burger" cartImage="" origQty="1" deliveryEarlyQty="0" solvedChoice="" isSingleAutoChoice="false" grillSequence="">
          <Product qty="1" npQty="1" npQtyMult="1" hasAllergens="true" code="99900042" unitPrice="1.20" unitTax="0.20" totalPrice="0.00" totalTax="0.00" isCYT="true" name="Buttered Toasted Artisan Roll" cartImage="" origQty="1" deliveryEarlyQty="0" solvedChoice="99900021" isSingleAutoChoice="false" grillSequence=""/>
        </Product>
      </Product>
    </Item>
*/

	var cytXML=null;
	var code=productView.@code;
	var productInfo = csoProductInfo[code.toString()];
	if((productInfo)&&((productInfo.isBybPreBuilt)||(productInfo.isBybProduct))) {
		cytXML=lPosNGKGrillBYB(code, itemIndex);
	}
	
	if(!cytXML) {
		// do it for all subitems
		for each (subitem in productView.Product) {
			cytXML=lListCYTGrill(subitem, itemIndex);
			if(cytXML) {
				break;
			}
		}
	}
	
	return (cytXML);
}

/**
 *
 * @brief - Get the size selection list for the selected cart item
 * @param - cartIndex: index of the selected item
 * @param - silentMode (optional) - end the helper function without calling the PosSendUICmd: 
 * @return - true
 * @author - MY
 * @since - CSO-290 - NGK-Make Meal Functionality after Adding to Basket - 7913753
 */
function PosCSOMakeMealSizeSelectionJS (cartIndex, silentMode) {

	// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
	var bSilentMode = false;
	if((silentMode)&&("true"==silentMode.toLowerCase())) {
		bSilentMode=true;
	}

	var kioskView = new XML(getKioskView(hlp.getCurrentView()));
	var kioskViewItems = kioskView.Order.Item.(@index == cartIndex);
	var xmlProductInCart = kioskViewItems.Product;
	
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	var itemEnergy="";
	if(csoCalculateEnergyInformation)
	{
		var fatherQty = Number(kioskViewItems.Product.@qty);
		itemEnergy = kioskViewItems.Product.@energyBase;
		if(fatherQty > 1)
			itemEnergy = GetEnergyInformationDivided(itemEnergy, fatherQty);
	}

	var eventXml = new XML('<Event type="ASYNC" name="DLG_NGK_VML_SHOW_PRODUCTS" MakeMeal="true" index="'+cartIndex+'"/>');
	var bybCodes = [];
	
	// CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
	// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
	var itemConfiguredEnergy = lGetCustomEnergyInformation(xmlProductInCart.@code.toString());
	// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
	// the silentMode flag was created for the Auto EVM deature and it is being used to bypass the vml.sizeSelection.validatePrice param
	var sizeSelectionXML = PosNGKGetValueMealXML(xmlProductInCart.@code, bybCodes, true, "", false, itemEnergy, itemConfiguredEnergy, bSilentMode, kioskViewItems.Product.@qty);

	if (sizeSelectionXML == null)
	{
		API.dbg("NGK - PosNGKOrderItemJS: Could not generate Size Selection XML for product code (productCode=[" + xmlProductInCart.@code + "])");
		return false;
	}
	
	// SQC-8591 - [NGK5.14 - Allergen] - Allergens confirmation popup displayed even the allergen ingredient is removed from the receipt (using Make it a Meal)
	// SQC-8592 - [NGK 5.14 - Allergen] - After remove allergen components, the Allergen text alert was not removed from the "Size Selection" screen
	// Update signaled allergens for value meal in case of product in cart was grilled and signaled allergens were removed
	if (xmlProductInCart.@hasAllergens == "true" && xmlProductInCart.@hasSignaledAllergens != "true" && xmlProductInCart.Grill.length() > 0) {
		for each (var xmlComposition in sizeSelectionXML.Product.Composition.(@code == xmlProductInCart.@code)) {
			xmlComposition.@hasSignaledAllergens = xmlProductInCart.@hasSignaledAllergens == "true";
		}
		
		for each (var xmlProduct in sizeSelectionXML.Product) {
			var hasSignaledAllergens = false;
			for each (var xmlComposition in xmlProduct.Composition)
				if (xmlComposition.@hasSignaledAllergens == "true") {
					hasSignaledAllergens = true;
					break;
				}
			xmlProduct.@hasSignaledAllergens = hasSignaledAllergens;
		}
	}
	
	// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	// add current grill information of item in cart
	var productGrill=lListGrill(kioskViewItems.Product);
	if(productGrill) {
		var productSelected=new XML('<ProductSelected type="MM"/>');
		productSelected.appendChild(productGrill)
		sizeSelectionXML.appendChild(productSelected);
	}
	
	eventXml.appendChild(sizeSelectionXML);
	
	// CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
	lAddChoiceUpsellingPrice(eventXml);
	lReplaceSizePriceByCombinedPrice(eventXml);
	//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
	lAddSizeUpsellingPrice(eventXml);

	//CSO-36 - NGK v5.3 - Meal Loop Enhancements to Management/Display of Choices - 7160823
	var groupChoicesByFlavor = (lGetCSOUserInterfaceStringParameter("groupChoicesByFlavour", "false") == "true");
	if (groupChoicesByFlavor)
	{
		lAddFlavors(eventXml);
	}
	
	// CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
	if(bSilentMode) {
		return (eventXml);
	}
	else {
		return PosSendUICmd(eventXml.toXMLString());
	}
}

/**
 *
 * @brief - Based on the PosNGKOrderItemJS function. Upgrade the item to the selected size and sell the choices.
 * 			The function first verifies if there is any choice that was already put in the cart. 
 * @param - sizeSelected: the size to upgrade
 * @param - sellSequence: the sell sequence of the product
 * @author - Mauricio Yokomizo
 * @since - CSO-290 - NGK-Make Meal Functionality after Adding to Basket - 7913753
 * @altered - CSO-867 - Make it a Meal does not work properly if the choice has a choice
 */
function PosNGKMakeMealJS (sizeSelected, sellSequence) {	
	PosDoSelBySellSequence(sellSequence);
	PosChangeSizeSelectionWithList(sizeSelected, []);
	PosRefreshSalePanel();	
	return true;
}

/**
 * @brief - Sends a message to the UI to display the CUSTOMIZED or PRE BUILT screen selection
 * @param - productType: "CUSTOMIZED" or "PRE_BUILT"
 * @param - groupFilter: list of groups separated by | to be displayed. If not defined or empty, all groups will be displayed
 * @return - true
 * @author - Dalton Pericles de Almeida
 * @since - CSO-282 - CYT Redesign
 * @modified - CSO-576 - NGK 5.14 - CYT Redesign sorts CYT Items(Customize and Pre-builds) by Product Code
 */
function PosNGKShowCYTorPreBuiltSelectionScreenJS(productType, groupFilter)
{
	if(((productType != "CUSTOMIZED") && (productType != "PRE_BUILT")) || (csoCYTProducts.length == 0))
	{
		return;
	}

	// CSO-576 - NGK 5.14 - CYT Redesign sorts CYT Items(Customize and Pre-builds) by Product Code
	var csoSortedCYTProducts = SortCYTProducts(csoCYTProducts);

	var xmlEvent = new XML("<Event />");
	xmlEvent.@type = "ASYNC";
	xmlEvent.@name = "DLG_SYS_SHOW_SCREEN_SELECTION_CYT";

	var xmlGroupProducts = new XML("<GroupCYTProducts />");
	xmlGroupProducts.@productsType = productType;
	
	var xmlGroup = null;
	
	var groupFilterArray = [];
	if (groupFilter)
	{
		groupFilterArray = groupFilter.split("|");
	}
	
	if(productType == "PRE_BUILT")
	{
		xmlGroupProducts.@mainTitle = "NGK_CYT_MAIN_SCREEN_PRE_BUILT_HEAD";

		var preBuiltGroups = new Array();
		var hasItemWithoutGroup = false;
		var productInfo = null;
		// CSO-576 - NGK 5.14 - CYT Redesign sorts CYT Items(Customize and Pre-builds) by Product Code
		for each (var productCYTCode in csoSortedCYTProducts) {
			productInfo = csoProductInfo[productCYTCode];
			if(productInfo != null)
			{
				if(productInfo.isBybPreBuilt)
				{
					var CSOCytGroupParameter = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytGroup");
					var CSOCytGroup = CSOCytGroupParameter != undefined && CSOCytGroupParameter.@value.toString() != "" ? CSOCytGroupParameter.@value.toString() : "";
					
					if(CSOCytGroup)
					{
						var preBuiltGroup = CSOCytGroup;
						
						var foundGroup = false;				
						for each (var group in preBuiltGroups)
						{
							if(group == preBuiltGroup) foundGroup = true;
						}
						
						if(!foundGroup) preBuiltGroups.push(preBuiltGroup);
					}
					else hasItemWithoutGroup = true;
				}
			}
		}
		
		if(preBuiltGroups.length == 0)
		{
			xmlGroupProducts.@mainSubTitle = "";
			var groupTitle = "NGK_CYT_MAIN_SCREEN_PRE_BUILT_TITLE";
			xmlGroup = CreateXMLGroupSelection("PREBUILT_ALL", groupTitle, productType, groupFilterArray);
			if (xmlGroup) xmlGroupProducts.appendChild(xmlGroup);
		}
		else {
			xmlGroupProducts.@mainSubTitle = "NGK_CYT_MAIN_SCREEN_PRE_BUILT_TITLE";		
			for each (var preBuiltGroup in preBuiltGroups)
			{
				var groupTitle = "NGK_CYT_MAIN_SCREEN_PRE_BUILT_TITLE_" + preBuiltGroup;
				xmlGroup = CreateXMLGroupSelection(preBuiltGroup, groupTitle, productType, groupFilterArray);
				if (xmlGroup) xmlGroupProducts.appendChild(xmlGroup);
			}
			if(hasItemWithoutGroup)
			{
				var groupTitle = "NGK_CYT_PREBUILT_OTHER_CATEGORY";
				xmlGroup = CreateXMLGroupSelection("PREBUILT_OTHER", groupTitle, productType, groupFilterArray);
				if (xmlGroup) xmlGroupProducts.appendChild(xmlGroup);
			}
		}
	}
	else
	{
		xmlGroupProducts.@mainTitle = "NGK_CYT_MAIN_SCREEN_CUSTOMIZED_HEAD";
		var groupTitle = "NGK_CYT_MAIN_SCREEN_CUSTOMIZED_TITLE";
		xmlGroup = CreateXMLGroupSelection("CUSTOMIZED", groupTitle, productType, groupFilterArray);	
		if (xmlGroup) xmlGroupProducts.appendChild(xmlGroup);
	}
	xmlEvent.appendChild(xmlGroupProducts);
	
	//Check if the xml event contains at least one product
	if (xmlEvent..ProductCYTButton.length() > 0)
	{
		if (!PosSendUICmd(xmlEvent.toXMLString())) return false;
	}
	
	return true;
	
	/**
	 * @brief - sorts the array of CYT products according to the parameter CSOCytDisplayOrder
	 * @param - csoUnsortedCYTProducts: array of CYT product codes to be ordered
	 * @return - sorted array
	 * @author - Paulo Ferreira
	 * @since - CSO-576 - NGK 5.14 - CYT Redesign sorts CYT Items(Customize and Pre-builds) by Product Code
	 */
	function SortCYTProducts(csoUnsortedCYTProducts) {
		
		var dict = {};

		for each (var productCYTCode in csoUnsortedCYTProducts) {
			productInfo = csoProductInfo[productCYTCode];
			if(productInfo != null)	{
				var parameter = parseInt(productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytDisplayOrder").@value.toString());
				var order = isNaN(parameter) ? 0 : parameter;
				dict[productCYTCode] = order;
			}
		}

		dict.getSorted = function () {
		  
		  var values = [];
		  
		  for (var key in this){
		    if (typeof(this[key]) === 'function') {
		      continue;
		    }
		    if (values.indexOf(this[key]) == -1){
		      values.push(this[key] ? this[key] : 0)      
		    }
		  }
		  
		  var sorted = [];
		  values = values.sort(function(a, b) { return a - b; });
		  
		  for each(var value in values) {
		    for (var key in this){
		      if (typeof(this[key]) === 'function') {
		        continue;
		      }
		      if (this[key] == value && !sorted[key]) {
		        sorted.push(key)
		      }
		    }
		  }
		  return sorted;
		};

		return dict.getSorted();
	}


	function CreateXMLGroupSelection(groupName, groupTitle, productType, groupFilterArray)
	{
		var xmlGroup = new XML("<GroupCYTProduct />");
		xmlGroup.@name = groupName;
		xmlGroup.@title = groupTitle;

		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		var selectedAllergensList = PosNGKGetSharedCtxValueWithoutParameters("NGK_SELECTED_ALLERGENS").split("|");
		
		var productInfo = null;
		// CSO-576 - NGK 5.14 - CYT Redesign sorts CYT Items(Customize and Pre-builds) by Product Code
		for each (var productCYTCode in csoSortedCYTProducts) 
		{
			productInfo = csoProductInfo[productCYTCode];
			if(productInfo != null)
			{
				var CSOCytGroupParameter = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytGroup");
				var CSOCytGroup = CSOCytGroupParameter != undefined && CSOCytGroupParameter.@value.toString() != "" ? CSOCytGroupParameter.@value.toString() : "";
				
				if (groupFilterArray.length > 0 && (CSOCytGroup == "" || groupFilterArray.indexOf(CSOCytGroup) == -1))
				{
					continue;
				}
				
				if((productType == "PRE_BUILT") && productInfo.isBybProduct)
				{
					continue;
				}
				if((productType == "CUSTOMIZED") && productInfo.isBybPreBuilt)
				{
					continue;
				}
				
				if(productInfo.isBybPreBuilt)
				{
					if(CSOCytGroup)
					{
						if(groupName != CSOCytGroup)
						{
							continue;
						}
					}
					else{
						if((groupName != "PREBUILT_OTHER") && (groupName != "PREBUILT_ALL"))
						{
							continue;
						}
					}
				}
				
				var xmlProductButton = new XML("<ProductCYTButton />");
				
				xmlProductButton.@productCode = productInfo.xmlNode.ProductCode.toString();
				
				// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
				// match the allergens that the customer signalled with the product list to show
				// look for allergen items in all components of the product (recursive)
				var allergensFound = [];
				// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
				allergensFound = lFindAllergens(allergensFound, xmlProductButton.@productCode, [], false, true, false, true);
				if(allergensFound.length>0) {
					xmlProductButton.@hasAllergens = "true";
				
					allergensFound = [];
					// SQC-8639 - [NGK5.14] - Allergen - Allergen alert not displayed in the "Pre built" screen
					allergensFound = lFindAllergens(allergensFound, xmlProductButton.@productCode, selectedAllergensList, false, true, false, false);
					if (allergensFound.length>0) {
						xmlProductButton.@hasSignaledAllergens = "true";
					}
				}
				
				xmlProductButton.@productName = "";
				var language = sessionSale.get("LANGUAGE");
				
				// SQC-7324 - [NGK 5.11] CYT Redesign - Fatal error when select others languages
				if (csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language] != undefined) {
					if ((csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].csoName != null) &&
						(csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].csoName != undefined) &&
						(csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].csoName != "") )
					{
						xmlProductButton.@productName = csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].csoName;
					}
					else if ((csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].longName != null) &&
						(csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].longName != undefined) &&
						(csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].longName != "") )
					{
						xmlProductButton.@productName = csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].longName;
					}
					else if ((csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].csoGenericName != null) &&
						(csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].csoGenericName != undefined) &&
						(csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].csoGenericName != "") )
					{
						xmlProductButton.@productName = csoProductInfo[productInfo.xmlNode.ProductCode.toString()].names[language].csoGenericName;
					}
				}
				
				if(productInfo.isBybProduct)
				{
					xmlProductButton.@isCustomized = "true";
				}
				else
				{
					xmlProductButton.@isCustomized = "false";
				}			
				
				//CSO-32 - HIDE PRODUCT PRICES BUTTON ENHANCEMENTS - 6994584
				var CSODisplayPrice = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSODisplayPrice").@value.toString();
				if (CSODisplayPrice != "false")
				{
					xmlProductButton.@productPrice = lFormatPrice(lGetProductCombinedPrice(xmlProductButton.@productCode, true));
					xmlProductButton.@showPrice = "true";
				}
				else
				{
					xmlProductButton.@showPrice = "false";
				}
				
				xmlProductButton.@title = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytTitle").@value.toString();
				xmlProductButton.@image = "";			
				if (productInfo.xmlNode.Presentation.CSOLargeImageName != null) 
				{
					xmlProductButton.@image = productInfo.xmlNode.Presentation.CSOLargeImageName.toString();
				}
				
				var productCode = productInfo.xmlNode.ProductCode.toString();
				var timeRestrictionInfo = GetTimeRestrictionProductAvailability(productCode, 0);
				if (timeRestrictionInfo != null && timeRestrictionInfo != undefined) 
				{
					xmlProductButton.@isProductRestricted = "true";
					xmlProductButton.@timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod;
				}
				
				// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
				// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
				var calories = "";
				if((csoLoadCustomEnergyInformation != "") && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true ))
					calories = lGetEnergyInformation(productCode, undefined);
				else 
					calories = lGetEnergyInformation(productCode, undefined, false);
				
				var hasNutritionalInfoAvailable = isNutritionalInfoAvailable(productCode);
				if ((hasNutritionalInfoAvailable) ||
				    ((calories != "") && (csoLoadCustomEnergyInformation != "") && (PosCSOCheckSharedContext("NGK_LAYOUT", "16X9") != true )))
				{
					// CSO-337 - Problems in nutritional information for 16x9 mode if parameter "nutritionalInformation.layoutMode" is set as "US"
					if (hasNutritionalInfoAvailable)
					{					
						xmlProductButton.@showNutrition = "true";
					}
					if (calories != "")
					{
						xmlProductButton.@totalCalories = calories;
					}
				}
				
				var xmlAction = new XML("<Action />");

				xmlAction.@type = "onclick";
				xmlAction.@workflow = PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE");

				xmlParameter = new XML("<Parameter />");
				
				xmlParameter.@name = "ProductCode"
				xmlParameter.@value = productInfo.xmlNode.ProductCode.toString();	
				
				xmlAction.appendChild(xmlParameter);
				xmlProductButton.appendChild(xmlAction);
				
				xmlGroup.appendChild(xmlProductButton);
			}
		} //End Loop
		
		if (xmlGroup.ProductCYTButton.length() > 0)
		{
			return(xmlGroup);
		}
		
		return null;
	}
}

/**
 * @brief  - Returns to the UI an event to display CYT QR-Code reader screen.
 * @author - Jorge Olimpia
 * @since  - CSO-327 - CYT import via scanner - 8052105
 */
function PosNGKShowCYTBarcodeReader() {
	var xml = new XML('<Event type="ASYNC" name="DLG_NGK_CYT_SHOW_BARCODE_READER" />');
	var cytBarcode = new XML('<CYTBarcode/>');
	xml.appendChild(cytBarcode);
	return PosSendUICmd(xml);
}

/**
 * @brief  - Returns to the UI an event to display a pop-up with a error message related to CYT QR-Code read.
 * @author - Jorge Olimpia
 * @since  - CSO-327 - CYT import via scanner - 8052105
 */
function PosNGKShowCYTBarcodeReaderError(message, timeRestrictionsPeriod, defaultScratchProductCode) {
	var xml = new XML('<Event type="ASYNC" name="DLG_NGK_CYT_SHOW_BARCODE_ERROR" />');
	var cytBarcode = new XML('<CYTBarcode/>');
	if (message != undefined && ltrim(rtrim(message)) != "") {
		cytBarcode.@errorMessage = message;
	}
	
	if (timeRestrictionsPeriod != undefined && ltrim(rtrim(timeRestrictionsPeriod)) != "") {
		cytBarcode.@timeRestrictionsPeriod = timeRestrictionsPeriod;
	}
	
	if (defaultScratchProductCode != undefined && ltrim(rtrim(defaultScratchProductCode)) != "") {
		cytBarcode.@defaultScratchProductCode = defaultScratchProductCode;
	}
	
	xml.appendChild(cytBarcode);
	
	return PosSendUICmd(xml);
}

/**
 * @brief  - Scans a QR-Code sent by the UI, related to CYT, and starts an order item if it is valid.
 * @author - Jorge Olimpia
 * @since  - CSO-327 - CYT import via scanner - 8052105
 */
function PosNGKCYTScanBarcode(barcode){
	const QRCODEVERSION = "V1";
	
	var isBarcodeValid = true;
	var cytMainProduct = "";
	
	// SQC-7376 - [NGK 5.11] CYT via scanner - NGK displays the outage message after scan an invalid QR code
	// Gets default scratch product code and validates if it is a valid CYT product to be displayed case qrcode is invalid.
	var cytDefaultScratchProductCode = lGetCSOUserInterfaceStringParameter("cyt.defaultScratchProductCode", "");
	if (!PosNGKIsCYTProduct(cytDefaultScratchProductCode) || isProductOutage(cytDefaultScratchProductCode)) {
		cytDefaultScratchProductCode = "";
	}
	var timeRestrictionInfoDefaultScratch = GetTimeRestrictionProductAvailability(cytDefaultScratchProductCode, 0);
	if (timeRestrictionInfoDefaultScratch != undefined || timeRestrictionInfoDefaultScratch != null) {
		cytDefaultScratchProductCode = "";
	}
	
	// Check if barcode contains value
	if (barcode == undefined || barcode == null || ltrim(rtrim(barcode)) == "") {
		API.dbg("NGK - PosNGKCYTScanBarcode - Barcode value is empty. Source:[" + barcode + "].");
		isBarcodeValid = false;
	}
	
	// Check barcode version
	if (barcode.indexOf("#") == 0) {
		API.dbg("NGK - PosNGKCYTScanBarcode - Barcode does not contain a version separator. Source:[" + barcode + "].");
		isBarcodeValid = false;
	}
	else {
		var qrCodeVersion = barcode.substr(0, barcode.indexOf("#"));
		if (qrCodeVersion.toUpperCase() != QRCODEVERSION) {
			API.dbg("NGK - PosNGKCYTScanBarcode - Barcode version does not match. Source:[" + barcode + "].");
			isBarcodeValid = false;
		}
	}
	
	if (!isBarcodeValid) {
		// SQC-7375 - [NGK 5.11] CYT via scanner - After scan a CYT item that is in outage file, the customer should be redirect for the first step of the configured CYT product (cyt.defaultScratchProductCode) or return to CYT main screen?
		PosNGKShowCYTBarcodeReaderError(PosCSOI18nGetMessageJS("NGK_CYT_BARCODEREADER_ERROR_TEXT"), "", cytDefaultScratchProductCode);
		return false;
	}
	
	// Once barcode version is valid, remove it from barcode string
	var cytBarcode = barcode.substr(barcode.indexOf("#") + 1, barcode.length - (barcode.indexOf("#") + 1));
	
	// Split ingredients
	var cytIngredients = cytBarcode.split(";");
	
	// Get CYT main product and given name
	var cytHeader = cytIngredients[0].split("@");
	var cytAliasMainIngredient = cytHeader[0];
	cytMainProduct = PosNGKGetProductCodeFromAlias(cytAliasMainIngredient);
	
	// Check if the main product is a CYT product
	if (!PosNGKIsCYTProduct(cytMainProduct)) {
		API.dbg("NGK - PosNGKCYTScanBarcode - Main product in barcode cannot be found in the list or it is not a CYT product. Product code: [" + cytMainProduct + "].");
		// SQC-7375 - [NGK 5.11] CYT via scanner - After scan a CYT item that is in outage file, the customer should be redirect for the first step of the configured CYT product (cyt.defaultScratchProductCode) or return to CYT main screen?
		PosNGKShowCYTBarcodeReaderError(PosCSOI18nGetMessageJS("NGK_CYT_BARCODEREADER_ERROR_TEXT"), "", cytDefaultScratchProductCode);
		return false;
	}
	
	// Check if the main product is in the outage list
	if (isProductOutage(cytMainProduct)) {
		API.dbg("NGK - PosNGKCYTScanBarcode - Main product is outage. Product code: [" + cytMainProduct + "].");
		// SQC-7375 - [NGK 5.11] CYT via scanner - After scan a CYT item that is in outage file, the customer should be redirect for the first step of the configured CYT product (cyt.defaultScratchProductCode) or return to CYT main screen?
		PosNGKShowCYTBarcodeReaderError(PosCSOI18nGetMessageJS("NGK_CYT_BARCODEREADER_PRODUCT_OUTAGE_TEXT"), "", cytDefaultScratchProductCode);
		return false;
	}
	
	// Check if the main product is in a time restriction period
	var timeRestrictionInfo = GetTimeRestrictionProductAvailability(cytMainProduct, 0);
	if (timeRestrictionInfo != undefined || timeRestrictionInfo != null) {
		var timeRestrictionsPeriod = timeRestrictionInfo.timeRestrictionsPeriod;
		// SQC-7375 - [NGK 5.11] CYT via scanner - After scan a CYT item that is in outage file, the customer should be redirect for the first step of the configured CYT product (cyt.defaultScratchProductCode) or return to CYT main screen?
		PosNGKShowCYTBarcodeReaderError(PosCSOI18nGetMessageJS("NGK_CYT_BARCODEREADER_PRODUCT_TIMERESTRICTION_TEXT"), timeRestrictionsPeriod, cytDefaultScratchProductCode);
		return false;
	}

	var cytGivenName = cytHeader.length == 2 ? cytHeader[1] : "";

	// Remove first item from array because it is the main product.
	cytIngredients.splice(0,1);
	PosNGKOrderItemJS(cytMainProduct+"@"+cytGivenName, null, null, null, null, null, cytIngredients.join(";"));
}

/**
 * @brief  - Get the product code from a given alias at csoProductInfo dictionary.
 * @author - Jorge Olimpia
 * @return - Product code if it was found; Otherwise, empty string.
 * @since  - CSO-327 - CYT import via scanner - 8052105
 */
function PosNGKGetProductCodeFromAlias(alias) {
	API.dbg("NGK - PosNGKGetProductCodeFromAlias - alias: [" + alias + "]");
	for each (var product in csoProductInfo) {
		if (product.cytProductCodeAlias.toUpperCase() == alias.toUpperCase()) {
			API.dbg("NGK - PosNGKGetProductCodeFromAlias - productCode: [" + product.code + "]");
			return product.code;
		}
	}
	
	API.dbg("NGK - PosNGKGetProductCodeFromAlias - productCode: [EMPTY]");
	return "";
}

/**
 * @brief  - Check if a given product is a CYT product.
 * @author - Jorge Olimpia
 * @return - True if the product is a CYT; Otherwise, false.
 * @since  - CSO-327 - CYT import via scanner - 8052105
 */
function PosNGKIsCYTProduct(productCode) {
	return (bShowProduct(productCode) && 
		(csoProductInfo[productCode].isBybProduct || csoProductInfo[productCode].isBybPreBuilt));
}

/**
 * @brief  - Test the limit of applied promotions to the order
 * @author - MY
 * @return - true - limit reached. false - under limit
 * @since  - CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function lCountPromotions() {
	var redeemedPromoQty=0;
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	var retVal=false;
	
	// check global coupons max quantity
	var globalCouponsMaxQuantity = 0;
	if (!isNaN(lGetCSOUserInterfaceStringParameter("coupon.globalMaxVoucherPerOrder", "1"))) {
		globalCouponsMaxQuantity = parseInt(lGetCSOUserInterfaceStringParameter("coupon.globalMaxVoucherPerOrder", "1"));
	}

	if (globalCouponsMaxQuantity > 0) {
		var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		var redeemedPromoQty = 0;
		var groups;
		
		// Do not count offers and global promotions - count only local promotions
		for each (var item in kioskOrderView.Order.Group) {
			redeemedPromoQty++;
		}
		
		// Sum discount redemption in redeemedPromoQty
		
		for each (var item in kioskOrderView.Order.Item) {
			if(item.@voided.toString() == "false") {
				var prodInfo=csoProductInfo[item.Product.@code.toString()];
				// monopoly
				// coupon V4
				// discount
				if((prodInfo.isMonopoly) 
						|| ((null!=prodInfo.xmlNode.Barcode)&&(undefined!=prodInfo.xmlNode.Barcode))
						|| ("Discount"==item.Product.@discountDescription)) {
					redeemedPromoQty+=Number(item.Product.@qty);
				}
			}
		}

		// discount by order
		//CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
		var discValue = new BigDecimal(BigDecimal.ZERO);
		var discountOnTotal = false;
		for each(var tender in kioskOrderView.Order.Tender)
		{
			discValue = discValue.add(new BigDecimal(tender.@value));
			if(tender.@name == "DISCOUNT_BY_ORDER" || tender.@name == "MSG_BC_OFFERS_RATE_DISCOUNT") {
				discountOnTotal = true;
			}
		}
		
		//CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
		if(discountOnTotal && (discValue.compareTo(BigDecimal.ZERO) > 0)) {
			redeemedPromoQty++;
		}
		
		API.dbg("lCountPromotions redeemedPromoQty["+redeemedPromoQty+"] globalCouponsMaxQuantity["+globalCouponsMaxQuantity+"]");
		
		if (redeemedPromoQty >=globalCouponsMaxQuantity) {
			retVal = true;
		}
	}
	return (retVal);
}

/**
 * @brief  - Sends a event message to the UI to display a coupon landing screen
 * @author - Jorge Olimpia
 * @return - An event message containing a screen code related to the coupon landing screen.
 * @since  - CSO-394 UK-CR-Enhancements to Voucher Redemption at NGK - 8072392
 * @modified - CSO-520 - [6.1.23.MR3 Bundle 4.2][NGK 5.13] Coupon landing screen buttons do not honour working hour configuration
 */
function PosNGKShowCouponsLandingScreen() {
	var xml = new XML('<Event type="ASYNC" name="DLG_NGK_COUPON_LANDING" />');
	
	var enableLandingScreen = lGetCSOUserInterfaceStringParameter("coupon.enableLandingScreen", "false");
	var landingScreenCode = lGetCSOUserInterfaceStringParameter("coupon.landingScreenCode", "");
	var landingScreenNumber = Number(landingScreenCode);
	
	if (!landingScreenNumber || !ngkScreenInfo[landingScreenNumber]){
		API.dbg("PosNGKShowCouponsLandingScreen - Parameter 'coupon.landingScreenCode' does not exist or it has an invalid screen number: " + landingScreenCode);
	}
	

	if (enableLandingScreen.toLowerCase() == "true") {
		var parameters = new XML('<Parameters/>');
		parameters.@landingScreenNumber = landingScreenNumber;
		parameters.@maxGlobalCouponsQtyReached = lCountPromotions() ? "true" : "false";
		
		
		var node = ngkScreenInfo[landingScreenNumber].xmlNode;
	
		//var offerButtonNumber = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SCAN_MOA_OFFER")).Parameter.(@name == "Number");
		var offerButtonNumber=[];
		
		// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
		var promotionButtonNumber=[];
		for each(var btn in node.Button) {
			if((btn.Action.@type == "onclick")&&(btn.Action.@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SCAN_MOA_OFFER"))) {
				offerButtonNumber.push(btn.@number);
			}
			
			// CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
			if((btn.Action.@type == "onclick")&&(btn.Action.@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_MONOPOLY_BARCODE_READER"))) {
				offerButtonNumber.push(btn.@number);
			}
			
			// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
			// CSD-177 - [NGK5.17 - Active Mode] Should Limit of Global Promotion be defined by the parameter "coupon.globalMaxVoucherPerOrder"?
			if((btn.Action.@type == "onclick") && (
				btn.Action.@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_NGK_SHOW_PROMOTIONS") || 
				btn.Action.@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_NGK_SHOW_PROMOTION_BARCODE_READER"))){
				promotionButtonNumber.push(btn.@number);
			}
		}
		

		parameters.@offerButtonNumber = offerButtonNumber.join('|');
		
		// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
		parameters.@promotionButtonNumber = promotionButtonNumber.join('|');
		
		var POSOffersEnabled = hlp.findParamInSectionWide("isEnabled", "Offers") == "true";
		var CSOOffersEnabled = lGetCSOUserInterfaceStringParameter("enableOffers", "false") == "true";
		
		//SQC-6247 - [NGK Promotions/ Digital Offers] NGK will respect the parameter "isEnabled" of section "Offers"?
		if (POSOffersEnabled && CSOOffersEnabled)
		{
			parameters.@ShowOffersButton = "true";
		}
		else
		{
			parameters.@ShowOffersButton = "false";
		}		
		parameters.@ScreenCodeToDisable = lGetDisabledScreenButtons(landingScreenNumber).join(',');
		xml.appendChild(parameters);
	}
	
	return PosSendUICmd(xml);
	
	/**
 	* @brief  - Gets all monopoly buttons number that must be disabled due to working hours or day part restriction.
 	* @author - Renato Tsuchida
 	* @return - An array with all buttons number that must be disabled.
 	* @since  - CSO-520 - [6.1.23.MR3 Bundle 4.2][NGK 5.13] Coupon landing screen buttons do not honour working hour configuration
	* @modified - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 	*/
	function lGetDisabledScreenButtons(screenNumber, xmlEvent) {
		var node = ngkScreenInfo[screenNumber].xmlNode;
		var screensToDisable = [];
		
		//CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
		//Disable promotions button if feature is not enabled
		var POSPromotionsEnabled = hlp.findParamInSectionWide("isEnabled", "Promotion") == "true";
		if(!POSPromotionsEnabled)
		{
			var promotionWorkflow = PosNGKGetSharedCtxValueWithoutParameters("WF_NGK_SHOW_PROMOTIONS");
			for each (var innerButton in node.Button) {
				if(innerButton.Action.@type == "onclick" && innerButton.Action.@workflow == promotionWorkflow)
				{
					screensToDisable.push(innerButton.@number.toString());
				}
			}
		}
		
		var ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_NGK_SHOW_MONOPOLY")).Parameter.(@name == "Number");
		if (!(ButtonParameters.length() > 0)) {
			//CSD-212 - [NGK 5.17.2 - Monopoly] Nothing happing after click on the button "I have a deal"
			return [];
		}
		
		for each (var buttonParameter in ButtonParameters) {
			var buttonScreenNumber = buttonParameter.@value.toString();
			if (PosNGKCheckScreenDayPartAndWorkingHours(buttonScreenNumber) == false){
				screensToDisable.push(buttonParameter.parent().parent().@number.toString());
			}
		}
        // CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
        ButtonParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_MONOPOLY_BARCODE_READER")).Parameter.(@name == "Number");
        if (!(ButtonParameters.length() > 0)) {
            return screensToDisable;
        }
        for each (var buttonParameter in ButtonParameters) {
            var buttonScreenNumber = buttonParameter.@value.toString();
            if (PosNGKCheckScreenDayPartAndWorkingHours(buttonScreenNumber) == false){
                screensToDisable.push(buttonParameter.parent().parent().@number.toString());
            }
        }
		return screensToDisable;
	}
}

/**
 *
 * @brief - Test if the product is promotional (discount, monopoly and coupon v4)
 *			Offers, promotion, order discount and local promotion has to be validated on the UI side
 * @param - prodCode: product code
 * @param - discounts: discounts node
 * @return - true if is promotional product
 * @author - MY
 * @since - CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function lIsPromotionalProduct(prodCode, discounts) {
	var retVal=false;
	var productInfo = csoProductInfo[prodCode.toString()];
	API.dbg("lIsPromotionalProduct prodCode["+prodCode+"]");
	if((null!=productInfo.xmlNode)&&(undefined!=productInfo.xmlNode)) {
		// coupon V4
		if((null!=productInfo.xmlNode.Barcode)&&(undefined!=productInfo.xmlNode.Barcode)) {
			API.dbg("lIsPromotionalProduct COUPON V4");
			retVal=true;
		}
		else {
			// monopoly
			if(productInfo.isMonopoly) {
				API.dbg("lIsPromotionalProduct MONOPOLY");
				retVal=true;
			}
		}
	}
	else {
		if((null!=discounts.discount)&&(undefined!=discounts.discount)){
			API.dbg("lIsPromotionalProduct DISCOUNT");
			retVal=true;
		}
	}
	return retVal;
}

/**
 *
 * @brief - Test if the order total is zero (order must have at least 1 sold item)
 * @return - true if order total is zero. false if total is not zero OR has no sold item
 * @author - MY
 * @since - CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function PosNGKTestZeroTotal() {
	var retVal=false;
	var hlp = new BusinessObjectHelper();
	var orderView = new XML(hlp.getCurrentView());
	if(orderView.ItemView.length()>0) {
		var orderTotal = new BigDecimal(orderView.@totalAmount);
		if (0==orderTotal.compareTo(new BigDecimal("0"))) {
			retVal=true;
		}
	}
	else {
		API.dbg("PosNGKTestZeroTotal - Order has no items!!");
	}
	if(retVal) {
		PosSetSessionProperty("ZERO_TOTAL", "true");
	}
	else {
		PosSetSessionProperty("ZERO_TOTAL", "false");
	}
	return (retVal);
}

/**
 *
 * @brief - Request confirmation for the zero total order
 * @return - true - proceed with zero total order. false - do not proceed with zero total order.
 * @author - MY
 * @since - CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function PosNGKConfirmZeroTotalOrderJS() {
	// check if the customer would like to continue a zero total order
	var zeroPriceTitle = lGetCSOUserInterfaceStringParameter("zeroPrice.title", null);
	var zeroPriceConfirm = lGetCSOUserInterfaceStringParameter("zeroPrice.confirm", null);
	var zeroPriceCancel = lGetCSOUserInterfaceStringParameter("zeroPrice.cancel", null);
	var bConfirm = true;
	if (zeroPriceTitle != null &&
		zeroPriceConfirm != null &&
		zeroPriceCancel != null) {
		bConfirm=PosNGKAskConfirmationMessageJS(zeroPriceTitle, zeroPriceConfirm, zeroPriceCancel);
	}
	else {
		API.dbg("PosNGKZeroTotalOrderJS - there are missing parameters. Zero order confirmation with default values");
		bConfirm=PosNGKAskConfirmationMessageJS("NGK_MSG_ZERO_PRICE_TEXT|WHITE|WHITE|GREEN|no_image_key", "NGK_MSG_TENDER_CONFIRM|GREEN|WHITE|WHITE|no_image_key", "NGK_MSG_TENDER_CANCEL|GREEN|WHITE|WHITE|no_image_key");
	}
	if (sessionSale.get("NGK_POPUP_TIMEOUT") == "true")
	{
		API.dbg("PosNGKConfirmZeroTotalOrderJS TIMEOUT");
		PosDoBackFromTotal();
		PosNGKVoidOrderJS();
		sessionSale.set("NGK_ORDER_CANCEL", "true");
		// reset
		return false;
	}
	else {
		API.dbg("PosNGKConfirmZeroTotalOrderJS user canceled");
		sessionSale.set("NGK_ORDER_CANCEL", "false");
	}

	return (bConfirm);
}

/**
 *
 * @brief - Tender zero amount order
 * @return - true endofsale is successful
 * @author - MY
 * @since - CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function PosNGKTEnderZeroTotalOrderJS() {

	// Amount equals '-1' performs an exact tender.
	var bEndOfSale = PosDoTender('0', '-1');

	if (bEndOfSale)
	{
		API.dbg("Cashless process SUCCEEDED.");
		
		// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
		// This is necessary to consume the offer
		if (typeof(PosOffersEndOfSale) == "function")
		{
			PosOffersEndOfSale();
		}
		return PosDoEndOfSale(true);
	}
	else {
		API.dbg("PosNGKTEnderZeroTotalOrderJS - could not finish order");
	}
	return (bEndOfSale);
}


/**
 *
 * @brief - Creates a XML event informing the UI about the order number and the selected zone for table service
 * @param - imageName - the image found inside the images.zip (not the image key)
 * @param - timeout - define the amount of time the dialog will be displayed (in seconds)
 * @param - soundName
 * @param - value
 * @param - position
 * @param - title - i18n key
 * @param - eventName - optional. May override the default message name ("DLG_SYS_SHOW_ORDER_NUMBER_AND_ZONE") to allow dialog customization
 * @return - TRUE
 * @author - MY
 * @since - CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function PosNGKDoShowVideoOrderNumberAndZone(videoKey, timeout, value, title, eventName, analyticsInfo) {
	
	var newValue=PosCSOI18nGetMessageJS(value, PosNGKGetOrderNumber(), sessionSale.get("NGK_TABLE_SERVICE_SELECTED_ZONE"));

	if(!analyticsInfo || analyticsInfo == '')
	{
		analyticsInfo = 'ScreenNameKey:NGK_MSG_TENDER_ORDER_NUMBER_AND_ZONE';
	}

	if (null == eventName || eventName == '')
	{
		eventName = "DLG_SYS_SHOW_VIDEO";
	}
	PosNGKDoShowVideoMessageJS(videoKey, timeout, newValue, title, eventName, analyticsInfo);
	
    return true;
}

/**
 *
 * @brief - Shows the collection point screen with video
 * @param - videoKey - videoKey that will be localized
 * @param - timeout - define the amount of time the dialog will be displayed (in seconds)
 * @param - value
 * @param - title - i18n key
 * @param - eventName - optional. May override the default message name ("DLG_SYS_SHOW_VIDEO") to allow dialog customization
 * @return - TRUE
 * @author - MY
 * @since - CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
 */
function PosNGKDoShowVideoOrderNumber(videoKey, timeout, value, title, eventName, analyticsInfo) {
	
	var videoName="";
	var PODFrontCounter = PosNGKPointOfDistributionExistsInOrderView("FRONT_COUNTER", false);
	// CSO-86 - NGK use store level McCafe parameter to direct customers - 7056880
	var PODMcCafe = false;
	if (lGetCSOUserInterfaceStringParameter("enableMCCCollectionPoint", "true").toLowerCase() != "false")
	{
		PODMcCafe = PosNGKPointOfDistributionExistsInOrderView("MCCAFE", false);
	}
	
	var videoArray = videoKey.split("|");
	var titleArray = title.split("|");

	if (PODFrontCounter && PODMcCafe)
	{
		if((null==videoArray)||(videoArray.length<2)) {
			API.dbg("PosNGKDoShowVideoOrderNumber - videoKey[2] parameter missing for FC/MCC");
		}
		else {
			videoName=videoArray[2];
		}
		if((null==titleArray)||(titleArray.length<2)) {
			API.dbg("PosNGKDoShowVideoOrderNumber - titleArray[2] parameter missing for FC/MCC");
			title="";
		}
		else {
			title = titleArray[2];
		}
	}
	else if (PODMcCafe)
	{
		if((null==videoArray)||(videoArray.length<1)) {
			API.dbg("PosNGKDoShowVideoOrderNumber - videoKey[1] parameter missing for MCC");
		}
		else {
			videoName=videoArray[1];
		}
		if((null==titleArray)||(titleArray.length<1)) {
			API.dbg("PosNGKDoShowVideoOrderNumber - titleArray[1] parameter missing for MCC");
			title="";
		}
		else {
			title = titleArray[1];
		}
	}
	else
	{
		if(null==videoArray) {
			API.dbg("PosNGKDoShowVideoOrderNumber - videoKey[0] parameter missing for FC");
		}
		else {
			videoName=videoArray[0];
		}
		if(null==titleArray) {
			API.dbg("PosNGKDoShowVideoOrderNumber - titleArray[0] parameter missing for FC");
			title="";
		}
		else {
			title = titleArray[0];
		}
	}

	if (null == eventName || eventName == '')
	{
		eventName = "DLG_SYS_SHOW_VIDEO";
	}
	
	var newValue=PosCSOI18nGetMessageJS(value, PosNGKGetOrderNumber());
	var newTitle=PosCSOI18nGetMessageJS(title, PosNGKGetOrderNumber());
	
	// NPS-14854 - Kiosk analytics
	API.dbg("PosNGKDoShowVideoOrderNumber - increment analyticsInfo");

	if(!analyticsInfo)
		analyticsInfo = "";

	if(analyticsInfo.indexOf("ScreenNameKey") < 0)
	{
		if(analyticsInfo != "")
		{ 
			analyticsInfo += ",";
		}

		analyticsInfo += "ScreenNameKey:"+ title;
	}

	API.dbg("PosNGKDoShowVideoOrderNumber - Send Video Message");

	PosNGKDoShowVideoMessageJS(videoName, timeout, newValue, newTitle, eventName, analyticsInfo);
	
    return true;
}

/**
 * @brief - Generates a list of rounded energy values from 1 to maxQty.
 *        - Used to pre calculate all possible energy values of a particular CYT ingredient
 *        - The idea is to use the list in the UI side to avoid consulting the scripts during the CYT loop
 * @author - Vladimir
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function lGetRoundedEnergyList(energyInfo, maxQty)
{
	if (!energyInfo) return "";
	if (!energyInfo.CalculatedEnergyInformation) return "";
	
	var roundedEnergyArray = new Array();
			
	for (var qty = 1; qty <= maxQty; qty++)
	{
		roundedEnergyArray.push(RoundEnergyValue(GetEnergyInformationMultiplied(energyInfo.CalculatedEnergyInformation, qty)));
	}
	
	for (var i = 0; i < roundedEnergyArray.length; i++)
	{
		if (!roundedEnergyArray[i]) return "";
	}
	
	return roundedEnergyArray.join("|");
}

/**
 * @brief - Generates a list of the portion based energy values.
 * @author - Vladimir
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function lGetPortionBasedEnergyList(energyInfo)
{
	if (!energyInfo) return "";
	
	var lightPortionEnergy = energyInfo.LightPortionEnergyInformation ? energyInfo.LightPortionEnergyInformation : energyInfo.CalculatedEnergyInformation;
	var regularPortionEnergy = energyInfo.CalculatedEnergyInformation;
	var extraPortionEnergy = energyInfo.ExtraPortionEnergyInformation ? energyInfo.ExtraPortionEnergyInformation : energyInfo.CalculatedEnergyInformation;
	
	var portionEnergyArray = new Array();
	
	portionEnergyArray.push(lightPortionEnergy);
	portionEnergyArray.push(regularPortionEnergy);
	portionEnergyArray.push(extraPortionEnergy);
	
	for (var i = 0; i < portionEnergyArray.length; i++)
	{
		if (!portionEnergyArray[i]) return "";
	}
	
	return portionEnergyArray.join("|");
}

/**
 * @brief - Generates a list of the portion based rounded energy values.
 * @author - Vladimir
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function lGetPortionBasedRoundedEnergyList(energyInfo)
{
	if (!energyInfo) return "";
	
	var lightPortionEnergy = energyInfo.LightPortionEnergyInformation ? energyInfo.LightPortionEnergyInformation : energyInfo.CalculatedEnergyInformation;
	var regularPortionEnergy = energyInfo.CalculatedEnergyInformation;
	var extraPortionEnergy = energyInfo.ExtraPortionEnergyInformation ? energyInfo.ExtraPortionEnergyInformation : energyInfo.CalculatedEnergyInformation;
	
	var portionRoundedEnergyArray = new Array();
	
	portionRoundedEnergyArray.push(RoundEnergyValue(lightPortionEnergy));
	portionRoundedEnergyArray.push(RoundEnergyValue(regularPortionEnergy));
	portionRoundedEnergyArray.push(RoundEnergyValue(extraPortionEnergy));
	
	for (var i = 0; i < portionRoundedEnergyArray.length; i++)
	{
		if (!portionRoundedEnergyArray[i]) return "";
	}
	
	return portionRoundedEnergyArray.join("|");
}

/**
 * @brief - Get the energy value of a portion based product
 * @energyInfo - Object containing the product energy information (example: csoProductInfo[productCode].energyInfo)
 * @portionType - An integer representing the portion type:
 *                0 - None
 *                1 - Light
 *                2 - Regular
 *                3 - Extra
 * @returns - energy value or an empty string if not configured
 * @author - Vladimir
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function lGetPortionBasedEnergy(energyInfo, portionType)
{
	var energy = "";
	
	if (energyInfo)
	{
		switch(portionType)
		{
			case 0:
				energy = "0";
				break;
			case 1:
				if(energyInfo.LightPortionEnergyInformation != "")
				{
					energy = energyInfo.LightPortionEnergyInformation;
				}
				else 
				{
					if(energyInfo.CalculatedEnergyInformation != "")
						energy = energyInfo.CalculatedEnergyInformation;
				}
				break;
			case 2:
				if(energyInfo.CalculatedEnergyInformation != "")
				{
					energy = energyInfo.CalculatedEnergyInformation;
				}
				break;
			case 3:
				if(energyInfo.ExtraPortionEnergyInformation != "")
				{
					energy = energyInfo.ExtraPortionEnergyInformation;
				}
				else
				{
					if(energyInfo.CalculatedEnergyInformation != "")
						energy = energyInfo.CalculatedEnergyInformation;
				}
				break;
		}
	}
	
	return energy;
}

/**
 * @brief - Rounds the energy value from UI.
 * @author - Dalton Pericles de Almeida
 * @since - CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
 */
function POSCSORoundEnergyValueFromUI(energyValue, roundingRequestID)
{
	PosCSOLog(CSOLOG_INFORMATION, 18435, "POSCSORoundEnergyValueFromUI - input value: " + energyValue + " Request ID: " + roundingRequestID);
	
	var newEnergyValue = "";
	
	//Check for multiple rounding requests separated by "|"
	if (energyValue && energyValue.split("|").length > 1)
	{
		var splittedEnergyValues = energyValue.split("|");
		var newEnergyValuesArray = new Array();
		for (var i = 0; i < splittedEnergyValues.length; i++)
		{
			newEnergyValue = RoundEnergyValue(splittedEnergyValues[i]);
			newEnergyValuesArray.push(newEnergyValue);
		}
		
		newEnergyValue = newEnergyValuesArray.join("|");
	}
	else
	{
		newEnergyValue = RoundEnergyValue(energyValue);
	}
	
	PosCSOLog(CSOLOG_INFORMATION, 18435, "POSCSORoundEnergyValueFromUI - return value: " + newEnergyValue + " Request ID: " + roundingRequestID);
	
	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_ENERGY_VALUE_ROUNDED" />');
	eventXml.appendChild(new XML('<Energy>'+ newEnergyValue +'</Energy>'));
	eventXml.appendChild(new XML('<RequestID>'+ roundingRequestID +'</RequestID>'));
	
	PosSendUICmd(eventXml.toString());
	return true;
}

/**
 *
 * @brief - Converts the inject order string in equivalent XML grill format
 * @param - grillInstructions: string in inject order protocol format
 * @returns - the equivalent grill XML
 * @author - Mauricio Yokomizo
 * @since - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 */
function ConvertStringGrillInXMLGrill(grillInstructions) {
	var arrayGrillInstructions=grillInstructions.split(";");
	
	if(PosNGKGrillExecuteOperation("START", arrayGrillInstructions[0], "", "false", "true")) {
		// send the grill sequence
		for(var iIndex=1; iIndex<arrayGrillInstructions.length; iIndex++) {
			var arrayInstruction=arrayGrillInstructions[iIndex].split(",");
			var itemIndex=GLOBAL_NGK_GRILL_LAST_EVENT.GrillInfo.Component.Item.(@code==arrayInstruction[0]).@index;
			
			var grillOperation = Number(arrayInstruction[1]) > 0 ? "ADD" : "REMOVE";
			var absGrillQty = Math.abs(Number(arrayInstruction[1]));
			for(;absGrillQty--;) {

				if(!PosNGKGrillExecuteOperation(grillOperation, itemIndex, "", "false", "true")) {
					API.dbg("[ConvertStringGrillInXMLGrill] PosNGKGrillExecuteOperation "+grillOperation+" "+arrayInstruction[0]+" failed");
					iIndex=arrayGrillInstructions.length;
					absGrillQty=0;
				}
			}
		}
		if(!PosNGKGrillExecuteOperation("FINISH", "", "", "false", "true")) {
			API.dbg("[ConvertStringGrillInXMLGrill] PosNGKGrillExecuteOperation FINISH failed");
		}
		else {
		}
	}
	else {
		API.dbg("[ConvertStringGrillInXMLGrill] PosNGKGrillExecuteOperation START failed");
	}

	return(GLOBAL_NGK_GRILL_LAST_EVENT);
}


/**
 * @brief  - Send analytics info to UI
 * @param - analyticsInfo: JSON object formmated according to Kiosk Analytics Protocol - see release notes NPS-14854 - Kiosk Analytics 
 * @author - Rafael Azevedo
 * @return - none
 * @since  - NPS-14854 - Kiosk Analytics
 */
function PosNGKSendAnalyticsInfo(analyticsInfo)
{
	API.dbg("[PosSendAnalyticsInfo] - formatting analytics info message." );

	var eventXml = new XML('<Event type="ASYNC" name="DAT_ANALYTICS_INFO" />');
	eventXml.appendChild(new XML('<AnalyticsInfo>'+ analyticsInfo +'</AnalyticsInfo>'));

	API.dbg("[PosSendAnalyticsInfo] - sending analytics info message." );

	PosSendUICmd(eventXml.toString());

	API.dbg("[PosSendAnalyticsInfo] - analytics info message sent." );

	return true;
}

/**
 * @brief  - Send analytics info related to OrderPaymentStatus to UI
 * @param - tenderResponse: boolean that indicates if tender was successful or not 
 * @author - Rafael Azevedo
 * @return - none
 * @since  - NPS-14854 - Kiosk Analytics
 */
function PosNGKSendAnalyticsTenderInfo(tenderResponse)
{
	return tenderResponse ? PosNGKSendAnalyticsInfo("OrderPaymentStatus:1") : PosNGKSendAnalyticsInfo("OrderPaymentStatus:2");
}

/**
 * @brief  - Get the item indexes of offers, promotions and local promotions items
 * @param - kioskOrderView: current kiosk view
 * @param - exclusionList: retval - array of indexes of promotional items
 * @author - MY
 * @return - none
 * @since  - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
 */
function lGetPromotionalItemIndexes(promosNode, exclusionList) {
	for each (var item in promosNode) {
		// memberIndexes contains the cart indexes of items that are promotional
		var arIndex=item.@memberIndexes.split("|");
		for each(var index in arIndex) {
			exclusionList.push(index);
		}
	}
}

/**
 * @brief  - Test if the item index is in the exclusion list
 * @param - indexNumber: index number of the kiosk view
 * @param - exclusionList: array of indexes of promotional items
 * @author - MY
 * @return - true - item is valid (non promotional) . false - otherwise
 * @since  - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
 */
function lTestPromotionalItemIndexes(indexNumber, exclusionList) {
	var retVal=true;

	for each (var item in exclusionList) {
		if(indexNumber==item) {
			retVal=false;
		}
	}

	return (retVal);
}

/**
 * @brief  - Test if item has restrictions. Offer, promotion, discount, coupons, monopoly are not allowed for auto EVM
 * @author - MY
 * @return - true  - item is valid. false - item has restrictions
 * @since  - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
 */
function lIsItemValidForAutoEVM(prodInfo, itemView) {
	// CSO-792 - NGK 5.15.1 - Auto EVM not consuming Drink of different size to meal
	// voided items must be ignored
	var retVal = ("true" == itemView.@voided.toString()) ? false : true;

	// CSO-792 - NGK 5.15.1 - Auto EVM not consuming Drink of different size to meal
	if(retVal) {
		// monopoly
		// coupon V4
		// discount
		if((prodInfo.isMonopoly) 
				|| ((null!=prodInfo.xmlNode.Barcode)&&(undefined!=prodInfo.xmlNode.Barcode))
				|| (PosCSOI18nGetMessageJS("CSO_MSG_COUPON_DISCOUNT")==itemView.Product.@discountDescription)) {
			retVal=false;
		}
	}
	return (retVal);
}

/**
 *
 * @brief - Identify items in the order that can be compositions and choices
 * @param - kioskOrderView: current kiosk view
 * @param - arItemCandidates: retval - array of item candidates to compositions and choices
 * @returns - none
 * @author - Mauricio Yokomizo
 * @since - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
 */
function lCatalogItems(kioskOrderView, arItemCandidates) {

	var exclusionList=[];
	// get the indexes of offer, promotions and local promotions - this are excluded from auto EVM
	lGetPromotionalItemIndexes(kioskOrderView.Order.Group, exclusionList);
	lGetPromotionalItemIndexes(kioskOrderView.Order.Promotions.Promotion, exclusionList);
	lGetPromotionalItemIndexes(kioskOrderView.Order.Offers.Offer, exclusionList);

	for each (var itemView in kioskOrderView.Order.Item) {
		var productInfo = csoProductInfo[itemView.Product.@code.toString()];

		// filter all active, salable, non VM and non promotional products
		if((productInfo)&&("ACTIVE"==productInfo.xmlNode.@statusCode.toUpperCase())
				&& ("TRUE"==productInfo.xmlNode.@salable.toUpperCase())
				&& (lTestPromotionalItemIndexes(itemView.@index, exclusionList))
				&& (lIsItemValidForAutoEVM(productInfo, itemView))) {
			var itemType=0;	// 0 - not eligible, 1 - eligible for composition, 2 - eligible for choice, 3 - eligible for both (composition and choice)
			if (lListMakeMeal(productInfo.xmlNode, itemView.Product.@qty, productInfo.isMonopoly)) {
				itemType|=AUTOEVM_TYPE_COMPOSITION;
			}
			if("PRODUCT"==productInfo.xmlNode.@productClass.toUpperCase()) {
				itemType|=AUTOEVM_TYPE_CHOICE;
			}
			if(itemType>0) {
				var hasGrill="FALSE";
				if(itemView.Product.Grill.length()>0) {
					hasGrill="TRUE";
				}
				
				// find the size selection
				var sizeSelection='0';
				for each (var sizeItem in productInfo.xmlNode.SizeSelection.Size) {
					if(sizeItem.@code==itemView.Product.@code) {
						sizeSelection=sizeItem.@entry;
						break;
					}
				}
				
				// add the item as many times as it appers in cart
				var strItemCandidate = {
					code: itemView.Product.@code,
					itemType: itemType.toString(),
					cartIndex: itemView.@index,
					cartIndexInternal: itemView.@indexInternal,
					qty: itemView.Product.@npQty,
					sizeSelection: sizeSelection,
					price: itemView.Product.@unitPrice,
					totalPrice: itemView.Product.@totalPrice, // CSO-739 - Include the monetary value of grill items in the monetary value of product that solve choices before make the sorting this products.
					hasGrill: hasGrill,
					name: itemView.Product.@name.toLowerCase()
				};
				arItemCandidates.push(strItemCandidate);
			}
		}
	}

	
	// sort by product code. If same product code, non grilled item comes first
	arItemCandidates=arItemCandidates.sort(function(a,b) {
		// 1st criteria - price
		// CSO-739 - Include the monetary value of grill items in the monetary value of product that solve choices before make the sorting this products.
		var priceA=new BigDecimal(a.totalPrice);
		var priceB=new BigDecimal(b.totalPrice);
		var cmpPrice=priceB.compareTo(priceA);	// sort from higher to lower
		if(0==cmpPrice) {
			var cmpName=a.name.localeCompare(b.name);
			// 2nd criteria - names
			if(0==cmpName) {
				// 3rd criteria - grill
				var grillA=("true"==a.hasGrill.toLowerCase())?1:0;
				var grillB=("true"==b.hasGrill.toLowerCase())?1:0;
				return (grillA-grillB);
			}
			return (cmpName);
		}
		return (cmpPrice);
	});
}

/**
 *
 * @brief - Try to find one composition that can be converted to VM
 * @param - arItemCandidates: array of item candidates to compositions and choices
 * @param - arVMCandidates: retval - array of possible VM candidadates
 * @returns - true-can reduce price. false - otherwise
 * @author - Mauricio Yokomizo
 * @since - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
 */
function lGroupCandidates(arItemCandidates) {

	var canReducePrice=false;
	var arVMCandidates=null;

	for(var iIndex=0; (false==canReducePrice)&&(iIndex < arItemCandidates.length); iIndex++) {
		var item=arItemCandidates[iIndex];

		if(AUTOEVM_TYPE_COMPOSITION==(item.itemType&AUTOEVM_TYPE_COMPOSITION)) {
			// repeat the VM association if composition multiplier is > 1
			for(var iLoop=0; (false==canReducePrice)&&(iLoop < Number(item.qty)); iLoop++) {
				// arChoicesIndexes contains a list of all remaining choice candidates in cart (except item itself)
				var arChoicesIndexes=[];
				for(var iCount=0; iCount < arItemCandidates.length; iCount++) {
					// exclude the item itself and the choice candidate qty must be greater than zero
					if((iIndex!=iCount) && (AUTOEVM_TYPE_CHOICE==(arItemCandidates[iCount].itemType&AUTOEVM_TYPE_CHOICE)) && (Number(arItemCandidates[iCount].qty)>0)) {
						for(var iQty=0; iQty< Number(arItemCandidates[iCount].qty); iQty++) {
							// list of index of item candidates that are choices
							arChoicesIndexes.push(iCount);
						}
					}
				}
				
				// if there is a VM without at least one choice then this test must be removed
				if(arChoicesIndexes.length>0) {
					// composition candidate - get the list of possible choices for this composition
					var makeMealXML=PosCSOMakeMealSizeSelectionJS(item.cartIndex.toString(), "true");
					API.dbg("[AUTOEVM]makeMealXML["+iIndex+"] ["+makeMealXML.toString()+"]");
					for each(var vmProduct in makeMealXML.Sizes.Product) {
						var choicesSolved=true;
						var arSolutionChoicesIndexes=[];	// format: [0]-main choice,[1]-choice index,[2]-choice index,...
						// arSolutionChoicesIndexes content is an array of repetitive string with format
						// choice type code,quantity;<repetitive item>;<repetitive item>...
						// where <repetitive item> is index of arItemCandidates,equivalent product code (with the same size of the VM),isCostInclusive,price(if non cost inclusive)
						// [0] 10000002,1;3,9317,false,1.00;4,9311,true
						// [1] 10000010,1;2,3010,true;1,3015,false,3.00
						
						var compositionCostInclusive=true;
						var arChoicesIndexesCopy=arChoicesIndexes.slice();

						// check if composition is cost inclusive
						for each(var composition in vmProduct.Composition) {
							if(composition.@code==item.code) {
								var price=new BigDecimal(composition.@price);
								if(price.compareTo(BigDecimal.ZERO) > 0) {
									compositionCostInclusive=false;
								}
							}
							else {
								// SQC-9372 - [NGK 5.1501 - Auto EVM] - Single items converted into a VM with open choice
								// check if there are composition items different of the original item that has choices
								var compositionInfo = csoProductInfo[composition.@code.toString()];
								// CSO-791 - NGK 5.15.1 - Auto EVM not working when choice products have auto choices
								if(compositionInfo) {
									if(compositionInfo.hasChoices) {
										// all choices must be autochoice for this be a valid item
										for each (var choiceNode in compositionInfo.xmlNode.Choices.Component) {
											var isAutoChoice=lIsAutoChoice(choiceNode.ProductCode);
											if(!isAutoChoice) {
												API.dbg("[AUTOEVM][lGroupCandidates] Can't convert to ["+vmProduct.@code+"] because composition ["+composition.@code+"] has unsolvable choices");
												choicesSolved=false;
											}
										}
									}
								}
								else {
									// should never get here
									API.dbg("[AUTOEVM][lGroupCandidates] composition.@code ["+composition.@code+"] not found in csoProductInfo");
									choicesSolved=false;
								}
							}
						}
						
						// SQC-9372 - [NGK 5.1501 - Auto EVM] - Single items converted into a VM with open choice
						if(choicesSolved) {
							for each(var mainChoices in vmProduct.Choice) {
								var solutionsQty=0;
								var choiceQty=Number(mainChoices.@defaultQuantity);
								var arSolutionChoicesTmp=[];

								arSolutionChoicesTmp.push(mainChoices.@code+","+mainChoices.@defaultQuantity);
								lFindProductInChoiceList(vmProduct.@size.toString(), arChoicesIndexesCopy, mainChoices);

								if(solutionsQty < choiceQty) {
									choicesSolved=false;
									// if a single choice is not satisfied the VM conversion for this composition is not possible
									API.dbg("[AUTOEVM][lGroupCandidates] Can't fulfill all choices");
									break;
								}
								else {
									//arSolutionChoicesTmp [10000002,3;4,6000,false,1.00;4,6000,false,1.00;4,6000,false,1.00;5,6050,true]
									// sort by product code. If same product code, non grilled item comes first
									var arSolutionChoicesTmpSorted = arSolutionChoicesTmp.sort(function(a, b) {
										// a.split(",")[0] is the index of arItemCandidates
										var splitA=a.split(",");
										var itemA=arItemCandidates[Number(splitA[0])];
										var itemB=arItemCandidates[Number(b.split(",")[0])];
										// the choice type only has 2 comma separated items
										if(splitA.length<=2) {
											// the choice type is always the first
											return -1;
										}
										else {
											// 1st criteria - price (higher price first)
											// CSO-739 - Include the monetary value of grill items in the monetary value of product that solve choices before make the sorting this products.
											var priceA=new BigDecimal(itemA.totalPrice);
											var priceB=new BigDecimal(itemB.totalPrice);
											var cmpPrice=priceB.compareTo(priceA);
											if(0==cmpPrice) {
												var cmpName=itemA.name.localeCompare(itemB.name);
												// 2nd criteria - names (alphabetically)
												if(0==cmpName) {
													// 3rd criteria - grill (not grilled first)
													var grillA=("true"==itemA.hasGrill.toLowerCase())?1:0;
													var grillB=("true"==itemB.hasGrill.toLowerCase())?1:0;
													return(grillA-grillB);
												}
												return (cmpName);
											}
											return (cmpPrice);
										}
									});
									// sort criteria productCode first, then non grilled items priority over grilled items
									arSolutionChoicesIndexes.push(arSolutionChoicesTmpSorted.join(";"));
									API.dbg("[AUTOEVM][lGroupCandidates] candidates to choice ["+arSolutionChoicesTmpSorted.join(";")+"]");
								}
							}
						}

						if(choicesSolved) {
							var qtyComposition=0;
							for each (var itCandidate in arItemCandidates) {
								if(AUTOEVM_TYPE_COMPOSITION==(itCandidate.itemType&AUTOEVM_TYPE_COMPOSITION)) {
									qtyComposition+=Number(itCandidate.qty);
								}
							}

							// CSO-790 - NGK 5.15.1 - Auto EVM not calculating EVM price correctly when Reference Product is configured
							var vmInfo=csoProductInfo[vmProduct.@code.toString()];
							var vmPrice;
							if (vmInfo != null) {
								vmPrice=new BigDecimal (vmInfo.unitPrice.getCurrent());
							}
							else {
								// the vm price may be incorrect if there is a reference product configured
								// but this is the price we have for now
								// This should NEVER happen
								vmPrice=new BigDecimal(vmProduct.@price);
								API.dbg("[AUTOEVM][lGroupCandidates] product ["+vmProduct.@code+"] not found in csoProductInfo");
							}
							
							var arVMtmp = {
								canReducePrice: false,
								qtyOfComposition: qtyComposition,
								code: item.code,
								arIndex: iIndex,
								VMsize: vmProduct.@size,
								// CSO-749 - Non cost inclusive composition items of a VM are not being calculated correctly
								VMprice: lFormatPrice(vmPrice),
								compositionCartPrice: item.price,
								listOfChoicesCandidadtes: arSolutionChoicesIndexes,
								cartIndex:item.cartIndex,
								listOfChoices: new Array()
							};

							// test if arVMtmp can reduce price
							canReducePrice=lKeepVMwithPriceReduction(arItemCandidates, arVMtmp);
							API.dbg("[AUTOEVM][lGroupCandidates] canReducePrice ["+canReducePrice+"]");
							arVMtmp.canReducePrice=canReducePrice;
							if(canReducePrice) {
								arVMCandidates=arVMtmp;
								// if a VM candidate is found stop looking thru the size selections
								API.dbg("[AUTOEVM][lGroupCandidates] product ["+arVMCandidates.code+"] can become VM with these choices ["+arVMCandidates.listOfChoices.join("|")+"]");
								break;
							}
						}
					}
				}
			}
		}
	}
	return (arVMCandidates);

	/**
	 * @brief  - Look for the product code in list of sold products
	 * @param  - vmSize: value meal size
	 * @param  - arChoicesIndexes: list of indexes (that points to arItemCandidates)
	 * @param  - choiceProduct: product node of choice list
	 * @param  - productCode: product code to look for
	 * @return - none
	 * @author - MY
	 * @since  - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
	 */
	function lFindInSoldproducts(vmSize, arChoicesIndexes, choiceProduct, productCode) {
		API.dbg("[AUTOEVM][lFindInSoldproducts] vmSize ["+vmSize+"] productCode ["+productCode+"]");
		var productTested=false;
		// look for items from cart that can satisfy this choice
		var maxLoop=arChoicesIndexes.length;
		for(var iCount=0; iCount < maxLoop; ) {
			var itemIndex=arChoicesIndexes[iCount];
			var itemChoice=arItemCandidates[itemIndex];
			var bUseChoice=true;
			API.dbg("[AUTOEVM][lFindInSoldproducts] itemChoice code|cartIndex|qty|sizeSelection|price|grill["+itemChoice.code+"]["+itemChoice.cartIndex+"]["+itemChoice.qty+"]["+itemChoice.sizeSelection+"]["+itemChoice.price+"]["+itemChoice.hasGrill+"]");

			if(itemChoice.code==choiceProduct.@code) {
				productTested=true;
			}
			else {
				// SQC-9372 - [NGK 5.1501 - Auto EVM] - Single items converted into a VM with open choice
				var candidateInfo = csoProductInfo[itemChoice.code.toString()];
				// CSO-791 - NGK 5.15.1 - Auto EVM not working when choice products have auto choices
				var choiceInfo = csoProductInfo[choiceProduct.@code.toString()];
				// do not filter if the choice structure of single item and converted item are the same
				// but if the choice has choice with default qty > 0 the POS accept it -> kiosk must let it pass
				if((candidateInfo)&&(choiceInfo)){
					if(choiceInfo.hasChoices) {
						// compare if the choice structure of the item in cart contains the whole choice structure of the choice item
						// notice that the item in cart can have more choices than the choice item
						// if the VM product contains 2 or more repetitions of the same choice (not grouped with qty) the POS will leasve one opened choice
						var choiceProdCode=[];	// use this to check for choice prod code repetition.
						for each (var choiceNode in choiceInfo.xmlNode.Choices.Component) {
							var bNodeFound=false;
							var isAutoChoice=lIsAutoChoice(choiceNode.ProductCode);
							if(!isAutoChoice) {
								// test if the product code is already in the list
								if (choiceProdCode.indexOf(choiceNode.ProductCode.toString()) >= 0) {
									API.dbg("[AUTOEVM][lFindInSoldproducts] Can't use ["+itemChoice.code+"] because the choice ["+choiceNode.ProductCode+"] is repeated");
									bUseChoice=false;
									break;
								}
								choiceProdCode.push(choiceNode.ProductCode.toString());
								for each (var candidateNode in candidateInfo.xmlNode.Choices.Component) {

									if((choiceNode.ProductCode==candidateNode.ProductCode) && 
											(choiceNode.DefaultQuantity<=candidateNode.DefaultQuantity)) {
										bNodeFound=true;
										break;
									}
								}
								if(!bNodeFound) {
									bUseChoice=false;
									API.dbg("[AUTOEVM][lFindInSoldproducts] Can't use ["+itemChoice.code+"] because it has fewer choices than ["+choiceProduct.@code+"] ");
									break;
								}
							}
						}
						
					}
				}
				else {
					// should NEVER happen
					API.dbg("[AUTOEVM][lFindInSoldproducts] item ["+itemChoice.code+"] or ["+choiceProduct.@code+"] was not found");
					bUseChoice=false;
				}
			}

			if((itemChoice.code==productCode)&&(bUseChoice)) {
				var validSizes=null;
				// do not check sizes if the product code of product that will solve the choice is the same that the one in cart (will not use size selection)
				if(choiceProduct.@code!=productCode) {
					var possibleSizes=hlp.findParamInSectionConfig(itemChoice.sizeSelection, "CSO.autoEVM.possibleSizes");
					if(possibleSizes) {
						validSizes=possibleSizes.split("|");
					}
				}
				else {
					API.dbg("[AUTOEVM][lFindInSoldproducts] choiceProduct.@code ["+choiceProduct.@code+"]");
				}

				if ((null==validSizes)||(validSizes.indexOf(vmSize) >= 0)) {
					var strCostInclusive=choiceProduct.@costInclusive;
					var isCostInclusive="true";
					if((!strCostInclusive)||("true"!=strCostInclusive.toLowerCase())) {
						isCostInclusive="false,"+choiceProduct.@price;
					}
					arSolutionChoicesTmp.push(itemIndex+","+choiceProduct.@code+","+isCostInclusive);
					solutionsQty++;
					arChoicesIndexes.splice(iCount,1);
					maxLoop=arChoicesIndexes.length;
				}
				else {
					iCount++;
				}
			}
			else {
				iCount++;
			}
		}
		return (productTested);
	}
	
	/**
	 * @brief  - Test if items in arChoicesIndexes can solve choices in this product code node
	 * @param  - vmSize: value meal size
	 * @param  - arChoicesIndexes: list of indexes (that points to arItemCandidates)
	 * @param  - productNode: Node with equivalent product codes
	 * @return - none
	 * @author - MY (based on function lFindOldSelectedProductInChoiceList developed by Jorge Olimpia)
	 * @since  - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
	 * It uses global variable to return value:
	 * productFoundList - array that contains the indexes of products that can solve choice in this VM
	 */
	function lLookForProduct(vmSize, arChoicesIndexes, productNode) {
		if(productNode) {
			for each (var choiceProduct in productNode) {
				var productInfo = csoProductInfo[choiceProduct.@code.toString()];
				if(productInfo) {
					// CSO-792 - NGK 5.15.1 - Auto EVM not consuming Drink of different size to meal
					var bFound=false;
					for each(var itemSize in productInfo.xmlNode.SizeSelection.Size) {
						if(itemSize.@code==choiceProduct.@code) {
							if(itemSize.@entry==vmSize) {
								bFound=true;
							}
							break;
						}
					}

					if(bFound) {
						var productTested=false;
						if(productInfo.xmlNode.SizeSelection.Size.length()>0) {
							for each(var itemSize in productInfo.xmlNode.SizeSelection.Size) {
								if(lFindInSoldproducts(vmSize, arChoicesIndexes, choiceProduct, itemSize.@code)) {
									productTested=true;
								}
							}
						}
						if(!productTested) {
							// have to test if the product itself can solve the choice (independent of the product size selection)
							lFindInSoldproducts(vmSize, arChoicesIndexes, choiceProduct, choiceProduct.@code);
						}
					}
				}
			}
		}
	}
	
	/**
	 * @brief  - Look for product code in the choice tag of the DLG_NGK_VML_SHOW_PRODUCTS (recursively)
	 * @param  - vmSize: value meal size
	 * @param  - arChoicesIndexes: copy of list indexes of items of arItemCandidates to look for in choices list (can be destroyed)
	 * @param  - choiceNode: List of choices that should be checked in order to find a choice reference to productItem.
	 * @return - none
	 * @author - MY (based on function lFindOldSelectedProductInChoiceList devloped by Jorge Olimpia)
	 * @since  - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
	 * It uses global variable to return value:
	 * arSolutionChoicesTmp - array that contains the items in cart that can solve choices of this VM
	 * content format string: product code, index of arItemCandidates, is cost inclusive, [optional] value (if non cost inclusive)
	 */
	function lFindProductInChoiceList(vmSize, arChoicesIndexes, choiceNode) {
		// all items in cart already found
		if(0==arChoicesIndexes.length) {
			return;
		}
		
		if(choiceNode.Product != undefined) {
			// CSO-792 - NGK 5.15.1 - Auto EVM not consuming Drink of different size to meal
			lLookForProduct(vmSize, arChoicesIndexes, choiceNode.Product);
			if (choiceNode.Product.Choice != undefined) {
				lFindProductInChoiceList(vmSize, arChoicesIndexes, choiceNode.Product.Choice);
			}
		}
		
		if(choiceNode.Flavor.Product != undefined) {
			// CSO-792 - NGK 5.15.1 - Auto EVM not consuming Drink of different size to meal
			lLookForProduct(vmSize, arChoicesIndexes, choiceNode.Flavor.Product);
		}
		for each (var itChoice in choiceNode) {
			// scan for more xml branches
			lFindProductInChoiceList(vmSize, arChoicesIndexes, itChoice);
		}
	}
}

/**
 *
 * @brief - Helper function that verifies recursively if the choice has an auto choice solution
 * @param - productCode: product code to check
 * @returns - true - is auto choice
 * @author - Mauricio Yokomizo
 * @since - CSO-791 - NGK 5.15.1 - Auto EVM not working when choice products have auto choices
 */
function lIsAutoChoice(productCode) {
	// situations tested of PosChangeSizeSelectionWithList
	// at least one last level node with choice with default, max and min quantities == 1 -> opened choice
	// at least last levels node with one composition which default qty == 0 ->  opened choice
	// all last levels node with composition with default qty > 0, max qty > 1 and any choice ->  Ok

	var prodInfo = csoProductInfo[productCode.toString()];
	if(prodInfo) {
		if(0==prodInfo.xmlNode.Choices.Component.length()) {
			// this is the last level of this branch
			var isAutoChoice=false;
			// look for at least one composition with default qty > 0 (deepest branch only)
			for each(var comp in prodInfo.xmlNode.Composition.Component) {
				if(comp.DefaultQuantity>0) {
					isAutoChoice=true;
					break;
				}
			}
			return (isAutoChoice)
		}
		else {
			var isAutoChoice=true;
			// all choices nodes must have at least 1 composition with default qty > 0 in each deepest level
			for each(var choiceNode in prodInfo.xmlNode.Choices.Component) {
				if(! lIsAutoChoice(choiceNode.ProductCode)) {
					// at lesat one brach has no composition
					isAutoChoice=false;
					break;
				}
			}
			return(isAutoChoice);
		}
	}
	// should never get here
	API.dbg("[AUTOEVM][lIsAutoChoice] productCode ["+productCode+"] not found in csoProductInfo");

	// item not found in csoProductInfo
	return(false);
}

/**
 *
 * @brief - Helper function that generates recursively all combinations of choice types lists
 * @param - arItemCandidates:  array of item candidates to compositions and choices
 * @param - VMprice: VM reference price (do not change)
 * @param - compPrice: composition price (do not change)
 * @param - curLevel: current choice type level
 * @param - combArray: list of combined choices used to solve VM choices (at the return contains the combined list that reduces the order total)
 * @param - arrAllChoiceCombinations: the list of choices combinations sorted by choice type
 * @returns - none
 * @author - Mauricio Yokomizo
 * @since - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
 */
function lCombineLists(arItemCandidates, VMprice, compPrice, curLevel, combArray, arrAllChoiceCombinations){
	var bReducePrice=false;
	if(curLevel<arrAllChoiceCombinations.length) {
		for each (var itAllChoiceCombinations in arrAllChoiceCombinations[curLevel]) {
			combArray.push(itAllChoiceCombinations);
			bReducePrice=lCombineLists(arItemCandidates, VMprice, compPrice, curLevel+1, combArray, arrAllChoiceCombinations);
			if (bReducePrice) {
				// only need one combination that reduces price
				break;
			}
			else {
				combArray.splice(curLevel, 1);
			}
		}
	}
	else {
		API.dbg("[AUTOEVM][lCombineLists] curLevel ["+curLevel+"] combArray ["+combArray.join("|")+"]");
		
		// last level - calculate and compare single prices vs VM price
		var calcVMprice=new BigDecimal(VMprice);
		var itemsPrice=new BigDecimal(compPrice);
		for each (var choiceTypeItems in combArray) {
			// choiceTypeItems sample 4,3015,true;3,3010,false,1.00;3,3010,false,1.00
			var itChoiceTypes=choiceTypeItems.split(";");
			for each (var choiceTypeItems in itChoiceTypes) {
				var indexItem=choiceTypeItems.split(",");
				if("false"==indexItem[2]) {
					// non cost inclusive
					calcVMprice=calcVMprice.add(new BigDecimal (indexItem[3]));
				}
				var choiceItem=arItemCandidates[indexItem[0]];
				itemsPrice=itemsPrice.add(new BigDecimal(choiceItem.price));
			}
		}
		API.dbg("[AUTOEVM][lCombineLists] itemsPrice ["+itemsPrice.toString()+"] calcVMprice ["+calcVMprice.toString()+"]");
		if(itemsPrice.compareTo(calcVMprice) > 0) {
			bReducePrice=true;
		}
	}
	return (bReducePrice);
}

/**
 *
 * @brief - Calculate the VM price for all arVMCandidates and keep only ones that 
 * @param - arItemCandidates: array of item candidates to compositions and choices
 * @param - arVMCandidates: input/retval - array of possible VM candidadates
 * @returns - true-VM can reduce price. false-otherwise
 * @author - Mauricio Yokomizo
 * @since - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
 */
function lKeepVMwithPriceReduction(arItemCandidates, arVMCandidates) {
	var reducePrice=false;
	var choiceTypeList=[];
	var arrAllChoiceCombinations=[];

	var compositionIndex=arVMCandidates.arIndex;
	// NOTICE: the VM price already considers if the composition is costinclusive or not
	var VMprice=new BigDecimal(arVMCandidates.VMprice);
	
	// arVMCandidates.listOfChoicesCandidadtes contains a list
	// arVMCandidates.listOfChoicesCandidadtes[0]=10000002,1;3,9317,false,1.00;4,9311,true
	// arVMCandidates.listOfChoicesCandidadtes[1]=10000010,1;2,3015,true;1,3010,false,3.00

	for each(var choiceTypes in arVMCandidates.listOfChoicesCandidadtes) {
		// arVMCandidates.listOfChoicesCandidadtes after split
		// itChoiceTypes[0]=10000010,1 (choice type, qty - the first element is different !!)
		// itChoiceTypes[1]=2,3015,true (index for arItemCandidates, equivalent product code (with the same size of the VM),iscostinclusive, price[only if costinclusive false])
		// itChoiceTypes[2]=1,3010,false,3.00 (index for arItemCandidates, equivalent product code (with the same size of the VM),iscostinclusive, price[only if costinclusive false])
		var itChoiceTypes=choiceTypes.split(";");
		// itChoiceTypes[0] - the first element is always composed by <choice type>,<qty>
		var itChoices=itChoiceTypes[0].split(",");
		var choiceType=itChoices[0];
		var combSize=Number(itChoices[1]);

		choiceTypeList.push(choiceType);

		var arrChoiceCombinations=[];
		var result=[];

		// get the choices only - choice type is excluded
		var arStart=itChoiceTypes.slice(1);

		lChoiceCombinations(arStart, combSize, 0, result);

		// arrAllChoiceCombinations all combinations by choice type (uses the same index of arVMCandidates.listOfChoicesCandidadtes)
		arrAllChoiceCombinations.push(arrChoiceCombinations.slice());
	}
	
	// add the item prices and compare it with the VM price
	var combArray=[];
	var compPrice=new BigDecimal(arVMCandidates.compositionCartPrice);
	reducePrice=lCombineLists(arItemCandidates, VMprice, compPrice, 0, combArray, arrAllChoiceCombinations);
	API.dbg("[AUTOEVM] reducePrice ["+reducePrice+"]");

	if(reducePrice) {
		// clear the sorted array
		arVMCandidates.listOfChoices.splice(0, arVMCandidates.listOfChoices.length);
		
		// choices indexes list
		for each (var solveChoice in combArray) {
			var itChoiceTypes=solveChoice.split(";");
			for each (var choiceTypeItems in itChoiceTypes) {
				var comp=choiceTypeItems.split(",");
				arVMCandidates.listOfChoices.push(Number((arItemCandidates[comp[0]].cartIndexInternal)));	// cart index (must be Number)
			}
		}
	}
	return (reducePrice);

	/**
	 *
	 * @brief - Helper function that generates recursively all combinations of the items in cart that can be used as choices for the VM choice
	 * @param - arChoice: array of items sold in cart that can be used to solve the VM choice
	 * @param - curLen: the qty of empty positions of the arCombination
	 * @param - startPosition: the start position index of the arChoice
	 * @param - arCombination: array of the combination list of choices (currently being handled)
	 * @returns - none
	 * @author - Mauricio Yokomizo
	 * @since - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
	 * It uses 2 global variables:
	 * arrChoiceCombinations: the array with all possible combinations (string of choice combinations separated by comma) 
	 * combSize: qty of choices (number of items of combination)
	 */
	function lChoiceCombinations(arChoice, curLen, startPosition, arCombination){

		for (var i = startPosition; i <= arChoice.length-curLen; i++) {
			if(arCombination.length<combSize) {
				arCombination.push(arChoice[i]);
			}
			else {
				arCombination[arCombination.length - curLen] = arChoice[i];
			}

			if(curLen>1) {
				lChoiceCombinations(arChoice, curLen-1, i+1, arCombination);
			}
			else {
				var itChoiceCombination=arCombination.join(";");
				// do not insert duplicates, but this algorithm can't identify that "a,b" and "b,a" are the same combination
				if(arrChoiceCombinations.indexOf(itChoiceCombination.toString())<0) {
					arrChoiceCombinations.push(itChoiceCombination);
				}
			}
		}
	}
}

/**
 *
 * @brief - Look for items in the view that can be converted into VM. Test if all choices are available.
 * @param - arVMCandidates: return parameter that contains the information necessary to convert items into VM
 * @returns - true-has item to convert. false-no item to convert
 * @author - Mauricio Yokomizo
 * @since - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
 */
function lPerformAutoEVM() {
	
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));

	var arItemCandidates=[];

	// select compositions and choices candidates among all items in cart
	// Must follow these rules:
	// plain items have precedence over grilled items
	// must not reduce the item size
	// only regular priced items can be used (no offer, promotion, deal or other meal)
	// VM can't be used to solve choices nor can be an composition
	lCatalogItems(kioskOrderView, arItemCandidates);

	for each(var item in arItemCandidates) {
		API.dbg("[AUTOEVM][lPerformAutoEVM] arItemCandidates ["+item.code+"]["+item.itemType+"]["+item.cartIndex+"]["+item.cartIndexInternal+"]["+item.qty+"]["+item.sizeSelection+"]["+item.price+"]["+item.hasGrill+"]");
	}
	
	return (lGroupCandidates(arItemCandidates));
}

/**
 *
 * @brief - Check if the order contains items that can be converted into VM that reduces the order total amount and convert them
 *			 items into VM, under customer approval.
 * @param - none
 * @returns - none
 * @author - Mauricio Yokomizo
 * @since - CSO-687 - 8194541 - Auto generate EVMs for customer savings (Auto EVM)
 *
 * IMPORTANT if the qty of the composition item of the VM is 2 or greater (f.i. a BigMac VM with 2 BigMac sandwiches)
 * If PosChangeSizeSelectionWithList is defined as function -> the POS consumes only 1 item from cart in the upsize process
 * 
 */
function PosNGKPerformAutoEVMJS() {
	var enableAutoEVM = lGetCSOUserInterfaceStringParameter("autoEVM.enable", "false").toLowerCase();

	if("true"!=enableAutoEVM) {
		// auto EVM disabled
		return;
	}

	if (typeof(PosChangeSizeSelectionWithList) != "function")  {
		API.dbg("[AUTOEVM]PosNGKPerformAutoEVMJS - missing PosChangeSizeSelectionWithList. Auto EVM disabled.");
		return;
	}
	
	// if discount by order is applied do not perform auto EVM
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	var discValue = new BigDecimal(BigDecimal.ZERO);
	var discountOnTotal = false;
	//CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
	for each(var tender in kioskOrderView.Order.Tender)
	{
		discValue = discValue.add(new BigDecimal(tender.@value));
		if(tender.@name == "DISCOUNT_BY_ORDER" || tender.@name == "MSG_BC_OFFERS_RATE_DISCOUNT") {
			discountOnTotal = true;
		}
	}
	//CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
	if(discountOnTotal && (discValue.compareTo(BigDecimal.ZERO) > 0)) {
		API.dbg("[AUTOEVM]PosNGKPerformAutoEVMJS - discount by order -> NO auto EVM");
		return;
	}
	var savedCash = new BigDecimal(kioskOrderView.Order.@totalAmount);
	
	// TODO - check for offer/promotion order discount


	var arVMCandidates=lPerformAutoEVM();
	if((arVMCandidates)&&(arVMCandidates.canReducePrice)) {
		var maxTries=arVMCandidates.qtyOfComposition;	// avoid infinite loop if the PosChangeSizeSelectionWithList fails
		
		// convert items into VM while there are items that can reduce price
		do {
			KioskViewHelper.PosDoSelIndex(arVMCandidates.cartIndex);

			var arUsedProductsIndexes=[];
			for (var idx = 0; idx < (arVMCandidates.listOfChoices).length; idx++) {
				arUsedProductsIndexes[idx]=Number((arVMCandidates.listOfChoices)[idx]);
			}

			var retVal=PosChangeSizeSelectionWithList(arVMCandidates.VMsize, arUsedProductsIndexes);
			
			// SQC-10002 - [Kiosk 5.16 - Order Basket] Value Meal with open choice goes to Order Summary after perform Make Meal
			// Sale view can be not updated after PosChangeSizeSelectionWithList BC execution. In order to avoid problems, it is important to force sale view update;
		    PosRefreshSalePanel();

			maxTries--;
			arVMCandidates=lPerformAutoEVM();
		} while ((arVMCandidates)&&(arVMCandidates.canReducePrice)&&(maxTries>0));
		
		kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		var finalTotal = new BigDecimal(kioskOrderView.Order.@totalAmount);
		savedCash=savedCash.subtract(finalTotal);
		API.dbg("[AUTOEVM][PosNGKPerformAutoEVMJS] savedCash ["+savedCash.toString()+"]");
		if(savedCash.compareTo(BigDecimal.ZERO)>0) {
			// SQC-9360 - [NGK 5.1501 - Auto EVM] - NGK displays the message "The order is missing required items. Please add the missing items." after timeout.		
			sessionSale.set("NGK_CANCEL", "false");
			
			// show message that items were converted to VM and the price reduction amount
			// CSO-738 - Change the Pop-up of the message "saved money" to a full screen.
			var decision = PosCSOSendSyncMessageJS(
				"DLG_NGK_SIMPLE_MSG", 
				new Array(PosCSOI18nGetMessageJS("CSO_BTN_AUTO_EVM_POPUP_OK") + "@@@@@@EventLabelKey:CSO_BTN_AUTO_EVM_POPUP_OK,TranslateEventLabel:1"),
				["true", "false"], 
				PosCSOI18nGetMessageJS("CSO_MSG_AUTO_EVM_POPUP", savedCash.toString() + "|ScreenNameKey:CSO_MSG_AUTO_EVM_POPUP,Params:[" + savedCash.toString() + "]"));
				
			// SQC-9360 - [NGK 5.1501 - Auto EVM] - NGK displays the message "The order is missing required items. Please add the missing items." after timeout.
			if(decision == null)				
			{	
				sessionSale.set("NGK_CANCEL", "true");
				return;
			}
		}
	}
}

/**
 * @brief - Try to perform a sale operation on the Kiosk using the Side Sale feature
 * @param - operCode - Operation to be performed
 * @returns - True if operation was successful, false otherwise
 * @author - Rafael Azevedo
 * @since - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
 */
function PosNGKSideOrderItemJS(operCode)
{
	API.dbg("PosNGKSideOrderItemJS - arguments[0]:" + arguments[0]); //Operation - operCode
	API.dbg("PosNGKSideOrderItemJS - arguments[1]:" + arguments[1]); //Prod info
	API.dbg("PosNGKSideOrderItemJS - arguments[2]:" + arguments[2]); //Grill info
	API.dbg("PosNGKSideOrderItemJS - arguments[3]:" + arguments[3]); //Redirect to
	API.dbg("PosNGKSideOrderItemJS - arguments[4]:" + arguments[4]); //Sell sequence of current product
	
	switch(operCode)
	{
		case "NEW_ORDER":
			PosNGKChangeItemJS("START");
			PosNGKCheckAndExecuteBackFromTotal();
			SideSaleHelper.Start(arguments[1]);
			return true;
		case "UPDATE_ORDER":
			PosNGKChangeItemJS("START");
			PosNGKCheckAndExecuteBackFromTotal();
			SideSaleHelper.Update(arguments[1]);
			return true;
		case "SELECT":
			SideSaleHelper.Select(arguments[4]);
			return true;
		case "CHOICE":
			SideSaleHelper.Choice(arguments[1], arguments[2], arguments[4]);
			return true;
		case "CANCEL":
			SideSaleHelper.Cancel();
			PosNGKChangeItemJS("END");
			RedirectAfterOperation(arguments[3]);
			return true;
		case "ADD":
			SideSaleHelper.Add(arguments[1]);
			return true;
		case "REMOVE":
			SideSaleHelper.Remove(arguments[4]);
			return true;
		case "FINISH":
			SideSaleHelper.SetAmount(arguments[1], arguments[4]);
			SideSaleHelper.Finish();
			PosNGKChangeItemJS("END");
			RedirectAfterOperation(arguments[3]);
			return true;
		case "FINISH_DEAL":
			SideSaleHelper.SetAmountActive(arguments[1]);
			SideSaleHelper.Finish();
			PosNGKChangeItemJS("END");
			RedirectAfterOperation(arguments[3]);
			return true;
	}

	return true;
}

/**
 * @brief - Helper used to centralize side sale operations
 * @author - Rafael Azevedo
 * @since - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
 */
var SideSaleHelper = new function()
{
	this.SIDE_SALE_IN_PROGRESS = false;
	
	this.Start = function(prodCode)
	{
		if(this.SIDE_SALE_IN_PROGRESS)
			PosVoidSideSale();
				
		PosCreateSideSale();
		this.SIDE_SALE_IN_PROGRESS = true;

		if(prodCode){
			PosDoSale(prodCode);			
		}
	}

	this.Update = function(indexes)
	{
		if(!indexes)
			return false;

		if(this.SIDE_SALE_IN_PROGRESS)
			PosVoidSideSale();
		
		RemovePromotionForEdit(indexes);
		
		var indexesInternal = KioskViewHelper.FindInternalIndexes(indexes);
		PosCreateSideSale(indexesInternal);	
		KioskViewHelper.PosDoSelIndex('0');

		this.SIDE_SALE_IN_PROGRESS = true;

		return true;
	}
	
	this.Select = function(sellSequence)
	{
		if(!sellSequence)
			return false;
			
		PosDoSelBySellSequence(sellSequence);
	}

	this.Cancel = function()
	{
		if(this.SIDE_SALE_IN_PROGRESS)
			PosVoidSideSale();
		this.SIDE_SALE_IN_PROGRESS = false;
	}

	this.Finish = function()
	{
		if(this.SIDE_SALE_IN_PROGRESS){
			//CSO-1390 - [6.1.31-SP8.5][GQT][COE]Kiosk:When ordering signature crafted meal,a meal cannot be ordered when the order is placed by selecting a sandwich.
			PosConvertProduct();
			PosMergeSideSale();
			PosNGKGrillMonopoly();
		}
		this.SIDE_SALE_IN_PROGRESS = false;	
	}

	this.SetAmount = function(amount, sellSequence)
	{
		if(!this.SIDE_SALE_IN_PROGRESS)
		{
			API.dbg("[SideSaleHelper] - There is no side sale in progress");
			return;
		}

		// CSO-1282 - [6.1.31-SP8.5][GQT][COE][US] SCR meals are not added if we increase the quantity at PDP screen
		if(!amount)
			return;
		
		if(!sellSequence || sellSequence=="null")
		{
			API.dbg("[SideSaleHelper] - Invalid sell sequence");
		}
		
		var diff = new BigDecimal(amount) - KioskViewHelper.GetQuantity(KioskViewHelper.FindCurrentIndex(sellSequence));
		if(diff != 0)
			PosSaleIncrementItem(diff.toString());
	}

	this.SetAmountActive = function(amount)
	{
		if(!this.SIDE_SALE_IN_PROGRESS)
		{
			API.dbg("[SideSaleHelper] - There is no side sale in progress");
			return;
		}

		if(!amount || parseInt(amount) == 1)
			return;

		var hlp = new BusinessObjectHelper;
		var orderView = new XML(hlp.getCurrentView());
		var kioskOrderView = new XML(getKioskView(orderView.toString()));
		var promotionCounter = "0";
		var dealId = "0";

		//Find the counter of the new activated promotion (Only one promotion applied is expected at this point, as it is in a side sale)
		for each (var promotion in kioskOrderView.Order.Promotions.Promotion)
		{
			dealId = promotion.@promotionId.toString();
			promotionCounter = promotion.@counter.toString();
		}
		
		// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
		if (dealId == "0"){
			for each (var itemOffer in kioskOrderView.Order.Offers.Offer)
			{
				dealId = itemOffer.@offerId.toString();
				promotionCounter = itemOffer.@promotionCounter.toString();
			}
		}

		for(var i = 1; i < parseInt(amount); i++)
		{
			PosNGKDoCloneDeal(dealId, promotionCounter, true);
			var kioskOrderView = new XML(getKioskView(orderView.toString()));
		}
	}
	
	this.Choice = function(choiceList, grillList, sellSequence)
	{
		if(!this.SIDE_SALE_IN_PROGRESS)
		{
			API.dbg("[SideSaleHelper] - There is no side sale in progress");
			return false;
		}
		
		if(!sellSequence || sellSequence=="null")
		{
			API.dbg("[SideSaleHelper] - Invalid sell sequence");
		}
		
		PosNGKPerformValueMealUpdateChoice(sellSequence, choiceList, grillList);
		
		PosDoSelBySellSequence(sellSequence);
	}
	
	this.Add = function(prodInfo)
	{
		if(!prodInfo)
			return false;

		if(this.SIDE_SALE_IN_PROGRESS)
		{
			var injectArray = prodInfo.split("|");
			//If the length is equal to 1, i.e we have only the productCode, its a passive mode
			if(injectArray.length == 1)
			{
				API.dbg("[SideSaleHelper - ADD] prodCode: " + injectArray[0]);
				PosDoSale(injectArray[0]);
			}
			else
			{
				var prodCode = injectArray[0];
				var promotionId = injectArray[1];
				var promoCounter = injectArray[2];
				var stepNumber = injectArray[3];
				var offerId = injectArray[4];
				API.dbg("[SideSaleHelper - ADD] prodCode: " + prodCode + " PromotionID " + promotionId + " promoCounter " + promoCounter + " stepNumber " + stepNumber + " offerID " + offerId);
				PosDoSale(prodCode, false, 0, promotionId, promoCounter, stepNumber, offerId);
			}
		}
		return true;
	}
	
	this.Remove = function(sellSequence)
	{
		if(!sellSequence)
			return false;

		if(this.SIDE_SALE_IN_PROGRESS)
		{			
			PosDoSelBySellSequence(sellSequence);
			var hlp = new BusinessObjectHelper;
			var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
			API.dbg("[SideSaleHelper - REMOVE] kioskOrderView: " + kioskOrderView);
			
			// CSO-1403 - NGK5.17.2 [Monopoly] - In NGK if user change the prize product then both previous and changed product are added to order
			// The BC PosSaleIncrementItem('-1') fails if the result will be an empty sale, so if the quantity is 1 we need to use the BC PosDoVoidLine()
			var quantity = "";
			if (kioskOrderView.Order.Item &&
				kioskOrderView.Order.Item.(@currentSelected == "true") &&
				kioskOrderView.Order.Item.(@currentSelected == "true").Product)
			{
				quantity = kioskOrderView.Order.Item.(@currentSelected == "true").Product.@qty;
			}
			if (quantity == "1")
			{
				PosDoVoidLine();
			}
			else
			{
				PosSaleIncrementItem('-1');
			}
		}
		return true;
	}
	
	function RemovePromotionForEdit(indexes)
	{
		//Verify if this indexes match a promotion applied
		var hlp = new BusinessObjectHelper;
		var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		for each (var promotion in kioskOrderView.Order.Promotions.Promotion)
		{
			if(promotion.@memberIndexes == indexes)
			{
				//Remove the promotion, if its passive
				PosNGKRemovePromotionJS(promotion.@promotionId, promotion.@counter);
			}
		}
	}
};

/**
 * @brief - Helper used to centralize kiosk order view queries
 * @author - Rafael Azevedo
 * @since - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
 */
var KioskViewHelper = new function()
{
	this.View = function()
	{
		var hlp = new BusinessObjectHelper;
		var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		//API.dbg("[KioskViewHelper][View] " + kioskOrderView);
		return kioskOrderView;
	}

    //CSO-1358 - POS-516 - Support the Bottle Deposit Scheme at Kiosk
	this.ReformatView = function(view)
	{
		// move deposit tags to inside ItemView
		var re = new RegExp('</ItemView>\\s*<Deposit', 'g');
		var localView = view.replace(re,'<Deposit');

		re = new RegExp('</Deposit>', 'g');
		localView = localView.replace(re,'</Deposit></ItemView>');

		return localView;
	}
	
	this.GetQuantity = function(index)
	{	
		var item = this.View().Order.Item.(@index == index);
		return new BigDecimal(item.Product.@qty);
	}
	
	this.FindCurrentIndex = function(currentSellSequence)
	{
		for each (var item in this.View().Order.Item)
		{
			for each (var product in item.Product)
			{
				var sellSequences = product.@sellSequence.split("|");
				for each (var sellSequence in sellSequences)
				{
					if(sellSequence == currentSellSequence)
					{
						API.dbg("[KioskViewHelper - FindCurrentIndex]: Sellsequence " + currentSellSequence + " found, Kiosk index: " + item.@index + " NP6 index: " + item.@indexInternal);
						return item.@index;
					}
				}
			}
		}
		
		API.dbg("[KioskViewHelper - FindCurrentIndex]: Sellsequence " + currentSellSequence + " not found in current order view");
		return "0";
	}
	
	this.FindInternalIndexes = function(indexes)
	{
		var indexesArray = indexes.split('|');
		var indexesInternalArray = [];
						
		var kioskOrderView = this.View();
		for each (var item in indexesArray)
		{
			indexesInternalArray.push(kioskOrderView.Order.Item.(@index == item).@indexInternal.toString());
		}
		var result = indexesInternalArray.join('|');
		API.dbg("[KioskViewHelper - FindInternalIndexes]: Indexes " + indexes + " | InternalIndexes:" + result);
		
		return result;
	}
	
	this.FindCurrentSellSequence = function(index)
	{
		if(!index)
			index = "0";

		var item = this.View().Order.Item.(@index == index);
		if(item != undefined){
			var sellSequences = item.Product.@sellSequence.split("|");
			for each (var sellSequence in sellSequences)
			{
				if(sellSequence != "")
				{
					return sellSequence;
				}
			}
		}
		
		return "0";
	}
	
	this.PosDoSelIndex = function(index)
	{
		API.dbg("[KioskViewHelper][KioskViewHelper.PosDoSelIndex] index: " + index);
			
		var attempts = 0;
		var maxAttempts = 2;
		
		while(attempts < maxAttempts)
		{	
			var isSelected = this.View().Order.Item.(@index == index).@currentSelected == "true";
			if(isSelected)
			{
				API.dbg("[KioskViewHelper][KioskViewHelper.PosDoSelIndex] Item selected successfully!");
				return true;
			}
			
			API.dbg("[KioskViewHelper][KioskViewHelper.PosDoSelIndex] attempt: " + attempts);
			
			PosDoSelIndex(index);
			
			API.dbg("[KioskViewHelper][SaleStatus]: " + hlp.getSaleStatus ());
			attempts++;
		}
		
		return false;
	}
};

/**
 * @brief - Helper used to centralize kiosk grill view queries
 * @author - Rafael Azevedo
 * @since - CSD-182 - [NGK 5.17 - Grill] Grill applied incorrectly if Value Meal has composition with default qtty>1
 */
var KioskGrillViewHelper = new function()
{
	this.FindGrillIndexByState = function(prodCode, state) {
		
		API.dbg("[KioskGrillViewHelper][KioskGrillViewHelper.FindGrillIndexByState] prodCode: " + prodCode);

		var hlp = new BusinessObjectHelper;
		
		if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId"))){			
			return -1;
		}
		
		var search = function(){
			
			var jsonGrillView = JSON.parse(hlp.getFormattedGrillView());
			
			if(!jsonGrillView)
				return -1;

			var grillableProductList = jsonGrillView.GrillableProductList;
			
			if(!grillableProductList)
				return -1;
			
			for(var i = 0; i < grillableProductList.length; i++){
				
				var grillableItem = grillableProductList[i];
				
				// CSO-1300 - SP8.5 PR1-Kiosk: Kiosk is frozen Cannot able to make it a Meal in the VM PDP Screen for a Customized burger. Unwanted message is displaying with "Cannot customize this item" with [OK] button
				if (grillableItem.ProductCode == prodCode)
				{
					var result = PosDoSelGrillIndex(i);

					var compList = JSON.parse(hlp.getFormattedGrillView()).IngredientList;

					var grills = [];
					
					var ingrIndex = 0;
					for each(var comp in compList){
						var grillModifier = hlp.getGrillModifiers(0, ingrIndex);
											
						//CSO-1460 - [6.1.31-SP8.5][GQT][COE] Kiosk : If we grill any item and then revert the grill instruction - Grill instruction is still showing in order review screen and receipt
						if (grillModifier != "0") {
							grills.push(comp.ProductCode + "," + "0" + "," + grillModifier);
						}
						else  if (comp.CurrQuantity != comp.DefQuantity) {
								grills.push(comp.ProductCode + "," + comp.CurrQuantity + "," + grillModifier);
						}
						ingrIndex++;
					}
					
					var sort = function(a, b){
						var prodA = a.split(',')[0];
						var prodB = b.split(',')[0];
						
						return a < b ? -1 : 1;
					}
					
					var sortedState = state.split(';').sort(sort).join(';');
					var sortedGrill = grills.sort(sort).join(';');
					
					API.dbg("[KioskGrillViewHelper][FindGrillIndexByState] sortedState: " + sortedState);
					API.dbg("[KioskGrillViewHelper][FindGrillIndexByState] sortedGrill: " + sortedGrill);

					if(sortedState == sortedGrill)
						return i.toString();
				}
			}
			
			return -1;
		};
		
		var result = search();
		
		PosDoGrillEnd("3");

		return result;
	}
};

/**
 * @brief - Determines which screen the UI should show after a Side Sale operation, based on parameter
 * @param - redirectTo - Screen that should be shown in the UI
 * @author - Robert Abreu
 * @since - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
 */
function RedirectAfterOperation(redirectTo)
{
	if(redirectTo == "ORDER_REVIEW")
	{
		// CSO-972 - [6.1.29-SP8][GQT][COE] When we make an order in Kiosk and if you want to go back and edit it,then if we select any product it is showing the message PRODUCT IS NOT ACTIVE
		PosNGKEnqueueWFJS(SHARED_CTX["KEY_WF_NGK_FINAL_SHOW_ORDER_REVIEW"]);
	}
	else if (redirectTo == "MAIN_SCREEN")
	{
		lGoToMainScreen(true);
	}
}

/**
 * @brief - Sends a message to the UI to display the Order Review Screen
 * @author - Leandro Pereira
 * @since - CSO-745 - POS-340 - Order Basket Redesign 
 */
 function PosNGKShowOrderReview() {
	 
	var hlp = new BusinessObjectHelper;
	var orderView = new XML(hlp.getCurrentView());
	var kioskOrderView = new XML(getKioskView(orderView.toString()));	

	// CSO-1444 - [DRM] Kiosk SP8.5 MR1QR0 B21 TC2 :[Mobile offer redemption]: Offer name with "Offer not yet applied message" is not getting displayed on order review screen when offer is scanned but offer condition is not met.
	// Check if cart is empty and, if it is, do not show order review;
	if(kioskOrderView.Order.Item.(@voided == "false").length() <= 0){
		PosNGKCheckAndExecuteBackFromTotal();
		return true;
	}

	var eventXml = new XML('<Event type="ASYNC" name="DLG_ORDER_REVIEW"/>');
	 
	 // SQC-9978 [Kiosk 5.16 - Order Basket] It is possible close "eat in" order with products "only take out"
	 eventXml.DisplayChangeEatingLocation = false;
	 
	 // CSO-464 - NGK- RMHC Donation Feature - 8011722
	 // CSO-1105 - KIOSK SP8 MR2 Prerelease 1: Change amount $1.00 displayed on customer receipt for cashless(Gift card only) take out transaction with $1 RMHC donation 
	 if (PosCSORMHCCheckDonationAvailability() && (PosCSORMHCCheckDonationInCartStatus() == "notfound")) {
		 var donationButtonsXml = new XML('<DonationButtons/>');

		 // Donation Fixed Values
		 var donationFixedValues = lGetParameterStr("RMHC.setAmountButtons", "");
		 // Donation RoundUp Button Enabled
		 var donationEnableRoundUpButton = lGetParameterStr("RMHC.enableRoundUpButton", "false");
		 // Donation Product Code
		 var donationProductCode = lGetParameterStr("RMHC.donationProductCode", "");
		
		 // Get donation button values.
		 var roundupValue = "";
		 var fixedValues = PosNGKGetFixedAmountDonationValues(donationFixedValues);

		 var hlp = new BusinessObjectHelper; 
		 roundupValue = hlp.calculateDonationValue(donationProductCode, 0, "roundUp");
		
		 // Add "donation button".
		 // The donation buttons are send as normal buttons because the NP method doesn't handle the donation property.

		 var donationProductCartStatus = PosCSORMHCCheckDonationInCartStatus();

		 if (donationProductCartStatus == "found") {
			 var layoutButtonRemove = new XML('<layoutButton/>');
			 // 'Remove' button
			 layoutButtonRemove.@type = "DONATION";
			 layoutButtonRemove.@operation = "REMOVE";
			 layoutButtonRemove.@label = "REMOVE";
			 layoutButtonRemove.@value = PosCSOI18nGetMessageJS("CSO_RMHC_REMOVE_DONATION");
			 layoutButtonRemove.@fixedAmount01 = "";
			 layoutButtonRemove.@fixedAmount02 = "";
			 layoutButtonRemove.@fixedAmount03 = "";
			 donationButtonsXml.appendChild(layoutButtonRemove);
		 }
		 else {
			 // 'Round up' button
			 if (donationEnableRoundUpButton == "true") {
				 var layoutButtonRoundUp = new XML('<layoutButton/>');
				 layoutButtonRoundUp.@type = "DONATION";
				 layoutButtonRoundUp.@operation = "ROUNDUP";
				 layoutButtonRoundUp.@label = "ROUNDUP";
				 layoutButtonRoundUp.@value = roundupValue;
				 layoutButtonRoundUp.@fixedAmount01 = "";
				 layoutButtonRoundUp.@fixedAmount02 = "";
				 layoutButtonRoundUp.@fixedAmount03 = "";
				 donationButtonsXml.appendChild(layoutButtonRoundUp);
			 }
			 // 'Fixed' button
				for	(index = 0; index < fixedValues.length; index++) {
				 var layoutButtonFixed = new XML('<layoutButton/>');
				 sessionSale.set("DONATION.FIXED" + (index + 1).toString(), fixedValues[index]);
				 layoutButtonFixed.@type = "DONATION";
				 layoutButtonFixed.@operation = "FIXED" + (index + 1).toString();
				 layoutButtonFixed.@label = "FIXED" + (index + 1).toString();
				 layoutButtonFixed.@value = fixedValues[index];
				 layoutButtonFixed.@fixedAmount01 = "";
				 layoutButtonFixed.@fixedAmount02 = "";
				 layoutButtonFixed.@fixedAmount03 = "";
				 donationButtonsXml.appendChild(layoutButtonFixed);
			 }
		 }
	 }
	 
	 // SQC-9978 [Kiosk 5.16 - Order Basket] It is possible close "eat in" order with products "only take out"
	 if(lGetCSOUserInterfaceStringParameter("product.enableSaleTypeValidation", "false") == "true"){
		 
		 var productSaleType = PosCheckSaleTypeFromCurrentProductInCart();
		 if (productSaleType != "" && productSaleType != undefined && 
		    ((productSaleType == "EATIN" && sessionSale.get("NGK_SALE_TYPE") == "1") ||
			(productSaleType == "TAKEOUT" && sessionSale.get("NGK_SALE_TYPE") == "0")))
		{
			eventXml.DisplayChangeEatingLocation = true;
			
		}else{
			eventXml.DisplayChangeEatingLocation = false;
		}
	 }

	 if (donationButtonsXml)
		eventXml.appendChild(donationButtonsXml);

	// SQC-9997 [Kiosk 5.16 - Order Basket] Incorrect flow  when select "Edit" (from Order Summary) and "Cancel" 
	PosSetSessionProperty("NGK_IS_ORDER_REVIEW", "false");
	
	var customGreeting = sessionSale.get("NGK_WELCOME_MESSAGE");
	if(customGreeting && customGreeting != "") {
		eventXml.CustomGreeting = customGreeting;
		sessionSale.set("NGK_WELCOME_MESSAGE",null);
	}
	return PosSendUICmd(eventXml.toXMLString());
 }


 /**
 * @brief - Begins and Finalizes the changing item process
 * @param - operCode - Operation to be performed
 * @author - Dalton Pericles de Almeida
 * @since - CSO-997 - [6.1.29-SP8][GQT][COE] Cannot change the quantities of the order item after you remove the promotion 'Mac Pick 2 for 5$', also wrong message pops-up showing 'offer' instead of 'promotion', when you make order on KIOSK.
 */
function PosNGKChangeItemJS(operCode)
{
	switch(operCode)
	{
		case "START":
			ChangeItemHelper.Start();
			return true;
		case "END":
			ChangeItemHelper.Finish();
			return true;
	}
	return true;
}


/**
 * @brief - Helper used to initialize and to finalize the item changes
 * @author - Dalton Pericles de Almeida
 * @since - CSO-997 - [6.1.29-SP8][GQT][COE] Cannot change the quantities of the order item after you remove the promotion 'Mac Pick 2 for 5$', also wrong message pops-up showing 'offer' instead of 'promotion', when you make order on KIOSK.
 */
var ChangeItemHelper = new function()
{
	this.CHANGINGITEMSTARTED = false;
	
	this.Start = function()
	{
		if (typeof(PosStopSaleNormalization) == 'function' && !this.CHANGINGITEMSTARTED)
		{
			PosStopSaleNormalization();
			this.CHANGINGITEMSTARTED = true;
		}
	}

	this.Finish = function()
	{
		if (this.CHANGINGITEMSTARTED)
		{
			if (typeof(PosStartSaleNormalization) == 'function')
			{
				PosStartSaleNormalization();
			}
			this.CHANGINGITEMSTARTED = false;
		}
	}
};

/**
 * @brief - Tests if the Kiosk is on order review
 * @author - MY
 * @since - CSO-745 - POS-340 - Order Basket Redesign 
 */
function PosCSOIsOrderReview(isOrderReview){
	if("true"==isOrderReview) {
		return true;
	}
	else {
		return false;
	}
}

/**
 * @brief - Remove an item from the current order
 * @author - Robert Abreu
 * @since - CSO-745 - POS-340 - Order Basket Redesign 
 */
function PosNGKRemoveItemJS(itemIndex){
	KioskViewHelper.PosDoSelIndex(itemIndex);
	PosDoVoidLine();
	//If the order is empty, go to main screen
	var hlp = new BusinessObjectHelper;
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	for each (var item in kioskOrderView.Order.Item) {
		if(item.@voided == "false")
			return true;
	}
	// CSO-972 - [6.1.29-SP8][GQT][COE] When we make an order in Kiosk and if you want to go back and edit it,then if we select any product it is showing the message PRODUCT IS NOT ACTIVE	
	return false;
}

/**
 * @brief - This BC wrappers new pos bc PosRunAutoBundling
 * @return - returns true if auto bundling resulted in changes in the view; else otherwise
 * @author - Rafael Azevedo
 * @since - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
 */
function PosNGKRunAutoBundling()
{
	var hlp = new BusinessObjectHelper();
	
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));		
	
	var oldItemQty = 0;
	for each(var item in kioskOrderView.Order.Item) {
		oldItemQty += parseInt(item.Product.@qty);
	}
	
	PosRunAutoBundling();
	PosRefreshSalePanel();
	
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	
	var newItemQty = 0;
	for each(var item in kioskOrderView.Order.Item) {
		newItemQty += parseInt(item.Product.@qty);
	}
	
	if(oldItemQty != newItemQty)
	{
		var eventXml = new XML('<Event type="ASYNC" name="DLG_ORDER_SAVINGS"/>');
		eventXml.HasSavings = oldItemQty != newItemQty;
		PosSendUICmd(eventXml.toString());
		return true;
	}
	
	return false;
}

/**
 * @brief - This BC was created send an event to UI with the Available promotions
 * @return - 
 * @author - Leandro Pereira
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 */
function PosNGKGetGeneralPromotions(showPromotionScreen){	
	var eventXml = new XML('<Event type="ASYNC" name="DAT_GET_GLOBAL_PROMOTION_INFO" />');
	eventXml.Data = hlp.getGlobalPromotions();
	eventXml.ShowPromotionScreen = showPromotionScreen;
	PosSendUICmd(eventXml.toString());
	return true;
}
  
 /**
 * @brief - This BC was created to get the steps of a specific promotion
 * @return - 
 * @author - Leandro Pereira
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 */
function PosNGKGetPromotionSteps(promotionID, isOnEditMode){
	var eventXml = new XML('<Event type="ASYNC" name="DAT_GET_PROMOTION_STEP" />');
	
	var promotionInfo = JSON.parse(hlp.getPromotionSteps(promotionID, sessionSale.get("NGK_SALE_TYPE")));
	
	var result = lGetStepsInformation(promotionInfo, isOnEditMode);

	eventXml.Data = result;
	eventXml.PromotionID = promotionID;
	eventXml.IsOnEditMode = (isOnEditMode) ? isOnEditMode : false;
	
	PosSendUICmd(eventXml);
return true;
}

 /**
 * @brief - Get the steps of a specific offer
 * @return - 
 * @author - Robert Abreu
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 */
function PosNGKGetOfferSteps(offerID, customerID, isOnEditMode)
{
	var eventXml = new XML('<Event type="ASYNC" name="DAT_GET_OFFER_STEP" />');
	
	var apiResponse = hlp.getOfferSteps(offerID, customerID, sessionSale.get("NGK_SALE_TYPE"));
	var offerInfo = JSON.parse(apiResponse);
	
	var result = lGetStepsInformation(offerInfo, isOnEditMode);
	
	//CSO-1328 - [6.1.31][SP8.5][GQT][COE] Eligible Items are not being displayed when we scan an offer in Kiosk
	if(result == "" || result == undefined || result == null || result == "[]")
	{
		API.dbg("PosNGKGetOfferSteps - Get Steps failed");
		API.dbg("PosNGKGetOfferSteps - offerID: " + offerID + " customerID: " + " NGK_SALE_TYPE: " + sessionSale.get("NGK_SALE_TYPE"));
		API.dbg("PosNGKGetOfferSteps - apiResponse received: " + apiResponse);
	}
	
	eventXml.Data = result;
	eventXml.OfferID = offerID;
	eventXml.IsOnEditMode = (isOnEditMode) ? isOnEditMode : false;
	
	//The API dont return the names for offers without steps.
	//For this case, do a backup of offer information from the OfferDetails
	eventXml.DataBkp = PosGetCurrentOfferDetail("ALL");
	
	PosSendUICmd(eventXml);
}

 /**
 * @brief - Get the size information based on loaded products for promotion
 * @return - 
 * @author - Leandro Pereira
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 */
function lGetStepsInformation(dealInfo, isOnEditMode)
{
	if (dealInfo)
	{
		for each(item in dealInfo){
			// Get the size selection information:
			if (item.ProductCodes){
				var productSizeInformationList = new Array();
				
				for each(stepProductCode in item.ProductCodes){
					
					if (!productSizeInformationList[stepProductCode]){
						productSizeInformationList[stepProductCode] = lGetStepSizeInformation(stepProductCode, isOnEditMode);
					}
				}
			
				 var productSizeInformationXml = new XML('<SizeInformationList/>');
				 for each(sizeselectionitem in productSizeInformationList){
					 if (sizeselectionitem){
						 productSizeInformationXml.appendChild(sizeselectionitem);
					 }
				}
				
				// CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
				lAddChoiceUpsellingPrice(productSizeInformationXml);
				lReplaceSizePriceByCombinedPrice(productSizeInformationXml);
				//CSO-106 - NGK - Update the total price in the value meal loop when showUpliftPrices is set to false
				lAddSizeUpsellingPrice(productSizeInformationXml);
				
				//CSO-36 - NGK v5.3 - Meal Loop Enhancements to Management/Display of Choices - 7160823
				var groupChoicesByFlavor = (lGetCSOUserInterfaceStringParameter("groupChoicesByFlavour", "false") == "true");
				if (groupChoicesByFlavor)
				{
					lAddFlavors(productSizeInformationXml);
				}
				item.SizeSelectionProducts = productSizeInformationXml.toString();
			}
		}
	}
	dealInfo = JSON.stringify(dealInfo);
	
	return dealInfo;
	
	function lGetStepSizeInformation(stepProdCode, isOnEditMode){
		
		if (!bShowProduct(stepProdCode)){
			return "";
		}

		//CSO-1251 - NGK 5.17 - Active Promotions containing products/meals with Auto Choices that have extra items in the choice causing Kiosk to "hang"
		var displayAutoChoice = false;
		if(isOnEditMode != undefined && isOnEditMode.toLowerCase() == "true")
			displayAutoChoice = true;
		
		// SQS-193 [NGK5.17 - Active Mode] Kiosk does not group products configured with Dimension/ Flavor Group
		sessionSale.set("GET_VALUE_MEAL_FROM_PROMOTION","true");
		var valueMealResultInformation = PosNGKGetValueMealXML(stepProdCode, null, false, "", displayAutoChoice, "", "", false, undefined, true);
		sessionSale.set("GET_VALUE_MEAL_FROM_PROMOTION","");

		var groupChoicesByFlavor = (lGetCSOUserInterfaceStringParameter("groupChoicesByFlavour", "false") == "true");
		
		var listOfSizeInformation = new XML(valueMealResultInformation);
							
		var stringCodesOfSizes ="";
		var minSizeEntry;
		
		// Avoid load the size for CCM products
		for each(var itemCode in listOfSizeInformation.Product){
			if (itemCode.@isCCM != "true"){
				// Get the min size entry
				if (minSizeEntry){
					if (parseInt(itemCode.@size) < minSizeEntry)
						minSizeEntry = parseInt(itemCode.@size);
				}
				else 
					minSizeEntry = parseInt(itemCode.@size);
				
				stringCodesOfSizes += itemCode.@code + "|";
			}
		}
							
		if (!stringCodesOfSizes)
			stringCodesOfSizes = stepProdCode
							
		// Get the Flavor Name based on min size product entry
		var sizeGenericName ="";
		var productCodeMinSizeEntry = listOfSizeInformation.Product.(@size == minSizeEntry).@code[0];
		
		//If the product does not have a size
		if (!productCodeMinSizeEntry)
			productCodeMinSizeEntry = stepProdCode;
		
		var stepProductInfo = csoProductInfo[productCodeMinSizeEntry.toString()];
		var language = sessionSale.get("LANGUAGE");
		if (stepProductInfo){
			sizeGenericName = stepProductInfo.names[language] ? stepProductInfo.names[language].csoGenericName : "";
		}
				
		// Get the image based on min size product entry
		var agrouppedSizesImage = listOfSizeInformation.Product.(@size == minSizeEntry).@image[0];
		for each (var itemProductSize in listOfSizeInformation.Product){
			//Returns the information only if the feature is enabled
			if (groupChoicesByFlavor){
				itemProductSize.@agrouppedSizes = stringCodesOfSizes;
				itemProductSize.@agrouppedSizesName = sizeGenericName;
				itemProductSize.@agrouppedSizesImage = agrouppedSizesImage;	
			}else{
				//CSO-1214 - NGK 5.17 - Promotion PDP showing blank boxes, Ø symbol displays instead of the “Select Choice text” and choices display CSOSizeName
				itemProductSize.@agrouppedSizes = stepProdCode;	
			}
					
			if (itemProductSize.@code != stepProdCode){
				// Returns only the information about the current product set
				var index = listOfSizeInformation.Product.(@code == itemProductSize.@code.toString())[0].childIndex();
				delete listOfSizeInformation.Product[index];
			}
		}
		return listOfSizeInformation;
	}
}

/**
 * @brief - Retrieve BYB info from product
 * @return -
 * @author - Rafael Azevedo
 * @since - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
 */
function PosNGKGetBYBInfo(prodCode, uiSellSequence)
{
	var eventXml = new XML('<Event type="ASYNC" name="DAT_BYB_INFO_VML" />');
	var index = KioskViewHelper.FindCurrentIndex(uiSellSequence);
	var bybXml = lPosNGKGrillBYB(prodCode, index, "|" + uiSellSequence + "|");
	eventXml.appendChild(bybXml);
	PosSendUICmd(eventXml);
	return true;
}

/**
 * @brief - Test if the current NewPOS version has the SideSale feature. If not, send a hard block screen to UI.
 * @return -
 * @author - Robert Abreu
 * @since - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
 */
function PosNGKIsSideSaleAvaliable()
{
	if(!(typeof PosCreateSideSale == 'function'))
	{
		var hlp = new BusinessObjectHelper; 
		var msgText = hlp.getSysMessage("CSO_MSG_MINIMUM_NEWPOS_VERSION"); 
		PosSendUICmd(lcreateBlockUnblock("UI_HARD_BLOCK", "CSO_MSG_MINIMUM_NEWPOS_VERSION", msgText)); 
		API.dbg("INFO_CSO : Kiosk UI has been BLOCKED - msg: [" + msgText + "]");
	}
	
	return true;
}

/**
* @brief Send a message to Kiosk so that it shows the barcode reader for promotions
* @see FR3 from POS-71 spec.
* @author cseragiotto
* @since CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
* @return true
*/
function PosNGKShowPromotionBarcodeReader()
{	
    var screenId = hlp.findParamInSectionWide("promotionScreenId", "CSO.ActiveMode");
    if (screenId == undefined || screenId == null)
    {
        API.dbg("<promotionScreenId> not defined under <CSO.ActiveMode>: unable to open promotion barcode reader screen");
        PosCSOSendSyncMessageJS(
			"DLG_NGK_SIMPLE_MSG", 
			new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
			["true", "false"], 
			PosCSOI18nGetMessageJS("CSO_MSG_KEY_GENERIC_ERROR") + "|ScreenNameKey:CSO_MSG_KEY_GENERIC_ERROR");
        PosNGKShowCouponsLandingScreen();
        return true;
    }
	
	//The maximum number of barcode characteres [20] is defined in RFM documentation - RFM_7139156
    var keyboardSizeTag = new XML("<KeyboardSize>20</KeyboardSize>");
	var couponTypeTag = new XML("<CouponType>GlobalPromotion</CouponType>");
    var titleTag = new XML("<Title>NGK_BTN_PROMOTIONS</Title>");
    var modeTag = new XML("<Mode>KeypadMode</Mode>");
    var scanTitleTag = new XML("<ScanTitle>CSO_COUPON_PROMOTION_LBL_SCAN</ScanTitle>");
    var enterTitleTag = new XML("<EnterTitle>CSO_COUPON_PROMOTION_LBL_ENTER</EnterTitle>");
    var workflowTag = new XML("<Workflow>WF_NGK_GET_PROMOTION_ID_BY_BARCODE</Workflow>");
    
	var promotionTag = new XML("<Promotion />");
	promotionTag.appendChild(keyboardSizeTag);
	promotionTag.appendChild(couponTypeTag);
    promotionTag.appendChild(modeTag);
    promotionTag.appendChild(titleTag);
    promotionTag.appendChild(scanTitleTag);
    
    promotionTag.appendChild(enterTitleTag);
    promotionTag.appendChild(workflowTag);

	var xml = new XML("<Event type='ASYNC' name='DLG_PROMOTION_BARCODE_READER'/>");
	xml.appendChild(promotionTag);    
	PosSendUICmd(xml);
    
    return true;
}

/**
* @brief retrieve promotion details given a barcode
* @param barcode an integer representing a promotion barcode
* @author cseragiotto
* @since CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
* @return the following (possibly empty) JSON structure describing the promotions related to the barcode passed as parameter
* (it's possible to have more than one promotion for the same barcode):
* <code>
* Promotions: [
*   {
*   PromotionId:                integer,
*   PromotionType:              string,
*   IsActive:                   boolean,
*   Name:                       string,
*   LongDescription:            string,
*   ShortDescription:           string,
*   PromotionProducts:          array of integers,
*   AnyProduct:                 boolean,
*   Exclusive:                  boolean,
*   Image:                      string,
*   RedemptionMode:             string,
*   CountTowardsPromotionLimit: boolean,
*   AllowedQty:                 integer,
*   RejectionCause:             string
*   }
* ]
* </code>
* Note: if more than one promotion is returned, none of them has errors. If only one promotion is returned, it may - or may not - have errors.
*/
function GetPromotionsByBarcode(barcode)
{
	var barcodeResponse = hlp.validateBarcodeOffer(barcode);
	API.dbg("NGK - GetPromotionsByBarcode - barcodeResponse: barcodeResponse");
	//[Error:12:1] - Error returned when the NP# is not running
	if(!barcodeResponse || barcodeResponse == "[Error:12:1]")
		return [];
	
    var promotions = JSON.parse(barcodeResponse);
    if (!promotions || promotions.length == 0)
    {
        return [];
    }
    if (promotions.length === 1)
    {
        return promotions;
    }
    var promotionsWithNoErrors = promotions.filter(function(p) { return (IsValidRejectionCause(p.RejectionCause)); });
    if (promotionsWithNoErrors.length === 0)
    {
        return [promotions[0]];
    }    
    return promotionsWithNoErrors;
}

/**
* @brief Show a pop-up window for a recognized deal with error
* @param promotion A JSON structure for a promotion
* @see FR4 (item 3.2) from POS-71 spec.
* @author cseragiotto
* @since CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
*/
function ShowDealErrorPopup(promotion)
{
    var rejectionCauseI18N = ConvertRejectionCauseToI18N(promotion.RejectionCause);
	
	var errorDescriptionTag = new XML("<ErrorDescription>" + rejectionCauseI18N + "</ErrorDescription>");	
	var dealNameTag = new XML("<DealName>" + lWrapXmlValue(promotion.Name) + "</DealName>");
	var shortDescriptionTag = new XML("<ShortDescription>" + lWrapXmlValue(promotion.ShortDescription) + "</ShortDescription>");
	var longDescriptionTag = new XML("<LongDescription>" + lWrapXmlValue(promotion.LongDescription) + "</LongDescription>");	
	//CSO-1221- [6.1.31-SP8.5][GQT][COE] - Pop-up message for offer scan is not correct and does not include required buttons
	var showMorePromotions = "true";
	var POSPromotionsEnabled = hlp.findParamInSectionWide("isEnabled", "Promotion") == "true";
	var screenId = hlp.findParamInSectionWide("promotionScreenId", "CSO.ActiveMode");
	if (!POSPromotionsEnabled || screenId == undefined || screenId == null)
		showMorePromotions = "false";
	var showMorePromotionsButton = new XML("<ShowMorePromotionsButton>"+showMorePromotions+"</ShowMorePromotionsButton>");
		
    var promotionErrorPopupTag = new XML("<PromotionErrorPopup />");
    promotionErrorPopupTag.appendChild(errorDescriptionTag);
    promotionErrorPopupTag.appendChild(dealNameTag);
    promotionErrorPopupTag.appendChild(shortDescriptionTag);
    promotionErrorPopupTag.appendChild(longDescriptionTag);
	promotionErrorPopupTag.appendChild(showMorePromotionsButton);
    var xml = new XML("<Event type='ASYNC' name='DLG_DEAL_ERROR_POPUP'/>");
    xml.appendChild(promotionErrorPopupTag);
    PosSendUICmd(xml);
}

function lWrapXmlValue(value) {
	return "<![CDATA["+value +"]]>";
}
/** 
* @brief Translates a NP6 rejection cause to an i18n key kiosk is expecting for
* @param cause a string representing the promotion rejection cause
* @see FR4 (item 3.2.3) from POS-71 spec.
* @author cseragiotto
* @since CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
* @return an i18n key
* @altered: SQS-218 [NGK5.17 - Active Mode] Incorrect message displayed when applying a promotion
*/
function ConvertRejectionCauseToI18N(cause) {
    switch (cause.toLowerCase())
    {
        case "expired":
            return "CSO_ACTIVE_MODE_LBL_ERROR_DEAL_EXPIRED";
        case "invalidstore":
            return "CSO_ACTIVE_MODE_LBL_ERROR_INVALID_STORE";
        case "invalidpod":
            return "CSO_ACTIVE_MODE_LBL_ERROR_INVALID_POD"        
        case "invaliddatetime":
            return "CSO_ACTIVE_MODE_LBL_ERROR_INVALID_DATE_AND_TIME";
        case "invalidsaleschannel":
            return "CSO_ACTIVE_MODE_LBL_ERROR_INVALID_SALES_CHANNEL";
        case "invalidsaletype":
            return "CSO_ACTIVE_MODE_LBL_ERROR_INVALID_SALE_TYPE";
        case "invalidsetofproducts":
            return "CSO_ACTIVE_MODE_LBL_ERROR_INVALID_PRODUCT_SET";
        case "invalidtendertype":
            return "CSO_ACTIVE_MODE_LBL_ERROR_INVALID_TENDER_TYPE";
		case "invaliditemquantity":
            return "CSO_ACTIVE_MODE_LBL_ERROR_INVALID_ITEM_QUANTITY";
		case "invalidsaleamount":
            return "CSO_ACTIVE_MODE_LBL_ERROR_INVALID_SALE_AMOUNT";
		case "missingproducts":
            return "CSO_ACTIVE_MODE_LBL_ERROR_MISSING_PRODUCTS";
		case "outage":
            return "CSO_ACTIVE_MODE_LBL_ERROR_OUTAGE";
		case "totalpricedidnotdecrease":
		case "individualpricedidnotdecrease":
			return "CSO_MSG_PROMOTION_OVERCHARGE_CANNOT_BE_APPLIED";
        default:
            return "CSO_ACTIVE_MODE_LBL_ERROR_OTHER";
    }
}

/**
 * @brief - Verify if the limits of max number deals were achieved.
 * @return - true if inside limit false otherwise
 * @author - Luiz Couto
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 * @changed - CSO-972 - [6.1.29-SP8][GQT][COE] When we make an order in Kiosk and if you want to go back and edit it,then if we select any product it is showing the message PRODUCT IS NOT ACTIVE
 * @changed - CSD-196 [NGK 5.17.1 - Active Mode] - Kiosk does not display the message informing that the limit for the promotion has been reached
 */
function PosNGKAreDealsInsideLimits(promotionDataReceived, returnInjectionString, dealId, numberVirtualDeals) {
	var hlp = new BusinessObjectHelper;
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	
	// CSO-972 - [6.1.29-SP8][GQT][COE] When we make an order in Kiosk and if you want to go back and edit it,then if we select any product it is showing the message PRODUCT IS NOT ACTIVE
	var promotionData = "";
	
	// CSO-972 - [6.1.29-SP8][GQT][COE] When we make an order in Kiosk and if you want to go back and edit it,then if we select any product it is showing the message PRODUCT IS NOT ACTIVE
	if (!promotionDataReceived || promotionDataReceived == undefined) {
		promotionData = sessionSale.get("PROMOTION_DATA");
	}
	else {
		promotionData = promotionDataReceived;
	}

	// CSO-972 - [6.1.29-SP8][GQT][COE] When we make an order in Kiosk and if you want to go back and edit it,then if we select any product it is showing the message PRODUCT IS NOT ACTIVE	
	sessionSale.set("PROMOTION_DATA", "");
	if (promotionData == "") {
		return true;	
	}

	API.dbg("CSO - PosNGKAreDealsInsideLimits: KioskView: " + kioskOrderView);
	
	var eventXml = new XML('<Event type="ASYNC" name="DAT_ARE_DEALS_INSIDE_LIMIT"/>');
	
	var areDealsInsideLimits = function() {
		var injectionString = "";
		
		var maxPromotionsPerOrder = Number(lGetSectionWideStringParameter("maxPromotionsPerOrder", "Promotion", "0"));
		var maxNumberOfPromotionsAndOffers = Number(lGetSectionWideStringParameter("maxNumberOfPromotionsAndOffers", "Promotion", "1"));
		
		var promotionsData = {};
		
		var promotions = promotionData.split("|");
		
		for (var i = 0; i < promotions.length; i++) {
			var promotion = promotions[i].split(";");
			promotionsData[promotion[0]] = new PromotionData(promotion[0], promotion[1]);
		}
		
		var outputLog = "";
		for each (var item in promotionsData) {
			outputLog += "(" + item.promotionId + "|" + item.allowedQty + ") ";
		}
		API.dbg("PosNGKAreDealsInsideLimits - promotionsData (promotionId|allowedQty) " + outputLog);
		var promotionsPerOrder = 0;
		var promotionsPerOrderAndOffer = 0;
		
		//Count reserved promotions and Offers
		if (kioskOrderView.Order.ReservedDeals.length() > 0){
			if (kioskOrderView.Order.ReservedDeals.ReservedOffer.length() > 0){
				var reservedOfferId = kioskOrderView.Order.ReservedDeals.ReservedOffer.@promotionId.toString();
				if (dealId && reservedOfferId != dealId.toString()){
					if (promotionsData[reservedOfferId])
						promotionsData[reservedOfferId].isDealInsideLimit = false;
				}
				promotionsPerOrderAndOffer +=1;
			}
			
			if (kioskOrderView.Order.ReservedDeals.ReservedPromotions.length() > 0){
				var reservedPromotionList = kioskOrderView.Order.ReservedDeals.ReservedPromotions.@ids.split("|");
				for each(var itemReservedPromoId in reservedPromotionList){
					if (!SideSaleHelper.SIDE_SALE_IN_PROGRESS && promotionsData[itemReservedPromoId])
						promotionsData[itemReservedPromoId].isDealInsideLimit = false;
					promotionsPerOrder +=1;
				}
			}
		}
		//Count Promotions
		for each (var promotion in kioskOrderView.Order.Promotions.Promotion) {
			if (!promotion.@promotionId || promotion.@promotionId == undefined) {
				API.dbg("CSO - PosNGKAreDealsInsideLimits: PromotionId not found in KioskView");
				return true;
			}
			
			API.dbg("PosNGKAreDealsInsideLimits - Increase quantity (1) of promotion with ID " + promotion.@promotionId);
			promotionsData[promotion.@promotionId].promotionQty++;
		}
		
		// Count OFFERS
		var currentOfferPromotionID;
		for each (var offer in kioskOrderView.Order.Offers.Offer) {
			if (!offer.@promotionId || offer.@promotionId == undefined) {
				API.dbg("CSO - PosNGKAreDealsInsideLimits: OfferId not found in KioskView");
				return true;
			}
			
			if (offer.@promotionId != 0)
			{
				API.dbg("PosNGKAreDealsInsideLimits - Increase quantity (1) of offer with ID " + offer.@promotionId);
				
				if (promotionsData[offer.@promotionId].promotionQty == 0){
					promotionsPerOrderAndOffer++;
				}
				
				promotionsData[offer.@promotionId].promotionQty++;
				currentOfferPromotionID = offer.@promotionId
			}
		}
		
		if ((dealId || dealId != undefined) && (numberVirtualDeals || numberVirtualDeals != undefined))
		{
			promotionsData[dealId].promotionQty += parseInt(numberVirtualDeals, 10);
		}

		for each (var promotion in promotionsData) {
			// Increment Quantity for Each Promotion
			   if (promotion.promotionQty > 0 && 
				   promotion.promotionId != currentOfferPromotionID){
				   promotionsPerOrder++;
			   }

			if (promotion.isGreaterThanAllowedQty()) {
				  promotion.isDealInsideLimit = false;
				  promotion.isBlockedByAllowedQty = true;
			 }
		}
		
		API.dbg("PosNGKAreDealsInsideLimits - Total of Promotions and Offers Applied/Reserved: " + (promotionsPerOrder + promotionsPerOrderAndOffer));
		// SQS-160 [NGK5.17 - Active Mode] Promotions should have no limit If the parameters that limit the number of Promotions are set to 0
		if (maxPromotionsPerOrder != "0" &&  (promotionsPerOrder >= maxPromotionsPerOrder || (promotionsPerOrder + promotionsPerOrderAndOffer) >= maxNumberOfPromotionsAndOffers) ) { // REACHED THE LIMIT....
			for each (var promotion in promotionsData) {
				// BLOCK ALL ITEMS, EXCEPT:
				 if (promotion.promotionQty == 0)
					 promotion.isDealInsideLimit = false;
			}
		}

		for each (var promotion in promotionsData) {
			//CSD-194 - [NGK5.17 - Active Mode] Incorret message displayed if the limit of one promotion has been reached
			if (returnInjectionString == true)
			{
				injectionString += promotion.promotionId + ";" + promotion.isDealInsideLimit + ";" + promotion.isBlockedByAllowedQty + "|";
			}
			else
			{
				injectionString += promotion.promotionId + ";" + promotion.isDealInsideLimit + "|";
			}
		}

		function PromotionData(promotionId, allowedQty) {
			this.promotionId = promotionId;
			this.allowedQty = allowedQty;
			this.promotionQty = 0;
			this.isDealInsideLimit = true;
			this.isBlockedByAllowedQty = false;
	
			this.isGreaterThanAllowedQty = function() {
				if (this.promotionQty >= this.allowedQty){
					return true;
				}
				else {
					return false;
				}
			}
		}
		return injectionString;
	}
	
	eventXml.AreDealsInsideLimit = areDealsInsideLimits();
	
	if (returnInjectionString == true) {
		return eventXml.AreDealsInsideLimit;
	}
	else {
		PosSendUICmd(eventXml.toXMLString());
	}

    return true;
}

/**
 * @brief - Duplicate promotion applied to order.
 * @return - true if deal was cloned false otherwise
 * @author - Luiz Couto
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 */
function PosNGKDoCloneDeal(dealId, promotionCounter, isIncrementFromPDP) {
	if (!dealId || Number(dealId) < 0 || !promotionCounter || Number(promotionCounter) < 0) {
		API.dbg("CSO - PosNGKDoCloneDeal: Invalid dealId (" + dealId + ") or promotionCounter (" + promotionCounter + ")");
		return false;
	}

	var hlp = new BusinessObjectHelper;
	var orderView = new XML(hlp.getCurrentView());
	var kioskOrderView = new XML(getKioskView(orderView.toString()));
	var isPromotion = "false";
	var isActiveMode = false;
	
	var dealItem = null;
	var lastCounter = 0;

	//Try to find the Deal in Offers tag
	if(kioskOrderView.Order.Offers.length() > 0)
	{
		for each (var offer in kioskOrderView.Order.Offers.Offer)
		{
			if(offer.@offerId == dealId && offer.@promotionCounter.toString() == promotionCounter)
				var dealItem = offer;
			//Get the last PromotionCounter of the offers
			if(parseInt(offer.@counter) > lastCounter)
				lastCounter = offer.@counter;
		}
	}

	//Try to find the Deal in Promotions tag
	if (dealItem == null && kioskOrderView.Order.Promotions.length() > 0)
	{
		for each (var promotion in kioskOrderView.Order.Promotions.Promotion)
		{
			if(promotion.@promotionId.toString() == dealId && promotion.@counter.toString() == promotionCounter)
			{
				var dealItem = promotion;
				isPromotion = "true";
			}
			//Get the last PromotionCounter of the promotions
			if(parseInt(promotion.@counter) > lastCounter)
				lastCounter = promotion.@counter;
		}
	}
	
	if (dealItem == null) {
		API.dbg("CSO - PosNGKDoCloneDeal: Deal not found in KioskView (dealId=[" + dealId + "] counter=[" + promotionCounter + "])\n" + kioskOrderView);
		return false;
	}
	lastCounter++;

	if(!isIncrementFromPDP)
		SideSaleHelper.Start();
	
	var members = dealItem.@memberIndexes.split("|");
	for each (var index in members) {
		var orderItem = kioskOrderView.Order.Item.(@index == index);
		if (orderItem.length() == 1) {
			var injectPromotionString = orderItem.Product.@code;
			if(orderItem.@ActiveMode == true)
			{
				var promotionID = isPromotion == "true" ? dealId: dealItem.@promotionId;
				
				isActiveMode = true;
				injectPromotionString += "|" + promotionID + "|" + lastCounter + "|" + orderItem.@stepNumber;
				
				if (isPromotion == "false"){
					injectPromotionString += "|" + dealId;
				}
			}
			
			var grillOperations = lCopyGrillOperations(orderItem.Product);
			for( var i = 0; i < Number(orderItem.Product.@qty); i++ ) {
				SideSaleHelper.Add(injectPromotionString);

				//Select the choices of this product
				for each(var itemOrderItem in orderItem)
				{
					for each( var itemProduct in itemOrderItem.Product){
						lDoChoices(itemProduct);
					}
				}
			}
			if(orderItem.@customizable == "true")
				lPasteGrillOperations(grillOperations, 1);
		}
		else {
			API.dbg("CSO - PosNGKDoCloneDeal: Item index = " + index + " not found in KioskView");
		}
	}
	
	if(isActiveMode)
	{
		PosNGKActivateDeals(isPromotion, dealId);
	}
	
	if(!isIncrementFromPDP)
		SideSaleHelper.Finish();
	
	return true;
	
	function lDoChoices(product)
	{				
		for each( var itemChoices in product.Product)
		{
			if(itemChoices.@solvedChoice && itemChoices.@solvedChoice.toString() != "")
			{
				for(var i =0; i < parseInt(itemChoices.@qty); ++i)
					PosDoChoice(itemChoices.@code);
			}
			lDoChoices(itemChoices);
		}
	}
	
	function lCopyGrillOperations(product)
	{
		var stringGrills = [];
		for each( var grill in product.Grill)
		{
			var oper = grill.@code + "," + grill.@qty + "," + grill.@defQty;
			stringGrills.push(oper);
		}
		
		var grillsJoined = stringGrills.join(";");
		var currentGrill = "INPROGRESS:" + grillsJoined + "|" + "APPLIED:" + grillsJoined;

		PosNGKGrillExecuteOperation("START", product.@code, currentGrill, "false", "true");
		
		GLOBAL_NGK_GRILL.currentState = new XML(GLOBAL_NGK_GRILL.initialState);
		GLOBAL_NGK_GRILL.initialState = new XML(GLOBAL_NGK_GRILL.defaultState);
		GLOBAL_NGK_GRILL.appliedState = new XML(GLOBAL_NGK_GRILL.defaultState);
		
		var result = PosNGKGrillExecuteOperation("FINISH",  "", "", "true", "true");
		var grillOperations = result.Product.@grillOperations;
		
		var xmlResult = new XML("<Product/>");
		xmlResult.@grillOperations = grillOperations;
		xmlResult.@code = result.Product.@code;
		xmlResult.@qty = product.@qty;
		
		for each(var innerProduct in product.Product)
		{
			xmlResult.appendChild(lCopyGrillOperations(innerProduct));
		}
		
		return xmlResult;
	}
	
	function lPasteGrillOperations(grillInfo, parentQty)
	{
		for(var i = 0; i < parseInt(grillInfo.@qty)/parentQty; i++)
		{
			var grillIndex = KioskGrillViewHelper.FindGrillIndexByState(grillInfo.@code, "");
			
			if(grillIndex != "-1")
			{
				ExecuteGrillOperations(grillInfo.@code, grillInfo.@grillOperations, null, null, grillIndex);
				API.dbg("[PosNGKDoCloneDeal][lPasteGrillOperations]: grills copied");			
			}
			else
			{
				API.dbg("[PosNGKDoCloneDeal][lPasteGrillOperations]: grill index cannot be defined. grills will not be copied.");
			}
			
			for each(var innerGrillInfo in grillInfo.Product)
			{
				lPasteGrillOperations(innerGrillInfo, parseInt(grillInfo.@qty));
			}
		}
	}
}

/**
* @since CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
*/
function PosNGKGetPromotionIdByBarcode(barcode)
{
    var promotions = GetPromotionsByBarcode(barcode);
    if (promotions.length === 0)
    {
        PosCSOSendSyncMessageJS(
			"DLG_NGK_SIMPLE_MSG", 
			new Array(PosCSOI18nGetMessageJS("MSG_OK") + "@@@@@@EventLabelKey:MSG_OK,TranslateEventLabel:1"),
			["true", "false"], 
			PosCSOI18nGetMessageJS("CSO_ACTIVE_MODE_LBL_ERROR_DEAL_NOT_RECOGNIZED") + "|ScreenNameKey:CSO_ACTIVE_MODE_LBL_ERROR_DEAL_NOT_RECOGNIZED");
        return false;
    }

    if (promotions.length > 1 || IsValidRejectionCause(promotions[0].RejectionCause))
    {
		// CSO-1391 - NGK5.17.2 - Customer is able to tender an order with order discount deal even if the order does not fulfill the deal criteria
        for each(var p in promotions)
        {
            if (!PosStorePromotionCouponOnSale(barcode, p.PromotionId)) {
				API.dbg("PosStorePromotionCouponOnSale failed [" + getLastFail("PosStorePromotionCouponOnSale") + "]");
                return false;
            }
        }
        SendUnfilteredPromotionsToUI(promotions);
    }
    else
    {
        ShowDealErrorPopup(promotions[0]);
    }
    return true;
}

/**
* @since CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
*/
function IsValidRejectionCause(rejectionCause)
{
	if(rejectionCause == "" || rejectionCause == "MissingProducts" || rejectionCause == "None" || rejectionCause == "Other" ||
		rejectionCause == "InvalidItemQuantity" || rejectionCause == "InvalidSaleAmount")
	{
		return true;
	}
	
	return false;
}

/**
* @since CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
*/
function SendUnfilteredPromotionsToUI(promotions)
{
    var eventXml = new XML('<Event type="ASYNC" name="DAT_PROMOTION_UNFILTERED" />');
	eventXml.Data = JSON.stringify(promotions);
    PosSendUICmd(eventXml.toString());
}

/**
* @since CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
*/
function PosNGKCheckPromotionLimits(JSONPromotions, promotionData)
{
	var promotionDealData = PosNGKAreDealsInsideLimits(promotionData, true);

    JSONPromotions = JSONPromotions.replace(/'/g, '"');
    var promotionsArray = JSON.parse(JSONPromotions);
    
    //CSD-194 - [NGK5.17 - Active Mode] Incorret message displayed if the limit of one promotion has been reached
    var invalidByAllowedQty = 0;
    
    var stillAvailablePromotions = [];
    var splittedPromotionDealData = promotionDealData.split('|');
    for (var i = 0; i < splittedPromotionDealData.length; i++)
    {
        var dealData = splittedPromotionDealData[i].split(";");
        if (dealData[1] == "true")
        {
            stillAvailablePromotions.push(Number(dealData[0]));
        }
		else
		{
			//CSD-194 - [NGK5.17 - Active Mode] Incorret message displayed if the limit of one promotion has been reached
			if(dealData[2] == "true")
				invalidByAllowedQty++;
		}
    }
    
    var promoTypes = hlp.findParamInSectionWide("availablePromotionTypes", "CSO.ActiveMode");	
	var promoTypesArray = [];
	if(promoTypes != undefined && promoTypes != null && promoTypes != "")
	{
		promoTypesArray = promoTypes.split('|');
	}
	
    var validPromotions = [];
	var unavailablePromotions = [];
    for each(var p in promotionsArray)
    {
        for each(var sap in stillAvailablePromotions)
        {
            if (p.PromotionId === sap)
            {
				var typeAvailable = false;
				if(promoTypesArray.length > 0){
					//Check if this promotion type is available
					for each(var promoType in promoTypesArray)
					{
						if(p.Type == promoType)
						{
							typeAvailable = true;
							break;
						}
					}
				}
				else{
					typeAvailable = true;
				}
				
				if(typeAvailable)
				{
					validPromotions.push(p);
				}
				else
				{
					unavailablePromotions.push(p);
				}
            }
        }
    }
    if(validPromotions.length > 0 || unavailablePromotions.length > 0)
    {
		var showScreen = false;
		if(validPromotions.length > 0){
			var screenId = hlp.findParamInSectionWide("promotionScreenId", "CSO.ActiveMode");
			if (screenId == undefined || screenId == null)
			{
				API.dbg("PosNGKCheckPromotionLimits - <promotionScreenId> not defined under <CSO.ActiveMode>: unable to open promotion barcode reader screen");
				return false;
			}

			//CSD-164 - Open Promotion PDP directly when only one promotion is recognized by barcode 
			if(validPromotions.length > 1 || unavailablePromotions.length > 0)
				showScreen = true;
		}
		
		var eventXml = new XML('<Event type="ASYNC" name="DAT_GET_GLOBAL_PROMOTION_INFO" />');	
		eventXml.Data = JSON.stringify(validPromotions);
		eventXml.DataInvalid = JSON.stringify(unavailablePromotions);
		eventXml.ShowPromotionScreen = true;
		PosSendUICmd(eventXml.toString());

		if(showScreen) PosNGKDoShowScreenJS(screenId, null, null, true);
		
        return true;
    }
    else
    {
		//CSD-193 - [NGK5.17.1] Kiosk freeze if a Global Coupon Promotion is scanned from "Order Summary Screen"
		PosSetSessionProperty ("BRUTE_FORCE_EXECUTING", "false");
		
		// CSO-1279 - NGK 5.17.1 - Ungated Scan of same global barcoded promotion shows error full screen and returns to incorrect screen
		var msgKey;
		if(invalidByAllowedQty == 1)
		{
			msgKey="CSO_ACTIVE_MODE_LBL_MAX_DEAL_QYT_REACHED";
		}
		else
		{
			msgKey="CSO_ACTIVE_MODE_LBL_DEALS_LIMIT_REACHED";
		}
		
		var titleArray = new Array();
		titleArray.push(new Array(PosCSOI18nGetMessageJS(msgKey)));
		var buttonsArray = new Array();
		buttonsArray.push(new Array(PosCSOI18nGetMessageJS("MSG_OK"), "GREEN", "WHITE"));
		PosNGKSendSyncPickImageJS("DLG_DEAL_MESSAGE_LAYOUT_A", buttonsArray, new Array("true", "false"), titleArray);
		
        return false;
    }
}

/**
 * @brief - Apply the active Promotions or active Offers in the current order
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 * @modified - CSO-1313 - Kiosk SP8.5 PR2 S3:[Ungated Scan Phase 2] On Order review screen when items with priced condiments are edited(for BOGO offers/BOGO McGriddle), than on offer/promoPDP screen price of priced condiments are excluded instead total price should get displayed
 */
function PosNGKActivateDeals(isPromotion, promotionArray, fillSteps)
{
	API.dbg("PosNGKActivateDeals - Trying to fill steps with: " + fillSteps);
	var currentProducts = new Array();
	if(fillSteps && fillSteps != "" && fillSteps != "PASSIVE")
	{
		API.dbg("PosNGKActivateDeals - Trying to fill steps with: " + fillSteps);
		var xmlView = new XML(hlp.getCurrentView());
		for each (itemView in xmlView.ItemView)
		{
			currentProducts.push(itemView.sellSequence);
		}
		API.dbg("PosNGKActivateDeals - Current products in sale: " + currentProducts);
		FillPromotionSteps(fillSteps);
	}
	
	var promotionID = "";
	
	//CSO-1444 - [DRM] Kiosk SP8.5 MR1QR0 B21 TC2 :[Mobile offer redemption]: Offer name with "Offer not yet applied message" is not getting displayed on order review screen when offer is scanned but offer condition is not met.
	//CSO-1444: Adding check for promotionArray, to avoid null references.
	if (promotionArray != undefined && promotionArray != null){
		//Remove the promotion before the re-apply (CSD-240)
		promotionID = promotionArray.split(';')[0];
		var promotionCounter = promotionArray.split(';')[1];
		if(promotionCounter)
		{
			PosPromotionUndo(promotionID, promotionCounter);
		}
	}
	
	var rejection = "";
	if(fillSteps != "PASSIVE")
	{
		if(isPromotion.toLowerCase() == "true" && promotionID != "")
		{
			PosActivePromotion(promotionID);
			rejection = getLastSuccess("PosActivePromotion");
		}
		else
		{
			PosActiveOffers();
			rejection = getLastSuccess("PosActiveOffers");
		}
	}
	
	//Passive promotions should be applied as well to update its prices (CSO-1313)
	PosPromotionOnItemSold();
	PosOffersOnItemSold("true");
	
	API.dbg("PosNGKActivateDeals - View after Activate:\n" + new XML(hlp.getCurrentView()));
	API.dbg("PosNGKActivateDeals - rejectionCause of getLastSuccess: " + rejection);
	
	if(fillSteps && fillSteps != "")
	{
		SendAppliedInformationToUI();
		if(fillSteps != "PASSIVE")
			RemoveFakeSteps();
	}
	
	//CSO-1470 - POS-481 - NGK Rules Engine will not Increase the Price of a Menu Item
	if(fillSteps && fillSteps != "PASSIVE" && fillSteps.split("|")[3] == "" && rejection != null && rejection != ""){
		var rejectionCause = "";
		//NP6 returns different type of rejectionCauses in getLastSuccess for promotions(xml) and offers(string)
		if(isPromotion.toLowerCase() == "true")
		{
			var rejectionCauseXml = new XML(DecodeToXml(rejection.toString()));
			if(rejectionCauseXml.Rejection != undefined)
			{
				// CSO-1570 - POS-481 NGK Rules Engine --- Button function and name of the pop up window is not correct
				rejectionCause = rejectionCauseXml.Rejection.@cause.toString().toLowerCase();
			}
		}
		else{
			rejectionCause = rejection.toString().toLowerCase();
		}
		
		if(rejectionCause=="totalpricedidnotdecrease" || rejectionCause=="individualpricedidnotdecrease")
		{
			// CSO-1570 - POS-481 NGK Rules Engine --- Button function and name of the pop up window is not correct
			var ctx = new SessionContext;
			var mainScreen = ctx.get("NGK_MAIN_SCREEN");
			if (mainScreen != null)
			{
				PosSetSessionProperty("NGK_CURRENT_MENU", mainScreen);
			}
		
			var eventXml = new XML('<Event type="ASYNC" name="DAT_PROMOTION_APPLIED" />');
			var promoNotApplied = new XML("<PromoNotApplied />");
			promoNotApplied.@rejectionCause = ConvertRejectionCauseToI18N(rejectionCause);
			eventXml.appendChild(promoNotApplied);
			PosSendUICmd(eventXml.toString());
		}
	}
	
	return true;
	
	//Buy the possible remaining items to fulfil the promotion conditions
	function FillPromotionSteps(fillSteps)
	{
		var promoCounter = fillSteps.split("|")[0];
		var promoID = fillSteps.split("|")[1];
		var offerID = fillSteps.split("|")[2];
		var fakeSteps = fillSteps.split("|")[3];
		
		for each(var fakeStep in fakeSteps.split(";"))
		{
			var stepNumber = fakeStep.split(":")[0];
			var productCode = fakeStep.split(":")[1];
			if(productCode != undefined)
				SideSaleHelper.Add(productCode + "|" + promoID + "|" + promoCounter + "|" + stepNumber + "|" + offerID);
		}
	}

	//Send the updated product data to the UI.
	function SendAppliedInformationToUI()
	{
		var eventXml = new XML('<Event type="ASYNC" name="DAT_PROMOTION_APPLIED" />');
		var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));

		var hasPricesToUpdate = false;
		
		for each (var item in kioskOrderView.Order.Item) {
			if(item.@voided == "false" && !IsFakeStepItem(item))
			{
				var promoProdInfo = new XML("<PromoProduct />");
				promoProdInfo.@productCode = item.Product[0].@code;
				promoProdInfo.@oldProductCode = item.@oldValue;
				promoProdInfo.@sellSequence = item.Product[0].@sellSequence;
				promoProdInfo.@OldPrice = item.Product[0].@totalPrice;
				var newPrice = -1;
				//Get the unit price, discounted
				if(item.Product[0].@discountAmount != undefined && item.Product[0].@discountAmount != "")
					newPrice = (Number(item.Product[0].@unitPrice) - Number(item.Product[0].@discountAmount));
				
				//If the item has no promotional price its not necessary evaluate the rest
				if(newPrice != -1)
				{
					//Get the grill prices
					for each (var grill in item.Product[0].Grill) {
						newPrice += Number(grill.@totalPrice);
						if(grill.@discountAmount != undefined && grill.@discountAmount != "")
						{
							newPrice -= Number(grill.@discountAmount);
						}
					}
					//Get the grill prices of subitems
					for each (var product in item.Product[0].Product) {
						for each (var grill in product.Grill) {
							newPrice += Number(grill.@totalPrice);
							if(grill.@discountAmount != undefined && grill.@discountAmount != "")
							{
								newPrice -= Number(grill.@discountAmount);
							}
						}
					}
				}
				
				//Case when the promotional price is setted directlly
				if(newPrice == -1 && item.Product[0].@bPTotalPrice != undefined && item.Product[0].@bPTotalPrice != "")
				{
					promoProdInfo.@OldPrice = item.Product[0].@bPTotalPrice;
					newPrice = item.Product[0].@totalPrice;
				}
				
				if(newPrice != -1){
					hasPricesToUpdate = true;
					promoProdInfo.@NewPrice = newPrice;
				}
				
				eventXml.appendChild(promoProdInfo);
			}
		}

		//Update UI before the price/items changes be sent
		PosCSODoUpdateCartJS("PosNGKActivateDeals", true);
		if(hasPricesToUpdate)
			PosSendUICmd(eventXml.toString());
	}
	
	//Remove the items that was added just to fill the remaining steps of the promotion
	function RemoveFakeSteps()
	{
		var newXmlView = new XML(hlp.getCurrentView());
		for each (itemView in newXmlView.ItemView)
		{
			var persistProduct = false;
			for each (originalSellSequence in currentProducts)
			{
				if(itemView.ActiveMode.length() == 0 || itemView.sellSequence == originalSellSequence)
				{
					persistProduct = true;
					break;
				}
			}
			
			if(!persistProduct)
			{
				API.dbg("PosNGKActivateDeals - Removing product will SellSequence: " + itemView.sellSequence);
				PosDoSelBySellSequence(itemView.sellSequence);
				PosDoVoidLine("1");
			}
		}
	}
	
	//Checks if a given item in view is a fake product
	function IsFakeStepItem(item)
	{
		if(fillSteps && fillSteps != "" && fillSteps != "PASSIVE")
		{
			var fakeSteps = fillSteps.split("|")[3];
			for each(var fakeStep in fakeSteps.split(";"))
			{
				var stepNumber = fakeStep.split(":")[0];
				var productCode = fakeStep.split(":")[1];
				if(item.Product[0].@code == productCode && item.@stepNumber == stepNumber)
					return true;
			}
		}
		
		return false;
	}
}

/**
 * @brief - Removes the promotion or offer and its associated items from current order
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 */
function PosNGKDoVoidPromotionAndItemsJS(promotionID, promotionCounter) {
	PosDoVoidPromotionAndItems(promotionID, promotionCounter);
	// CSO-1617 - Kiosk SP9 TC0 PR2 B121: [Ungated Scan - Phase1] : "Sorry, you need to add eligible items to use this Deal." 
	// message is not getting displayed when promotion is taken along with offer and does not fulfill the offer condition.
	if (typeof(PosOffersOnTotal) == "function") {
		PosOffersOnTotal(true);	
	}		
	//If the order is empty, go to main screen if it is in OrderReview
	var hlp = new BusinessObjectHelper;
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	for each (var item in kioskOrderView.Order.Item) {
	if(item.@voided == "false")
		return true;
	}

	return false;
}

/**
 * @brief -  Retrieves choices up prices.
 * @return - always true
 * @author - Rafael Azevedo
 * @since - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
 */
function PosNGKRetrieveChoicesUpPrices(products, vmSeq, choiceSeq, idRequest)
{	
	API.dbg("[PosNGKRetrieveChoicesUpPrices] products: " + products);
	API.dbg("[PosNGKRetrieveChoicesUpPrices] vmSeq: " + vmSeq);
	API.dbg("[PosNGKRetrieveChoicesUpPrices] choiceSeq: " + choiceSeq);
	API.dbg("[PosNGKRetrieveChoicesUpPrices] idRequest: " + idRequest);
	if(choiceSeq != 'undefined')
	{
		PosDoSelBySellSequence(choiceSeq);
		PosClearSingleChoiceBySellSequence();
	}
	
	var result = rootHlp.SimulateValueMealPrices(vmSeq, products);
	API.dbg("[PosNGKRetrieveChoiceUpPrices] api result: " + result);
	
	var productsArray = products.split('|');
	var upPrices = result ? result.split('|') : [];
	
	var eventXml = new XML('<Event type="ASYNC" name="DAT_CHOICE_UP_PRICES"/>');
	
	var xmlResult = new XML("<UpPrices/>");
	
	xmlResult.@sellSequence = vmSeq;
	xmlResult.@idRequest = idRequest;
	
	for(var i = 0; i < productsArray.length; i++)
	{
		var product = new XML("<Product/>");
		product.@code = productsArray[i];
		product.@value =  upPrices[i];
		xmlResult.appendChild(product);
	}
	
	eventXml.appendChild(xmlResult);
	
	PosDoSelBySellSequence(vmSeq);
	PosSendUICmd(eventXml.toXMLString());
	
	return true;
}

/**
 * @brief - Validate all reserved deals, after PosDoTotal, and send a message to user with the rejection cause
 * @author - Robert Abreu
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 */
function PosNGKValidateDeals(searchDeals, dealId, isPromotion)
{
	var hlp = new BusinessObjectHelper;
	var orderView = new XML(hlp.getCurrentView());
	
	// SDO-16797 NGK 5.17 Applies offer but does not allow check out - AUNP-10
	// Check if the reserved Offers is not applied, if yes, remove it.
	if (!lReleasedReservedOffer()){
		PosActiveOffers(); //First, try to active the possible reserved offers
		orderView = new XML(hlp.getCurrentView());
	}
	
	if(searchDeals != undefined && searchDeals.toString().toLowerCase() == "true")
	{
		var kioskOrderView = new XML(getKioskView(orderView.toString()));;
		//Search the order for the existing reserved Deals
		if(kioskOrderView.Order.ReservedDeals.length() > 0)
		{
			if(kioskOrderView.Order.ReservedDeals.ReservedPromotions != undefined)
			{
				var promotions = kioskOrderView.Order.ReservedDeals.ReservedPromotions.@ids;
				if(promotions != undefined)
				{
					var reservedIds = promotions.split("|");
					for each (var id in reservedIds)
					{
						if(!lValidatePromotion(id))
							return false;
					}
				}
			}
			
			// SDO-16797 NGK 5.17 Applies offer but does not allow check out - AUNP-10
			if(kioskOrderView.Order.ReservedDeals.ReservedOffer != undefined &&
				kioskOrderView.Order.ReservedDeals.ReservedOffer.@promotionId.toString() != "")
			{
				return lValidateOffer();
			}
		}
	}
	
	if(dealId && dealId != "0")
	{
		if(isPromotion == "true")
		{
			lValidatePromotion(dealId);
		}
		else
		{
			lValidateOffer();
		}
	}
	
	return true;
	

	/**
	* @brief - Responsible for releasing the reserved offer
	* @author - Leandro Pereira
	* @since - SDO-16797 NGK 5.17 Applies offer but does not allow check out - AUNP-10
	*/
	function lReleasedReservedOffer(){
		var kioskOrderView = new XML(getKioskView(orderView.toString()));

		//Search the order for the existing reserved Deals
		if(kioskOrderView.Order.Offers != undefined)
		{
			var isOfferApplied = kioskOrderView.Order.Offers.Offer.@applied.toString();
			var appliedOfferId = kioskOrderView.Order.Offers.Offer.@promotionId.toString();
			var reservedOfferId = kioskOrderView.Order.ReservedDeals.ReservedOffer.@promotionId.toString();
			
			// Releases only if the promotion id is the same of the promotion reserved
			if (isOfferApplied == "true"){
				if (appliedOfferId == reservedOfferId){
					PosReleaseReservedOffers();
				}
				return true;
			}
		}
		return false;
	}
	
	
	function lValidatePromotion(id)
	{
		PosActivePromotion(id);
		var rejections = getLastSuccess("PosActivePromotion");
		if (rejections != null && rejections != ""){
			var rejectionCause = new XML(DecodeToXml(rejections.toString()));
			if(rejectionCause.Rejection != undefined){
				//SQS-215 - [NGK5.17 - Active Mode] If I had a promotion with the condition Sale Type and the sale type of the order does not meet with the promotion´s condition, it is not possible keep the promotion and change the sale type
				var checkEatInLocation = PosCheckSessionProperty('CHANGE_EATING_LOCATION', 'true');
				if(checkEatInLocation && rejectionCause.Rejection.@cause.toString().toLowerCase() == 'invalidsaletype')
				{
					//Add the promotion to the reserved listo for future check
					PosActivePromotion(id);
					return true;
				}
				
				ShowValidationErrorPopup(rejectionCause.Rejection.@cause, id, "");
				return false;
			}
		}
		
		return true;
	}
	
	/**
	 * @brief - Activate Offers
	 * @return - True if Offer is valid, False in case any RejectionCause is present after the validation has taken place.
	 * @author - Robert Abreu
	 * @modified - CSO-1444 - [DRM] Kiosk SP8.5 MR1QR0 B21 TC2 :[Mobile offer redemption]: Offer name with "Offer not yet applied message" is not getting displayed on order review screen when offer is scanned but offer condition is not met.
	 * @modifiedBy - Luiz Russo on CSO-1444: Function had to be rewritten, for it was using the wrong BC to validate an Offer. Its structure should now be consistent with the Promotion Validation function.
	 */
	function lValidateOffer()
	{
		PosActiveOffers();
		var rejections = getLastSuccess("PosActiveOffers");
		if (rejections != undefined){
			//SQS-215 - [NGK5.17 - Active Mode] If I had a promotion with the condition Sale Type and the sale type of the order does not meet with the promotion´s condition, it is not possible keep the promotion and change the sale type
			var checkEatInLocation = PosCheckSessionProperty('CHANGE_EATING_LOCATION', 'true');
			if (checkEatInLocation && rejections.toString().toLowerCase() == 'invalidsaletype'){
				PosActiveOffers();
				return true;
			}
			
			// SDO-16797 NGK 5.17 Applies offer but does not allow check out - AUNP-10
			if (rejections.toString().toLowerCase() != 'none'){
				ShowValidationErrorPopup(rejections.toString().toLowerCase() , "", orderView.Offers.@offerId.toString());
				return false;
			}
		}
		
		return true;
	}
}

/**
 * @brief - Send the validation error pop up to UI
 * @param rejectionCause - rejection cause received from json
 * @param promotionId - ID of the promotion if the deal is a promotion (only one ID is processed by the UI)
 * @param offerId - ID of the offer if the deal is a offer (only one ID is processed by the UI)
 * @author - Robert Abreu
 * @since - CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
 */
function ShowValidationErrorPopup(rejectionCause, promotionId, offerId)
{   
    var rejectionCauseI18N = ConvertRejectionCauseToI18N(rejectionCause.toString());
    var errorDescriptionTag = new XML("<ErrorDescription>"+rejectionCauseI18N+"</ErrorDescription>");
	var promotionIdTag = new XML("<PromotionId>"+promotionId+"</PromotionId>");
	var offerIdTag = new XML("<OfferId>"+offerId+"</OfferId>");

    var promotionErrorPopupTag = new XML("<PromotionErrorPopup />");
    promotionErrorPopupTag.appendChild(errorDescriptionTag);
    promotionErrorPopupTag.appendChild(promotionIdTag);
    promotionErrorPopupTag.appendChild(offerIdTag);
    var xml = new XML("<Event type='ASYNC' name='DLG_VALIDATION_ERROR_POPUP'/>");
    xml.appendChild(promotionErrorPopupTag);    
    PosSendUICmd(xml);
}

/**
 * @brief - Insert a unique item into an array
 * @return - none
 * @author - MY
 * @since - CSD-49 - FR1 - Setting the barcode scanner to "always on" state and configuring the types of barcodes to be accepted
 */
function PosInsertUniqueJS(arrayUnique, item) {
	var bFound=false;
	for (var iIndex=0; iIndex<arrayUnique.length; iIndex ++) {
		if(item==arrayUnique[iIndex])
		{
			bFound=true;
			break;
		}
	}
	if(!bFound) {
		arrayUnique.push(item);
	}
}

/**
 * @brief - Enable the scanner 
 * @return - none
 * @author - MY
 * @since - CSD-51 - FR3 - Scanning and processing a barcode immediately
 */
function PosNGKEnableScanJS() {
	//NPS-23233 - POS-457 - Ungated Scan - Active Offers and Promotions (Link to NMR-20)
	var bruteForceExecuting = PosCheckSessionProperty('BRUTE_FORCE_EXECUTING', 'true');
	if(!bruteForceExecuting)
	{
		var eventXml = new XML('<Event type="ASYNC" name="DLG_UNGATED_SCAN_ENABLE_SCAN"/>');
		return PosSendUICmd(eventXml.toXMLString());
	}
}

/**
 * @brief - Enable the scanner 
 * @return - none
 * @author - MY
 * @since - CSD-51 - FR3 - Scanning and processing a barcode immediately
 */
function PosNGKCloseBlockPopup() {
	var eventXml = new XML('<Event type="ASYNC" name="DLG_CLOSE_BLOCK_POPUP"/>');
	return PosSendUICmd(eventXml.toXMLString());
}

/**
 * @brief - Read the barCodeTypesEnabledUngatedScan parameter and split it in an array of barcode types
 * @return - array with the types of the barcode types to be scanned
 * @author - MY
 * @since - CSD-49 - FR1 - Setting the barcode scanner to "always on" state and configuring the types of barcodes to be accepted
 */
function PosGetBarcodeTypesEnabledUngatedScanJS() {
	var barCodeTypesEnabledUngatedScanValue = lGetCSOUserInterfaceStringParameter("ungatedScan.barCodeTypes", "");
	var barcodeTypesUngatedScan=[];
	if(barCodeTypesEnabledUngatedScanValue) {
		var isMobileEnabled = lGetCSOUserInterfaceStringParameter("enableRecallMobileOrders", "false").toLowerCase() == "true";
		var POSOffersEnabled = hlp.findParamInSectionWide("isEnabled", "Offers").toLowerCase() == "true";
		var CSOOffersEnabled = lGetCSOUserInterfaceStringParameter("enableOffers", "false").toLowerCase() == "true";
		var isRFMCouponEnabled = lGetCSOUserInterfaceStringParameter("enableBarcode", "false").toLowerCase() == "true";
		var isPromotionsEnabled = hlp.findParamInSectionWide("isEnabled", "Promotion") == "true";
        // CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
        var isMonopolyEnabled = false;
		var barcodeTypesUngatedScanArr=barCodeTypesEnabledUngatedScanValue.split("|");
		for (var iIndex=0; iIndex<barcodeTypesUngatedScanArr.length; iIndex ++) {
			if("mobileorder"==barcodeTypesUngatedScanArr[iIndex].toLowerCase()) {
				if (isMobileEnabled) {
					PosInsertUniqueJS(barcodeTypesUngatedScan, CSO_UNGATED_SCAN_TYPE_MOBILE_ORDER);
				}
				else {
					API.dbg("[UNGATED]Mobile is not enabled ["+isMobileEnabled+"]");
				}
			}
			else
			if("digitaloffers"==barcodeTypesUngatedScanArr[iIndex].toLowerCase()) {
				if (POSOffersEnabled && CSOOffersEnabled) {
					PosInsertUniqueJS(barcodeTypesUngatedScan, CSO_UNGATED_SCAN_TYPE_DIGITAL_OFFER);
				}
				else {
					API.dbg("[UNGATED]Offer is not enabled ["+POSOffersEnabled+"]["+CSOOffersEnabled+"]");
				}
			}
			else
			if("punchcard"==barcodeTypesUngatedScanArr[iIndex].toLowerCase()) {
				if (POSOffersEnabled && CSOOffersEnabled) {
					PosInsertUniqueJS(barcodeTypesUngatedScan, CSO_UNGATED_SCAN_TYPE_PUNCH_CARD);
				}
				else {
					API.dbg("[UNGATED]Punch card is not enabled ["+POSOffersEnabled+"]["+CSOOffersEnabled+"]");
				}
			}
			else
			if("rfmcoupons"==barcodeTypesUngatedScanArr[iIndex].toLowerCase()) {
				if (isRFMCouponEnabled) {	
					PosInsertUniqueJS(barcodeTypesUngatedScan, CSO_UNGATED_SCAN_TYPE_RFM_COUPON);
				}
				else {
					API.dbg("[UNGATED]RFM coupons is not enabled ["+isRFMCouponEnabled+"]");
				}
			}
			else
			if("promotioncoupon"==barcodeTypesUngatedScanArr[iIndex].toLowerCase()) {
				if (isPromotionsEnabled) {	
					PosInsertUniqueJS(barcodeTypesUngatedScan, CSO_UNGATED_SCAN_TYPE_GLOBAL_PROMOTIONS);
				}
				else {
					API.dbg("[UNGATED]Global Promotions is not enabled ["+isPromotionsEnabled+"]");
				}
			}
            // CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
            else
            if("monopolyprize"==barcodeTypesUngatedScanArr[iIndex].toLowerCase())
            {
                PosInsertUniqueJS(barcodeTypesUngatedScan, CSO_UNGATED_SCAN_TYPE_MONOPOLY_PRIZE);
                isMonopolyEnabled = true;
            }
		}
        // CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
        if (!isMonopolyEnabled)
        {
            API.dbg("[UNGATED]Monopoly is not enabled");
        }
	}
	return (barcodeTypesUngatedScan);
}

/**
 * @brief - Read the barCodeTypesEnabledUngatedScan parameter and split it in an array of barcode types
 * @param - barcode:
 * @param - origin: the screen to return to. "MAIN" - main selection. "REVIEW" - order review. "ATTRACT"
 * @return - array with the types of the barcode types to be scanned
 * @author - MY
 * @since - CSD-49 - FR1 - Setting the barcode scanner to "always on" state and configuring the types of barcodes to be accepted
 */
function PosCSORedeemGenericBarcodeJS(barcode, origin) {
	API.dbg("[UNGATED]PosCSORedeemGenericBarcodeJS barcode["+barcode+"] origin["+origin+"]");
	
	var arBarcodeTypes=PosNGKGetBarcodeType(barcode);
	
	API.dbg("[UNGATED]PosCSORedeemGenericBarcodeJS barcode types["+arBarcodeTypes+"]");
	
	var originUpperCase=origin.toUpperCase();

	var limitExceeded=false;
	
	if(originUpperCase=="REVIEW") {
		PosNGKCheckAndExecuteBackFromTotal();
		PosSetSessionProperty ("IS_IN_ORDER_REVIEW", "false");
	}
	
	var missingScreenParameter=false;
	
	// CSD-53 - FR5 - Mobile order check-in
	if(("ATTRACT"==originUpperCase) || ("INOUT"==originUpperCase)) {
		var screenMenu=lGetCSOUserInterfaceStringParameter("ungatedScan.screen.menu", "");
		var screenCarrousel=lGetCSOUserInterfaceStringParameter("ungatedScan.screen.carousel", "");
		var screenAds=lGetCSOUserInterfaceStringParameter("ungatedScan.screen.ads", "");
		if(screenMenu && screenCarrousel && screenAds) {
			sessionSale.set("NGK_SCREEN_MENU", screenMenu);
			sessionSale.set("NGK_SCREEN_CARROUSEL", screenCarrousel);
			sessionSale.set("NGK_SCREEN_ADS", screenAds);
		}
		else {
			missingScreenParameter=true;
		}
	}
	
	PosSetSessionProperty('NGK_UNGATED_SCAN_RETURN_SCREEN', originUpperCase);

	// CSD-53 - FR5 - Mobile order check-in
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
	
	var isValidOrder=false;
	// look for at least 1 valid sold item
	for each (var item in kioskOrderView.Order.Item) {
		if (item.@voided == "false") {
			isValidOrder=true;
			break;
		}
	}
	// check if there is offer applied
	if((!isValidOrder) && ((kioskOrderView.Order.Offers.Offer.length()>0)||(kioskOrderView.Order.Promotions.Promotion.length()>0))) {
		isValidOrder=true;
	}

	var eventXml = new XML('<Event type="ASYNC" name="DLG_PROCESS_GENERIC_BARCODE"/>');
	var genericBarcodeXml = new XML('<barcode/>');
	if (genericBarcodeXml) {
		// CSD-53 - FR5 - Mobile order check-in
		genericBarcodeXml.@origin=originUpperCase;
		genericBarcodeXml.@isMoaOrder=sessionSale.get("NGK_MOA_ORDER");
		genericBarcodeXml.@orderInProgress=isValidOrder.toString();
		genericBarcodeXml.@barcode=barcode;
		genericBarcodeXml.@types = (arBarcodeTypes.length > 0) ? arBarcodeTypes.join("|") : "";
		genericBarcodeXml.@missingScreenParameter=missingScreenParameter;
		eventXml.appendChild(genericBarcodeXml);
	}

	if(arBarcodeTypes.length > 1)
		PosSetSessionProperty ("BRUTE_FORCE_EXECUTING", "true");
	
	return PosSendUICmd(eventXml.toXMLString());
}

/**
 * @brief - Return to the previous screen after a ungated scan
 * @author - MY
 * @since - CSD-49 - FR1 - Setting the barcode scanner to "always on" state and configuring the types of barcodes to be accepted
 */
function PosNGKUngatedScanReturnScreen(bClear) {
	//NPS-23233 - POS-457 - Ungated Scan - Active Offers and Promotions (Link to NMR-20)
	var bruteForceExecuting = PosCheckSessionProperty('BRUTE_FORCE_EXECUTING', 'true');	
	if(!bruteForceExecuting)
	{
		PosNGKCheckAndExecuteBackFromTotal();
		if(bClear && "false"==bClear.toString()) {
			bClear=false;
		}
		else {
			bClear=true;
		}
		
		lGoToMainScreen(bClear);
	}
	return true;
}

/**
 * @brief - Return to the previous screen before ungated scan
 * @return - none
 * @author - MY
 * @since - CSD-51 - FR3 - Scanning and processing a barcode immediately 
 */
function PosNGKMobileCheckinBackJS() {
	var ungatedReturnScreen=sessionSale.get ('NGK_UNGATED_SCAN_RETURN_SCREEN');
	API.dbg("[UNGATED]PosNGKMobileCheckinBackJS ungatedReturnScreen["+ungatedReturnScreen+"]");
	if (('MAIN' == ungatedReturnScreen) || ('REVIEW' == ungatedReturnScreen)) {
		lGoToMainScreen(true);
	}
	else
	if ('INOUT' == ungatedReturnScreen) {
		PosCSODoCloseScreenPopupJS();
	}
	else {
		PosNGKDoGoHomeJS();
	}
	
	return true;
}

/**
 * @brief - Compare strings
 * @param - str1 - 
 * @param - str2 - 
 * @return - true if str1 is equals to str2
 * @author - MY
 * @since - CSD-51 - FR3 - Scanning and processing a barcode immediately
 */
function PosCSOCompareStrings(str1, str2) {
	if (str1 == str2) {
		return true;
	}
	else {
		return false;
	}
}

/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKShowMonopolyBarcodeReader(keypadOnly, barcodeMinSize, barcodeMaxSize) {
    var couponTypeTag = new XML("<CouponType>Monopoly</CouponType>");
    var titleTag = new XML("<Title>NGK_BTN_PROMOTIONS</Title>");
    var modeTag = new XML("<Mode>MONOPOLY</Mode>");
    var scanTitleTag = new XML("<ScanTitle>NGK_MSG_BARCODEREADER</ScanTitle>");
    var enterTitleTag = new XML("<EnterTitle>NGK_MSG_BARCODEMANUAL</EnterTitle>");
    var workflowTag = new XML("<Workflow>WF_EVALUATE_MONOPOLY_CODE</Workflow>");
    if (PosNGKIsStringNullOrWhiteSpace(barcodeMaxSize)) {
        barcodeMaxSize = BARCODE_MONOPOLY_MAX_SIZE;
    }
    var keyboardSizeTag = new XML("<KeyboardSize>" +barcodeMaxSize+ "</KeyboardSize>");
    if (PosNGKIsStringNullOrWhiteSpace(barcodeMinSize)) {
        barcodeMinSize = BARCODE_MONOPOLY_MIN_SIZE;
    }
	var keyboardMinSizeTag = new XML("<KeyboardMinSize>" +barcodeMinSize+ "</KeyboardMinSize>");
    if (PosNGKIsStringNullOrWhiteSpace(keypadOnly)) {
        keypadOnly = lGetCSOUserInterfaceStringParameter("monopoly.barCodeManuallyEnteredOnly", "false").toLowerCase() == "true" ? "true" : "false";
    }
    var keypadOnlyTag = new XML("<KeypadOnly>"+keypadOnly+"</KeypadOnly>");
    var promotionTag = new XML("<Promotion />");
    promotionTag.appendChild(couponTypeTag);
    promotionTag.appendChild(modeTag);
    promotionTag.appendChild(titleTag);
    promotionTag.appendChild(scanTitleTag);
    promotionTag.appendChild(enterTitleTag);
    promotionTag.appendChild(workflowTag);
    promotionTag.appendChild(keyboardSizeTag);
	promotionTag.appendChild(keyboardMinSizeTag);
    promotionTag.appendChild(keypadOnlyTag);
    var xml = new XML("<Event type='ASYNC' name='DLG_SHOW_MONOPOLY_BARCODE_READER'/>");
    xml.appendChild(promotionTag);
    PosSendUICmd(xml);
    return true;
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKClosedLoopPrizeRedemption(barcode, origin, askAge) {
    var ctx = new SessionContext;
	
    var previousBarcodeList = ctx.get("NGK_MONOPOLY_PREVIOUS_BARCODES");
	
    if (PosNGKIsStringNullOrWhiteSpace(origin) || (PosNGKIsStringNullOrWhiteSpace(previousBarcodeList) == false)) {
        PosNGKClosedLoopPrizeRedemptionUsingMonopolyScreen(barcode, previousBarcodeList, askAge);
    } else {
        PosNGKClosedLoopPrizeRedemptionUsingUngatedFeature(barcode, origin, askAge);
    }
	return true;
}

/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
const INSTANT_WIN_PRIZE_TICKET           = 1;
const COLLECT_TO_WIN_PRIZE_TICKET        = 2;
const NOT_A_PRIZE_TICKET_NOT_FIRST       = 3;
const ALREADY_SCANNED                    = 4;
const NOT_REDEEMABLE_IN_THE_RESTAURANT   = 5;
const NOT_MONOPOLY_OR_NOT_MATCH_PREVIOUS = 6;
const NOT_A_PRIZE_TICKET_FIRST           = 7;
	
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKClosedLoopPrizeRedemptionUsingMonopolyScreen(barcode, previousBarcodeList, askAge) {
	var closePopUp = !PosNGKIsStringNullOrWhiteSpace(previousBarcodeList);	
	
    var evaluationResult = PosNGKEvaluateMonopolyCode(barcode, previousBarcodeList);
	
	if((evaluationResult == INSTANT_WIN_PRIZE_TICKET) || (evaluationResult == COLLECT_TO_WIN_PRIZE_TICKET))
	{
        if (PosNGKMustDoAgeVerification(previousBarcodeList, askAge)) {
			var AgeResponse = PosNGKIsLegalAge();
			if (AgeResponse == "2") {
				return;	
			}
			PosNGKShowMainScreen();
			if (AgeResponse == "0") {
				return;				
			}			
		}
	}
		
	if(closePopUp)
	{
		PosNGKShowMainScreen();
	}
	else{
		PosSetSessionProperty ("NGK_MONOPOLY_UNGATED_ORIGIN", "");
		
		if ((askAge != undefined) && (askAge != null) && (askAge.toLowerCase() != 'true')) {
			PosNGKShowMainScreen();
		} 
	}
	
    switch(evaluationResult) {
        case INSTANT_WIN_PRIZE_TICKET:
            PosNGKHandleMonopolyInstantWinPrizeTicket(barcode, previousBarcodeList, closePopUp);
            return;
        case COLLECT_TO_WIN_PRIZE_TICKET:
            PosNGKHandleMonopolyCollectToWinPrizeTicket(barcode);
            return;
        case ALREADY_SCANNED:
            PosNGKHandleMonopolyAlreadyScanned();
            return;
        case NOT_A_PRIZE_TICKET_FIRST:
            PosNGKHandleMonopolyError("NGK_MSG_MONOPOLY_INVALID_BARCODE", closePopUp);
            return;
        case NOT_REDEEMABLE_IN_THE_RESTAURANT:
            PosNGKHandleMonopolyError("NGK_MSG_PRIZE_TICKET_NOT_REDEEMABLE_RESTAURANT", closePopUp);
            return;
        case NOT_A_PRIZE_TICKET_NOT_FIRST:
        case NOT_MONOPOLY_OR_NOT_MATCH_PREVIOUS:
            PosNGKHandleMonopolyError("NGK_MSG_PRIZE_TICKET_FAIL_NO_MATCH", closePopUp);            
            return;
        default:
            API.dbg("[MONOPOLY] ERROR: The impossible has happened whilst evaluating monopoly ticket: evaluationResult=[" +evaluationResult+ "]");
            PosNGKHandleMonopolyError("CSO_MSG_KEY_GENERIC_ERROR", closePopUp);
            return;
    }
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKClosedLoopPrizeRedemptionUsingUngatedFeature(barcode, origin, askAge) {
	var originUpperCase=origin.toUpperCase();
	
    if (!PosNGKIsMonopolyEnabledForUngated()) {
        PosCSORedeemGenericBarcodeJS(barcode, origin);
        return;
    }

    var previousBarcodeList = "";

	PosSetSessionProperty ("NGK_MONOPOLY_PREVIOUS_BARCODES", previousBarcodeList);
	PosSetSessionProperty ("NGK_MONOPOLY_UNGATED_ORIGIN", "");
	
    var evaluationResult = PosNGKEvaluateMonopolyCode(barcode, previousBarcodeList);
	
	if((INSTANT_WIN_PRIZE_TICKET==evaluationResult)   ||
	   (COLLECT_TO_WIN_PRIZE_TICKET==evaluationResult)||
	   (NOT_REDEEMABLE_IN_THE_RESTAURANT==evaluationResult)) {
		   
		if(("ATTRACT"==originUpperCase) || ("INOUT"==originUpperCase)) {
			
			var eventXml = new XML('<Event type="ASYNC" name="DLG_PROCESS_GENERIC_BARCODE"/>');
			var genericBarcodeXml = new XML('<barcode/>');
			if (genericBarcodeXml) {
				genericBarcodeXml.@origin=originUpperCase;
				genericBarcodeXml.@isMoaOrder="false";
				genericBarcodeXml.@orderInProgress="false";
				genericBarcodeXml.@barcode=barcode;
				genericBarcodeXml.@types = "MONOPOLY";
				genericBarcodeXml.@missingScreenParameter="false";
				eventXml.appendChild(genericBarcodeXml);
			}
			
			PosSendUICmd(eventXml.toXMLString())
			return ;
		}
	}

	if((evaluationResult == INSTANT_WIN_PRIZE_TICKET) || (evaluationResult == COLLECT_TO_WIN_PRIZE_TICKET))
	{
		if ((askAge == undefined) || (askAge == null) || (askAge.toLowerCase() != 'false'))
		{
			var AgeResponse = PosNGKIsLegalAge();
			if (AgeResponse == "2") {
				return;	
			}
			if (AgeResponse == "0") {
				if(originUpperCase == "REVIEW") {
					PosSetSessionProperty ("IS_IN_ORDER_REVIEW", "true");
					PosNGKEnqueueWFJS("WF_NGK_FinalShowOrderReview");
					return;
				}
				PosNGKShowMainScreen();
				return;		
			}
		}
		PosSetSessionProperty ("NGK_MONOPOLY_UNGATED_ORIGIN", originUpperCase);
		PosNGKCheckAndExecuteBackFromTotal();
		PosNGKShowMainScreen();
	}
	
	var closePopUp = !PosNGKIsStringNullOrWhiteSpace(previousBarcodeList);
	
    switch(evaluationResult) {
        case INSTANT_WIN_PRIZE_TICKET:
			PosNGKHandleMonopolyInstantWinPrizeTicket(barcode, previousBarcodeList, closePopUp);
			return;
        case COLLECT_TO_WIN_PRIZE_TICKET:
			PosNGKHandleMonopolyCollectToWinPrizeTicket(barcode);
            return;
        case NOT_A_PRIZE_TICKET_FIRST:
            PosCSORedeemGenericBarcodeJS(barcode, origin);
            return;
        case NOT_REDEEMABLE_IN_THE_RESTAURANT:
            PosNGKHandleMonopolyError("NGK_MSG_PRIZE_TICKET_NOT_REDEEMABLE_RESTAURANT", closePopUp);
            return;
        case NOT_A_PRIZE_TICKET_NOT_FIRST:
        case ALREADY_SCANNED:
        case NOT_MONOPOLY_OR_NOT_MATCH_PREVIOUS:
        default:
            PosNGKHandleMonopolyError("CSO_MSG_KEY_GENERIC_ERROR", closePopUp);
            return;
    }
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKEvaluateMonopolyCode(barcode, previousBarcodeList) {
    var previousBarcodes = PosNGKStringToArray(previousBarcodeList);
    return onValidationPrizeTickets(barcode, previousBarcodes);
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKMustDoAgeVerification(previousBarcodeList, askAge) {
	if ((askAge != undefined) && (askAge != null) && (askAge.toLowerCase() == 'false'))
	{
		return false;
	}
    return PosNGKIsStringNullOrWhiteSpace(previousBarcodeList);
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKSendMonopolyBarcodeEvaluationResult(action, barcode) {
    if (PosNGKIsStringNullOrWhiteSpace(barcode)) {
        barcode = "";
    }
	
	if(action == "Add")	{
		var ctx = new SessionContext;
				
		var previosBarcodes = ctx.get("NGK_MONOPOLY_PREVIOUS_BARCODES");
		
		if (PosNGKIsStringNullOrWhiteSpace(previosBarcodes)) {
			previosBarcodes = barcode;
		}
		else {
			previosBarcodes = previosBarcodes + "," + barcode;			
		}
		PosSetSessionProperty ("NGK_MONOPOLY_PREVIOUS_BARCODES", previosBarcodes);
		
		return;
	}
	
	if(action == "ClearAll") {
		PosSetSessionProperty ("NGK_MONOPOLY_PREVIOUS_BARCODES", "");
	}
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKRedeemMonopolyBarcode(barcode, previousBarcodeList, closePopUp) {
    var allMonopolyBarcodes;
    if(PosNGKIsStringNullOrWhiteSpace(previousBarcodeList)) {
		allMonopolyBarcodes = barcode;
    } else {
        allMonopolyBarcodes = previousBarcodeList + "," + barcode;        
    }
	
	var ctx = new SessionContext();
	if (PosIsOfferApplied() && allMonopolyBarcodes === ctx.get("NGK_MONOPOLY_CURRENT_BARCODE_TO_VALIDATION")) {
		PosNGKHandleMonopolyError("NGK_MSG_OFFERS_POPUP_WARNING_DUPLICATED", closePopUp);
		var origin = ctx.get("NGK_MONOPOLY_UNGATED_ORIGIN");
		PosSetSessionProperty ("NGK_MONOPOLY_UNGATED_ORIGIN", "");
		if(origin == "REVIEW") {
			PosNGKEnqueueWFJS("WF_NGK_FinalShowOrderReview")
		}
		return;			
	}
	
	PosSetSessionProperty ("NGK_MONOPOLY_CURRENT_BARCODE_TO_VALIDATION", allMonopolyBarcodes);
	
    if (!PosCSOIsTrnInProgressJS("true"))
    {
        PosCreateSale();
    }
    PosNGKSendMonopolyBarcodesToEcp(allMonopolyBarcodes);
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKSendMonopolyBarcodesToEcp(allMonopolyBarcodes) {
	PosSetSessionProperty("WAITING_APPLY_MONOPOLY_RESPONSE", true, false);
    PosApplyByMonopolyCode(allMonopolyBarcodes);
    PosNGKShowProcessMonopoly();
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKIsMonopolyEnabledForUngated() {
    var barcodeTypes=PosGetBarcodeTypesEnabledUngatedScanJS();
    for each(var bt in barcodeTypes) {
        if(bt === CSO_UNGATED_SCAN_TYPE_MONOPOLY_PRIZE) {
            return true;
        }
    }
    return false;
}

/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKIsLegalAge() {
    var isLegalAge = PosNGKAskConfirmationMessageJS("NGK_VOUCHER_CONFIRMATION_TEXT|WHITE|WHITE|GREEN|no_image_key", "MSG_YES|GREEN|WHITE|WHITE|no_image_key", "MSG_NO|RED|WHITE|WHITE|no_image_key", "MSG_TITLE_MONOPOLY|YELLOW|YELLOW|YELLOW");
    if (PosCheckSessionProperty("NGK_POPUP_TIMEOUT" ,"true")) {
		return "2"
    }
	if (isLegalAge) return "1";
	
    return "0";
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKStringToArray(str) {
    if (PosNGKIsStringNullOrWhiteSpace(str)) {
        return [];
    }
    return str.split(",");
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKIsStringNullOrWhiteSpace(str) {
    return !str || trim(str+"").length === 0;
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKHandleMonopolyError(i18nErrorMessage, closePopUp) {
    PosNGKSendMonopolyBarcodeEvaluationResult(MONOPOLY_ACTION_CLEAR);
	if(closePopUp) {
		PosNGKCloseProcessMonopoly();
	}
    var title = i18nErrorMessage;
    var buttonLabel = 'MSG_OK';
    var titleArray = new Array();
	titleArray.push(new Array(PosCSOI18nGetMessageJS(title), undefined, undefined, undefined, PosNGKGetLocalizedImageFromStoreDB(undefined), 'ScreenNameKey:' + title));
	var optionArray = new Array();
	optionArray.push(new Array(PosCSOI18nGetMessageJS(buttonLabel), undefined, undefined, undefined, PosNGKGetLocalizedImageFromStoreDB(undefined), undefined, 'EventLabelKey:' + undefined));
    var returnValue = PosNGKSendSyncPickImageJS("DLG_SIMPLE_DIALOG", optionArray, new Array("true"), titleArray);
    if (returnValue != null) {
        PosNGKShowMainScreen();
    }
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKHandleMonopolyInstantWinPrizeTicket(barcode, previousBarcodeList, closePopUp) {
    PosNGKSendMonopolyBarcodeEvaluationResult(MONOPOLY_ACTION_CLEAR);
    PosNGKRedeemMonopolyBarcode(barcode, previousBarcodeList, closePopUp);
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKHandleMonopolyCollectToWinPrizeTicket(barcode) {
    PosNGKSendMonopolyBarcodeEvaluationResult(MONOPOLY_ACTION_ADD, barcode);
	PosNGKShowNextMonopolyBarcode("NGK_POPUPMSG_PRIZE_TICKET_SCAN_NEXT");
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKCancelMonopoly() {
    var ctx = new SessionContext;
	
	var origin = ctx.get("NGK_MONOPOLY_UNGATED_ORIGIN");
	
	PosSetSessionProperty ("NGK_MONOPOLY_UNGATED_ORIGIN", "");

	PosNGKSendMonopolyBarcodeEvaluationResult(MONOPOLY_ACTION_CLEAR);
	
	if(origin == "REVIEW") {
		PosNGKEnqueueWFJS(SHARED_CTX["KEY_WF_NGK_FINAL_SHOW_ORDER_REVIEW"]);
		PosNGKEnqueueWFJS("WF_NGK_FinalShowOrderReview");
	}
	return true;
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKHandleMonopolyAlreadyScanned() {
	PosNGKShowNextMonopolyBarcode("NGK_POPUPMSG_PRIZE_TICKET_CODE_DUPLICATED");
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKShowProcessMonopoly() {
    if (PosCheckSessionProperty("WAITING_APPLY_MONOPOLY_RESPONSE" ,"true")) {
		return PosSendUICmd('<Event type="ASYNC" name="DLG_SHOW_PROCESS_MONOPOLY"/>');	
	}
	return true;
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKCloseProcessMonopoly() {
    return PosSendUICmd('<Event type="ASYNC" name="DLG_CLOSE_PROCESS_MONOPOLY"/>');;
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKProcessMonopolyError(nStatusCode)
{
    var ctx = new SessionContext;

	ctx.set("WAITING_APPLY_MONOPOLY_RESPONSE", "false", false);
	
	switch(nStatusCode) {
		case -8037:
			PosNGKHandleMonopolyError("NGK_MSG_PRIZE_OFFER_ERROR_8037", true);
			break;
		case -8038:
			PosNGKHandleMonopolyError("NGK_MSG_PRIZE_OFFER_ERROR_8038", true);
			break;
        case -8039:
			PosNGKHandleMonopolyError("NGK_MSG_PRIZE_OFFER_ERROR_8039", true);
			break;
		case -8040:
			PosNGKHandleMonopolyError("NGK_MSG_PRIZE_OFFER_ERROR_8040", true);
			break;
        case -8041:
			PosNGKHandleMonopolyError("NGK_MSG_PRIZE_OFFER_ERROR_8041", true);
			break;
        case -8042:
			PosNGKHandleMonopolyError("NGK_MSG_PRIZE_OFFER_ERROR_8042", true);
			break;
        default:
            API.dbg("[MONOPOLY] ERROR: The impossible has happened whilst evaluating monopoly ticket: evaluationResult=[" +nStatusCode+ "]");
			PosNGKHandleMonopolyError("NGK_MSG_PRIZE_OFFER_ERROR_8042", true);
	}
	
	var origin = ctx.get("NGK_MONOPOLY_UNGATED_ORIGIN");
	
	PosSetSessionProperty ("NGK_MONOPOLY_UNGATED_ORIGIN", "");
	
	PosSetSessionProperty ("NGK_MONOPOLY_CURRENT_BARCODE_TO_VALIDATION", "");

	if(origin == "REVIEW") {
		PosNGKEnqueueWFJS("WF_NGK_FinalShowOrderReview")
	}
}
/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKShowNextMonopolyBarcode(i18nMessage) {
	var titleTag = new XML("<Title>"+i18nMessage+"</Title>");
    var xml = new XML('<Event type="ASYNC" name="DLG_SHOW_NEXT_MONOPOLY_BARCODE"/>');
    xml.appendChild(titleTag);	
	return PosSendUICmd(xml.toXMLString());
}

/**
* @since CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
*/
function PosNGKIsMonopolyUngated() {
    var ctx = new SessionContext;
	
	var origin = ctx.get("NGK_MONOPOLY_UNGATED_ORIGIN");
	
	PosSetSessionProperty ("NGK_MONOPOLY_UNGATED_ORIGIN", "");
		
	if(origin != null && origin != "") {
		PosNGKSendMonopolyBarcodeEvaluationResult(MONOPOLY_ACTION_CLEAR);
		if(origin.toUpperCase() == "REVIEW") {
			PosNGKEnqueueWFJS("WF_NGK_FinalShowOrderReview")
		}
		else 
		{
			PosNGKShowMainScreen();	
		}
		return true;
	}
	return false;
}

/**
* @since CSO-1258 - NGK 5.17 - Mobile Offers - the "any product" offers are no longer supported
*/
function PosNGKUpdatePromotionProducts(productCodes) {
	
	if(!productCodes)
		return;
	
	var xml = new XML('<Event type="ASYNC" name="DLG_UPDATE_PDP_PROMOTION_PRODUCTS"/>');
	for each(var code in productCodes.split("|"))
	{
		var valueMealResultInformation = PosNGKGetValueMealXML(code, null, false, "", true, "", "", false, undefined, true);
		xml.appendChild(valueMealResultInformation);
	}
	
	return PosSendUICmd(xml.toXMLString());
}

/**
 * @brief - Clear Offer
 * @return - always true
 * @author - razevedo
 * @since - CSO-1304 - SP8.5 PR1-Kiosk: [Ungated Scan Phase 1]: Deal count on order basket is still displaying even though offer condition not satisfied after pressing the back button on order review screen and also "Offer condition not met" message is not displaying
 */
function PosNGKDoClearOffer(){
	PosDoClearOffer('false');
	return true;
}

/**
 * @brief -  Reduces the value meal price if the sum of the a la carte components is lesser than the value meal price
 * @return - always true
 * @author - razevedo
 * @since - CSO-1355 - POS-503 - Automatic Value Meal Price Reduction - Kiosk Implementation
 */
function PosNGKCheckValueMealPriceReduction(){
	
	if(typeof(PosDoAutoVMPriceReduction) != 'function')
		return true;

	var totalBefore = KioskViewHelper.View().Order.@totalAmount;	
	PosDoAutoVMPriceReduction();	
	var totalAfter = KioskViewHelper.View().Order.@totalAmount;
	
	var autoVMPriceReductionPopUpEnabled = lGetCSOUserInterfaceStringParameter("autoVMPriceReduction.popUpEnabled", "false").toLowerCase() == "true";

	if(totalBefore != totalAfter && autoVMPriceReductionPopUpEnabled) {
		PosNGKSendSyncPickImageJS("DLG_SIMPLE_DIALOG", new Array(PosCSOI18nGetMessageJS("MSG_OK")), ["true"], [PosCSOI18nGetMessageJS("CSO_MSG_VALUE_MEAL_PRICE_REDUCTION")]);		
	}
}

/**
 * @brief - Wrapper for PosDismissTableServiceArea
 * @return - always true
 * @author - razevedo
 * @since - CSO-1381 - POS-252 - NGK-Table Service Reporting
 */
function PosNGKDismissTableServiceArea() {
	if(typeof(PosDismissTableServiceArea) == 'function')
		PosDismissTableServiceArea();
	return true;
}

/**
* @since CSO-1258 - NGK 5.17 - Mobile Offers - the "any product" offers are no longer supported
* @modified CSO-1313 - Kiosk SP8.5 PR2 S3:[Ungated Scan Phase 2] On Order review screen when items with priced condiments are edited(for BOGO offers/BOGO McGriddle), than on offer/promoPDP screen price of priced condiments are excluded instead total price should get displayed
*/
function PosNGKUpdatePromotionProducts(productCodes) {
	
	if(!productCodes)
		return;
	
	var xml = new XML('<Event type="ASYNC" name="DLG_UPDATE_PDP_PROMOTION_PRODUCTS"/>');
	for each(var prodData in productCodes.split("|"))
	{
		var code = prodData.split(";")[0];
		var valueMealResultInformation = PosNGKGetValueMealXML(code, null, false, "", true, "", "", false, undefined, true);
		valueMealResultInformation.@SwappedCode = code;
		valueMealResultInformation.@Mode = prodData.split(";")[1];
		valueMealResultInformation.@Step = prodData.split(";")[2];
		valueMealResultInformation.@SellSequence = prodData.split(";")[3];
		xml.appendChild(valueMealResultInformation);
	}
	
	return PosSendUICmd(xml.toXMLString());
}
/* signed aut version 9-9076
 * authority id = builder
 * authority level = 10
 * authority name = NewPOS release level
 * group = npi
 * validity = 2010-04-18
 * signature type = slash_star
 * time stamp (GMT) = Fri Jan 26 13:15:43 2018
 * certificate = 393735312d37393437001b423673a1177aa4acda4c274891ac0493d8f8ff0ca62ead00d13aa9e929089d571fb1c8573fa0d6c83c6062c29b9b0da1150010
 * =============================================================================================================================
*/
