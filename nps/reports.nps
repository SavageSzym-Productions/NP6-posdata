/**
/**
 * reports.nps
 * This NPS file implements routines for generating reports.
 *
 *  * Copyright - (C) 1998-2005 Torex Corporation
 *
 * $Source -: /NewPOS/SRC/uscvs/cvs/___Config61/Posdata/US/nps/reports.nps,v $
 * $Revision: .1.1.4.11.6.3 $
 * $Date: 2009/08/31 15:20:39 $ (of revision) .
  * $Author: djohnson $ (of revision)
 */
var MAX_TENDER_TYPES=50;
var ROUND_MODE_PERCENT=6;   // ROUND_HALF_EVE
/** i18n message for PLAIN */
 var PLAIN = API.getLocalMsg("LMSG_SL_PLAIN",null);

/* Global StoreDB */
var xmlStoreDB = new XML(API.getStoredb());
var xmlPosDB = "";

try { 
	xmlPosDB = new XML(API.getPosdb());
} catch(error) { 
	xmlPosDB = new XML(API.getStoredb());
	API.dbg("Cannot fetch pos-db.xml, using store-db.xml for use required parameters.");
} 

/** Output buffer used to generate report- */
var outputBuffer 	= null;
var outputBufferEcp	= null;
var outputLineCounterEcp = 0;


/* Root node of XMLs */ 
var rootConfig		= null;
var rootCash		= null;
var rootPmix		= null;
var rootHourlySales	= null;
var rootView		= null;
var rootSOS			= null;
var rootCustom		= null;
var rootProduct		= null;
var rootOpenOrders	= null;

var rootSOSFC		= null;
var rootSOSDT		= null;
var rootSOSWT		= null;
var rootSOSMFY		= null;
var rootSOSCBB      = null;
var rootKVSView 	= null;

var g_segmentData	= null;

var flagTypePos		= "";

var flagTypePodDT	= false;
var flagTypePodWT	= false;
var flagTypePodFC	= false;

//NVS-4243
var PODCSO = 8;
var isRcpHHOT		= false;
var isRcpKiosk		= false;
var isKioskTPUI		= false;
//NVS-3839, NVS-3844, NVS-3846 - msilva
var kioskReversalReceiptContent	= "";

// Lindomar Araujo: 2014/08/28 - SQC-6001 - Checking if the smartRouting and hideAddGrillParameter is enabled to check if the product is a SGP item
/* handle grills */
var hideAddGrillModifier	= false;
var sgpEnabled = API.findParamInSectionWide("enableSmartRouting","SmartRouting");
var sgpHideAddGrill = API.findParamInSectionWide("hideAddGrillModifier","SmartRouting");


/** Holds Language */
var LANG = null;

/** Values used in sales report */
var MODE_HOURLY   = 60;
var MODE_30MIN    = 30;
var MODE_15MIN    = 15;
var taxIDList = new Array();
var taxChainNodes = new Array();
var taxChainArray = new Array();
var taxIDNodes = "";
var feeList;
var depositList;
var showRateList = new Array();
var taxIDCount;
var SalesReceipt;
var SalesReceiptTaxID;
var SalesReceiptSEQFormat;
var promotionTitles;
var addGiftCert;
var addPromoItems;
var addRMHC = null;  //NVS-5381 John Brancaleon 05-OCT-2016
var isOrderLevelPromotion;
var isOrderLevelOffer;
var olOfferTitle;
//NVS-4875 - msilva
var promotionOn;
var offerOn;
//NVS-5596
var hasSameAsPreviousItem;
var isSameAsPreviousItem;
var printOfferLine;

var itemCode;
var prevItemCode;

var TLOGRSP_ERRORMSG=6;
var TLOGRSP_CANNOTCLOSEOPENORDERS=21;
var TLOGRSP_NOOFFLINESYNC=23;
// Temporary functions to prevent errors
function reportDummy(config) { return config; };
function reportOverring (config) { return config; };

//NVS-3748
var orderNbrFormat = 1;
var largeOrderNumberFormat = 2;
var largeOrderNumber = false;
var dtLargeOrderNumber = false;  //NVS-6563 11-JAN-2017 John Brancaleon

initReportGlobals();

function initReportGlobals() {
    if(typeof(xmlStoreDB) =="undefined" || xmlStoreDB == null)
	{
		xmlStoreDB = new XML(API.getStoredb());
		xmlPosDB = new XML(API.getPosdb());
	}

	//orderNbrFormat = GetStoreDbConfigurationParameterOrDefault("Store.wide", "Cashless", "Aserv", "LogDir", "E:\NewPos61\LOG\Aserv");
	
    storedbPath = "Configurations.Configuration.(@type==\"POS\").Section.(@name==\"UserInterface\").Parameter.(@name==\"orderNbrFormat\").@value";
    posdbPath = "Configuration.(@imports==\"POS\").Section.(@name==\"UserInterface\").Parameter.(@name==\"orderNbrFormat\").@value";
    orderNbrFormat = getConfigValue(storedbPath , posdbPath, "1");
	

	storedbPath = "Configurations.Configuration.(@type==\"POS\").Section.(@name==\"UserInterface\").Parameter.(@name==\"LargeOrderNumberFormat\").@value"; 
	posdbPath = "Configuration.(@imports==\"POS\").Section.(@name==\"UserInterface\").Parameter.(@name==\"LargeOrderNumberFormat\").@value";
	largeOrderNumberFormat = getConfigValue(storedbPath , posdbPath, "2");
	
	 
	storedbPath = "Configurations.Configuration.(@type==\"KVSRedesign\").Section.(@name==\"WayofWork\").Parameter.(@name==\"DualPointGrill\").@value";
	posdbPath = "Configuration.(@imports==\"KVSRedesign\").Section.(@name==\"WayofWork\").Parameter.(@name==\"DualPointGrill\").@value";
	largeOrderNumber = getConfigValue(storedbPath , posdbPath, "false");
	 
	//NVS-6563 11-JAN-2017 John Brancaleon - Get the value for the DTDualPoint parameter to decide whether to print the Large Order Number on DT receipts/grill slips/ORB receipts 
	storedbPath = "Configurations.Configuration.(@type==\"POS\").Section.(@name==\"Report\").Parameter.(@name==\"DTDualPoint\").@value";
	posdbPath = "Configuration.(@imports==\"POS\").Section.(@name==\"Report\").Parameter.(@name==\"DTDualPoint\").@value";
	dtLargeOrderNumber = getConfigValue(storedbPath , posdbPath, "false");
	//NVS-6672 20-JAN-2017 John Brancaleon - Check for the POS to have the DTDualPoint configuration if the configuration option is not found where it will be in a KVS.
	if(dtLargeOrderNumber == "false"){
		posdbPath = "Services.Service.Configuration.(@imports==\"POS\").Section.(@name==\"Report\").Parameter.(@name==\"DTDualPoint\").@value";
		dtLargeOrderNumber = getConfigValue(storedbPath, posdbPath, "false");
	}
	 
	//UberEats NVS-6999 - msilva - UberEats Integration 
	storedbPath = "Configurations.Configuration.(@type==\"POS\").Section.(@name==\"Cash\").Parameter.(@name==\"deliveryTenderIDs\").@value";
	posdbPath = "Configuration.(@imports==\"POS\").Section.(@name==\"Cash\").Parameter.(@name==\"deliveryTenderIDs\").@value";
	deliveryTenders = getConfigValue(storedbPath, posdbPath, "false");
}

/* @brief -(java safe version) returns bool if <parameter> is <section> matches <val>
 * @return -bool
 */
function PosCheckParameter_ex (section, parameter, val) {

	/* check of the Busines Component exists, if not parse the XML directly -needed for JAVA npscript version */
	try {
		return (PosCheckParameter(section,parameter,val));
	} catch (e) {
		var paramVal  = xmlStoreDB.Configurations.Configuration.(@type=="POS").Section.(@name==section).Parameter.(@name==parameter).@value;
		if (paramVal == val) {
			return true;
		} else {
			return false;
		}
	}
}

/* NVS-2383 Implement the Voice Survey Code on receipts 
   uses https://en.wikipedia.org/wiki/Luhn_algorithm checksums 
   validate with this.substr(0,this.length-1).luhnGet() == this */
String.prototype.luhnGet = function()
{
    var luhnArr = [[0,1,2,3,4,5,6,7,8,9],[0,2,4,6,8,1,3,5,7,9]], sum = 0;
    this.replace(/\D+/g,"").replace(/[\d]/g, 
		function(c, p, o) { sum += luhnArr[ (o.length-p)&1 ][ parseInt(c,10) ]});
    return this + ((10 - sum%10)%10);
};

/**
 * \brief Basic printer functionality
 */
Printer.prototype.print  = function (line) {
    if (line != null) {
     outputBuffer.append (line);
    }
    outputBuffer.append ("\n");
}
function Printer (){}
/**
 * \brief Basic POS parameter getter
 */
/* Properties */
if(typeof(BusinessObjectHelper) != "undefined") {
    Config.prototype.helper    = new BusinessObjectHelper (); // Helper for configuration check
}
else {
    Config.prototype.helper    = null;
	Config.prototype.xmlStoreDB  = new XML(API.getStoredb());  //to support printing on KVS's
}
Config.prototype.storewide = false;
Config.prototype.section   = null;
/* Methods */
/**
 * \brief Get a given parameter from configuration
 * \param [in] param - Parameter name
 * \return The parameter value
 * \return null if parameter could not be obtained
 */
Config.prototype.getParameter = function (param) {
    var value = null;
    if(this.helper!=null) {
        if (this.storewide) {
            value = this.helper.findParamInSectionWide (param, this.section);
        } else {
            value = this.helper.findParamInSectionConfig (param, this.section);
        }
    } else {
		sWide = (this.storewide)?"Store.wide":"POS";
		value  = this.xmlStoreDB.Configurations.Configuration.(@type==sWide).Section.(@name==this.section).Parameter.(@name==param).@value;
    }
    return value;
}

/**
 * \brief Gets a boolean parameter from configuration
 * \param [in] param - Parameter name
 * \return A boolean
 * \retval true of parameter is set
 * \retval false if parameter is not set
 */
Config.prototype.getBoolParameter = function (param) {
    var value = this.getParameter (param);
    if ((null != value) && ("ENABLED" == String(value).toUpperCase ())) {
     return true;
    }
    return false;
}

/**
 * \brief Constructor of Config class
 */
function Config (section, storewide) {
    this.section   = section;
    this.storewide = storewide;
}

/* Sale iterator properties */
Iterator.prototype.items   = new Array (); // Sale iterator items array
Iterator.prototype.current = 0;            // Current item

/**
 * \brief Constructor for a facility to iterate a sale
 * \param[in] items - Array of items to iterate
 * \author RFL
 * \since NPS-4867
 */
function Iterator (items) {
    this.items   = items;
    this.current = 0;
}

/**
 * \brief Checks if the iterator has reached the end of data stream
 * \return A boolean
 * \retval true if end of the iterated container has been reached.
 * \retval false if end of the iterated container has not been reached.
 * \author RFL
 * \since NPS-4867
 */
Iterator.prototype.atEnd = function () {
    return (this.current >= this.items.length);
}

/**
 * \brief Moves the iterator to the next item
 * \return A boolean
 * \retval false if reached the end of the items list
 * \retval true if end of the list was not reached
 * \author RFL
 * \since NPS-4867
 */
Iterator.prototype.next = function () {
    ++this.current;
    if (! this.atEnd ()) {
     return true;
    }
    return false;
}

/**
 * \brief Return the current item from the iterator
 * \return An instance of whatever is inside the array of items
 * \retval null if reached the end of the list
 * \author RFL
 * \since NPS-4867
 */
Iterator.prototype.get = function () {
    if (! this.atEnd ()) {
     return this.items [this.current];
    }
    return null;
}

/**
 * \brief Resets the iterator, returning it to the first element
 */
Iterator.prototype.reset = function () {
    this.current = 0;
}

/**
 * \brief Object describing a sale item, used for output formatting
 */
SaleItem.prototype = {        // List of items inside a sale
    product     : null,       // Sold product
    levelZeroQty: 0      // Level zero quantities
};
function SaleItem (item, qty) {
    this.product      = item;
    this.levelZeroQty = qty;
}

/* Sale object properties */
Sale.prototype.PC_VALUE_MEAL = 3;         // Constant. Value meal product class
Sale.prototype.PC_CHOICE     = 4;         // Constant. Choice product class
Sale.prototype.size          = 0;         // Size of the items list
Sale.prototype.items         = new Array ();   // List of items
Sale.prototype.printer       = new Printer (); // Printer for output
Sale.prototype.taxList       = new Array(); // tax list
Sale.prototype.config        = {          // Configuration parameters
    showAsSinglePrice: false,             // Show VMs with single price
    showUpcharge     : false,             // Show up-charge text
    upchargeText     : null,              // Up-charge text to show
    suppressDiscount : false,             // Suppress discount
    showDiscount     : false,             // Shows discount text
    discountText     : null,              // Discount text to show
    inlineText       : false,		       // inLine text
    hidePrice        : false                   // NPS-7605: adjustment slip does not show item prices
};

/**
 * \brief adds tax info to a list for comparision later
 * \param[in] item - Item to add to the sale
 */
Sale.prototype.checkTaxes= function (item) {
	var found = false;
	if (item.taxChain.tax.@id[0] < 0) {return;}
	for (var i=0; i<this.taxList.length; i++) {
		if (this.taxList[i] == item.taxChain.tax.@id[0]) { found = true; break;}
	}

	if (!found) { this.taxList.push(item.taxChain.tax.@id[0]); }
}


/**
 * \brief Adds an item to the sale representation
 * \param[in] item - Item to add to the sale
 * \author RFL
 * \since NPS-4867
 */
Sale.prototype.addItem = function (item, qty) {
    this.items[this.size] = new SaleItem (item, qty);
    ++this.size;
}

/**
 * \brief Returns an iterator to run over a sale
 * \author RFL
 * \since NPS-4867
 */
Sale.prototype.iterator = function () {
    return new Iterator (this.items);
}

/**
 * \brief Calculates price difference for a given item
 * \param [in] item - Sold item
 * \return Float
 * \retval Calculated difference between its price and its reference price
 */
Sale.prototype.priceDifference = function (item) {

	/*NVS-6014 - msilva - Consider promoted products when checking up charge items*/
	var referencePriceTotal = parseFloat(item.referencePrice) * parseFloat((item.quantity - item.quantityPromo));
	var referencePriceTotalPromoted = parseFloat(item.referencePrice) * parseFloat(item.quantityPromo);
	
	var totalPrice = parseFloat(item.totalPrice);
	if(item.BPTotalPrice != undefined && item.BPTotalPrice != null ){
		totalPrice = totalPrice + parseFloat(item.BPTotalPrice);
	}
	
	var diff = totalPrice - referencePriceTotal - referencePriceTotalPromoted;
	if (item.isUpcharge == "true" || item.isUpcharge == true){//NVS-8697-1, when using above calculation, total is counted twice, change the logic for upcharge.
		diff = parseFloat(item.BPTotalPrice) - referencePriceTotal - referencePriceTotalPromoted;
	 }
   	 return diff;

}

/**
 * \brief Set of methods to format strings
 * \author RFL
 * \since NPS-4867
 */
Sale.prototype.formatting = {
    /**
     * \brief Create a string containing spaces for padding
     * \param [in] n - Number of spaces to use for padding
     */
    createPadding: function (n) {
     var str = "";
     for (; n > 0; --n) {
         str = str + " ";
     }
     return str;
    }
};

function removeChar(s, c) {

   var r = "";

   for (var i = 0; i < s.length; i ++) {
      if (s.charAt(i) != c) r += s.charAt(i);
   }

   return r;
}

/**
 * \brief Prints an item line
 * \author RFL
 * \since NPS-4867
 * \remarks This is a port of addItemLine function which was developed as an
 * inner function inside original receipt function
 */
Sale.prototype.printItemLine = function (item, qtyLevelZero) {
    var ident     = "";
    var level     = toInt(item.level);
    var itemClass = item.productType.length();

    if (itemClass != 0 && item.productType == 4) {
     return;
    }
    for(var i=0; i<level; i++) {
     ident += "  ";
    }
    if (item.level == 0) {
     qtyLevelZero = 1;
     qtypromoZero = item.quantityPromo;
    }
	if (this.config.showAsSinglePrice == true) {
    var aux   = item.quantity  * qtyLevelZero;
	} else {
		var aux = item.quantity;
	}
    var qty   = API.setOnRight(aux, 3);
    /* add tax information, if configured */
    if ( (showTaxID) ) {
		ti = taxIDList["ID:"+item.tax.@id[0]];
		taxIden = "";
		if (ti != null) {taxIden = " (T"+ti+")"; }
		var name  = item.longName+taxIden;
	} else {
    	var name  = item.longName;
	}

    // NVS-148  RPS 4/20/10  - The following caused price to be formatted twice
	// values over $1000 would end being zero after second format due to comma.


	var itemPrice = Number(item.totalPrice);
	
	// NPS-19043/ NVS-4645 
	var promotionData = null; 
	// NPS-11867 Start
	if(item.PromotionApplied != undefined) {
		// NPS-19043 - NVS-4645
		promotionData = this.getPromotionData(item.PromotionApplied.@promotionId, item.PromotionApplied.@promotionCounter); 
		if(promotionData != null && !promotionData.nameAlreadyUsed) 
		{ 
		  var promotionNameLine = ident + promotionData.name; 
		  if(!this.config.hidePrice && !promotionData.showIndividualPrices) 
		  { 
			var formattedPromotionTotal = API.formatNumber(promotionData.total, NUMBER_FORMAT, 8); 
			promotionNameLine = API.setOnLeft(promotionNameLine, COLS-formattedPromotionTotal.length) + formattedPromotionTotal; 
			}
		  this.printer.print(promotionNameLine); 
		  promotionData.nameAlreadyUsed = true; 
		}	

		var totalPromotionDiscount = new BigDecimal(0); 
			var originalPrice = Number(item.PromotionApplied.@originalPrice);
		if(originalPrice > 0) 
		{ 
			for(var i=0; i < item.PromotionApplied.length(); ++i) 
			{ 
			  totalPromotionDiscount = totalPromotionDiscount.add(new BigDecimal(item.PromotionApplied[0].@discountAmount)); 
			}
			itemPrice = new BigDecimal(item.totalPrice).subtract(totalPromotionDiscount).toString(); 
		}
	}
	// NPS-11867 End
	
	var price = API.formatNumber (Number(itemPrice), NUMBER_FORMAT, 8);

    var lineText = null;
    if (this.config.showAsSinglePrice) {
		if (this.PC_VALUE_MEAL == item.productType) {
			price = API.formatNumber (item.totalVMPrice, NUMBER_FORMAT, 8);
		}
		else if (item.choiceLevel > 0) {
         price = "";
         ident = ident + "  ";
         var diff = this.priceDifference (item);
         //NVS-536 force diff to be a number
		 // SDO-4864 - Fix for floating point result
		 diff = API.formatNumber (diff, NUMBER_FORMAT, 8);

         if (diff < 0.00) {
             if (! this.config.suppressDiscount) {
              if (this.config.showDiscount) {
               if (isNaN(diff)) {
			      price = diff;
               } else {
			      price = API.formatNumber (Number(diff), NUMBER_FORMAT, 8);
               }
               if (this.config.discountText != undefined) {
                   if (this.config.inlineText) {
                    price = "<" + this.config.discountText + ">  " + price;
                   }
                   else {
                    lineText = "<" + this.config.discountText.substr(0,16) + ">";
                   }
               }
              }
             }
            } else if (diff > 0.00) {
             if (this.config.showUpCharge) {
              if (isNaN(diff)) {
			      price = diff;
              } else {
			      price = API.formatNumber (Number(diff), NUMBER_FORMAT, 8);
              }
              if (this.config.upchargeText != undefined) {
               if (this.config.inlineText) {
                   price = "<" + this.config.upchargeText + ">  " + price;
               }
               else {
                   lineText = "<" + this.config.upchargeText.substr(0,16) + ">";
               }
              }
          }
         }
     }
	 // NVS-366 RPS 1/5/11
     if(level > 0 && Number(price) == 0) {
         price = "";
      } else if (item.choiceLevel < 1) {  // NVS-449  RPS 4/22/11  // If clause added for NVS-492
	    price = API.formatNumber(Number(price), NUMBER_FORMAT, 8);
     }
   }
    else {
	 // NVS-366 RPS 1/5/11
     if(level > 0 && Number(price) == 0) {
         price = "";
     } else {
		var priceNoComma = removeChar(String(price),",");
	    price = API.formatNumber(Number(priceNoComma), NUMBER_FORMAT, 8);
	}
    }
    if (this.config.hidePrice) {
    	price = "";
    }

	// NVS-668 added check for level RPS 12/08/2011
    if(toInt(item.quantityPromo) != 0 && level == 0) {
        if (this.config.showAsSinglePrice) {
          if (this.PC_VALUE_MEAL == item.productType || item.choiceLevel <= 0 || trim(item.choiceLevel)=="" || item.choiceLevel=="NAN") {
                price = item.quantityPromo + "P" + price;
         }
        } else {
            price = item.quantityPromo + "P" + price;
        }
    }

	var doNotShowPromotionSubItemPrice = promotionData != null && !promotionData.showIndividualPrices; 
	if(doNotShowPromotionSubItemPrice) 
	{ 
		price = ""; 
	}
    price = " " + price;

	//Getting custom info
	var customInfo = GetCustomField(item, "customInfo");
	if(customInfo != "")
	{
		ident += "  ";
		this.printer.print (ident + customInfo);
	}
	/* handle grill lines */
	// Lindomar Araujo: 2014/08/28 - SQC-6001 - Checking if the smartRouting and hideAddGrillParameter is enabled to check if the product is a SGP item
	/* handle grills */
	if (sgpEnabled == "true" && sgpHideAddGrill == "true") {
		if (item.isCYT == "true") {
			hideAddGrillModifier = true;
			var lastItemCode = item.itemCode;
		} else {
			if (item.isGrillLine == "false") {
				hideAddGrillModifier = false
			}
		}
	}
    if(item.isGrillLine == "true") {
		// Lindomar Araujo: 2014/08/28 - SQC-6001 - Sending the new parameter(hideAddGrillModifier) to the function getGrillDescription
		//line = "    " + ident + getGrillDescription(item, true, false, hideAddGrillModifier);
		if(item.displayNumbersInsteadofModifiers == "true" || item.displayNumbersInsteadofModifiers == true){
			//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
			line = ident + getGrillDescriptionForMcCafeItems(this.data, true, false, hideAddGrillModifier);
		}
		else{
			//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
			line = ident + getGrillDescription(this.data, true, false, hideAddGrillModifier);
		}		
    } else {
		line = ident + qty + " " + name;
    }

	// NVS-69 RPS 11/24/2009
	if (line.length > 30) {
		line = line.substring(0, 30);
	}
    line = API.setOnLeft(line, COLS-price.length) + price;

    this.printer.print (line);

    if(item.discounts !== undefined && item.discounts != null){
    	var discountLine = null;
    	var disCountAmount = null;
		for each (discount in item.discounts.discount){
			// Discount By Item
			discountLine 	= "    " + ident + discount.@description;
			discountAmount 	= API.formatNumber(Number(discount.@amount), NUMBER_FORMAT, 8);
			discountAmount 	= " " + discountAmount;
			discountLine	= API.setOnLeft(discountLine, COLS-discountAmount.length) + discountAmount;
			this.printer.print(discountLine);
			discountLine 	= null;
			discountAmount 	= null;
		}
	}

    // NPS-8922 - Start
    if(item.Deposit !== null) {
        if(item.Deposit.@quantity > 0) {
            var lineDeposit		= "    " + ident + item.Deposit.@description;
            var depositValue 	= API.formatNumber (Number(item.Deposit.@value), NUMBER_FORMAT, 8);
            lineDeposit 		= API.setOnLeft(lineDeposit, COLS-depositValue.length) + depositValue;
            this.printer.print (lineDeposit);
        }
    }
    // NPS-8922 - End
	
	if(item.PromotionApplied != undefined)
    {
		// NPS-11606 - Start
		if((item.PromotionApplied.@offerId !== null) && (item.PromotionApplied.@offerId >= 0)){
			if(item.PromotionApplied.@discountType != null && item.PromotionApplied.@discountType.toUpperCase() == "PRICE") {
				var lineOffer		= "    " + ident + API.geti18nMsg(1, "MSG_BC_OFFERS_APPLIED_TOTAL",[]);
				var totalOffersDiscount = new BigDecimal(item.PromotionApplied.@discountAmount);
				/* var offerValue 	= API.formatNumber (Number(item.PromotionApplied.@discountAmount), NUMBER_FORMAT, 8); */
				 var offerValue 	= doNotShowPromotionSubItemPrice ? "" : API.formatNumber(totalOffersDiscount, NUMBER_FORMAT, 8); //NVS-4645
				lineOffer 		= API.setOnLeft(lineOffer, COLS-offerValue.length) + offerValue;
				this.printer.print (lineOffer);
			}
		}
		// NPS-11606 - End
		else {
			// NPS-11867 Start
			var originalPrice = Number(item.PromotionApplied.@originalPrice);
			var promotionLine = "";
			if(originalPrice > 0)
			{
				promotionLine               = "    " + ident + API.geti18nMsg(1, "MSG_BC_DISCOUNT_PROMOTION_APPLIED",[]);
				/* var itemDiscount            = parseFloat (item.totalPrice) - parseFloat (item.PromotionApplied.@originalPrice); */
				// NVS-4365 - Felipe Ramas
				var bdTotalPrice = new BigDecimal(item.totalPrice); 
				var bdOriginalPrice = new BigDecimal(item.PromotionApplied.@originalPrice); 
				var itemDiscount = bdTotalPrice.subtract(bdOriginalPrice); 
				/* var promotionItemDiscount   = API.formatNumber(itemDiscount, NUMBER_FORMAT, 8); */
				var promotionItemDiscount   = doNotShowPromotionSubItemPrice ? "" : API.formatNumber(itemDiscount, NUMBER_FORMAT, 8); //NVS-4645
				promotionLine               = API.setOnLeft(promotionLine, COLS-promotionItemDiscount.length) + promotionItemDiscount;			
			}
			else
			{
				promotionLine               = "    " + ident + API.geti18nMsg(1, "MSG_BC_ITEM_PROMOTION_APPLIED",[]) + " " + item.PromotionApplied.@id;
			}
			this.printer.print (promotionLine);		
		}
    }
    // NPS-11867 End
	
    if (null != lineText) {
		var size = 30 - lineText.length;
		this.printer.print (this.formatting.createPadding (size) + lineText);
    }
}


Sale.prototype.printItemLineAltLang = function (item, qtyLevelZero) {
    var ident     = "";
    var level     = toInt(item.level);
    var itemClass = item.productType.length();

    if (itemClass != 0 && item.productType == 4) {
		return;
    }
    for(var i=0; i<level; i++) {
		ident += "  ";
    }
    if (item.level == 0) {
		qtyLevelZero = 1;
    }
	
	var AltName  = item.alternativeLanguage.longName;
    var lineText = null;	

	// Printing in alternative language		
	line = null;
	if(item.isGrillLine == "true") {
		line = "    " + ident + getAltLangGrillDescription(item, true);		
	} else {
		line =  "   " + ident +" " + AltName;		
	}
	
	this.printer.print (line);	
	
	// IF this is used wil likely need Offers info printed here - api
}
/**
 * \brief Adjust the view for single price VMs
 * \author RFL
 * \since NPS-4867
 */
Sale.prototype.adjustViewToSinglePriceVM = function () {
    var parentVm = null;

    for (var it = this.iterator (); ! it.atEnd (); it.next ()) {
     var item = it.get ();

     if ((0 == item.product.level) && (this.PC_VALUE_MEAL == item.product.productType)){
            // This the value meal
            item.product.totalVMPrice = parseFloat (item.product.totalPrice);
            parentVm = item;
        } else if ((0 == item.product.level) && (this.PC_VALUE_MEAL != item.product.productType) && (item.product.choiceLevel <= 0)){
            parentVm = null;
     } else if (item.product.choiceLevel > 0) {
         // This is a choice
         if(parentVm!=null) {
                var diff = this.priceDifference (item.product);
				diff = API.formatNumber (diff, NUMBER_FORMAT, 8);
            if(diff>0 && this.config.showUpCharge) {
                    parentVm.product.totalVMPrice= parseFloat(parentVm.product.totalVMPrice) + (parseFloat (item.product.referencePrice) * (parseFloat(item.product.quantity)-parseFloat(item.product.quantityPromo)));
             } else if(diff<0 && (!this.config.suppressDiscount) && (this.config.showDiscount)) {
                    parentVm.product.totalVMPrice= parseFloat(parentVm.product.totalVMPrice) + (parseFloat (item.product.referencePrice) * (parseFloat(item.product.quantity)-parseFloat(item.product.quantityPromo)));
             } else {
			 parentVm.product.totalVMPrice= parseFloat(parentVm.product.totalVMPrice) + parseFloat(item.product.totalPrice);
                }
         }
     }
    }
}

/**setWhereToShowDiscountOnItem
 * @brief - Adjust where to show discount information in the item.
 * @return - none
 */
function setWhereToShowDiscountOnItem(xmlView){
	itemViewQtty = xmlView.ItemView.length();
	for(index=0;index < itemViewQtty; index++){
		discountsToShow = null;
		if(Number(xmlView.ItemView[index].level) == 0){
			if(xmlView.ItemView[index].discounts != undefined && xmlView.ItemView[index].discounts != null){
				discountsToShow = xmlView.ItemView[index].discounts; 
				if(checkSubItems(xmlView, index , discountsToShow)){
				}
			}
		}
	}	
}

function checkSubItems(xmlView, index, discountsToShow){
	itemViewQtty = xmlView.ItemView.length();
	if(index == itemViewQtty){
		return false;
	}
	currentLevel = Number(xmlView.ItemView[index].level);
	for(i=index+1; i < itemViewQtty; i++){
		if(Number(xmlView.ItemView[i].level) > currentLevel){
			//SubItem
			if(xmlView.ItemView[i].discounts != undefined && xmlView.ItemView[i].discounts != null){
				//SubItem has discount
				subItemDiscounts = xmlView.ItemView[i].discounts; 
				if(checkSubItems(xmlView, i, subItemDiscounts)){
					return false;
				}
			}else{
				//SubItem has no discount
				if(xmlView.ItemView[i].isGrillLine == 'true'){
					continue;
				}
			}
		}else{
			if(i == index){
				//There are no subItems
				return false;
			}else{
				//There are subitems
				if(xmlView.ItemView[i - 1].isGrillLine == 'true'){
					xmlView.ItemView[i - 1].discounts = discountsToShow;
					xmlView.ItemView[index].discounts = null;
					return true;
				}
			}
		}
	}
}

/**
 * \brief Prints the sale representation to the printer
 * \author RFL
 * \since NPS-4867
 */
Sale.prototype.print = function () {
    if (this.config.showAsSinglePrice) {
     this.adjustViewToSinglePriceVM ();
    }
    for (var it = this.iterator (); ! it.atEnd (); it.next ()) {
	var item = it.get ();
	this.printItemLine (item.product, item.levelZeroQty);
		if( API.findParamInSectionWide("alternativeLanguage","Localization" )  != null )
			this.printItemLineAltLang (item.product, item.levelZeroQty);
    }
}

/**
 * \brief Constructor for the sale object
 * \author RFL
 * \since NPS-4867
 */
function Sale () {
    var config = new Config ("ValueMealDisplay", true);

    this.config.showAsSinglePrice = config.getBoolParameter ("VMDisplay_ShowAsSinglePrice");
    this.config.showUpCharge      = config.getBoolParameter ("VMDisplay_ShowUpCharge");
    this.config.upchargeText      = config.getParameter     ("VMDisplay_UpChargeText");
    this.config.showDiscount      = config.getBoolParameter ("VMDisplay_ShowDiscount");
    this.config.discountText      = config.getParameter     ("VMDisplay_DiscountText");
    this.config.inlineText        = config.getBoolParameter ("VMDisplay_InLineText");
    this.config.suppressDiscount  = config.getBoolParameter ("VMDisplay_SuppressDiscount");
    this.size                     = 0;
    this.items.length             = 0;
    this.items                    = new Array()
}

function initGlobalt()
{
	/** Output buffer used to generate report */
	outputBuffer = new StringBuffer();

	/* Root node of XMLs */
	rootConfig		= null;
	rootCash		= null;
	rootPmix		= null;
	rootHourlySales	= null;
	rootView		= null;
	rootSOS			= null;
	rootCustom		= null;
	rootProduct		= null;
	rootOpenOrders  = null;

	rootSOSFC		= null;
	rootSOSDT		= null;
	rootSOSWT		= null;
	rootSOSMFY		= null;
     rootSOSCBB     = null;

	flagTypePos		= "";
	flagTypePodDT	= false;
	flagTypePodWT	= false;
	flagTypePodFC	= false;
}

function initXMLCashReport()
{
	/* Root node of XMLs */
	rootConfig		= null;
	rootCash		= null;
	rootPmix		= null;
	rootHourlySales	= null;
	rootView		= null;
	rootSOS			= null;
	rootCustom		= null;
	rootProduct		= null;
	rootOpenOrders  = null;

	rootSOSFC		= null;
	rootSOSDT		= null;
	rootSOSWT		= null;
	rootSOSMFY		= null;

	flagTypePos		= "";
	flagTypePodDT	= false;
	flagTypePodWT	= false;
	flagTypePodFC	= false;
}

// Detach the choices of the view
function detachChoice (view, newViewArray, showAsSinglePrice) {
    // Create array with sale items
    var itemChoice=new Array();
    var qtyPromoLevelZero=0;
    var qtyLevelZero=0;
    var qtyViewItem=view.ItemView.length();
	var lastlevel = 0;
	var accumulatedPromoQty=0;
    var accumulatedQty=0;
	var LastLevelQuantity = 0;

    for(var i=0; i < qtyViewItem; i++) {
        var item=view.ItemView[i];
		var itemLevel = Number(item.level);
		var ChoiceQuantity = item.quantity;
		var ChoicePromoQuantity = item.quantityPromo;
        if(Number(item.level) == 0) {
            qtyLevelZero=Number(item.quantity);
            qtyPromoLevelZero=Number(item.quantityPromo);
			accumulatedQty = qtyLevelZero;
			accumulatedPromoQty = qtyPromoLevelZero;
			lastlevel = 0;
        }
		if(itemLevel > lastlevel) {
			accumulatedQty *= Number(item.quantity);
            // The promo quantity of items in level different from zero need to be calculated according to the quantity
            accumulatedPromoQty *= Number(item.quantity);
		} else if ((itemLevel < lastlevel || itemLevel == lastlevel) && itemLevel != 0) {
			accumulatedQty = Number(ChoiceQuantity) * qtyLevelZero;
            // The promo quantity of items in level different from zero need to be calculated according to the quantity
		  //NVS-901
			accumulatedPromoQty = qtyPromoLevelZero;
		} else {
			accumulatedQty = qtyLevelZero;
			accumulatedPromoQty = qtyPromoLevelZero;
		}

        // Verify Choice
        if((Number(item.level) > 0) && (Number(item.prodAction) == 3)) {
            if(Number(item.productType) != 4) {
                // This is Choice
                item.quantityPromo=accumulatedPromoQty;
                item.quantity=accumulatedQty;
                var levelChoice=Number(item.level);
                item.level=0;
                item.choiceLevel = levelChoice;
                if(showAsSinglePrice==true) {
                    newViewArray.push({item:XML(item)});
                } else {
                    itemChoice.push({item:XML(item)});
                }
                for(var j=i+1; j < qtyViewItem; j++) {
                    var itemChoiceB=view.ItemView[j];
                    if(itemChoiceB.level > levelChoice) {
						//NVS-566 LC 3/21/2012						
						if(showAsSinglePrice==false) {
							itemChoiceB.level-=levelChoice;
						}
                        itemChoiceB.quantity*=item.quantity;
                        if((Number(itemChoiceB.prodAction) == 3) && (Number(itemChoiceB.productType) != 4)) {
                            break;
                        }
                        else {
                            // This is a grill that should go with the original choice
                            if(showAsSinglePrice==true) {
                                newViewArray.push({item:XML(itemChoiceB)});
                            } else {
                                itemChoice.push({item:XML(itemChoiceB)});
                            }
                        }
                    }
                    else {
                        break;
                    }
                }
                i=(j-1);
            }
        }
        else {
			if (item.level > lastlevel && lastlevel != 0 && Number(item.grilledQuantity) > 0) {
				item.quantity *= LastLevelQuantity;
			}
            // This is not Choice
            newViewArray.push({item:XML(item)});
        }
lastlevel = itemLevel;
		LastLevelQuantity = item.quantity;
    }
    // Put Choice Itens in the finish of the array
    for(var i=0; i < itemChoice.length; i++) {
        var iInd=newViewArray.length;
        newViewArray.push({item:XML(itemChoice[i].item)});
    }
}

/** Create a consolidated view*/
function creatConsView(viewArray,newView,showAsSinglePrice) {
	//Recreate Original XML
	var auxXML=new XML("<View/>");
	for(var i=0; i < viewArray.length; i++) {
		var ItemXML=XML(viewArray[i].item);
		auxXML.ItemView+=ItemXML;
    }
    // remove Autocondiments to add later
    var acItems = new Array();
    for (var ct = 0; ct < auxXML.ItemView.length(); ct++) {
		var item = auxXML.ItemView[ct];
		if (item.AutoCondiment == 'true') {
			acItems.push(item);
			delete auxXML.ItemView[ct];
			ct--;
		}
    }
	//NVS-726 LC: Applies only to Choice Group item, places grill items above sauce
	var SortedAry = new XML("<View/>");
	var ItemsToSort = new Array();
	var nextItem = 0;
	
	for(var i=0; i < auxXML.ItemView.length(); i++) {
		nextItem = 1 + i;
		itemXML=XML(auxXML.ItemView[i])
		if ((auxXML.ItemView[i].choiceLevel > 0 && auxXML.ItemView[i].longName.substr(0,4) != "MED ") && (auxXML.ItemView[nextItem] != null && 
		     auxXML.ItemView[nextItem].longName.substr(0,4) != "MED " && (auxXML.ItemView[nextItem].choiceLevel > 0 || auxXML.ItemView[nextItem].isGrillLine == "true") )) { //Item must contain choicelevel and not be last item on order
			ItemsToSort.push({id:String(i), item:auxXML.ItemView[i]});
			ItemsToSort.push({id:String(nextItem), item:auxXML.ItemView[nextItem]});
			while (auxXML.ItemView[++nextItem] != null) {
				if ((auxXML.ItemView[nextItem].choiceLevel.toString() == '' && auxXML.ItemView[nextItem].isGrillLine == "false")  || ((auxXML.ItemView[nextItem].choiceLevel <= 1 || 
					 auxXML.ItemView[nextItem].choiceLevel.toString() == '') && auxXML.ItemView[nextItem].isGrillLine == "false" && auxXML.ItemView[nextItem].longName.substr(0,4) == "MED ")) { //Coke,Smoothie,Burrito are not added to sort array
					break;
				}
				else if ((auxXML.ItemView[nextItem].isGrillLine == "true") || (auxXML.ItemView[nextItem].choiceLevel > 0)) { //Add grill and choicelevel item to array
					ItemsToSort.push({id:String(nextItem), item:auxXML.ItemView[nextItem]});
				}			
			}
			firstIndex=Number(ItemsToSort[0].id.toString());
			lastIndex=firstIndex + Number(ItemsToSort.length.toString()-1);
			ItemsToSort.sort(function(a, b){ItemA =a.item.isGrillLine;ItemB =b.item.isGrillLine; if (ItemA < ItemB) {v=1;} else if (ItemA > ItemB) {v = -1;} else {v=0;} return (v);});
			j=0;
			ct=firstIndex;
			for (;ct <= lastIndex; ct++) {	//Add sorted items to sorted array
				if ( ct >= firstIndex && ct <= lastIndex ) {
					itemXML=XML(ItemsToSort[j].item)
					SortedAry.ItemView+=itemXML;
					j++;
				}
			}
			if ( nextItem < auxXML.ItemView.length() ) { //NVS-986
				itemXML=XML(auxXML.ItemView[nextItem]);
				SortedAry.ItemView+=itemXML;
			}
			ItemsToSort=[];
			i=nextItem;	
		} else {
			SortedAry.ItemView+=itemXML;		
		} 			
	}	
API.dbg("creatConsView:: SortedAry (Initial): " + SortedAry);
	for (var ct = 0;ct < auxXML.ItemView.length(); ct++) { 
		auxXML.ItemView[ct]=SortedAry.ItemView[ct];	
	}
    if(showAsSinglePrice!=true) {
	var szViewArray=new Array();
	var szAux="";
	var i=0;
	var ItemsInString = 0;  // Used to track how many items are in the comparison string
	
	// Create  line array with the same iItemCode
	while(i < viewArray.length) {
		var ItemView=viewArray[i].item;
		var iItemCode = ItemView.itemCode.toString();
		szAux =szAux + ItemView.productCode + ItemView.grilledQuantity;
		ItemsInString = 1;  // Just 1 at this point
		for(var j=i+1; j < viewArray.length; j++) {
			var nextItemView=viewArray[j].item;
			if((iItemCode!=nextItemView.itemCode) || (nextItemView.level==0)){
				break;
			}
			szAux=szAux + nextItemView.productCode + nextItemView.grilledQuantity;
			ItemsInString++; // 1 more item in the comparison string
		}
		szViewArray.push({id:String(i), item:String(szAux), count:Number(ItemsInString)});
		szAux="";
		i=j;
	}


        // Search for equal items
     for(var i = 0; i < szViewArray.length; i++) {
          var ItemArray = szViewArray[i].item;
          var iInd = Number(szViewArray[i].id);
          for(var j = i+1; j < szViewArray.length; j++) {
                if(ItemArray == szViewArray[j].item) {
					if(Number(auxXML.ItemView[iInd].familyGroup) != 5 || String(auxXML.ItemView[iInd].longName).indexOf("SHAKE") != -1){
						//only consolidate if this isn't a sauce/dressing/etc choice  JC 4-19-10

						// Item already used in table
						var jInd = Number(szViewArray[j].id);
						szViewArray[j].item = -j;

						// Combine all the items in the duplicate
						for (var Loop = 0; Loop < szViewArray[i].count; Loop++) {
						
						// Create a new property in order to hold total VM price
							if (Loop == 0) {
								auxXML.ItemView[iInd + Loop].totalVMPrice = parseFloat (auxXML.ItemView[iInd + Loop].totalPrice);
							}
							auxXML.ItemView[iInd + Loop].quantity=Number(auxXML.ItemView[iInd + Loop].quantity.toString()) + Number(auxXML.ItemView[jInd + Loop].quantity.toString());
							auxXML.ItemView[iInd + Loop].quantityPromo=Number(auxXML.ItemView[iInd + Loop].quantityPromo.toString()) + Number(auxXML.ItemView[jInd + Loop].quantityPromo.toString());

							auxXML.ItemView[iInd + Loop].unitPrice=Number(auxXML.ItemView[iInd + Loop].unitPrice.toString()) + Number(auxXML.ItemView[jInd + Loop].unitPrice.toString());
							auxXML.ItemView[iInd + Loop].netUnitPrice=Number(auxXML.ItemView[iInd + Loop].netUnitPrice.toString()) + Number(auxXML.ItemView[jInd + Loop].netUnitPrice.toString());
							auxXML.ItemView[iInd + Loop].unitTax=Number(auxXML.ItemView[iInd + Loop].unitTax.toString()) + Number(auxXML.ItemView[jInd + Loop].unitTax.toString());
							auxXML.ItemView[iInd + Loop].totalPrice=Number(auxXML.ItemView[iInd + Loop].totalPrice.toString()) + Number(auxXML.ItemView[jInd + Loop].totalPrice.toString());
							auxXML.ItemView[iInd + Loop].netTotalPrice=Number(auxXML.ItemView[iInd + Loop].netTotalPrice.toString()) + Number(auxXML.ItemView[jInd + Loop].netTotalPrice.toString());
							auxXML.ItemView[iInd + Loop].totalTax=Number(auxXML.ItemView[iInd + Loop].totalTax.toString()) + Number(auxXML.ItemView[jInd + Loop].totalTax.toString());
							auxXML.ItemView[iInd + Loop].ADTotalPrice=Number(auxXML.ItemView[iInd + Loop].ADTotalPrice.toString()) + Number(auxXML.ItemView[jInd + Loop].ADTotalPrice.toString());
							auxXML.ItemView[iInd + Loop].ADNetTotalPrice=Number(auxXML.ItemView[iInd + Loop].ADNetTotalPrice.toString()) + Number(auxXML.ItemView[jInd + Loop].ADNetTotalPrice.toString());
							auxXML.ItemView[iInd + Loop].ADTotalTax=Number(auxXML.ItemView[iInd + Loop].ADTotalTax.toString()) + Number(auxXML.ItemView[jInd + Loop].ADTotalTax.toString());

							// Mark the duplicate item quantity as 0
							auxXML.ItemView[jInd + Loop].quantity=0;
						}
					}
				}
		}
	}
    }
	for each (var item in auxXML.ItemView) {
		if ((Number(item.quantity) > 0) || item.isGrillLine) {
			newView.ItemView+=item;
		}
	}
    // add AutoCondiment items in the end
    for each (var item in acItems) {
		newView.ItemView += item;
    }
}

/* Sort the consolidated view */
function sortConsView(newViewCons) {
	var localconfig = new Config ("ValueMealDisplay", true);
	if (localconfig.getBoolParameter ("VMDisplay_ShowAsSinglePrice") == true) {
		return newViewCons;
	}

	/* link the children items with main items */
	var itemArray = new Array();
	for each (var item in newViewCons.ItemView) {
		if (Number(item.level) == 0) {
			childItemArray = new Array();
			cursor =itemArray.push({item:item, children:childItemArray});
		} else {
			/* add all children as an array within the main item */
			itemArray[cursor-1].children.push(item);
		}
	}

	/* sort main products */
	itemArray.sort(function compareNumbers(a,b){aid =a.item.displayOrder;bid =b.item.displayOrder; if (aid == bid) {v=0;} else if (aid < bid) {v = -1;} else {v=1;} return (v);});

	/* convert into XML for printing */
	var sortViewCons = new XML("<View/>");
	for(var i = 0; i < itemArray.length; i++) {
		/* add main item */
		var ItemView = new XML(itemArray[i].item);
		sortViewCons.ItemView+=ItemView;

		/* then add it's children */
		children = itemArray[i].children;
		for(var j = 0; j < children.length; j++) {
			var ItemView = new XML(children[j]);
			sortViewCons.ItemView+=ItemView;
		}
	}

	return sortViewCons;
}

/**
 * Normalizes a view that comes with quantities already multiplied
 */
function divideItemQuantities(view) {
	var len = view.ItemView.length();
	for (var i = len-1; i>=0; i--) {
		var item = view.ItemView[i];
		if (Number(item.level) == 0) {
			continue; // Ignore level0 items
		}
		var previousLevel = (Number(item.level) - 1);
		for (var j=i-1; j>=0; j--) {
			if (Number(view.ItemView[j].level) == previousLevel) {
				// Found our parent item, so we need to divide our quantity
				if (Number(view.ItemView[j].quantity) > 0) {
					item.quantity = String(Number(item.quantity) / Number(view.ItemView[j].quantity));
				}
				break;
			}
		}
	}
}

/**********************************************************
 * Public decidePickList                                  *
 * Decide which picklist to print. NVS-5743 28-NOV-2016   *
 * takes the config and data parameters that the picklist *
 * author: John Brancaleon                                *
 *********************************************************/
 function decidePickList(config, data) {

	//NVS-6230 - 20-DEC-2016 John Brancaleon - get the event based on which KVS this is being called from 
	var response = new XML(data[0]);
	var KVSName = response.@requestServicesList.substring(3);
	var xmlPosDB = new XML(API.getPosdb());
    var event = xmlPosDB.Services.Service.(@name==KVSName).Configuration.(@imports=="KVSRedesign").Section.(@name=="WayOfWork").Parameter.(@name=="heldAutoPrintEvent").@value  //getConfigValue(storedbPath , posdbPath, "");
	
	if(event.toLowerCase() == "onserveheld" ) {
	//NVS-6105 9-DEC-2016 John Brancaleon - return the value returned from the reportDualPointPickList function
		return reportDualPointPickList(config, data);
	} else if(event.toLowerCase() == "onheld") {
	//NVS-6105 9-DEC-2016 John Brancaleon - return the value returned from the reportPickList function
		return reportPickList(config, data);
	}
 }
 
/*********************************************************/
/*********************************************************/

/**
 * PUBLIC
 * Implements the Pick List receipt
 * Needed data types: VIEW
 * @author Celso
  */
function reportPickList(config, data) {

	var LIGHT  = 1;
	var ONLY   = 2;

	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
	} else {
		// Part of feature NPS-5771
		lConsolidateACItems("picklist");
	}

	// Order information
	var showCanceledItems="false";
	var prnPickList = true;
	var custom 	 = rootConfig.CustomData[0];
	if(custom != null) {
		var fields = String(custom).split(":");
		if(fields.length>=1) {
			showCanceledItems = fields[0];
			if(fields.length>=2) {
				prnPickList = (fields[1] != "1");
			}
		}
	}

	var view = rootView.View;

	view = checkPlainForReceipt(view);
	view = checkSmartGrillForReceipt(view);

	// Check Refund
	var isRefund = (view.@transactionKind == TRANS_KIND_REFUND);
	if (view.@vmChildrenMultiplied == "true") {
		// KVS view comes with quantities already multiplied
		divideItemQuantities(view);
	}
	if(isRefund) {
		return getResponse();
	}

	// Check pod!=FC
	if(Number(view.@pod)!=0) {
		// Check whether idPos of the Store is the same of the Tender
		if (prnPickList && (Number(rootConfig.PosId.substring(3, 7)) == Number(view.@orderKey.substring(3, 7)))){
			return getResponse();
		}
	}
	//NVS-6121 08-DEC-2016 John Brancaleon - Print the Large Order ID, if the DTDualPoint parameter is true
	//NVS-6563 11-JAN-2017 John Brancaleon - Check for the dtLargeOrderNumber 
	//NVS-6672 - 3rd iteration - 08-FEB-2017 John Brancaleon - print the Large Order Number if the FC Large Order Number is true too. 
	var fcLargeOrderNumber = xmlStoreDB.Configurations.Configuration.(@type == "POS").Section.(@name == "Report").Parameter.(@name == "DualPoint").@value;
	if((Number(view.@pod) == 1 && dtLargeOrderNumber == "true") || (Number(view.@pod) == 0 && fcLargeOrderNumber == "true")) {
		//NVS-6672 - 3rd iteration - 08-FEB-2017 John Brancaleon - print the Large Order Number with the POS # 
		var majorMinor = fnMountOrderIdEx("",String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),false,false,true);

		//NVS-6999 - NVS-7115 - msilva - UberEats Integration
		var uberEatsOrderKey = GetUberEatsOrderKey();
		
		addLine();
		outputBuffer.append("<@BigCharOn>");	
		if(uberEatsOrderKey != false){
			addLine(API.center(rtrim(uberEatsOrderKey), 8));				
		}else{
			addLine(API.center(rtrim(majorMinor), 8));				
		}

		outputBuffer.append("<@BigCharOff>");
		addLine();		
	}
	addLine(SEP_UL);
	startBold(); {
	var szLine="";
	var value = rootConfig.City;
	if(value != null && value != "") {
		var lines = String(value).split("\\n");
		for(var i = 0; i < lines.length; i++) {
			szLine+=lines[i].substring(0,39);
		}
	}
	szLine+=" ";
	var value = rootConfig.State;
	if(value != null && value != "") {
		var lines = String(value).split("\\n");
		for(var i = 0; i < lines.length; i++) {
			szLine+=lines[i].substring(0,39);
		}
	}
	szLine+=" ";
	var value = rootConfig.StoreZipCode;
	if(value != null && value != "") {
		var lines = String(value).split("\\n");
		for(var i = 0; i < lines.length; i++) {
			szLine+=lines[i].substring(0,39);
		}
	}
	addLine(center(szLine));
	} endBold();
	addLine(" ");

	//NVS-4243
	var isFromKiosk = (Number(view.@pod) == PODCSO);
	if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){
		isRcpHHOT = true; 
	}
	var useRecallerId = isFromKiosk || isRcpHHOT;	

	//NVS-7278 27-MAR-2017 John Brancaleon - test for 300 and if found use the other value
	if (useRecallerId){
		var posId = "KS# " + (toInt(view.@tenderPOS.substring(3, 7)) == 300 ? toInt(view.@orderKey.substring(3, 7)) : toInt(view.@tenderPOS.substring(3, 7))); // Eg: POS0001:89 - > KS#1
	}
	else{
		var posId = "KS# " + (toInt(view.@orderKey.substring(3, 7)) == 300 ? toInt(view.@tenderPOS.substring(3, 7)) : toInt(view.@orderKey.substring(3, 7))); // Eg: POS0001:89 - > KS#1
	}

//	var CrewId = " Crew Id " + view.@operatorId;
//	var MgrId = " MgrId " + rootConfig.Manager.@id + " ";
	var date = formatDateTimeAMPM(rootView.@creationDate);
	szLine = posId; //+ CrewId; // + MgrId;

	// NVS-71 RPS 12/03/09 We want the whole date.
	addLine(szLine + API.setOnRight(date, COLS-szLine.length));
	addLine();
	
	var mfySide = "";
	mfySide = String(view.@productionSide);
	
	//NVS-7450 JP
	if (mfySide.substring(0,4) == "Side") {
        mfySide = mfySide.toString().split(" ")[0] ;
	} else {
        mfySide = "";
	}
	
	//NPS-11233
	var majorMinor = "";
	var externalOrderId = view.CustomInfo.Info.(@name == "externalOrderId").@value

	
	if(externalOrderId != null) {
		if(trim(externalOrderId.toString()) != "") {
			majorMinor = externalOrderId;
		} else {
			//NVS-3607
			majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,useRecallerId,false);
		}
	} 
	/*
	else {
	        //NVS-3507
		var szSide =  String(view.@productionSide);
        mfySide = szSide;
	}
	*/

//	var param =  rootStoreDB.Configurations.Configuration.(@type == "Store.wide").Section.(@name == "OperationMode").Parameter.(@name == "printOATNumberInCustomersReceipt");
	
	//NVS-3607
	var orderNum = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,useRecallerId,false);
	
//	NVS-3324 Pick List order number not correct
//	orderNum =  toInt(view.@tenderPOS.substring(3,7)) + orderNum; 

	var kvsOrder = "Order " + orderNum;
//	if (param.@value.toString() === "true") {
//		var index = view.@productionSide.indexOf("OAT");
//		if (index > 0) {
//			kvsOrder += "-" + view.@productionSide.substring(index-2, index);
//		}
//	}
	addLine(mfySide + " " + kvsOrder);
	addLine();
	
	/*****    NVS-1249      ***************************
	* NPS-7605 not ready for picklists - API 2014-01-21
	* // NPS-7605 - FR 15
	* if(isTab && isWave) {
	* 	var TabInfo = "Tab# " + view.@tabNumber + "       Party Room = " + view.@roomNumber;
	* 	addLine(TabInfo);
	* 	addLine();
	* }
	* 
    * if (rootKVSView != null){
    *     var kvsView = rootKVSView.View;
    *     var parkingLocation = (kvsView != "")?kvsView.@parkingLocation:"";
    *     //var parkingLocationTime = (kvsView != "")?kvsView.@parkingLocation:"";
    *     //API.dbg("Parking Location: " + parkingLocation);	//removed due to NVS-1671
    *     if(parkingLocation!=""){
    *         var parkInfo = "Parking location: " + parkingLocation;
    *         addLine(parkInfo);
    *         //parkInfo = "Parking Time: " + parkingLocationTime;
    *         //addLine(parkInfo);
    *         addLine();
    *     }
    * }
	****************************************************/
	//NVS-5743 - Auto Print Pick List for Held Car in DT feature is not working. Parameter "enableHeldAutoPrint" is not present in store-db
	//NVS-6040 - Lindomar Araujo - Nov/29/2016 - Fix to prevent the script error when the rootKVSView is null. If rootKVSView is null, will use the rootView
	if (rootKVSView != null){
		var kvsView = rootKVSView.View;
	} else {
		var kvsView = rootView.View;
	}
	if(kvsView.@parkingLocation != undefined && kvsView.@parkingLocation != null && kvsView.@parkingLocation != ""){
		startBoldSize2();
		//NVS-6821 Tishin Thomas Auto print pick list for held orders in DT]: Space is missing in "PARKINGLOT"  for picklist printed for DT Held Orders.
		if(kvsView.@parkingLocation=="PARKINGLOT"){
			addLine("*** " + "PARKING LOT" + " ***");
		}
		else{
		addLine("**** " + kvsView.@parkingLocation + " ****"); //Kalpesh - NVS-6044
		}
		endBoldSize2();
		addLine("");
	}
    
	startBoldSize2(); { // Big  line
		addLine("**** PICK LIST ****");
	} endBoldSize2();
	addLine("");
	var IsMobileOrder = false;
	IsMobileOrder = checkIsMobileOrder(view);
	var POD = "N/A";
	if (IsMobileOrder == true) {
		var CheckInInfo = view.CustomInfo.Info.(@name == "checkInData").@value;
		if (CheckInInfo != undefined && CheckInInfo != null) {
				POD = CheckInInfo.charAt(11);
		}
	}
	
	var TableTagId = String(view.@tableTagId);		//FrankZ - NVS 2940
 	// NVS-5461 John Brancaleon 11-OCT-2016 - Allow -1 as tag ID if customer choses not to have table service, and don't show it on the receipt if it is -1 
	if (TableTagId != "" && Number(TableTagId) > 0 && POD != "4") {  
            startBoldSize2();
	    //NVS-3593 - msilva
		 // NVS-7581 Mobile Ordering Table Service Tishin
		 if(view.@MobileOrderStatus == "1"){
			addLine("     TABLE #" + TableTagId);
		}
		else {
		addLine("     LOCATOR #" + TableTagId);
		}
            endBoldSize2();
	    addLine("");
	} 

	
	if (Number(view.@type)==0) {
		addLine("Eat In");
	}
	else {
		addLine("Take Out");
	}

	var flagdisplayOrder=false;
	// Create array to seach duplicate displayOrder
	var displayOrderArray = new Array();
	for each (var item in view.ItemView) {
		if (Number(item.level) == 0) {
			displayOrderArray.push({id:Number(item.displayOrder)});
		}
	}
	// Sort displayOrder Array
	displayOrderArray.sort(function compareNumbers(a,b){return (Number(a.id) - Number(b.id));})
	//Seach duplicate displayOrder
	for(var i = 1; i < displayOrderArray.length; i++) {
		if(displayOrderArray[i-1].id == displayOrderArray[i].id){
			// There is duplicate displayOrder
			flagdisplayOrder=true;
			break;
		}
	}

	// Create array with sale items
	var newViewArray = new Array();
	//detachChoice(view,newViewArray);

	// Create the consolidated view
	var sortView = new XML("<View/>");
	creatConsView(newViewArray,sortView);

     //NPS-2686 -Sort the Consolidated View
     sortView =sortConsView(sortView);

	
	/* NPD-1864 Identify if is Special Order */	
	if (rootKVSView != null){
		var kvsView = rootKVSView.View;
		if (kvsView.@IsSGP == "true") {
			addLine();
			outputBuffer.append("<@BigCharOn>");
			addLine(API.geti18nMsg(1, "MSG_BC_PICKLIST_SPECIAL_PRODUCT",[]));
			outputBuffer.append("<@BigCharOff>");
			addLine();
		}
	}
	//  Print the items in the order
	pickListView = new OrderView(view);
	pickListView.SetPickList(true);
	pickListView.PrintSaleItemsForPickList(); //NVS-4706 - Felipe Ramas
	//pickListView.PrintSaleItems();

	// Adds sale items
/* 	var qtyLevelZero=1;
	var qtyViewItem = sortView.ItemView.length();
	var iItem = 0;
	for each (var item in sortView.ItemView) {
		iItem++;
		if (item.level == 0) {
			qtyLevelZero = Number(item.quantity);
		}
		if((showCanceledItems == "true") || (Number(item.quantity) != 0) || (item.specialModifiers == LIGHT) || (item.specialModifiers == ONLY)) {
			if (qtyLevelZero != 0) {
				var childNode = false;
				for(var i = iItem; i < qtyViewItem; i++) {
					var childView = sortView.ItemView[i];
					if(Number(item.level) > Number(childView.level)) {
						break;
					}
					if(childView.isGrillLine == "true") {
						childNode = true;
					}
				}
				if(!((Number(item.level) != 0) && (item.isGrillLine == "false") && (item.productType == 2)) || (childNode == true)) {
					addItemLine(item,qtyLevelZero);
					if( API.findParamInSectionWide( "alternativeLanguage","Localization" )  != null ) {								
						addItemLineAltLang(item,qtyLevelZero);		
					}					
				}
			}
		}
	} */
//	addLine(SEP_UL);
//	addLine();
//	addLine();
//	addLine();
//	addLine();
//	addLine();
	addLine();	
	return getResponse();
	/** Adds an item description given an <ItemView> tag */
	function addItemLineAltLang(item, qtyLevelZero) 
	{
		var ident = "";
		var level = toInt(item.level);
		
		var itemClass = item.productType.length();
		if (itemClass != 0) {
			if (item.productType == 4) {
				return;
			}
		}
		
		for(var i=1; i<level; i++) {
			ident += " ";
		}
		
		//Lindomar Araujo: 2014/08/28 - SQC-6001 - Checking if the smartRouting and hideAddGrillParameter is enabled to check if the product is a SGP item 
		// NVS_3116 by KP
		if ((sgpEnabled == "true" && sgpHideAddGrill == "true") && item.isCYT == "true") {
			hideAddGrillModifier = true;
		} else {
			if (item.isGrillLine == "false") {
				hideAddGrillModifier = false;
			}
		}

		var AltName = item.alternativeLanguage.longName;

		var line = null;
		if(item.isGrillLine == "true") {
			//NVS-6471 & NVS-6705 16-FEB-2017 John Brancaleon -  Print the modifiers/numbers that are displayed on the monitor/POS. 
			if(item.displayNumbersInsteadofModifiers == "true" || item.displayNumbersInsteadofModifiers == true){
				//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
				line = "  " + ident + getGrillDescriptionForMcCafeItems(item, true, false, hideAddGrillModifier);
			}
			else{
				//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
				line = "  " + ident + getGrillDescription(item, true, false, hideAddGrillModifier);
			}		

/*
			line = "    " + ident + getAltLangGrillDescription(item, true, hideAddGrillModifier);		*/	
		}else {				
			//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
			line = "  " + ident + " " + AltName;		
		}
		
		line = API.setOnLeft(line,COLS);
		addLine(line);
	}
		
	/** Adds an item description given an <ItemView> tag */
	function addItemLine(item, qtyLevelZero)
	{
		var ident = "";
		var level = toInt(item.level);

		var itemClass = item.productType.length();
		if (itemClass != 0) {
			if (item.productType == 4) {
				return;
			}
		}

		for(var i=1; i<=level; i++) {
			ident += " ";
		}
		if (item.level == 0) {
			qtyLevelZero = 1;
		}
		var aux = item.quantity  * qtyLevelZero;
		var qty = API.setOnRight(aux, 3);
		var name = item.longName;
		var compl = "";
		if(toInt(item.quantityPromo) != 0) {
			compl = item.quantityPromo + "P";
		}
		var line = null;		
		
		//Lindomar Araujo: 2014/08/28 - SQC-6001 - Checking if the smartRouting and hideAddGrillParameter is enabled to check if the product is a SGP item 
		// NVS_3116 by KP
		if ((sgpEnabled == "true" && sgpHideAddGrill == "true") && item.isCYT == "true") {
			hideAddGrillModifier = true;
		} else {
			if (item.isGrillLine == "false") {
				hideAddGrillModifier = false;
			}
		}
		if(item.isGrillLine == "true") {		     
			// NVS-84 RPS  02/18/10  added leading spaces to indent the line
			//line = "      " + ident + getGrillDescription(item, true, false, hideAddGrillModifier);			
			if(item.displayNumbersInsteadofModifiers == "true" || item.displayNumbersInsteadofModifiers == true){
				//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
				line = ident + getGrillDescriptionForMcCafeItems(this.data, true, false, hideAddGrillModifier);
			}
			else{
				//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
				line = ident + getGrillDescription(this.data, true, false, hideAddGrillModifier);
			}		
		}else {
			line = ident + qty + " " + name;
		}
		line = API.setOnLeft(line, COLS-compl.length) + compl;
		addLine(line);
	}
};
/**
 * PUBLIC
 * Implements the customer receipt
 * Needed data types: VIEW
 * @author Celso
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function receiptkioskTPUI(config, data)
{
	isKioskTPUI = true;
	isRcpKiosk = true;
	return(receipt(config, data));
}

/**
 * PUBLIC
 * Implements the customer receipt
 * Needed data types: VIEW
 * @author Celso
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function receiptkiosk(config, data)
{
	isRcpKiosk = true;
	return(receipt(config, data));
}

/**
 * NVS-1420: This function will print a receipt stored as custom data. 
 * @author Andreas Ortloff
*/
function receiptCustomData(config, data)
{
	initGlobalt();
	rootConfig = new XML(config);

	var customData = rootConfig.CustomData.toString();
	//API.dbg("receiptCustomData custom data=\n" + customData);
	addLine(customData);
	return getResponse();
}

/**
 * Receipt for HOT
 *
 */
function receiptHHOT(config, data)
{
	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
	}
	var view = rootView.View;
	addLine(SEP_UL);
	addDefaultHeader();
	addLine(center("TEL# " + rootConfig.StorePhoneNumber + " Store# " + rootConfig.StoreId));
	addLine();
	//NVS-3607
	//NVS-3441 - HOT
	var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),false,true,false);
	var kvsOrder = "Order #" + majorMinor;
	addLine(center(kvsOrder));
	addLine();
	// Adds default store-DB xml footer to the first copy
	addDefaultFooter();
	addLine();
	addLine(SEP_UL);
	return getResponse();
}


/**
 * PUBLIC
 * Implements the customer receipt
 * Needed data types: VIEW
 * @author Rodrigo Rosauro
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function receiptEcp(config, data)
{
	outputBufferEcp = new StringBuffer();
    var localconfig = new Config ("ValueMealDisplay", true);
    var showAsSinglePrice = localconfig.getBoolParameter ("VMDisplay_ShowAsSinglePrice");
	var LIGHT  = 1;
	var ONLY   = 2;
	
	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponseEcp();
	} else {
		lConsolidateACItems("receipt");
	}

	// Order information
	var view		= rootView.View;
	var customInfo	= view.CustomInfo;
	var customData = rootConfig.CustomData;
	var isFirstPass = DetermineIfFirstPass(customData);

	if(!hasCCM(view)) {
		view = removeContainerFromView(view);
	}
	var newView	= view.copy();

 	if(!hasCCM(view)) {   
		view = checkPlainForReceipt(view);
		view = checkForceCompForReceipt(view);
		view = checkSmartGrillForReceipt(view);
		view = checkShowChosenItemAsIngredientForReceipt(view);
	}
	var isMobileReceipt = checkIsMobileOrder(view);
	var isRefund		= view.@transactionKind == TRANS_KIND_REFUND;
	var isTab			= view.@transactionKind == TRANS_KIND_TAB;
	var isSale			= view.@trxSubKind == TRANS_KIND_SALE;
	var isWave			= view.@trxSubKind == TRANS_KIND_WAVE;
	var isAdjustment	= view.@trxSubKind == TRANS_KIND_WAVE_ADJUSTMENT;
	var isBillableSale = ((view.ItemTenderView.(code == TENDER_KIND_BILLABLEREFUND)).length() != 0);
	var isUberEats = false;

	try {
		isUberEats = isUberEatsOrder(true);
	} catch (e) {
	}

	var isChangeRound = ((view.ItemTenderView.(code == TENDER_KIND_CHANGE)).length() == 0);
    var isWaste		= view.@transactionKind == TRANS_KIND_WASTE;
    var isOverring	= ((Number(view.@saleStatus) == SALE_STATUS_LAST_SALE_VOIDED) || (Number(view.@saleStatus) == SALE_STATUS_CURRENT_SALE_VOIDED));
	var isInProgress= (Number(view.@saleStatus) == SALE_STATUS_CURRENT_SALE_VOIDED);
	var isFromKiosk = (Number(view.@pod) == PODCSO) || isRcpKiosk;
	
	if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){ 
		isRcpHHOT = true; 
	}

	var useRecallerId = (isFromKiosk || isRcpHHOT) && !isMobileReceipt;	

	if (!isRcpKiosk){	
		newView = checkSmartGrill(view);
	}

	
	var crewMealAmount = 0;		
	var managerMealAmount = 0;
	
	var tenders=view.ItemTenderView;
	if(tenders != undefined && tenders != null && tenders.length() != 0){
		for (var i = 0; i < tenders.length(); i ++) {
			/* Crew/Employee Meal */
			if(tenders[i].kind == TENDER_KIND_CREW_MEAL){
				crewMealAmount = crewMealAmount + Number(tenders[i].value);						
			}
			/* Manager Meal */
			if(tenders[i].kind == TENDER_KIND_MANAGER_MEAL){
				managerMealAmount = managerMealAmount + Number(tenders[i].value);					
			}				
		}
	}
	
	API.dbg("Receipt: Crew Meal = " + crewMealAmount);
	API.dbg("Receipt: Manager Meal = " + managerMealAmount);
	
	var isMobile	= (Number(view.@MobileOrderStatus) != 0); /* MOS_NONE */
	var isPromo = 0;
	var totalDiscount;
    setWhereToShowDiscountOnItem(view);	
	var GCUsed = false;
	for each (i in view.ItemView.quantityPromo) {
		isPromo+=Number(i);
    }

    var offerCustomerName = "";
	var offerId = "0";
    if ( (view.Offers != null) && (view.Offers[0] != null) && (view.Customer[0] != null))
    {
        offerCustomerName = view.Customer[0].@nickname;
		offerId = view.Offers[0].@offerId;
    }

    var hasPromotions = 0;
	var promotionTitle;
	var otherDiscounts = 0;
	var promotionName;
	var pos;
	isOrderLevelPromotion = "false";
	isOrderLevelOffer = "false";
    if (view.Promotions != null) {
        hasPromotions = view.Promotions.Promotion.length();
		
		promotionTitles = new Array();
		for (var i = 0; i < hasPromotions; i++) {
			promotionName = view.Promotions.Promotion[i].@promotionName;
			if(promotionName != "" && promotionName != undefined && (promotionName.indexOf("McCaf") > -1)) {
				var blankPos = promotionName.indexOf("<br/>");
				if (blankPos > -1) {
					promotionName = promotionName.substring(0, blankPos);
				}
				var arr=promotionName.split(" ");
				var loop=0;
				var x = "";
				for each (x in arr) {
					if(x.indexOf("McCaf") > -1) {
						arr[loop]="McCafe";
					}
					
					loop=loop+1;
				}
				
				promotionName=arr.join(" ");
			}
			if(promotionName != "" && promotionName != undefined){
			promotionName = removeSpecialCharacters(promotionName);
			}
			promotionTitles[view.Promotions.Promotion[i].@counter] = promotionName;
			isOfferOrderLevel(view);
			
			if (view.Promotions.Promotion[i].@discountAmount != "undefined" && view.Promotions.Promotion[i].@discountAmount != null) {				
				otherDiscounts += Number(view.Promotions.Promotion[i].@discountAmount);
			}
		}
		
		if (hasPromotions.toString() == "1") {
			if (view.Promotions.Promotion[0].@exclusive == "1") {
				isOrderLevelPromotion = "true";
				promotionTitle = view.Promotions.Promotion[0].@promotionName;
			}
		}

		newView = sortPromotionsOnReceipt(newView);
    }

	if (view.@vmChildrenMultiplied == "true") {
		divideItemQuantities(view);
	}

	var custom 		= rootConfig.CustomData[0];
	var errKiosk 	= 0;
	var prnKiosk 	= 0;
	var printDPHeader 	= false;
	var nickName = customInfo.Info.(@name == "customerNickname").@value.toString();

	var redeemCount 	= view.ItemView.(familyGroup == 9).length();
	var notredeemCount 	= view.ItemView.(familyGroup != 9).length();
	if ((redeemCount > 0) && (notredeemCount == 0)) {
		printDPHeader = false;
	} else {
		printDPHeader = true;
	}
	
	var printOrderNumber = "true";
	if(Number(view.@pod) == 1 && dtLargeOrderNumber == "false") { 
		printOrderNumber = "false";
	}
	if((view.@pod == 0 || view.@pod == 1 || view.@pod == 2 || isFromKiosk) && !(isRefund || isOverring) && printDPHeader){ 
		if(PosCheckParameter_ex("Report","DualPoint","true") == true){
					
			var trimPOS = Number(largeOrderNumberFormat) == 1 ? true : false;
			var orderNum = fnMountOrderIdEx("",String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),trimPOS,useRecallerId,true);
			
			if (printOrderNumber == "true") { 
				if (isFromKiosk) {
					addLineEcp(API.center(rtrim(orderNum), 6));
				}
				else{				
					addLineEcp(rtrim(API.center(orderNum, 8)));
				}
				
			}
			
			var printSlip = API.findParamInSectionConfig("tableService.printSlip","CSO.UserInterface");
			if (isFromKiosk && printSlip != null && printSlip == "true") {
				addSize2Line(API.getLocalMsg("MSG_REPORT_TABLE_SERVICE"));
				     
				
				addLineEcp(API.center(rtrim(orderId), 6));
				
			}
			
		}
	} else {
		if(isRefund && PosCheckSessionProperty("SecondCopyOfReceipt", "true") == true) {
			
			
			
		}
	}


	if(isOverring || isPromo || isBillableSale || isUberEats) {
		if(isBillableSale == !true) {
			
		}
		if (isOverring) {
			addLineEcp(invertedColorBoldSize2Ecp(" **** OVERRING **** "));
		}
		if (isPromo) {
			addLineEcp(invertedColorBoldSize2Ecp("  **** PROMO **** "));
		}

		if(isBillableSale){
			if(isUberEats){
				addLineEcp(invertedColorBoldSize2Ecp(" ** UberEATS SALE ** "));
			}else{
				addLineEcp(invertedColorBoldSize2Ecp(" ** BILLABLE SALE ** "));
			}
		}else if(isUberEats){
			addLineEcp(invertedColorBoldSize2Ecp(" ** UberEATS SALE ** "));
		}

		
	}

		
	var customerID = "";
	var override = "";
	if ((view.Offers != null) && (view.Offers[0] != null)) {
		customerID = view.Offers[0].@customerId;
		override = view.Offers[0].@override; 
	}
		
    startBold(); 
	{
		if (offerCustomerName != "")
		{
			addDefaultHeader();
			addLineEcp(centerEcp("!!! THANK YOU " + offerCustomerName.substring(0, 21) + "!!!"));
		}
		else
		{
			addDefaultHeader();
		}
		addLineEcp(centerEcp("TEL# " + rootConfig.StorePhoneNumber));
		
		if(hasPromotions != 0)
		{
			var first = true;
			
			for (var i = 0; i < hasPromotions; i++) {
				if((view.Promotions.Promotion[i].@offerId == null) || (view.Promotions.Promotion[i].@offerId.length() <= 0))
				{
					if(first) {
						
						first = false;
					}
					var promotionLine	= "    " + API.geti18nMsg(1, "MSG_BC_ORDER_PROMOTION_APPLIED",[]);
					var promotionId 	= view.Promotions.Promotion[i].@id;
					promotionLine 		= API.setOnLeft(promotionLine, COLS-promotionId.length) + promotionId;
					addLineEcp(promotionLine);
				}	
			}

			if(!first) {
				
			}	
		}
		
	} endBold();

	if((isFromKiosk) && (custom != null)) {
		var fields = String(custom).split(":");
		if(fields.length>=1) {
			errKiosk = fields[0];
			if(fields.length>=2) {
				prnKiosk = fields[1];
				if(prnKiosk==1) {
					addLineEcp(centerEcp((isFromKiosk)?"kiosk duplicate":"duplicate"));
				}
			}
		}
	}

		
	
	if(isRefund) {
		if(isBillableSale) {
			var billableSaleRefund = view.ItemTenderView;
			addLineEcp(centerEcp(invertedColorEcp(boldEcp("**** BILLABLE SALE ADJUSTMENT ****"))));
			
			addLineEcp(centerEcp(boldEcp("*NOTICE * NOTICE * NOTICE * NOTICE*")));
			addLineEcp(centerEcp(boldEcp("This billable sale adjustment is for")));
			addLineEcp(centerEcp(boldEcp("accounting purposes only")));
			addLineEcp(centerEcp(boldEcp("DO NOT GIVE CASH!")));
			
			addLineEcp(boldEcp("Orig. Billable Sale order "+ view.@LSOrderId + "  $"+ API.formatNumber(view.@LSTotAmount, "##0.00", 6)));
		} else {
			addLineEcp(boldSize2InvertedColorEcp("  **** REFUND **** "));
			
		}
	} else {
		var isTaxExempt = (Number(view.@taxMode)==2);
		var szHeader="";
		if(isWaste) {
			szHeader ="**** WASTE ****";
			addLineEcp(centerEcp(boldEcp(szHeader)));
		}
		if(isTaxExempt) {
			szHeader ="**** TAX EXEMPT SALE ****";
			addLineEcp(centerEcp(boldEcp(szHeader)));
		}
	}
	
	var TableTagId = String(view.@tableTagId); 
	if (TableTagId != "" && Number(TableTagId) > 0) {  
		addLineEcp(boldSize2Ecp(" TABLE #" + TableTagId));
	    addLineEcp("");
	}  	

	if (useRecallerId)
	{
		var posId = "KS# " + toInt(view.@tenderPOS.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	}
	else{
		var posId = "KS# " + toInt(view.@orderKey.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	}

	var date = formatDateTimeAMPMFromView(view);
	addLineEcp(posId + API.setOnRight(date, COLS-posId.length));
	var mfySide = "";
	var strSide = String(view.@productionSide);
	if(strSide.length != 0) {
		if(isRefund) {
			mfySide = "";
		}else {
			if(strSide.substring(0,4) == "Side") {
				mfySide = strSide.toString().split(" ")[0] ;
			} else {
				mfySide = strSide.toString().split(" ")[1] ;
			}
		}
	} 
	var orderNum = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,useRecallerId,false);		
	var kvsOrder = "Order " + orderNum;

	if(isWaste) {
		kvsOrder = "";
	}

	if(orderNum.indexOf("-1") > -1){
		kvsOrder = "";
	}	

	var saleTypes	= Array("Eat-In", "Take-Out", "Other");
	var saleType	= toInt(view.@type);
	if(isFromKiosk) {
		var totalDue = Number(view.@totalDue);
			line = mfySide;		//NVS-6708 - Kalpesh		
			addLineEcp(line + API.setOnRight(kvsOrder, COLS-saleTypes[saleType].length));

		addLineEcp(SEP_UL);
		addLineEcp(" ");
		var bPaid=false;
		if(totalDue<=0) {
			bPaid=true;
			var changeDue=view.ItemTenderView.(kind == TENDER_KIND_CHANGE);
			if((changeDue.length() == 0) || (Number(changeDue[0].value) == 0)) {
				if((view.Cashless.length() == 0) || ((view.Cashless.split("@"))[5] == "0")){
					bPaid=true;
				}
			}
		}
		if(bPaid) {
			addLineEcp(boldSize2Ecp("        PAID"));			
		}
		else {
			addLineEcp(" ");
		}

		addLineEcp(SEP_UL);
	}
	else {
		if ((mfySide!="") || (kvsOrder!="")) {
			line = mfySide;
			addLineEcp(line + API.setOnRight(kvsOrder,COLS-(mfySide.length + 1)));
			
		}
	}

	
	addGiftCert = new StringBuffer();
	addPromoItems = new StringBuffer();
	addRMHC = new StringBuffer();
	
	if (isOrderLevelPromotion == "true") {
		addLineEcp(promotionTitle);
	}
	if (isOrderLevelOffer == "true") {
		if (olOfferTitle != null && olOfferTitle != undefined) {
			var pos = olOfferTitle.indexOf("\n");
			if (pos > -1) {
				olOfferTitle = olOfferTitle.substring(0, pos);
			}
			
			if(olOfferTitle != "" && olOfferTitle != undefined && (olOfferTitle.indexOf("McCaf") > -1))
			{
			var arr=olOfferTitle.split(" ");
			var loop=0;
			for each (i in arr) {
				if(i.indexOf("McCaf") > -1)
				{
					arr[loop]="McCafe";
				}
				loop=loop+1;
			}
			olOfferTitle=arr.join(" ");
			}
			if(olOfferTitle != "" && olOfferTitle != undefined ){
				olOfferTitle = removeSpecialCharacters(olOfferTitle);
			}
			line = olOfferTitle.substring(0, 39);
			addLineEcp(line);
		}		
	}

	itemCode = null;
	prevItemCode = null;
	promotionOn = false;
	sale = new Sale();
	sale.setPromotionsData(view);
	recieptView = new OrderView(newView);
	
	/** Print Sale Items to receipt **/
	PrintSaleItemsEcp(recieptView);
	
	if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "") {
		addLineEcp(addPromoItems);
	}
	
	if (addGiftCert !== null && addGiftCert !== undefined && addGiftCert !== "") {
		addLineEcp(addGiftCert);
	}

	

	var isCrewManagerMeal = false;
	PrintSpecialTenders();
	var totalAmt		=Number(view.@grossAmount);
    	var taxAmt		= Number(view.@totalTax);
	var subTotalAmt		=Number(view.@totalAmount);

	bdSubTotal 			=subTotalAmt;
	extendedFeeAmt		=getExtendedSalesAmount("Fee");
	extendedDepositAmt	=getExtendedSalesAmount("Deposit");
	rmhcDonationAmt     =getRMHCDonationAmount();
	bdSubTotal			=bdSubTotal - extendedFeeAmt;
	bdSubTotal			=bdSubTotal - extendedDepositAmt;
	bdSubTotal          =bdSubTotal - rmhcDonationAmt;

	addDetailLine("Subtotal",	bdSubTotal);

	PrintExtendedSalesInfo("Fee", extendedFeeAmt);
	PrintExtendedSalesInfo("Deposit", extendedDepositAmt);

	if ( (extendedFeeAmt > 0) || (extendedDepositAmt > 0) ) {
		
        if(view.Fee.length() > 0){
            var subTotalAmtBDecimal = new BigDecimal(subTotalAmt);
            for each (var itemFee in view.Fee) {
                subTotalAmtBDecimal = subTotalAmtBDecimal.subtract(new BigDecimal(eval(itemFee.@value)));
            }
            addDetailLine("Subtotal",	Number(subTotalAmtBDecimal));
            if(!isWave) {
                addDetailLine("Tax",		taxAmt);
            }
            for each (var itemFee in view.Fee) {
                addDetailLine(itemFee.@description,		itemFee.@value);			
            }
        } else {
			addDetailLine("Subtotal",	subTotalAmt);            
			if( API.findParamInSectionWide( "alternativeLanguage","Localization") != null) {
				addDetailLine(  API.geti18nMsg( 2, "MSG_SL_SUBTOTAL",[]  ),	subTotalAmt);
			} 			
		
			if(!isWave) { 
				addDetailLine("Tax",		taxAmt);
			}
        }
	
		addDetailLine("Subtotal",	subTotalAmt);
	}
	PrintTaxInformation(subTotalAmt);

	if(addRMHC !== null) {
		addLineEcp(addRMHC);
	} 


	if(isRefund) {
		if(isBillableSale)
			addDetailLine("Billable Sale Adjustment",	totalAmt);
		else
			addDetailLine("Total Refund",	totalAmt);
		
		if(isBillableSale) {
			addLineEcp(centerEcp(boldEcp("DO NOT GIVE CASH!")));
		}
	}
	else {
		addDetailLine(saleTypes[saleType]+" Total",	totalAmt);
		
    }
    if((errKiosk!=2) && (!(isRefund && isBillableSale))) {
		if (isChangeRound) {
			var tenderItems = view.ItemTenderView.(kind == TENDER_KIND_CHANGE);
			var changeRounding = 0
			for each (var tender in tenderItems) {
				changeRounding -= tender.rounding;
				break;
			}
			if (Number(changeRounding) != 0) {
					addDetailLine("Rounding", Number(changeRounding), true);
			}
		}
		var hasChange	= false;
		var hasRvCashoutInProgress = false;
		var hasCash		= false;
		if(!isRefund) {
			var tenderItems = (isInProgress) ? view.ItemTenderView.(kind == "9") : view.ItemTenderView.(kind != "9");
			
			if (isUberEats){
				tenderItems.description="UberEats Sales";
			}

			for each (var tender in tenderItems){
				addTenderLine(tender);		
			}
		}
		if(!hasChange) { 
			if(!isWave){
				if(!hasRvCashoutInProgress){
			addDetailLine("Change", 0);
				}else{
					addDetailLine("Change", amountRvCashoutInProgress);
				}
			}
		}
	
		var discountAmount = Number(view.@BPTotalAmount) - Number(view.@totalAmount);
		discountAmount = discountAmount - crewMealAmount - managerMealAmount;
		
		if (Math.round(discountAmount * 100) > 0) {
			var PrintText = API.geti18nMsg(1, "MSG_BC_OFFERS_APPLIED_TOTAL",[]);
			discountAmount = API.formatNumber(Number(discountAmount), NUMBER_FORMAT, 8);
			PrintText = API.setOnLeft(PrintText, COLS - discountAmount.length) + discountAmount;
		}
	}

	if(!isRefund){
		addSavingInfoECP();
	}
	if(isFromKiosk) {
		var totalDue = Number(view.@totalDue);
	
		if(errKiosk==2) {			
				
				
				addLineEcp(boldEcp("          SORRY YOU WERE          "));
				addLineEcp(boldEcp("          HAVING TROUBLE          "));
				
				
				addLineEcp(boldEcp("        Please present this       "));
				addLineEcp(boldEcp("         credit receipt at        "));
				addLineEcp(boldEcp("        the pickup counter        "));
				
			


			var credBalance = Number(totalAmt-totalDue);
			addLineEcp(boldSize2Ecp("CREDIT BALANCE" + API.formatNumber(credBalance, "#0.00", 6)));

		}		
		if(prnKiosk==1) {
			addLineEcp(centerEcp((isFromKiosk)?"kiosk duplicate":"duplicate"));
		}
	}


	if(isOverring) {
		var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),false, useRecallerId,false);
		try {
			var ctx=new SessionContext;
		} catch (e) {
			return;
		}

		if(majorMinor.indexOf("-1") > -1){
			
			addLineEcp(centerEcp(boldEcp("**** Sale VOIDED ****")));
		}else{
			addLineEcp(centerEcp(boldEcp("**** Last Sale # " + majorMinor + " VOIDED****")));
		}

		addLineEcp(centerEcp(boldEcp("ADJUSTMENT NOTE - REVERSAL / OVERRING")));
		reversalPending =ctx.get("CASHLESS_REVERSAL_PENDING");
		if (reversalPending == 1) {
		reversalAmt =ctx.get("CASHLESS_REVERSAL_AMT");
			
			addLineEcp(API.setOnLeft(boldEcp("TOTAL REVERSAL ", 26)+" "+API.formatNumber(reversalAmt, NUMBER_FORMAT, 12)));
			
		}
	}

	var NormalReceiptCopy = outputBufferEcp;
	var HASSIGNATURE = 0;
	addCashlessInfo(isRefund);

	if(isOverring) {
		addLineEcp(centerEcp(boldEcp("**** ADJUSTMENT NOTE - REVERSAL ****")));
		
		addReversalInfo();

			var value=0;
			try {
				var ctx=new SessionContext;
			} catch (e) {
				return;
			}
			if(Number(ctx.get("CASHLESS_REVERSAL_REFUND")) > 0){
			value =value+ctx.get("CASHLESS_REVERSAL_REFUND");
			var line = API.setOnLeft("<br/>TOTAL CASH REFUND ", 26)
				+ " "
				+ API.formatNumber(value, NUMBER_FORMAT, 12);
			addLineEcp(line);
			}else if(isInProgress) {
				addDetailLine("TOTAL CASH REFUND ", 0);
		}
		
		if(PosCheckSessionProperty("SecondCopyOfReceipt", "true") == false)
		{			
			PosSetSessionProperty("SecondCopyOfReceipt", "true");
		}
	}

	if (kioskReversalReceiptContent != undefined && kioskReversalReceiptContent != null && kioskReversalReceiptContent != '')
	{
		addLineEcp(kioskReversalReceiptContent);
	}
	if((isRefund) && (view.ItemTenderView.(cat == "TENDER_ELECTRONIC_PAYMENT").length() == 0)) {
			
			addLineEcp("Authorized");
			addLineEcp("Signature:_________________________");
			
			addLineEcp("Address");
			addLineEcp("___________________________________");
			
			addLineEcp("Phone #");
			addLineEcp("___________________________________");
			
			addLineEcp("Reason");
			addLineEcp("___________________________________");
			
		
		PosSetSessionProperty("SecondCopyOfReceipt", "true");

	}
	
	addPromotionOnTender();
	

	if( isBillableSale && !(isRefund) && ! (isUberEats)) {
		if (isFirstPass == false) {
			
			addLineEcp("Customer");
			addLineEcp("Signature:_________________________");
			
			addLineEcp("Cashier");
			addLineEcp("Signature:_________________________");
		
		addLineEcp("Manager");
		addLineEcp("Signature:_________________________");
		
			addLineEcp("Address");
			addLineEcp("___________________________________");
			
			addLineEcp("Phone #");
			addLineEcp("___________________________________");
			
		}

		if (isFirstPass == true) {
			PosSetSessionProperty("SecondCopyOfReceipt", "true");
		}

	}
	addDefaultFooter();  
	
	
	return getResponseEcp();

function getResponseEcp()
{
	var response	= outputBufferEcp;
	// Make a cleanup so that the garbage collector can free
	// some memory when the script ends.
	rootConfig		= null;
	rootCash		= null;
	rootPmix		= null;
	rootHourlySales	= null;
	rootView		= null;
	rootSOS			= null;
	rootCustom		= null;
	rootProduct		= null;

	rootSOSFC		= null;
	rootSOSDT		= null;
	rootSOSWT		= null;
	rootSOSMFY		= null;

	rootTimePunch	= null;

	outputBufferEcp	= null;
	outputLineCounterEcp = 0;
	
	
	var ret = new StringBuffer();
	ret.append("{");
	ret.append("	\"ReceiptData\" : \" " + response + "\",");
	ret.append("	\"Parameters\": []");
	ret.append("}");
	
	
	return ret;
}	
	

	function addLineEcp(line) {	
		outputLineCounterEcp++;
		outputBufferEcp.append("<line number='"  + outputLineCounterEcp  + "'><![CDATA[");
		if(line != null && line != "") {
			outputBufferEcp.append(line);
		}else{
			outputBufferEcp.append("<br/>");
		}
		outputBufferEcp.append("]]></line>");
	}	
	function boldEcp(str) {
		return "<b>" + str + "</b>";
	}	
	function size2Ecp(str) {
		return "<f style='font-size: 200% '>" + str + "</f>";
	}
	function boldSize2Ecp(str) {
		return "<b><f style='font-size: 200% '>" + str + "</f></b>";
	}
	function invertedColorEcp(str) {
		return "<f style='background-color: black; color: white'>" + str + "</f>";
	}
	function invertedColorBoldSize2Ecp(str)	{
		return "<f style='background-color: black; color: white;font-size: 200%'><b>" + str + "</b></f>";
	}
	function boldSize2InvertedColorEcp(str) {
		return "<b><f style='font-size: 200% style='background-color: black; color: white'>" + str + "</f></b>";
	}
	function centerEcp(str) {
		return "<p style=' text-align:center:'>" + str + "</p>";
	}
	/** Adds Cashless information (if any) and returns true if signature is required */
	function addCashlessInfo(isRefund) {
		try
		{
			var ctx=new SessionContext;
		}
		catch (e)
		{
			return;
		}

		cashlessData =String(ctx.get("CASHLESS"));
		if (cashlessData.length == 0) { 
			
			return;
		}

		var custom = cashlessData;
		var lines = String(custom).split("CASHLESS:");
		var msg="";
		var needsSignature = 0;
		var printSecondCopy = 0;
		var firstCopy = "";
		var secondCopy = "";
		var merchantAdded = false;
		GCUsed = false;

		for(var i = 1; i < lines.length; i++) 
		{
			if(checkIsMobileOrder(view) == true) {
				i = lines.length - 1;
			}
			var providerSale;
			var fields = String(lines[i]).split("|");
			
			for (var index=fields.length; index<=25; index++) {
				fields.push("");
			}
			
			if (fields[25] == "") {
				var provider = fields[0]; // + " SALE";
			} else {
				var provider = fields[25]; // + " SALE";
			} 
			
			if(isRefund) {
				providerSale = provider  + " REFUND";
			}else {
				providerSale = provider  + " SALE";
			}
			var card = " " + fields[1]; // Card #
			card = PadCardNumber(card);
			
			// In cashless 3, fields[2] has the payment type
			var expires = fields[2];	// Card expiration date
			var auth = fields[3];		// Authorization code
			var seq = fields[6];		// Sequence #
			var needsSignature = fields[5];
			
			// we need to get the merchant ID from diffent fields in mobile and regular orders
			var mer;
			
			 //This is no longer the case NVS-6811
			if (isMobileReceipt == false) {
				mer = fields[7];		// Merchant id
			} else {
				testStr =String(fields[9]); 
				if (testStr.length > 1) { 
					mer = fields[9];
				} else { 
					mer = fields[7];
				}					
			}
			
			var balance = String(fields[8]);	// Balance
			if (balance.length!=0) {
				balance = API.formatNumber(Number(fields[8]), NUMBER_FORMAT, 12);	// Balance #
			}

			var amt = fields[10];		// Operation amount
			if(fields[12].length!=0) {
				msg = fields[12];
			}

			if (merchantAdded == false) {
				addLineEcp("");
				addLineEcp("MER# " + mer);
				merchantAdded = true;
			}

			var line = "CARD ISSUER          ACCOUNT#";

			if(i > 1){
				line = "<br/>" + line;
			}		

			firstCopy = firstCopy + line + "<br/>";
			secondCopy = secondCopy + line + "<br/>";
			if (provider == "Gift Card") {
				needsSignature = 0;
			}

			line = API.setOnLeft(providerSale, 14) + " " + card;  
			firstCopy = firstCopy + line + "<br/>";
			secondCopy = secondCopy + line + "<br/>";

			var fallbackSwipe = false;
			if (fields.length > 23) {
				if (fields[24].toLowerCase() == "fswipe")
				{
					fallbackSwipe = true;
					firstCopy = firstCopy + fields[24] + "<br/>";
					secondCopy = secondCopy + fields[24] + "<br/>";
				}
			}
			

				line = "TRANSACTION AMOUNT" + API.setOnRight(amt, COLS-18);
				firstCopy = firstCopy + line + "<br/>";
				secondCopy = secondCopy + line + "<br/>";


			var isEMVCard = TestForEMV(fields);
			
			if (isEMVCard == true) {
				// EMV addition
				line = fields[16] + "<br/>";
				firstCopy = firstCopy + line;
				secondCopy = secondCopy + line;
				// END EMV addition
			}
			
			line = "AUTHORIZATION CODE - " + auth + "<br/>SEQ# " + seq + "<br/>";   
			firstCopy = firstCopy + line;
			secondCopy = secondCopy + line;
			
			if (isEMVCard == true) {
				//Start of EMV additions
				if (fields[17].toLowerCase() == "pin") {
					line = "Verified by " + fields[17] + "<br/>";  // emvCVM
					firstCopy = firstCopy + line;
					secondCopy = secondCopy + line;
				}

				// We only print these if this is not a card swipe
				if (fields[24] != "FSwipe") {
					line = "AID: " + fields[19] + "<br/>";
					firstCopy = firstCopy + line;
					secondCopy = secondCopy + line;
				}
			}

			if (balance != "" && fields[2].toUpperCase() != "CREDIT") {
				var trimBalance="$"+trim(balance)
				if(provider == "Master"){
					provider = "MASTERCARD";
				}else if(provider == "Dscvr"){
					provider = "DISCOVER";
				}
				line = "<br/><b> " + centerEcp(provider.toUpperCase()+" BALANCE") + "<br/>" + centerEcp(trimBalance) + "</b><br/>";
				firstCopy = firstCopy + line;
				secondCopy = secondCopy + line;
			}

			if(Number(needsSignature) || isRefund || fields[17].toLowerCase() == "must sign") {
				HASSIGNATURE++;
				printSecondCopy = 1;
				PosSetSessionProperty("SecondCopyOfReceipt", "true");
			}

			if (provider == "Gift Card") { GCUsed = true; }
		}

		var isKioskSignature = (HASSIGNATURE > 0) && isFromKiosk && isFirstPass;

		if (isKioskSignature && !isRefund)
		{	
			line = "<br/>___________________________________<br/>Authorized Signature - (Store copy)<br/><br/>";
			secondCopy = secondCopy + line;
			var value = rootConfig.Footer;
			if(value != null && value != "") {
				var lines = String(value).split("\\n");
				for(var i = 0; i < lines.length; i++) {
					if(lines[i].length < COLS)
						secondCopy = secondCopy + "<br/>" + centerEcp(lines[i])
					else {
						secondCopy = secondCopy + "<br/>" + lines[i];
					}
				}
			}
		}

		if (GCUsed) {
			firstCopy = firstCopy + formatLineEscSeq(msg, true);
			secondCopy = secondCopy + formatLineEscSeq(msg, true);
		}

		var firstCopyPrinted = false;
		if (isKioskSignature && !firstCopyPrinted)
		{
			addLineEcp(firstCopy);
		}

		/* print second copy for refunds */
		if((!isOverring) && ((printSecondCopy) || (isRefund)) ) {

			var auxOutputSecondCopy = outputBufferEcp + secondCopy;

			if (!isFromKiosk)
			{
				addLineEcp(firstCopy);
				if(!isFirstPass && !isRefund){
					addLineEcp("<br/>___________________________________<br/>Authorized Signature - (Store copy)<br/><br/>");
				}
			}
			else
			{
				line = "<br/>___________________________________<br/>Authorized Signature - (Store copy)<br/><br/>";
				var KioskSign = "";
				KioskSign=KioskSign + line;
				
				var value = rootConfig.Footer;
				if(value != null && value != "") {
					var lines = String(value).split("\\n");
					for(var i = 0; i < lines.length; i++) {
						if(lines[i].length < COLS)
							KioskSign = KioskSign + "<br/>" + centerEcp(lines[i])
						else {
							KioskSign = KioskSign + "<br/>" + lines[i];
						}
					}
				}
				var auxOutputKioskSign = outputBufferEcp + KioskSign;			
				ctx.set("kioskSecondCashlessReceipt", auxOutputKioskSign.toString(), true);

				if(!isFirstPass)
				{
					addLineEcp(secondCopy);
				}
			}

			auxOutputSecondCopy = null;

			if (isRefund && (view.ItemTenderView.(cat == "TENDER_ELECTRONIC_PAYMENT").length() != 0)) {
				
				addLineEcp("Authorized");
				addLineEcp("Signature:_________________________");
				
				addLineEcp("Address");
				addLineEcp("___________________________________");
				
				addLineEcp("Phone #");
				addLineEcp("___________________________________");
				
				addLineEcp("Reason");
				addLineEcp("___________________________________");
			}
		} else {
			firstCopyPrinted = true;
			addLineEcp(firstCopy);
		}

	}
	function DetermineIfFirstPass(customData)	{
		var returnValue = false;
		
		dataFields = customData.split("|");
		if (dataFields.length > 1)
		{
			var lastField = dataFields[dataFields.length - 1];
			if (lastField == "FirstPass")
			{
				returnValue = true;
			}
		}
		
		return returnValue;
	}
	function TestForEMV(fields)	{
		var returnValue = true;
		
		if (fields.length < 16) {
			returnValue = false;
		} else if (fields[16] == "" && fields[17] == "" && fields[18] == "") {
			returnValue = false;
		}
		
		return returnValue;
	}
	function addReversalInfo() {
		try {
			var ctx=new SessionContext;
		} catch (e) {
			return;
		}
		var merchantAdded = false;
		reversals =String(ctx.get("CASHLESS_REVERSAL"));
		if (reversals.length == 0) { return;}

		revs = String(reversals).split("CASHLESS:");
		for(var i = 1; i < revs.length; i++) {
			revInfo =String(revs[i]);
			fields 	=revInfo.split("|");
			var provider = fields[0].replace("CASHLESS:", ""); // + " SALE";
			providerSale = provider  + " REVERSAL";
			var card = " " + fields[1]; // Card #
			var expires = fields[2];	// Card expiration date
			var auth = fields[3];		// Authorization code
			var seq = fields[6];		// Sequence #
			var mer = fields[7];		// Merchant id
			var balance = API.formatNumber(Number(fields[8]), NUMBER_FORMAT, 12);	// Balance #
			var amt = fields[10];		// Operation amount
			var needsSignature 	=fields[5];

			var firstCopy = "";
			var secondCopy = "";

			if (!merchantAdded) {
				line = "MER# "+mer;
				firstCopy = firstCopy + line + "<br/>";
				merchantAdded = true;
			}

			if (provider == "Gift Card") {expires = "";}

			var line = "CARD ISSUER          ACCOUNT#";
			
			//NVS-7249 - msilva - Add a blank line beetween the cards
			if(i > 1){
				line = "<br/>" + line;
			}		
			
			firstCopy = firstCopy + line + "<br/>";
			secondCopy = secondCopy + line + "<br/>";

			line = API.setOnLeft(providerSale, 14) + card;
			firstCopy = firstCopy + line + "<br/>";
			secondCopy = secondCopy + line + "<br/>";

			line = "TRANSACTION AMOUNT" + API.setOnRight("-"+amt, COLS-18);
			firstCopy = firstCopy + line + "<br/>";
			secondCopy = secondCopy + line + "<br/>";

			line = "AUTHORIZATION CODE - ******<br/>SEQ# " + seq + "<br/>";
			firstCopy = firstCopy + line;
			secondCopy = secondCopy + line;

			/* decrement signature line */
			if(Number(needsSignature)) {
				HASSIGNATURE--;
			}

			addLineEcp(firstCopy);
		}
	}
	/** Adds a tender line from an <ItemTenderView> tag */
	function addTenderLine(tender)	{
		var isFromKiosk = (Number(view.@pod) == PODCSO) || isRcpKiosk;

		var description = "";
		var code = toInt(tender.code);
		var kind = toInt(tender.kind);
		var amount = Number(tender.value);
		/*NVS-5422 - msilva - Set isOverring=false by default. 
		 * KVS does not print overring, does not have SessionContext as well.
		 * */
		var isOverring = false;
		try
		{
			//NVS-5216 14-SEP-2016 John Brancaleon -  Get the SessionContext and etermine if we're doing an overring
			var ctx=new SessionContext;
			isOverring	= Number(ctx.get("CASHLESS_REVERSAL_PENDING")) === 1; 
		}
		catch (e)
		{
		}

		if((kind == TENDER_KIND_PAYMENT) || (kind == TENDER_KIND_ORIGINAL_PAYMENT)) {
			switch (code) {
				case 0:
					description = "Cash Tendered";
					hasCash=true;
					break;
                // NVS-738 Use correct foreign currency codes. AO 01/04/2012
				case 12:
				case 13:
					var paramVal  = xmlStoreDB.Configurations.Configuration.(@type=="Store.wide").Section.(@name=="ForeignCurrency").Parameter.(@name=="SelectedCurrency").@value;
					var tempStr;
					if (paramVal.length() != 0 && paramVal != "OFF") {
						tempStr = paramVal + "  (in USD)";
					} else {
						tempStr = "FOREIGN CUR (in USD)";
					}
					addDetailLine(tempStr, Number(amount));
					//description = "  CNV";
					return;
					break;
				case 10:
					// Falls thru
				case 11:
					hasCash=true;
					// Falls thru
				default:
					description = tender.description + ((toInt(tender.qty) > 1)? " " + tender.qty : " ");
					break;
			}
		}else if(kind == TENDER_KIND_CHANGE) {
			description = "Change";
			hasChange = true;
		}else if(kind == TENDER_KIND_MANAGER_MEAL) {
			description = "Manager meal discount";
			amount = -amount;
		}else if(kind == TENDER_KIND_CREW_MEAL) {
			description = "Employee meal discount";
			amount = -amount;
		}else if(kind == TENDER_KIND_ALLOWANCE) {
			description = "Discount";
            if (code != "0") {
                //description = API.geti18nMsg(1, "MSG_BC_OFFERS_APPLIED_TOTAL",[]);
				description = API.geti18nMsg(1, "MSG_SL_DISCOUNT",[]);
            }
			amount = -amount;
		}else if(kind == TENDER_KIND_DISCOUNT_COUPON) {
			description = tender.description + ((tender.qty > 1)? " " + tender.qty : " ");
			amount = amount;
		}else if(kind == TENDER_KIND_KEEP_CHANGE) {
			description = "Excess";
			amount = amount;
		} else if(kind == TENDER_KIND_REVERSAL) { //NPS-7622
			if(tender.SourceTenders.SourceTender[0].@sourceCode == tender.code){
				description = "Reversal - " + tender.description; 
				amount = -amount;
			}
			else {
				description = "Reversal failure"; 
				addDetailLine(description, -amount);			
				description = "Reversal cashOut"; 				
				if(isInProgress) {
					amountRvCashoutInProgress += amount;
					hasRvCashoutInProgress = true;
				}
			}
		} else {
			return;
		}

		if(isFromKiosk) {
			if((view.@orderKey.substring(0, 7) == tender.srcPOSId)) {
				description="Kiosk " + description;
			}
			if(description == "Kiosk Cash Tendered") {
				if (amount != 0) {
					var pAmount = Number(tender.pValue);
					if(pAmount != amount) {
						addDetailLine(description, pAmount);
						description="Cash Tendered";
						var v1=new BigDecimal(amount);
						var v2=new BigDecimal(pAmount);
						v2=v1.subtract(v2);
						amount=v2.toString();
					}
					addDetailLine(description, amount);
				}
			}else {
				if(description == "Change") {
					
					//font, bold and due is removed	from the kiosk tender receipt NVS-2996				
					addDetailLine(description,	amount);
				}
				else {
					addDetailLine(description, amount);
				}
			}
		}
		else {
			if(description == "Cash Tendered") {
				//NVS-5216 - 14-SEP-2016 John Brancaleon - Only show the detail line if this is not an overring
				if (amount != 0 && !isOverring)
					addDetailLine(description, amount);
			}else {
				addDetailLine(description, amount);
			}
		}
	}
	/** Adds a detail line given a description (string) and amount (number) */
	function addDetailLine(description, amount)	{
		var sig = "";
		var sizeAmount = 12;
		if(amount < 0) {
			amount = -amount;
			var sizeAmount = 10;
			sig = "- ";
		}
		addLineEcp(API.setOnLeft(description, COLS-sizeAmount-sig.length) + sig + API.formatNumber(Number(amount), NUMBER_FORMAT, sizeAmount));
	}
	/*
	 * @brief: reads storedb gets tax table information for extended reciept
	 * @params: view -sale view of the order
	*/
	function PrintTaxInformation(subAmt) {
		/* iterate through the tax items and print the information */
		subAmtBD 	=subAmt;
		thisView 	=rootView.View;

		if (SalesReceipt == "true") {
			/* print 0.00 amt when no taxes were calculated */
			if (String(taxChainArray).length == 0) { 		
				taxChainArray = new Array();
			} 

			if ((String(taxChainArray).length == 0) || (Number(thisView.@totalTax) == 0)) {
				addDetailLine("  Tax", thisView.@totalTax);
			} else { 
				for (var i=0; i<taxChainArray.length; i++) {
					/* get taxes for this ID */ 
					taxID 	=Number(taxChainArray[i]);
					taxSeq = taxIDList["ID:"+taxID];
					//taxSeq	=i+1;
					item 	=thisView.taxItem.(@id == taxID);

				if ( (item.@amount > 0)) {
					/* decide if we should show the rate */ 
					amount =item.@amount;
					if ( (item.@amount > 0) || (item.@ADAmount > 0)) {
						/* use After Discount amount if available */
						ptAmount = (String(item.@ADAmount).length > 0)?item.@ADAmount:item.@amount;					

						/* decide if we should show the rate */ 
						if (ptAmount > 0) { 
							rateFmt =(showRateList["t"+taxSeq] == "true")? " ("+item.@rate+"%)":"";		
							addDetailLine("  Tax "+taxSeq+rateFmt, ptAmount);
						}
						} 

						/* display a subtotal after every tax if configured (and there's more than one tax) */
						if ((SalesReceiptSEQFormat == "true") && (thisView.taxItem.length() > 1) ) {
							subAmtBD = subAmtBD +Number(ptAmount);
							// NVS-6090 Tishin Thomas 5-DEC-2016 - Extra "subtotal" is printed on customer receipt in henrico county test.
							if(taxChainArray.length!=Number(taxSeq))
							{
								addDetailLine("Subtotal",subAmtBD);
							}
						}
					}
				} 
			}
		} else {
			addDetailLine("  Tax", thisView.@totalTax);
		}
	}
	/* prints special tenders */
	function PrintSpecialTenders() {
		var tenders		= view.ItemTenderView;
		var specialTend = tenders.(kind == TENDER_KIND_MANAGER_MEAL || kind == TENDER_KIND_CREW_MEAL || kind == TENDER_KIND_ALLOWANCE);
		var discounts	= tenders.(kind == TENDER_KIND_DISCOUNT_COUPON);
		if(!isAdjustment && specialTend.length() != 0) {
			var mgrMeal = tenders.(kind == TENDER_KIND_MANAGER_MEAL)[0];
			var crwMeal = tenders.(kind == TENDER_KIND_CREW_MEAL)[0];
			var discount = tenders.(kind == TENDER_KIND_ALLOWANCE)[0];
			if(mgrMeal) {
				isCrewManagerMeal = true;
				addTenderLine(mgrMeal);
				delete(tenders.(kind == TENDER_KIND_MANAGER_MEAL)[0]);
			}
			if(crwMeal) {
				isCrewManagerMeal = true;
				addTenderLine(crwMeal);
				delete(tenders.(kind == TENDER_KIND_CREW_MEAL)[0]);
			}
			if(discount) {
				addTenderLine(discount);
				delete(tenders.(kind == TENDER_KIND_ALLOWANCE)[0]);
			}
			
		}
		if(discounts.length() != 0) {
			for each (var tender in discounts) {
				addTenderLine(tender);
			}
			for(var i = discounts.length() - 1; i >= 0; i--) {
				delete(tenders.(kind == TENDER_KIND_DISCOUNT_COUPON)[i]);
			}
		}

	}
	/* returns total amount of fees and deposits */
	function getExtendedSalesAmount(feeOrDeposit) {
		pdTotal = 0;
		pdList =(feeOrDeposit == "Fee")?view.Fee:view.Deposit;
		for each (var pdItem in pdList) { pdTotal = pdTotal + Number(pdItem.@value); }
		return pdTotal;
	}
	/* returns the total of the RMHC donation amount 
	   NVS-5520 31-OCT-2016 John Brancaleon - Remove the RMHC donation amount from the subtotal */
	function getRMHCDonationAmount() {
		var rmhcTotal = 0;
		var rmhcProdCode = API.findParamInSectionConfig("RMHC.donationProductCode", "CSO.UserInterface");
		for each(var item in view.ItemView) {
			if(Number(item.productCode) == Number(rmhcProdCode)) {
				rmhcTotal += item.totalPrice;	//item.@value
			}
		}
		return rmhcTotal;
	}
		/*
	 * @brief: reads storedb gets tax table information for extended reciept
	 * @params: view -sale view of the order
	*/
	function PrintExtendedSalesInfo(feeOrDeposit,extendedAmt) {
		/* handle when there's no fee or deposit amount */
		if (extendedAmt <= 0) { return; }

		/* expanded receipts are enabled, print the breakdown for each fee or deposit */
		if (SalesReceipt == "true") {
			//
			var pdArrSaleType = new Array("EATIN","TAKEOUT");
			var label = "";
			pdSaleType =pdArrSaleType[view.@type];

			if (feeOrDeposit == "Fee") {
				len =2;
				rateHash = "f";
			} else {
				len = 2;
				rateHash = "d";
			}

			for (var i=1;i<=len;i++) {
				if (feeOrDeposit == "Deposit") {
					amt =summNodesAttributeValues(view.Deposit.(@code == i),"value");
					pdInfo 	=depositList.(@depositCode == i).Pricing.(@priceCode == pdSaleType);
				} else {
					amt 		=summNodesAttributeValues(view.Fee.(@code == i),"value");
					pdInfo 	=feeList.(@feeCode == i).Pricing.(@priceCode == pdSaleType);
				}

				/* only print fees and deposits that are charged */
				if (amt<=0) { continue; }

				pdRate 	=pdInfo.Value;
				pdType 	=pdInfo.@type;

				/* determine is we should display the rate or not */
				rateFmt = "";
				if (showRateList[rateHash+(i)] == "true") {
					if (pdType == "AMOUNT") {
						rateFmt = " ($"+pdRate+")";
					} else if (pdType == "RATE") {
						rateFmt = " ("+pdRate+"%)";
					}
				}

				label = "  "+feeOrDeposit+" "+i+rateFmt;
				addDetailLine(label, amt);
			}

		/* when extended receipts are disabled, only print the total fee or deposit amount */
		} else {
			
			addDetailLine(feeOrDeposit, extendedAmt);
		}
	}
	function addPromotionOnTender()	{
		if (view.Promotions != undefined)
		{
			var promotionTenderId = Number(view.Promotions.@tenderId);		
			if(promotionTenderId > -1) 
			{
				var savedAmount = Number(view.Promotions.@amountBeforeTenderPromo) - Number(view.@grossAmount);
				var tenderItems = view.ItemTenderView.(code == promotionTenderId);
				addLineEcp(API.geti18nMsg(1, "MSG_TENDER_TYPE_PROMOTION_AMT_SAVED",[API.formatNumber(savedAmount, "#0.00", 6), tenderItems.description]));		
			}
		}
	}
	//NVS-4638 - Ability to Display Customer Savings on the Receipt
	//NVS-7775 - Tishin
	function addSavingInfoECP() 	{ 
		var Savings = rootView.View.Savings; 
		if (Savings != undefined) 
		{ 
			var VMSavings = Number(Savings.VMSavings.toString());	
			var otherSavings = Number(Savings.otherSavings.toString());	
			if (VMSavings > 0) 
			{ 
				otherSavings=(otherSavings+VMSavings);
			} 
			otherSavings=otherSavings.toFixed(2);
			if (otherSavings > 0 && crewMealAmount<=0 && managerMealAmount <=0) 
			{ 
				line = API.geti18nMsg(1, "MSG_BC_OTHER_SAVINGS", []); 
				
				addLineEcp(line + API.setOnRight(otherSavings.toString(), COLS-line.length));
			} 
		} 
	}
	/** Adds the default header from store-db */
	function addDefaultHeader()	{
		var value = rootConfig.Header;
		
		if(value != null && value != "") {
			var lines = String(value).split("\\n");
			for(var i = 0; i < lines.length; i++) {
				addLineEcp(centerEcp(lines[i]));
			}
		}

		if ( PosCheckParameter_ex("Report","PrintSurveyCode", 'true') && rootView != null ) {
			var surveyCode = "";
			try {
				var view = rootView.View;
				var posId;
				if (checkIsMobileOrder(view) == false) {
					posId = view.@tenderPOS;
				} else {
					posId = view.@orderKey;
				}
				var isFromKiosk = (Number(view.@pod) == PODCSO);
				if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){
					isRcpHHOT = true; 
				}
				var useRecallerId = isFromKiosk || isRcpHHOT;			

				var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,useRecallerId,false);
				var rcpDate = API.formatDate(view.@saleDate, "MMddyy");
				var rcpTotal = API.formatNumber(Number(view.@grossAmount), "0000.00", 7);
				surveyCode = API.formatNumber(Number(rootConfig.StoreId), "00000", 5) + "-" +
							 API.formatNumber(toInt(posId.substring(3, 7)), "00", 2) +
							 API.formatNumber(majorMinor.substr(0,2), "00", 2) +
							 rcpDate.substr(0,1) + "-" + rcpDate.substr(1,3) + rcpDate.substr(6,2) + "-" + view.@saleTime.substr(0,4);
				surveyCode = surveyCode.luhnGet() + "-" + rcpTotal.substr(0,4) + rcpTotal.substr(5,1) + "-" + rcpTotal.substr(6,1);
			} catch (e) {
			}
			if (surveyCode != "") {
				addLineEcp("         Survey code:");
				addLineEcp(centerEcp(boldEcp(surveyCode)));
			}
		}

		var strStore = rootConfig.StoreId;
		
		addLineEcp(centerEcp("McDonald's Restaurant #" +strStore));
		
		var value = rootConfig.StoreAddress;
		if(value != null && value != "") {
			var lines = String(value).split("\\n");
			for(var i = 0; i < lines.length; i++) {
					addLineEcp(centerEcp(lines[i].substring(0,39)));
			}
		}

		var valueCity = rootConfig.City;
		
		var valueState = rootConfig.State;
		
		var valueZipCode = rootConfig.StoreZipCode;
		
		if((valueCity != null && valueCity != "") && (valueState != null && valueState != "") && (valueZipCode != null && valueZipCode != "")){
			var city = String(valueCity).split("\\n");
			var state = String(valueState).split("\\n");
			var zipCode = String(valueZipCode).split("\\n");
			
			addLineEcp(centerEcp(city + "," + state + " " + zipCode));
		}
	}
	/** Adds the default header from store-db */
	function addDefaultFooter()	{
		var value = rootConfig.Footer;
		if(value != null && value != "") {
			var lines = String(value).split("\\n");
			for(var i = 0; i < lines.length; i++) {
				if(lines[i].length < COLS)
					addLineEcp(centerEcp(lines[i]));
				else {
					
					addLineEcp(lines[i]);
				}
			}
		}
	}
	/* prints Items */
	function PrintSaleItemsEcp(sale) {
		if (sale.settings.printPickList == false) {
			/* decide the format */ 
			if (sale.settings.showAsSinglePrice) { 
				sale.FormatAsSinglePrice();
			} else {
				sale.FormatAsClassic();
			} 
		} else {
			//Merge non grilled items
			sale.MergeItemsForPickList();
		}
		
		for(var i=0; i < sale.itemList.length; i++) {	
			if (!(sale.settings.printPickList == true && sale.itemList[i].data.isCYT == true)) {
				var rmhcProdCode 	= API.findParamInSectionConfig("RMHC.donationProductCode", "CSO.UserInterface");
				if(Number(sale.itemList[i].data.productCode) != Number(rmhcProdCode)) {
					printSaleItemEcp(sale.itemList[i]);
					innnerPrint(sale.itemList[i]);
				} else {
					var price = sale.itemList[i].data.totalPrice;
					var priceNoComma = removeChar(String(price),",");
					price = API.formatNumber(Number(priceNoComma), NUMBER_FORMAT, 8);				
					var line = sale.itemList[i].data.longName;
					line = API.setOnLeft("RMHC Donation", COLS-String(price).length) + price;
					if (Number(priceNoComma) > 0)
						addLineEcp(line + "\n");  
				}
			}
		}

		/* due to a limit in the java interpreter, recursive methods can't see interval variables the 2nd time around, so an inner function is used */
		function innnerPrint (item) { 
			for(var i=0; i < item.children.length; i++) {
				printSaleItemEcp(item.children[i]);
				if (item.children.length > 0) { 
					innnerPrint(item.children[i]);
				} 
			}
		} 
		

		/* basic print routine for an item */
		function printSaleItemEcp(saleItem) {

			/* prevent items from being printed twice */ 
			if (saleItem.printed) { return; } 	
			
			/* don't print voided items */
			if ((saleItem.data.quantity == 0) && (saleItem.data.isGrillLine == "false")) { return; } //NVS-1014
			
			/* don't print items if parent's qty is 0 */ 
			if ((saleItem.parent != null) && (saleItem.parent.data.quantity == 0)) { return; } //NVS-1089
			
			var level 		= saleItem.level;
			var qty 		= saleItem.data.quantity;	
			var name  		= saleItem.data.longName;
			var ident		= "";
			var inlineMsg	= "";
			var OffersItem 	= saleItem.data.PromotionApplied[0];
			
			var line;
			itemCode 		= Number(saleItem.data.itemCode);
			
			if(itemCode == prevItemCode){
				isSameAsPreviousItem = true;
			} else {
				isSameAsPreviousItem = false;
			}
			
			//Print only after last promoted product by the offer is printed - NVS-5596
			if(isSameAsPreviousItem){
				if(hasSameAsPreviousItem){
					printOfferLine = false;
				}else{
					hasSameAsPreviousItem = true;
				}
			}else{
				if(hasSameAsPreviousItem){
					printOfferLine = true;
					hasSameAsPreviousItem = false;
				}else{
					printOfferLine = false;	
				}
			}
			getOfferData();
			getPromotionData();

			/* filter SMART choices */ 
			if ( (saleItem.data.productCode > 100000) && (saleItem.data.isGrillLine == false) ) { return; }     // NVS-1100 added isGrillLine
			/* dont print sandwich under EVM's that don't have grills */
			if ( (level > 0) 
				&& (Number(saleItem.data.prodAction) == 0) 
				&& (Number(saleItem.data.productType) == 2) 
				&& (saleItem.data.isGrillLine != "true") 
				&& (!saleItem._hasGrills()) 
				
			   ) { 
				return;
			} 

			/* format price */ 
			var price;
			if (saleItem.settings.printPickList == false) {
				
				doFormatPrice(saleItem);

				/* condiments attached as choices are not indented extra (strange but true) */ 
				if ( (saleItem.data.prodAction == 3) && (saleItem.data.productType == 2) && (level > 1) ) {
					level--; 
				} 

				/* indent based on level */

				// NVS-3327 Add promotions titles and indent
				if (promotionOn) {
					doPrintPromotionLine();
				}
				
				if (offerOn) {	
					if (isOrderLevelOffer == "false") {
						doPrintOfferLine();
					} else {
						ident = ident + "  ";
					}
				}
			} else {
				price = "";
			}
			
			/* indent based on level */
			for(var i=0; i<level; i++) { 
				ident += "  "; 
			}	
			
			if (saleItem.settings.printPickList == false) {	
				if (isOrderLevelPromotion == "true") {
					if ((saleItem.data.familyGroup != "8" || saleItem.data.productType == "6") && saleItem.data.familyGroup != "9" && saleItem.data.familyGroup != "11" && saleItem.data.isGrillLine == "false")  {
						ident = ident + "  ";
					}
				}
			}
			/* handle grills */ 
			if (sgpEnabled == "true" && sgpHideAddGrill == "true") {
				if (saleItem.data.isCYT == "true") {
					hideAddGrillModifier = true;
					var lastItemCode = saleItem.data.itemCode;
				} else {
					if (saleItem.data.isGrillLine == "false") {
						hideAddGrillModifier = false
					}
				}
			}
			if(saleItem.data.isGrillLine == "true") {
				if (isOrderLevelPromotion == "true" || isOrderLevelOffer == "true" || promotionOn || offerOn) {
					ident = ident + "  ";
				}
				if(saleItem.parent.data.displayNumbersInsteadofModifiers == "true" || saleItem.parent.data.displayNumbersInsteadofModifiers == true){
					line = ident + getGrillDescriptionForMcCafeItems(saleItem.data, true, false, hideAddGrillModifier);
				}
				else{
					line = ident + getGrillDescription(saleItem.data, true, false, hideAddGrillModifier);
				}		
				
			} else { 
				/* handle non grilled items */
				line = ident + qty + " " + name;
			} 

			/* make sure line doesn't get any longer than 30 cols */
			if (line.length > 30) { line = line.substring(0, 30); }
			
			if (saleItem.settings.printPickList == false) {
			
				/* handle any inline messages */ 
				if (saleItem.settings.inlineText) {
					if ((saleItem.data.isUpcharge == "true") && ((saleItem.settings.showUpCharge != null) && (saleItem.settings.showUpCharge))) { 
						inlineMsg = " <" + saleItem.settings.upchargeText + ">  ";
					}

					if ((saleItem.hasDiscount) && ((saleItem.settings.showDiscount != null) && (saleItem.settings.showDiscount) && (!saleItem.settings.suppressDiscount))) { 
						inlineMsg = " <" + saleItem.settings.discountText + ">  " + price;
					} 
					
					price = inlineMsg + price;
				}

				/* handle promo indicator */ 
				if( (toInt(saleItem.data.quantityPromo) != 0) && (saleItem.level == 0)) {
					price = saleItem.data.quantityPromo + "P" + price;
				} 
				line = API.setOnLeft(line, COLS-String(price).length) + price;
				//NVS-4875 - Add item line
				if (addGiftCert !== null && addGiftCert !== undefined && addGiftCert !== "" && ((saleItem.data.familyGroup == "8" && saleItem.data.productType != "6") || saleItem.data.familyGroup == "9" || saleItem.data.familyGroup == "11")) {
					//Gift buffer
					addGiftCert.append(line + "\n");
				} 
				//NVS-5311 Tishin Thomas Order Sequence is incorrect on customer receipt for Extra Toy (Happy Premium W Food
				else if (addGiftCert !== null && addGiftCert !== undefined && addGiftCert !== "" && saleItem.parent!=null &&saleItem.parent.data!=null &&((saleItem.parent.data.familyGroup == "8" && saleItem.parent.data.productType != "6") || saleItem.parent.data.familyGroup == "9" || saleItem.parent.data.familyGroup == "11"))
				{
					//Gift buffer
					addGiftCert.append(line + "\n");
				}
				//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
				else if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "" && (saleItem.data.quantityPromo > 0 && OffersItem == null && saleItem.data.isGrillLine == "false") && (saleItem.parent != null && saleItem.parent.data != null && saleItem.parent.data.PromotionApplied == null)) {
					//Promo buffer
					addPromoItems.append(line + "\n");
				} 
				//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
				else if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "" && (saleItem.data.quantityPromo > 0 && OffersItem == null && saleItem.parent != null && saleItem.parent.data != null) && saleItem.parent.data.PromotionApplied == null) {
					addPromoItems.append(line + "\n");
				}
				else {
					//Regular line
					addLineEcp(line);
				}
				
				/* add any upcharge text */ 
				if (!saleItem.settings.inlineText) { 
					if ((saleItem.data.isUpcharge == "true") && ((saleItem.settings.showUpCharge != null) && (saleItem.settings.showUpCharge))) {
						chargeText = "<"+saleItem.settings.upchargeText.substr(0,16)+">";
						size = 30 - chargeText.length;
						
						//Adding the upcharge text at the end if the line has been promoed NVS-4963
						//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
						if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "" && (saleItem.data.quantityPromo > 0 && OffersItem == null && saleItem.data.isGrillLine == "false") && (saleItem.parent != null && saleItem.parent.data != null && saleItem.parent.data.PromotionApplied == null)) {
							addPromoItems.append(saleItem._createPadding(size) + chargeText + "\n");					
						} 
						//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
						else if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "" && (saleItem.data.quantityPromo > 0 && OffersItem == null && saleItem.parent != null && saleItem.parent.data != null) && saleItem.parent.data.PromotionApplied == null) {
							addPromoItems.append(saleItem._createPadding(size) + chargeText + "\n");
						}
						else {
							addLineEcp(saleItem._createPadding(size) + chargeText);
						} 
					} 

					/* add any discount text */
					if ((saleItem.hasDiscount) && ((saleItem.settings.showDiscount != null) && (saleItem.settings.showDiscount) && (!saleItem.settings.suppressDiscount))) { 
						discoText = "<"+saleItem.settings.discountText.substr(0,16)+">";
						size = 30 - discoText.length;
						
						//Adding the discount text at the end if the line has been promoed NVS-4963
						//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
						if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "" && (saleItem.data.quantityPromo > 0 && OffersItem == null && saleItem.data.isGrillLine == "false") && (saleItem.parent != null && saleItem.parent.data != null && saleItem.parent.data.PromotionApplied == null)) {
							addPromoItems.append(saleItem._createPadding(size) + discoText + "\n");
						} 
						//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
						else if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "" && (saleItem.data.quantityPromo > 0 && OffersItem == null && saleItem.parent != null && saleItem.parent.data != null) && (saleItem.parent != null && saleItem.parent.data != null && saleItem.parent.data.PromotionApplied == null)) {
							addPromoItems.append(saleItem._createPadding(size) + discoText + "\n");
						}
						else {
							addLineEcp(saleItem._createPadding(size) + discoText);
						}
					} 
				}
			} else {
				/* handle promo indicator */   //Kalpesh - NVS-1579
				if( (toInt(saleItem.data.quantityPromo) != 0) && (saleItem.level == 0)) {
					line =API.setOnLeft(line, COLS-String(qty).length) + saleItem.data.quantityPromo + "P";	          
				} 
				if (addGiftCert !== null && addGiftCert !== undefined && addGiftCert !== "" && ((saleItem.data.familyGroup == "8" && saleItem.data.productType != "6") || saleItem.data.familyGroup == "9" || saleItem.data.familyGroup == "11")) {
					addGiftCert.append(line + "\n");
				}
				//NVS-5311 Tishin Thomas Order Sequence is incorrect on customer receipt for Extra Toy (Happy Premium W Food
				else if (addGiftCert !== null && addGiftCert !== undefined && addGiftCert !== "" && saleItem.parent!=null &&saleItem.parent.data!=null &&((saleItem.parent.data.familyGroup == "8" && saleItem.parent.data.productType != "6") || saleItem.parent.data.familyGroup == "9" || saleItem.parent.data.familyGroup == "11"))
				{
					//Gift buffer
					addGiftCert.append(line + "\n");
				}
				//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
				else if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "" && (saleItem.data.quantityPromo > 0 && OffersItem == null && saleItem.data.isGrillLine == "false") && (saleItem.parent != null && saleItem.parent.data != null && saleItem.parent.data.PromotionApplied == null)) {
					addPromoItems.append(line + "\n");
				//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
				} else if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "" && (saleItem.data.quantityPromo > 0 && OffersItem == null && saleItem.parent != null && saleItem.parent.data != null) && saleItem.parent.data.PromotionApplied == null) {
					addPromoItems.append(line + "\n");
				}
				else {
					addLineEcp(line);
				}
			}
			prevItemCode = itemCode;
			/* mark items as being printed */ 
			saleItem.printed = true;
			
			//Identify when promotion has been applied
			function getPromotionData()	{
				if (prevItemCode == null || (prevItemCode != itemCode && level == 0)) {
					if (OffersItem != null && OffersItem.@offerId == "-1") {
						promotionOn = true;
					} else {
						promotionOn = false;
					}
				}	
			}
			
			//Identify when offer has been applied
			function getOfferData()	{
				if (prevItemCode == null || (prevItemCode != itemCode && level == 0)) {
					if (OffersItem != null && OffersItem.@offerId > "0") {
						offerOn = true;
					} else {
						offerOn = false;
					}
				}
			}
			
			//Format price
			function doFormatPrice(body){

				price = (body.displayPrice == null)?body.data.totalPrice:body.displayPrice;	
				//Calculate the price reduction after a promotion has been applied - NVS-3740
				if (OffersItem != null && OffersItem.@discountType != null && OffersItem.@discountType.toUpperCase() == "PRICE") {
					var totalPrice = Number(body.data.totalPrice);
					var discountAmount = Number(OffersItem.@discountAmount);
					if (Number(totalPrice) > 0) {
						price = String(totalPrice - discountAmount);
					}
				}
				
				var priceNoComma = removeChar(String(price),",");
				price = API.formatNumber(Number(priceNoComma), NUMBER_FORMAT, 8);
				
				if ((level > 0) && (price == 0)) { 
					price = ""; 
				} 
				
				if ((price == 0) && (body.data.isGrillLine == "true") ) { 
					price = ""; 
				} 
			}
			
			/* NVS-4875 - msilva - Print Promotion item information */
			function doPrintPromotionLine(){
				
				if(OffersItem == null){
					return false;
				}
				
				var promotionCounter = OffersItem.@promotionCounter;

				/*NVS-4379 - msilva*/
				if((promotionCounter != null) && promotionTitles != null && promotionTitles[promotionCounter] != ""){
					//NVS-5880 09-NOV-2016 John Brancaleon Remove the Leading spaces from the promotion title to left justify it
					addLineEcp(promotionTitles[promotionCounter]);
					promotionTitles[promotionCounter] = "";
				}
				
				ident = ident + "  ";	

				return true;
			}
			
			/* NVS-4875 - msilva - Print Offer item information */
			function doPrintOfferLine(){
				
				if(OffersItem == null)
				{
					return false;
				}
				
				var promotionCounter = OffersItem.@promotionCounter;

				//Offer discount
				var offersDiscount = OffersItem.@discountAmount;
				var offersDiscountNoComma = removeChar(String(offersDiscount),",");
				offersDiscount = API.formatNumber(Number(offersDiscountNoComma), NUMBER_FORMAT, 8);
				
				/*NVS-4379 - msilva*/
				if ( (promotionCounter != null) && promotionTitles != null && promotionTitles[Number(promotionCounter)] != "") {
					offersDiscount = "-" + offersDiscount;
					//Using fixed text Offer Applied, not using the Offer Name
					var offerTitle = promotionTitles[Number(promotionCounter)];
					
					if(offerTitle != null && offerTitle != undefined) {
					var pos = offerTitle.indexOf("\n");
					if (pos > -1) {
						offerTitle = offerTitle.substring(0, pos);
					}
					
					//NVS-5880 09-NOV-2016 John Brancaleon Remove the Leading spaces from the offer` title to left justify it
					line = offerTitle.substring(0, 39);
					addLineEcp(line);
					promotionTitles[Number(promotionCounter)] = "";
					}
				}
				
				ident = ident + "  ";
				
				return true;
			}
		}

		
	} 

} /* end of receipt function */





function getRecieptLists()
{
	var rootStoreDB = xmlStoreDB;

	/* get control parameters */
	reportsConfig 				= xmlStoreDB.Configurations.Configuration.(@type=="POS").Section.(@name=="Report");
	SalesReceipt 		=String(reportsConfig.Parameter.(@name== "SalesReceipt").@value);
	SalesReceiptTaxID 	=String(reportsConfig.Parameter.(@name== "SalesReceiptTaxID").@value);
	SalesReceiptSEQFormat =String(reportsConfig.Parameter.(@name== "SalesReceiptSEQFormat").@value);
	SalesReceiptShowRate	=String(reportsConfig.Parameter.(@name== "SalesReceiptShowRate").@value);

	ShowRate_t1	=String(reportsConfig.Parameter.(@name== "SalesReceiptShowRatet1").@value);
	ShowRate_t2	=String(reportsConfig.Parameter.(@name== "SalesReceiptShowRatet2").@value);
	ShowRate_t3	=String(reportsConfig.Parameter.(@name== "SalesReceiptShowRatet3").@value);
	ShowRate_t4	=String(reportsConfig.Parameter.(@name== "SalesReceiptShowRatet4").@value);
	ShowRate_f1	=String(reportsConfig.Parameter.(@name== "SalesReceiptShowRatef1").@value);
	ShowRate_f2	=String(reportsConfig.Parameter.(@name== "SalesReceiptShowRatef2").@value);
	ShowRate_d1	=String(reportsConfig.Parameter.(@name== "SalesReceiptShowRated1").@value);
	ShowRate_d2	=String(reportsConfig.Parameter.(@name== "SalesReceiptShowRated2").@value);

	showRateList["t1"] = ((ShowRate_t1.length == 0)?"false":ShowRate_t1);
	showRateList["t2"] = ((ShowRate_t2.length == 0)?"false":ShowRate_t2);
	showRateList["t3"] = ((ShowRate_t3.length == 0)?"false":ShowRate_t3);
	showRateList["t4"] = ((ShowRate_t4.length == 0)?"false":ShowRate_t4);
	showRateList["d1"] = ((ShowRate_d1.length == 0)?"false":ShowRate_d1);
	showRateList["d2"] = ((ShowRate_d2.length == 0)?"false":ShowRate_d2);
	showRateList["f1"] = ((ShowRate_f1.length == 0)?"false":ShowRate_f1);
	showRateList["f2"] = ((ShowRate_f2.length == 0)?"false":ShowRate_f2);

	/* get tax information, ID and rate */ 
	taxIDNodes =rootStoreDB.StoreDB.TaxTable.TaxType.(@statusCode=="ACTIVE");

	/* get taxChain information, used to determine what order is the taxes in */
	//taxIDList = null;
	taxChainNodes =rootStoreDB.StoreDB.TaxTable.TaxChain.(@statusCode=="ACTIVE");
	if (String(taxChainNodes).length > 0) {
		var position = 0;
		var taxChainArrays = new Array();
		for ( var j = 0; j < taxChainNodes.length(); j++ ) {
			taxChainNode = taxChainNodes[j];
			taxChainArrays = taxChainNode.TaxTypeId.@taxId;
			for (var i = 0; i < taxChainArrays.length(); i++,position++) { 
				taxChainArray[position] = taxChainArrays[i];
				taxIDList["ID:"+taxChainArray[position]] = i+1;
			}
		}		
	} 

	/* get the fee information */
	feeList =rootStoreDB.StoreDB.FeeTypes.FeeType.(@status=="ACTIVE");

	/* get the fee information */
	depositList =rootStoreDB.StoreDB.DepositTypes.DepositType.(@status=="ACTIVE");
}

/* call now instead of calling every receipt */
getRecieptLists();




/**
 * \brief Contruct for and Item in the order view
 * \param [in] data 	-XML object containing properties returned in the <view>
 * \param [in] settings 	-Configuration settings used to decide how the item should print. 
 */
function OrderItems(data, settings) { 
	this.data 		=data;
	this.settings		=settings;
	this.displayName 	=null;
	this.displayPrice 	=null;
	this.displayQty	=null;
	this.displayPromo	=null;
	this.hasUpcharge	=false;
	this.hasDiscount	=false;
	this.printed		=false;
	this.level		=data.level;
	this.parent		=null;		/* link back to parent */
	this.children		=new Array();
	//NVS-6353 & NVS-6375 17-JAN-2017 John Brancaleon - Add the children.  This corrects an issue with the reciept
	if(data.children.length > 0) {
		for(var child in data.children) {
			this.children.push(child);
		}
	}
}

OrderItems.prototype._createPadding = function print(n) {
	var str = "";
	for (; n > 0; --n) { 
		str = str + " "; 
	} 
	
	return str;
} 

/* checks to se if the <item> has any grills as children */
OrderItems.prototype._hasGrills = function () {
	for(var i=0; i < this.children.length; i++) {
		if (this.children[i].data.isGrillLine == "true") {
			return true;
		} 
	} 
	
	return false;
} 

/* basic print routine for an item */
OrderItems.prototype.print = function print() {

	/* prevent items from being printed twice */ 
	if (this.printed) { return; } 	
	
	/* don't print voided items */
	if ((this.data.quantity == 0) && (this.data.isGrillLine == "false")) { return; } //NVS-1014
	
	/* don't print items if parent's qty is 0 */ 
	if ((this.parent != null) && (this.parent.data.quantity == 0)) { return; } //NVS-1089
	
	var level 		= this.level;
	//var qty 		= API.setOnRight(this.data.quantity, 3);
	var qty 		= this.data.quantity;	
	var name  		= this.data.longName;
	var ident		= "";
	var inlineMsg	= "";
	var promoInd 	= "";
	var OffersItem 	= this.data.PromotionApplied[0];
	
	var line;
	itemCode 		= Number(this.data.itemCode);
	
	//NVS-4875 - msilva
	if(itemCode == prevItemCode){
		isSameAsPreviousItem = true;
	} else {
		isSameAsPreviousItem = false;
	}
	
	//Print only after last promoted product by the offer is printed - NVS-5596
	if(isSameAsPreviousItem){
		if(hasSameAsPreviousItem){
			printOfferLine = false;
		}else{
			hasSameAsPreviousItem = true;
		}
	}else{
		if(hasSameAsPreviousItem){
			printOfferLine = true;
			hasSameAsPreviousItem = false;
		}else{
			printOfferLine = false;	
		}
	}
	
	/* NVS-4875 - msilva - Get offers/promotions data */
	getOfferData();
	getPromotionData();

	/* filter SMART choices */ 
	if ( (this.data.productCode > 100000) && (this.data.isGrillLine == false) ) { return; }     // NVS-1100 added isGrillLine
	/* dont print sandwich under EVM's that don't have grills */
	
	//NVS-8005, check if Bundle, if true sandwich should be printed
	var isInBundle = false;
 	if ((this.parent != undefined) && (this.parent != null)) {
		isInBundle = hasBundleTag(this.parent.data.productCode);
	}
	
	if ( (level > 0) 
		&& (Number(this.data.prodAction) == 0) 
		&& (Number(this.data.productType) == 2) 
		&& (this.data.isGrillLine != "true") 
		&& (!this._hasGrills()) 
		&& (!isInBundle)
		
	   ) { 
		return;
	} 
	try {
			var ctx=new SessionContext;
			promotionOn = promotionOn && !(Number(ctx.get("CASHLESS_REVERSAL_PENDING")) === 1);
		} catch (e) {}
	/* format price */ 
	var price;
	if (this.settings.printPickList == false) {
		
		doFormatPrice(this);

		/* condiments attached as choices are not indented extra (strange but true) */ 
		if ( (this.data.prodAction == 3) && (this.data.productType == 2) && (level > 1) ) {
			level--; 
		} 

		/* indent based on level */
		// NVS-3327 Add promotions titles and indent
		if (promotionOn) {
			if (isOrderLevelPromotion == "false") {
				doPrintPromotionLine();
				ident = ident + "  ";
			} 					
		}
		
		//Add Offer title and indent
		if (offerOn) {	
			if (isOrderLevelOffer == "false") {
				doPrintOfferLine();
				ident = ident + "  ";
			}
		}
	} else {
		price = "";
	}
	
	/* indent based on level */
	for(var i=0; i<level; i++) { 
		ident += "  "; 
	}	
	
	if (this.settings.printPickList == false) {	
		if (isOrderLevelPromotion == "true") {
				//NVS-8410 adding indentation for surcharge products - familyGroup = 8 NON_PRODUCT
				if ((this.data.familyGroup != "8" && this.data.familyGroup != "9" && this.data.familyGroup != "11") || this.data.productType == "6" || (this.data.familyGroup == "8" && this.data.longName.indexOf("Surcharge") > -1 ))  {
					ident = ident + "  ";
				}
			}
		
		if (isOrderLevelOffer == "true") {			
				//NVS-8410 adding indentation for surcharge products - familyGroup = 8 NON_PRODUCT
				if ((this.data.familyGroup != "8" && this.data.familyGroup != "9" && this.data.familyGroup != "11") || this.data.productType == "6" || (this.data.familyGroup == "8" && this.data.longName.indexOf("Surcharge") > -1 ))  {
					ident = ident + "  ";
			}
		}
	}
	
	// Lindomar Araujo: 2014/08/28 - SQC-6001 - Checking if the smartRouting and hideAddGrillParameter is enabled to check if the product is a SGP item
	/* handle grills */ 
	if (sgpEnabled == "true" && sgpHideAddGrill == "true") {
		if (this.data.isCYT == "true") {
			hideAddGrillModifier = true;
			var lastItemCode = this.data.itemCode;
		} else {
			if (this.data.isGrillLine == "false") {
				hideAddGrillModifier = false
			}
		}
	}
	if(this.data.isGrillLine == "true") {
		// Lindomar Araujo: 2014/08/28 - SQC-6001 - Sending the new parameter(hideAddGrillModifier) to the function getGrillDescription
		//NVS-6471 Tishin Thomas  When product's component count is reduced using No modifier, count is not getting updated in PMIX report. Also, receipt diplays REM modifier.
		//NVS-6471 & NVS-6705 16-FEB-2016 John Brancaleon - Correct this to check for the "true" string 
		if(this.parent.data.displayNumbersInsteadofModifiers == "true" || this.parent.data.displayNumbersInsteadofModifiers == true){
			line = ident + getGrillDescriptionForMcCafeItems(this.data, true, false, hideAddGrillModifier);
		}
		else{
			line = ident + getGrillDescription(this.data, true, false, hideAddGrillModifier);
		}		
		
	} else { 
		/* handle non grilled items */
		line = ident + qty + " " + name;
	} 

	/* make sure line doesn't get any longer than 30 cols */
	if (line.length > 30) { line = line.substring(0, 30); }
	
	if (this.settings.printPickList == false) {
	
		/* handle any inline messages */ 
		if (this.settings.inlineText) {
			if ((this.data.isUpcharge == "true") && ((this.settings.showUpCharge != null) && (this.settings.showUpCharge))) { 
				inlineMsg = " <" + this.settings.upchargeText + ">  ";
			}

			if ((this.hasDiscount) && ((this.settings.showDiscount != null) && (this.settings.showDiscount) && (!this.settings.suppressDiscount))) { 
				inlineMsg = " <" + this.settings.discountText + ">  " + price;
			} 
			
			//price = inlineMsg + price;
		}
		
		//NVS-8214
		var qtyPromo = (this.data.quantity - this.data.quantityPromo) * this.data.unitPrice;
		
		//NVS-8282 JP
		if (toInt(this.data.quantityPromo) != 0) {
			if (this.data.level > 0) {
				if (this.data.isUpcharge == "true") {
				if (qtyPromo == 0)
					price = "0.00";
					else
					price = qtyPromo.toFixed(2); //NVS-8654
				}
			} else {
				if (qtyPromo == 0)
					price = "0.00";
					else
					price = qtyPromo.toFixed(2); //NVS-8654
			}			
		} 
		/*if(toInt(qtyPromo) > 0 && this.data.level > 0){
			var priceFlt = parseFloat(qtyPromo).toFixed(2);
			price = priceFlt;
		}*/
		/* handle promo indicator */ 
		if( (toInt(this.data.quantityPromo) > 0) && (this.data.level == 0)) {
			promoInd = this.data.quantityPromo + "P";
		} 
		
		//NVS-8282 JP
		if (inlineMsg != "") {
			price = inlineMsg + price;
		}
		
		//NVS-8282 JP
		if (promoInd != "") {
			price =  API.setOnLeft(promoInd, 9 - String(price).length) + price;
		}
		
		line = API.setOnLeft(line, COLS - String(price).length) + price;
		
		//NVS-4875 - Add item line
		//NVS-7529 Tishin
		if (addGiftCert != null && addGiftCert != undefined && addGiftCert != "" && ((this.data.familyGroup == "8" && this.data.productType != "6") || this.data.familyGroup == "9" || this.data.familyGroup == "11")) {
			//Gift buffer
			addGiftCert.append(line + "\n");
		} 
		//NVS-5311 Tishin Thomas Order Sequence is incorrect on customer receipt for Extra Toy (Happy Premium W Food
		else if (addGiftCert != null && addGiftCert != undefined && addGiftCert != "" && this.parent != null && this.parent.data != null && ((this.parent.data.familyGroup == "8" && this.parent.data.productType != "6") || this.parent.data.familyGroup == "9" || this.parent.data.familyGroup == "11"))
		{
			//Gift buffer
			addGiftCert.append(line + "\n");
		}
		//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
		else if (addPromoItems != null && addPromoItems != undefined && addPromoItems != "" && (this.data.quantityPromo > 0 && OffersItem == null && this.data.isGrillLine == "false") && (this.parent != null && this.parent.data != null && this.parent.data.PromotionApplied == null)) {
			//Promo buffer
			addPromoItems.append(line + "\n");
		} 
		//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
		else if (addPromoItems != null && addPromoItems != undefined && addPromoItems != "" && (this.data.quantityPromo > 0 && OffersItem == null && this.parent != null && this.parent.data != null) && this.parent.data.PromotionApplied == null) {
			addPromoItems.append(line + "\n");
		}
		else {
			//Regular line
			addLine(line);
		}
		
		/* add any upcharge text */ 
		if (!this.settings.inlineText) { 		
			if ((this.data.isUpcharge == "true") && ((this.settings.showUpCharge != null) && (this.settings.showUpCharge))) {
				chargeText = "<"+this.settings.upchargeText.substr(0,16)+">";
				size = 30 - chargeText.length;
				
				//Adding the upcharge text at the end if the line has been promoed NVS-4963
				//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
				if (addPromoItems != null && addPromoItems != undefined && addPromoItems != "" && (this.data.quantityPromo > 0 && OffersItem == null && this.data.isGrillLine == "false") && (this.parent != null && this.parent.data != null && this.parent.data.PromotionApplied == null)) {
					addPromoItems.append(this._createPadding(size) + chargeText + "\n");					
				} 
				//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
				else if (addPromoItems != null && addPromoItems != undefined && addPromoItems != "" && (this.data.quantityPromo > 0 && OffersItem == null && this.parent != null && this.parent.data != null) && this.parent.data.PromotionApplied == null) {
					addPromoItems.append(this._createPadding(size) + chargeText + "\n");
				}
				else {
					addLine(this._createPadding(size) + chargeText);
				} 
			} 

			/* add any discount text */
			if ((this.hasDiscount) && ((this.settings.showDiscount != null) && (this.settings.showDiscount) && (!this.settings.suppressDiscount))) { 
				discoText = "<"+this.settings.discountText.substr(0,16)+">";
				size = 30 - discoText.length;
				
				//Adding the discount text at the end if the line has been promoed NVS-4963
				//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
				if (addPromoItems != null && addPromoItems != undefined && addPromoItems != "" && (this.data.quantityPromo > 0 && OffersItem == null && this.data.isGrillLine == "false") && (this.parent != null && this.parent.data != null && this.parent.data.PromotionApplied == null)) {
					addPromoItems.append(this._createPadding(size) + discoText + "\n");
				} 
				//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
				else if (addPromoItems != null && addPromoItems != undefined && addPromoItems != "" && (this.data.quantityPromo > 0 && OffersItem == null && this.parent != null && this.parent.data != null) && (this.parent != null && this.parent.data != null && this.parent.data.PromotionApplied == null)) {
					addPromoItems.append(this._createPadding(size) + discoText + "\n");
				}
				else {
					addLine(this._createPadding(size) + discoText);
				}
			} 
		}
	} else {
		/* handle promo indicator */   //Kalpesh - NVS-1579
		if( (toInt(this.data.quantityPromo) != 0) && (this.level == 0)) {
			line =API.setOnLeft(line, COLS-String(qty).length) + this.data.quantityPromo + "P";	          
		} 
		if (addGiftCert != null && addGiftCert != undefined && addGiftCert != "" && ((this.data.familyGroup == "8" && this.data.productType != "6") || this.data.familyGroup == "9" || this.data.familyGroup == "11")) {
			addGiftCert.append(line + "\n");
		}
		//NVS-5311 Tishin Thomas Order Sequence is incorrect on customer receipt for Extra Toy (Happy Premium W Food
		else if (addGiftCert != null && addGiftCert != undefined && addGiftCert != "" && this.parent != null && this.parent.data != null && ((this.parent.data.familyGroup == "8" && this.parent.data.productType != "6") || this.parent.data.familyGroup == "9" || this.parent.data.familyGroup == "11"))
		{
			//Gift buffer
			addGiftCert.append(line + "\n");
		}
		//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
		else if (addPromoItems != null && addPromoItems != undefined && addPromoItems != "" && (this.data.quantityPromo > 0 && OffersItem == null && this.data.isGrillLine == "false") && (this.parent != null && this.parent.data != null && this.parent.data.PromotionApplied == null)) {
			addPromoItems.append(line + "\n");
		//NVS-6353 & NVS-6375  17-JAN-2017 John Brancaleon - Only put these items on the PromoItems list if the parent does not have a promotion applied
		} else if (addPromoItems != null && addPromoItems != undefined && addPromoItems != "" && (this.data.quantityPromo > 0 && OffersItem == null && this.parent != null && this.parent.data != null) && this.parent.data.PromotionApplied == null) {
			addPromoItems.append(line + "\n");
		}
		else {
			addLine(line);
		}
	}
	
	prevItemCode = itemCode;
	/* mark items as being printed */ 
	this.printed = true;
	
	//Identify when promotion has been applied
	function getPromotionData()	{
		if (isOrderLevelPromotion == "true") {
			promotionOn = true;
		} else {
			if (prevItemCode == null || (prevItemCode != itemCode && level == 0)) {
				if (OffersItem != null && OffersItem.@offerId == "-1") {
					promotionOn = true;
				} else {
					promotionOn = false;
				}
			}	
		}
	}
	
	//Identify when offer has been applied
	function getOfferData()	{
		if (isOrderLevelOffer == "true") {
			offerOn = true;
		} else {
		if (prevItemCode == null || (prevItemCode != itemCode && level == 0)) {
			if (OffersItem != null && OffersItem.@offerId > "0") {
				offerOn = true;
			} else {
				offerOn = false;
				}
			}
		}
	}
	
	//Format price
	function doFormatPrice(body){
		price = (body.displayPrice == null) ? body.data.totalPrice : body.displayPrice;	
		
		//Calculate the price reduction after a promotion has been applied - NVS-3740
		if (OffersItem != null && OffersItem.@discountType != null && OffersItem.@discountType.toUpperCase() == "PRICE") {
			var totalPrice = Number(body.data.totalPrice);
			var discountAmount = Number(OffersItem.@discountAmount);
			var isUpcharge = body.data.isUpcharge;
			
			if (Number(totalPrice) > 0) {
				if (isUpcharge == "true" || isUpcharge == true){//NVS-8697
					var originalPrice = Number(OffersItem.@originalPrice);
					price = String(originalPrice - discountAmount);
				}
				else{
					price = String(totalPrice - discountAmount);
				}
			}
		}
		
		var priceNoComma = removeChar(String(price),",");
		
		price = API.formatNumber(Number(priceNoComma), NUMBER_FORMAT, 8);
		
		if ((level > 0) && (price == 0)) { 
			price = ""; 
		} 
		
		if ((price == 0) && (body.data.isGrillLine == "true") ) { 
			price = ""; 
		} 
	}
	
	/* NVS-4875 - msilva - Print Promotion item information */
	function doPrintPromotionLine(){		
		if(OffersItem == null){
			return false;
		}
		
		var promotionCounter = OffersItem.@promotionCounter;

		/*NVS-4379 - msilva*/
		if((promotionCounter != null) && promotionTitles != null && promotionTitles[promotionCounter] != ""){
			var promotionName = promotionTitles[promotionCounter];
			if (promotionName != null && promotionName != "" && promotionName != undefined) {
				promotionName = promotionName.substring(0,39);
			}
			//NVS-5880 09-NOV-2016 John Brancaleon Remove the Leading spaces from the promotion title to left justify it
			if (isOrderLevelOffer == "true") { // Item level promotions can be applied on top of Order level offers, in that case we need to indent 2 extra spaces
				addLine("  " + promotionName);
			} else {
				addLine(promotionName);
			}
			
			promotionTitles[promotionCounter] = "";
		}
		
		return true;
	}
	
	/* NVS-4875 - msilva - Print Offer item information */
	function doPrintOfferLine(){
		
		if(OffersItem == null)
		{
			return false;
		}
		
		var promotionCounter = OffersItem.@promotionCounter;

		//Offer discount
		var offersDiscount = OffersItem.@discountAmount;
		var offersDiscountNoComma = removeChar(String(offersDiscount),",");
		offersDiscount = API.formatNumber(Number(offersDiscountNoComma), NUMBER_FORMAT, 8);
		
		/*NVS-4379 - msilva*/
		if ( (promotionCounter != null) && promotionTitles != null && promotionTitles[Number(promotionCounter)] != "") {
			offersDiscount = "-" + offersDiscount;
			//Using fixed text Offer Applied, not using the Offer Name
			var offerTitle = promotionTitles[Number(promotionCounter)];
			
			if(offerTitle != null && offerTitle != undefined && offerTitle != "") {
			var pos = offerTitle.indexOf("\n");
			if (pos > -1) {
				offerTitle = offerTitle.substring(0, pos);
			}
			
			//NVS-5880 09-NOV-2016 John Brancaleon Remove the Leading spaces from the offer` title to left justify it
			line = offerTitle.substring(0, 39);
			addLine(line);
			promotionTitles[Number(promotionCounter)] = "";
			}
		}
				
		return true;
	}
	
	/** NVS-8847: Copied from BusinessComponentsLocal.nps for the unattended mobile order flow compatibility **/
	function hasBundleTag(productCode) { 
		var product = new XML(API.getProductdbProduct(productCode)); 

		if(product.Tags != undefined && product.Tags != null){ 
			for each (tag in product.Tags.Tag) 
			{ 
				if(tag == "BUNDLE") 
				{ 
				return true; 
				} 
			} 
		} 
		return false; 
	}
}



/* construct for order class accepts a view */
function OrderView (view) {
	this.lastItem =null;			/* remembers last item linked for quicker access */
	this.view = view; 	
	this.itemList = new Array();		/* items in the sale */
	this.settings = {};
	
	this.PC_PRODUCT	=2;
	this.PC_VALUE_MEAL 	=3;
	this.PC_CHOICE		=4;
	
	this.PA_RECIPE		=0;			/* Used in the sale view as the field prodAction that is part of the default recipe */
	this.PA_ADD		=1;			/* Used in the sale view as the field prodAction that is addesd to a recipe */
	this.PA_COMMENT	=2;			/* Used in the sale view as the field prodAction that is a comment */
	this.PA_CHOICE		=3;			/* Used in the sale view as the field prodAction that is a choice */
	

	/* get reciept configs */
	var config = new Config ("ValueMealDisplay", true);
	this.settings.showAsSinglePrice = config.getBoolParameter ("VMDisplay_ShowAsSinglePrice");
	this.settings.showUpCharge      = config.getBoolParameter ("VMDisplay_ShowUpCharge");
	this.settings.upchargeText      = config.getParameter     ("VMDisplay_UpChargeText");
	this.settings.showDiscount      = config.getBoolParameter ("VMDisplay_ShowDiscount");
	this.settings.discountText      = config.getParameter     ("VMDisplay_DiscountText");
	this.settings.inlineText        = config.getBoolParameter ("VMDisplay_InLineText");
	this.settings.suppressDiscount  = config.getBoolParameter ("VMDisplay_SuppressDiscount");
	this.settings.printPickList = false;      /* If printing a pick list prices and other info does not get printed. */
	
	this._buildOrder();				/* parse XML into item tree (private) */
} 

OrderView.prototype.SetPickList = function(value) {
	this.settings.printPickList = value;
}

/* attaches an item to its parent or base */
OrderView.prototype._linkItem = function(item) {
	/* parents */ 
	if (item.level == 0) { 
		this.itemList.push(item);
	
	/* children */ 
	} else if ((this.lastItem != null) && (item.level > this.lastItem.level) ) { 
		item.parent = this.lastItem;
		this.lastItem.children.push(item);
		
	/* uncles */ 
	} else if ((this.lastItem != null) && (item.level < this.lastItem.level)) {
		item.parent = this.lastItem.parent.parent;
		this.lastItem.parent.parent.children.push(item);

	/* siblings */
	} else if ((this.lastItem != null) && (item.level == this.lastItem.level)) { 
		item.parent = this.lastItem.parent;		
		this.lastItem.parent.children.push(item);
	} 

	/* make sure quanities are correct (core issue) */ 
	if (item.parent != null) { 	
		item.data.quantity 		= toInt(item.parent.data.quantity)*toInt(item.data.quantity);
		if (!item.data.isUpcharge) {  //NVS-8282 JP Adding the qty Promo to upcharge is causing the price to be 0			
			item.data.quantityPromo = toInt(item.parent.data.quantityPromo); 
		}
	} 	

	this.lastItem =item;
}


/* adds product to the item tree */
OrderView.prototype._addItem = function (item) {
	itemObj = new OrderItems(item, this.settings);
	this._linkItem(itemObj);
} 

/* builds the order structure based on the view */ 
OrderView.prototype._buildOrder = function () {

	/* link items together */
	count =this.view.ItemView.length();
	for(var i=0; i < count; i++) {
		this._addItem(this.view.ItemView[i]);
	}
}

OrderView.prototype.priceDifference = function (item) {

	/*NVS-6014 - msilva - Consider promoted products when checking up charge items*/
	var referencePriceTotal = parseFloat(item.referencePrice) * parseFloat((item.quantity - item.quantityPromo));
	var referencePriceTotalPromoted = parseFloat(item.referencePrice) * parseFloat(item.quantityPromo);
	
	var totalPrice = parseFloat(item.totalPrice);
	var diff;
	if (totalPrice > 0){
		if (item.BPTotalPrice != undefined && item.BPTotalPrice != null ){
			totalPrice = totalPrice + parseFloat(item.BPTotalPrice);
		}
	
		 diff = totalPrice - referencePriceTotal - referencePriceTotalPromoted;
		 if (item.isUpcharge == "true" || item.isUpcharge == true){
		 	//NVS-8697-1, when using above calculation, total is counted twice, change the logic for upcharge.
			 if (item.BPTotalPrice != undefined && item.BPTotalPrice != null ){
				diff = parseFloat(item.BPTotalPrice) - referencePriceTotal - referencePriceTotalPromoted;
			}
		 }
	 }
   	 return diff;
	 
}

/* sort products NVS-4513, NVS-4838 */	
function compareItems(a,b) {
	var aP = a.data.PromotionApplied;
	var aid = Number(a.data.displayOrder);
	var bP = b.data.PromotionApplied; 
	var bid = Number(b.data.displayOrder);
	
	//NVS-9233: Send non-products to the bottom
	if (typeof NON_FOOD_PRODUCT !== 'undefined'){
		if (a.data.familyGroup == NON_FOOD_PRODUCT) return (1);				// B first
		if (b.data.familyGroup == NON_FOOD_PRODUCT) return (-1);			// A first
	}
	
	if (aP == undefined && bP == undefined) {
		if (aid == bid) return (0); 									// same
		if (aid < bid)  return (-1);									// A first
		 /* aid > bid */return (1);										// B first
	}
		
	if (bP == undefined)							return (-1);		// A first
	if (aP == undefined)							return (1);			// B first
	
	// check and group by promotionCounter
	if (aP.@promotionCounter == bP.@promotionCounter) {
		if (aid == bid) return (0); 									// same
		if (aid < bid)  return (-1);									// A first
		 /* aid > bid */return (1);										// B first
	}
	if (aP.@promotionCounter  < bP.@promotionCounter)	return (-1);	// A first
	if (aP.@promotionCounter  > bP.@promotionCounter)	return (1);		// B first
	return (0);
}

/* format sale items in single price mode */
OrderView.prototype.FormatAsSinglePrice = function () {

	this.itemList.sort(compareItems);

	/* only value meals should display price */
	for(var i=0; i < this.itemList.length; i++) {
		item = this.itemList[i];
		
		// NVS-1493 : Consolidate offer items.
		if (item.printed) continue;
		
		// Remove the code to consolidate offers products - NVS-6714
		
		if (item.data.productType == this.PC_VALUE_MEAL) {		

			evmPrice =parseFloat(item.data.totalPrice);

			/* add the prices for all of it's children to the totalprice, to display the total EVM price */
			for(var j=0; j < item.children.length; j++) {
				child = item.children[j];
				var diff = this.priceDifference (child.data);
				diff = API.formatNumber (diff, NUMBER_FORMAT, 8);

				/* UPCHARGE: add only the reference product amount to the EVM total, leaving only the upcharge amount */
				if (diff > 0 && child.data.isUpcharge == "true") { 
					evmPrice += (parseFloat(child.data.referencePrice) * (parseFloat(child.data.quantity) - parseFloat(child.data.quantityPromo)) );					
					child.displayPrice = diff;
					child.data.isUpcharge = true;
					
				/* DISCOUNT: */
				} else if (diff < 0 )  {
					child.hasDiscount = true;
				
				/* NO UPCHARGE: just add the total price of the children */
				} else { 
					evmPrice += parseFloat(child.data.totalPrice);
					child.displayPrice = "";
				}

				/* sort children to keep grills up top */
				if (child.children != null) { 
					child.children.sort(compareItems);
				}
			}
			
			item.displayPrice = evmPrice;
		} else { 
			/* sort children to keep grills up top */
			if (item.children != null && item.children != "") { 
				item.children.sort(compareItems);
			}
		} 
	}

	return;
} 

/*Merge items for Pick List Receipt NVS-4610*/
OrderView.prototype.MergeItemsForPickList = function () {
	for(var i=0; i < this.itemList.length; i++) {
		item = this.itemList[i];
		if (item.printed) continue;
		for (var k = i+ 1; k < this.itemList.length; k++) {
			if (k != i && item.data.productCode == this.itemList[k].data.productCode && item._hasGrills() == false && this.itemList[k]._hasGrills() == false)  {
				this._mergeItems(item, this.itemList[k]); 
			}
		}
	}
	return;
}
/* returns the index of the item that matches the <code> */
OrderView.prototype._findItemByCode = function (code) {
	var loc = -1;
	
	for(var i=0; i < this.itemList.length; i++) {
		/* NVS-1661 -exclude qty=0 products from search */ 
		if (Number(this.itemList[i].data.productCode) == Number(code) && this.itemList[i].data.quantity > 0) { 
			return i;		
		} 
	} 
	
	return loc;
} 


/* merges two items together */ 
OrderView.prototype._mergeItems = function (i1,i2) {
	i1.data.quantity 		=Number(i1.data.quantity) + Number(i2.data.quantity);
	i1.data.quantityPromo 	=Number(i1.data.quantityPromo) + Number(i2.data.quantityPromo);	
	i1.data.totalPrice 		=parseFloat(i1.data.totalPrice) + parseFloat(i2.data.totalPrice);
	i1.data.netTotalPrice 	=parseFloat(i1.data.netTotalPrice) + parseFloat(i2.data.netTotalPrice);
	i1.data.ADTotalPrice 	=parseFloat(i1.data.ADTotalPrice) + parseFloat(i2.data.ADTotalPrice);
	i1.data.ADNetTotalPrice 	=parseFloat(i1.data.ADNetTotalPrice) + parseFloat(i2.data.ADNetTotalPrice);

	i2.printed = true;
	if (i1.children.length > 0){
	MergeSubItemsForPickList(i1,i2);
	}
} 
//NVS-6375 Tishin Thomas
function MergeSubItemsForPickList(objItem1,objItem2) {
	for(var i=0; i < objItem1.children.length; i++) {
		for (var k = 0; k < objItem2.children.length; k++) {
			if (objItem1.children[i].data.productCode == objItem2.children[k].data.productCode)  {
				_mergeSubItems(objItem1.children[i], objItem2.children[k]); 
			}
		}
	}
	return;
}
//NVS-6375 Tishin Thomas
function _mergeSubItems(i1,i2) {
	i1.data.quantity 		=Number(i1.data.quantity) + Number(i2.data.quantity);
	i1.data.quantityPromo 	=Number(i1.data.quantityPromo) + Number(i2.data.quantityPromo);	
	i1.data.totalPrice 		=parseFloat(i1.data.totalPrice) + parseFloat(i2.data.totalPrice);
	i1.data.netTotalPrice 	=parseFloat(i1.data.netTotalPrice) + parseFloat(i2.data.netTotalPrice);
	i1.data.ADTotalPrice 	=parseFloat(i1.data.ADTotalPrice) + parseFloat(i2.data.ADTotalPrice);
	i1.data.ADNetTotalPrice 	=parseFloat(i1.data.ADNetTotalPrice) + parseFloat(i2.data.ADNetTotalPrice);
	i2.printed = true;
}

/* format sale items in single price mode */
OrderView.prototype.FormatAsClassic = function () {
	var choiceList = new Array();

	/* iterate through and identify all choices */
	for(var i=0; i < this.itemList.length; i++) {
		innnerSearch(this.itemList[i]);
	}

	/* combine and add choices to the main list */
	for(var i=0; i < choiceList.length; i++) {
		choice = choiceList[i];
		
		/* found item, just add quantities */
		loc =this._findItemByCode(choice.data.productCode);
		if (loc >= 0) {
			this._mergeItems(this.itemList[loc], choice);
			
		/* didn't find item, so add it to the list */ 
		} else {
			this.itemList.push(choiceList[i]);
		} 
	} 
	
	/* sort usign display mode */ 
	this.itemList.sort(compareItems);


	/* due to a limit in the java interpreter, recursive methods can't see interval variables the 2nd time around, so an inner function is used */
	function innnerSearch (item) { 
		var isRecProd =false;
		var hasGrills =false;
		
		/* Recipe-Product -check of this has any grills, if not we don't print */
		if ( ((Number(item.data.prodAction) == 0) && (Number(item.data.productType) == 2)) && ( item.data.isGrillLine != "true") ) {
			isRecProd = true;
		}

		for(var i=0; i < item.children.length; i++) {
			
			if (item.children[i].data.isGrillLine == "true") { hasGrills = true; } 
		
			/* CHOICE -add to choice list */
			if ( (Number(item.children[i].data.prodAction) == 3) && (Number(item.children[i].data.productType) != 4) ) {
				item.children[i].data.level = 0;
				choiceList.push(item.children[i]);
				
			}

			/* check the children */
			if (item.children.length > 0) { 
				innnerSearch(item.children[i]);
			} 
		}
		
		/* check if we should show the rec-prod */
		if (isRecProd && !hasGrills && item.level > 0) { item.printed = true; } 
	}
} 


/* prints Items */
OrderView.prototype.PrintSaleItems = function () {
	if (this.settings.printPickList == false) {
		/* decide the format */ 
		if (this.settings.showAsSinglePrice) { 
			this.FormatAsSinglePrice();
		} else {
			this.FormatAsClassic();
		} 
	} else {
		//Merge non grilled items
		this.MergeItemsForPickList();
	}
	
	for(var i=0; i < this.itemList.length; i++) {	
		if (!(this.settings.printPickList == true && this.itemList[i].data.isCYT == true)) {
			//NVS-5381 John Brancaleon 05-OCT-2016 - Don't print the donation line
			//NVS-5811 31-OCT-2016 John Brancaleon - Find the RMHC product code in the Store-db
			//NVS-5839 4-NOV-2016 John Brancaleon - Call the API method to get the RMHC donation product code from the Store-DB
			var rmhcProdCode 	= API.findParamInSectionConfig("RMHC.donationProductCode", "CSO.UserInterface");
			//NVS-5602 John Brancaleon 23-OCT-2016 - Corrected the If condition to use the Family Group instead of the Product Type.  RMHC & Giftcards both have Product Type = 8.  Gift cards have Family Group = 9, RMHC has family group = 8.
			//NVS-5811 31-OCT-2016 John Brancaleon - Compare against the RMHC product code from the Store-db
			if(Number(this.itemList[i].data.productCode) != Number(rmhcProdCode)) {
				this.itemList[i].print();
				innnerPrint(this.itemList[i]);
			} else {
				//NVS-5381 John Brancaleon 05-OCT-2016 - Make the line for RMHC with the amount donated
				var price = this.itemList[i].data.totalPrice;
				var priceNoComma = removeChar(String(price),",");
				price = API.formatNumber(Number(priceNoComma), NUMBER_FORMAT, 8);				
				var line = this.itemList[i].data.longName;
				//NVS-5596 Tishin Thomas 22-OCT-2016 - "Sales receipt changes" are not implemented in order receipts for offers, RMHC in SP8
				line = API.setOnLeft("RMHC Donation", COLS-String(price).length) + price;
				//NVS-5553 31-OCT-2016 John Brancaleon - Don't include the RMHC donation if the price is $0.00
				if (Number(priceNoComma) > 0)
					addRMHC.append(line + "\n");  
			}
		}
	}

	/* due to a limit in the java interpreter, recursive methods can't see interval variables the 2nd time around, so an inner function is used */
	function innnerPrint (item) { 
		for(var i=0; i < item.children.length; i++) {
			item.children[i].print();
			if (item.children.length > 0) { 
				innnerPrint(item.children[i]);
			} 
		}
	} 
} 


/* test method -prints nested Item list */
OrderView.prototype._DebugPrint = function () {

	for(var i=0; i < this.itemList.length; i++) {
		this.itemList[i].print();
		innnerPrint(this.itemList[i]);
	}

	function innnerPrint (item) { 
		for(var i=0; i < item.children.length; i++) {
			item.children[i].print();
			if (item.children.length > 0) { 
				innnerPrint(item.children[i]);
			} 
		}
	} 
} 



function receipt_v2 (config, data) { 
	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
	}

	view = rootConfig.CustomData[0].View;	
	addLine("Test Receipt");
	addLine("");
	addLine("");
	addLine("");
	
	
	/* create orderView object used to manger the receipt properties */	
	recieptView = new OrderView(view);

	
	/* print header info */ 
	

	/* Print sale items */ 
	recieptView.PrintSaleItems();	
	
	
	/* print tax info */ 
	
	
	/* print cashless info */ 
	
	
	/* print footer info */ 
	
	
	return getResponse();
} 


function isOfferOrderLevel(view) {
	var hasPromotions = 0;
	var theOfferId;
	if (view.Promotions != null) {
        hasPromotions = view.Promotions.Promotion.length();
		for (var i = 0; i < hasPromotions; i++) {	
			if (view.Promotions.Promotion[i].@offerId > "0") {
				if (view.Promotions.Promotion[i].@isSaleDiscount == "1") {
					isOrderLevelOffer = "true";
					theOfferId = view.Promotions.Promotion[i].@offerId;
					olOfferTitle = view.Promotions.Promotion[i].@promotionName;
				}
			}
		}

		/* There are ocassions where isSaleDiscount = "1" but it's not an order level offer, so we need to see
		if any line contains the offer, so it uses the title from the item view */
	
		for each (var item in view.ItemView) {
			if (item.PromotionApplied.@promotionId == theOfferId) {
				isOrderLevelOffer = "false";
			}
		}	
	}
}

//NVS-6353 05-JAN-2017 John Brancaleon - Determine if the product is a CCM or not.  
function isCCM(productCode) {
	var product = new XML(API.getProductdbProduct(productCode));

	//Check if the product is a CCM auto bundling 
	var isCCM = false;
	if(product.Tags != undefined && product.Tags != null){ 
		for each (tag in product.Tags.Tag)
		{
			if(tag == "CUSTOMER_CHOICE_MEAL")
			{
				isCCM = true;
			}
		}
	}
	return isCCM;
}
//NVS-6353 & NVS-6375 18-JAN-2017 John Brancaleon - check if the view has CCM's in it.
function hasCCM(view) {
	var found = false;
	for each (var item in view.ItemView) {
		if(isCCM(item.productCode)) {
			found = true;
			break;
		}
	}
	return found;
}
/**
 * PUBLIC
 * Implements the customer receipt
 * Needed data types: VIEW
 * @author Rodrigo Rosauro
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function receipt(config, data)
{
    var localconfig = new Config ("ValueMealDisplay", true);
    var showAsSinglePrice = localconfig.getBoolParameter ("VMDisplay_ShowAsSinglePrice");
	var LIGHT  = 1;
	var ONLY   = 2;
	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
	} else {
		// Part of feature PLE-194 : Auto condiment - By KFG
		lConsolidateACItems("receipt");
	}

	// Order information
	var view		= rootView.View;
	var customInfo	= view.CustomInfo;
	
	var cashlessStr = view.Cashless;

	var customData = rootConfig.CustomData;
	var isFirstPass = DetermineIfFirstPass(customData);

	//NVS-6353 & NVS-6375 18-JAN-2017 John Brancaleon - if CCM's are part of the ViewItems, don't run this routine.  The consolidation doesn't work with CCMs.	
	if(!hasCCM(view)) {
		view = removeContainerFromView(view);
	}
	var newView	= view.copy();

	//NVS-6353 & NVS-6375 18-JAN-2017 John Brancaleon - if CCM's are part of the ViewItems, don't run these routines.  
 	if(!hasCCM(view)) {   
		view = checkPlainForReceipt(view);
		view = checkForceCompForReceipt(view);
		view = checkSmartGrillForReceipt(view);
		view = checkShowChosenItemAsIngredientForReceipt(view);
	}
	var isMobileReceipt = checkIsMobileOrder(view);

	//NPM-3585 END

	var isRefund		= view.@transactionKind == TRANS_KIND_REFUND;
	var isTab			= view.@transactionKind == TRANS_KIND_TAB;
	var isSale			= view.@trxSubKind == TRANS_KIND_SALE;
	var isWave			= view.@trxSubKind == TRANS_KIND_WAVE;
	var isAdjustment	= view.@trxSubKind == TRANS_KIND_WAVE_ADJUSTMENT;
	var isBillableSale = ((view.ItemTenderView.(code == TENDER_KIND_BILLABLEREFUND)).length() != 0);

	var isUberEats = false;
	//Workaround for Kiosk Receipts
	try {
		isUberEats = isUberEatsOrder(true);
	} catch (e) {
	}

	var isChangeRound = ((view.ItemTenderView.(code == TENDER_KIND_CHANGE)).length() == 0);
	//API.dbg("isChangeRound " + isChangeRound);		//removed due to NVS-1671
    var isWaste		= view.@transactionKind == TRANS_KIND_WASTE;
    var isOverring	= ((Number(view.@saleStatus) == SALE_STATUS_LAST_SALE_VOIDED) || (Number(view.@saleStatus) == SALE_STATUS_CURRENT_SALE_VOIDED));
	var isInProgress= (Number(view.@saleStatus) == SALE_STATUS_CURRENT_SALE_VOIDED);
	var isFromKiosk = (Number(view.@pod) == PODCSO) || isRcpKiosk;
	
	if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){ //Kalpesh-NVS-3928
		isRcpHHOT = true;  //Tender POS is different from order originating POS. So, keep tender POS id for order number 
	}

	//NVS-4243
	var useRecallerId = isFromKiosk || isRcpHHOT || isMobileReceipt;
	
	//NVS-5924 Kiosk is not in scope of Smart Grill
	if (!isRcpKiosk){	
		newView = checkSmartGrill(view);
	}

	
	//NVS-4765 - msilva - Disregard Crew/Manager Meal on Total Savings
	//Start
	var crewMealAmount = 0;		
	var managerMealAmount = 0;
	
	var tenders=view.ItemTenderView;
	if(tenders != undefined && tenders != null && tenders.length() != 0){
		for (var i = 0; i < tenders.length(); i ++) {
			/* Crew/Employee Meal */
			if(tenders[i].kind == TENDER_KIND_CREW_MEAL){
				crewMealAmount = crewMealAmount + Number(tenders[i].value);						
			}
			/* Manager Meal */
			if(tenders[i].kind == TENDER_KIND_MANAGER_MEAL){
				managerMealAmount = managerMealAmount + Number(tenders[i].value);					
			}				
		}
	}
	
	API.dbg("Receipt: Crew Meal = " + crewMealAmount);
	API.dbg("Receipt: Manager Meal = " + managerMealAmount);
	//End

	//SDO-7628
	//var isMobile	= view.@MobileOrderStatus != 0; /* MOS_NONE */
	var isMobile	= (Number(view.@MobileOrderStatus) != 0); /* MOS_NONE */
	var isPromo = 0;
	var totalDiscount;
    setWhereToShowDiscountOnItem(view);	
	var GCUsed = false;
	for each (i in view.ItemView.quantityPromo) {
		isPromo+=Number(i);
    }

    var offerCustomerName = "";
	var offerId = "0";
    if ( (view.Offers != null) && (view.Offers[0] != null) && (view.Customer[0] != null))
    {
		//NVS-7990 - msilva
		offerCustomerName = validateDecryptNickName(view.@customerNickname);
		offerId = view.Offers[0].@offerId;
    }

    // NPS-11867 Start	
    var hasPromotions = 0;
	var promotionTitle;
	var otherDiscounts = 0;
	var promotionName;
	var pos;
	isOrderLevelPromotion = "false";
	isOrderLevelOffer = "false";
    if (view.Promotions != null) {
        hasPromotions = view.Promotions.Promotion.length();
		
		promotionTitles = new Array();	// NVS-3327 collect promotions titles	
		for (var i = 0; i < hasPromotions; i++) {
			promotionName = view.Promotions.Promotion[i].@promotionName;
			//NVS-6269 Tishin Thomas Made this change to remove special character é from McCafe Promotion and Offer.
			if(promotionName != "" && promotionName != undefined && (promotionName.indexOf("McCaf") > -1)) {
				var blankPos = promotionName.indexOf("\n");
				if (blankPos > -1) {
					promotionName = promotionName.substring(0, blankPos);
				}
				var arr=promotionName.split(" ");
				var loop=0;
				var x = "";
				for each (x in arr) {
					if(x.indexOf("McCaf") > -1) {
						arr[loop]="McCafe";
					}
					
					loop=loop+1;
				}
				
				promotionName=arr.join(" ");
			}
			if(promotionName != "" && promotionName != undefined){
			promotionName = removeSpecialCharacters(promotionName);
			}
			promotionTitles[view.Promotions.Promotion[i].@counter] = promotionName;
			isOfferOrderLevel(view);
			
			if (view.Promotions.Promotion[i].@discountAmount != "undefined" && view.Promotions.Promotion[i].@discountAmount != null) {				
				otherDiscounts += Number(view.Promotions.Promotion[i].@discountAmount);
			}
		}
		
		//Order Level Promotions in SP7 are exclusive, so it will only be one. JP - NVS-3740
		if (hasPromotions.toString() == "1") {
			if (view.Promotions.Promotion[0].@exclusive == "1") {
				isOrderLevelPromotion = "true";
				promotionTitle = view.Promotions.Promotion[0].@promotionName;
			}
		}

		newView = sortPromotionsOnReceipt(newView);
    }
    // NPS-11867 End

	/* Added following for NPS-5064.  RPS 11-19-2008 */
	if (view.@vmChildrenMultiplied == "true") {
		// KVS view comes with quantities already multiplied
		divideItemQuantities(view);
	}
	/* end of NPS-5064 */

	var custom 		= rootConfig.CustomData[0];
	var errKiosk 	= 0;
	var prnKiosk 	= 0;
	var printDPHeader 	= false;
	//NVS-7990 - msilva
	var nickName = validateDecryptNickName(view.@customerNickname);

	/* NVS-457  */
	var redeemCount 	= view.ItemView.(familyGroup == 9).length();
	var notredeemCount 	= view.ItemView.(familyGroup != 9).length();
	if ((redeemCount > 0) && (notredeemCount == 0)) {
		printDPHeader = false;
	} else {
		printDPHeader = true;
	}

	/* addLine(SEP_UL); */
	var printOrderNumber = "true";  //NVS-5974 JP
	//NVS-6045 01-DEC-2016 John Brancaleon - Check the view.@pod  = 1 for Drive-thru
	//NVS-6121 08-DEC-2016 John Brancaleon - Print the Large Order ID, if the DTDualPoint parameter is true
	//NVS-6563 11-JAN-2017 John Brancaleon - Check for the dtLargeOrderNumber 
	if(Number(view.@pod) == 1 && dtLargeOrderNumber == "false") {  //If it's DT and DTDualPoint is false then don't show the OrderNumber
		printOrderNumber = "false";
	}

	/* NVS-327  Dual-point header SWU-218 */
	//if((view.@pod == 0 || isFromKiosk) && !(isRefund || isOverring) && printDPHeader){  //pod 0 == FC
	if((view.@pod == 0 || view.@pod == 1 || view.@pod == 2 || view.@pod == 4 || isFromKiosk) && !(isRefund || isOverring) && printDPHeader){ //pod 0 == FC, 1 == DT, 2 == WT
		if(PosCheckParameter_ex("Report","DualPoint","true") == true){
			addLine();
			//NVS-559  RPS 10-7-2011
			//NVS-3607
			//NVS-3441
			//NVS-3748
			var trimPOS = Number(largeOrderNumberFormat) == 1 ? true : false;
			
			var orderNum = fnMountOrderIdEx("",String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),trimPOS,useRecallerId,true);
			
			if (printOrderNumber == "true") {  //NVS-5974 JP
				outputBuffer.append("<@BigCharOn>");
				if (isFromKiosk) {
					//NVS-3607
					addLine(API.center(rtrim(orderNum), 6));	// NVS-2766 Kiosk has only 6 char @BigChar - so add rtrim to strip blanks for this printer
				}
				else{				
					//NVS-3607
					addLine(rtrim(API.center(orderNum, 8)));	// NVS-2766 Kiosk has only 6 char @BigChar - so add rtrim to strip blanks for this printer
				}
				outputBuffer.append("<@BigCharOff>");
				addLine();
			}
			// WWR-2510: Create extra table service slip for kiosk
			var printSlip = API.findParamInSectionConfig("tableService.printSlip","CSO.UserInterface");
			if (isFromKiosk && printSlip != null && printSlip == "true") {
				addSize2Line(API.getLocalMsg("MSG_REPORT_TABLE_SERVICE"));
				/* addLine(SEP_UL); */
				addLine(); addLine(); addLine(); addLine(); addLine(); addLine();
				cutPaper();

				/* addLine(SEP_UL); */
				addLine();
				outputBuffer.append("<@BigCharOn>");				
				addLine(API.center(rtrim(orderId), 6));	// NVS-2766 Kiosk has only 6 char @BigChar - so add rtrim to strip blanks for this printer//NVS-3119
				outputBuffer.append("<@BigCharOff>");
				addLine();
			}
		}
	} else {
		//NVS-5968 JP
		if(isRefund && PosCheckSessionProperty("SecondCopyOfReceipt", "true") == true) {
			addLine();
			addLine();
			addLine();
		}
	}

	// Print any inverse-bold banner
	if(isOverring || isPromo || isBillableSale || isUberEats) {
		//  NVS-453 v
		if(isBillableSale == !true) {
			addLine();
		}
		//NVS-4405 - msilva
		// Lindomar Araujo Filho - NVS-4670 - July/12/2016 - Backing the black background color(inverted) as requested in the NVS-4670
		startInvertedColor();
			startBoldSize2();
				if (isOverring) {
					addLine(" **** OVERRING **** ");
				}
				if (isPromo) {
					addLine("  **** PROMO **** ");
				}

				if(isBillableSale){
					//NVS-7106 - UberEats receipt
					if(isUberEats){
						addLine(" ** UberEATS SALE ** ");
					}else{
						addLine(" ** BILLABLE SALE ** ");
					}
				}else if(isUberEats){
					addLine(" ** UberEATS SALE ** ");
				}

			endBoldSize2();
		// Lindomar Araujo Filho - NVS-4670 - July/12/2016 - Backing the black background color(inverted) as requested in the NVS-4670
		endInvertedColor();
		addLine();
	}

	// Save the customer name for Mobile offers
	var customerID = "";
	var override = "";
	if ((view.Offers != null) && (view.Offers[0] != null)) {
		customerID = view.Offers[0].@customerId;
		override = view.Offers[0].@override;       /* NVS-1305 */
	}
		
    startBold(); 
	{
		// Adds the default receipt header from store-db
		//NVS-8015 Tishin Thomas
		if (offerCustomerName != undefined && offerCustomerName != null && offerCustomerName != "")
		{
			addDefaultHeader();
			addLine(center("!!! THANK YOU " + offerCustomerName.substring(0, 21) + "!!!"));
		}
		else
		{
			addDefaultHeader();
		}
		addLine(center("TEL# " + rootConfig.StorePhoneNumber));
		
		// NPS-11867 Start
		if(hasPromotions != 0)
		{
			var first = true;
			
			for (var i = 0; i < hasPromotions; i++) {
				if((view.Promotions.Promotion[i].@offerId == null) || (view.Promotions.Promotion[i].@offerId.length() <= 0))
				{
					if(first) {
						addLine();
						first = false;
					}
					var promotionLine	= "    " + API.geti18nMsg(1, "MSG_BC_ORDER_PROMOTION_APPLIED",[]);
					var promotionId 	= view.Promotions.Promotion[i].@id;
					promotionLine 		= API.setOnLeft(promotionLine, COLS-promotionId.length) + promotionId;
					addLine(promotionLine);
				}	
			}

			if(!first) {
				addLine();
			}	
		}
		
	} endBold();

	if((isFromKiosk) && (custom != null)) {
		var fields = String(custom).split(":");
		if(fields.length>=1) {
			errKiosk = fields[0];
			if(fields.length>=2) {
				prnKiosk = fields[1];
				if(prnKiosk==1) {
					addLine(center((isFromKiosk)?"kiosk duplicate":"duplicate"));
				}
			}
		}
	}

	addLine();
	if(isRefund) {
		if(isBillableSale) {
			var billableSaleRefund = view.ItemTenderView;
			startInvertedColor();
				startBold();
				addLine(center("**** BILLABLE SALE ADJUSTMENT ****"));
				endBold();
			addLine();
			endInvertedColor();
			startBold();
			addLine(center("*NOTICE * NOTICE * NOTICE * NOTICE*"));
			addLine(center("This billable sale adjustment is for"));
			addLine(center("accounting purposes only"));
			addLine(center("DO NOT GIVE CASH!"));
			addLine();
			addLine("Orig. Billable Sale order "+ view.@LSOrderId + "  $"+ API.formatNumber(view.@LSTotAmount, "##0.00", 6));
			endBold();
		} else {
			startInvertedColor();
				startBoldSize2();
				addLine("  **** REFUND **** ");
				endBoldSize2();
			endInvertedColor();
			addLine();
		}
	} else {
		var isTaxExempt = (Number(view.@taxMode)==2);
		var szHeader="";
		startBold();
		if(isWaste) {
			szHeader ="**** WASTE ****";
			addLine(center(szHeader));
		}
		if(isTaxExempt) {
			szHeader ="**** TAX EXEMPT SALE ****";
			addLine(center(szHeader));
		}
		endBold();
	}
	//Tishin Thomas 10/21/2016 NVS-5555  "Sales receipt changes" feature not implemented in SP8 order receipts
	//addLine();
	
	var TableTagId = String(view.@tableTagId); 		//FrankZ - NVS 2940
	// NVS-5461 John Brancaleon 11-OCT-2016 - Allow -1 as tag ID if customer choses not to have table service, and don't show it on the receipt if it is -1 
	if (TableTagId != "" && Number(TableTagId) > 0) {  
            startBoldSize2();
	    // NVS-7581 Mobile Ordering Table Service Tishin
           if(view.@MobileOrderStatus == "1"){
			addLine("     TABLE #" + TableTagId);
		}
		else {
		addLine("     LOCATOR #" + TableTagId);
		}
            endBoldSize2();
	    addLine("");
	}  	

	//NVS-559 RPS 10-7-2011
	// NVS-6530 Tishin Thomas Mobile Ordering : While placing an order on  DT incorrect key station number is displayed on physical receipt for mobile orders paid using Pay by Mobile.(Working fine for normal orders) 
	if (useRecallerId)
	{
		var posId = "KS# " + toInt(view.@tenderPOS.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	}
	else{
		var posId = "KS# " + toInt(view.@orderKey.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	}


	//var date = API.formatDateTime(rcpDate.toString(), RECEIPT_DATE_FORMAT);
	var date = formatDateTimeAMPMFromView(view);
	addLine(posId + API.setOnRight(date, COLS-posId.length));
	//Tishin Thomas 10/21/2016 NVS-5555  "Sales receipt changes" feature not implemented in SP8 order receipts
	//addLine();
	var mfySide = "";
	//NVS-3507
	var strSide = String(view.@productionSide);
	if(strSide.length != 0) {
		if(isRefund) {
			mfySide = "";
		}else {
			//NVS-5923 14-NOV-2016 John Brancaleon - Remove MFY from before the Side string.
			//NVS-5923 17-NOV-2016 Tishin Thomas - Modified this code for catching that "If" statement
			if(strSide.substring(0,4) == "Side") {
				mfySide = strSide.toString().split(" ")[0] ;
			} else {
				mfySide = strSide.toString().split(" ")[1] ;
			}
		}
	} 
	//NVS-3607
	//NVS-3441
	var orderNum = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,useRecallerId,false);		
	var kvsOrder = "Order " + orderNum;

	if(isWaste) {
		kvsOrder = "";
	}

	/*NVS-4166 - Added condition not to display order number when not sent to the production (-1/-1)
	Targets Kiosk sendOrder="OnPaid" reversal payment receipt.*/
	if(orderNum.indexOf("-1") > -1){
		kvsOrder = "";
	}	

	var saleTypes	= Array("Eat-In", "Take-Out", "Other");
	var saleType	= toInt(view.@type);
	if(isFromKiosk) {
		var totalDue = Number(view.@totalDue);
			//NVS-5923 14-NOV-2016 John Brancaleon Order number is Right Justified
			//NVS-5923 17-NOV-2016 Tishin Thomas Eat-In Take-Out need to be removed.
			line = mfySide;		//NVS-6708 - Kalpesh		
			addLine(line + API.setOnRight(kvsOrder, COLS-line.length));

		addLine(SEP_UL);
		addLine(" ");
		startBoldSize2();
		var bPaid=false;
		// Checks if should print paid (total due == 0 and no change)
		if(totalDue<=0) {
		    //KP: Issue: 2972 totalDue is zero decides it is paid or not no matter with cash or cashless
			bPaid=true;
			var changeDue=view.ItemTenderView.(kind == TENDER_KIND_CHANGE);
			if((changeDue.length() == 0) || (Number(changeDue[0].value) == 0)) {
				// No change, may not show PAID for some cashleess situations
				if((view.Cashless.length() == 0) || ((view.Cashless.split("@"))[5] == "0")){
					bPaid=true;
				}
			}
		}
		if(bPaid) {
			// Big  line
			addLine("        PAID");			
		}
		else {
			addLine(" ");
		}
		endBoldSize2();

		addLine(SEP_UL);
	}
	else {
		if ((mfySide!="") || (kvsOrder!="")) {
			//Tishin Thomas 10/21/2016 NVS-5555  "Sales receipt changes" feature not implemented in SP8 order receipts
			line = mfySide;		//NVS-6708 - Kalpesh		
			addLine(line + API.setOnRight(kvsOrder,COLS-(mfySide.length)));
			addLine();
		}
	}
	/* var line = "QTY ITEM";
	line = line + API.setOnRight("TOTAL", COLS-line.length);
	addLine(line); */
	
	addGiftCert = new StringBuffer();  //NVS-4031
	addPromoItems = new StringBuffer(); //NVS-4575
	addRMHC = new StringBuffer();  //NVS-5381 John Brancaleon 05-OCT-2016
	
	//Add title of Order level Promotions for SP7 - JP
	if (isOrderLevelPromotion == "true") {
		if (promotionTitle != null && promotionTitle != undefined ) {			
			promotionTitle = promotionTitle.substring(0,39);
			addLine(promotionTitle);
		}
	}
	if (isOrderLevelOffer == "true") {
		if (olOfferTitle != null && olOfferTitle != undefined) {
			var pos = olOfferTitle.indexOf("\n");
			if (pos > -1) {
				olOfferTitle = olOfferTitle.substring(0, pos);
			}
			
			//NVS-6269 Tishin Thomas Made this change to remove special character é from McCafe Promotion and Offer.			
			if (olOfferTitle != "" && olOfferTitle != undefined && (olOfferTitle.indexOf("McCaf") > -1)) {
				var arr = olOfferTitle.split(" ");
				var loop = 0;
				for each (i in arr) {
					if (i.indexOf("McCaf") > -1) {
						arr[loop] = "McCafe";
					}
				
					loop = loop + 1;
				}
			
				olOfferTitle = arr.join(" ");
			}
			
			if(olOfferTitle != "" && olOfferTitle != undefined ){
				olOfferTitle = removeSpecialCharacters(olOfferTitle);
			}
			
			line = olOfferTitle.substring(0, 39);
			addLine(line);
		}		
	}

	itemCode = null;
	prevItemCode = null;
	promotionOn = false;
	sale = new Sale();
	sale.setPromotionsData(view);
	/* create orderView object used to manger the receipt properties */	
	recieptView = new OrderView(newView);
	
	/** Print Sale Items to receipt **/
	recieptView.PrintSaleItems();
	
	//Add Promoted items at the end of the list
	if (addPromoItems !== null && addPromoItems !== undefined && addPromoItems !== "") {
		outputBuffer.append(addPromoItems);
	}
	
	//Add Gift certificates at the bottom
	if (addGiftCert !== null && addGiftCert !== undefined && addGiftCert !== "") {
		outputBuffer.append(addGiftCert);
	}

	addLine();

	var isCrewManagerMeal = false;
	/* print special tenders */
	PrintSpecialTenders();

	/* display subtotals */
	var totalAmt		=Number(view.@grossAmount);
    	var taxAmt		= Number(view.@totalTax);
	var subTotalAmt		=Number(view.@totalAmount);

	bdSubTotal 			=subTotalAmt;
	extendedFeeAmt		=getExtendedSalesAmount("Fee");
	extendedDepositAmt	=getExtendedSalesAmount("Deposit");
	//NVS-5520 31-OCT-2016 John Brancaleon - Remove the RMHC Donation amount from the subtotal
	rmhcDonationAmt     =getRMHCDonationAmount();
	bdSubTotal			=bdSubTotal - extendedFeeAmt;
	bdSubTotal			=bdSubTotal - extendedDepositAmt;
	//NVS-5520 31-OCT-2016 John Brancaleon - Remove the RMHC Donation amount from the subtotal
	bdSubTotal          =bdSubTotal - rmhcDonationAmt;

	addDetailLine("Subtotal",	bdSubTotal);

	/* NVS-971 -print taxable fees and deposits */
	PrintExtendedSalesInfo("Fee", extendedFeeAmt);
	PrintExtendedSalesInfo("Deposit", extendedDepositAmt);

	/* print subtotal if fees or deposits are included */
	if ( (extendedFeeAmt > 0) || (extendedDepositAmt > 0) ) {
		addLine();
        // NPS-8922 - Start
        if(view.Fee.length() > 0){
            var subTotalAmtBDecimal = new BigDecimal(subTotalAmt);
            for each (var itemFee in view.Fee) {
                subTotalAmtBDecimal = subTotalAmtBDecimal.subtract(new BigDecimal(eval(itemFee.@value)));
            }
            addDetailLine("Subtotal",	Number(subTotalAmtBDecimal));
            if(!isWave) {
                addDetailLine("Tax",		taxAmt);
            }
            for each (var itemFee in view.Fee) {
                addDetailLine(itemFee.@description,		itemFee.@value);			
            }
        } else {
			addDetailLine("Subtotal",	subTotalAmt);            
			if( API.findParamInSectionWide( "alternativeLanguage","Localization") != null) {
				addDetailLine(  API.geti18nMsg( 2, "MSG_SL_SUBTOTAL",[]  ),	subTotalAmt);
			} 			
		
			if(!isWave) { // NPS-7605 - FR 15
				addDetailLine("Tax",		taxAmt);
			}
        }
	
        // NPS-8922 - End	
		addDetailLine("Subtotal",	subTotalAmt);
	}
	PrintTaxInformation(subTotalAmt);
	//NVS-5848 11-NOV-2016 John Brancaleon - Move the RMHC donation line before the Total or Total Refund line
	//NVS-5381 John Brancaleon 05-OCT-2016  - Print the RMHC line just before the Total line.  
	if(addRMHC !== null) {
		outputBuffer.append(addRMHC);
	} 
	/* addLine(); */
	if(isRefund) {
		if(isBillableSale)
			addDetailLine("Billable Sale Adjustment",	totalAmt);
		else
			addDetailLine("Total Refund",	totalAmt);
		addLine();
		if(isBillableSale) {
			startBold(); {
				addLine(center("DO NOT GIVE CASH!"));
			} endBold();
		}
	}
	else {
		addDetailLine(saleTypes[saleType]+" Total",	totalAmt);
		addLine();
    }
    if((errKiosk!=2) && (!(isRefund && isBillableSale))) {
		// Adds all tenders
		if (isChangeRound) {
			var tenderItems = view.ItemTenderView.(kind == TENDER_KIND_CHANGE);
			var changeRounding = 0
			for each (var tender in tenderItems) {
				changeRounding -= tender.rounding;
				//API.dbg("changeRounding = " + changeRounding);
				break;
			}
			if (Number(changeRounding) != 0) {
					addDetailLine("Rounding", Number(changeRounding), true);
			}
		}
		// Adds all tenders
		var hasChange	= false;
		var hasRvCashoutInProgress = false;
		var hasCash		= false;
		if(!isRefund) {
			var tenderItems = (isInProgress) ? view.ItemTenderView.(kind == "9") : view.ItemTenderView.(kind != "9");
			
			//NVS-7106 - UberEats receipt
			if (isUberEats){
				tenderItems.description="UberEats Sales";
			}

			for each (var tender in tenderItems){
				addTenderLine(tender);		
			}
		}
		//NVS-4638 - Ability to Display Customer Savings on the Receipt
		if(!hasChange) { // If we don't have any change add the default 0.00
			if(!isWave){
				if(!hasRvCashoutInProgress){
			addDetailLine("Change", 0);
				}else{
					addDetailLine("Change", amountRvCashoutInProgress);
				}
			}
		}
	
		//NVS-4761
		var discountAmount = Number(view.@BPTotalAmount) - Number(view.@totalAmount);
		
		//NVS-4765 - msilva - Disregard Crew/Manager Meal on Total Savings
		discountAmount = discountAmount - crewMealAmount - managerMealAmount;
		
		if (Math.round(discountAmount * 100) > 0) {		// NVS-4092 Number and string formats can be touchy!
			//addLine(); //NVS-5602 25-JAN-2017 John Brancaleon - remove extra blank line
			var PrintText = API.geti18nMsg(1, "MSG_BC_OFFERS_APPLIED_TOTAL",[]);
			discountAmount = API.formatNumber(Number(discountAmount), NUMBER_FORMAT, 8);
			PrintText = API.setOnLeft(PrintText, COLS - discountAmount.length) + discountAmount;
			/* addLine(PrintText); */ //NVS-4638 - Ability to Display Customer Savings on the Receipt
		}
	}
	//NVS-5981 - The Customer receipt should not display the Savings in Refund operations but it is appearing.
	if(!isRefund){
		addSavingInfo(); //NVS-4638 - Ability to Display Customer Savings on the Receipt
	}
	if(isFromKiosk) {
		var totalDue = Number(view.@totalDue);
		//Balance due should not be printed for kiosk overring receipt so Balance due is removed for NVS-2986 by KP
		//addLine(); //NVS-6766 03-FEB-2017 John Brancaleon - Remove this extra line to prevent 2 blank lines
		if(errKiosk==2) {			
			startBold(); {
				addLine();
				addLine();
				addLine("          SORRY YOU WERE          ");
				addLine("          HAVING TROUBLE          ");
				addLine();
				addLine();
				addLine("        Please present this       ");
				addLine("         credit receipt at        ");
				addLine("        the pickup counter        ");
				addLine();
			} endBold();

			startBoldSize2(); { // Big  line
				var credBalance = Number(totalAmt-totalDue);
				addLine("CREDIT BALANCE" + API.formatNumber(credBalance, "#0.00", 6));
			} endBoldSize2();
		}		
		if(prnKiosk==1) {
			addLine(center((isFromKiosk)?"kiosk duplicate":"duplicate"));
		}
	}
	//Tishin Thomas 10/21/2016 NVS-5555  "Sales receipt changes" feature not implemented in SP8 order receipts
	//addLine();
	if(isOverring) {
		//NVS-3607
		//NVS-3441
		var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),false, useRecallerId,false);
		startBold();
		try {
			var ctx=new SessionContext;
		} catch (e) {
			return;
		}

		/*NVS-4166 - Added condition not to display order number when not sent to the production (-1/-1)
		Targets Kiosk sendOrder="OnPaid" reversal payment receipt.*/
		if(majorMinor.indexOf("-1") > -1){
			//addLine(); //NVS-6766		//addLine(); //NVS-6766 03-FEB-2017 John Brancaleon - Remove this extra line to prevent 2 blank lines
			addLine(center("**** Sale VOIDED ****"));
		}else{
			addLine(center("**** Last Sale # " + majorMinor + " VOIDED****"));
		}

		addLine(center("ADJUSTMENT NOTE - REVERSAL / OVERRING"));
		endBold();
		reversalPending =ctx.get("CASHLESS_REVERSAL_PENDING");
		if (reversalPending == 1) {
		reversalAmt =ctx.get("CASHLESS_REVERSAL_AMT");
			startBold();
			addLine();
			addLine(API.setOnLeft("TOTAL REVERSAL ", 26)+" "+API.formatNumber(reversalAmt, NUMBER_FORMAT, 12));
			endBold();
			addLine();
		}
	}

	//We need a copy of the original in case we modify it
	var NormalReceiptCopy = outputBuffer;

	/* NVS-721 -Added to support signature line for overrings and regular orders -DKJ */
	var HASSIGNATURE = 0;
	//NVS-5951 17-NOV-2016 John Brancaleon - Add the cashless card info for mobile orders.
	//if (checkIsMobileOrder(view) == false || view.@pod == 1) {
	addCashlessInfo(isRefund, isOverring, cashlessStr);
	//}
	if(isOverring) {
		startBold();
		addLine(center("**** ADJUSTMENT NOTE - REVERSAL ****"));
		endBold();
		/* add any reversal information */
		addLine();
		addReversalInfo();
		
		//NVS-3241 - [DRM] CYT C3[ Ordering & Tendering_FC] CYT Grill monitor displays "Cancelled" proteins after the partially paid order transaction is reversed due to modification to the order		
		//if (!isInProgress) {
			var value=0;
			/* subtract the reversals from the refund amount */
			try {
				var ctx=new SessionContext;
			} catch (e) {
				return;
			}
			//NVS-3241 - [DRM] CYT C3[ Ordering & Tendering_FC] CYT Grill monitor displays "Cancelled" proteins after the partially paid order transaction is reversed due to modification to the order		
			if(Number(ctx.get("CASHLESS_REVERSAL_REFUND")) > 0){
				//PosShowMessage("value: " + value);
			value =value+ctx.get("CASHLESS_REVERSAL_REFUND");
			var line = API.setOnLeft("\nTOTAL CASH REFUND ", 26) + " " + API.formatNumber(value, NUMBER_FORMAT, 12);
			addLine(line);
			addLine();
			}else if(isInProgress) {
				/* NVS-4568 - msilva - Add "Total Cash Refund' line for not paid orders when overring */
				addDetailLine("TOTAL CASH REFUND ", 0);
			addLine();
		}
		
		/* NVS-3397 - print two copies, but retain only one of them in the reprint directory */
		if(PosCheckSessionProperty("SecondCopyOfReceipt", "true") == false) {			
			PosSetSessionProperty("SecondCopyOfReceipt", "true");
		}
		// NVS-6785 23-FEB-2017 John Brancaleonb - This else condition should have been removed when the multiple authorized signature lines were added (below).
		//else
		//{
		//	/*  NVS-284 JWC print 2 copies */
		//	addLine();
		//	/* NVS-721 -Added to support signature line for overrings and regular orders -DKJ */
		//	if(HASSIGNATURE > 0){
		//		addLine("\n___________________________________\nAuthorized Signature - (Store copy)\n\n");
		//	}
		//}

	}
	//NVS-6785 20-FEB-2017 John Brancaleon - move the Kiosk Cashless reversal information to be before the signature/address lines
	//NVS-3839, NVS-3844, NVS-3846 - msilva
	if (kioskReversalReceiptContent != undefined && kioskReversalReceiptContent != null && kioskReversalReceiptContent != '')
	{
		addLine(kioskReversalReceiptContent);
	}
	if((isRefund) && (view.ItemTenderView.(cat == "TENDER_ELECTRONIC_PAYMENT").length() == 0)) {
			//addLine();
			addLine("Authorized");
			addLine("Signature:_________________________");
			addLine();
			addLine("Address");
			addLine("___________________________________");
			addLine();
			addLine("Phone #");
			addLine("___________________________________");
			addLine();
			addLine("Reason");
			addLine("___________________________________");
			addLine();
		
		PosSetSessionProperty("SecondCopyOfReceipt", "true");

	}

	//Tishin Thomas 10/21/2016 NVS-5555  "Sales receipt changes" feature not implemented in SP8 order receipts
	//addLine();
	
	addPromotionOnTender();
	
	var uniqueCodes=view.uniqueCodes;
	if(uniqueCodes.length() > 0) {
		addUniqueCodeLines(uniqueCodes);
	}
	// NVS-637 remove check for cashless payment
	if( isBillableSale && !(isRefund) && ! (isUberEats)) {
		if (isFirstPass == false) {
			//addLine();
			//var BillableCopy = NormalReceiptCopy + "";
			//addLine();
			addLine("Customer");
			addLine("Signature:_________________________");
			addLine();
			addLine("Cashier");
			addLine("Signature:_________________________");
			addLine();
			addLine("Manager");
			addLine("Signature:_________________________");
			addLine();
			addLine("Address");
			addLine("___________________________________");
			addLine();
			addLine("Phone #");
			addLine("___________________________________");
			addLine();
		}
		// Adds default store-DB xml footer to the first copy
		if (view.Cashless.length() == 0  || GCUsed == true) {
			//addLine();
			//addLine(); addLine(); addLine(); addLine(); addLine(); addLine();
			//addLine(); addLine(); addLine();
			//cutPaper();
			//addLine(BillableCopy);
		}
		if (isFirstPass == true) {
			PosSetSessionProperty("SecondCopyOfReceipt", "true");
		}

	}
	//NVS-7106 - UberEats receipt
	/*
	if( isUberEats && !(isRefund)) {
		addLine();
		addLine("Delivery Driver");
		addLine("Signature:_________________________");
		addLine();
		addLine("Cashier");
		addLine("Signature:_________________________");
		addLine();
		addLine("Manager");
		addLine("Signature:_________________________");
		addLine();
	}
	*/
        // Add default Receipt Footer from store-DB
	//NVS-7185 15-MAR-2017 John Brancaleon - Remove extra blank line before footer
	//addLine();
	//Tishin Thomas 10/21/2016 NVS-5555  "Sales receipt changes" feature not implemented in SP8 order receipts
	//addLine(SEP_UL);
	addDefaultFooter();   //NVS-5364 JP
	//NVS-7185 15-MAR-2017 John Brancaleon - Remove extra blank line after footer
	//addLine();

	return getResponse();


	/** Adds Cashless information (if any) and returns true if signature is required **/
	function addCashlessInfo(isRefund, isOverring, cashlessStr)  {
		var bCheckSessionExists = true;
		
		try
		{
			var ctx=new SessionContext;
		}
		catch (e)
		{
			bCheckSessionExists = false;
		}

		/** NVS-8874: Fix for the unattended mobile ordering **/
		if (bCheckSessionExists)
			cashlessData = String(ctx.get("CASHLESS"));
		else
			if (cashlessStr != "" && cashlessStr != null)
				cashlessData = cashlessStr;
			else
				return;
		
		if (cashlessData.length == 0 && !isOverring) { 
			addLine(); //NVS-7185 15-MAR-2017 John Brancaleon - Add blank line after cashless information
			return;
		}

		var custom = cashlessData;
		var lines = String(custom).split("CASHLESS:");
		var msg="";
		var needsSignature = 0;
		var printSecondCopy = 0;
		var firstCopy = "";
		var secondCopy = "";
		var merchantAdded = false;
		GCUsed = false;

		for(var i = 1; i < lines.length; i++) {
			//NVS-5951 18-NOV-2016 John Brancaleon - Only look at the last CC if this is a mobile order.  
			if(checkIsMobileOrder(view) == true) {
				i = lines.length - 1;
			}
			var providerSale;
			var fields = String(lines[i]).split("|");
			
			/* add blank space to the fields array */
			for (var index=fields.length; index<=25; index++) {
				fields.push("");
			}
			
			if (fields[25] == "") {
				var provider = fields[0]; // + " SALE";
			} else {
				var provider = fields[25]; // + " SALE";
			} 
			
			if(isRefund) {
				providerSale = provider  + " REFUND";
			}else {
				providerSale = provider  + " SALE";
			}
			var card = " " + fields[1]; // Card #
			card = PadCardNumber(card);
			
			// In cashless 3, fields[2] has the payment type
			var expires = fields[2];	// Card expiration date
			var auth = fields[3];		// Authorization code
			var seq = fields[6];		// Sequence #
			var needsSignature = fields[5];
			
			// we need to get the merchant ID from diffent fields in mobile and regular orders
			var mer;
			
			 //This is no longer the case NVS-6811
			if (isMobileReceipt == false) {
				mer = fields[7];		// Merchant id
			} else {
				/* NVS-6811 -get the merchant ID for any mobile payment scenario */ 
				testStr =String(fields[9]); 
				if (testStr.length > 1) { 
					mer = fields[9];
				} else { 
					mer = fields[7];
				}					
			}
			
			var balance = String(fields[8]);	// Balance
			if (balance.length!=0) {
				balance = API.formatNumber(Number(fields[8]), NUMBER_FORMAT, 12);	// Balance #
			}

			var amt = fields[10];		// Operation amount
			if(fields[12].length!=0) {
				msg = fields[12];
			}

			if (merchantAdded == false) {
				addLine(""); //NVS-5602 23-JAN-2017 John Brancaleon - Ticket Revisited ==> Added missing blank line before the Merchant # on a receipt when CC or GC is used.
				addLine("MER# " + mer);
				merchantAdded = true;
			}

			var line = "CARD ISSUER          ACCOUNT#";

			//NVS-7249 - msilva - Add a blank line beetween the cards
			if(i > 1){
				line = "\n" + line;
			}		

			firstCopy = firstCopy + line + "\n";

			// NVS-1140
			secondCopy = secondCopy + line + "\n";
			if (provider == "Gift Card") {
				needsSignature = 0;
			}

			line = API.setOnLeft(providerSale, 14) + " " + card;  // NVS-1320 Added space
			firstCopy = firstCopy + line + "\n";
			secondCopy = secondCopy + line + "\n";

			var fallbackSwipe = false;
			// NVS-4104 added proctection for Cashless 2
			if (fields.length > 23) {
			if (fields[24].toLowerCase() == "fswipe")
			{
				fallbackSwipe = true;
				firstCopy = firstCopy + fields[24] + "\n";
				secondCopy = secondCopy + fields[24] + "\n";
			}
			}
			
			/* NVS-187 show trans amt for gift cards AND prepaid cards */
			// NVS-2640 always show this line
			//if(balance != "") {
				line = "TRANSACTION AMOUNT" + API.setOnRight(amt, COLS-18);
				firstCopy = firstCopy + line + "\n";
				secondCopy = secondCopy + line + "\n";
			//}

			var isEMVCard = TestForEMV(fields);
			
			if (isEMVCard == true) {
				// EMV addition
				line = fields[16] + "\n";
				firstCopy = firstCopy + line;
				secondCopy = secondCopy + line;
				// END EMV addition
			}
			
			line = "AUTHORIZATION CODE - " + auth + "\nSEQ# " + seq + "\n";   // NVS-1153
			firstCopy = firstCopy + line;
			secondCopy = secondCopy + line;

			// In the event of a EMV fallback swipe, we always print this line
			// This no longer prints - NVS-6725
			//if (fallbackSwipe == true)
			//{
			//	line = "Mode: Issuer\n";
			//	firstCopy = firstCopy + line;
			//	secondCopy = secondCopy + line;
			//}
			
			if (isEMVCard == true) {
				//Start of EMV additions
				if (fields[17].toLowerCase() == "pin") {
					line = "Verified by " + fields[17] + "\n";  // emvCVM
					firstCopy = firstCopy + line;
					secondCopy = secondCopy + line;
				}

				// No longer printed NVS-6495
				//line = "Mode: " + fields[18] + "\n";
				//firstCopy = firstCopy + line;
				//secondCopy = secondCopy + line;

				// We only print these if this is not a card swipe
				if (fields[24] != "FSwipe") {
					line = "AID: " + fields[19] + "\n";
					firstCopy = firstCopy + line;
					secondCopy = secondCopy + line;

					/* These are no longer printed per NVS-6495
					line = "TVR: " + fields[20] + "\n";
					firstCopy = firstCopy + line;
					secondCopy = secondCopy + line;

					line = "IAD: " + fields[21] + "\n";
					firstCopy = firstCopy + line;
					secondCopy = secondCopy + line;

					line = "TSI: " + fields[22] + "\n";
					firstCopy = firstCopy + line;
					secondCopy = secondCopy + line;

					line = "ARC: " + fields[23] + "\n";
					firstCopy = firstCopy + line;
					secondCopy = secondCopy + line;
					*/
				}
				// End of EMV additions
			}

			// NVS-7184 make sure we don't print a balnce for a credit card no matter what.
			if (balance != "" && fields[2].toUpperCase() != "CREDIT") {
				var trimBalance="$"+trim(balance)
				/* NVS-81  centered line for card balance, made upper-case.  JC 3-17-10 */
				/* NVS-188 added newline after card balance JC 3-30-10 */
				if(provider == "Master"){
					provider = "MASTERCARD";
				}else if(provider == "Dscvr"){
					provider = "DISCOVER";
				}
				line = "\n<@BoldOn> " + center(provider.toUpperCase()+" BALANCE") + "\n" + center(trimBalance) + "<@BoldOff>\n";
				firstCopy = firstCopy + line;
				secondCopy = secondCopy + line;
			}

			if(Number(needsSignature) || isRefund || fields[17].toLowerCase() == "must sign") {
				HASSIGNATURE++;
				printSecondCopy = 1;
				PosSetSessionProperty("SecondCopyOfReceipt", "true");
			}
			//NVS-7185 15-MAR-2017 John Brancaleon - Add blank line on both copies	
			//firstCopy = firstCopy + "\n";
			//secondCopy = secondCopy + "\n";

			/* NVS-447 -make sure the gift card footer is printed when a gift card is used */
			if (provider == "Gift Card") { GCUsed = true; }
		}

		// NVS-3148 - msilva
		var isKioskSignature = (HASSIGNATURE > 0) && isFromKiosk && isFirstPass;

		if (isKioskSignature && !isRefund)
		{	
			// NVS-3148 - msilva
			line = "\n___________________________________\nAuthorized Signature - (Store copy)\n\n";
			secondCopy = secondCopy + line;
			//Add footer to second copy of receipt - NVS-4193
			var value = rootConfig.Footer;
			if(value != null && value != "") {
				var lines = String(value).split("\\n");
				for(var i = 0; i < lines.length; i++) {
					if(lines[i].length < COLS)
						secondCopy = secondCopy + "\n" + center(lines[i])
					else {
						secondCopy = secondCopy + "\n" + lines[i];
					}
				}
			}
		}

		/*  NVS-447 -only show message for GC's */
		if (GCUsed) {
			firstCopy = firstCopy + formatLineEscSeq(msg, true);
			secondCopy = secondCopy + formatLineEscSeq(msg, true);
			
		}

		// NVS-4525 - msilva
		var firstCopyPrinted = false;

		//NVS-6785 20-FEB-2017 John Brancaleon - move the Kiosk Cashless reversal information to be before the signature/address lines
		// NVS-3148 - msilva
		// NVS-4525 - msilva
		if (isKioskSignature && !firstCopyPrinted)
		{
			addLine(firstCopy);
		}

		/* print second copy for refunds */
		if((!isOverring) && ((printSecondCopy) || (isRefund)) ) {

			var auxOutputSecondCopy = outputBuffer + secondCopy;

			if (!isFromKiosk)
			{				
				/* NVS-4104 */
				addLine(firstCopy);
				if(!isFirstPass && !isRefund){
					addLine("\n___________________________________\nAuthorized Signature - (Store copy)\n\n");
				}
			}
			else {
				//NVS-7248
				line = "\n___________________________________\nAuthorized Signature - (Store copy)\n\n";
				var KioskSign = "";
				KioskSign=KioskSign + line;
				
				var value = rootConfig.Footer;
				if(value != null && value != "") {
					var lines = String(value).split("\\n");
					for(var i = 0; i < lines.length; i++) {
						if(lines[i].length < COLS)
							KioskSign = KioskSign + "\n" + center(lines[i])
						else {
							KioskSign = KioskSign + "\n" + lines[i];
						}
					}
				}
				var auxOutputKioskSign = outputBuffer + KioskSign;			
				ctx.set("kioskSecondCashlessReceipt", auxOutputKioskSign.toString(), true);

				// NVS-1420: Save second cashless receipt (for signing)
				//ctx.set("kioskSecondCashlessReceipt", auxOutputSecondCopy.toString(), true);
				//NVS-4418
				if(!isFirstPass)
				{
					addLine(secondCopy);
				}

				// NVS-3148 - msilva
				//return;
			}

			auxOutputSecondCopy = null;

			if (isRefund && (view.ItemTenderView.(cat == "TENDER_ELECTRONIC_PAYMENT").length() != 0)) {
				addLine();addLine();addLine();
				addLine("Authorized");
				addLine("Signature:_________________________");
				addLine();
				addLine("Address");
				addLine("___________________________________");
				addLine();
				addLine("Phone #");
				addLine("___________________________________");
				addLine();
				addLine("Reason");
				addLine("___________________________________");
				addLine();
			}
		} else {
			if (firstCopy != null && firstCopy != "") {			
				addLine(firstCopy);
			}
			firstCopyPrinted = true;
		}

	}
	
	/** Copied from BCEvents.nps so a mobile unattended order can generate the receipt **/
	function PadCardNumber(IncomingNumber) {
		IncomingNumber = IncomingNumber.replace(/^\s+|\s+$/g,"");
		
		// If the card number is 4 digits and numeric, pad it with a dozen leading *'s
		var NumberPattern = /^[0-9]{4}$/;
		var Pattern2  = /^\*\*\*\*[0-9]{4}$/;
		if (NumberPattern.test(IncomingNumber) == true)
		{
			IncomingNumber = "************" + IncomingNumber;
		}
		else if (Pattern2.test(IncomingNumber) == true)
		{
			IncomingNumber = "********" + IncomingNumber;
		}
		
		return IncomingNumber;
	}

	function DetermineIfFirstPass(customData)
	{
		var returnValue = false;
		
		dataFields = customData.split("|");
		if (dataFields.length > 1)
		{
			var lastField = dataFields[dataFields.length - 1];
			if (lastField == "FirstPass")
			{
				returnValue = true;
			}
		}
		
		return returnValue;
	}

	function TestForEMV(fields)
	{
		var returnValue = true;
		
		// NVS-4104 added protection for cashless 2
		if (fields.length < 16) {
			returnValue = false;
		} else if (fields[16] == "" && fields[17] == "" && fields[18] == "") {
			returnValue = false;
		}
		
		return returnValue;
	}
	
	function addReversalInfo() {
		try {
			var ctx=new SessionContext;
		} catch (e) {
			return;
		}
		var merchantAdded = false;
		reversals =String(ctx.get("CASHLESS_REVERSAL"));
		if (reversals.length == 0) { return;}

		revs = String(reversals).split("CASHLESS:");
		for(var i = 1; i < revs.length; i++) {
			revInfo =String(revs[i]);
			fields 	=revInfo.split("|");
			var provider = fields[0].replace("CASHLESS:", ""); // + " SALE";
			providerSale = provider  + " REVERSAL";
			var card = " " + fields[1]; // Card #
			var expires = fields[2];	// Card expiration date
			var auth = fields[3];		// Authorization code
			var seq = fields[6];		// Sequence #
			var mer = fields[7];		// Merchant id
			var balance = API.formatNumber(Number(fields[8]), NUMBER_FORMAT, 12);	// Balance #
			var amt = fields[10];		// Operation amount
			var needsSignature 	=fields[5];

			var firstCopy = "";
			var secondCopy = "";

			if (!merchantAdded) {
				line = "MER# "+mer;
				firstCopy = firstCopy + line + "\n";
				merchantAdded = true;
			}

			if (provider == "Gift Card") {expires = "";}

			var line = "CARD ISSUER          ACCOUNT#";
			
			//NVS-7249 - msilva - Add a blank line beetween the cards
			if(i > 1){
				line = "\n" + line;
			}		
			
			firstCopy = firstCopy + line + "\n";
			secondCopy = secondCopy + line + "\n";

			line = API.setOnLeft(providerSale, 14) + card;
			firstCopy = firstCopy + line + "\n";
			secondCopy = secondCopy + line + "\n";

			line = "TRANSACTION AMOUNT" + API.setOnRight("-"+amt, COLS-18);
			firstCopy = firstCopy + line + "\n";
			secondCopy = secondCopy + line + "\n";

			line = "AUTHORIZATION CODE - ******\nSEQ# " + seq + "\n";   // NVS-1153
			firstCopy = firstCopy + line;
			secondCopy = secondCopy + line;

			/* decrement signature line */
			if(Number(needsSignature)) {
				HASSIGNATURE--;
			}

			addLine(firstCopy);
			//addLine();
		}
	}

	/** Adds a tender line from an <ItemTenderView> tag */
	function addTenderLine(tender)
	{
		var isFromKiosk = (Number(view.@pod) == PODCSO) || isRcpKiosk;

		var description = "";
		var code = toInt(tender.code);
		var kind = toInt(tender.kind);
		var amount = Number(tender.value);
		/*NVS-5422 - msilva - Set isOverring=false by default. 
		 * KVS does not print overring, does not have SessionContext as well.
		 * */
		var isOverring = false;
		try
		{
			//NVS-5216 14-SEP-2016 John Brancaleon -  Get the SessionContext and etermine if we're doing an overring
			var ctx=new SessionContext;
			isOverring	= Number(ctx.get("CASHLESS_REVERSAL_PENDING")) === 1; 
		}
		catch (e)
		{
		}

		if((kind == TENDER_KIND_PAYMENT) || (kind == TENDER_KIND_ORIGINAL_PAYMENT)) {
			switch (code) {
				case 0:
					description = "Cash Tendered";
					hasCash=true;
					break;
                // NVS-738 Use correct foreign currency codes. AO 01/04/2012
				case 12:
				case 13:
					var paramVal  = xmlStoreDB.Configurations.Configuration.(@type=="Store.wide").Section.(@name=="ForeignCurrency").Parameter.(@name=="SelectedCurrency").@value;
					var tempStr;
					if (paramVal.length() != 0 && paramVal != "OFF") {
						tempStr = paramVal + "  (in USD)";
					} else {
						tempStr = "FOREIGN CUR (in USD)";
					}
					addDetailLine(tempStr, Number(amount));
					//description = "  CNV";
					return;
					break;
				case 10:
					// Falls thru
				case 11:
					hasCash=true;
					// Falls thru
				default:
					description = tender.description + ((toInt(tender.qty) > 1)? " " + tender.qty : " ");
					break;
			}
		}else if(kind == TENDER_KIND_CHANGE) {
			description = "Change";
			hasChange = true;
		}else if(kind == TENDER_KIND_MANAGER_MEAL) {
			description = "Manager meal discount";
			amount = -amount;
		}else if(kind == TENDER_KIND_CREW_MEAL) {
			description = "Employee meal discount";
			amount = -amount;
		}else if(kind == TENDER_KIND_ALLOWANCE) {
			description = "Discount";
            if (code != "0") {
                //description = API.geti18nMsg(1, "MSG_BC_OFFERS_APPLIED_TOTAL",[]);
				description = API.geti18nMsg(1, "MSG_SL_DISCOUNT",[]);
            }
			amount = -amount;
		}else if(kind == TENDER_KIND_DISCOUNT_COUPON) {
			description = tender.description + ((tender.qty > 1)? " " + tender.qty : " ");
			amount = amount;
		}else if(kind == TENDER_KIND_KEEP_CHANGE) {
			description = "Excess";
			amount = amount;
		} else if(kind == TENDER_KIND_REVERSAL) { //NPS-7622
			if(tender.SourceTenders.SourceTender[0].@sourceCode == tender.code){
				description = "Reversal - " + tender.description; 
				amount = -amount;
			}
			else {
				description = "Reversal failure"; 
				addDetailLine(description, -amount);			
				description = "Reversal cashOut"; 				
				if(isInProgress) {
					amountRvCashoutInProgress += amount;
					hasRvCashoutInProgress = true;
				}
			}
		} else {
			return;
		}

		if(isFromKiosk) {
			if((view.@orderKey.substring(0, 7) == tender.srcPOSId)) {
				description="Kiosk " + description;
			}
			if(description == "Kiosk Cash Tendered") {
				if (amount != 0) {
					var pAmount = Number(tender.pValue);
					if(pAmount != amount) {
						addDetailLine(description, pAmount);
						description="Cash Tendered";
						var v1=new BigDecimal(amount);
						var v2=new BigDecimal(pAmount);
						v2=v1.subtract(v2);
						amount=v2.toString();
					}
					addDetailLine(description, amount);
				}
			}else {
				if(description == "Change") {
					addLine();
					//font, bold and due is removed	from the kiosk tender receipt NVS-2996				
					addDetailLine(description,	amount);
				}
				else {
					addDetailLine(description, amount);
				}
			}
		}
		else {
			if(description == "Cash Tendered") {
				//NVS-5216 - 14-SEP-2016 John Brancaleon - Only show the detail line if this is not an overring
				if (amount != 0 && !isOverring)
					addDetailLine(description, amount);
			}else {
				addDetailLine(description, amount);
			}
		}
	}
	/** Adds a detail line given a description (string) and amount (number) */
	function addDetailLine(description, amount)
	{
		var sig = "";
		var sizeAmount = 12;
		if(amount < 0) {
			amount = -amount;
			var sizeAmount = 10;
			sig = "- ";
		}
		addLine(API.setOnLeft(description, COLS-sizeAmount-sig.length) + sig + API.formatNumber(Number(amount), NUMBER_FORMAT, sizeAmount));
	}

	/*
	 * @brief: reads storedb gets tax table information for extended reciept
	 * @params: view -sale view of the order
	*/
	function PrintTaxInformation(subAmt) {
		/* iterate through the tax items and print the information */
		subAmtBD 	=subAmt;
		thisView 	=rootView.View;

		if (SalesReceipt == "true") {
			/* print 0.00 amt when no taxes were calculated */
			if (String(taxChainArray).length == 0) { 		
				taxChainArray = new Array();
			} 

			if ((String(taxChainArray).length == 0) || (Number(thisView.@totalTax) == 0)) {
				addDetailLine("  Tax", thisView.@totalTax);
			} else { 
				for (var i=0; i<taxChainArray.length; i++) {
					/* get taxes for this ID */ 
					taxID 	=Number(taxChainArray[i]);
					taxSeq = taxIDList["ID:"+taxID];
					//taxSeq	=i+1;
					item 	=thisView.taxItem.(@id == taxID);

				if ( (item.@amount > 0)) {
					/* decide if we should show the rate */ 
					amount =item.@amount;
					if ( (item.@amount > 0) || (item.@ADAmount > 0)) {
						/* use After Discount amount if available */
						ptAmount = (String(item.@ADAmount).length > 0)?item.@ADAmount:item.@amount;					

						/* decide if we should show the rate */ 
						if (ptAmount > 0) { 
							rateFmt =(showRateList["t"+taxSeq] == "true")? " ("+item.@rate+"%)":"";		
							addDetailLine("  Tax "+taxSeq+rateFmt, ptAmount);
						}
						} 

						/* display a subtotal after every tax if configured (and there's more than one tax) */
						if ((SalesReceiptSEQFormat == "true") && (thisView.taxItem.length() > 1) ) {
							subAmtBD = subAmtBD +Number(ptAmount);
							// NVS-6090 Tishin Thomas 5-DEC-2016 - Extra "subtotal" is printed on customer receipt in henrico county test.
							if(taxChainArray.length!=Number(taxSeq))
							{
								addDetailLine("Subtotal",subAmtBD);
							}
						}
					}
				} 
			}
		} else {
			addDetailLine("  Tax", thisView.@totalTax);
		}
	}

	/* prints special tenders */
	function PrintSpecialTenders() {
		/* Add special tenders */
		var tenders		= view.ItemTenderView;
		var specialTend = tenders.(kind == TENDER_KIND_MANAGER_MEAL || kind == TENDER_KIND_CREW_MEAL || kind == TENDER_KIND_ALLOWANCE);
		var discounts	= tenders.(kind == TENDER_KIND_DISCOUNT_COUPON);
		//NVS-5179
		if(!isAdjustment && specialTend.length() != 0) {
			// We have special tenders
			var mgrMeal = tenders.(kind == TENDER_KIND_MANAGER_MEAL)[0];
			var crwMeal = tenders.(kind == TENDER_KIND_CREW_MEAL)[0];
			var discount = tenders.(kind == TENDER_KIND_ALLOWANCE)[0];
			//addDetailLine("Subtotal",  Number(view.@BDTotalAmount));
			if(mgrMeal) {
				isCrewManagerMeal = true;
				addTenderLine(mgrMeal);
				delete(tenders.(kind == TENDER_KIND_MANAGER_MEAL)[0]);
			}
			if(crwMeal) {
				isCrewManagerMeal = true;
				addTenderLine(crwMeal);
				delete(tenders.(kind == TENDER_KIND_CREW_MEAL)[0]);
			}
			if(discount) {
				addTenderLine(discount);
				delete(tenders.(kind == TENDER_KIND_ALLOWANCE)[0]);
			}
			addLine();
		}
		if(discounts.length() != 0) {
			// We have discount coupons that must go before Subtotal
			for each (var tender in discounts) {
				addTenderLine(tender);
			}
			for(var i = discounts.length() - 1; i >= 0; i--) {
				delete(tenders.(kind == TENDER_KIND_DISCOUNT_COUPON)[i]);
			}
		}

	}

	/* returns total amount of fees and deposits */
	function getExtendedSalesAmount(feeOrDeposit) {
		pdTotal = 0;
		pdList =(feeOrDeposit == "Fee")?view.Fee:view.Deposit;
		for each (var pdItem in pdList) { pdTotal = pdTotal + Number(pdItem.@value); }
		return pdTotal;
	}

	/* returns the total of the RMHC donation amount 
	   NVS-5520 31-OCT-2016 John Brancaleon - Remove the RMHC donation amount from the subtotal */
	function getRMHCDonationAmount() {
		var rmhcTotal = 0;
		//NVS-5584 5-NOV-2016 Chao - Call the API method for RMHC donation product code.
		var rmhcProdCode = API.findParamInSectionConfig("RMHC.donationProductCode", "CSO.UserInterface");
		for each(var item in view.ItemView) {
			if(Number(item.productCode) == Number(rmhcProdCode)) {
				rmhcTotal += item.totalPrice;	//item.@value
			}
		}
		return rmhcTotal;
	}
	
	/*
	 * @brief: reads storedb gets tax table information for extended reciept
	 * @params: view -sale view of the order
	*/
	function PrintExtendedSalesInfo(feeOrDeposit,extendedAmt) {
		/* handle when there's no fee or deposit amount */
		if (extendedAmt <= 0) { return; }

		/* expanded receipts are enabled, print the breakdown for each fee or deposit */
		if (SalesReceipt == "true") {
			//addLine();
			var pdArrSaleType = new Array("EATIN","TAKEOUT");
			var label = "";
			pdSaleType =pdArrSaleType[view.@type];

			if (feeOrDeposit == "Fee") {
				len =2;
				rateHash = "f";
			} else {
				len = 2;
				rateHash = "d";
			}

			for (var i=1;i<=len;i++) {
				if (feeOrDeposit == "Deposit") {
					amt =summNodesAttributeValues(view.Deposit.(@code == i),"value");
					pdInfo 	=depositList.(@depositCode == i).Pricing.(@priceCode == pdSaleType);
				} else {
					amt 		=summNodesAttributeValues(view.Fee.(@code == i),"value");
					pdInfo 	=feeList.(@feeCode == i).Pricing.(@priceCode == pdSaleType);
				}

				/* only print fees and deposits that are charged */
				if (amt<=0) { continue; }

				pdRate 	=pdInfo.Value;
				pdType 	=pdInfo.@type;

				/* determine is we should display the rate or not */
				rateFmt = "";
				if (showRateList[rateHash+(i)] == "true") {
					if (pdType == "AMOUNT") {
						rateFmt = " ($"+pdRate+")";
					} else if (pdType == "RATE") {
						rateFmt = " ("+pdRate+"%)";
					}
				}

				label = "  "+feeOrDeposit+" "+i+rateFmt;
				addDetailLine(label, amt);
			}

		/* when extended receipts are disabled, only print the total fee or deposit amount */
		} else {
			addLine();
			addDetailLine(feeOrDeposit, extendedAmt);
		}
	}

	function addUniqueCodeLines(uniqueCodes) {
		var uniqueCodesList = new XML(uniqueCodes);
		addLine("<@HideOn>");
		addLine(center(API.getLocalMsg("MSG_RP_MSG1",null)));
		addLine(center(API.getLocalMsg("MSG_RP_MSG2",null)));
		addLine();
		addLine(center(API.getLocalMsg("MSG_RP_MSG3",null)));
		addLine(center(API.getLocalMsg("MSG_RP_MSG4",null)));
		addLine(center(API.getLocalMsg("MSG_RP_MSG5",null)));
		addLine();
		addLine(API.getLocalMsg("MSG_RP_MSG6",null));
		addLine();
		addLine(API.getLocalMsg("MSG_RP_MSG7",null));
		addLine();
		addLine(API.getLocalMsg("MSG_RP_MSG8",null));
		addLine();
		addLine(center(API.getLocalMsg("MSG_RP_MSG9",null)));
		addLine(center(API.getLocalMsg("MSG_RP_MSG10",null)));
		addLine();
		addLine(center(API.getLocalMsg("MSG_RP_MSG11",null)));
		addLine();
		addLine("=======================================");
		for each(uniqueCode in uniqueCodesList) {
			addLine(center(uniqueCode));
		}
		addLine("=======================================");
		addLine(API.getLocalMsg("MSG_RP_MSG12",null));
		addLine(API.getLocalMsg("MSG_RP_MSG13",null));
		addLine(API.getLocalMsg("MSG_RP_MSG14",null));
		addLine(API.getLocalMsg("MSG_RP_MSG15",null));
		addLine(API.getLocalMsg("MSG_RP_MSG16",null));
		addLine("<@HideOff>");
	}

	function addPromotionOnTender()
	{
		if (view.Promotions != undefined)
		{
			var promotionTenderId = Number(view.Promotions.@tenderId);		
			if(promotionTenderId > -1) 
			{
				var savedAmount = Number(view.Promotions.@amountBeforeTenderPromo) - Number(view.@grossAmount);
				var tenderItems = view.ItemTenderView.(code == promotionTenderId);
				addLine(API.geti18nMsg(1, "MSG_TENDER_TYPE_PROMOTION_AMT_SAVED",[API.formatNumber(savedAmount, "#0.00", 6), tenderItems.description]));		
			}
		}
	}
	//NVS-4638 - Ability to Display Customer Savings on the Receipt
	function addSavingInfo() 
	{ 
		var isOverring = false;
		try {
			var ctx=new SessionContext;
			isOverring = Number(ctx.get("CASHLESS_REVERSAL_PENDING")) === 1;
		} catch (e) {}	
		
		var Savings = rootView.View.Savings; 
		if ((Savings != undefined) && !isOverring)
		{ 
		// NVS-5542,NVS-5543 Tishin Thomas 18-OCT-2016 - The "Total Savings" is displayed as a "VM Savings" and the calculation of total savings is not correct.
			var VMSavings = Number(Savings.VMSavings.toString());	
			var otherSavings = Number(Savings.otherSavings.toString());	
			if (VMSavings > 0) 
			{ 
				//addLine(); 
				//addLine(center(API.geti18nMsg(1, "MSG_BC_VM_SAVINGS", []) + ": " + Savings.VMSavings.toString()));	
				otherSavings=(otherSavings+VMSavings);
			} 
			otherSavings=otherSavings.toFixed(2);
			// NVS-5535 Tishin Thomas 19-OCT-2016 - Crew meals and Manger Meals should not  included  'Total Savings' line on the customer receipt.
			if (otherSavings > 0 && crewMealAmount<=0 && managerMealAmount <=0) 
			{ 
				//addLine(center(API.geti18nMsg(1, "MSG_BC_OTHER_SAVINGS", []) + ": " + otherSavings.toString()));
				//NVS-5880 09-NOV-2016 John Brancaleon - right justify the amount for total savings
				line = API.geti18nMsg(1, "MSG_BC_OTHER_SAVINGS", []); 
				addLine();
				addLine(line + API.setOnRight(otherSavings.toString(), COLS-line.length));
			} 
		} 
	}

/* end of receipt function */
}

/**
 * PUBLIC
 * Implements the customer receipt
 * Needed data types: VIEW
 * @author Celso Fernandes
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function receiptGift(config, data)
{
	
	if(init(config, data, Array("VIEW"), "RTGFT") != 0) {
		return getResponse();
	}
	if(rootConfig.CustomData.length() == 0) {
		return new StringBuffer();
	}
	// Order information
	var view		= rootView.View;
	//addLine(SEP_UL);
	startBold(); {
		// Adds the default receipt header from store-db
		addDefaultHeader();
		addLine(center("TEL# " + rootConfig.StorePhoneNumber));
	} endBold();

	addLine();
	//NVS-3607
	//NVS-3441
	var isFromKiosk = (Number(view.@pod) == PODCSO);
	//NVS-4243
	if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){
		isRcpHHOT = true; 
	}
	var useRecallerId = isFromKiosk || isRcpHHOT;	

	var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),false,useRecallerId,false);
	var kvsOrder = "Order " + majorMinor;
	var posId = "KS# " + toInt(view.@orderKey.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	var date = formatDateTimeAMPM(String(rootView.@creationDate));
	addLine(posId + API.setOnRight(date, COLS-posId.length));
	addGiftInfo();
	addLine();
	// Adds default store-DB xml footer to the first copy
	//NVS-5602 24-OCT-2016 John Brancaleon
	//NVS-7185 31-MAR-2017 John Brancaleon - remove the extra space after the Gift Card balance info.  
	//addLine();
	//addLine(SEP_UL);
	addDefaultFooter();
	return getResponse();

	/** Adds Cashless information (if any) and returns true if signature is required */
	function addGiftInfo()
	{
		var custom = rootConfig.CustomData[0];
		var lines = String(custom).split("CASHLESS_GC:");
		for(var i = 1; i < lines.length; i++) {
			var fields = String(lines[i]).split("|");
			var provider = fields[0].replace("CASHLESS_GC", ""); // + " SALE";
			var providerSale = provider  + " SALE";
			var card = fields[1]; 		// Card #
			var expires = fields[2];	// Card expiration date
			var auth = fields[3];		// Authorization code
			var printFlag = fields[5];	//
			var seq = fields[6];		// Sequence #
			var mer = fields[7];		// Merchant id
			var balance = API.formatNumber(Number(fields[8]), NUMBER_FORMAT, 12);	// Balance #
			var amt = fields[9];		// Operation amount
			var vlr = fields[10];		// value
			var store = rootConfig.StoreId;
			var msg = fields[12];		// Mensagem

			if(i == 1) {
				//addLine(API.center("STORE# " + store, 15)+"   "+API.center("MER# " + mer, 21));
				var merLine = "MER# " + mer;
				addLine(merLine + API.setOnRight(kvsOrder, COLS-merLine.length));
			}

			startBold(); {
			addLine();
			addLine(center("GIFT CARD"));
			if (PosCheckSessionProperty("GC_PURCHASE_TYPE", "Reload")) {
				addLine(center("RELOAD RECEIPT"));  // NVS-1844 added word receipt RPS 2-3-2015
			} else {
				addLine(center("ACTIVATION RECEIPT"));
			}
			} endBold();

			addLine();

			addLine("ACCOUNT# " + card);
			addLine("AUTH CODE " + auth  + "\nSEQ# " + seq);   // NVS-1153
				startBold(); {
				addLine();
				addLine(center("GIFT CARD BALANCE"));
				//NVS-7185 15-MAR-2017 John Brancaleon - Add blank line after balance
				var trimBalance;
				if (PosCheckSessionProperty("GC_PURCHASE_TYPE", "Reload")) {
					trimBalance = "$"+trim(balance);
				} else {
					trimBalance = "$" + trim(balance) + "\n";
				}	
				addLine(center(trimBalance));
				/* NVS-368 -add reload amt to reload receipts */
					if (PosCheckSessionProperty("GC_PURCHASE_TYPE", "Reload")) {
						addLine(center("GIFT CARD RELOAD AMOUNT"));
						trimBalance="$"+trim(vlr)
						addLine(center(trimBalance));
					}
				} endBold();
				//NVS-7185 07-APR-2017 John Brancaleon - Only add the blank line when a Gift Card Reload is done.  
				if (PosCheckSessionProperty("GC_PURCHASE_TYPE", "Reload")) {
					addLine();
				}
		}
		//addLine(msg);
		addLineEscSeq(msg, true);  // Changed for SDE-1601
		addLine();
		addLine(center("Keep this receipt for your records"));
	}
}

/**
 * PUBLIC
 * Responsible for formating the grill slip (printed at production)
 * Needed data types: VIEW
 * @author Rodrigo
 */
function IntGrillSlip()
{
	var view = rootView.View;
	var GRILL_SPLI_HEADER	= " * * * * *  GRILL SLIP  * * * * * ";
	var CANCEL_GRILL		= "############  CANCEL GRILL ############";
		
	view = checkPlainForReceipt(view);
	view = checkSmartGrillForReceipt(view);

	addLine(SEP_UL);
	addLine();

	var varTypePod = Number(view.@pod);
	if(view.@remPod.length()>0){
		var varTypeRemPod = view.@remPod;
		if(varTypeRemPod != "11" && varTypeRemPod != "") {
			varTypePod = Number(varTypeRemPod);
		}
	}
	
    var isFromKiosk = (Number(view.@pod) == PODCSO);
	
	//NVS-4243
	if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){
		isRcpHHOT = true; 
	}
	var useRecallerId = isFromKiosk || isRcpHHOT;
	
	var isCancel = view.@kind == "-1";
	if(isCancel){
		addLine(CANCEL_GRILL);
	}
	
	/***** NVS-1249
	 *  RptHeader(view);
	 *****/

	/* NVS-2382 Implement Configurable large Order numbers on grill slips for SP6.1 */
	if (largeOrderNumber.toLowerCase() == "true") {

		//NVS-3607
		//NVS-3441 - Fix for recallerId on Grill Slip
		//NVS-3748
		var majorMinor;
		var trimPOS = Number(largeOrderNumberFormat) == 1 ? true : false;
		
		if(checkIsMobileOrder(view))
		{
			majorMinor = fnMountOrderIdEx("",String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@orderKey.substring(0, 7)),trimPOS,useRecallerId,true);
		}
		else if(useRecallerId)
		{
			majorMinor = fnMountOrderIdEx("",String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@posSource),trimPOS,useRecallerId,true);
		}else
		{
			majorMinor = fnMountOrderIdEx("",String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),trimPOS,useRecallerId,true);
		}

		outputBuffer.append("<@BigCharOn>");
		// NVS-2766 Kiosk has only 6 char @BigChar - so add rtrim to strip blanks for this printer

		//NVS-3607
		if(isFromKiosk == true){
			//NVS-3607
			addLine(API.center(rtrim(majorMinor), 6));
		}
		else{
			//NVS-3607
			addLine(rtrim(API.center(majorMinor, 8)));
		}
		
		outputBuffer.append("<@BigCharOff>");
		addLine();
	}
	
	switch(varTypePod) {
		case 0: RptFC(view);
			 	break;
		case 1: RptDT(view);
			 	break;
		case 2: RptWT(view);
			 	break;
		case 8: RptCSO(view);
			 	break;
		default:
				RptFC(view);
	}

	// addLine();
	addLine(SEP_UL);
	// Lindomar Araujo Filho - NVS-3984 - March/31/2016 - Changed to remove the 1.25" space when large order number is enabled
	// if (largeOrderNumber.toLowerCase() == "true") { //NVS-2540 add 1.25" space only when large order number is enabled
		// addLine();
		// addLine();
		// addLine();
		// addLine();
		// addLine();
		// addLine();
	// }

 	return getResponse();

	/** creat report Front Counter **/
	function RptFC(nodesView)
	{		
		startBoldSize2(); { // Big empty line		     
			var szSide =  (nodesView.@preparationArea).toUpperCase();
			var szLine =  "       " + szSide;
			addLine(szLine);
		} endBoldSize2();		
		
		szLine = "GRILL SLIP     Time: " +  formatTimeAMPM(rootView.@creationDate);
		addLine(center(szLine));
		// Lindomar Araujo: 2016/09/06 - NVS-5144 - Add the TagId information on the Grill / Pick List slip, if available
		var TableTagId = String(view.@tableTagId);
		// NVS-5461 John Brancaleon 11-OCT-2016 - Allow -1 as tag ID if customer choses not to have table service, and don't show it on the receipt if it is -1 
		if (TableTagId != "" && Number(TableTagId) > 0) {  
			startBoldSize2();
			var isPaidMobileOrder = view.CustomInfo.Info.(@name == "isPaidMobileOrder").@value;
			if(isPaidMobileOrder == "true"){
			addLine("     TABLE #" + TableTagId);
		}
		else {
		addLine("     LOCATOR #" + TableTagId);
		}
			endBoldSize2();
		}
		addLine();
		
		var isCYTFlag = false;

		//NVS-3607
		//NVS-3441
		//NVS-3613
		var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,useRecallerId,false);
		
		var IsMobileOrder = checkIsMobileOrder(view);
		var register = "# ";
		if(useRecallerId && !IsMobileOrder)
		{
			register += toInt(nodesView.@posSource.substring(3, 7));
		}
		else
		{
			register += toInt(nodesView.@orderKey.substring(3, 7));
		}
		
		// Always take the order number without the register number.
		var order = "FC # " + majorMinor.substr(majorMinor.length - 2, 2); // Eg: POS0001:89 - > 89

		startBoldSize2(); { // Big empty line
			szLine = "KS " + API.setOnLeft(register, 4) + "    " + API.setOnRight(order, 8);
			addLine(szLine);
			addLine();
			var cytGroup = "";
			
			//  NVS-2988  MTB - 21/09/2015
			var cytPrintedItems= {};

			var myItemList = new Array();
			var myItemCount = 0;
			var CytIngredientGroupsInfo = xmlStoreDB.StoreDB.CytIngredientGroups;			
			for each (var item in nodesView.ItemView)
			{			
				if(Number(item.level) == 0) {					
					if (item.isCYT == "true")
					{
						myItemList[myItemCount] = item;  
						myItemCount++;
						isCYTFlag = true;	
					}
					
			}
			}
			
			if (isCYTFlag == true)
			{			
					for (var ct = 0; ct < CytIngredientGroupsInfo.Group.length(); ct++) {
						for each (var item in nodesView.ItemView) {
							if (CytIngredientGroupsInfo.Group[ct].@name == item.CYTIngredientGroup)
							{				
								myItemList[myItemCount] = item;  //Add grill items
								myItemCount++;
							}
						}			
					}				
			}		
			
		var myItemArray;
		
		//NVS-8210 JP
		var productCode = nodesView.ItemView[0].productCode;
		var isChefCrafted = isChefCraftedItem(productCode);		
		
		var notForceCompItem = new StringBuffer();
		// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
		var bunChefCrafted = new StringBuffer();
		var proteinChefCrafted = new StringBuffer();
		if (isCYTFlag == true)	
			myItemArray = myItemList; //Use sorted array for CYT orders only
		else 
			myItemArray = nodesView.ItemView;				//Kalpesh - NVS-3295 - code fix end
		//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
		var flagDisplayNumbersInsteadofModifiers = "false";
			for each (var iterativeItem in nodesView.ItemView) {
				if(String(iterativeItem.displayNumbersInsteadofModifiers) == "true" && String(iterativeItem.level)=="0")
					flagDisplayNumbersInsteadofModifiers = "true";
			}
			for each (var item in myItemArray) {
			
				//  NVS-2988  MTB - 21/09/2015
				if(item.isCYT == "true" && (item.productCode in cytPrintedItems))
				{
					continue;
				}
				cytPrintedItems[item.productCode] = item.productCode;

				if(Number(item.level) == 0) {
					var isCancel = nodesView.@kind == "-1";
					
					if (item.isCYT == "true")
						isCYTFlag = true;
						
					// Lindomar Araujo: 2014/08/28 - SQC-6001 - Checking if the smartRouting and hideAddGrillParameter is enabled to check if the product is a SGP item
					if ((sgpEnabled == "true" && sgpHideAddGrill == "true") && item.isCYT == "true") {
						hideAddGrillModifier = true;
					} else {
						if (item.isGrillLine == "false") {
							hideAddGrillModifier = false;
						}
					}
					if(isCancel) {
						if(isChefCrafted == "true") {
							addLine("  " + Math.abs(toInt(item.quantity)) + " " + item.dtName.substring(0, 16));
						} else {
						addLine("  " + Math.abs(toInt(item.quantity)) + " " + item.longName.substring(0, 16));
						}
						addLine("*** CANCEL GRILL ***");
					}
					else {
						if(isChefCrafted == "true") {
							addLine("  " + item.dtName.substring(0,20)); 
						} else {
						addLine("  " + item.longName.substring(0,20)); // NVS-336 JWC
						}
					}

					var isChange = nodesView.@kind == "-2";
					if(isChange) {
						addLine("   *** CHANGE ***");
					}
				}else {
						if (isCYTFlag == true) {
						var typeDescription = false;
						if (item.isCYT == "true") {
							typeDescription = true;
						}
						//NVS-6171 Tishin Thomas 12/20/2016
						var lineToAdd="";
						//NVS-7158 17-MAR-2017 John Brancaleon - Indent the grill items on the grill slip
						//NVS-7309 4/7/2017 Tishin Thomas NVS-7158 cause this issue and modified.
						if(item.isGrillLine == "true" && isChefCrafted == "false"){
							lineToAdd +="  ";
						}
						//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
						if(flagDisplayNumbersInsteadofModifiers == "true")
						{
							//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
							lineToAdd += getGrillDescriptionForMcCafeItems(item, typeDescription, false, hideAddGrillModifier);
						}
						else{
							//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
							lineToAdd += getGrillDescription(item, typeDescription, false, hideAddGrillModifier);
						}
							
						if(cytGroup == "")
						{
							//first item just print it						
							//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
							addLine("  " + lineToAdd.substring(0, 20));  // Changed for NPS-3917  Rich Schreiber							
								}
							else {
							 //second item check previous ingredient group is same as current ingredient group
							 if (cytGroup != item.CYTIngredientGroup) {
								//previous group is different from current group print the line between group
								endBoldSize2();
								if (isCYTFlag == true && isChefCrafted == "false") //NVS-3314 - Kalpesh - NVS-5173 JP
									addLine(SEP_GL);				
								startBoldSize2();
								//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
								addLine("  " + lineToAdd.substring(0, 20));  
							 }							
							 else{	
								//if it is same just print it							
								//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
								addLine("  " + lineToAdd.substring(0, 20));  
							 }													    
						}
						cytGroup = item.CYTIngredientGroup;
						}
					else {
						var lineToAdd ="";
							//NVS-7158 17-MAR-2017 John Brancaleon - Indent the grill items on the grill slip
							//NVS-7309 4/7/2017 Tishin Thomas NVS-7158 cause this issue and modified.
						if(item.isGrillLine == "true" && isChefCrafted == "false"){
							lineToAdd +="  ";
						}
							//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
						if(flagDisplayNumbersInsteadofModifiers == "true")
						{
							//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
							lineToAdd += getGrillDescriptionForMcCafeItems(item, typeDescription, isChefCrafted, hideAddGrillModifier);
						}
						else{
							//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
							lineToAdd += getGrillDescription(item, typeDescription, isChefCrafted, hideAddGrillModifier);
						}
							// Added to support Chef Crafted
							//NVS-7309 Tishin Thomas 4/7/2017 Made changes on Chef crafted items
						if (isChefCrafted == "true") {
							// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes to always print first "BUN", later "PATTY" and for the last, all others grilled items
							if (item.CYTIngredientGroup == "BUN") {
								if(item.isGrillLine == "true"){
									bunChefCrafted.append("     " + lineToAdd.substring(0, 17) + "\n");
								}else{
									bunChefCrafted.append("    " + lineToAdd.substring(0, 18) + "\n");
								}
							}
							if (item.CYTIngredientGroup == "PATTY") {
								if(item.isGrillLine == "true"){
								proteinChefCrafted.append("     " + lineToAdd.substring(0, 17) + "\n");
								}else{
								proteinChefCrafted.append("    " + lineToAdd.substring(0, 18) + "\n");
								}
							}
							if((item.ForceCompDisplay == "ALL" || item.ForceCompDisplay == "MONITORS") && item.grilledQuantity.toString() == "0") {
								// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
								if (item.CYTIngredientGroup != "BUN" && item.CYTIngredientGroup != "PATTY") {
									if(item.isGrillLine == "true"){
										addLine("     " + lineToAdd.substring(0, 17));  // Changed for NPS-3917  Rich Schreiber	
									}else{	
										addLine("    " + lineToAdd.substring(0, 18));  // Changed for NPS-3917  Rich Schreiber	
									}
								}
							} else {
								// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
								if (item.CYTIngredientGroup != "BUN" && item.CYTIngredientGroup != "PATTY") {
									notForceCompItem.append("     " + lineToAdd.substring(0, 17) + "\n");
								}
							}
						} else {
							//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
							addLine("  " + lineToAdd.substring(0, 20)); 
						}
					}
				}				
			}				
			// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
			outputBuffer.append(bunChefCrafted);
			outputBuffer.append(proteinChefCrafted);
			outputBuffer.append(notForceCompItem);
		} endBoldSize2();
	}

	/** creat report Drive Thru **/
	function RptDT(nodesView)
	{
		startBoldSize2(); { // Big empty line
			addLine("DT                DT");
			var szSide =  (nodesView.@preparationArea).toUpperCase(); 
			var szLine =  "       " + szSide;
			addLine(szLine);
		} endBoldSize2();

		szLine = "GRILL SLIP     Time: " +  formatTimeAMPM(rootView.@creationDate);
		addLine(center(szLine));
		addLine();
		//NVS-3607
		//NVS-3441
		//NVS-3613
		var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,false,false);
		var order = "   # " + majorMinor; // Eg: POS0001:89 - > 89
		startBoldSize2(); { // Big empty line
			addLine(order);
			addLine();
			
			//NVS-8210 JP
			var productCode = nodesView.ItemView[0].productCode;
			var isChefCrafted = isChefCraftedItem(productCode);
			
			var notForceCompItem = new StringBuffer();
			// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
			var bunChefCrafted = new StringBuffer();
			var proteinChefCrafted = new StringBuffer();
			
			//  NVS-2988  MTB - 21/09/2015
			var cytPrintedItems= {};
			
			for each (var item in nodesView.ItemView) {
				
				//  NVS-2988  MTB - 21/09/2015
				if(item.isCYT == "true" && (item.productCode in cytPrintedItems))
				{
					continue;
				}
				cytPrintedItems[item.productCode] = item.productCode;
				//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
				var flagDisplayNumbersInsteadofModifiers = "false";
			for each (var iterativeItem in nodesView.ItemView) {
				if(String(iterativeItem.displayNumbersInsteadofModifiers) == "true" && String(iterativeItem.level)=="0")
					flagDisplayNumbersInsteadofModifiers = "true";
			}
				
				if(Number(item.level) == 0) {
					var isCancel = nodesView.@kind == "-1";
					if(isCancel) {
						if(isChefCrafted == "true") {
							addLine("  " + Math.abs(toInt(item.quantity)) + " " + item.dtName.substring(0, 16));
						} else {
						addLine("  " + Math.abs(toInt(item.quantity)) + " " + item.longName.substring(0, 16));
						}
						addLine("*** CANCEL GRILL ***");
					}
					else {
						if(isChefCrafted == "true") {
							addLine("  " + item.dtName);
						} else {
						addLine("  " + item.longName);
						}
					}

					var isChange = nodesView.@kind == "-2";
					if(isChange) {
						addLine("   *** CHANGE ***");
					}
				}else {
					//NVS-6171 Tishin Thomas 12/20/2016
					var lineToAdd ="";
					//NVS-7158 17-MAR-2017 John Brancaleon - Indent the grill items on the grill slip
					//NVS-7309 4/7/2017 Tishin Thomas NVS-7158 cause this issue and modified.
					if(item.isGrillLine == "true" && isChefCrafted == "false"){
						lineToAdd +="  ";
					}
					//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
						if(flagDisplayNumbersInsteadofModifiers == "true")
					{
						//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
						lineToAdd += getGrillDescriptionForMcCafeItems(item, false, isChefCrafted);
					}
					else{
						//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
						lineToAdd += getGrillDescription(item, false, isChefCrafted);
					}
					//NVS-7309 Tishin Thomas 4/7/2017 Made changes on Chef crafted items
						if (isChefCrafted == "true") {
							// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes to always print first "BUN", later "PATTY" and for the last, all others grilled items
							if (item.CYTIngredientGroup == "BUN") {
								if(item.isGrillLine == "true"){
									bunChefCrafted.append("     " + lineToAdd.substring(0, 17) + "\n");
								}else{
									bunChefCrafted.append("    " + lineToAdd.substring(0, 18) + "\n");
								}
							}
							if (item.CYTIngredientGroup == "PATTY") {
								if(item.isGrillLine == "true"){
								proteinChefCrafted.append("     " + lineToAdd.substring(0, 17) + "\n");
								}else{
								proteinChefCrafted.append("    " + lineToAdd.substring(0, 18) + "\n");
								}
							}
							if((item.ForceCompDisplay == "ALL" || item.ForceCompDisplay == "MONITORS") && item.grilledQuantity.toString() == "0") {
								// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
								if (item.CYTIngredientGroup != "BUN" && item.CYTIngredientGroup != "PATTY") {
									if(item.isGrillLine == "true"){
										addLine("     " + lineToAdd.substring(0, 17));  // Changed for NPS-3917  Rich Schreiber	
									}else{	
										addLine("    " + lineToAdd.substring(0, 18));  // Changed for NPS-3917  Rich Schreiber	
									}
								}
							} else {
								// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
								if (item.CYTIngredientGroup != "BUN" && item.CYTIngredientGroup != "PATTY") {
								notForceCompItem.append("     " + lineToAdd.substring(0, 17) + "\n");
								}
							}
						}
					else {
						//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
						addLine("  " + lineToAdd.substring(0, 20));  // Changed for NPS-3917  Rich Schreiber
					}
				}
			}
			// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
			outputBuffer.append(bunChefCrafted);
			outputBuffer.append(proteinChefCrafted);
			outputBuffer.append(notForceCompItem);
			addLine();
			addLine("DT                DT");
		} endBoldSize2();
	}

	/** creat report Walk Thru **/
	function RptWT(nodesView)
	{
		startBoldSize2(); { // Big empty line
			var szSide =  (nodesView.@preparationArea).toUpperCase();
			var szLine =  "       " + szSide;
			addLine(szLine);
		} endBoldSize2();
		//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
var flagDisplayNumbersInsteadofModifiers = "false";
			for each (var iterativeItem in nodesView.ItemView) {
				if(String(iterativeItem.displayNumbersInsteadofModifiers) == "true" && String(iterativeItem.level)=="0")
					flagDisplayNumbersInsteadofModifiers = "true";
			}
		szLine = "GRILL SLIP     Time: " +  formatTimeAMPM(rootView.@creationDate);
		addLine(center(szLine));
		addLine();
		//NVS-3607
		//NVS-3441
		//NVS-3613		
		var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,false,false);
		var register = "# " + toInt(view.@posSource.substring(3, 7)); // Eg: POS0001:89 - > 1
		var order = "WT # " + majorMinor; // Eg: POS0001:89 - > 89

		startBoldSize2(); { // Big empty line
			szLine = "KS " + API.setOnLeft(register, 4) + "    " + API.setOnRight(order, 8);
			addLine(szLine);
			addLine();

			//  NVS-2988  MTB - 21/09/2015
			var cytPrintedItems= {};
			
			//NVS-8210 JP
			var productCode = nodesView.ItemView[0].productCode;
			var isChefCrafted = isChefCraftedItem(productCode);	
			
			var notForceCompItem = new StringBuffer();
			// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
			var bunChefCrafted = new StringBuffer();
			var proteinChefCrafted = new StringBuffer();

			for each (var item in nodesView.ItemView) {
				
				//  NVS-2988  MTB - 21/09/2015
				if(item.isCYT == "true" && (item.productCode in cytPrintedItems))
				{
					continue;
				}
				cytPrintedItems[item.productCode] = item.productCode;

				if(Number(item.level) == 0) {
					var isCancel = nodesView.@kind == "-1";
					if(isCancel) {
						if(isChefCrafted == "true") {
						addLine("  " + Math.abs(toInt(item.quantity)) + " " + item.dtName.substring(0, 16));
						} else {
						addLine("  " + Math.abs(toInt(item.quantity)) + " " + item.longName.substring(0, 16));
						}
						addLine("*** CANCEL GRILL ***");
					}
					else {
						if(isChefCrafted == "true") {
							addLine("  " + item.dtName);
						} else {
						addLine("  " + item.longName);
						}
					}

					var isChange = nodesView.@kind == "-2";
					if(isChange) {
						addLine("   *** CHANGE ***");
					}
				}else {
					//NVS-6171 Tishin Thomas 12/20/2016
					var lineToAdd ="";
					//NVS-7158 17-MAR-2017 John Brancaleon - Indent the grill items on the grill slip
					//NVS-7309 4/7/2017 Tishin Thomas NVS-7158 cause this issue and modified.
					if(item.isGrillLine == "true" && isChefCrafted == "false"){
						lineToAdd +="  ";
					}
					//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
						if(flagDisplayNumbersInsteadofModifiers == "true")
					{
						//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
						lineToAdd += getGrillDescriptionForMcCafeItems(item, false, isChefCrafted);
					}
					else{
						//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
						lineToAdd += getGrillDescription(item, false, isChefCrafted);
					}
					//NVS-7309 Tishin Thomas 4/7/2017 Made changes on Chef crafted items
						if (isChefCrafted == "true") {
							// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes to always print first "BUN", later "PATTY" and for the last, all others grilled items
							if (item.CYTIngredientGroup == "BUN") {
								if(item.isGrillLine == "true"){
									bunChefCrafted.append("     " + lineToAdd.substring(0, 17) + "\n");
								}else{
									bunChefCrafted.append("    " + lineToAdd.substring(0, 18) + "\n");
								}
							}
							if (item.CYTIngredientGroup == "PATTY") {
								if(item.isGrillLine == "true"){
								proteinChefCrafted.append("     " + lineToAdd.substring(0, 17) + "\n");
								}else{
								proteinChefCrafted.append("    " + lineToAdd.substring(0, 18) + "\n");
								}
							}
							if((item.ForceCompDisplay == "ALL" || item.ForceCompDisplay == "MONITORS") && item.grilledQuantity.toString() == "0") {
								// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
								if (item.CYTIngredientGroup != "BUN" && item.CYTIngredientGroup != "PATTY") {
									if(item.isGrillLine == "true"){
										addLine("     " + lineToAdd.substring(0, 17));  // Changed for NPS-3917  Rich Schreiber	
									}else{	
										addLine("    " + lineToAdd.substring(0, 18));  // Changed for NPS-3917  Rich Schreiber	
									}
								}
							} else {
								// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
								if (item.CYTIngredientGroup != "BUN" && item.CYTIngredientGroup != "PATTY") {
								notForceCompItem.append("     " + lineToAdd.substring(0, 17) + "\n");
								}
							}
						}
					else {
						addLine("    " + lineToAdd.substring(0, 18));  // Changed for NPS-3917  Rich Schreiber
					}
				}
			}
			// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
			outputBuffer.append(bunChefCrafted);
			outputBuffer.append(proteinChefCrafted);
			outputBuffer.append(notForceCompItem);
		} endBoldSize2();
	}


	/** creat report CSO - Kiosk **/
	function RptCSO(nodesView)
	{
		startBoldSize2(); { // Big empty line
			addLine("CSO              CSO");
			var szSide =  (nodesView.@preparationArea).toUpperCase();
			var szLine =  "       " + szSide;
			addLine(szLine);
		} endBoldSize2();
		//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
var flagDisplayNumbersInsteadofModifiers = "false";
			for each (var iterativeItem in nodesView.ItemView) {
				if(String(iterativeItem.displayNumbersInsteadofModifiers) == "true" && String(iterativeItem.level)=="0")
					flagDisplayNumbersInsteadofModifiers = "true";
			}
		szLine = "GRILL SLIP     Time: " +  formatTimeAMPM(rootView.@creationDate);
		addLine(center(szLine));
		addLine();

		//NVS-3607
		//NVS-3441
		//NVS-3613		
		var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,true,false);

		var order = "   # " + majorMinor; // Eg: POS0001:89 - > 89
		startBoldSize2(); { // Big empty line
			addLine(order);
			addLine();
			
			//NVS-8210 JP
			var productCode = nodesView.ItemView[0].productCode;
			var isChefCrafted = isChefCraftedItem(productCode);
				
			var notForceCompItem = new StringBuffer();
			// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
			var bunChefCrafted = new StringBuffer();
			var proteinChefCrafted = new StringBuffer();

			//  NVS-2988  MTB - 21/09/2015
			var cytPrintedItems= {};

			for each (var item in nodesView.ItemView) {
				
				//  NVS-2988  MTB - 21/09/2015
				if(item.isCYT == "true" && (item.productCode in cytPrintedItems))
				{
					continue;
				}
				cytPrintedItems[item.productCode] = item.productCode;

				if(Number(item.level) == 0) {
					var isCancel = nodesView.@kind == "-1";
					if(isCancel) {
						if(isChefCrafted == "true") {
							addLine("  " + Math.abs(toInt(item.quantity)) + " " + item.dtName.substring(0, 16));
						} else {
						addLine("  " + Math.abs(toInt(item.quantity)) + " " + item.longName.substring(0, 16));
						}
						addLine("*** CANCEL GRILL ***");
					}
					else {
						if(isChefCrafted == "true") {
							addLine("  " + item.dtName);
						} else {
						addLine("  " + item.longName);
						}
					}

					var isChange = nodesView.@kind == "-2";
					if(isChange) {
						addLine("   *** CHANGE ***");
					}
				}else {
					//NVS-6171 Tishin Thomas 12/20/2016
					var lineToAdd ="";
					//NVS-7158 17-MAR-2017 John Brancaleon - Indent the grill items on the grill slip
					//NVS-7309 4/7/2017 Tishin Thomas NVS-7158 cause this issue and modified.
					if(item.isGrillLine == "true" && isChefCrafted == "false"){
						lineToAdd +="  ";
					}
					//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
						if(flagDisplayNumbersInsteadofModifiers == "true")
					{
						//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
						lineToAdd += getGrillDescriptionForMcCafeItems(item, false, isChefCrafted);
					}
					else{
						//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
						lineToAdd += getGrillDescription(item, false, isChefCrafted);
					}
					//NVS-7309 Tishin Thomas 4/7/2017 Made changes on Chef crafted items
						if (isChefCrafted == "true") {
							// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes to always print first "BUN", later "PATTY" and for the last, all others grilled items
							if (item.CYTIngredientGroup == "BUN") {
								if(item.isGrillLine == "true"){
									bunChefCrafted.append("     " + lineToAdd.substring(0, 17) + "\n");
								}else{
									bunChefCrafted.append("    " + lineToAdd.substring(0, 18) + "\n");
								}
							}
							if (item.CYTIngredientGroup == "PATTY") {
								if(item.isGrillLine == "true"){
								proteinChefCrafted.append("     " + lineToAdd.substring(0, 17) + "\n");
								}else{
								proteinChefCrafted.append("    " + lineToAdd.substring(0, 18) + "\n");
								}
							}
							if((item.ForceCompDisplay == "ALL" || item.ForceCompDisplay == "MONITORS") && item.grilledQuantity.toString() == "0") {
								// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
								if (item.CYTIngredientGroup != "BUN" && item.CYTIngredientGroup != "PATTY") {
									if(item.isGrillLine == "true"){
										addLine("     " + lineToAdd.substring(0, 17));  // Changed for NPS-3917  Rich Schreiber	
									}else{	
										addLine("    " + lineToAdd.substring(0, 18));  // Changed for NPS-3917  Rich Schreiber	
									}
								}
							} else {
								// Lindomar Araujo: 2017/02/20 - NVS-6965 - Changes
								if (item.CYTIngredientGroup != "BUN" && item.CYTIngredientGroup != "PATTY") {
								notForceCompItem.append("     " + lineToAdd.substring(0, 17) + "\n");
								}
							}
						}
					else {
						//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
						addLine("  " + lineToAdd.substring(0, 18));  // Changed for NPS-3917  Rich Schreiber
					}
				}
			}
			outputBuffer.append(bunChefCrafted);
			outputBuffer.append(proteinChefCrafted);
			outputBuffer.append(notForceCompItem);
			addLine();
			addLine("CSO              CSO");
		} endBoldSize2();
	}

	function RptOther()
	{
		var view = rootView.View;
		var isCancel = view.@kind == "-1";

		if(isCancel) {
			startInvertedColor(); {
				addBoldSize2Line("### CANCEL GRILL ###");
			} endInvertedColor();
		}
		startBoldSize2(); {
			addLine(); // Big empty line
			addLine("**** GRILL SLIP ****");
			addLine(); // Big empty line
		} endBoldSize2();
		addLine("MFY " + view.@productionSide);
		var register = toInt(view.@posSource.substring(3, 7)); // Eg: POS0001:89 - > 1
		var order = toInt(view.@orderKey.substring(8)); // Eg: POS0001:89 - > 89
		startInvertedColor(); {
			addLine("Register " + register + " - Order # " + order);
		} endInvertedColor();
		//NVS-3607
		//NVS-3441
		//NVS-3613		
		var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,useRecallerId,false);
		addLine("DRIVE-THRU Order " + majorMinor);
		addLine();
		addLine(formatDateTimeAMPM(String(rootView.@creationDate)));			
		addLine();
		//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
var flagDisplayNumbersInsteadofModifiers = "false";
			for each (var iterativeItem in nodesView.ItemView) {
				if(String(iterativeItem.displayNumbersInsteadofModifiers) == "true" && String(iterativeItem.level)=="0")
					flagDisplayNumbersInsteadofModifiers = "true";
			}
		//  NVS-2988  MTB - 21/09/2015
		var cytPrintedItems= {};

		for each (var item in view.ItemView) {

			//  NVS-2988  MTB - 21/09/2015
			if(item.isCYT == "true" && (item.productCode in cytPrintedItems))
			{
				continue;
			}

			if(Number(item.level) == 0) {
				addLine(API.setZerosOnLeft(item.quantity, 2) + " " + item.longName);
			}else {
				//NVS-6171 Tishin Thomas 12/20/2016
				var lineToAdd ="";
				//NVS-7158 17-MAR-2017 John Brancaleon - Indent the grill items on the grill slip
				//NVS-7309 4/7/2017 Tishin Thomas NVS-7158 cause this issue and modified.
				if(item.isGrillLine == "true" && isChefCrafted == "false"){
						lineToAdd +="  ";
					}
				//NVS-6705 , NVS-6471 24-FEB-2017 Tishin Thomas - Grill print is generated with numbers instead of modifiers for grill instructions, when displayNumberInsteadofModifiers is set to false for a product.
						if(flagDisplayNumbersInsteadofModifiers == "true")
					{
						//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
						lineToAdd += getGrillDescriptionForMcCafeItems(item, false, isChefCrafted);
					}
					else{
						//NVS-7158 17-MAR-2017 John Brancaleon - Add the grill description to the line, since we added spaces for the grill line.
						lineToAdd += getGrillDescription(item, false, isChefCrafted);
					}
				addLine("    " + lineToAdd.substring(0, 18));  // Changed for NPS-3917  Rich Schreiber
			}
		}
		addLine();
		if(isCancel) {
			startInvertedColor(); {
				addBoldSize2Line("### CANCEL GRILL ###");
			} endInvertedColor();
		}
	}

	return getResponse();
}

/**
* The function determines if the item is Chef Crafted
* A custom parameter should be added to all Chef Crafted Sandwiches 
* with name: isChefCrafted and value: true
* @author: Julia Paar NVS-8210
*/
function isChefCraftedItem(productCode) {
	var isChefCraftedItem = "false";
	var productNode = new XML(API.getProductdbProduct(productCode));
	
	if (productNode == null || productNode == undefined || productNode == "") {
		return isChefCraftedItem;
	}

	if (productNode.Tags != undefined && productNode.Tags != null) { 
		for each (tag in productNode.Tags.Tag) { 
			if (tag.toUpperCase() == "ISCHEFCRAFTED") { 
				isChefCraftedItem = "true"; 
			} 
		} 
	} 
	
	return isChefCraftedItem;
}

/**
 * PUBLIC
 * Responsible for formating the grill slip (printed at production)
 * Needed data types: VIEW
 * @author Rodrigo
 */
function grillSlip(config, data)
{
	if(init(config, data, Array("VIEW"), "GLSLP") != 0) {
		return getResponse();
	}

	return(IntGrillSlip());
}

function grillSlip1(config, data)
{
	if(init(config, data, Array("VIEW"), "GLSLP") != 0) {
		return getResponse();
	}

	return(IntGrillSlip());
}

function grillSlip2(config, data)
{
	if(init(config, data, Array("VIEW"), "GLSLP") != 0) {
		return getResponse();
	}

	return(IntGrillSlip());
}

/**
 * PUBLIC
 * Responsible for formating the open day result report.
 * Needed data types: CASH
 * @author Rodrigo
 */
function reportDayOpen(config, data)
{
	if(init(config, data, Array("CASH"), "RDOPN") != 0) {
		return getResponse();
	}
	var nodesPOS		= rootCash.POS;

	addHeader(rootCash, "Start of day", RPTDUMMY);
	addLine();
	addLine("POS                      Opening reading");
	addPOS(nodesPOS);
	addFooter(rootCash);
	return getResponse();

	/** Adds all included POS */
	function addPOS(nodesPOS)
	{
		for each (i in nodesPOS) {
			var posId	= i.@id;
			var gt		= Number(i.@initialGT);
			var line	= API.setOnLeft(String(posId), 4) + "               " +  API.setOnRight(API.formatNumber(gt, NUMBER_FORMAT, 20), 21);
			addLine(line);
		}
	}
}

/**
 * PUBLIC
 * Responsible for formating the Open Close Store Wide result report.
 * Needed data types: config, data (XML with data of the POS)
 * @author Celso
 */
function reportOpenCloseSW(configParam)
{
	initGlobalt();
	config = new XML(configParam);

	var storeId			= Number(config.StoreId);
	var posId = "N/A";
	if(config.PosId[0] != null) {
		posId =  Number(config.PosId[0].substring(3, 8));
	}
	var storeName		= config.StoreName;
	var managerId		= Number(config.Manager.@id);

	var indStruct = 0;
	var i = 0;

	var data 		    = config.CustomData.commandResponse;

	// SW_OPENDAY or SW_CLOSEDAY
	var cmdName  		= String(data.params.param.value.struct.member.(name=="command").value.string);
	// 0 or 1
	var isForced 		= Number(data.params.param.value.struct.member.(name=="isForced").value.i4);
	// YYYYMMDD
	var businessDate 	= String(data.params.param.value.struct.member.(name=="BusinessDate").value.string);

	if(businessDate != "N/A") {
		businessDate	= API.formatDate(businessDate, "MM/dd/yyyy");
	}

	// 0 or 1
	var canOpenClose 	= Number(data.params.param.value.struct.member.(name=="CanOpenClose").value.i4);
	//
	var errorCode 	= Number(data.params.param.value.struct.member.(name=="ErrorCode").value.i4);
	//
	var numberOfPos 	= Number(data.params.param.value.struct.member.(name=="NumberOfPos").value.i4);
	//
	var rootPosList 	= data.params.param.value.struct.member.(name=="POSLIST").value.array.data;

	// Create of Header
	addLine(SEP_DL);
    if(posId==0) {
		addLine(center("STORE# " + storeId));
    }
    else {
		addLine(center("STORE# " + storeId + " POS# " + posId));
    }

	addLine(center(storeName));
	addLine();
	addLine(center("BUSINESS DATE: " + businessDate));
	addLine();
	addLine(center("MANAGER: " + managerId));
	addLine();
	addLine("SUP-SIGN     MGR.SIGN    ASST/CREW-SIGN");
	addLine();
	addLine();
	addLine(SEP_DL);
	if(cmdName == "SW_OPENDAY"){
      if(isForced==1) {
			addLine(center("DAY OPEN ALL POS FORCED"));
      }
     else {
			addLine(center("DAY OPEN ALL POS"));
     }
	}
	else {
      if(isForced==1) {
			addLine(center("DAY CLOSE ALL POS FORCED"));
      }
     else {
			addLine(center("DAY CLOSE ALL POS"));
     }
	}

   var allOpenClose=1;
   var oneOpenClose=0;
   var allOpened=1;
	var item;
	for each (item in rootPosList.value) {
		var varCanOpenClose = Number(item.struct.member.(name=="CanOpenClose").value.i4);
		if(varCanOpenClose==0) {
			allOpenClose=0;
		}
		else {
			oneOpenClose=1;
		}
		var varState = item.struct.member.(name=="State").value.string;
		var varReason = Number(item.struct.member.(name=="Reason").value.i4);
		if((varState.indexOf("Opened")!=0 && varState.indexOf("Detached")!=0 && varState.indexOf("Logged")!=0)||(0!=varReason)) {
			allOpened=0;
		}
	}
	if(0==numberOfPos) {
		allOpened=0;
		allOpenClose=0;
	}
   if(oneOpenClose==0) {
     canOpenClose=0;
   }

	if(canOpenClose == 1){
		if(allOpenClose==1) {
			if(cmdName == "SW_OPENDAY"){
				if(isForced==1) {
					addLine("Forced store open succeeded");
				}
				else {
					addLine("Store open succeeded");
				}
			}
			else {
				if(isForced==1) {
					addLine("Forced store close succeeded");
				}
				else {
					addLine("Store close succeeded");
				}
			}
		}
		else {
			if(cmdName == "SW_OPENDAY"){
				if(isForced==1) {
					addLine("Forced store open partially succeeded");
				}
				else {
					addLine("Store open partially succeeded");
				}
			}
			else {
				if(isForced==1) {
					addLine("Forced store close partially succeeded");
				}
				else {
					addLine("Store close partially succeeded");
				}
			}
		}
	}
	else {
		switch(errorCode) {
		case TLOGRSP_CANNOTCLOSEOPENORDERS:
			//var sMsg="MSG_ERR_OPEN_ORDERS";
			var sMsg="Failed to ";
			if(cmdName == "SW_OPENDAY"){
				sMsg=sMsg+"open";
			}
			else {
				sMsg=sMsg+"close";
			}
			if(isForced==1) {
				sMsg=sMsg+" (forced)"
			}
			sMsg=sMsg+" a day because there are";
			addLine(sMsg);
			addLine("open orders.");
			break;
		case TLOGRSP_NOOFFLINESYNC:
			var sMsg="Failed to ";
			if(cmdName == "SW_OPENDAY"){
				sMsg=sMsg+"open";
			}
			else {
				sMsg=sMsg+"close";
			}
			if(isForced==1) {
				sMsg=sMsg+" (forced)"
			}
			sMsg=sMsg+" a day because there are";
			addLine(sMsg);
			addLine("no offline sync.");
			break;
		case TLOGRSP_ERRORMSG:	// error comunication with way station
			var sMsg="Failed to ";
			if(cmdName == "SW_OPENDAY"){
				sMsg=sMsg+"open";
			}
			else {
				sMsg=sMsg+"close";
			}
			if(isForced==1) {
				sMsg=sMsg+" (forced)"
			}
			sMsg=sMsg+" a day.";
			addLine(sMsg);
			addLine("Communication error.");
			break;
		default:
			var sMsg="Failed to ";
			if(cmdName == "SW_OPENDAY"){
				sMsg=sMsg+"open";
			}
			else {
				sMsg=sMsg+"close";
			}
			if(isForced==1) {
				sMsg=sMsg+" (forced)"
			}
			sMsg=sMsg+" a day on the following";
			addLine(sMsg);
			addLine("instances:");
			addLine();
			break;
		}

	}

	canOpenClose=0;
// Create of Body
   for each (var item in rootPosList.value) {

		var varPosId  		= String(item.struct.member.(name=="PosId").value.string);
		var varOnline 		= Number(item.struct.member.(name=="Online").value.i4);
		var varCanOpenClose = Number(item.struct.member.(name=="CanOpenClose").value.i4);
		var varReason 		= Number(item.struct.member.(name=="Reason").value.i4);
		var varState 		= String(item.struct.member.(name=="State").value.string);
		var varOpeningReading = String(item.struct.member.(name=="OpeningReading").value.string);

		if(varCanOpenClose == 0) {
			// POS FAILED
			var line = varPosId.substring(0, 8) + " - ";

			var description = "";
			switch (varReason) {
				case 1:
					line=line+"Communication error";
					break;
				case 2:
					line=line+"Invalid Date";
					break;
				case 3:
					line=line+"POS is already Opened";
					break;
				case 4:
					line=line+"POS is already closed";
					break;
				case 5:
					line=line+"Cannot close a POS that is not opened or Blocked";
					break;
				case 6:
					line=line+"Cannot open a POS that is not closed";
					break;
				case 7:
					line=line+"Error executing workflow";
					break;
				case 8:
					line=line+"Operator logged";
					break;
				case 9:
					line=line+"Unfinished orders";
					break;
				case 10:
					line=line+"Order in progress";
					break;
				case 11:
					line=line+"Open drawer";
					break;
				case 12:
					line=line+"POS paused";
					break;
				default:
					line=line+"Error undetermined";
			}
			addLine(line);
		}
		else {
			// at least one POS could be opened/closed (the xml info is not accurate)
			canOpenClose=1;
		}
	}
	if((cmdName == "SW_OPENDAY")&&((allOpened)||(canOpenClose&&isForced))) {
		addLine();
		addLine(SEP_DL);
		addLine("POS#                    Opening reading");
		addLine("----                    ---------------");

		for each (var item in rootPosList.value) {
			var varPosId  		= String(item.struct.member.(name=="PosId").value.string);
			var varOnline 		= Number(item.struct.member.(name=="Online").value.i4);
			var varCanOpenClose = Number(item.struct.member.(name=="CanOpenClose").value.i4);
			var varReason 		= Number(item.struct.member.(name=="Reason").value.i4);
			var varState 		= String(item.struct.member.(name=="State").value.string);
			var varOpeningReading = String(item.struct.member.(name=="OpeningReading").value.string);

			if(varCanOpenClose == 1) {
				var line = varPosId.substring(3, 8) +
				"                    " +
				API.setOnRight(varOpeningReading, 15);
				addLine(line);
			}
		}
	}

	addLine();
	addLine(SEP_DL);
	addLine(center("Printed on " + API.formatDateTime(config.@creationDate)));
	addLine(SEP_DL);
	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Status of the POSOpen Close Store Wide result report.
 * Needed data types: config, data (XML with data of the POS)
 * @author Celso
 */
function reportPOSStatesSW(configParam, data)
{
	initGlobalt();
//	PosShowMessage(teste);

	iAux = String(data[0]).indexOf("?>") + 2;    // remove <?xml version="1.0" encoding="UTF-8" ?>
	var newData = String(data[0]).slice(iAux);
	config = new XML(configParam.toString());
	posStates = new XML(newData);

	var storeId			= Number(config.StoreId);
	var posId = "N/A";
	if(config.PosId[0] != null) {
		posId =  Number(config.PosId[0].substring(3, 8));
	}
	var storeName		= config.StoreName;
	var managerId		= Number(config.Manager.@id);

	// Create of Header
	addLine(SEP_DL);
    if(posId==0) {
		addLine(center("STORE# " + storeId));
    }
    else {
		addLine(center("STORE# " + storeId + " POS# " + posId));
    }

	addLine(center(storeName));
	addLine();
	addLine(center("MANAGER: " + managerId));
	addLine();
	addLine("SUP-SIGN     MGR.SIGN    ASST/CREW-SIGN");
	addLine();
	addLine();
	addLine(SEP_DL);
	addLine(center("Register Status"));
	addLine(SEP_DL);
	addLine("Station    Status    Version   Package");
	var nodesPos = posStates.PosList.Pos;
	if(nodesPos != null) {
		for each (i in nodesPos) {
			var station = i.@id;
			var status	= (i.@state!="Detached")?"Active":"Detached";
			var version	= (i.@state=="Unknown")?"------":i.@version;
			//Tishin Thomas Dec-7-2016 NVS-5937 POS States SW report are not in proper alignment.
			var indexVer = version.lastIndexOf( "B" );
			if	(indexVer>-1){
				version=version.substring(indexVer);
			}
			//JP NVS-5937 For virtual registers 16 and 19 version should be blank
			if (trim(station) == "POS0016" || trim(station) == "POS0019") {
				version = "------";
			}
			var pkg	= (i.@state=="Unknown")?"------":i.@pkg;
			{   // Format new line
				var line = API.setOnRight(station, 7)
				+ "    "
				+ API.setOnRight(status, 6)
				+ "    "
				+ API.setOnRight(version, 7)
				+ "   "
				+ API.setOnRight(pkg, 7)
				addLine(line);
			}
		}
	}

	addLine(SEP_DL);
	addLine(center("Printed on " + API.formatDateTime(config.@creationDate)));
	addLine(SEP_DL);
	return getResponse();

}

/**
 * PUBLIC
 * Responsible for formating the operator login report.
 * Needed data types: CASH
 * @author Rodrigo
 */
function reportOperatorLogin(config, data)
{
	if(init(config, data, Array("CASH"), "OPRLG") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= currentOperator.@name;
	var operatorId		= Number(currentOperator.@id);
	var nodeTenders		= currentOperator.CashDetails.Tenders[0];
	var initialFloat	= calculateInitialFloat(nodeTenders);
	var managerId		= Number(rootConfig.Manager.@id);

	initialFloat = API.formatNumber(initialFloat, NUMBER_FORMAT, 19);

	addHeader(rootCash, "Cashier Login", RPTOPERATORLOGIN);
	addOperation("Manager",			managerId,		false);
	{
	// 18: name, 2: sep, 19: value
	var line = API.setOnLeft("Cashier", 18)
	+ ":" + " "
	+ API.setOnRight(operatorName, 19);
	addLine(line);
	}

	addOperation("Operator Id",		operatorId,		false);
	addOperation("Initial Float",	initialFloat,	false);
	addLine();
	addFooter(rootCash);

	return getResponse();

	/** Calculate total inital float on the given node */
	function calculateInitialFloat(nodeTenders)
	{
		var total = 0;
		if(nodeTenders != null) {
			var nodesTender = nodeTenders.Tender;
			for each (i in nodesTender) {
				total += i.@initialFloat;
			}
		}
		return Number(total);
	}
}

/**
 * PUBLIC
 * Responsible for formating the End of Day report.
 * Needed data types: CASH, PMIX
 * @author Rodrigo
 */
function reportEndOfDay(config, data)
{
	if(init(config, data, Array("CASH", "PMIX"), "ENDDY") != 0) {
		return getResponse();
	}

	var reportType = RPTENDOFDAY;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Cahier Logout report.
 * Needed data types: CASH, PMIX
 * @author Rodrigo
 */
function reportOperatorLogout(config, data)
{
	if(init(config, data, Array("CASH", "PMIX"), "OPLGT") != 0) {
		return getResponse();
	}	

	var root = findLastOperator(rootCash);	
	if(null==root) {
		addLine();
		addLine();
		addLine("___________________________________");
		addLine();
		addLine(API.getLocalMsg("MSG_RECEIPT_NO_PREVIUS_OPERATOR"));
		addLine("___________________________________");
		
		return getResponse();
	}

	var reportType = RPTOPERATRORLOGOUT;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Remote Drawer Change report.
 * Needed data types: CASH, PMIX
 * @author Rodrigo
 */
function reportRemoteDrawerChange(config, data)
{
	if(init(config, data, Array("CASH", "PMIX"), "OPLGT") != 0) {
		return getResponse();
	}

	var reportType = RPTOPERATRORLOGOUT;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	reportType = RPTREMDRWCHANGE;
	genericCashReport(XMLCashRpt, reportType);
	//SDO-6154
	//Changed for NVS-3006 by KP
	addLine("  Accomplished on "+ rootConfig.CustomData.regSrc.toString() +" for "+ rootConfig.CustomData.regDst.toString());
	////////////
	addLine(SEP_DL);
	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Remote Login report.
 * Needed data types: CASH, PMIX
 * @author Rodrigo
 */
function reportRemoteLogin(config, data)
{
	if(init(config, data, Array("CASH"), "OPRLG") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);

	// WWR-2514: Return silently if currentOperator not listed yet (timing problem)
	if (currentOperator == null) {
		return getResponse();
	}

	var operatorName	= currentOperator.@name;
	var operatorId		= Number(currentOperator.@id);
	var managerId		= Number(rootConfig.Manager.@id);

	addHeader(rootCash, "Cashier Login", RPTOPERATORLOGIN);
	addOperation("Manager",			managerId,		false);
	{
	// 18: name, 2: sep, 19: value
	var line = API.setOnLeft("Cashier", 18)
	+ ":" + " "
	+ API.setOnRight(operatorName, 19);
	addLine(line);
	}
	addOperation("Operator Id",		operatorId,		false);
	addLine();
	addFooter(rootCash);

	//Changed for NVS-3006 by KP
	addLine("  Accomplished on "+ rootConfig.CustomData.regSrc.toString() +" for "+ rootConfig.CustomData.regDst.toString());
	addLine(SEP_DL);
	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Other Receipts result report.
 * Needed data types: CASH
 * @author Celso Fernandes
 */
function reportTransfer (config, data)
{
	if(init(config, data, Array("CASH"), "RTRNF") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= currentOperator.@name;
	var operatorId		= Number(currentOperator.@id);
	var managerId		= Number(rootConfig.Manager.@id);
	var nodeOtherRcp	= currentOperator.CashDetails.TransfersIn.(@type=="OTHER_RECEIPTS");
	var otherValue		= getLastValueTimestamp(nodeOtherRcp);

	otherValue = API.formatNumber(otherValue, NUMBER_FORMAT, 19);

	addHeader(rootCash, "Other Receipts", RPTDUMMY);
	addLine();
	addOperation("Manager",			managerId,		false);
	addLine();
	addOperation("Other Receipts",	otherValue,	false);
	addLine();
	addLine();
	addFooter(rootCash);

	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Skim report.
 * Needed data types: CASH
 * @author Celso Fernandes
 */
function reportSkimSlip (config, data)
{
	if(init(config, data, Array("CASH"), "SKMSL") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= currentOperator.@name;
	var operatorId		= Number(currentOperator.@id);
	var nodeSkim		= currentOperator.CashDetails.TransfersOut.(@type=="SKIM");
	var skimValue		= getLastValueTimestamp(nodeSkim);
	var managerId		= Number(rootConfig.Manager.@id);

	skimValue = API.formatNumber(skimValue, NUMBER_FORMAT, 19);

	addHeader(rootCash, "Skim", RPTDUMMY);
	addOperation("Manager",			managerId,		false);

	{
	// 18: name, 2: sep, 19: value
	var line = API.setOnLeft("Cashier", 18)
	+ ":" + " "
	+ API.setOnRight(operatorName, 19);
	addLine(line);
	}

	addOperation("Operator Id",		operatorId,		false);

	{
	// 17: name, 3: sep, 20: value
	var line = API.setOnLeft("Skim Type", 17);
	addLine(line);
	}

	addOperation("Cash",	skimValue,	false);
	addLine();
	addFooter(rootCash);

	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Other Payments report.
 * Needed data types: CASH
 * @author Celso Fernandes
 */
function reportOtherPayments (config, data)
{
	if(init(config, data, Array("CASH"), "OTPMN") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= currentOperator.@name;
	var operatorId		= Number(currentOperator.@id);
	var managerId		= Number(rootConfig.Manager.@id);
	var nodesRcp		= currentOperator.CashDetails.TransfersOut.(@type=="OTHER_PAYMENT");
	var lastValue		= getLastValueTimestamp(nodesRcp);

	lastValue = API.formatNumber(lastValue, NUMBER_FORMAT, 19);

	addHeader(rootCash, "Other Payments", RPTDUMMY);
	addOperation("Manager",			managerId,		false);
	addLine();
	addOperation("Other Payments",	lastValue,	false);
	addLine();
	addLine();
	addFooter(rootCash);

	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Other Payments report.
 * Needed data types: CASH
 * @author Celso Fernandes
 */
function reportSpecialReceipts (config, data)
{
	if(init(config, data, Array("CASH"), "SPRPT") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= currentOperator.@name;
	var operatorId		= Number(currentOperator.@id);
	var managerId		= Number(rootConfig.Manager.@id);
	var nodesRcp		= currentOperator.CashDetails.TransfersIn.(@type=="SPECIAL_RECEIPTS");
	var lastValue		= getLastValueTimestamp(nodesRcp);

	lastValue = API.formatNumber(lastValue, NUMBER_FORMAT, 19);

	addHeader(rootCash, "Special Receipts", RPTDUMMY);
	addOperation("Manager",			managerId,		false);
	addLine();
	addOperation("Special Receipts",	lastValue,	false);
	addLine();
	addLine();
	addFooter(rootCash);

	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Cash Transfer In report.
 * Needed data types: CASH
 * @author Celso Fernandes
 */
function reportCashTransferIn (config, data)
{
	if(init(config, data, Array("CASH"), "TRNSI") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= currentOperator.@name;
	var operatorId		= Number(currentOperator.@id);
	var managerId		= Number(rootConfig.Manager.@id);
	var nodesRcp		= currentOperator.CashDetails.TransfersIn.(@type=="TRANSFER");
	var lastValue		= getLastValueTimestamp(nodesRcp);

	lastValue = API.formatNumber(lastValue, NUMBER_FORMAT, 19);

	addHeader(rootCash, "Transfer In", RPTDUMMY);
	addOperation("Manager",			managerId,		false);
	addLine();
	addOperation("Transfer In",	lastValue,	false);
	addLine();
	addLine();
	addFooter(rootCash);

	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Cash Transfer Out report.
 * Needed data types: CASH
 * @author Celso Fernandes
 */
function reportCashTransferOut (config, data)
{
	if(init(config, data, Array("CASH"), "TRNSO") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= currentOperator.@name;
	var operatorId		= Number(currentOperator.@id);
	var managerId		= Number(rootConfig.Manager.@id);
	var nodesRcp		= currentOperator.CashDetails.TransfersOut.(@type=="TRANSFER");
	var lastValue		= getLastValueTimestamp(nodesRcp);

	lastValue = API.formatNumber(lastValue, NUMBER_FORMAT, 19);

	addHeader(rootCash, "Transfer Out", RPTDUMMY);
	addOperation("Manager",			managerId,		false);
	addLine();
	addOperation("Transfer Out",	lastValue,	false);
	addLine();
	addLine();
	addFooter(rootCash);
	
	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Other Cards Transfer In report.
 * Needed data types: CASH
 * @author rcapello
 */
function reportOtherCardsTransferIn(config, data)
{
	if (init(config, data, Array("CASH"), "OCARDI") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName = currentOperator.@name;
	var operatorId = Number(currentOperator.@id);
	var managerId = Number(rootConfig.Manager.@id);
	var nodesRcp = currentOperator.CashDetails.TransfersIn.(@type=="OTHER_CARDS");
	var lastValue = getLastValueTimestamp(nodesRcp);

	lastValue = API.formatNumber(lastValue, NUMBER_FORMAT, 19);
	
	addHeader(rootCash, "Other Cards Transfer In", RPTDUMMY);
	addOperation("Manager", managerId, false);
	addLine();
	addOperation("Transfer In", lastValue, false);
	addLine();
	addLine();
	addFooter(rootCash);
	
	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Other Cards Transfer Out report.
 * Needed data types: CASH
 * @author rcapello
 */
function reportOtherCardsTransferOut(config, data)
{
	if (init(config, data, Array("CASH"), "OCARDO") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName = currentOperator.@name;
	var operatorId = Number(currentOperator.@id);
	var managerId = Number(rootConfig.Manager.@id);
	var nodesRcp = currentOperator.CashDetails.TransfersOut.(@type=="OTHER_CARDS");
	var lastValue = getLastValueTimestamp(nodesRcp);

	lastValue = API.formatNumber(lastValue, NUMBER_FORMAT, 19);
	
	addHeader(rootCash, "Other Cards Transfer Out", RPTDUMMY);
	addOperation("Manager", managerId, false);
	addLine();
	addOperation("Transfer Out", lastValue, false);
	addLine();
	addLine();
	addFooter(rootCash);
	
	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the Additional Float report.
 * Needed data types: CASH
 * @author Celso Fernandes
 */
function reportAdditionalFloat (config, data)
{
	if(init(config, data, Array("CASH"), "ADFLT") != 0) {
		return getResponse();
	}
	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= currentOperator.@name;
	var operatorId		= Number(currentOperator.@id);
	var managerId		= Number(rootConfig.Manager.@id);
	var nodesRcp		= currentOperator.CashDetails.TransfersIn.(@type=="ADDITIONAL_FLOAT");
	var lastValue		= getLastValueTimestamp(nodesRcp);

	lastValue = API.formatNumber(lastValue, NUMBER_FORMAT, 19);

	addHeader(rootCash, "Additional Float", RPTDUMMY);
	addOperation("Manager",			managerId,		false);
	addLine();
	addOperation("Additional Float",	lastValue,	false);
	addLine();
	addLine();
	addFooter(rootCash);

	return getResponse();
}

/** Adds an operation line */
function addOperation(name, value, left)
{
	var line = API.setOnLeft(name, 18) + ": ";
	if(left) {
		line += API.setOnLeft(value, 19);
	}else {
		line += API.setOnRight(value, 19);
	}
	addLine(line);
}

/** Calculate total inital float on the given node */
function getLastValueTimestamp(nodes)
{
	var value = 0;
	var timestamp = "20000101 00:00:00";
	var nodesTransfer = nodes.Transfer;
	if(nodesTransfer != null) {
		for each (i in nodesTransfer) {
			if(String(i.@timestamp) > String(timestamp)){
				timestamp = String(i.@timestamp);
				value = Number(i.@amount);
			}
		}
	}
	return Number(value);
}

/* Adds the missing lines */
function addMissingDates(reportType, missingDates) {
	switch(reportType) {
	case RPTCASHBYPERIOD:
	case RPTCASHBYPERIODSW:
	case RPTPMIXBYPERIOD:
	case RPTPMIXBYPERIODSW:
	case RPTSALEHOURBYPERIOD:
	case RPTSALEHOURBYPERIODSW:
	case RPTSOSFC:
	case RPTSOSFCSW:
	case RPTSOSHOURBYDATE:
	case RPTSOSDTHOUR:
	case RPTSOSDTDIAG:
	case RPTSOSMFY:
	case RPTSOSCSR:

		if(missingDates != "") {
			//var hlp=new BusinessObjectHelper;
			//var message=hlp.getSysMessage("MSG_REPORT_MISSING_DATES");
			var message = API.getLocalMsg("MSG_REPORT_MISSING_DATES");
			addLine(message);
			addLine();
			addLine(missingDates);
		}
		break;
	}
}

function listMissingDates(genRoot)
{
	var retVal="";
	var breakLine=3;	// break every 3 dates
	var dataCounter=1;

	nodesMissingDates=genRoot.MissingDates.Date;
	var nodesMissingDatesSize = nodesMissingDates.length();

	if(nodesMissingDatesSize>0) {
		var bAllDate=true;

		// CASH uses tag businessDate.
		var workDate=String(genRoot.@businessDate);
		if(0==workDate.length) {
			// PMIX and HS uses businessDay
			workDate=String(genRoot.@businessDay);
			if(0==workDate.length) {
				// production uses productionBusinessDate
				workDate=String(genRoot.@productionBusinessDate);
				if(0!=workDate.length) {
					retVal=genRoot.@productionNodeId+": ";
				}
			}
			else {
				retVal="POS"+genRoot.@id+": ";
			}
		}
		else {
			retVal="POS"+genRoot.@id+": ";
		}

		for(var i = 0; i < nodesMissingDatesSize; i++) {
			var date=String(nodesMissingDates[i]);
			if(true==bAllDate) {
				if(workDate!=date) {
					bAllDate=false;
				}
				if(i==nodesMissingDatesSize-1) {
					// check if the last missing day is the final date of the period
					if(workDate!=String(genRoot.@finalBusinessDate)) {
						bAllDate=false;
					}
				}
				workDate=API.getNextDay(workDate);
			}
			
			retVal=retVal+date.substring(0,4)+"-"+date.substring(4,6)+"-"+date.substring(6,8);
			if(i<nodesMissingDatesSize-1) {
				retVal=retVal+", ";
			}

			dataCounter++;
			if(dataCounter>=breakLine) {
				dataCounter=0;
				retVal=retVal+"\n";
			}
		}
		if(true==bAllDate) {
			// all dates are missing - show only the POS name
			retVal="POS"+genRoot.@id;
		}
		retVal=retVal+"\n";
	}
return (retVal);
}
	
function listMissingDatesSW(genRootSW)
{
	var retVal="";
	nodesPOSSize=genRootSW.length();
	for(iPOS=0; iPOS<nodesPOSSize; iPOS++) {
		var genRoot=genRootSW[iPOS];
		retVal=retVal+listMissingDates(genRoot);
	}
	return (retVal);
}

//###########################################################
//Cash Reports
//###########################################################
/**
 * PUBLIC
 * Responsible for formating the Cashier Flash result report.
 * Needed data types: CASH
 * @author Celso Fernandes
 */
function reportCashierFlash	(config, data)
{
	//CASHIER FLASH REPORT
	if(init(config, data, Array("CASH", "PMIX"), "CFLSH") != 0) {
		return getResponse();
	}

	var reportType = RPTCASHIERFLASH;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Drawer Change report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportDrawerChange	(config, data)
{
	//DRAWER CHANGE REPORT
	if(init(config, data, Array("CASH", "PMIX"), "DRCHG") != 0) {
		return getResponse();
	}
	var reportType = RPTCASHDRAWERCHANGE;
	var root = rootCash.POS;
	if(String(root.OperatorSession.@logout) != ""){
		for each (i in root) {
			flagTypePos     = String(i.@podShort);
			flagTypePodDT	= (String(i.@podShort)=="DT");
			flagTypePodWT	= (String(i.@podShort)=="WT");
			flagTypePodFC	= (String(i.@podShort)=="FC");

			for each (j in i.OperatorSession) {
				if(String(j.@logout) != "") {
					var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, j, reportType);
					if(XMLCashRpt==null) {
						return getResponse();
					}
					addLine(SEP_RR);
					genericCashReport(XMLCashRpt, reportType);
					addLine(SEP_ER);
					addLine();
				}
			}
		}
	}
	else{
		addLine("ERROR:There is not an Operator Session Closed");
	}
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Cashier Close By Date report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportCashierCloseByDate(config, data)
{
 	if(init(config, data, Array("CASH", "PMIX"), "CNCSH") != 0){
		return getResponse();
	}

	var root = rootCash.POS;
	var reportType = RPTCASHIERCLOSEBYDATE;
	for each (j in root) {
		if(j.@status != "CLOSED"){
			addLine("ERROR:Day not close.");
			return getResponse();
		}
		var rootnew = j.OperatorSession;
		if(rootnew.length() == 0){
			addLine("ERROR:There is no data for business date entered.");
			return getResponse();
		}
		for each (i in rootnew) {
			var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, i, reportType);
			if(XMLCashRpt==null) {
				return getResponse();
			}
			addLine(SEP_RR);
			genericCashReport(XMLCashRpt, reportType);
			addLine(SEP_ER);
			addLine();
		}
	}
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Cashier By Date report.
 * Needed data types: CASH, PMIX
 * @author Mauricio
 * @since NPS-10575
 */
function reportCashByDate	(config, data) 
{
	//CASH REPORT BY DATE
	if(init(config, data, Array("CASH", "PMIX"), "CSPRD") != 0) {
		return getResponse();
	}	
	
	var reportType = RPTCASHBYDATE;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Cashier By Period report.
 * Needed data types: CASH, PMIX
 * @author Celso 
 */
function reportCashByPeriod	(config, data)
{
	//CASH REPORT BY PERIOD
	if(init(config, data, Array("CASH", "PMIX"), "CSPRD") != 0) {
		return getResponse();
	}

	var reportType = RPTCASHBYPERIOD;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Cashier By Date StoreWide report.
 * Needed data types: CASH, PMIX
 * @author Mauricio
 * @since NPS-10575
 */
function reportCashByDateStoreWide(config, data) 
{
	//CASH REPORT BY DATE
 	if(init(config, data, Array("CASH", "PMIX"), "CSDSW") != 0){
		return getResponse();
	}	
	
	var reportType = RPTCASHBYDATESW;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
};
/**
 * PUBLIC
 * Responsible for formating the Cashier By Period StoreWide report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportCashByPeriodStoreWide(config, data)
{
	//CASH REPORT BY PERIOD
 	if(init(config, data, Array("CASH", "PMIX"), "CSPSW") != 0){
		return getResponse();
	}

	var reportType = RPTCASHBYPERIODSW;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Cashier Close By Date report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportDailyCloseByDate(config, data)
{
	//DAILY CLOSE RPT BY DATE
	if(init(config, data, Array("CASH", "PMIX"), "DLCDT") != 0) {
		return getResponse();
	}

	var reportType = RPTCASHDAILYCLOSEBYDATE;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the EndDay StoreWide report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportEndDayStoreWide(config, data)
{
	//END DAY REPORT STORE WIDE
 	if(init(config, data, Array("CASH", "PMIX"), "EDDSW") != 0){
		return getResponse();
	}

	var reportType = RPTCASHENDDAYSTOREWIDE;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Accumulated report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportAccumulatedCash(config, data)
{
	//ACCUMULATED CASH REPORT
	if(init(config, data, Array("CASH", "PMIX"), "ACCSH") != 0) {
		return getResponse();
	}

	var reportType = RPTCASHACCUMULATED;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
};

var stepCount=0;
function addStep() { 
	stepCount++;
	return stepCount+" "; 
}
function resetSteps() { stepCount = 0;} 




/**
 * PUBLIC
 * Responsible for formating the report used to populate the ISP Malfuction screen. 
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportISPMalfunction(config, data)
{
	//ACCUMULATED CASH REPORT
	if(init(config, data, Array("CASH", "PMIX"), "ACCSH") != 0) {
		return getResponse();
	}

	resetSteps();
	var reportType = RPTCASHCONSOLIDATED;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) { return getResponse(); }
		
	/* save date for future use */
	var businessDate	= getBusinessDate(rootCash.POS);
	if(businessDate != "N/A") {
		businessDate	= API.formatDate(businessDate, "yyyyMMdd");
	} else{
		businessDate	= API.formatDate(rootCash.@creationDate, "yyyyMMdd");
	}		

	var ctx=new SessionContext;
	ctx.set("ISPMAL_DATE",businessDate,0);
	
	var title = "POS ISP Malfunction Report";
	var putDataCashier = false;
	addMAlHeader(rootCash, title, reportType);

	addOperationLine("Manager",					":", "",	XMLCashRpt.Manager.@value+"");
	addLine();
	
	/* Page 1 -forever totals */
	addLine(SEP_DL);
	addLine("Page 1:");
	addLine(SEP_DL);
	/* NVS-5562 -increase number size */ 
	addOperationLine("Close reading",			" ", "",XMLCashRpt.Closereading.@value, "##,###,##0.00");
	
	for each (rootPos in rootCash.POS){
		addOperationLine("REGISTER "+rootPos.@id, "=", "",rootPos.@finalGT);	
	} 
	
	addLine();
	
	/* Page 2 */
	addLine(SEP_DL);
	addLine("Page 2: Astrisks strike through lines\nwhere the POS cannot generate data.\nPlease use alternative \n methods to obtain data.");
	addLine(SEP_DL);	
	addOperationLine("TOTAL DIFFERENCE",			"=", "",							XMLCashRpt.DIFFERENCE.@value);
	addOperationLine("POS Overring",			"-", XMLCashRpt.Overring.@tc,		XMLCashRpt.Overring.@amount);
	addOperationLine("Cash Refunds",			"-", XMLCashRpt.CashRefunds.@tc,	XMLCashRpt.CashRefunds.@amount);
	addOperationLine("Cashless Ref",			"-", XMLCashRpt.CashlessRefunds.@tc,XMLCashRpt.CashlessRefunds.@amount);
	addOperationLine("Other Receipts",		"-", XMLCashRpt.OtherReceipts.@tc,	XMLCashRpt.OtherReceipts.@amount);
	addOperationLine("Gift Cert Sold",		"-", XMLCashRpt.GiftCertSold.@tc,	XMLCashRpt.GiftCertSold.@amount);
	addOperationLine(" Cert Sold A",			"-", XMLCashRpt.GiftCertASold.@tc,"");
	addOperationLine(" Cert Sold B",			"-", XMLCashRpt.GiftCertBSold.@tc,"");
	addOperationLine("Gift Card Sold",		"-", XMLCashRpt.GiftCardSold.@tc,	XMLCashRpt.GiftCardSold.@amount);
	addLine("Man Ref/Ovrrg ********************");
	addOperationLine("GROSS SALES",			":","",XMLCashRpt.GROSSSALES.@value);
	addOperationLine("Tax In",				" ", "",XMLCashRpt.EatIntax.@value);
	addOperationLine("Tax Out",				" ", "",XMLCashRpt.TakeOuttax.@value);
	//UberEats Others
	//addOperationLine("Tax Other",				" ", "",XMLCashRpt.Gardentax.@tc);
	addOperationLine("Tax GDN",				" ", "",0);
	addOperationLine("Total Tax",			"-","",( Number(XMLCashRpt.EatIntax.@value)+Number(XMLCashRpt.TakeOuttax.@value) )); //+Number(XMLCashRpt.Gardentax.@tc)
	addLine();
	addOperationLine("ALL NET SALE",			"=", "",	XMLCashRpt.TOTALNETSALES.@value);
	addOperationLine("Billable Sales",		"-", XMLCashRpt.BillableSales.@tc,	XMLCashRpt.BillableSales.@amount);
	//NVS-7060 - msilva - UberEats Cash Report
	addOperationLine("Delivery Sales",		"-", XMLCashRpt.deliveryBillableSale.@tc,	XMLCashRpt.deliveryBillableSale.@amount);
	addOperationLine("Cashless Sales",		"-", XMLCashRpt.CashlessSales.@tc,	XMLCashRpt.CashlessSales.@amount);
	addOperationLine("Gift Cert Redm",		"-", (Number(XMLCashRpt.GiftCertBSold.@tc)+Number(XMLCashRpt.GiftCertASold.@tc)),	(Number(XMLCashRpt.GiftCertASold.@amount)+Number(XMLCashRpt.GiftCertBSold.@amount)));
	addOperationLine(" Cert Redm A",			"-", XMLCashRpt.GiftCertASold.@tc,"");
	addOperationLine(" Cert Redm B",			"-", XMLCashRpt.GiftCertBSold.@tc,"");
	addOperationLine("Gift Card Redm",		"-", XMLCashRpt.GiftCardRedeem.@tc,XMLCashRpt.GiftCardRedeem.@amount);
	addOperationLine("Expected CASH",			"=", "", XMLCashRpt.Expectedcash.@value);
	addLine("Actual Deposit ********************");
	addLine("Crime Loss Dep ********************");
	addLine("Petty Cash Reim********************");
	addLine("Cash Over/Short********************");
		
	/* Page 3 */
	addLine(SEP_DL);
	addLine("Page 3:");
	addLine(SEP_DL);	
	addOperationLine("Transactions",		" ",	 	XMLCashRpt.TotalTCAC.@tc,"");
	addOperationLine("NonProd no HpyToy", 	" ", "",	XMLCashRpt.NonProductSales.@value);
	addOperationLine("Eat In Sales",		" ",		XMLCashRpt.NetsalesEatIn.@tc,	XMLCashRpt.NetsalesEatIn.@amount);
	addOperationLine("Take Out Sales",	" ",		XMLCashRpt.NetsalesTakeOut.@tc,XMLCashRpt.NetsalesTakeOut.@amount);
	//UberEats Others
	//addOperationLine("Other Sales",	" ",		XMLCashRpt.NetsalesGarden.@tc,XMLCashRpt.NetsalesGarden.@amount);
	addOperationLine("Garden Sales",		" ",		0,0);
	addOperationLine("Employee Meals",	" ", 	XMLCashRpt.EmpMealdiscount.@tc,XMLCashRpt.EmpMealdiscount.@amount);
	addOperationLine("Manager Meals",		" ", 	XMLCashRpt.MgrMealdiscount.@tc,XMLCashRpt.MgrMealdiscount.@amount);
	addOperationLine("Promo Sales",		" ", 	XMLCashRpt.PROMO.@tc,		 XMLCashRpt.PROMO.@amount);
	addOperationLine("Discount Sales",	" ", 	XMLCashRpt.Amountdiscount.@tc, XMLCashRpt.Amountdiscount.@amount);
	addOperationLine("T-RED",			" ", 	toInt(XMLCashRpt.RedAfterTotal.@tc),	XMLCashRpt.RedAfterTotal.@amount);
	addLine("Suggested Sell ********************");
	addOperationLine("Tax Exempt",		" ", 	XMLCashRpt.NOTAXSALES.@tc,	 XMLCashRpt.NOTAXSALES.@value);
	addLine("Product Net ********************");
	addOperationLine("Breakfast",		" ", 	XMLCashRpt.NetsalesBfast.@tc,	XMLCashRpt.NetsalesBfast.@amount);
	addOperationLine("Drivethru",		" ", 	XMLCashRpt.NetsalesDThru.@tc,	XMLCashRpt.NetsalesDThru.@amount);	
	addOperationLine("Coupon A",			" ", 	XMLCashRpt.CouponA.@tc,		XMLCashRpt.CouponA.@amount);
	addOperationLine("Coupon B",			" ", 	XMLCashRpt.CouponB.@tc,		XMLCashRpt.CouponB.@amount);
	addOperationLine("Coupon C",			" ", 	XMLCashRpt.CouponC.@tc,		XMLCashRpt.CouponC.@amount);
	addOperationLine("Coupon D",			" ", 	XMLCashRpt.CouponD.@tc,		XMLCashRpt.CouponD.@amount);
	addOperationLine("Coupon E",			" ", 	XMLCashRpt.CouponE.@tc,		XMLCashRpt.CouponE.@amount);	
	addOperationLine("For Curr A",		" ", 	XMLCashRpt.ForeignAmount.@tc,	XMLCashRpt.ForeignAmount.@amount);	
	addOperationLine("For Curr B",		" ", 0,	0);	
	addOperationLine("For Curr C",		" ", 0,	0);	
	addOperationLine("For Curr D",		" ", 0,	0);	
	addOperationLine("For Curr E",		" ", 0,	0);	

	addFooter(rootCash);
	return getResponse();
	
	/**
	 * Adds an operation line like this:
	 * "TOTAL ITEMS       =     114    6,145,756"
	 * @param name operation name ("TOTAL ITEMS")
	 * @param charSeparator separator char ("=")
	 * @param qty quantity ("114")
	 * @param value value ("6,145,756")
	 * @param numberFormat (optional) pass "" if you dont want to format the number, or any number format to use
	 */
	function addOperationLine(name, charSeparator, qty, value, numberFormat)
	{
		if(!numberFormat) {
			numberFormat = NUMBER_FORMAT; // Default value
		}
		if(numberFormat != "" && typeof(value) != "string" && value != null) {
			value = API.formatNumber(Number(value), numberFormat, 12);
		}else if(value == null) {
			value = "";
		}
		if(charSeparator == null && qty == null) { // Gives more space to 'name'
			// 26: name, 1: nothing, 12: value
			var line = API.setOnLeft(name, 26)
				+ " "
				+ API.setOnRight(value, 12);
		}else {
			// 17: name, 3: sep, 6: qtd, 1: nothing, 12: value
			var line = API.setOnLeft(name, 17)
			+ " " + charSeparator + " "
			+ API.setOnRight(qty, 6)
			+ " "
			+ API.setOnRight(value, 12);
		}
		addLine(line);
	}
}

/**
 * PRIVATE
 * Get the POD type
 * Needed data types: complete root cash, operator Id and operator login time
 * @author MY
 */
function GetPODType(rootCash, operatorId, opLoginTime) {
	var podType="FC";
	for each (indPOS in rootCash.POS.(@podShort=="DT")) {
		for each (indOperator in indPOS.OperatorSession) {
			if((Number(indOperator.@id)==Number(operatorId)) && (indOperator.@login==opLoginTime)) {
				podType="DT";
				break;
			}
		}
	}
	return (podType);
	
};
/**
 * PUBLIC
 * Responsible for formating the Consolidated report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportConsolidatedCash(config, data)
{
	//CONSOLIDATED CASH REPORT
 	if(init(config, data, Array("CASH", "PMIX"), "CNCSH") != 0){
		return getResponse();
	}

	var reportType = RPTCASHCONSOLIDATED;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, reportType);
	if(XMLCashRpt==null) {
		return getResponse();
	}
	genericCashReport(XMLCashRpt, reportType);
	return getResponse();
};

/**
 * PRIVATE
 * This function implements a generic CASH report
 * Needed data types: CASH, PMIX
 * @author Celso Fernandes
 */
function genericCashReport(XMLCashRpt, reportType)
{
	var putDataCashier = false;
	var title;

	if(rootCash.@errflag=="NODATA") {
		var message = API.getLocalMsg("MSG_REPORT_NO_DATE_FOR_PERIOD");
		addLine("ERROR:");
		addLine(message);
		return;
	}

	switch(reportType) {
	case RPTCASHIERFLASH:
	    	title 	       = "Cashier Flash Report";
    		putDataCashier = true;
       	 break;
	case RPTCASHDRAWERCHANGE:
    case RPTOPERATRORLOGOUT:
	case RPTCASHIERCLOSEBYDATE:
	    	title = "Cashier Report";
    		putDataCashier = true;
       	 break;
	case RPTREMDRWCHANGE:
	    	title = "Remote "+rootConfig.CustomData.online+" Drawer Change";
    		putDataCashier = true;
       	 break;
	case RPTREMLOGIN:
	    	title = "Remote "+rootConfig.CustomData.online+" login";
    		putDataCashier = true;
       	 break;
	case RPTCASHBYDATE:
	case RPTCASHBYPERIOD:
	case RPTCASHACCUMULATED:	
	case RPTCASHBYDATESW:
   	case RPTCASHBYPERIODSW:       	
	case RPTCASHCONSOLIDATED:
	    	title = "Cashier Report";
	    	putDataCashier = false;
   		break;
    case RPTENDOFDAY:
    case RPTCASHDAILYCLOSEBYDATE:
    case RPTCASHENDDAYSTOREWIDE:
	    	title = "End of Day";
	    	putDataCashier = false;
   		break;
    default:
   	    	title = "ERROR";
		    putDataCashier = true;
       	 break;
	}
	
	addHeader(rootCash, title, reportType);

	// missing dates
	addMissingDates(reportType, String(XMLCashRpt.missingDates.@value));

	addOperationLine("Manager",				":", "",							XMLCashRpt.Manager.@value+"");
	if(putDataCashier) {
		addOperationLine("Cashier ID",		":", "",							XMLCashRpt.CashierID.@value+"");
		{
		// 18: name, 2: sep, 19: value
		var line = API.setOnLeft("Cashier", 18)
		+ ":" + " "
		+ XMLCashRpt.Cashier.@value;
		addLine(line);
		}

		addOperationLine("Initial Float",	":", "",							API.formatNumber(XMLCashRpt.InitialFloat.@value, NUMBER_FORMAT, 12));
		addOperationLine("Open time",		":", "",							String(XMLCashRpt.Opentime.@value));
		addOperationLine("Close time",		":", "",							String(XMLCashRpt.Closetime.@value));
		addLine();
	}
	addLine();
	addOperationLine("Close reading",		" ", "",							XMLCashRpt.Closereading.@value);
	addOperationLine("Opening reading",		"-", "",							XMLCashRpt.Openingreading.@value);
	addOperationLine("DIFFERENCE",			"=", "",							XMLCashRpt.DIFFERENCE.@value);
	addLine();
	addOperationLine("Overring",			"-", XMLCashRpt.Overring.@tc,		XMLCashRpt.Overring.@amount);
	addOperationLine("Cash Refunds",		"-", XMLCashRpt.CashRefunds.@tc,	XMLCashRpt.CashRefunds.@amount);
	addOperationLine("Cashless Refunds",	"-", XMLCashRpt.CashlessRefunds.@tc,XMLCashRpt.CashlessRefunds.@amount);
	addOperationLine("Other Receipts",		"-", XMLCashRpt.OtherReceipts.@tc,	XMLCashRpt.OtherReceipts.@amount);
	addOperationLine("Gift Cert Sold",		"-", XMLCashRpt.GiftCertSold.@tc,	XMLCashRpt.GiftCertSold.@amount);
	addOperationLine("Gift Card Sold",		"-", XMLCashRpt.GiftCardSold.@tc,	XMLCashRpt.GiftCardSold.@amount);
	addOperationLine("GROSS SALES",			":", "",							XMLCashRpt.GROSSSALES.@value);
	addLine();
	addOperationLine("",					" ", "TAX",							"NET", "");
	addOperationLine(" NO TAX SALES",		" ", "",							XMLCashRpt.NOTAXSALES.@value);
	{
	// 20: name, 8: sep, 12: value
	var line = API.setOnLeft(" NON-TAXABLE SALES", 19)
	+ "        "
	+ API.setOnRight(API.formatNumber(XMLCashRpt.NONTAXABLESALES.@value, NUMBER_FORMAT, 12), 12);
	addLine(line);
	}

	{   // Format new line
		// 16: name, 1: sep, 9: qtd, 1: nothing, 12: value
		var line = API.setOnLeft(" TAXABLE SALES", 16)
		+ " "
		+ API.setOnRight(API.formatNumber(XMLCashRpt.TAXABLESALES.@tc, "##,##0.00", 9), 9)
		+ " "
		+ API.setOnRight(API.formatNumber(XMLCashRpt.TAXABLESALES.@amount, NUMBER_FORMAT, 12), 12);
		addLine(line);
	}

	addLine();
	addOperationLine("TOTAL NET SALES",		"=", "",							XMLCashRpt.TOTALNETSALES.@value);
	addOperationLine("Non-Product Sales",	"-", "",							XMLCashRpt.NonProductSales.@value);
	addOperationLine("PRODUCT sales",		"=", "",							XMLCashRpt.PRODUCTsales.@value);
	addLine();
	addOperationLine("DIFFERENCE",			"=", "",							XMLCashRpt.DIFFERENCE.@value);
	addOperationLine("Overring",			"-", XMLCashRpt.Overring.@tc,		XMLCashRpt.Overring.@amount);
	addOperationLine("Cash Refunds",		"-", XMLCashRpt.CashRefunds.@tc,	XMLCashRpt.CashRefunds.@amount);

	addOperationLine("Gift Card Redeem",	"-", XMLCashRpt.GiftCardRedeem.@tc,	XMLCashRpt.GiftCardRedeem.@amount);
	addOperationLine("Cashless Sales",		"-", XMLCashRpt.CashlessSales.@tc,	XMLCashRpt.CashlessSales.@amount);
	addOperationLine("Cash Transfer In",	"+", XMLCashRpt.CashTransferIn.@tc,	XMLCashRpt.CashTransferIn.@amount);
	addOperationLine("Cash Transfer Out",	"-", XMLCashRpt.CashTransferOut.@tc,XMLCashRpt.CashTransferOut.@amount);
	//UberEats Others
	//addOperationLine("Cash Transfer Other",	 XMLCashRpt.CashTransferOther.@tc,XMLCashRpt.CashTransferOther.@amount);
	addOperationLine("Billable Sales",		"-", XMLCashRpt.BillableSales.@tc,	XMLCashRpt.BillableSales.@amount);
	//NVS-7060 - msilva - UberEats Cash Report
	addOperationLine("Delivery Sales",		"-", XMLCashRpt.deliveryBillableSale.@tc,	XMLCashRpt.deliveryBillableSale.@amount);
	//NVS-609  RPS  10-4-2011
	//addOperationLine("$1 Gift Certif.",		"-", XMLCashRpt.GiftCertASold.@tc,	XMLCashRpt.GiftCertASold.@amount);
	//addOperationLine("$5 Gift Book",		"-", XMLCashRpt.GiftCertBSold.@tc,	XMLCashRpt.GiftCertBSold.@amount);
	addOperationLine("$1 Gift Certif.",		"-", XMLCashRpt.GiftCertif.@tc,		XMLCashRpt.GiftCertif.@amount);
	addOperationLine("$5 Gift Book",		"-", XMLCashRpt.GiftBook.@tc,		XMLCashRpt.GiftBook.@amount);
	// end NVS-609
	addLine();
	addOperationLine("COMPUTED CASH",		"=", "",							XMLCashRpt.COMPUTEDCASH.@value);
	addOperationLine("Initial Float",		"+", "",							API.formatNumber(XMLCashRpt.InitialFloat.@value, NUMBER_FORMAT, 12));
	addOperationLine("Cash Skims",			"-", "",							XMLCashRpt.CashSkims.@value);
	addOperationLine("Expected cash",		"=", "",							XMLCashRpt.Expectedcash.@value);
	addLine();
	addLine("Tender Analysis:");
	addOperationLine("Cash Cash US$",		"=", XMLCashRpt.CashCashUS.@tc,		XMLCashRpt.CashCashUS.@amount);
	
	var paramVal  = xmlStoreDB.Configurations.Configuration.(@type=="Store.wide").Section.(@name=="ForeignCurrency").Parameter.(@name=="SelectedCurrency").@value;
	var tempStr;
	if (paramVal.length() != 0 && paramVal != "OFF") {
		tempStr = paramVal;
	} else {
		tempStr = "Foreign Cur";
	}
	addOperationLine(tempStr,			"=", XMLCashRpt.ForeignAmount.@tc,	XMLCashRpt.ForeignAmount.@amount);
	addOperationLine("Coupon A",			"+", XMLCashRpt.CouponA.@tc,		XMLCashRpt.CouponA.@amount);
	addOperationLine("Coupon B",			"+", XMLCashRpt.CouponB.@tc,		XMLCashRpt.CouponB.@amount);
	addOperationLine("Coupon C",			"+", XMLCashRpt.CouponC.@tc,		XMLCashRpt.CouponC.@amount);
	addOperationLine("Coupon D",			"+", XMLCashRpt.CouponD.@tc,		XMLCashRpt.CouponD.@amount);
	addOperationLine("Coupon E",			"+", XMLCashRpt.CouponE.@tc,		XMLCashRpt.CouponE.@amount);
	addOperationLine("Billable Sales",		"+", XMLCashRpt.BillableSales.@tc,	XMLCashRpt.BillableSales.@amount);
	//NVS-7060 - msilva - UberEats Cash Report
	addOperationLine("Delivery Sales",		"+", XMLCashRpt.deliveryBillableSale.@tc,	XMLCashRpt.deliveryBillableSale.@amount);
	//NVS-609  RPS  10-4-2011
	//addOperationLine("$1 Gift Certif.",		"-", XMLCashRpt.GiftCertASold.@tc,	XMLCashRpt.GiftCertASold.@amount);
	//addOperationLine("$5 Gift Book",		"-", XMLCashRpt.GiftCertBSold.@tc,	XMLCashRpt.GiftCertBSold.@amount);
	addOperationLine("$1 Gift Certif.",		"-", XMLCashRpt.GiftCertif.@tc,		XMLCashRpt.GiftCertif.@amount);
	addOperationLine("$5 Gift Book",		"-", XMLCashRpt.GiftBook.@tc,		XMLCashRpt.GiftBook.@amount);
	// end NVS-609
	addOperationLine("Cashless Sales",		"+", XMLCashRpt.CashlessSales.@tc,	XMLCashRpt.CashlessSales.@amount);
	addOperationLine("Gift Card Redeem",	"+", XMLCashRpt.GiftCardRedeem.@tc,	XMLCashRpt.GiftCardRedeem.@amount);

 	// Get tender information
	if(XMLCashRpt.nodesTender != null) {
		lineDiff_array = new Array();
		var nodesTender = XMLCashRpt.nodesTender;
		var nodesTenderSize = nodesTender.length();

		for(var i = 0; i < nodesTenderSize; i++) {
			var nodeTender = nodesTender[i];
		    var tcTenderId				= getNumberAttribute(nodeTender, "id");
			var	excessCount				= getNumberAttribute(nodeTender, "excessCount");
			var	excessAmount			= getNumberAttribute(nodeTender, "excessAmount");
			if (excessCount != 0) {
				addArrayDiffLine(lineDiff_array, i, "Dif " + rootCash.TenderTable.TenderType.(@id==tcTenderId).@name,	"-", excessCount,	excessAmount);
			}
		}
		addDiffLine(lineDiff_array);
	}

	addLine();
	addOperationLine("Gift card cashout",	" ", XMLCashRpt.Giftcardcashout.@tc,XMLCashRpt.Giftcardcashout.@amount);
	addLine();
	addOperationLine("Total TC & AC",		" ", XMLCashRpt.TotalTCAC.@tc,		XMLCashRpt.TotalTCAC.@amount);
	addLine();
	addOperationLine("Net sales D/Thru",	" ", XMLCashRpt.NetsalesDThru.@tc,	XMLCashRpt.NetsalesDThru.@amount);
	addOperationLine("D/Thru %",			" ", "",							XMLCashRpt.PercentDThru.@value);
	addOperationLine("Cars",				" ", XMLCashRpt.Cars.@value,		null);

	if(flagTypePodWT) {
		addOperationLine("Net sales W/Thru",	" ", XMLCashRpt.NetsalesWThru.@tc,	XMLCashRpt.NetsalesWThru.@amount);
		addOperationLine("W/Thru %",			" ", "",							XMLCashRpt.PercentWThru.@value);
	}

	addOperationLine("Net sales B'fast",	" ", XMLCashRpt.NetsalesBfast.@tc,	XMLCashRpt.NetsalesBfast.@amount);
	addOperationLine("Breakfast %",			" ", "",							XMLCashRpt.BreakfastPercent.@value);
	addLine();
	addOperationLine("Net sales Eat In",	" ", XMLCashRpt.NetsalesEatIn.@tc,	XMLCashRpt.NetsalesEatIn.@amount);
	addOperationLine("NET SALES TAKE OUT",	"", XMLCashRpt.NetsalesTakeOut.@tc,XMLCashRpt.NetsalesTakeOut.@amount);
	//UberEats Others
	//addOperationLine("NET sales Other",		" ", XMLCashRpt.NetsalesGarden.@tc,	XMLCashRpt.NetsalesGarden.@amount);
	//addOperationLine("TAKE OUT TAX",		" ", "",							XMLCashRpt.TakeOuttax.@value);
	addOperationLine("Take Out %",			" ", "",							XMLCashRpt.TakeOutPercent.@value);

	/* Add enhance tax reporting */
	addOperationLine("EAT IN TAX",				"=", "",							XMLCashRpt.EatIntax.@value);
	addOperationLine(" "+XMLCashRpt.Tax_1.@eiLabel,	"=", "",							XMLCashRpt.Tax_1.@eiAmt);
	addOperationLine(" "+XMLCashRpt.Tax_2.@eiLabel,	"=", "",							XMLCashRpt.Tax_2.@eiAmt);
	addOperationLine(" "+XMLCashRpt.Tax_3.@eiLabel,	"=", "",							XMLCashRpt.Tax_3.@eiAmt);
	addOperationLine(" "+XMLCashRpt.Tax_4.@eiLabel,	"=", "",							XMLCashRpt.Tax_4.@eiAmt);
	addOperationLine("TAKE OUT TAX",				"=", "",							XMLCashRpt.TakeOuttax.@value);
	addOperationLine(" "+XMLCashRpt.Tax_1.@toLabel,	"=", "",							XMLCashRpt.Tax_1.@toAmt);
	addOperationLine(" "+XMLCashRpt.Tax_2.@toLabel,	"=", "",							XMLCashRpt.Tax_2.@toAmt);
	addOperationLine(" "+XMLCashRpt.Tax_3.@toLabel,	"=", "",							XMLCashRpt.Tax_3.@toAmt);
	addOperationLine(" "+XMLCashRpt.Tax_4.@toLabel,	"=", "",							XMLCashRpt.Tax_4.@toAmt);

	//UberEats Others
	//addOperationLine("OTHER TAX",				"=", "",							XMLCashRpt.Gardentax.@tc);
	//addOperationLine(" "+XMLCashRpt.Tax_1.@otherLabel,	"=", "",							XMLCashRpt.Tax_1.@otherAmt);
	//addOperationLine(" "+XMLCashRpt.Tax_2.@otherLabel,	"=", "",							XMLCashRpt.Tax_2.@otherAmt);
	//addOperationLine(" "+XMLCashRpt.Tax_3.@otherLabel,	"=", "",							XMLCashRpt.Tax_3.@otherAmt);
	//addOperationLine(" "+XMLCashRpt.Tax_4.@otherLabel,	"=", "",							XMLCashRpt.Tax_4.@otherAmt);	

	addOperationLine("TOTAL DEPOSITS",					"=", "",							XMLCashRpt.totalDeposit.@amt);

	if (XMLCashRpt.Deposit_1.@amt > 0) {
		addOperationLine(" "+XMLCashRpt.Deposit_1.@label,		"=", "",							XMLCashRpt.Deposit_1.@amt);
	}

	if (XMLCashRpt.Deposit_2.@amt > 0) {
		addOperationLine(" "+XMLCashRpt.Deposit_2.@label,		"=", "",							XMLCashRpt.Deposit_2.@amt);
	}

	addOperationLine("TOTAL FEES",					"=", "",								XMLCashRpt.totalFee.@amt);

	if (XMLCashRpt.Fee_1.@amt > 0) {
		addOperationLine(" "+XMLCashRpt.Fee_1.@label,		"=", "",							XMLCashRpt.Fee_1.@amt);
	}

	if (XMLCashRpt.Fee_2.@amt > 0) {
		addOperationLine(" "+XMLCashRpt.Fee_2.@label,		"=", "",							XMLCashRpt.Fee_2.@amt);
	}

	addLine();
	addOperationLine("Waste",				" ", XMLCashRpt.Waste.@tc,			XMLCashRpt.Waste.@amount);
	addOperationLine("PROMO",				" ", XMLCashRpt.PROMO.@tc,			XMLCashRpt.PROMO.@amount);
	addOperationLine("Amount discount",		" ", XMLCashRpt.Amountdiscount.@tc, XMLCashRpt.Amountdiscount.@amount);
	addOperationLine("Emp Meal discount",	" ", XMLCashRpt.EmpMealdiscount.@tc,XMLCashRpt.EmpMealdiscount.@amount);
	addOperationLine("Mgr Meal discount",	" ", XMLCashRpt.MgrMealdiscount.@tc,XMLCashRpt.MgrMealdiscount.@amount);
	addLine();
	addOperationLine("Red.Before Total",	"=", XMLCashRpt.RedBeforeTotal.@tc,	XMLCashRpt.RedBeforeTotal.@amount);
	addOperationLine("Average reduction Bef Tot", null, null,					XMLCashRpt.AvgRedBeforeTotal.@value);
	addOperationLine("Red.After Total",		"=", API.formatNumber(XMLCashRpt.RedAfterTotal.@tc, "###", 3),XMLCashRpt.RedAfterTotal.@amount);	
	addOperationLine("Average reduction Aft Tot", null, null,					XMLCashRpt.AvgRedAfterTotal.@value);
	addOperationLine("Drawer opens",		" ", XMLCashRpt.Draweropens.@value,	null);
	addLine();

	addFooter(rootCash);
	return;

	function addArrayDiffLine(lineDiff_array,id,name, charSeparator, qty, value, numberFormat)
	{
		if(!numberFormat) {
			numberFormat = NUMBER_FORMAT; // Default value
		}
		if(numberFormat != "" && typeof(value) != "string" && value != null) {
			value = API.formatNumber(Number(value), numberFormat, 12);
		}else if(value == null) {
			value = "";
		}

		if(charSeparator == null && qty == null) { // Gives more space to 'name'
			// 26: name, 1: nothing, 12: value
			var line = API.setOnLeft(name, 26)
				+ " "
				+ API.setOnRight(value, 12);
		}else {
			// 17: name, 3: sep, 6: qtd, 1: nothing, 12: value
			var line = API.setOnLeft(name, 17)
			+ " " + charSeparator + " "
			+ API.setOnRight(qty, 6)
			+ " "
			+ API.setOnRight(value, 12);
		}

		lineDiff_array.push({id:Number(id), text:String(line)});
	}

	function addDiffLine(lineDiff_array)
	{
		lineDiff_array.sort(function compareNumbers(a,b){return (Number(a.id) - Number(b.id));})
		for(var i = 0; i < lineDiff_array.length; i++) {
			addLine(String(lineDiff_array[i].text));
		}
	}

	/**
	 * Adds an operation line like this:
	 * "TOTAL ITEMS       =     114    6,145,756"
	 * @param name operation name ("TOTAL ITEMS")
	 * @param charSeparator separator char ("=")
	 * @param qty quantity ("114")
	 * @param value value ("6,145,756")
	 * @param numberFormat (optional) pass "" if you dont want to format the number, or any number format to use
	 */
	function addOperationLine(name, charSeparator, qty, value, numberFormat)
	{
		if(!numberFormat) {
			numberFormat = NUMBER_FORMAT; // Default value
		}
		if(numberFormat != "" && typeof(value) != "string" && value != null) {
			value = API.formatNumber(Number(value), numberFormat, 12);
		}else if(value == null) {
			value = "";
		}
		if(charSeparator == null && qty == null) { // Gives more space to 'name'
			// 26: name, 1: nothing, 12: value
			var line = API.setOnLeft(name, 26)
				+ " "
				+ API.setOnRight(value, 12);
		}else {
			// 17: name, 3: sep, 6: qtd, 1: nothing, 12: value
			var line = API.setOnLeft(name, 17)
			+ " " + charSeparator + " "
			+ API.setOnRight(qty, 6)
			+ " "
			+ API.setOnRight(value, 12);
		}
		addLine(line);
	}
}

/**
 * PRIVATE
 * Get the POD type
 * Needed data types: complete root cash, operator Id and operator login time
 * @author MY
 */
function GetPODType(rootCash, operatorId, opLoginTime) {
	var podType="FC";
	for each (indPOS in rootCash.POS.(@podShort=="DT")) {
		for each (indOperator in indPOS.OperatorSession) {
			if((Number(indOperator.@id)==Number(operatorId)) && (indOperator.@login==opLoginTime)) {
				podType="DT";
				break;
			}
		}
	}
	return (podType);
}

/**
 * PRIVATE
 * This function create a XML CASH report data
 * Needed data types: CASH, PMIX
 * @author Celso Fernandes
 */
function XMLCashReport(rootConfig, rootCash, rootPmix, root, reportType)
{
	// variables necessary to generate a zeroed xml output.
	// do not change from here ...
	var tcTenderIdArray 			= Array();
	var qtyTenderIdArray 			= Array();
    var drawerAmountTenderIdArray 	= Array();
    var changeDifferenceAmountTenderIdArray = Array();
    var excessAmountTenderIdArray = Array();
	var cashoutTc = Array();
	var cashoutAmount = Array();
    var sumExcessAmount = 0;
	var sumChangeRounding = 0;
	var qtyChangeRounding = 0;

	// NPS-7622
	var reversalTc 				= Array();
	var reversalAmount 			= Array();
	var reversalFailureTc 		= Array();
	var reversalFailureAmount	= Array();
	var reversalcashoutTc 		= Array();
	var reversalcashoutAmount 	= Array();
	
	
	// Clean array to tender
    for(var i=0;i<25;i++){
		tcTenderIdArray[i]						=0;
		qtyTenderIdArray[i]						=0;
		drawerAmountTenderIdArray[i]			=0;
		changeDifferenceAmountTenderIdArray[i]	=0;
		excessAmountTenderIdArray[i]			=0;
		cashoutTc[i]							=0;
		cashoutAmount[i]						=0;
		// NPS-7622				
		reversalTc[i]							=0;
		reversalAmount[i]						=0;
		reversalFailureTc[i]					=0;
		reversalFailureAmount[i]				=0;
		reversalcashoutTc[i]					=0;
		reversalcashoutAmount[i]				=0;
    }

	if(null==root) {
		root=rootCash;
	}
	var bConsolidated=false;
	var missingDates="";
    // ... up to here

	if(-1!=reportType) {
		// Defines
	 	var GIFT_CERT_1$	= "936";
	 	var GIFT_CERT_5$	= "937";

	 	var  CASH_US		= 0;
	 	var  COUPON_A		= 1;
	 	var  COUPON_B		= 2;
	 	var  COUPON_C		= 3;
	 	var  COUPON_D		= 4;
	 	var  COUPON_E		= 5;
	 	var  BILL_SALE		= 6;
	 	var  GIFT_CERT		= 7;
	 	var  GIFT_BOOK		= 8;
	 	var  FOREIGN_CUR	= 9;
	 	var  CASH_SALE		= 10;
	 	var  GIFT_CARD		= 11;
		var  CASHLESS_AMEX  = 21;
		var  CASHLESS_VISA  = 22;
		var  CASHLESS_MASTER= 23;
		var  CASHLESS_DEBIT = 24;
		var	 FOREIGN_CUR = new Array(12,13);

// Waiting better definition
	 	var  MCCARD_1		= 19; // 19: McCard 200
	 	var  MCCARD_2		= 20; // 20: McCard 500

		var pod = rootCash.@requestPod;
		flagTypePodDT	= (String(rootCash.POS.@podShort).search("DT")== -1)?false:true;
		flagTypePodWT	= (String(rootCash.POS.@podShort).search("WT")== -1)?false:true;
		flagTypePodFC	= (String(rootCash.POS.@podShort).search("FC")== -1)?false:true;
		if (flagTypePos==""){
			flagTypePos 	= (String(rootCash.POS.@podShort).search("DT")== -1)?"FC":"DT";
		}
		var openingReading		= 0;
		var	closingReading		= 0;
		var unauthDrawerOpenings= 0;
		switch(reportType) {
	    case RPTENDOFDAY:
				root = rootCash.POS;
				openingReading		= summNodesAttributeValues(root, "initialGT");
				closingReading		= summNodesAttributeValues(root, "finalGT");
				unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
				bConsolidated=true;
	    	break;
	    case RPTCASHDAILYCLOSEBYDATE:
				root = rootCash.POS;
				for each (i in root) {
					if(i.@status != "CLOSED"){
						addLine("ERROR:Day not close.");
						return;
					}
				}
				openingReading		= summNodesAttributeValues(root, "initialGT");
				closingReading		= summNodesAttributeValues(root, "finalGT");
				unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
				bConsolidated=true;
			break;
	    case RPTCASHENDDAYSTOREWIDE:
		//     szStatus="CLOSED";   THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> IS CLOSED.
		//     szStatus="OPENED";   THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> IS OPENED.
		//     szStatus="OPLOGGED"; THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> HAS A LOGGED OPERATOR.
		//     szStatus="BLOCKED";  THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> IS BLOCKED.
		//     szStatus="BLOCKOP";  THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> IS BLOCKED AND HAS A LOGGED OPERATOR.

				for each (rootPos in rootCash.POS){
					if(rootPos.@status != "CLOSED") {
						if(rootPos.@status == "OPLOGGED")
							addLine("ERROR:THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON:\n THE POS " +  rootPos.@id + " HAS A LOGGED OPERATOR");
						else {
							if(rootPos.@status == "BLOCKOP")
								addLine("ERROR:THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON:\n THE POS " +  rootPos.@id + " IS BLOCKED AND HAS A LOGGED OPERATOR");
							else
								addLine("ERROR:THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON:\n THE POS " +  rootPos.@id + " IS " + rootPos.@status + ".");
						}
						return;
					}
				}

				root = rootCash.POS;
				var opLogged	="";
				for each (i in root) {
					if(String(i.@businessDate) != "") {
						if(opLogged.search(i.@id) == -1) {
							opLogged 		= opLogged + " " + i.@id;
							openingReading	= openingReading + Number(i.@initialGT);
							closingReading	= closingReading + Number(i.@finalGT);
						}
					}
				}
				unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
				bConsolidated=true;
			break;
	    case RPTOPERATRORLOGOUT:
				if (rootConfig.CustomData.regDst !== null && rootConfig.CustomData.regDst !== undefined 
					&& trim(rootConfig.CustomData.regDst).length > 0 ) {
					// When remote drawer change.
					var strRemoteNode = rootConfig.CustomData.regDst.toString();	
					API.dbg("XMLCashReport for remote node " + strRemoteNode);
					root = findLastOperatorOnNode(rootCash, strRemoteNode);
				} else {
					root = findLastOperator(rootCash);	
					API.dbg("XMLCashReport for local node.");
				}
				openingReading		= summNodesAttributeValues(root, "initialGT");
				closingReading		= summNodesAttributeValues(root, "finalGT");
				unauthDrawerOpenings= summNodesAttributeValues(root, "unauthorizedDrawerOpenings");
				bConsolidated=false;
	       	 break;
		case RPTCASHDRAWERCHANGE:
		case RPTCASHIERCLOSEBYDATE:
				openingReading		= summNodesAttributeValues(root, "initialGT");
				closingReading		= summNodesAttributeValues(root, "finalGT");
				unauthDrawerOpenings= summNodesAttributeValues(root, "unauthorizedDrawerOpenings");
				bConsolidated=false;
	       	 break;
		case RPTCASHIERFLASH:
				root = findCurrentOperator(rootCash);
				if(root == null){
					addLine("ERROR:There is not an Operator Session Opened");
					return;
				}
				openingReading		= summNodesAttributeValues(root, "initialGT");
				closingReading		= summNodesAttributeValues(root, "finalGT");
				unauthDrawerOpenings= summNodesAttributeValues(root, "unauthorizedDrawerOpenings");
		   		flagTypePos    		= (String(rootCash.POS.(@podShort=="DT").OperatorSession.(@logout==""))=="")?"FC":"DT";

				flagTypePodDT	= (String(rootCash.POS.(@podShort=="DT").OperatorSession.(@logout==""))=="")?false:true;
				flagTypePodWT	= (String(rootCash.POS.(@podShort=="WT").OperatorSession.(@logout==""))=="")?false:true;
				flagTypePodFC	= (String(rootCash.POS.(@podShort=="FC").OperatorSession.(@logout==""))=="")?false:true;
		   		bConsolidated=false;
	       	 break;
		case RPTCASHBYDATE:
		case RPTCASHBYPERIOD:
		case RPTCASHACCUMULATED:
				root = rootCash.POS;
				openingReading		= summNodesAttributeValues(root[0], "initialGT");
				closingReading		= summNodesAttributeValues(root[0], "finalGT");
				unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
				bConsolidated		=true;
				missingDates		= listMissingDates(root);
	   		break;
	   	case RPTCASHBYDATESW:
	   	case RPTCASHBYPERIODSW:
		case RPTCASHCONSOLIDATED:
				if(0==root.POS.length()) {
					// single POS report
					var opLogged="";
					if(String(root.@businessDate) != "") {
						if(opLogged.search(root.@id) == -1) {
							opLogged 		= opLogged + " " + root.@id;
							openingReading	= openingReading + Number(root.@initialGT);
							closingReading	= closingReading + Number(root.@finalGT);
						}
						flagTypePos = String(root.@podShort);
						flagTypePodDT	= (String(root.@podShort)=="DT");
						flagTypePodWT	= (String(root.@podShort)=="WT");
						flagTypePodFC	= (String(root.@podShort)=="FC");
					}
					unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
					bConsolidated=false;
					missingDates		= listMissingDates(rootCash.POS);
				}
				else {
					root = rootCash.POS;
					var opLogged="";
					for each (i in root) {
						if(String(i.@businessDate) != "") {
							if(opLogged.search(i.@id) == -1) {
								opLogged 		= opLogged + " " + i.@id;
								openingReading	= openingReading + Number(i.@initialGT);
								closingReading	= closingReading + Number(i.@finalGT);
							}
						}
					}
					unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
					bConsolidated=true;
					missingDates		= listMissingDatesSW(root);
				}
	   		break;
	    default:
				addLine("ERROR:Undefined Report.");
				return;
	       	 break;
		}

		if (null == root){
			return;
		}

		// Children CashDetails "CD"
		var nodeCashDetails			= root.CashDetails;
		var nodeVoid				= nodeCashDetails.Void;
		var nodeCashOut				= nodeCashDetails.CashOut;
		var nodeReduction			= nodeCashDetails.Reduction;
		var nodePromotions			= nodeCashDetails.Promotions;

		// children CashTotals (CT)
		var nodeCashTotals			= root.CashTotals;
		var nodeCash				= nodeCashTotals.Cash;
		var nodeProductSales		= nodeCashTotals.ProductSales;
		var nodeNonProductSales		= nodeCashTotals.NonProductSales;

		// children CashTotals (CS)
		var nodeCashStatistics		= root.CashStatistics;
		var nodeOperationKindSale	= nodeCashStatistics.SaleType.OperationKind.(@id=="SALE");
		var nodeOperationKindRefund	= nodeCashStatistics.SaleType.OperationKind.(@id=="REFUND");
		var nodeOperationKindDiscount = nodeCashStatistics.SaleType.OperationKind.(@id=="DISCOUNT");
		var nodeOperationKindCashlessRefund	= nodeCashStatistics.SaleType.OperationKind.(@id=="CASHLESS_REFUND");

		var nodeOperationKindManagerMeal = nodeCashStatistics.SaleType.OperationKind.(@id=="MANAGER");
		var nodeOperationKindCrewMeal = nodeCashStatistics.SaleType.OperationKind.(@id=="CREW");

		// children node Sale
		var nodeSaleTypeEatIn		= nodeCashStatistics.SaleType.(@name=="EAT_IN");
		var nodeSaleTypeTakeOut		= nodeCashStatistics.SaleType.(@name=="TAKE_OUT");
		var nodeSaleTypeOther		= nodeCashStatistics.SaleType.(@name=="OTHER");

		// children node Skim
		var nodeTransfersOutSkim	  = nodeCashDetails.TransfersOut.(@type=="SKIM");
		var nodeTransfersOutskimCount = summNodesAttributeValues(nodeTransfersOutSkim, "count");
		var nodeTransfersOutskimAmount= summNodesAttributeValues(nodeTransfersOutSkim, "amount");

		// children node REFUND
		var nodeTransfersOutRefund	 = nodeCashDetails.TransfersOut.(@type=="REFUND");
		var nodeTransfersOutRefundCout = summNodesAttributeValues(nodeTransfersOutRefund, "count");	
		var nodeTransfersOutRefundAmount =summNodesAttributeValues(nodeTransfersOutRefund, "amount");	

		// children node Transfer Out
		var nodeTransfersOutTransfer	  = nodeCashDetails.TransfersOut.(@type=="TRANSFER");
		var nodeTransfersOutTransferCout  = summNodesAttributeValues(nodeTransfersOutTransfer, "count");
		var nodeTransfersOutTransferAmount= summNodesAttributeValues(nodeTransfersOutTransfer, "amount");

		// children node Transfer In
		var nodeTransfersInTransfer	     = nodeCashDetails.TransfersIn.(@type=="TRANSFER");
		var nodeTransfersInTransferCout  = summNodesAttributeValues(nodeTransfersInTransfer, "count");
		var nodeTransfersInTransferAmount= summNodesAttributeValues(nodeTransfersInTransfer, "amount");

		// children node Other Cards Transfer Out
		var nodeTransfersOutOtherCards	  = nodeCashDetails.TransfersOut.(@type=="OTHER_CARDS");
		var nodeTransfersOutOtherCardsCout  = summNodesAttributeValues(nodeTransfersOutOtherCards, "count");
		var nodeTransfersOutOtherCardsAmount= summNodesAttributeValues(nodeTransfersOutOtherCards, "amount");

		// children node Other Cards Transfer In		
		var nodeTransfersInOtherCards	     = nodeCashDetails.TransfersIn.(@type=="OTHER_CARDS");
		var nodeTransfersInOtherCardsCout  = summNodesAttributeValues(nodeTransfersInOtherCards, "count");
		var nodeTransfersInOtherCardsAmount= summNodesAttributeValues(nodeTransfersInOtherCards, "amount");
		
		// children node OTHER_RECEIP
		var nodeTransfersInOtherReceipts	 = nodeCashDetails.TransfersIn.(@type=="OTHER_RECEIPTS");
		var nodeTransfersInOtherReceiptsCout = summNodesAttributeValues(nodeTransfersInOtherReceipts, "count");
		var nodeTransfersInOtherReceiptsAmount =summNodesAttributeValues(nodeTransfersInOtherReceipts, "amount");

		var wasteArray 				=  getOperationKindId(nodeCashStatistics,"","WASTE");
		var wastenodesCashTc		=  wasteArray[0];
		var wastenodesCashnetAmount =  wasteArray[1];

		var promoArray 				=  getOperationKindId(nodeCashStatistics,"","PROMO");
		var promonodesCashTc 		=  promoArray[0];

		/* NVS-599 - START */
		//When PromoTaxRate is being used, the Promo Amount value is in "netBeforePromo" field (Position 7)
		var promonodesCashnetAmount = promoArray[7];

		/* When PromoTaxRate is not being used, the Promo Amount is in "netAmount" field (Position 1) and there is not "netBeforePromo" filed (Position 7 has zero value) */
		if(promonodesCashnetAmount == 0) {
			/* Promo Amount is in "netAmount" field (Position 1) */
			promonodesCashnetAmount = promoArray[1];
		}
		
		/* NVS-857 -substracted fees from deposits -NVS-876 -added summNodesAttributes */ 
		promonodesCashnetAmount = promonodesCashnetAmount
								-summNodesAttributeValues(nodeCashStatistics.SaleType.OperationKind.(@id=="PROMO").CashTotals.Cash.Fee, "amount")
								-summNodesAttributeValues(nodeCashStatistics.SaleType.OperationKind.(@id=="PROMO").CashTotals.Cash.Deposit, "amount");
		/* NVS-599 - END */


		//var discountArray = getOperationKindId_ex(nodeCashStatistics,"","DISCOUNT","TAX");
		var discountArray = getOperationKindId(nodeCashStatistics,"","DISCOUNT");
		// NVS-70 - Remove the Coupon TCs
		/* NVS-848 */ 
		//var discountnodesCashTc = discountArray[0] - discountArray[6] - getOperationKind_FeeAndDep(nodeCashStatistics,"DISCOUNT"); 
		//neverTaxDiscount =(summNodesAttributeValues(nodeCashStatistics.SaleType.OperationKind.(@id=="DISCOUNT" && @subType=="NEVER_TAX").CashTotals.Cash,"couponTC")> summNodesAttributeValues(nodeCashStatistics.SaleType.OperationKind.(@id=="DISCOUNT" && @subType=="NEVER_TAX").CashTotals.Cash,"tc")?summNodesAttributeValues(nodeCashStatistics.SaleType.OperationKind.(@id=="DISCOUNT" && @subType=="NEVER_TAX").CashTotals.Cash,"couponTC"):summNodesAttributeValues(nodeCashStatistics.SaleType.OperationKind.(@id=="DISCOUNT" && @subType=="NEVER_TAX").CashTotals.Cash,"tc"));
		/* SDO-5360: It also subtracts the new value duplicatedTC */ 
		// Commented out per SDO-5360 var discountnodesCashTc = discountArray[0] - discountArray[6];
		/* NVS-905 */
		var discountnodesCashTc = discountArray[0] - discountArray[6] - discountArray[12]; 
		var discountnodesCashnetAmount = discountArray[1];
		var discountnodesCashnetBeforeDiscount = discountArray[2];
		var discountnodesCashCouponDiscount = discountArray[3];
		var discountDiscount = discountnodesCashnetBeforeDiscount;
		/* NVS-848: New attributes appended to the cash.xml file */ 
		var feeDifference = discountArray[9] - discountArray[8]; /* Fee before discount - Fee amount */ 
		var depositDifference = discountArray[11] - discountArray[10]; /* Deposit before discount - Deposit amount */ 
		discountDiscount = discountDiscount.subtract(discountnodesCashnetAmount);
		discountDiscount = discountDiscount.subtract(discountnodesCashCouponDiscount);

		/* NVS-848: Subtract the fee and deposit difference, if any */ 
		discountDiscount = discountDiscount.subtract(feeDifference); 
		discountDiscount = discountDiscount.subtract(depositDifference); 

		var managerArray 			=  getOperationKindId(nodeCashStatistics,"","MANAGER");
		
		/* subtract fees and deposits TCs */
		//NVS-913
		//var managernodesCashTc 		=  managerArray[0]-GetRefundTC_MinusNonTax(nodeCashStatistics,"MANAGER"); 
		var managernodesCashTc = managerArray[0] - managerArray[12]; 
		var managernodesCashnetAmount = managerArray[1];
		var managernodesCashnetBeforeDiscount = managerArray[2];
		var managernodesCashCouponDiscount    = managerArray[3];
		var managerDiscount 		= managernodesCashnetBeforeDiscount - managernodesCashnetAmount - managernodesCashCouponDiscount;

		var crewArray 				=  getOperationKindId(nodeCashStatistics,"","CREW");
		//NVS-905
		//var crewnodesCashTc 		=  crewArray[0] -GetRefundTC_MinusNonTax(nodeCashStatistics,"CREW");
		var crewnodesCashTc 		=  crewArray[0] -crewArray[12];
		var crewnodesCashnetAmount  =  crewArray[1];
		var crewnodesCashnetBeforeDiscount = crewArray[2];
		var crewnodesCashCouponDiscount    = crewArray[3];
		var crewDiscount 			= crewnodesCashnetBeforeDiscount - crewnodesCashnetAmount - crewnodesCashCouponDiscount;

		var saleArray 				= getOperationKindId(nodeCashStatistics,"","SALE");
		var salenodesCashTc 		= saleArray[0];
		var salenodesCashnetAmount 	= saleArray[1];
		var salenodesCashnetBeforeDiscount = saleArray[2];

		var dayMenuArray 			= getDayPartId(nodeCashStatistics,"DAY_MENU");
		var dayMenunodesCashTc 		= dayMenuArray[0];
		var dayMenunodesCashnetAmount = dayMenuArray[1];
		var dayMenudesCashnetBeforeDiscount = dayMenuArray[2];

		var breakFastDayMenuArray 		= getDayPartId(nodeCashStatistics,"BREAKFAST_MENU");
		var breakFastDayMenunodesCashTc = breakFastDayMenuArray[0];
		var breakFastDayMenunodesCashnetAmount = breakFastDayMenuArray[1];
		var breakFastDayMenudesCashnetBeforeDiscount = breakFastDayMenuArray[2];

		var nodeTransfersInOtherReceipts = nodeCashDetails.TransfersOut.(@type=="OTHER_RECEIPTS");

		var cashierId				= getNumberAttribute(root, "id");
		var cashierName				= getAttribute(root, "name");
		var nodeTenders				= root.CashDetails.Tenders;
		var initialFloat			= calculateInitialFloat(nodeTenders);
		var cashierOpenTime			= getAttribute(root, "login").substring(9, 14);
		var cashierCloseTime		= getAttribute(root, "logout").substring(9, 14);
	 	var nodeCashTotalsRefund	= nodeOperationKindRefund.CashTotals;
		var nodeCashRefund			= nodeCashTotalsRefund.Cash;	
		var nodeUseTaxTotals = null;
		
		try {
			if (root.CashDetails.length() > 1) {
				nodeUseTaxTotals = rootCash.CashDetails.UseTaxTotals;
			}
			else {
				nodeUseTaxTotals = root.CashDetails.UseTaxTotals[0];
			}
		}
		catch (ex) {
		}
		
	 	var nodeCashTotalsCashlessRefund	= nodeOperationKindCashlessRefund.CashTotals;
		var nodeCashCashlessRefund			= nodeCashTotalsCashlessRefund.Cash;

	 	var nodeCashTotalsTaxSale			= nodeOperationKindSale.(@subType=="TAX").CashTotals;
		var nodeCashTotalsTaxExemptSale		= nodeOperationKindSale.(@subType=="TAX_EXEMPT").CashTotals;
	 	var nodeCashTotalsNoTaxSale			= nodeOperationKindSale.(@subType=="NO_TAX").CashTotals;
		var nodeCashTotalsNeverTaxSale		= nodeOperationKindSale.(@subType=="NEVER_TAX").CashTotals;

	 	var nodeCashTotalsTaxRefund			= nodeOperationKindRefund.(@subType=="TAX").CashTotals;
		var nodeCashTotalsTaxExemptRefund	= nodeOperationKindRefund.(@subType=="TAX_EXEMPT").CashTotals;
	 	var nodeCashTotalsNoTaxRefund		= nodeOperationKindRefund.(@subType=="NO_TAX").CashTotals;
		var nodeCashTotalsNeverTaxRefund	= nodeOperationKindRefund.(@subType=="NEVER_TAX").CashTotals;

	 	var nodeCashTotalsTaxDiscount		= nodeOperationKindDiscount.(@subType=="TAX").CashTotals;
		var nodeCashTotalsTaxExemptDiscount	= nodeOperationKindDiscount.(@subType=="TAX_EXEMPT").CashTotals;
	 	var nodeCashTotalsNoTaxDiscount		= nodeOperationKindDiscount.(@subType=="NO_TAX").CashTotals;
		var nodeCashTotalsNeverTaxDiscount	= nodeOperationKindDiscount.(@subType=="NEVER_TAX").CashTotals;

		var nodeCashTotalsManagerNeverTax = nodeOperationKindManagerMeal.(@subType=="NEVER_TAX").CashTotals;
		var nodeCashTotalsCrewNeverTax = nodeOperationKindCrewMeal.(@subType=="NEVER_TAX").CashTotals;
		
	 	var nodeCashTotalsSale				= nodeOperationKindSale.CashTotals;
		var nodeCashSale					= nodeOperationKindSale.Cash;

		// Total Refunds
		// NVS-897
		var refundsTC				= summNodesAttributeValues(nodeCashRefund,"tc") - summNodesAttributeValues(nodeCashRefund,"duplicatedTC");
		var refundsAmount			= summNodesAttributeValues(nodeCashRefund,"netAmount");
		var refundsTaxAmount		= summNodesAttributeValues(nodeCashRefund,"taxAmount");
		// TAX Refunds
		var taxRefundTC				= summNodesAttributeValues(nodeCashTotalsTaxRefund.Cash, "tc");
		var taxRefundNetAmount		= summNodesAttributeValues(nodeCashTotalsTaxRefund.Cash, "netAmount");
		var taxRefundtaxAmount		= summNodesAttributeValues(nodeCashTotalsTaxRefund.Cash, "taxAmount");
		// TAX Exempt Refunds
		var taxExemptRefundTC		= summNodesAttributeValues(nodeCashTotalsTaxExemptRefund.Cash, "tc");
		var taxExemptRefundNetAmount= summNodesAttributeValues(nodeCashTotalsTaxExemptRefund.Cash, "netAmount");
		var taxExemptRefundtaxAmount= summNodesAttributeValues(nodeCashTotalsTaxExemptRefund.Cash, "taxAmount");
		// No Tax Refunds
		var noTaxRefundtc			= summNodesAttributeValues(nodeCashTotalsNoTaxRefund.Cash, "tc");
		var noTaxRefundNetAmount	= summNodesAttributeValues(nodeCashTotalsNoTaxRefund.Cash, "netAmount");
		var noTaxRefundtaxAmount	= summNodesAttributeValues(nodeCashTotalsNoTaxRefund.Cash, "taxAmount");
		// Never Tax Refunds
		var neverTaxRefundtc		= summNodesAttributeValues(nodeCashTotalsNeverTaxRefund.Cash, "tc");
		/* NVS-847 -NVS-888 -remove deposits from tax refund amount */
		var neverTaxRefundNetAmount	= summNodesAttributeValues(nodeCashTotalsNeverTaxRefund.Cash, "netAmount")
			-summNodesAttributeValues(nodeCashTotalsNeverTaxRefund.Cash.Deposit,"amount");
		var neverTaxRefundtaxAmount	= summNodesAttributeValues(nodeCashTotalsNeverTaxRefund.Cash, "taxAmount");
		// Cashless Refund
		var cashlessRefundsTC		= summNodesAttributeValues(nodeCashCashlessRefund,"tc") -summNodesAttributeValues(nodeCashCashlessRefund,"duplicatedTC");	
		var cashlessRefundsAmount	= summNodesAttributeValues(nodeCashCashlessRefund,"netAmount");
		var cashlessRefundsTaxAmount= summNodesAttributeValues(nodeCashCashlessRefund,"taxAmount");

		var netSalesTcDiscountTaxExempt 	= summNodesAttributeValues(nodeCashTotalsTaxExemptDiscount.Cash,"tc");
		var netSalesTcDiscountNoTax     	= summNodesAttributeValues(nodeCashTotalsNoTaxDiscount.Cash,"tc");
		var netSalesTcDiscountNeverTax     	= summNodesAttributeValues(nodeCashTotalsNeverTaxDiscount.Cash,"tc");
		var netSalesAmountDiscountTax       = summNodesAttributeValues(nodeCashTotalsTaxDiscount.Cash,"netAmount") -summNodesAttributeValues(nodeCashTotalsTaxDiscount.Cash.Fee,"amount") -summNodesAttributeValues(nodeCashTotalsTaxDiscount.Cash.Deposit,"amount");
		var netSalesAmountDiscountNeverTax       = summNodesAttributeValues(nodeCashTotalsNeverTaxDiscount.Cash,"netAmount") -summNodesAttributeValues(nodeCashTotalsNeverTaxDiscount.Cash.Fee,"amount") -summNodesAttributeValues(nodeCashTotalsNeverTaxDiscount.Cash.Deposit,"amount");
		var netSalesAmountDiscountTaxExempt = summNodesAttributeValues(nodeCashTotalsTaxExemptDiscount.Cash,"netAmount") -summNodesAttributeValues(nodeCashTotalsTaxExemptDiscount.Cash.Fee,"amount") -summNodesAttributeValues(nodeCashTotalsTaxExemptDiscount.Cash.Deposit,"amount");
		var netSalesAmountManagerNeverTax = summNodesAttributeValues(nodeCashTotalsManagerNeverTax.Cash,"netAmount") -summNodesAttributeValues(nodeCashTotalsManagerNeverTax.Cash.Fee,"amount") -summNodesAttributeValues(nodeCashTotalsManagerNeverTax.Cash.Deposit,"amount");
		var netSalesAmountCrewNeverTax = summNodesAttributeValues(nodeCashTotalsCrewNeverTax.Cash,"netAmount") -summNodesAttributeValues(nodeCashTotalsCrewNeverTax.Cash.Fee,"amount") -summNodesAttributeValues(nodeCashTotalsCrewNeverTax.Cash.Deposit,"amount");
		


		var netSalesTcTaxExempt 	= summNodesAttributeValues(nodeCashTotalsTaxExemptSale.Cash,"tc") -
									  taxExemptRefundTC;
		var netSalesTcNoTax     	= summNodesAttributeValues(nodeCashTotalsNoTaxSale.Cash,"tc") -
									  noTaxRefundtc
		var netSalesAmountTax       = summNodesAttributeValues(nodeCashTotalsTaxSale.Cash,"netAmount") -
									  taxRefundNetAmount -summNodesAttributeValues(nodeCashTotalsTaxSale.Cash.Fee,"amount") -summNodesAttributeValues(nodeCashTotalsTaxSale.Cash.Deposit,"amount");
		var netSalesAmountTaxExempt = summNodesAttributeValues(nodeCashTotalsTaxExemptSale.Cash,"netAmount") -
									  taxExemptRefundNetAmount -summNodesAttributeValues(nodeCashTotalsTaxExemptSale.Cash.Fee,"amount") -summNodesAttributeValues(nodeCashTotalsTaxExemptSale.Cash.Deposit,"amount");

		var netSalesAmountNoTax     = summNodesAttributeValues(nodeCashTotalsNoTaxSale.Cash,"netAmount") -
									  noTaxRefundNetAmount -summNodesAttributeValues(nodeCashTotalsNoTaxSale.Cash.Fee,"amount") -summNodesAttributeValues(nodeCashTotalsNoTaxSale.Cash.Deposit,"amount");

          var netSalesAmountNeverTax  = summNodesAttributeValues(nodeCashTotalsNeverTaxSale.Cash,"netAmount") -
                                               neverTaxRefundNetAmount -summNodesAttributeValues(nodeCashTotalsNeverTaxSale.Cash.Fee,"amount") -summNodesAttributeValues(nodeCashTotalsNeverTaxSale.Cash.Deposit,"amount");

		var nodeProductSales		= nodeCashTotals.ProductSales;
		var nodeNonProductSales		= nodeCashTotals.NonProductSales;
		var nodeProductSalesCash	= nodeProductSales.Cash;
		var nodeNonProductSalesCash	= nodeNonProductSales.Cash;

		var nodeEatInOperationKind	= nodeSaleTypeEatIn.OperationKind;
		var nodeTakeOutOperationKind= nodeSaleTypeTakeOut.OperationKind;
		var nodeOtherOperationKind	= nodeSaleTypeOther.OperationKind;

		var nodeEatInCashTotals		= nodeSaleTypeEatIn.CashTotals;
		var nodeTakeOutCashTotals	= nodeSaleTypeTakeOut.CashTotals;
		var nodeOtherCashTotals		= nodeSaleTypeOther.CashTotals;

		var nodePromo				= nodePromotions == null ? null : nodePromotions.Promo.(@type=="0"); // Promo type 0 is normal promo
		var managerId				= getNumberAttribute(rootConfig.Manager, "id");
		var taxEatIn				= getTotalTaxAmount(nodeCashStatistics, "EAT_IN");
		var taxTakeOut				= getTotalTaxAmount(nodeCashStatistics, "TAKE_OUT");
		var taxTotal				= taxEatIn + taxTakeOut;

		var operatorId			  = Number(root.@id);
		var ind 				  = rootPmix.POS.OperatorSession.(@id==operatorId).length()-1;
		var PMixOperatorSession;
		var PMixOperatorSessionDT;
		var PMixOperatorSessionWT;
		var rootPmixPOS;
		//if(0==root.POS.length()) {
		if(false==bConsolidated) {
			rootPmixPOS=rootPmix.POS.(@id==root.@id && @podShort==root.@podShort);
			PMixOperatorSessionDT = rootPmixPOS.(@podShort=="DT").FamilyGroup.(@groupName=="GIFT_COUPON");
			PMixOperatorSessionWT = rootPmixPOS.(@podShort=="WT").FamilyGroup.(@groupName=="GIFT_COUPON");
		}
		else {
			rootPmixPOS=rootPmix;
			PMixOperatorSessionDT = rootPmix.POS.(@podShort=="DT").FamilyGroup.(@groupName=="GIFT_COUPON");
			PMixOperatorSessionWT = rootPmix.POS.(@podShort=="WT").FamilyGroup.(@groupName=="GIFT_COUPON");
		}
		// Drive Thru
	 	var PMixProductCertRefDT  = 0;
		var PMixProductCertDT	  = 0;
	    var PMixProductCardRefDT  = 0;
	    var PMixProductCardDT	  = 0;
		// Walk Thru
	 	var PMixProductCertRefWT  = 0;
		var PMixProductCertWT	  = 0;
	    var PMixProductCardRefWT  = 0;
	    var PMixProductCardWT	  = 0;

		if(reportType == RPTCASHIERFLASH){
	 		 PMixOperatorSession   = rootPmix.POS.OperatorSession.(@id==operatorId)[ind];
			 PMixOperatorSessionDT = rootPmix.POS.(@podShort=="DT").OperatorSession.(@logout=="" && @id==operatorId)[ind];
			 PMixOperatorSessionWT = rootPmix.POS.(@podShort=="WT").OperatorSession.(@logout=="" && @id==operatorId)[ind];
		}
		else{
			if((reportType == RPTCASHDRAWERCHANGE)  || (reportType == RPTOPERATRORLOGOUT) || (reportType == RPTCASHIERCLOSEBYDATE)) {
				PMixOperatorSession   = rootPmix.POS.OperatorSession.(@id==cashierId && @login==root.@login);
				PMixOperatorSessionDT = rootPmix.POS.(@podShort=="DT").OperatorSession.(@logout!="" && @id==operatorId)[ind];
				PMixOperatorSessionWT = rootPmix.POS.(@podShort=="WT").OperatorSession.(@logout!="" && @id==operatorId)[ind];
			}
			else {
				//if(0==root.POS.length()) {
				if(false==bConsolidated) {
	 				PMixOperatorSession = rootPmixPOS.FamilyGroup.(@groupName=="GIFT_COUPON");
	 			}
	 			else {
	 				if(reportType == RPTCASHCONSOLIDATED) {
		 				PMixOperatorSession = rootPmix.FamilyGroup.(@groupName=="GIFT_COUPON");
		 			}
					else {
	 					PMixOperatorSession = rootPmix.POS.FamilyGroup.(@groupName=="GIFT_COUPON");
	 				}
				}
			}
		}

		if(PMixOperatorSessionDT!=null) {
			PMixProductCertRefDT  = PMixOperatorSessionDT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
			PMixProductCertDT	  = PMixOperatorSessionDT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.((@operationType=="SALE") || (@operationType=="DISCOUNT")).PMix;
		    PMixProductCardRefDT  = PMixOperatorSessionDT.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		    PMixProductCardDT	  = PMixOperatorSessionDT.Product.(@id!= GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.((@operationType=="SALE") || (@operationType=="DISCOUNT")).PMix;
		}

		if(PMixOperatorSessionWT!=null) {
			PMixProductCertRefWT  = PMixOperatorSessionWT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
			PMixProductCertWT	  = PMixOperatorSessionWT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.((@operationType=="SALE") || (@operationType=="DISCOUNT")).PMix;
		    PMixProductCardRefWT  = PMixOperatorSessionWT.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		    PMixProductCardWT	  = PMixOperatorSessionWT.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.((@operationType=="SALE") || (@operationType=="DISCOUNT")).PMix;
		}

		// Get all Product Cert
		var PMixProductCertRef	     = PMixOperatorSession.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		var PMixProductCert	    	 = PMixOperatorSession.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.((@operationType=="SALE") || (@operationType=="DISCOUNT")).PMix;
		var mcCertSalesRefundCount	 = getPMixTotalQty(PMixProductCertRef);
		var mcCertSalesCount	     = getPMixTotalQty(PMixProductCert); //  - mcCertSalesRefundCount;
		var mcCertSalesRefundAmount  = getPMixTotalnetAmount(PMixProductCertRef);
		var mcCertSalesAmount	     = getPMixTotalnetAmount(PMixProductCert);

		// Gift cert 1$
		var PMixProductCertRefA	     = PMixOperatorSession.Product.(@id==GIFT_CERT_1$).OperationType.(@operationType=="REFUND").PMix;
		var PMixProductCertA	     = PMixOperatorSession.Product.(@id==GIFT_CERT_1$).OperationType.((@operationType=="SALE") || (@operationType=="DISCOUNT")).PMix;
		var mcCertASalesRefundCount	 = getPMixTotalQty(PMixProductCertRefA);
		var mcCertASalesCount	     = getPMixTotalQty(PMixProductCertA); // - mcCardSalesRefundCount;
		var mcCertASalesRefundAmount = getPMixTotalnetAmount(PMixProductCertRefA);
		var mcCertASalesAmount	     = getPMixTotalnetAmount(PMixProductCertA);

		// Gift cert 5$
		var PMixProductCertRefB	     = PMixOperatorSession.Product.(@id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		var PMixProductCertB	     = PMixOperatorSession.Product.(@id==GIFT_CERT_5$).OperationType.((@operationType=="SALE") || (@operationType=="DISCOUNT")).PMix;
		var mcCertBSalesRefundCount	 = getPMixTotalQty(PMixProductCertRefB);
		var mcCertBSalesCount	     = getPMixTotalQty(PMixProductCertB); // - mcCardSalesRefundCount;
		var mcCertBSalesRefundAmount = getPMixTotalnetAmount(PMixProductCertRefB);
		var mcCertBSalesAmount	     = getPMixTotalnetAmount(PMixProductCertB);

		// Get all Product without Cert
		var PMixProductCardRef	     = PMixOperatorSession.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		var PMixProductCard	     	 = PMixOperatorSession.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.((@operationType=="SALE") || (@operationType=="DISCOUNT")).PMix;
		var mcCardSalesRefundCount	 = getPMixTotalQty(PMixProductCardRef);
		var mcCardSalesCount	     = getPMixTotalQty(PMixProductCard); // - mcCardSalesRefundCount;
		var mcCardSalesRefundAmount  = getPMixTotalnetAmount(PMixProductCardRef);
		var mcCardSalesAmount	     = getPMixTotalnetAmount(PMixProductCard);

		// NVS-1330 - Included discount, manager, and crew never_tax amounts in SalesNeverTax totals
		netSalesAmountNeverTax 	= netSalesAmountNeverTax + netSalesAmountDiscountNeverTax + netSalesAmountManagerNeverTax + netSalesAmountCrewNeverTax - (mcCertSalesAmount-mcCertSalesRefundAmount) - (mcCardSalesAmount-mcCardSalesRefundAmount);
		var mcCardRedeemedAmount= getMcCardRedeemedAmount(root/*Cash*/);

		var netSalesAmount		= summNodesAttributeValues(nodeCash, "netAmount") - (summNodesAttributeValues(nodeCash.Deposit, "amount")) - (summNodesAttributeValues(nodeCash.Fee, "amount")) - (mcCertSalesAmount-mcCertSalesRefundAmount) - (mcCardSalesAmount-mcCardSalesRefundAmount);
		var taxAmount			= summNodesAttributeValues(nodeCash, "taxAmount") -(summNodesAttributeValues(nodeCash.Deposit, "tax")) - (summNodesAttributeValues(nodeCash.Fee, "tax"));

		var totalNonProductSales= summNodesAttributeValues(nodeNonProductSalesCash, "netAmount");

	 	// Get tender information
		//UberEats NVS-6999 - msilva - UberEats Integration 
	 	deliveryBillableSaleTC  =0; 
	 	deliveryBillableSaleAmt =0; 
		if(nodeTenders != null) {
			var nodesTender = nodeTenders.Tender;
			var nodesTenderSize = nodesTender.length();
			for(var i = 0; i < nodesTenderSize; i++) {
				var nodeTender = nodesTender[i];
			    var tcTenderId				= getNumberAttribute(nodeTender, "id");
	   		    tcTenderIdArray[tcTenderId] += summNodesAttributeValues(nodeTender, "tc");
			    qtyTenderIdArray[tcTenderId] += summNodesAttributeValues(nodeTender, "qty");
			    /* NVS-308 JWC 7-8-10; increment "gift card redeem" tc for each gift card cashout */
			    if(tcTenderId == GIFT_CARD){
			    	qtyTenderIdArray[tcTenderId] += summNodesAttributeValues(nodeTender, "CashOutCount");				
			    /* NVS-1341 */ 
			    //		qtyTenderIdArray[tcTenderId] -= summNodesAttributeValues(nodeTender.Audit, "overringCount")*2;
			    //		drawerAmountTenderIdArray[tcTenderId] -= summNodesAttributeValues(nodeTender.Audit, "overringAmount")*2;
			    }

				if(tcTenderId == CASH_SALE){
				//	qtyTenderIdArray[tcTenderId] -= summNodesAttributeValues(nodeTender.Audit, "overringCount")*2;
				//	drawerAmountTenderIdArray[tcTenderId] -= summNodesAttributeValues(nodeTender.Audit, "overringAmount")*2;
				}
				
				// The foreign currency amount should report in it's foreign amount not in USD
				if (FOREIGN_CUR.indexOf(tcTenderId) == -1)  {
					drawerAmountTenderIdArray[tcTenderId] += summNodesAttributeValues(nodeTender, "drawerAmount");
				} else {
					drawerAmountTenderIdArray[tcTenderId] += summNodesAttributeValues(nodeTender, "fDrawerAmount");
				}
			    changeDifferenceAmountTenderIdArray[tcTenderId] += summNodesAttributeValues(nodeTender, "changeDifferenceAmount");
			    excessAmountTenderIdArray[tcTenderId] += summNodesAttributeValues(nodeTender, "excessAmount");
			    sumExcessAmount += excessAmountTenderIdArray[tcTenderId];
				if(0==tcTenderId) {
					sumChangeRounding += summNodesAttributeValues(nodeTender,"changeRounding");
					qtyChangeRounding += summNodesAttributeValues(nodeTender,"changeRoundingCount");
				}

				//added for Ubert eats POC UberEats NVS-6999 & NVS_7253 - msilva - UberEats Integration  */
				if (deliveryTenders.split("|").indexOf(tcTenderId.toString()) != -1) {
					deliveryBillableSaleTC += summNodesAttributeValues(nodeTender, "tc");
					deliveryBillableSaleAmt += summNodesAttributeValues(nodeTender, "drawerAmount");
				} 

	    		cashoutTc[tcTenderId] += summNodesAttributeValues(nodeTender, "CashOutCount");
				cashoutAmount[tcTenderId] += summNodesAttributeValues(nodeTender, "CashOutAmount");

				// NPS-7622
				var nodeReversal = nodeTender.Reversal;
				
				reversalTc[tcTenderId] += summNodesAttributeValues(nodeReversal, "reversalCount");
				reversalAmount[tcTenderId] += summNodesAttributeValues(nodeReversal, "reversalAmount");
				reversalFailureTc[tcTenderId] += summNodesAttributeValues(nodeReversal, "reversalFailureCount");
				reversalFailureAmount[tcTenderId] += summNodesAttributeValues(nodeReversal, "reversalFailureAmount");
				reversalcashoutTc[tcTenderId] += summNodesAttributeValues(nodeReversal, "reversalCashoutCount");
				reversalcashoutAmount[tcTenderId] += summNodesAttributeValues(nodeReversal, "reversalCashoutAmount");
			}
		}

		var inProgressAmountTC		= summNodesAttributeValues(nodeVoid, "inProgressTC");
		var inProgressAmount		= summNodesAttributeValues(nodeVoid, "inProgressAmount");
		var inProgressEatinTC		= summNodesAttributeValues(nodeVoid, "inProgressEatinTC");
		var inProgressEatinAmount	= summNodesAttributeValues(nodeVoid, "inProgressEatinAmount");
		var inProgressTakeoutTC		= summNodesAttributeValues(nodeVoid, "inProgressTakeoutTC");
		var inProgressTakeoutAmount	= summNodesAttributeValues(nodeVoid, "inProgressTakeoutAmount");

		var outProgressTC			= summNodesAttributeValues(nodeVoid, "overringTC");
		var outProgressTOTC			= summNodesAttributeValues(nodeVoid, "overringTakeoutTC");
		var outProgressEITC			= summNodesAttributeValues(nodeVoid, "overringEatinTC");
		var inProgressTakeoutAmount	= summNodesAttributeValues(nodeVoid, "inProgressTakeoutAmount");
		var overringsTC				= outProgressTC+inProgressAmountTC;
		var overringsAmount			= summNodesAttributeValues(nodeVoid, "overringAmount") + inProgressAmount;
		
		/* NVS-5544 -DKJ: substract automaticVoidedOrder (SCR) */ 
		overringsTC	-=summNodesAttributeValues(nodeVoid, "automaticVoidedOrderTC");
		overringsAmount	-=summNodesAttributeValues(nodeVoid, "automaticVoidedOrderAmount");		

		var nodeCashOutTC			= summNodesAttributeValues(nodeCashOut,"tc");
		var nodeCashOutAmount		= summNodesAttributeValues(nodeCashOut,"amount");

		closingReading 			= closingReading;
		var difference				= closingReading - openingReading;

		var pettyCashCount			= getPettyCashCount(nodeCashDetails);
		var pettyCashAmount			= getPettyCashAmount(nodeCashDetails);

		var totTcCashRefunds 	 	= refundsTC-cashlessRefundsTC+nodeCashOutTC + nodeTransfersOutRefundCout;
		var totAmountCashRefunds 	= (refundsAmount + refundsTaxAmount + nodeCashOutAmount + nodeTransfersOutRefundAmount) -
									  (cashlessRefundsAmount + cashlessRefundsTaxAmount);
		var grossSalesAmount		= 	difference  -
										overringsAmount -
										totAmountCashRefunds -
										(cashlessRefundsAmount + cashlessRefundsTaxAmount) -
										nodeTransfersInOtherReceiptsAmount -
										(mcCertSalesAmount - mcCertSalesRefundAmount) -
										(mcCardSalesAmount - mcCardSalesRefundAmount);

		var totalnetSalesAmount = netSalesAmount;
		var totTaxAmount 		= taxAmount;

		var qtdTCDiscard = root.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
		/* NVS-913 */ 
		var a = summNodesAttributeValues(root.CashTotals.Cash,"tc"); 
		var b = summNodesAttributeValues(qtdTCDiscard,"tc") - summNodesAttributeValues(qtdTCDiscard,"duplicatedTC"); 

		/* NVS-975 -removed overring subtraction, from total TC */
		/* NVS-1350 -DKJ remove overrings as well    */ 
		var totalTc = a - b; 

		var tredsTC					= summNodesAttributeValues(nodeReduction, "tc");
		var tredsAfterTotal			= summNodesAttributeValues(nodeReduction, "redsAfterTotal");
		var tredsAmtAfterTotal		= summNodesAttributeValues(nodeReduction, "redsAmtAfterTotal");
		var tredAmtBeforeTl			= summNodesAttributeValues(nodeReduction, "amountBeforeTotal");
		var tredItemsBeforeTl		= summNodesAttributeValues(nodeReduction, "itemsBeforeTotal");
		var tredAmtAfterTl			= summNodesAttributeValues(nodeReduction, "amountAfterTotal");
		var tredItemsAfterTl		= summNodesAttributeValues(nodeReduction, "itemsAfterTotal");
		var tredAverageBeforeTl		= tredItemsBeforeTl > 0 ? (tredAmtBeforeTl / tredItemsBeforeTl) : 0;
		var tredAverageAfterTl		= tredsAfterTotal > 0 ? (tredsAmtAfterTotal / tredsAfterTotal) : 0;
          // SDE-2656  RPS 06-18-09
          tredAverageAfterTl          = Math.round(tredAverageAfterTl * 100) / 100;
		var promoItems				= summNodesAttributeValues(nodePromo, "items");
		var promoItemsAmount		= summNodesAttributeValues(nodePromo, "amount");
		var promoTc					= summNodesAttributeValues(nodePromo, "tc");
		var promoTcNetAmount		= summNodesAttributeValues(nodePromo, "tcNetAmount");
		var promoTcTaxAmount		= summNodesAttributeValues(nodePromo, "tcTaxAmount");
		var promoTcTotalAmount		= promoTcNetAmount + promoTcTaxAmount;

		// Drive-Thru values
		var dtinProgress=0;
		var	dtTc		=0;
		var	dtNetAmount	=0;
		var	dtCars		=0;
		var dtDiscard	=null;
		var qtdTCDiscard=null;

		// Walk-Thru values
		var wtinProgress=0;
		var	wtTc		=0;
		var	wtNetAmount	=0;
		var wtDiscard	=null;
		var qtdWtTCDiscard=null;

		if(reportType == RPTCASHBYPERIODSW || reportType == RPTCASHCONSOLIDATED) {
			dtoutProgress = summNodesAttributeValues(rootCash.POS.(@podShort=="DT").CashDetails.Void,"overringTakeoutTC");
			qtdTCDiscard = rootCash.POS.(@podShort=="DT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc			
			dtTc		= getPodCashAttribute(rootCash.POS, "DT", "tc")-summNodesAttributeValues(qtdTCDiscard,"tc")-dtoutProgress;					
			dtNetAmount	= getPodCashAttribute(rootCash.POS, "DT", "netAmount") -getNumberAttribute(rootCash.POS.(@podShort=="DT").CashTotals.Cash.Fee, "amount") - getNumberAttribute(rootCash.POS.(@podShort=="DT").CashTotals.Cash.Deposit, "amount");
			dtCars		= getPodCashAttribute(rootCash.POS, "DT", "cars");
			
			if(flagTypePodWT) {
				wtoutProgress = summNodesAttributeValues(rootCash.POS.(@podShort=="WT").CashDetails.Void,"overringTakeoutTC");
				qtdWtTCDiscard = rootCash.POS.(@podShort=="WT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
				wtTc		= getPodCashAttribute(rootCash.POS, "WT", "tc")-summNodesAttributeValues(qtdWtTCDiscard,"tc")-wtoutProgress;
				wtNetAmount	= getPodCashAttribute(rootCash.POS, "WT", "netAmount");
			}			
		}
		else {
			// keep others report types as it was...
			dtoutProgress = summNodesAttributeValues(rootCash.POS.(@podShort=="DT").CashDetails.Void,"overringTakeoutTC");
			qtdTCDiscard = rootCash.POS.(@podShort=="DT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
			dtTc		= getPodCashAttribute(rootCash, "DT", "tc")-summNodesAttributeValues(qtdTCDiscard,"tc")-dtoutProgress;

			/* NVS-877 -fees and deposits are removed from the DT NET AMOUNT */ 
			dtNetAmount	= getPodCashAttribute(rootCash, "DT", "netAmount") -getNumberAttribute(rootCash.POS.(@podShort=="DT").CashTotals.Cash.Fee, "amount") - getNumberAttribute(rootCash.POS.(@podShort=="DT").CashTotals.Cash.Deposit, "amount");
			dtCars		= getPodCashAttribute(rootCash, "DT", "cars");

			if(flagTypePodWT) {
				wtoutProgress = summNodesAttributeValues(rootCash.POS.(@podShort=="WT").CashDetails.Void,"overringTakeoutTC");
				qtdWtTCDiscard = rootCash.POS.(@podShort=="WT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
				wtTc		= getPodCashAttribute(rootCash, "WT", "tc")-summNodesAttributeValues(qtdWtTCDiscard,"tc")-wtoutProgress;
				wtNetAmount	= getPodCashAttribute(rootCash, "WT", "netAmount");
			}
		}
		if ((reportType == RPTCASHIERFLASH) ||	(reportType == RPTCASHDRAWERCHANGE)  || (reportType == RPTOPERATRORLOGOUT) || (reportType == RPTCASHIERCLOSEBYDATE)) {
			if (flagTypePos == "DT") {
				var nodeCashTotals = root.CashTotals[0];
				var nodeCash = findFirst(nodeCashTotals, "Cash");
				var nodeCashDetails= root.CashDetails[0];
				dtinProgress =0;
				var nodeVoid = findFirst(nodeCashDetails, "Void");
				if(nodeVoid != null) {
					dtinProgress = getNumberAttribute(nodeVoid, "overringTakeoutTC");
				}
				if(nodeCash != null) {
					qtdTCDiscard = nodeCash.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
					dtTc 		 = getNumberAttribute(nodeCash, "tc")-summNodesAttributeValues(qtdTCDiscard,"tc")-dtinProgress;
					dtNetAmount  = getNumberAttribute(nodeCash, "netAmount") -getNumberAttribute(nodeCash.POS.(@podShort=="DT").CashTotals.Cash.Fee, "amount") - getNumberAttribute(nodeCash.POS.(@podShort=="DT").CashTotals.Cash.Deposit, "amount");
					dtCars		 = getNumberAttribute(nodeCash, "cars");
				} else {
					dtTc 		 = 0;
					dtNetAmount  = 0;
					dtCars		 = 0;
				}
			} else {
				dtTc 		 = 0;
				dtNetAmount  = 0;
				dtCars		 = 0;
			}


			if(flagTypePodWT) {
				var nodeCashTotals = root.CashTotals[0];
				var nodeCash = findFirst(nodeCashTotals, "Cash");
				var nodeCashDetails= root.CashDetails[0];
				dtinProgress =0;
				var nodeVoid = findFirst(nodeCashDetails, "Void");
				if(nodeVoid != null) {
					dtoutProgress = getNumberAttribute(nodeVoid, "overringTakeoutTC");
				}
				if(nodeCash != null) {
					qtdWtTCDiscard = nodeCash.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
					wtTc 		 = getNumberAttribute(nodeCash, "tc")-summNodesAttributeValues(qtdTCDiscard,"tc")-dtoutProgress;
					wtNetAmount  = getNumberAttribute(nodeCash, "netAmount") -getNumberAttribute(nodeCash.POS.(@podShort=="WT").CashTotals.Cash.Fee, "amount") - getNumberAttribute(nodeCash.POS.(@podShort=="WT").CashTotals.Cash.Deposit, "amount");
				} else {
					wtTc 		 = 0;
					wtNetAmount  = 0;
					wtCars		 = 0;
				}
			} else {
				wtTc 		 = 0;
				wtNetAmount  = 0;
			}

		}
		dtNetAmount					=  dtNetAmount
									 - getPMixTotalnetAmount(PMixProductCardDT)
									 - getPMixTotalnetAmount(PMixProductCertDT)
	 								 + getPMixTotalnetAmount(PMixProductCertRefDT)
									 + getPMixTotalnetAmount(PMixProductCardRefDT);
		var dtPercent				= calculatePercentage(dtNetAmount, netSalesAmount);

		wtNetAmount					=  wtNetAmount
									 - getPMixTotalnetAmount(PMixProductCardWT)
									 - getPMixTotalnetAmount(PMixProductCertWT)
	 								 + getPMixTotalnetAmount(PMixProductCertRefWT)
									 + getPMixTotalnetAmount(PMixProductCardRefWT);
		var wtPercent				= calculatePercentage(wtNetAmount, netSalesAmount);

		// Breakfast values
		var breakFastDayMenuPercent	= calculatePercentage(breakFastDayMenunodesCashnetAmount, totalnetSalesAmount);
		//NVS-425  limit breakfast percentage to 100%
		if (Math.floor(breakFastDayMenuPercent) >= 100) {
			breakFastDayMenuPercent = 100;
		}

		// Eat in values
		var eiqtdTCDiscard 			= root.CashStatistics.SaleType.(@name=="EAT_IN").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
		/* NVS-883: Sum the total TC of the nodes above, including the duplicated ones */ 
		var eiQtdTC_Discarded = summNodesAttributeValues(eiqtdTCDiscard, "tc") - summNodesAttributeValues(eiqtdTCDiscard, "duplicatedTC"); 
		/* NVS-883: Obtain the total TC of the EAT-IN sales */ 
		var totalEatInTC = summNodesAttributeValues(nodeEatInCashTotals.Cash, "tc") - summNodesAttributeValues(nodeEatInCashTotals.Cash, "duplicatedTC"); 
		/* NVS-883: Calculates the EAT-IN total valid TCs */ 
		var eiTc	 = totalEatInTC - eiQtdTC_Discarded -summNodesAttributeValues(nodeVoid, "overringEatinTC"); //NVS-1350 subtract ovverings -DKJ;
		//var eiTc					= summNodesAttributeValues(nodeEatInCashTotals.Cash, "tc") -
		//					   	  (summNodesAttributeValues(eiqtdTCDiscard,"tc")<=0 ? 0 : summNodesAttributeValues(eiqtdTCDiscard,"tc"))-outProgressEITC;

		var eiNetAmount				= summNodesAttributeValues(nodeEatInCashTotals.Cash, "netAmount")
									   - summNodesAttributeValues(PMixProductCard,"netAmtEatIn")
									   - summNodesAttributeValues(PMixProductCert,"netAmtEatIn")
									   - (summNodesAttributeValues(nodeEatInCashTotals.Cash.Fee,"amount"))
									   - (summNodesAttributeValues(nodeEatInCashTotals.Cash.Deposit,"amount"))									   
									   + summNodesAttributeValues(PMixProductCertRef,"netAmtEatIn")
	   								   + summNodesAttributeValues(PMixProductCardRef,"netAmtEatIn");

		/* prevent negative */
		if (eiNetAmount < 0) { eiNetAmount = 0; }


		var eiPercent				= calculatePercentage(eiNetAmount, netSalesAmount);
		var eiTax					= summNodesAttributeValues(nodeEatInCashTotals.Cash,"taxAmount");

		/* prevent negative */
		if (eiTax < 0) { eiTax = 0; }

		// Take out values
		var toqtdTCDiscard 			= root.CashStatistics.SaleType.(@name=="TAKE_OUT").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
		var toTc					= summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "tc") -
								      (summNodesAttributeValues(toqtdTCDiscard,"tc")<=0 ? 0 : summNodesAttributeValues(toqtdTCDiscard,"tc"))-summNodesAttributeValues(nodeVoid, "overringTakeoutTC");
		var toNetAmount				= summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "netAmount")
									   - summNodesAttributeValues(PMixProductCard,"netAmtTakeOut")
									   - summNodesAttributeValues(PMixProductCert,"netAmtTakeOut")
									   - (summNodesAttributeValues(nodeTakeOutCashTotals.Cash.Fee,"amount"))
									   - (summNodesAttributeValues(nodeTakeOutCashTotals.Cash.Deposit,"amount"))
									   + summNodesAttributeValues(PMixProductCertRef,"netAmtTakeOut")
	   								   + summNodesAttributeValues(PMixProductCardRef,"netAmtTakeOut");
		/* prevent negative */
		if (toNetAmount < 0) { toNetAmount = 0; }

		var toPercent				= calculatePercentage(toNetAmount, totalnetSalesAmount);
		var toTax					= summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "taxAmount");

		/* prevent negative */
		if (toTax < 0) { toTax = 0; }


		/* NVS-883: Sum the total TC of the nodes above, including the duplicated ones */ 
		var toQtdTC_Discarded = summNodesAttributeValues(toqtdTCDiscard, "tc") - summNodesAttributeValues(toqtdTCDiscard, "duplicatedTC"); 
		/* NVS-883: Obtain the total TC of the TAKE-OUT sales */ 
		var totalTakeOutTC = summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "tc") - summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "duplicatedTC"); 
		/* NVS-883: Calculates the TAKE-OUT total valid TCs */ 
		var toTc	 = totalTakeOutTC - toQtdTC_Discarded -summNodesAttributeValues(nodeVoid, "overringTakeoutTC");

		//UberEats Others
		var otherqtdTCDiscard 		= root.CashStatistics.SaleType.(@name=="OTHER").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
		var otherTc					= summNodesAttributeValues(nodeOtherCashTotals.Cash, "tc") -
									  (summNodesAttributeValues(otherqtdTCDiscard,"tc")<=0 ? 0 : summNodesAttributeValues(otherqtdTCDiscard,"tc"));
		var otherNetAmount			= summNodesAttributeValues(nodeOtherCashTotals.Cash, "netAmount")
									   - summNodesAttributeValues(PMixProductCard,"netAmtOther")
									   - summNodesAttributeValues(PMixProductCert,"netAmtOther")
									   - (summNodesAttributeValues(nodeOtherCashTotals.Cash.Fee,"amount"))
									   - (summNodesAttributeValues(nodeOtherCashTotals.Cash.Deposit,"amount"))									   
									   + summNodesAttributeValues(PMixProductCertRef,"netAmtOther")
	   								   + summNodesAttributeValues(PMixProductCardRef,"netAmtOther");
		var otherPercent			= calculatePercentage(otherNetAmount, netSalesAmount);
		var otherTax				= summNodesAttributeValues(nodeOtherCashTotals.Cash, "taxAmount");
		
		//UberEats Others
		// Take out values included Other due to UberEats integration
		toTc += Number(otherTc);
		toNetAmount	+= Number(otherNetAmount);
		toPercent += Number(otherPercent);
		toTax += Number(otherTax);
		if(otherqtdTCDiscard != undefined && otherqtdTCDiscard != null && otherqtdTCDiscard.length() > 0){
			if(toqtdTCDiscard != undefined && toqtdTCDiscard != null && toqtdTCDiscard.length() > 0){
		toqtdTCDiscard.concat(otherqtdTCDiscard);
			}else{
				toqtdTCDiscard = otherqtdTCDiscard;
			}
		}
		

	}

	/* gather extended cash taxes */
	eiTaxIDArray = new Array();
	eiTaxIDArray[0] ={label:"Tax 1", amt:"0.00"};
	eiTaxIDArray[1] ={label:"Tax 2", amt:"0.00"};
	eiTaxIDArray[2] ={label:"Tax 3", amt:"0.00"};
	eiTaxIDArray[3] ={label:"Tax 4", amt:"0.00"};

	toTaxIDArray = new Array();
	toTaxIDArray[0] ={label:"Tax 1", amt:"0.00"};
	toTaxIDArray[1] ={label:"Tax 2", amt:"0.00"};
	toTaxIDArray[2] ={label:"Tax 3", amt:"0.00"};
	toTaxIDArray[3] ={label:"Tax 4", amt:"0.00"};	
	
	//UberEats Others - sum to take out array
	//otherTaxIDArray = new Array();
	//otherTaxIDArray[0] ={label:"Tax 1", amt:"0.00"};
	//otherTaxIDArray[1] ={label:"Tax 2", amt:"0.00"};
	//otherTaxIDArray[2] ={label:"Tax 3", amt:"0.00"};
	//otherTaxIDArray[3] ={label:"Tax 4", amt:"0.00"};	

	/* get the use tax to decide if we should add promo data or not */ 
	var config 	=new Config ("UseDiscount", true);
	promoUseTax 	=config.getParameter("PromoTaxRate");
	empUseTax 	=config.getParameter("EmployeeMealtaxRate");

	//var taxIDNodes 		=rootCash.TaxRateTable.TaxRate;
	
	if (Number(promoUseTax) > 0) { 
		nodeEatInTaxNodes 		=nodeSaleTypeEatIn.OperationKind.( (@id!="REFUND" && @id!="CASHLESS_REFUND")).CashTotals.Cash.Tax;
		nodeTakeOutTaxNodes 	=nodeSaleTypeTakeOut.OperationKind.( (@id!="REFUND" && @id!="CASHLESS_REFUND")).CashTotals.Cash.Tax;
		//UberEats Others
		nodeOtherTaxNodes 	=nodeSaleTypeOther.OperationKind.( (@id!="REFUND" && @id!="CASHLESS_REFUND")).CashTotals.Cash.Tax;
		if(nodeOtherTaxNodes != undefined && nodeOtherTaxNodes != null && nodeOtherTaxNodes.length() > 0){
			if(nodeTakeOutTaxNodes != undefined && nodeTakeOutTaxNodes != null && nodeTakeOutTaxNodes.length() > 0){
				for(var i = 0; i < nodeOtherTaxNodes.length(); i++) {
					var node = new XML(nodeOtherTaxNodes[i]);
					nodeTakeOutTaxNodes+=node;
				}
			}else{
				nodeTakeOutTaxNodes = nodeOtherTaxNodes;
			}
		}
	} else { 
		nodeEatInTaxNodes 		=nodeSaleTypeEatIn.OperationKind.( (@id!="REFUND" && @id!="CASHLESS_REFUND" && @id!="PROMO")).CashTotals.Cash.Tax;
		nodeTakeOutTaxNodes 	=nodeSaleTypeTakeOut.OperationKind.( (@id!="REFUND" && @id!="CASHLESS_REFUND" && @id!="PROMO")).CashTotals.Cash.Tax;	
		//UberEats Others		
		nodeOtherTaxNodes 	=nodeSaleTypeOther.OperationKind.( (@id!="REFUND" && @id!="CASHLESS_REFUND" && @id!="PROMO")).CashTotals.Cash.Tax;
		if(nodeOtherTaxNodes != undefined && nodeOtherTaxNodes != null && nodeOtherTaxNodes.length() > 0){
			if(nodeTakeOutTaxNodes != undefined && nodeTakeOutTaxNodes != null && nodeTakeOutTaxNodes.length() > 0){
				for(var i = 0; i < nodeOtherTaxNodes.length(); i++) {
					var node = new XML(nodeOtherTaxNodes[i]);
					nodeTakeOutTaxNodes+=node;
				}
			}else{
				nodeTakeOutTaxNodes = nodeOtherTaxNodes;
			}			
		}		
	}
	
	nodeEatInTaxRefundNodes 	= nodeSaleTypeEatIn.OperationKind.(@id=="REFUND" && @subType=="TAX").CashTotals.Cash.Tax;
	nodeTakeOutTaxRefundNodes	= nodeSaleTypeTakeOut.OperationKind.(@id=="REFUND" && @subType=="TAX").CashTotals.Cash.Tax;
	//UberEats Others
	nodeOtherTaxRefundNodes = nodeSaleTypeOther.OperationKind.(@id=="REFUND" && @subType=="TAX").CashTotals.Cash.Tax;
	if(nodeOtherTaxRefundNodes != undefined && nodeOtherTaxRefundNodes != null && nodeOtherTaxRefundNodes.length() > 0){
		if(nodeTakeOutTaxRefundNodes != undefined && nodeTakeOutTaxRefundNodes != null && nodeTakeOutTaxRefundNodes.length() > 0){
			for(var i = 0; i < nodeOtherTaxRefundNodes.length(); i++) {
				var node = new XML(nodeOtherTaxRefundNodes[i]);
				nodeTakeOutTaxRefundNodes+=node;
			}
		}else{
			nodeTakeOutTaxRefundNodes = nodeOtherTaxRefundNodes;
		}		
	}

	//UberEats Others
	/* eatin=0, takeout=1, other=2 */
	for (salesType=0;salesType<2;salesType++) {

		switch(salesType){
			case 0:
				taxNodes = nodeEatInTaxNodes;
				taxRefundNodes = nodeEatInTaxRefundNodes;
				taxIDArray = eiTaxIDArray;
				totalTaxAmt = eiTax;
				break;
			case 1:
				taxNodes = nodeTakeOutTaxNodes;
				taxRefundNodes = nodeTakeOutTaxRefundNodes;
				taxIDArray = toTaxIDArray;
				totalTaxAmt = toTax;
				break;	
			//case 2:
			//	taxNodes = nodeOtherTaxNodes;
			//	taxRefundNodes = nodeOtherTaxRefundNodes;
			//	taxIDArray = otherTaxIDArray;
			//	totalTaxAmt = otherTax;
			//	break;

		}

		/* handle when there is no tax chain, report all tax as tax 1 */
		if (taxIDList.length == 0) {
			taxIDArray[0] ={label:"Tax 1", amt:totalTaxAmt};
		}

		/* iterate through the taxIDs create a label and amts for each */
		for each (taxIDNode in taxIDNodes) {
			taxRate 		=taxIDNode.TaxRate;
			taxID 		=taxIDNode.TaxId;
			thisTax 		=taxNodes.(@id == taxID);
			taxIndex 		=taxIDList["ID:"+taxID];
			if (taxIndex == null) { continue; } 
			
			if (thisTax.length() > 0) {
				taxAmt 		=summNodesAttributeValues(taxNodes.(@id == taxID),"taxAmount");
				taxAmtRefund 	=summNodesAttributeValues(taxRefundNodes.(@id == taxID),"taxAmount");
			} else { 
				taxAmt 		=0;
				taxAmtRefund 	=0;				
			} 

			/* subtract refunds from tax */
			if (String(taxAmt).length == 0) { taxAmt = 0;}
			taxAmt = (taxAmt>=taxAmtRefund)?taxAmt-taxAmtRefund:0;

			taxLabel	="Tax "+taxIndex+" ("+taxRate+"%)";
			taxIDArray[taxIndex-1] ={label:taxLabel, amt:taxAmt};	
		}
	}


	/* gather fees and deposits */
	depositArray = new Array();
	depNodes	 = new Array();
	totalDeposit = 0;
	depNodes[0] = root.CashDetails.Deposits.Deposit.(@id==1);
	depNodes[1] = root.CashDetails.Deposits.Deposit.(@id==2);

	for (i = 0;i<2;i++) {
		if (depositList.DepositType.(@depositCode==(i+1)) == null) {
			depLabel	= "Dep "+(i+1);
			depAmt	= "0";
		} else {
			depositType 	=String(depositList.(@depositCode==(i+1)).Pricing.(@priceCode=="EATIN").@type );
			depositValue 	=String(depositList.(@depositCode==(i+1)).Pricing.(@priceCode=="EATIN").Value );

			if (depositType == "RATE") {
				depLabel	="Dep "+(i+1)+" ("+depositValue+"%)";
			} else if (depositType == "AMOUNT") {
				depLabel	="Dep "+(i+1)+" ($"+depositValue+")";
			} else {
				depLabel	="Dep "+(i+1);
			}

			depAmt 	=Number(summNodesAttributeValues(depNodes[i],"eatInAmount")) + Number(summNodesAttributeValues(depNodes[i],"takeOutAmount"));
			if (depAmt == null) { depAmt = 0}
		}

		depositArray.push({label:depLabel, amt:depAmt});
		totalDeposit +=Number(depAmt);
	}

	feeArray = new Array();
	feeNodes = new Array();
	totalFee = 0;

	feeNodes[0] = root.CashDetails.Fees.Fee.(@id==1);
	feeNodes[1] = root.CashDetails.Fees.Fee.(@id==2);
	for (i = 0;i<2;i++) {
		if (feeList.FeeType.(@feeCode==(i+1)) == null) {
			feeLabel	= "Fee "+(i+1);
			feeAmt	= "0";
		} else {
			/* NVS-751 -add fee taxes to tax breakdown and total */
			feeType 	=String(feeList.(@feeCode==(i+1)).Pricing.(@priceCode=="EATIN").@type );
			feeValue 	=String(feeList.(@feeCode==(i+1)).Pricing.(@priceCode=="EATIN").Value );
			if (feeType == "RATE") {
			feeLabel	="Fee "+(i+1)+" ("+feeValue+"%)";

			} else if (feeType == "AMOUNT") {
				feeLabel	="Fee "+(i+1)+" ($"+feeValue+")";
			} else {
				feeLabel	="Fee "+(i+1);
			}

			feeAmt 	=summNodesAttributeValues(feeNodes[i],"amount");
			if (feeAmt == null) { feeAmt = 0}	
		}

		feeArray.push({label:feeLabel, amt:feeAmt});
		totalFee +=Number(feeAmt);
	}	

	// generate the XML output
	var XMLCashRpt = new XML("<XMLCashRpt/>");
		XMLCashRpt.Manager.@value=managerId;
		XMLCashRpt.CashierID.@value=cashierId;
		XMLCashRpt.Cashier.@value=API.setOnRight(cashierName, 19);
		XMLCashRpt.InitialFloat.@value=trim(API.formatNumber(initialFloat,".00",50));
		XMLCashRpt.Opentime.@value=cashierOpenTime;
		XMLCashRpt.Closetime.@value=cashierCloseTime;
		XMLCashRpt.Closereading.@value=trim(API.formatNumber(Number(closingReading),".00",50));
		XMLCashRpt.Openingreading.@value=trim(API.formatNumber(openingReading,".00",50));
		XMLCashRpt.DIFFERENCE.@value=trim(API.formatNumber(difference,".00",50));
		XMLCashRpt.Overring.@tc=overringsTC;
		XMLCashRpt.Overring.@amount=trim(API.formatNumber(overringsAmount,".00",50));
		XMLCashRpt.CashRefunds.@tc=totTcCashRefunds;
		XMLCashRpt.CashRefunds.@amount=trim(API.formatNumber(totAmountCashRefunds,".00",50));
		var grossCashlessRefundsAmount = (cashlessRefundsAmount + cashlessRefundsTaxAmount);
		XMLCashRpt.CashlessRefunds.@tc=cashlessRefundsTC;
		XMLCashRpt.CashlessRefunds.@amount=trim(API.formatNumber(grossCashlessRefundsAmount,".00",50));
		XMLCashRpt.OtherReceipts.@tc=nodeTransfersInOtherReceiptsCout;
		XMLCashRpt.OtherReceipts.@amount=trim(API.formatNumber(nodeTransfersInOtherReceiptsAmount,".00",50));
		XMLCashRpt.GiftCertSold.@tc=mcCertSalesCount - mcCertSalesRefundCount;
		XMLCashRpt.GiftCertSold.@amount=trim(API.formatNumber(mcCertSalesAmount - mcCertSalesRefundAmount,".00",50));
		XMLCashRpt.GiftCardSold.@tc=mcCardSalesCount - mcCardSalesRefundCount;
		XMLCashRpt.GiftCardSold.@amount=trim(API.formatNumber(mcCardSalesAmount - mcCardSalesRefundAmount,".00",50));
		XMLCashRpt.GiftCertASold.@tc=mcCertASalesCount - mcCertASalesRefundCount;
		XMLCashRpt.GiftCertASold.@amount=trim(API.formatNumber(mcCertASalesAmount - mcCertASalesRefundAmount,".00",50));
		XMLCashRpt.GiftCertBSold.@tc=mcCertBSalesCount - mcCertBSalesRefundCount;
		XMLCashRpt.GiftCertBSold.@amount=trim(API.formatNumber(mcCertBSalesAmount - mcCertBSalesRefundAmount,".00",50));
		XMLCashRpt.GROSSSALES.@value=trim(API.formatNumber(grossSalesAmount,".00",50));
		XMLCashRpt.NOTAXSALES.@tc=netSalesTcTaxExempt+netSalesTcNoTax;
		XMLCashRpt.NOTAXSALES.@value=trim(API.formatNumber(netSalesAmountNoTax + netSalesAmountTaxExempt +  netSalesAmountDiscountTaxExempt,".00",50));
		XMLCashRpt.NONTAXABLESALES.@value=trim(API.formatNumber(Number(netSalesAmountNeverTax),".00",50));
		var taxSales = totalnetSalesAmount - netSalesAmountNeverTax - (XMLCashRpt.NOTAXSALES.@value);
		XMLCashRpt.TAXABLESALES.@tc=trim(API.formatNumber(totTaxAmount,".00",50));
		XMLCashRpt.TAXABLESALES.@amount=trim(API.formatNumber(Number(taxSales),".00",50));
		var totalProductSales	= totalnetSalesAmount - totalNonProductSales;
		XMLCashRpt.TOTALNETSALES.@value=trim(API.formatNumber(totalnetSalesAmount,".00",50));
		XMLCashRpt.NonProductSales.@value=trim(API.formatNumber(totalNonProductSales,".00",50));
		XMLCashRpt.PRODUCTsales.@value=trim(API.formatNumber(totalProductSales,".00",50));
		// NVS-181  RPS  03/30/10  Make sure the next two values never are reported as negative
		(qtyTenderIdArray[GIFT_CARD] >= 0) ? (XMLCashRpt.GiftCardRedeem.@tc=qtyTenderIdArray[GIFT_CARD]) : (XMLCashRpt.GiftCardRedeem.@tc=0);
		(drawerAmountTenderIdArray[GIFT_CARD] >= 0) ? (XMLCashRpt.GiftCardRedeem.@amount=drawerAmountTenderIdArray[GIFT_CARD]) : (XMLCashRpt.GiftCardRedeem.@amount=0);
		XMLCashRpt.CashlessSales.@tc=qtyTenderIdArray[CASH_SALE];
		XMLCashRpt.CashlessSales.@amount=drawerAmountTenderIdArray[CASH_SALE]+grossCashlessRefundsAmount;
		XMLCashRpt.CashTransferIn.@tc=nodeTransfersInTransferCout;
		XMLCashRpt.CashTransferIn.@amount=trim(API.formatNumber(nodeTransfersInTransferAmount,".00",50));
		XMLCashRpt.CashTransferOut.@tc=nodeTransfersOutTransferCout;
		XMLCashRpt.CashTransferOut.@amount=trim(API.formatNumber(nodeTransfersOutTransferAmount,".00",50));
		XMLCashRpt.BillableSales.@tc=qtyTenderIdArray[BILL_SALE];
		XMLCashRpt.BillableSales.@amount=drawerAmountTenderIdArray[BILL_SALE];

		/* added for uber eats delivery sales that goes into Billable sales UberEats NVS-6999 - msilva - UberEats Integration  */ 
		//NVS-7060 - msilva - UberEats Cash Report
		XMLCashRpt.deliveryBillableSale.@tc=deliveryBillableSaleTC;
		XMLCashRpt.deliveryBillableSale.@amount=deliveryBillableSaleAmt;

		//NVS-181 RPS 03/30/10 make sure the next 4 values never are reported as negative
		(qtyTenderIdArray[GIFT_CERT] >= 0) ? (XMLCashRpt.GiftCertif.@tc=qtyTenderIdArray[GIFT_CERT]) : (XMLCashRpt.GiftCertif.@tc=0);
		(drawerAmountTenderIdArray[GIFT_CERT] >= 0) ? (XMLCashRpt.GiftCertif.@amount=trim(API.formatNumber(drawerAmountTenderIdArray[GIFT_CERT],".00",50))) :(XMLCashRpt.GiftCertif.@amount=0);
		(qtyTenderIdArray[GIFT_BOOK] >= 0) ? (XMLCashRpt.GiftBook.@tc=qtyTenderIdArray[GIFT_BOOK]) :(XMLCashRpt.GiftBook.@tc=0);
		(drawerAmountTenderIdArray[GIFT_BOOK] >= 0) ? (XMLCashRpt.GiftBook.@amount=trim(API.formatNumber(drawerAmountTenderIdArray[GIFT_BOOK],".00",50))) :(XMLCashRpt.GiftBook.@amount=0);
		// Fault Gift Card Redeem,Cashless Sales and Billable Sales
		var computerCash = difference -
		                   overringsAmount -
		                   totAmountCashRefunds -
		                   drawerAmountTenderIdArray[GIFT_CARD] -
		                   drawerAmountTenderIdArray[CASH_SALE] -
		                   grossCashlessRefundsAmount +
		                   nodeTransfersInTransferAmount -
		                   nodeTransfersOutTransferAmount -
		                   drawerAmountTenderIdArray[BILL_SALE] -
		                   drawerAmountTenderIdArray[GIFT_CERT] -
		                   drawerAmountTenderIdArray[GIFT_BOOK];

		computerCash -= getCouponTypeCalulateTotals();

		//UberEats Others
		computerCash -= deliveryBillableSaleAmt;

		XMLCashRpt.COMPUTEDCASH.@value=trim(API.formatNumber(computerCash,".00",50));
		XMLCashRpt.CashSkims.@value=trim(API.formatNumber(nodeTransfersOutskimAmount,".00",50));
		XMLCashRpt.ChangeRounding.@value=trim(API.formatNumber(sumChangeRounding,".00",50));
		XMLCashRpt.ChangeRounding.@tc=qtyChangeRounding;
		var expectedCash = computerCash +
						   initialFloat -
						   nodeTransfersOutskimAmount -
						   sumChangeRounding;
		XMLCashRpt.Expectedcash.@value=trim(API.formatNumber(expectedCash,".00",50));
		XMLCashRpt.CashCashUS.@tc=tcTenderIdArray[CASH_US];
		XMLCashRpt.CashCashUS.@amount=trim(API.formatNumber(drawerAmountTenderIdArray[CASH_US]-initialFloat,".00",50));
		// if FOREIGN_CUR == 0 , then no foreign currency is active, the amounts should be 0
		// SDO-4622  RPS 2-3-2012
		XMLCashRpt.ForeignAmount.@tc=0;
		XMLCashRpt.ForeignAmount.@amount=trim(API.formatNumber(0,".00",50));
		for (forCur=12;forCur<=13;forCur++) {
			if (tcTenderIdArray[forCur] > 0) { 
				XMLCashRpt.ForeignAmount.@tc=tcTenderIdArray[forCur];
				XMLCashRpt.ForeignAmount.@amount=trim(API.formatNumber(drawerAmountTenderIdArray[forCur],".00",50));
			}
		}
		
		/* NVS-dem -added for backoffice support */
		XMLCashRpt.ForeignCurrencyAComputed.@tc  	=XMLCashRpt.ForeignAmount.@tc;
		XMLCashRpt.ForeignCurrencyAComputed.@amount =XMLCashRpt.ForeignAmount.@amount;
		
		// NVS-607 RPS 10-04-2011 the following line was missing
		(qtyTenderIdArray[COUPON_A] >= 0) ? (XMLCashRpt.CouponA.@tc=qtyTenderIdArray[COUPON_A]) : (XMLCashRpt.CouponA.@tc=0);
		(drawerAmountTenderIdArray[COUPON_A] >= 0) ? (XMLCashRpt.CouponA.@amount=trim(API.formatNumber(drawerAmountTenderIdArray[COUPON_A],".00",50))) : (XMLCashRpt.CouponA.@amount=0);
		(qtyTenderIdArray[COUPON_B] >= 0) ? (XMLCashRpt.CouponB.@tc=qtyTenderIdArray[COUPON_B]) : (XMLCashRpt.CouponB.@tc=0);
		(drawerAmountTenderIdArray[COUPON_B] != 0) ? (XMLCashRpt.CouponB.@amount=trim(API.formatNumber(drawerAmountTenderIdArray[COUPON_B],".00",50))) : (XMLCashRpt.CouponB.@amount=0);
		(qtyTenderIdArray[COUPON_C] >= 0) ? (XMLCashRpt.CouponC.@tc=qtyTenderIdArray[COUPON_C]) :(XMLCashRpt.CouponC.@tc=0);
		(drawerAmountTenderIdArray[COUPON_C] >= 0) ? (XMLCashRpt.CouponC.@amount=trim(API.formatNumber(drawerAmountTenderIdArray[COUPON_C],".00",50))) : (XMLCashRpt.CouponC.@amount=0);
		(qtyTenderIdArray[COUPON_D] >= 0) ? (XMLCashRpt.CouponD.@tc=qtyTenderIdArray[COUPON_D]) : (XMLCashRpt.CouponD.@tc=0);
		(drawerAmountTenderIdArray[COUPON_D] >= 0) ? (XMLCashRpt.CouponD.@amount=trim(API.formatNumber(drawerAmountTenderIdArray[COUPON_D],".00",50))) :(XMLCashRpt.CouponD.@amount=0);
		(qtyTenderIdArray[COUPON_E] >= 0) ? (XMLCashRpt.CouponE.@tc=qtyTenderIdArray[COUPON_E]) : (XMLCashRpt.CouponE.@tc=0);
		(drawerAmountTenderIdArray[COUPON_E] >= 0) ? (XMLCashRpt.CouponE.@amount=trim(API.formatNumber(drawerAmountTenderIdArray[COUPON_E],".00",50))) : (XMLCashRpt.CouponE.@amount=0);
		if(-1!=reportType) {
		 	// Get tender information
			XMLCashRpt.nodesTender = nodeTenders.Tender
		}
		XMLCashRpt.Giftcardcashout.@tc=cashoutTc[GIFT_CARD];
		XMLCashRpt.Giftcardcashout.@amount=trim(API.formatNumber(cashoutAmount[GIFT_CARD],".00",50));
		XMLCashRpt.EFTcashout.@tc=nodeCashOutTC;
		XMLCashRpt.EFTcashout.@amount=nodeCashOutAmount;
		
		/* NVS-1482 */ 
		XMLCashRpt.TotalTCAC.@tc=totalTc -outProgressTC;
		
		var unitPricePerTc	= (XMLCashRpt.TotalTCAC.@tc != 0) ? (totalnetSalesAmount / XMLCashRpt.TotalTCAC.@tc) : 0; // Truncates value (ROUND_DOWN)
		XMLCashRpt.TotalTCAC.@amount=trim(API.formatNumber(unitPricePerTc,".00",50));
		XMLCashRpt.NetsalesDThru.@tc=dtTc;
		XMLCashRpt.NetsalesDThru.@amount=trim(API.formatNumber(dtNetAmount,".00",50));
		XMLCashRpt.PercentDThru.@value=trim(API.formatNumber(dtPercent,".00",50));
		XMLCashRpt.Cars.@value=dtCars;

		XMLCashRpt.NetsalesWThru.@tc=wtTc;
		XMLCashRpt.NetsalesWThru.@amount=trim(API.formatNumber(wtNetAmount,".00",50));
		XMLCashRpt.PercentWThru.@value=trim(API.formatNumber(wtPercent,".00",50));

		XMLCashRpt.NetsalesBfast.@tc=breakFastDayMenunodesCashTc;
		XMLCashRpt.NetsalesBfast.@amount=trim(API.formatNumber(breakFastDayMenunodesCashnetAmount,".00",50));
		XMLCashRpt.BreakfastPercent.@value=trim(API.formatNumber(breakFastDayMenuPercent,".00",50));
		XMLCashRpt.NetsalesEatIn.@tc=eiTc;
		XMLCashRpt.NetsalesEatIn.@amount=trim(API.formatNumber(eiNetAmount,".00",50));
		XMLCashRpt.EatIntax.@value=trim(API.formatNumber(eiTax,".00",50));
		XMLCashRpt.NetsalesTakeOut.@tc=toTc;
		XMLCashRpt.NetsalesTakeOut.@amount=trim(API.formatNumber(toNetAmount,".00",50));
		XMLCashRpt.TakeOuttax.@value=toTax;

		XMLCashRpt.TakeOutPercent.@value=trim(API.formatNumber(toPercent,".00",50));
		XMLCashRpt.NetsalesGarden.@tc=otherTc;
		XMLCashRpt.NetsalesGarden.@amount=trim(API.formatNumber(otherNetAmount,".00",50));
		XMLCashRpt.Gardentax.@tc=trim(API.formatNumber(otherTax,".00",50));
		XMLCashRpt.Waste.@tc=wastenodesCashTc;
		XMLCashRpt.Waste.@amount=trim(API.formatNumber(wastenodesCashnetAmount,".00",50));
		XMLCashRpt.PROMO.@tc=promonodesCashTc;
		XMLCashRpt.PROMO.@amount=trim(API.formatNumber(promonodesCashnetAmount,".00",50));
		XMLCashRpt.Amountdiscount.@tc=discountnodesCashTc;
		XMLCashRpt.Amountdiscount.@amount=trim(API.formatNumber(discountDiscount,".00",50));
		XMLCashRpt.EmpMealdiscount.@tc=crewnodesCashTc;
		XMLCashRpt.EmpMealdiscount.@amount=trim(API.formatNumber(crewDiscount,".00",50));
		XMLCashRpt.MgrMealdiscount.@tc=managernodesCashTc;
		XMLCashRpt.MgrMealdiscount.@amount=trim(API.formatNumber(managerDiscount,".00",50));
		XMLCashRpt.RedBeforeTotal.@tc=tredItemsBeforeTl;
		XMLCashRpt.RedBeforeTotal.@amount=trim(API.formatNumber(tredAmtBeforeTl,".00",50));
		XMLCashRpt.AvgRedBeforeTotal.@value=tredAverageBeforeTl;
		XMLCashRpt.RedAfterTotal.@tc=trim(API.formatNumber(tredsAfterTotal,".00",50));
		XMLCashRpt.RedAfterTotal.@amount=tredsAmtAfterTotal;
		XMLCashRpt.AvgRedAfterTotal.@value=trim(API.formatNumber(tredAverageAfterTl,".00",50));
		XMLCashRpt.Draweropens.@value=unauthDrawerOpenings;

		XMLCashRpt.Tax_1.@totalLabel="Tax 1";
		//UberEats Others
		//XMLCashRpt.Tax_1.@totalAmt=(Number(eiTaxIDArray[0].amt)+Number(toTaxIDArray[0].amt)+Number(otherTaxIDArray[0].amt));
		XMLCashRpt.Tax_1.@totalAmt=(Number(eiTaxIDArray[0].amt)+Number(toTaxIDArray[0].amt));
		XMLCashRpt.Tax_1.@eiLabel= eiTaxIDArray[0].label;
		XMLCashRpt.Tax_1.@eiAmt= eiTaxIDArray[0].amt
		XMLCashRpt.Tax_1.@toLabel=toTaxIDArray[0].label
		XMLCashRpt.Tax_1.@toAmt=toTaxIDArray[0].amt
		//XMLCashRpt.Tax_1.@otherLabel=otherTaxIDArray[0].label
		//XMLCashRpt.Tax_1.@otherAmt=otherTaxIDArray[0].amt		

		XMLCashRpt.Tax_2.@totalLabel="Tax 2";
		//UberEats Others
		//XMLCashRpt.Tax_2.@totalAmt=(Number(eiTaxIDArray[1].amt)+Number(toTaxIDArray[1].amt)+Number(otherTaxIDArray[1].amt));
		XMLCashRpt.Tax_2.@totalAmt=(Number(eiTaxIDArray[1].amt)+Number(toTaxIDArray[1].amt));
		XMLCashRpt.Tax_2.@eiLabel= eiTaxIDArray[1].label;
		XMLCashRpt.Tax_2.@eiAmt= eiTaxIDArray[1].amt
		XMLCashRpt.Tax_2.@toLabel=toTaxIDArray[1].label
		XMLCashRpt.Tax_2.@toAmt=toTaxIDArray[1].amt
		//XMLCashRpt.Tax_2.@otherLabel=otherTaxIDArray[1].label
		//XMLCashRpt.Tax_2.@otherAmt=otherTaxIDArray[1].amt		


		XMLCashRpt.Tax_3.@totalLabel="Tax 3";
		//UberEats Others
		//XMLCashRpt.Tax_3.@totalAmt=(Number(eiTaxIDArray[2].amt)+Number(toTaxIDArray[2].amt)+Number(otherTaxIDArray[2].amt));
		XMLCashRpt.Tax_3.@totalAmt=(Number(eiTaxIDArray[2].amt)+Number(toTaxIDArray[2].amt));
		XMLCashRpt.Tax_3.@eiLabel= eiTaxIDArray[2].label;
		XMLCashRpt.Tax_3.@eiAmt= eiTaxIDArray[2].amt
		XMLCashRpt.Tax_3.@toLabel=toTaxIDArray[2].label
		XMLCashRpt.Tax_3.@toAmt=toTaxIDArray[2].amt
		//XMLCashRpt.Tax_3.@otherLabel=otherTaxIDArray[2].label
		//XMLCashRpt.Tax_3.@otherAmt=otherTaxIDArray[2].amt		


		XMLCashRpt.Tax_4.@totalLabel="Tax 4";
		//UberEats Others		
		//XMLCashRpt.Tax_4.@totalAmt=(Number(eiTaxIDArray[3].amt)+Number(toTaxIDArray[3].amt)+Number(otherTaxIDArray[3].amt));
		XMLCashRpt.Tax_4.@totalAmt=(Number(eiTaxIDArray[3].amt)+Number(toTaxIDArray[3].amt));
		XMLCashRpt.Tax_4.@eiLabel= eiTaxIDArray[3].label;
		XMLCashRpt.Tax_4.@eiAmt= eiTaxIDArray[3].amt
		XMLCashRpt.Tax_4.@toLabel=toTaxIDArray[3].label
		XMLCashRpt.Tax_4.@toAmt=toTaxIDArray[3].amt
		//XMLCashRpt.Tax_4.@otherLabel=otherTaxIDArray[3].label
		//XMLCashRpt.Tax_4.@otherAmt=otherTaxIDArray[3].amt		


		XMLCashRpt.totalDeposit.@amt=totalDeposit;
		for (i=0;i<depositArray.length;i++) {
			XMLCashRpt["Deposit_"+(i+1)].@label =depositArray[i].label;
			XMLCashRpt["Deposit_"+(i+1)].@amt =depositArray[i].amt;
		}

		XMLCashRpt.totalFee.@amt=totalFee;
		for (i=0;i<feeArray.length;i++) {
			XMLCashRpt["Fee_"+(i+1)].@label =feeArray[i].label;
			XMLCashRpt["Fee_"+(i+1)].@amt =feeArray[i].amt;
		}
		
		
		/* iterate through the cash report and make sure no values are negatives */ 
		for each (var bucket in XMLCashRpt.*) {
			attCount =bucket.attributes().length();		
			for (i=0;i<attCount;i++)  {
				if (bucket.attributes()[i] < 0) { 
					bucket.attributes()[i] = 0; 
				}
				
				tag = 0;
			}
		} 
		

	return XMLCashRpt;

	//NVS-550
	function getCouponTypeCalulateTotals() {
		var ReturnValue = 0.0;

		// get TenderTypes List
		var TenderTypeList = xmlStoreDB.StoreDB.TenderTypes.TenderType;

		// First Tender Type
		var sTenderType = new XML(TenderTypeList[0]);
		var i = 0;

		// Check to see if a foreign currency has been defined
		// Since we were going through the tender types anyway

		// process until there are no more TenderType
		while (	TenderTypeList[i] != null ) {

			if (sTenderType.TenderId == "1") {
				if (sTenderType.TaxOption == "CALCULATE" && sTenderType.SubtotalOption == "CALCULATE") {
					ReturnValue += drawerAmountTenderIdArray[COUPON_A];
				}
			} else if (sTenderType.TenderId == "2") {
				if (sTenderType.TaxOption == "CALCULATE" && sTenderType.SubtotalOption == "CALCULATE") {
					ReturnValue += drawerAmountTenderIdArray[COUPON_B];
				}
			} else if (sTenderType.TenderId == "3") {
				if (sTenderType.TaxOption == "CALCULATE" && sTenderType.SubtotalOption == "CALCULATE") {
					ReturnValue += drawerAmountTenderIdArray[COUPON_C];
				}
			} else if (sTenderType.TenderId == "4") {
				if (sTenderType.TaxOption == "CALCULATE" && sTenderType.SubtotalOption == "CALCULATE") {
					ReturnValue += drawerAmountTenderIdArray[COUPON_D];
				}
			} else if (sTenderType.TenderId == "5") {
				if (sTenderType.TaxOption == "CALCULATE" && sTenderType.SubtotalOption == "CALCULATE") {
					ReturnValue += drawerAmountTenderIdArray[COUPON_E];
				}
			}

			// get Next TenderType
			i = i + 1;
			sTenderType = new XML(TenderTypeList[i]);
		}

		return ReturnValue;
	}
	/* returns the tc's for fees and deposits for the operation kind passed it (used to subtract fees and deps TC from various buckets */
	function GetRefundTC_MinusNonTax(nodeCashStatistics,id) { 
		var total =summNodesAttributeValues(nodeCashStatistics.SaleType.OperationKind.(@id==id && @subType=="NEVER_TAX").CashTotals.Cash,"tc");
		return Number(total);
	} 

	function getOperationKindId(nodeCashStatistics,saleTypeName,typeId)
	{
		var retunArray = Array(0,new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),0,new BigDecimal("0.00"), 
		/* NVS-848: Include fee and deposit values */ new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"), 
		/* NVS-905: Include the "duplicatedTC" parameter */ 0); 

		var nodesOperationKindAux;
		if(""==saleTypeName) {
			nodesOperationKindAux = nodeCashStatistics.SaleType.OperationKind;
		}
		else {
			var cmd = "nodeCashStatistics.SaleType.(@name == \"" + saleTypeName + "\").OperationKind";
			nodesOperationKindAux = eval(cmd);
		}
		var cmd = "nodesOperationKindAux.(@id == \"" + typeId + "\")";
		var nodesOperationKind = eval(cmd);

		var nodesOperationKindSize = nodesOperationKind.length();
		for(var i = 0; i < nodesOperationKindSize; i++) {
			var nodeCashTotals = nodesOperationKind[i].CashTotals;
			if(nodeCashTotals != null) {
				var nodeCashAux = nodeCashTotals.Cash[0];
				if(nodeCashAux != null) {
					retunArray[0] += getNumberAttribute(nodeCashAux, "tc");
					retunArray[1]=retunArray[1].add(getBigDecimalAttribute(nodeCashAux, "netAmount"));
					retunArray[2]=retunArray[2].add(getBigDecimalAttribute(nodeCashAux, "netBeforeDiscount"));
					retunArray[3]=retunArray[3].add(getBigDecimalAttribute(nodeCashAux, "couponAmount"));
					retunArray[4]=retunArray[4].add(getBigDecimalAttribute(nodeCashAux, "taxAmount"));
					retunArray[5]=retunArray[5].add(getBigDecimalAttribute(nodeCashAux, "taxBeforeDiscount"));
					retunArray[6] += getNumberAttribute(nodeCashAux, "couponTC"); // NVS-70 - Coupon TCs
					retunArray[7]=retunArray[7].add(getBigDecimalAttribute(nodeCashAux, "netBeforePromo"));
            /* NVS-848 */ 
            retunArray[8] = retunArray[8].add(getBigDecimalAttribute(nodeCashAux, "feeAmount")); 
            retunArray[9] = retunArray[9].add(getBigDecimalAttribute(nodeCashAux, "feeBeforeDiscount")); 
            retunArray[10]= retunArray[10].add(getBigDecimalAttribute(nodeCashAux, "depositAmount")); 
            retunArray[11]= retunArray[11].add(getBigDecimalAttribute(nodeCashAux, "depositBeforeDiscount")); 
			// NVS-905
			retunArray[12] += getNumberAttribute(nodeCashAux, "duplicatedTC");
				}
			}
		}
		return retunArray;
	}
	
	function getOperationKind_FeeAndDep(nodeCashStatistics,id) { 
	   feeNode =nodeCashStatistics.SaleType.OperationKind.(@id==id && @subType=="NEVER_TAX").CashTotals.Cash.Fee; 
	   depNode =nodeCashStatistics.SaleType.OperationKind.(@id==id && @subType=="NEVER_TAX").CashTotals.Cash.Deposit; 
	   total = summNodesAttributeValues(feeNode,"tc") + summNodesAttributeValues(depNode, "tc"); 

	   return total; 
	}

	function getOperationKindId_ex(nodeCashStatistics,saleTypeName,typeId, subTypeId)
	{
		var retunArray = Array(0,new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),0,new BigDecimal("0.00"), 
		/* NVS-848: Include fee and deposit values */ new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00")); 

		var nodesOperationKindAux;
		if(""==saleTypeName) {
			nodesOperationKindAux = nodeCashStatistics.SaleType.OperationKind;
		}
		else {
			var cmd = "nodeCashStatistics.SaleType.(@name == \"" + saleTypeName + "\").OperationKind";
			nodesOperationKindAux = eval(cmd);
		}
		var cmd = "nodesOperationKindAux.(@id == \"" + typeId + "\" && @subType == \"" + subTypeId + "\" )";
		var nodesOperationKind = eval(cmd);

		var nodesOperationKindSize = nodesOperationKind.length();
		for(var i = 0; i < nodesOperationKindSize; i++) {
			var nodeCashTotals = nodesOperationKind[i].CashTotals;
			if(nodeCashTotals != null) {
				var nodeCashAux = nodeCashTotals.Cash[0];
				if(nodeCashAux != null) {
					retunArray[0] += getNumberAttribute(nodeCashAux, "tc");
					retunArray[1]=retunArray[1].add(getBigDecimalAttribute(nodeCashAux, "netAmount"));
					retunArray[2]=retunArray[2].add(getBigDecimalAttribute(nodeCashAux, "netBeforeDiscount"));
					retunArray[3]=retunArray[3].add(getBigDecimalAttribute(nodeCashAux, "couponAmount"));
					retunArray[4]=retunArray[4].add(getBigDecimalAttribute(nodeCashAux, "taxAmount"));
					retunArray[5]=retunArray[5].add(getBigDecimalAttribute(nodeCashAux, "taxBeforeDiscount"));
					retunArray[6] += getNumberAttribute(nodeCashAux, "couponTC"); // NVS-70 - Coupon TCs
					retunArray[7]=retunArray[7].add(getBigDecimalAttribute(nodeCashAux, "netBeforePromo"));
            /* NVS-848 */ 
            retunArray[8] = retunArray[8].add(getBigDecimalAttribute(nodeCashAux, "feeAmount")); 
            retunArray[9] = retunArray[9].add(getBigDecimalAttribute(nodeCashAux, "feeBeforeDiscount")); 
            retunArray[10]= retunArray[10].add(getBigDecimalAttribute(nodeCashAux, "depositAmount")); 
            retunArray[11]= retunArray[11].add(getBigDecimalAttribute(nodeCashAux, "depositBeforeDiscount")); 
				}
			}
		}
		return retunArray;
	}	

	/** Get DayPartId */
	function getDayPartId(nodeCashStatistics,typeId)
	{
		var retunArray = Array(0,0,0);
		var nodesOperationKindAux = nodeCashStatistics.SaleType.DayPart;
		var cmd = "nodesOperationKindAux.(@id == \"" + typeId + "\")";
		var nodesOperationKind = eval(cmd);
		var nodesOperationKindSize = nodesOperationKind.length();
		for(var i = 0; i < nodesOperationKindSize; i++) {
			var nodeCashTotals = nodesOperationKind[i].CashTotals;
			if(nodeCashTotals != null) {
				var nodeCashAux = nodeCashTotals.Cash[0];
				if(nodeCashAux != null) {
					retunArray[0] += getNumberAttribute(nodeCashAux, "tc");
					retunArray[1] += getNumberAttribute(nodeCashAux, "netAmount");
					retunArray[2] += getNumberAttribute(nodeCashAux, "netBeforeDiscount");
				}
			}
		}
		return retunArray;
	}

	/** Calculate total inital float on the given node */
	function calculateInitialFloat(nodeTenders)
	{
		var total = 0;
		if(nodeTenders != null) {
			for each (j in nodeTenders) {
				var nodesTender = j.Tender;
				for each (i in nodesTender) {
					total += Number(i.@initialFloat);
				}
			}
		}
		return Number(total);
	}

	/** Gets waste net amount */
	function getWasteNetAmount(nodeCashStatistics)
	{
		var nodesOperationKind = nodeCashStatistics.OperationKind.(@id=="WASTE");
		var nodesOperationKindSize = nodesOperationKind.size;
		var total = 0;
		for(var i = 0; i < nodesOperationKindSize; i++) {
			var nodeCashTotals = nodesOperationKind[i].CashTotals[0];
			if(nodeCashTotals != null) {
				var nodeCash = nodeCashTotals.Cash[0];
				if(nodeCash != null) {
					total += getNumberAttribute(nodeCash, "netAmount");
				}
			}
		}
		return total;
	}

	/** Gets the foreign drawer count */
	function getForeignCountAmt(nodeJapanData, foreignCurrency)
	{
		var total = 0;
		var nodesCashCountForeign = nodeJapanData.CashCount.(@type=="FOREIGN")
		var nodesCashCountForeignSize = nodesCashCountForeign.length();
		for(var i = 0; i < nodesCashCountForeignSize; i++) {
			var nodeCashCount = nodesCashCountForeign[i];
			if(nodeCashCount.(@value) == foreignCurrency) {
				total += getNumberAttribute(nodeCashCount, "count")
			}
		}
		return total;
	}

	/** Calculates japan percentage by Some amount vs. Total Store Amount. */
	function calculatePercentage(amount, totalStoreAmount)
	{
		var returnValue = 0;

		if (amount > 0) {
			if (totalStoreAmount <= 0) {
				returnValue = 100;
			} else {
				returnValue = (amount / totalStoreAmount * 100);
			}
		} else {
			returnValue = 0;
		}

		//return amount > 0 ? (amount / totalStoreAmount * 100) : 0;
		return returnValue;
	}

	/** Gets the summ of day parts attributes */
	function getDayPartCashAttribute(nodeCashStatistics, dayPart, attributeName)
	{
		var total = 0;
		var nodesSaleType = nodeCashStatistics.SaleType;
		var nodesSaleTypeSize = nodesSaleType.length();
		for(var i = 0; i < nodesSaleTypeSize; i++) {
			var nodeSaleType = nodesSaleType[i];
			var nodeDayPartBF = nodeSaleType.DayPart.(@id==dayPart);
			if(nodeDayPartBF != null) {
				var nodeCash = nodeDayPartBF.Cash[0]; // Note that "Cash" is inside "CashTotals"
				total += getNumberAttribute(nodeCash, attributeName);
			}
		}
		return total;
	}

	/** Gets the summ of given attribute values for given POD type */
	function getPodCashAttribute(startPoint, pod, attributeName)
	{
		var total = 0;
		if(startPoint != null) {
			if(0==startPoint.POS.length()) {
				var nodesPOS = startPoint;
			}
			else {
				var nodesPOS = startPoint.POS;
			}
			var nodesPOSsize = nodesPOS.length();
			for(var i = 0; i < nodesPOSsize; i++) {
				var nodePOS = nodesPOS[i].(@podShort==pod);
				if(nodePOS != null) {
					var nodeCashTotals = nodePOS.CashTotals[0];
					var nodeCash = findFirst(nodeCashTotals, "Cash");
					total += getNumberAttribute(nodeCash, attributeName);
				}
			}
		}
		return total;
	}

	/** Gets the petty-cash amount from a "CashDetails" node */
	function getPettyCashAmount(nodeCashDetails)
	{
		var total = 0;
		if(nodeCashDetails != null) {
			var nodeTransfersOut = nodeCashDetails.TransfersOut.(@type=="OTHER_PAYMENT");
			if(nodeTransfersOut != null) {
				var nodesTransferPettyCash = nodeTransfersOut.Transfer.(@destination=="PETTY_CASH");
				var size = nodesTransferPettyCash.length();
				for(var i = 0; i < size; i++) {
					total += Number(nodesTransferPettyCash[i].(@amount));
				}
			}
		}
		return total;
	}

	/** Gets the petty-cash count from a "CashDetails" node */
	function getPettyCashCount(nodeCashDetails)
	{
		if(nodeCashDetails != null) {
			var nodeTransfersOut = nodeCashDetails.TransfersOut.(@type=="OTHER_PAYMENT");
			if(nodeTransfersOut != null) {
				var nodesTransferPettyCash = nodeTransfersOut.Transfer.(@destination=="PETTY_CASH");
				return nodesTransferPettyCash.length();
			}
		}
		return 0;
	}

	/** Calculates the gross amount of a "Cash" node */
	function getCashGrossAmount(nodeCash)
	{
		if(nodeCash == null) {
			return 0;
		}
		var net = summNodesAttributeValues(nodeCash, "netAmount");
		var tax = summNodesAttributeValues(nodeCash, "taxAmount");

		return net + tax;
	}

	/**
	 * Gets the amount of McCards sold.
	 * @param startPoint product mix start point to look data (Can be the root, a POS, etc...)
	 * @param dayPart if not null, only the given day part will be included (LUNCH or BREAKFAST)
	 * @param saleType if not null, only the given sale type will be included (qtyEatIn or qtyTakeOut)
	 */
	function getmcCertSalesAmount(startPoint, dayPart, saleType)
	{
		if((startPoint == null) && (dayPart == null) && (saleType == null)){
			return 0;
		}
		var nodeFamilyGroup = startPoint.FamilyGroup.(@groupName=="GIFT_COUPON");
		if(nodeFamilyGroup == null) {
			return 0;
		}
		var nodesProduct = nodeFamilyGroup.Product;

		var total = 0;
		var valueAmoutEatIn   = 0;
		var valueAmoutTakeOut = 0;
		var valueAmoutOther   = 0;
		for each (var i in nodesProduct) {
			var nodeOperationType = i.OperationType.(@operationType=="SALE");
			if(nodeOperationType != null) {
				if(dayPart == null) {
				    // All day parts
					var nodesPrice = nodeOperationType.Price;
				}else {
					// Just the given day part
					var nodesPrice = nodeOperationType.Price.(@dayPart==dayPart);
				}

				for each (var j in nodesPrice) {
					if(saleType == null) {
					// EatIn + TakeOut
						var qty = getPMixTotalQty(nodesPrice.PMix);
						nodePMix = nodesPrice.PMix;
						valueAmoutEatIn   += Number(nodePMix.@netAmtEatIn == null ? 0 : nodePMix.@netAmtEatIn);
						valueAmoutTakeOut += Number(nodePMix.@netAmtTakeOut == null ? 0 : nodePMix.@netAmtTakeOut);
						valueAmoutOther   += Number(nodePMix.@netAmtOther == null ? 0 : nodePMix.@netAmtOther);
					}else {
						// Just the given sale type
						var qty = getNumberAttribute(nodesPrice.PMix, saleType);
					}

					total += (qty * getNumberAttribute(nodesPrice, "salePrice"));

				}
			}
		}
		return total;
	}

	/**
	 * Gets the amount of McCards redemeed
	 * @param startPoint CASH start point to look data (Can be the root, a POS, etc...)
	 */
	function getMcCardRedeemedAmount(startPoint)
	{
		if(startPoint == null) {
			return 0;
		}
		var nodeTenders = startPoint.Tenders[0];
		if(nodeTenders == null) {
			return 0;
		}
		var nodesTender = nodeTenders.getChildren();
		var nodesTenderSize = nodesTender.length();
		var total = 0;
		for(var i = 0; i < nodesTenderSize; i++) {
			var nodeTender = nodesTender[i];
			var tenderId = Number(nodeTender.(@id));
			// 19: McCard 200
			// 20: McCard 500
			if(tenderId == MCCARD_1 || tenderId == MCCARD_2) {
				total += Number(nodeTender.(@drawerAmount));
			}
		}
		return total;
	}

	/**
	 * Gets the total tax amount of a "CashStatistics" node for the given operation type
	 */
	function getTotalTaxAmount(nodeCashStatistics, operationType)
	{
		if(nodeCashStatistics == null) {
			return 0;
		}
		var nodeSaleType = nodeCashStatistics.SaleType.(@name==operationType);
		if(nodeSaleType != null) {
			var nodeCashTotals = nodeSaleType.CashTotals[0];
			if(nodeCashTotals != null) {
				var nodeCash = nodeCashTotals.Cash[0];
				if(nodeCash != null) {
					return Number(nodeCash.(@taxAmount));
				}
			}
		}
		return 0;
	}

}
//###########################################################
//End Cash Reports
//###########################################################


/*
 * Summs the values of the given attribute from all given nodes.
 * @nodes list of nodes to summ attributes
 * @attributeName name of the attribute to get value from
 * @return the summ of values of 0 if 'nodes' or 'attributeName' are null.
 */
function summNodesAttributeBigDecimalValues(nodes, attributeName) 
{
	if(nodes == null || attributeName == null) {
		return new BigDecimal("0.00");
	}
	
	var total = new BigDecimal("0.00");
	var size = nodes.length();
	
	if(size == 1){
		var cmd = "nodes.@" + attributeName;
		var value = new BigDecimal(eval(cmd));	
		//total += Number(value);
		total=total.add(value);
	}
	else{
		for(var i = 0; i < size; i++) {
			var cmd = "nodes[" + i + "]" + ".@" + attributeName;
			var value = new BigDecimal(eval(cmd));
			//total += Number(value);
			total=total.add(value);
		}
	}
	return total;
}

//NVS-3748
function getConfigValue(storeDbPath, posDbPath, defaultValue)
 {
	if(typeof(xmlStoreDB) =="undefined")
	{
		xmlStoreDB = new XML(API.getStoredb());
		xmlPosDB = new XML(API.getPosdb());
	}
	if(xmlStoreDB == null)
	{
		xmlStoreDB = new XML(API.getStoredb());
		xmlPosDB = new XML(API.getPosdb());
	}

	if(typeof(xmlPosDB) =="undefined")
	{
		xmlPosDB = new XML(API.getPosdb());
	}
	if(xmlPosDB == null)
	{
		xmlPosDB = new XML(API.getPosdb());
	}
	
	if(posDbPath!="" && posDbPath !=null)
	{
		var value = eval("xmlPosDB."+posDbPath);
		if(value+""!="")
		{
			return  value;
		}
	}

	if(storeDbPath!="" && storeDbPath !=null)
	{
		var value = eval("xmlStoreDB."+storeDbPath);
		if(value+""!="")
		{
			return  value;
		}
	}

	return  defaultValue+"";
		
 }
 
 

/**
 * PUBLIC
 * Implements the cash in drawers report.
 * Needed data types: CASH
 * @author myokomizo
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function reportCashInDrawer(config, data)
{
	if(init(config, data, Array("CASH"), "CSDRW") != 0) {
		return getResponse();
	}

	var lastPOS		= rootCash.POS;
	var indLastPOS	= lastPOS.length() - 1;
	var nodePOS		= lastPOS[0];
	var statusPOS	= getAttribute(nodePOS, "status");

	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= getAttribute(currentOperator, "name");
	var totalExpected	= 0;

	// POS must be opened and an operator must be logged
	if( ( statusPOS != "OPLOGGED" ) || (currentOperator == null) ) {
		addLine("ERROR:There is not an Operator Logged");
		return getResponse();
	}
	addHeader(rootCash, "Cash In Drawer",RPTCASHINDRAWER);
	addOperation("Cashier Name",	operatorName,	false);
	addLine();

// 	Change requested in 23/03/2006
//	totalExpected = addTendersSummary(rootCash, currentOperator);
//	totalExpected = totalExpected.subtract(addSkimsSummary(rootCash, currentOperator));
//	totalExpected = totalExpected.add(addInitialFloats(rootCash, currentOperator));
//	addtTotalExpectedCash(totalExpected);

	var initialFloat = Number(addInitialFloats(rootCash, currentOperator));
	var totalCashTendered = Number(addTendersSummary(rootCash, currentOperator));
	var totalSkims = Number(addSkimsSummary(rootCash, currentOperator));
	totalExpected  = initialFloat + totalCashTendered - totalSkims;

	addLine("-----------------         -------------");
	addLine("Initial Float              " + API.formatNumber(Number(initialFloat), "", 12));
	addLine("Cash Tendered       +      " + API.formatNumber(Number(totalCashTendered), "", 12));
	addLine("Skims               -      " + API.formatNumber(Number(totalSkims), "", 12));
	addLine("-----------------         -------------");
	addLine("Expected Cash In Drawer    " + API.formatNumber(Number(totalExpected), "", 12));

	addFooter(rootCash);

	return getResponse();

	/** Adds an operation line */
	function addOperation(name, value, left)
	{
		var line = API.setOnLeft(name, 18) + ": ";
		if(left) {
			line += API.setOnLeft(value, 19);
		}else {
			line += API.setOnRight(value, 19);
		}
		addLine(line);
	}
	/**
	 * Adds the tenders line separator
	 */
	function addTendersLine()
	{
		addLine(API.replicate("-", 20) + " " + API.replicate("-", 5) + " " + API.replicate("-", 12));
	}
	/**
	 * Adds the total expected cash
	 * @param totalExpected total cash expected
	 */
	function addtTotalExpectedCash(totalExpected)
	{
		addInitialFloatsLine("=");
		addLineOperation("EXPECTED AMOUNT: ", null, totalExpected, "");
	}

	/**
	 * Adds the summary of tenders followed by the total of operations and its total amount
	 * @return total amount of tenders
	 */
	function addTendersSummary(rootCash, currentOperator)
	{
		var tenderName;
		var localAmount;
		var operations = 0;
		var nodesTenderSize = 0;
		var initialFloat = new BigDecimal(0);

		var nodeTenders		= findFirst(currentOperator, "Tenders");
		if(nodeTenders != null){
			var nodesTenders 	= nodeTenders[0].*;
			var nodesTenderSize = nodesTenders.length();
			var nodeTender 		= nodesTenders[0];
			operations 			= getNumberAttribute(nodeTender[0], "tc");
		}

		var nodeSkim		= findFirst(currentOperator, "TransfersOut");
		if(nodeSkim != null){
			var nodesSkim		= nodeSkim.Transfer;
			var nodesSkimSize	= nodesSkim.length();
		}

		var totalLocalAmount = new BigDecimal(0);
		var totalOperations  = new BigDecimal(0);
		var totalSkim 		 = new BigDecimal(0);

//		if( (nodesTenderSize > 0) && (operations > 0) ) {
		if(nodesTenderSize > 0) {
			totalSkim = new BigDecimal(getNumberAttribute(nodeSkim, "amount"));

//			addTendersLine();
//			addLine(API.setOnLeft("TENDERS", 20) + " " + API.setOnRight("OPERS", 5) + " " + API.setOnRight("LOCAL AMOUNT", 12));
//			addTendersLine();

			//nodesTenderSize = 1; // Get only <TenderType id="0" name="US$" />
			for(var i = 0; i < nodesTenderSize; i++) {
				var nodeTender = nodesTenders[i];

				operations 		= getNumberAttribute(nodeTender, "tc");
				localAmount 	= new BigDecimal(getNumberAttribute(nodeTender, "drawerAmount"));
				initialFloat 	= getNumberAttribute(nodeTender, "initialFloat");
				localAmount 	= localAmount.subtract(initialFloat);
				tenderId 		= getNumberAttribute(nodeTender, "id");
				// search the description of tender id
				tenderName 		= findTenderDescription(rootCash, tenderId);

				// assumes that all transfer out operations are maden in cash (TenderType 0) so skim amount is added only to cash amount
				if(tenderId=="0") {
					localAmount = localAmount.add(totalSkim);
//				addLineOperation((i + 1) + " - " + tenderName, operations, localAmount,null);

				totalLocalAmount = totalLocalAmount.add(localAmount);
				totalOperations  = totalOperations.add(operations);
				}
			}
//			addTendersLine();
//			addLineOperation("TOTAL:", totalOperations, totalLocalAmount, "");
//			addLine("");
		}
		return totalLocalAmount;
	}

	/**
	 * Adds the summary of skims followed by the total of operations and its total amount
	 * @return total amount of skims
	 */
	function addSkimsSummary(rootCash, currentOperator)
	{
		var nodeCashDetails			= findFirst(currentOperator, "CashDetails");
		var nodesTransfersOut		= nodeCashDetails.TransfersOut;
		var nodesTransfersOutSize	= nodesTransfersOut.length();
		var totalTransfer			= new BigDecimal(0);

		if(nodesTransfersOutSize > 0) {
			for(var i = 0; i < nodesTransfersOutSize; i++) {
				var nodeTransferOut = nodesTransfersOut[i];
				var transferName 	= getAttribute(nodeTransferOut, "type");
				var transferAmount 	= new BigDecimal(getNumberAttribute(nodeTransferOut, "amount"));
				var transferQtty 	= getNumberAttribute(nodeTransferOut, "count");
				totalTransfer 		= totalTransfer.add(transferAmount);

//				addTendersLine();
//				addLine(API.setOnLeft(transferName, 20) + " " + API.setOnRight("OPERS", 5) + " " + API.setOnRight("LOCAL AMOUNT", 12));
//				addTendersLine();

				// assumes that all transfer out operations are maden in cash (TenderType 0)
				currencyName = findTenderDescription(rootCash, "0");
//				addLineOperation("1 - " + currencyName, transferQtty, transferAmount,null);

//				addTendersLine();
//				addLineOperation("TOTAL:", null, transferAmount, null);
//				addLine("");
			}
		}
		return totalTransfer;
	}

	/**
	 * Adds all initial floats
	 * @return total initial floats
	 */
	function addInitialFloats(rootCash, currentOperator)
	{
		var nodeInitialFloat		= findFirst(currentOperator, "TransfersIn");
		var nodesInitialFloat		= nodeInitialFloat.Transfer;
		var nodesInitialFloatSize	= nodesInitialFloat.length();

		var tenderName;

		var totalLocalAmount= new BigDecimal(0);
		var localAmount 	= new BigDecimal(0);
		var initialFloat 	= new BigDecimal(0);

		if(nodesInitialFloatSize > 0) {
//			addTendersLine();
//			addLine(API.setOnLeft("INITIAL FLOATS", 26) + " " + API.setOnRight("LOCAL AMOUNT", 12));
//			addTendersLine();

			totalOperations  = getNumberAttribute(nodeInitialFloat, "count");
			totalLocalAmount = getNumberAttribute(nodeInitialFloat, "amount");

			for(var i = 0; i < nodesInitialFloatSize; i++) {
				var nodeInitialFloat = nodesInitialFloat[i];

				localAmount = getNumberAttribute(nodeInitialFloat, "amount");
				tenderId = getNumberAttribute(nodeInitialFloat, "tenderId");
				// search the description of tender id
				tenderName = findTenderDescription(rootCash, tenderId);
//				addLineOperation((i + 1) + " - " + tenderName, "1", localAmount,null);
			}
//			addTendersLine();
//			addLineOperation("TOTAL:", totalOperations, totalLocalAmount, "");
		}
		return totalLocalAmount;
	}

	/**
	 * Adds a given line type (initial float layout)
	 * @param type of line
	 */
	function addInitialFloatsLine(type)
	{
		addLine(API.replicate(type, 26) + " " + API.replicate(type, 12));
	}
	/**
	 * Adds an operation line like this:
	 * "TOTAL ITEMS             114    6,145,756"
	 * @param name operation name ("TOTAL ITEMS")
	 * @param qty quantity ("114")
	 * @param value value ("6,145,756")
	 * @param numberFormat (optional) pass "" if you dont want to format the number, or any number format to use
	 */
	function addLineOperation(name, qty, value, numberFormat)
	{

		if(!numberFormat) {
			numberFormat = "#,##0.00"; // Default value
		}
		if(numberFormat != "" && typeof(value) != "string" && value != null) {
			value = API.formatNumber(Number(value), numberFormat, 12);
		}else if(value == null) {
			value = "";
		}
		if(qty == null) { // Gives more space to 'name'
			// 26: name, 1: nothing, 12: value
			var line = API.setOnLeft(name, 26)
				+ " "
				+ API.setOnRight(value, 12);
		}else {
			// 20: name, 1: sep, 5: qtd, 1: nothing, 12: value
			var line = API.setOnLeft(name, 20)
			+ " "
			+ API.setOnRight(qty, 5)
			+ " "
			+ API.setOnRight(value, 12);
		}
		addLine(line);
	}

	/** Wraps XMLElement.findFirst() to ignore null nodes */
	function findTenderDescription(rootNode,tenderId)
	{

		var cmd = "rootNode.TenderTable.TenderType.(@id == " + tenderId + ")";
		var value = eval(cmd);
		return value.@name;
	}
}
/* Finish function implements a generic CASH report */


/**
 * PRIVATE
 * This function create a XML CASH report data
 * Needed data types: CASH, PMIX
 * rootTaxTable is optional 
 * @author Celso Fernandes
 */
function XMLCashReportEx(rootConfig, rootCash, rootPmix, root, reportType, rootTaxTable)
{

	//API.dbg("XMLCashReport rootConfig: " + rootConfig); 		//removed due to NVS-1671
	//API.dbg("XMLCashReport rootCash: " + rootCash);			//removed due to NVS-1671
	//API.dbg("XMLCashReport rootPmix: " + rootPmix);			//removed due to NVS-1671
	//API.dbg("XMLCashReport root: " + root);					//removed due to NVS-1671
	//API.dbg("XMLCashReport reportType: " + reportType);		//removed due to NVS-1671
	//API.dbg("XMLCashReport rootTaxTable: " + rootTaxTable);	//removed due to NVS-1671
	
	/* infomation added in version 6.1.3
	var qtyCashout					= Array();
          var amountCashout				= Array();
          var qtyRefund					= Array();
          var refundCashout			          	= Array();
	*/
	var XMLCashRpt;

	// variables necessary to generate a zeroed xml output.
	// do not change from here ...
	var tcTenderIdArray 			= Array();
	var qtyTenderIdArray 			= Array();
	var drawerAmountTenderIdArray 	= Array();
    	var changeDifferenceAmountTenderIdArray = Array();
    	var excessAmountTenderIdArray = Array();
    	var sumExcessAmount = new BigDecimal("0.00");
	var iReportNumber = rootTaxTable;
	// OI 27.01.2010 add for 6.1.17
	var cashoutTc = Array();
	var cashoutAmount = Array();
	var sumChangeRounding = 0;
	var qtyChangeRounding = 0;
	
	// NPS-7486
	var TRedBeforeTotalQuantityCSO 	= 0;
	var TRedBeforeTotalAmountCSO 	= new BigDecimal("0.00");
	var TRedAfterTotalQuantityCSO 	= 0;
	var TRedAfterTotalAmountCSO 	= new BigDecimal("0.00");
	var overringsTCCSO				= 0;
	var overringsAmountCSO			= new BigDecimal("0.00");
	var tempXML 					= new XML("<BrackCSO></BrackCSO>");
		
    	API.dbg ("XMLCashReport START");
	// Clean array to tender
    	for(var i=0;i<MAX_TENDER_TYPES;i++){
	     	tcTenderIdArray[i]						=0;
	     	qtyTenderIdArray[i]					=0;
	     	drawerAmountTenderIdArray[i]			=new BigDecimal("0.00");
	    	changeDifferenceAmountTenderIdArray[i]	=new BigDecimal("0.00");
	     	excessAmountTenderIdArray[i]			=new BigDecimal("0.00");
	     	// OI 27.01.2010 add for 6.1.17
	     	cashoutTc[i]							=0;
		cashoutAmount[i]						=0;
    	}

	if(null==root) {
		root=rootCash;
	}
	var bConsolidated=false;
    // ... up to here

	if(reportType == -1) {
		return(GenXMLCashRpt());
	}

	// Defines      report_isp.nps CODES
	var GIFT_CERT_1$	= "8492";	// DES-17 - gift certificate product id is hard coded
	var GIFT_CERT_5$	= "937";

	var  CASH_US		= 0;
	var  COUPON_A		= 1;
	var  COUPON_B		= 2;
	var  COUPON_C		= 3;
	var  COUPON_D		= 4;
	var  COUPON_E		= 5;
	var  WME_SALES		= 6;		// Lindomar Araujo: Changed to fix Germany reports old BILL_SALE
	var  SHE_SALES		= 7;		
	var  REC_SALES		= 8;
	var  ESM_SALES		= 10;
	var  WSE_IN			= 13;		// DES-17
	var  CASHLESS_SALES	= 21;		// range from 21 to 40

	var  SPEEDPASS		= 9;
	var  GIFT_CARD		= 11;

	// Waiting better definition
	var  MCCARD_1		= 19; // 19: McCard 200
	var  MCCARD_2		= 20; // 20: McCard 500

	//03.02.2009 OI new constants for e-cash
	var E_CASH_A		= 21;
	var E_CASH_B		= 22;
	var E_CASH_C		= 23;
	var E_CASH_D		= 24;
	var E_CASH_E		= 25;

	var pod = rootCash.@requestPod;
	flagTypePodDT	= (String(rootCash.POS.@podShort).search("DT")== -1)?false:true;
	flagTypePodWT	= (String(rootCash.POS.@podShort).search("WT")== -1)?false:true;
	flagTypePodFC	= (String(rootCash.POS.@podShort).search("FC")== -1)?false:true;
	if (flagTypePos==""){
		//28.01.2009 OI we only need the type from the current POS.
		for each (rootPos in rootCash.POS){
			if(Number(rootPos.@id) == Number(rootConfig.CustomData.PosId)){
				flagTypePos 	= (String(rootPos.@podShort).search("DT")== -1)?"FC":"DT";
				break;
			}
		}

		if (flagTypePos==""){
			flagTypePos 	= (String(rootCash.POS.@podShort).search("DT")== -1)?"FC":"DT";
		}
	} 
	var openingReading		= new BigDecimal("0.00");
	var	closingReading		= new BigDecimal("0.00");
	var unauthDrawerOpenings= 0;
	
	switch(reportType) {
	case RPTENDOFDAY:
			root = rootCash.POS;
			openingReading		= summNodesAttributeBigDecimalValues(root, "initialGT");
			closingReading		= summNodesAttributeBigDecimalValues(root, "finalGT");	
			unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
			bConsolidated=true;
		break;
	case RPTCASHDAILYCLOSEBYDATE:
			root = rootCash.POS;
			for each (i in root) {
				if(i.@status != "CLOSED"){
					addLine("ERROR:Day not close.");
					return;
				}
			}
			openingReading		= summNodesAttributeBigDecimalValues(root, "initialGT");
			closingReading		= summNodesAttributeBigDecimalValues(root, "finalGT");
			unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
			bConsolidated=true;
		break;
	case RPTCASHENDDAYSTOREWIDE:
	//     szStatus="CLOSED";   THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> IS CLOSED.
	//     szStatus="OPENED";   THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> IS OPENED.
	//     szStatus="OPLOGGED"; THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> HAS A LOGGED OPERATOR.
	//     szStatus="BLOCKED";  THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> IS BLOCKED.
	//     szStatus="BLOCKOP";  THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON: THE POS <POSNUMBER> IS BLOCKED AND HAS A LOGGED OPERATOR.

			for each (rootPos in rootCash.POS){
				if(rootPos.@status != "CLOSED") {
					if(rootPos.@status == "OPLOGGED")
						addLine("ERROR:THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON:\n THE POS " +  rootPos.@id + " HAS A LOGGED OPERATOR");
					else {
						if(rootPos.@status == "BLOCKOP")
							addLine("ERROR:THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON:\n THE POS " +  rootPos.@id + " IS BLOCKED AND HAS A LOGGED OPERATOR");
						else
							addLine("ERROR:THE POS CANNOT EXECUTE THE REQUESTED ACTION. REASON:\n THE POS " +  rootPos.@id + " IS " + rootPos.@status + ".");
					}
					return;
				}
			}

			root = rootCash.POS;
			var opLogged	="";
			for each (i in root) {
				if(String(i.@businessDate) != "") {
					if(opLogged.search(i.@id) == -1) {
						opLogged 		= opLogged + " " + i.@id;
						openingReading	= openingReading.add(new BigDecimal(i.@initialGT));
						closingReading	= closingReading.add(new BigDecimal(i.@finalGT));
					}
				}
			}
			unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
			bConsolidated=true;
		break;
	case RPTOPERATRORLOGOUT:
			root = findLastOperator(rootCash);
			iReportNumber = findLastOperatorReportNumber(rootCash);
			openingReading		= summNodesAttributeBigDecimalValues(root, "initialGT");
			closingReading		= summNodesAttributeBigDecimalValues(root, "finalGT");
			unauthDrawerOpenings= summNodesAttributeValues(root, "unauthorizedDrawerOpenings");
			bConsolidated=false;
		 break;
	case RPTCASHDRAWERCHANGE:
	case RPTCASHIERCLOSEBYDATE:
	
			openingReading		= summNodesAttributeBigDecimalValues(root, "initialGT");
			closingReading		= summNodesAttributeBigDecimalValues(root, "finalGT");
			unauthDrawerOpenings= summNodesAttributeValues(root, "unauthorizedDrawerOpenings");
			//iReportNumber = findLastOperatorReportNumber(rootCash);
			bConsolidated=false;
			API.dbg("xmlcashreport type switch");
		 break;
	case RPTCASHIERFLASH:
			root = findCurrentOperator(rootCash);
			iReportNumber = findLastOperatorReportNumber(rootCash);
			if(root == null){
				addLine("ERROR:There is not an Operator Session Opened");
				return;
			}
			openingReading		= summNodesAttributeBigDecimalValues(root, "initialGT");
			closingReading		= summNodesAttributeBigDecimalValues(root, "finalGT");
			unauthDrawerOpenings= summNodesAttributeValues(root, "unauthorizedDrawerOpenings");
			flagTypePos    		= (String(rootCash.POS.(@podShort=="DT").OperatorSession.(@logout==""))=="")?"FC":"DT";
			
			flagTypePodDT	= (String(rootCash.POS.(@podShort=="DT").OperatorSession.(@logout==""))=="")?false:true;
			flagTypePodWT	= (String(rootCash.POS.(@podShort=="WT").OperatorSession.(@logout==""))=="")?false:true;
			flagTypePodFC	= (String(rootCash.POS.(@podShort=="FC").OperatorSession.(@logout==""))=="")?false:true;
			bConsolidated=false;
		 break;
	case RPTCASHBYDATE:  
         // this option is not supported on production javascript engine it had to be separated from group bellow
			root = rootCash.POS;
			openingReading		= summNodesAttributeBigDecimalValues(root[0], "initialGT");
			closingReading		= summNodesAttributeBigDecimalValues(root[0], "finalGT");
			unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
			bConsolidated		=true;
         break;	
    case RPTCASHBYPERIOD:
	case RPTCASHACCUMULATED:
			root = rootCash.POS;
			openingReading		= summNodesAttributeBigDecimalValues(root[0], "initialGT");
			closingReading		= summNodesAttributeBigDecimalValues(root[0], "finalGT");
			unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
			bConsolidated		=true;
		break;
	case RPTCASHBYDATESW:
	case RPTCASHBYPERIODSW:
	case RPTCASHCONSOLIDATED:
	case RPTINTCASHCONSOLIDATED:
			if(0==root.POS.length()) {
				// single POS report
				var opLogged="";
				if(String(root.@businessDate) != "") {
					if(opLogged.search(root.@id) == -1) {
						opLogged 		= opLogged + " " + root.@id;
						openingReading	= openingReading.add(new BigDecimal(root.@initialGT));	
						closingReading	= closingReading.add(new BigDecimal(root.@finalGT));
					}
					flagTypePos = String(root.@podShort);
					flagTypePodDT	= (String(root.@podShort)=="DT");
					flagTypePodWT	= (String(root.@podShort)=="WT");
					flagTypePodFC	= (String(root.@podShort)=="FC");
				}
				unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
				bConsolidated=false;
			}
			else {
				root = rootCash.POS;
				var opLogged="";
				for each (i in root) {
					if(String(i.@businessDate) != "") {
						if(opLogged.search(i.@id) == -1) {
							opLogged 		= opLogged + " " + i.@id;
							openingReading	= openingReading.add(new BigDecimal(i.@initialGT));	
							closingReading	= closingReading.add(new BigDecimal(i.@finalGT));
						}
					}
					if(String(i.@podShort) == "CSO") {
						TRedBeforeTotalQuantityCSO = TRedBeforeTotalQuantityCSO + Number(i.CashDetails.Reduction.@itemsBeforeTotal);
						TRedBeforeTotalAmountCSO = TRedBeforeTotalAmountCSO.add(summNodesAttributeValues(i.CashDetails.Reduction, "amountBeforeTotal"));
						TRedAfterTotalQuantityCSO = TRedAfterTotalQuantityCSO + Number(i.CashDetails.Reduction.@redsAfterTotal);
						TRedAfterTotalAmountCSO = TRedAfterTotalAmountCSO.add(summNodesAttributeValues(i.CashDetails.Reduction, "redsAmtAfterTotal"));
						overringsTCCSO = overringsTCCSO + Number(i.CashDetails.Void.@inProgressTC);
						overringsTCCSO = overringsTCCSO + Number(i.CashDetails.Void.@overringTC);
						overringsAmountCSO = overringsAmountCSO.add(summNodesAttributeBigDecimalValues(i.CashDetails.Void, "inProgressAmount"));
						overringsAmountCSO = overringsAmountCSO.add(summNodesAttributeBigDecimalValues(i.CashDetails.Void, "overringAmount"));
						var nodeCashStatisticsCSO = i.CashStatistics;
						FormatByTaxChainCSO(rootTaxTable, "csh_OverringBrack_CSO_", nodeCashStatisticsCSO, "", "OVERRING", "", tempXML);
						FormatByTaxChainCSO(rootTaxTable, "csh_ProductOverringBrack_CSO_", nodeCashStatisticsCSO, "", "OVERRING", "P", tempXML);
						FormatByTaxChainCSO(rootTaxTable, "csh_NonProductOverringBrack_CSO_", nodeCashStatisticsCSO, "", "OVERRING", "NP", tempXML);
					}
				}
				unauthDrawerOpenings= summNodesAttributeValues(root.OperatorSession, "unauthorizedDrawerOpenings");
				bConsolidated=true;
			}
		break;
	default:
			addLine("ERROR:Undefined Report.");
			return;
		 break;
	}
	
	// Children CashDetails "CD"
	var nodeCashDetails			= root.CashDetails;
	var nodeVoid				= nodeCashDetails.Void;
	var nodeCashOut				= nodeCashDetails.CashOut;
	var nodeReduction			= nodeCashDetails.Reduction;
	var nodePromotions			= nodeCashDetails.Promotions;

	// children CashTotals (CT)
	var nodeCashTotals			= root.CashTotals;
	var nodeCash				= nodeCashTotals.Cash;
	var nodeProductSales		= nodeCashTotals.ProductSales;
	var nodeNonProductSales		= nodeCashTotals.NonProductSales;

	// children CashTotals (CS)
	var nodeCashStatistics		= root.CashStatistics;
	var nodeOperationKindSale	= nodeCashStatistics.SaleType.OperationKind.(@id=="SALE");
	var nodeOperationKindRefund	= nodeCashStatistics.SaleType.OperationKind.(@id=="REFUND");
	var nodeOperationKindDiscount = nodeCashStatistics.SaleType.OperationKind.(@id=="DISCOUNT");
	var nodeOperationKindCashlessRefund	= nodeCashStatistics.SaleType.OperationKind.(@id=="CASHLESS_REFUND");
	var nodeOperationKindPromo	= nodeCashStatistics.SaleType.OperationKind.(@id=="PROMO");

	// children node Sale
	var nodeSaleTypeEatIn		= nodeCashStatistics.SaleType.(@name=="EAT_IN");
	var nodeSaleTypeTakeOut		= nodeCashStatistics.SaleType.(@name=="TAKE_OUT");
	var nodeSaleTypeOther		= nodeCashStatistics.SaleType.(@name=="OTHER");

	// children node Skim
	var nodeTransfersOutSkim	  = nodeCashDetails.TransfersOut.(@type=="SKIM");
	var nodeTransfersOutskimCount = summNodesAttributeValues(nodeTransfersOutSkim, "count");
	var nodeTransfersOutskimAmount= summNodesAttributeBigDecimalValues(nodeTransfersOutSkim, "amount");

	// children node Transfer Out
	var nodeTransfersOutTransfer	  = nodeCashDetails.TransfersOut.(@type=="TRANSFER");
	var nodeTransfersOutTransferCout  = summNodesAttributeValues(nodeTransfersOutTransfer, "count");
	var nodeTransfersOutTransferAmount= summNodesAttributeBigDecimalValues(nodeTransfersOutTransfer, "amount");

	// children node Transfer In		
	var nodeTransfersInTransfer	     = nodeCashDetails.TransfersIn.(@type=="TRANSFER");
	var nodeTransfersInTransferCout  = summNodesAttributeValues(nodeTransfersInTransfer, "count");
	var nodeTransfersInTransferAmount= summNodesAttributeBigDecimalValues(nodeTransfersInTransfer, "amount");

	// children node Other Cards Transfer Out
	var nodeTransfersOutOtherCards	  = nodeCashDetails.TransfersOut.(@type=="OTHER_CARDS");
	var nodeTransfersOutOtherCardsCout  = summNodesAttributeValues(nodeTransfersOutOtherCards, "count");
	var nodeTransfersOutOtherCardsAmount= summNodesAttributeBigDecimalValues(nodeTransfersOutOtherCards, "amount");

	// children node Other Cards Transfer In		
	var nodeTransfersInOtherCards	     = nodeCashDetails.TransfersIn.(@type=="OTHER_CARDS");
	var nodeTransfersInOtherCardsCout  = summNodesAttributeValues(nodeTransfersInOtherCards, "count");
	var nodeTransfersInOtherCardsAmount= summNodesAttributeBigDecimalValues(nodeTransfersInOtherCards, "amount");

	//addition float
	var nodeAdditionalFloat	  = nodeCashDetails.TransfersIn.(@type=="ADDITIONAL_FLOAT");
	var nodeAdditionalFloatCount  = summNodesAttributeValues(nodeAdditionalFloat, "count");
	var nodeAdditionalFloatAmount= summNodesAttributeValues(nodeAdditionalFloat, "amount");
	
	// children node OTHER_RECEIP
	var nodeTransfersInOtherReceipts	 = nodeCashDetails.TransfersIn.(@type=="OTHER_RECEIPTS");
	var nodeTransfersInOtherReceiptsCout = summNodesAttributeValues(nodeTransfersInOtherReceipts, "count");	
	var nodeTransfersInOtherReceiptsAmount =summNodesAttributeBigDecimalValues(nodeTransfersInOtherReceipts, "amount");	

	var wasteArray 				=  getOperationKindId(nodeCashStatistics,"","WASTE");
	var wastenodesCashTc		=  wasteArray[0];
	var wastenodesCashnetAmount =  wasteArray[1];

	var promoArray 				=  getOperationKindId(nodeCashStatistics,"","PROMO");
	var promonodesCashTc 		=  promoArray[0];
	//(MS) 10.12.2009 the problem was fixed in 6.1.16 rc3
	var promonodesCashnetAmount =  promoArray[1];
	var promonodesCashTaxAmount =  promoArray[4];

	var discountArray 			=  getOperationKindId(nodeCashStatistics,"","DISCOUNT");
	//oi 26.01.2010 add for 6.1.17
	var discountnodesCashTc = discountArray[0] - discountArray[6]; // NVS-70 - Remove the Coupon TCs
	//var discountnodesCashTc 	=  discountArray[0];
	var discountnodesCashnetAmount = discountArray[1];
	var discountnodesCashnetBeforeDiscount = discountArray[2];
	var discountnodesCashCouponDiscount    = discountArray[3];
	
	var discountDiscount 		= discountnodesCashnetBeforeDiscount;
	discountDiscount			= discountDiscount.subtract(discountnodesCashnetAmount);
	discountDiscount			= discountDiscount.subtract(discountnodesCashCouponDiscount);
	var discountDiscountTax		= Number(discountArray[5]) - Number(discountArray[4]);


	var EatInDiscountArray 				=  getOperationKindId(nodeCashStatistics,"EAT_IN","DISCOUNT");
	var EatInDiscountTc 						= EatInDiscountArray[0];
	var EatInDiscountNetAmount					= EatInDiscountArray[1];
	var EatInDiscountNetAmountBeforeDiscount	= EatInDiscountArray[2];
	var EatInDiscountCouponAmount				= EatInDiscountArray[3];
	var EatInDiscountTaxAmount					= EatInDiscountArray[4];
	var EatInDiscountTaxAmountBeforeDiscount	= EatInDiscountArray[5];
	var EatInDiscountAmount	= 	EatInDiscountNetAmountBeforeDiscount.subtract(EatInDiscountNetAmount);
		EatInDiscountAmount	= 	EatInDiscountAmount.subtract(EatInDiscountCouponAmount);
	var EatInTaxDiscount	= 	EatInDiscountTaxAmountBeforeDiscount.subtract(EatInDiscountTaxAmount);

	var TakeOutDiscountArray 				=  getOperationKindId(nodeCashStatistics,"TAKE_OUT","DISCOUNT");
	var TakeOutDiscountTc 						= TakeOutDiscountArray[0];
	var TakeOutDiscountNetAmount				= TakeOutDiscountArray[1];
	var TakeOutDiscountNetAmountBeforeDiscount	= TakeOutDiscountArray[2];
	var TakeOutDiscountCouponAmount				= TakeOutDiscountArray[3];
	var TakeOutDiscountTaxAmount				= TakeOutDiscountArray[4];
	var TakeOutDiscountTaxAmountBeforeDiscount	= TakeOutDiscountArray[5];
	var TakeOutDiscountAmount	= 	TakeOutDiscountNetAmountBeforeDiscount.subtract(TakeOutDiscountNetAmount)
		TakeOutDiscountAmount	= 	TakeOutDiscountAmount.subtract(TakeOutDiscountCouponAmount);
	var TakeOutTaxDiscount		= 	TakeOutDiscountTaxAmountBeforeDiscount.subtract(TakeOutDiscountTaxAmount);

	var OtherDiscountArray 				=  getOperationKindId(nodeCashStatistics,"OTHER","DISCOUNT");
	var OtherDiscountTc 						= OtherDiscountArray[0];
	var OtherDiscountNetAmount					= OtherDiscountArray[1];
	var OtherDiscountNetAmountBeforeDiscount	= OtherDiscountArray[2];
	var OtherDiscountCouponAmount				= OtherDiscountArray[3];
	var OtherDiscountTaxAmount					= OtherDiscountArray[4];
	var OtherDiscountTaxAmountBeforeDiscount	= OtherDiscountArray[5];
	var OtherDiscountAmount	= 	OtherDiscountNetAmountBeforeDiscount.subtract(OtherDiscountNetAmount)
		OtherDiscountAmount	= 	OtherDiscountAmount.subtract(OtherDiscountCouponAmount);
	var OtherTaxDiscount	= 	OtherDiscountTaxAmountBeforeDiscount.subtract(OtherDiscountTaxAmount);

	var managerArray 			=  getOperationKindId(nodeCashStatistics,"","MANAGER");
	var managernodesCashTc 		=  managerArray[0];
	var managernodesCashnetAmount = managerArray[1];
	var managernodesCashnetBeforeDiscount = managerArray[2];
	var managernodesCashCouponDiscount    = managerArray[3];
	var managernodesCashTaxAmount = managerArray[4];
	var managernodesCashTaxBeforeDiscount = managerArray[5];
	var managerDiscount 		= managernodesCashnetBeforeDiscount.subtract(managernodesCashnetAmount);
		managerDiscount 		= managerDiscount.subtract(managernodesCashCouponDiscount);
	var managerTaxDiscount 		= managernodesCashTaxBeforeDiscount.subtract(managernodesCashTaxAmount);

	var crewArray 				=  getOperationKindId(nodeCashStatistics,"","CREW");
	var crewnodesCashTc 		=  crewArray[0];
	var crewnodesCashnetAmount  =  crewArray[1];
	var crewnodesCashnetBeforeDiscount = crewArray[2];
	var crewnodesCashCouponDiscount    = crewArray[3];
	var crewnodesCashTaxAmount  =  crewArray[4];
	var crewnodesCashTaxBeforeDiscount  =  crewArray[5];
	var crewDiscount 			= crewnodesCashnetBeforeDiscount.subtract(crewnodesCashnetAmount);
		crewDiscount 			= crewDiscount.subtract(crewnodesCashCouponDiscount);
	var crewTaxDiscount 		= crewnodesCashTaxBeforeDiscount.subtract(crewnodesCashTaxAmount);

	var saleArray 				= getOperationKindId(nodeCashStatistics,"","SALE");
	var salenodesCashTc 		= saleArray[0];
	var salenodesCashnetAmount 	= saleArray[1];
	var salenodesCashnetBeforeDiscount = saleArray[2];

	var dayMenuArray 			= getDayPartId(nodeCashStatistics,"DAY_MENU");
	var dayMenunodesCashTc 		= dayMenuArray[0];
	var dayMenunodesCashnetAmount = dayMenuArray[1];
	var dayMenudesCashnetBeforeDiscount = dayMenuArray[2];

	var breakFastDayMenuArray 		= getDayPartId(nodeCashStatistics,"BREAKFAST_MENU");
	var breakFastDayMenunodesCashTc = breakFastDayMenuArray[0];
	var breakFastDayMenunodesCashnetAmount = breakFastDayMenuArray[1];
	var breakFastDayMenudesCashnetBeforeDiscount = breakFastDayMenuArray[2]; 
	
	var nodeTransfersInOtherReceipts = nodeCashDetails.TransfersOut.(@type=="OTHER_RECEIPTS");

	var cashierId				= getNumberAttribute(root, "id");
	var cashierName				= getAttribute(root, "name");
	var nodeTenders				= root.CashDetails.Tenders;		
	if(bConsolidated /*Number(reportType) == RPTCASHBYPERIODSW  || Number(reportType) == RPTCASHACCUMULATED ||Number(reportType) == RPTINTCASHCONSOLIDATED*/)
	{
			nodeTenders				= rootCash.CashDetails.Tenders;		
	}
	var initialFloat			= calculateInitialFloat(nodeTenders);	
	var cashierOpenTime			= getAttribute(root, "login").substring(9, 14);
	var cashierCloseTime		= getAttribute(root, "logout").substring(9, 14);
	var nodeCashTotalsRefund	= nodeOperationKindRefund.CashTotals;
	var nodeCashRefund			= nodeCashTotalsRefund.Cash;	

	var nodeCashTotalsCashlessRefund	= nodeOperationKindCashlessRefund.CashTotals;
	var nodeCashCashlessRefund			= nodeCashTotalsCashlessRefund.Cash;	

	var nodeCashTotalsTaxSale			= nodeOperationKindSale.(@subType=="TAX").CashTotals;
	var nodeCashTotalsTaxExemptSale		= nodeOperationKindSale.(@subType=="TAX_EXEMPT").CashTotals;
	var nodeCashTotalsNoTaxSale			= nodeOperationKindSale.(@subType=="NO_TAX").CashTotals;
	var nodeCashTotalsNeverTaxSale		= nodeOperationKindSale.(@subType=="NEVER_TAX").CashTotals;

	var nodeCashTotalsTaxRefund			= nodeOperationKindRefund.(@subType=="TAX").CashTotals;
	var nodeCashTotalsTaxExemptRefund	= nodeOperationKindRefund.(@subType=="TAX_EXEMPT").CashTotals;
	var nodeCashTotalsNoTaxRefund		= nodeOperationKindRefund.(@subType=="NO_TAX").CashTotals;
	var nodeCashTotalsNeverTaxRefund	= nodeOperationKindRefund.(@subType=="NEVER_TAX").CashTotals;
	
	var nodeCashTotalsTaxDiscount		= nodeOperationKindDiscount.(@subType=="TAX").CashTotals;
	var nodeCashTotalsTaxExemptDiscount	= nodeOperationKindDiscount.(@subType=="TAX_EXEMPT").CashTotals;
	var nodeCashTotalsNoTaxDiscount		= nodeOperationKindDiscount.(@subType=="NO_TAX").CashTotals;
	var nodeCashTotalsNeverTaxDiscount	= nodeOperationKindDiscount.(@subType=="NEVER_TAX").CashTotals;

	var nodeCashTotalsSale				= nodeOperationKindSale.CashTotals;
	var nodeCashSale					= nodeOperationKindSale.Cash;	

	// Total Refunds
	var refundsTC				= summNodesAttributeValues(nodeCashRefund,"tc");
	var refundsAmount			= summNodesAttributeBigDecimalValues(nodeCashRefund,"netAmount");
	var refundsTaxAmount		= summNodesAttributeBigDecimalValues(nodeCashRefund,"taxAmount");
	// TAX Refunds
	var taxRefundTC				= summNodesAttributeValues(nodeCashTotalsTaxRefund.Cash, "tc");
	var taxRefundNetAmount		= summNodesAttributeBigDecimalValues(nodeCashTotalsTaxRefund.Cash, "netAmount");
	var taxRefundtaxAmount		= summNodesAttributeBigDecimalValues(nodeCashTotalsTaxRefund.Cash, "taxAmount");
	// TAX Exempt Refunds
	var taxExemptRefundTC		= summNodesAttributeValues(nodeCashTotalsTaxExemptRefund.Cash, "tc");
	var taxExemptRefundNetAmount= summNodesAttributeBigDecimalValues(nodeCashTotalsTaxExemptRefund.Cash, "netAmount");
	var taxExemptRefundtaxAmount= summNodesAttributeBigDecimalValues(nodeCashTotalsTaxExemptRefund.Cash, "taxAmount");
	// No Tax Refunds		
	var noTaxRefundtc			= summNodesAttributeValues(nodeCashTotalsNoTaxRefund.Cash, "tc");
	var noTaxRefundNetAmount	= summNodesAttributeBigDecimalValues(nodeCashTotalsNoTaxRefund.Cash, "netAmount");
	var noTaxRefundtaxAmount	= summNodesAttributeBigDecimalValues(nodeCashTotalsNoTaxRefund.Cash, "taxAmount");
	// Never Tax Refunds
	var neverTaxRefundtc		= summNodesAttributeValues(nodeCashTotalsNeverTaxRefund.Cash, "tc");
	var neverTaxRefundNetAmount	= summNodesAttributeBigDecimalValues(nodeCashTotalsNeverTaxRefund.Cash, "netAmount");
	var neverTaxRefundtaxAmount	= summNodesAttributeBigDecimalValues(nodeCashTotalsNeverTaxRefund.Cash, "taxAmount");
	// Cashless Refund
	var cashlessRefundsTC		= summNodesAttributeValues(nodeCashCashlessRefund,"tc");		
	var cashlessRefundsAmount	= summNodesAttributeBigDecimalValues(nodeCashCashlessRefund,"netAmount");
	var cashlessRefundsTaxAmount= summNodesAttributeBigDecimalValues(nodeCashCashlessRefund,"taxAmount");

	var netSalesTcDiscountTaxExempt 	= summNodesAttributeValues(nodeCashTotalsTaxExemptDiscount.Cash,"tc");
	var netSalesTcDiscountNoTax     	= summNodesAttributeValues(nodeCashTotalsNoTaxDiscount.Cash,"tc");
	var netSalesAmountDiscountTax       = summNodesAttributeBigDecimalValues(nodeCashTotalsTaxDiscount.Cash,"netAmount");
	var netSalesAmountDiscountTaxExempt = summNodesAttributeBigDecimalValues(nodeCashTotalsTaxExemptDiscount.Cash,"netAmount");
	
	var netSalesTcTaxExempt 	= summNodesAttributeValues(nodeCashTotalsTaxExemptSale.Cash,"tc") -
								  taxExemptRefundTC;
	var netSalesTcNoTax     	= summNodesAttributeValues(nodeCashTotalsNoTaxSale.Cash,"tc") -
								  noTaxRefundtc	
	var netSalesAmountTax       = (summNodesAttributeBigDecimalValues(nodeCashTotalsTaxSale.Cash,"netAmount")).subtract(taxRefundNetAmount);
	var netSalesAmountTaxExempt = (summNodesAttributeBigDecimalValues(nodeCashTotalsTaxExemptSale.Cash,"netAmount")).subtract(taxExemptRefundNetAmount);
								  
	var netSalesAmountNoTax     = (summNodesAttributeBigDecimalValues(nodeCashTotalsNoTaxSale.Cash,"netAmount")).subtract(noTaxRefundNetAmount);

	var netSalesAmountNeverTax  = (summNodesAttributeBigDecimalValues(nodeCashTotalsNeverTaxSale.Cash,"netAmount")).subtract(neverTaxRefundNetAmount);

	var nodeProductSalesCash	= nodeProductSales.Cash;
	var nodeNonProductSalesCash	= nodeNonProductSales.Cash;	

	var nodeEatInOperationKind	= nodeSaleTypeEatIn.OperationKind;
	var nodeTakeOutOperationKind= nodeSaleTypeTakeOut.OperationKind;
	var nodeOtherOperationKind	= nodeSaleTypeOther.OperationKind;

	var nodeEatInCashTotals		= nodeSaleTypeEatIn.CashTotals;
	var nodeTakeOutCashTotals	= nodeSaleTypeTakeOut.CashTotals;
	var nodeOtherCashTotals		= nodeSaleTypeOther.CashTotals;
	var nodePromo				= nodePromotions == null ? null : nodePromotions.Promo.(@type=="0"); // Promo type 0 is normal promo
	var managerId				= getNumberAttribute(rootConfig.Manager, "id");
	var taxEatIn				= getTotalTaxAmount(nodeCashStatistics, "EAT_IN");
	var taxTakeOut				= getTotalTaxAmount(nodeCashStatistics, "TAKE_OUT");
	var taxTotal				= taxEatIn.add(taxTakeOut);

	var operatorId			  = Number(root.@id);
	var ind 				  = rootPmix.POS.OperatorSession.(@id==operatorId).length()-1;
	var PMixOperatorSession;
	var PMixOperatorSessionDT;
	var PMixOperatorSessionWT;
	var rootPmixPOS = null;
	if(false==bConsolidated) {
		rootPmixPOS=rootPmix.POS.(@id==root.@id && @podShort==root.@podShort);
		PMixOperatorSessionDT = rootPmixPOS.(@podShort=="DT").FamilyGroup.(@groupName=="GIFT_COUPON");
		PMixOperatorSessionWT = rootPmixPOS.(@podShort=="WT").FamilyGroup.(@groupName=="GIFT_COUPON");
	}
	else {
		rootPmixPOS=rootPmix;
		PMixOperatorSessionDT = rootPmix.POS.(@podShort=="DT").FamilyGroup.(@groupName=="GIFT_COUPON");
		PMixOperatorSessionWT = rootPmix.POS.(@podShort=="WT").FamilyGroup.(@groupName=="GIFT_COUPON");
	}
	// Drive Thru
	var PMixProductCertRefDT  = 0;
	var PMixProductCertDT	  = 0;
	var PMixProductCardRefDT  = 0;
	var PMixProductCardDT	  = 0;
	// Walk Thru
	var PMixProductCertRefWT  = 0;
	var PMixProductCertWT	  = 0;
	var PMixProductCardRefWT  = 0;
	var PMixProductCardWT	  = 0;
	
	if(reportType == RPTCASHIERFLASH){
		 PMixOperatorSession   = rootPmix.POS.OperatorSession.(@id==operatorId)[ind];
		 PMixOperatorSessionDT = rootPmix.POS.(@podShort=="DT").OperatorSession.(@logout=="" && @id==operatorId)[ind];
		 PMixOperatorSessionWT = rootPmix.POS.(@podShort=="WT").OperatorSession.(@logout=="" && @id==operatorId)[ind];
	}
	else{
		if((reportType == RPTCASHDRAWERCHANGE)  || (reportType == RPTOPERATRORLOGOUT) || (reportType == RPTCASHIERCLOSEBYDATE)) {
			//15.01.2009 OI check for the Operator Session
			if(PMixOperatorSession   = rootPmix.POS.OperatorSession.length() > 0)
			{
				PMixOperatorSession   = rootPmix.POS.OperatorSession.(@id==cashierId && @login==root.@login);
				PMixOperatorSessionDT = rootPmix.POS.(@podShort=="DT").OperatorSession.(@logout!="" && @id==operatorId)[ind];
				PMixOperatorSessionWT = rootPmix.POS.(@podShort=="WT").OperatorSession.(@logout!="" && @id==operatorId)[ind];
			}else
			{
				PMixOperatorSession = null;
				PMixOperatorSessionDT = null;
				PMixOperatorSessionWT = null;
			}
		}
		else {
			//if(0==root.POS.length()) {
			if(false==bConsolidated) {
				PMixOperatorSession = rootPmixPOS.FamilyGroup.(@groupName=="GIFT_COUPON");
			}
			else {
				if((reportType == RPTCASHCONSOLIDATED) || (reportType == RPTINTCASHCONSOLIDATED) ||  (reportType == RPTCASHIERCLOSEBYDATE) || (reportType == RPTCASHCONSOLIDATED ) || (reportType == RPTCASHENDDAYSTOREWIDE) || (reportType == RPTCASHBYPERIODSW)) {
					PMixOperatorSession = rootPmix.FamilyGroup.(@groupName=="GIFT_COUPON");
				}
				else {
					PMixOperatorSession = rootPmix.FamilyGroup.(@groupName=="GIFT_COUPON" || @groupName=="REDEEMABLE_ITEMS"); /*MS - 12.10.2009 it was rootPmix.POS do not know why*/
				}
			}
		}
	} 
	var certSoldProduct = <root />;
	var cardSoldProduct = <root />;
	
	if(PMixOperatorSessionDT!=null) { 
		//get the list of porducts sold
		var certRef = <root />;
		var certSold = <root />;
		var cardRef = <root />;
		var cardSold = <root />;
		for(var i=0;i<PMixOperatorSessionDT.Product.length();i++)
		{
			var product = PMixOperatorSessionDT.Product[i];
			
			//in case of grill slip this will return an error because of the word class , this is why i used the eval.
			var value;
			eval("value = rootPmix.ProductTable.ProductInfo.(@id==product.@id && @familyGroup==\"GIFT_COUPON\").@class.toString()");
			if( value =="COUPONS" )
			{
				certRef.appendChild(product.OperationType.(@operationType=="REFUND").PMix);
				certSold.appendChild(product.OperationType.(@operationType=="SALE").PMix);
			}
			if( value =="NON_FOOD_PRODUCT")
			{
				cardRef.appendChild(product.OperationType.(@operationType=="REFUND").PMix);
				cardSold.appendChild(product.OperationType.(@operationType=="SALE").PMix);
			}
		}
		PMixProductCertRefDT = certRef;
		PMixProductCertDT = certSold;
		PMixProductCardRefDT = cardRef;
		PMixProductCardDT = cardSold;
		/*		
		PMixProductCertRefDT  = PMixOperatorSessionDT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		PMixProductCertDT	  = PMixOperatorSessionDT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
		PMixProductCardRefDT  = PMixOperatorSessionDT.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		PMixProductCardDT	  = PMixOperatorSessionDT.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
		*/
	}
	
	if(PMixOperatorSessionWT!=null) { 
		//get the list of porducts sold*/
		var certRef = <root />;
		var certSold = <root />;
		var cardRef = <root />;
		var cardSold = <root />;
		for(var i=0;i<PMixOperatorSessionWT.Product.length();i++)
		{
			var product = PMixOperatorSessionWT.Product[i];
			
			//in case of grill slip this will return an error because of the word class , this is why i used the eval.
			var value;
			eval("value=rootPmix.ProductTable.ProductInfo.(@id== product.@id && @familyGroup == \"GIFT_COUPON\").@class.toString()");
			if( value =="COUPONS" )
			{
				certRef.appendChild(product.OperationType.(@operationType=="REFUND").PMix);
				certSold.appendChild(product.OperationType.(@operationType=="SALE").PMix);
			}
			if( value =="NON_FOOD_PRODUCT")
			{
				cardRef .appendChild(product.OperationType.(@operationType=="REFUND").PMix);
				cardSold.appendChild(product.OperationType.(@operationType=="SALE").PMix);
			}
		}
	
		PMixProductCertRefWT = certRef;
		PMixProductCertWT = certSold;
		PMixProductCardRefWT = cardRef;
		PMixProductCardWT = cardSold;
		/*
		PMixProductCertRefWT  = PMixOperatorSessionWT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		PMixProductCertWT	  = PMixOperatorSessionWT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
		PMixProductCardRefWT  = PMixOperatorSessionWT.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		PMixProductCardWT	  = PMixOperatorSessionWT.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
		*/
	}
   // API.dbg("xmlcashreport pmixOperationsession");
	//15.01.2009 OI check for the Operator Session
	if(PMixOperatorSession != null)
	{
		// Get all Product Cert
		var certRef = <root />;
		var certSold = <root />;
		var cardRef = <root />;
		var cardSold = <root />;
		
		for(var i=0;i<PMixOperatorSession.Product.length();i++)
		{
			var product = PMixOperatorSession.Product[i];
			//in case of grill slip this will return an error because of the word class , this is why i used the eval.
			var value;
			eval("value=rootPmix.ProductTable.ProductInfo.(@id== product.@id && @familyGroup == \"GIFT_COUPON\").@class.toString()");
			if( value =="COUPONS" )
			{
				certRef.appendChild(product.OperationType.(@operationType=="REFUND").PMix);
				certSold.appendChild(product.OperationType.(@operationType=="SALE").PMix);
				certSoldProduct.appendChild(product);
			}
			if( value =="NON_FOOD_PRODUCT")
			{
				cardRef.appendChild(product.OperationType.(@operationType=="REFUND").PMix);
				cardSold.appendChild(product.OperationType.(@operationType=="SALE").PMix);
				cardSoldProduct.appendChild(product);
			}
		}
		
		var PMixProductCertRef	     = certRef;
		var PMixProductCert	    	 = certSold;
		var mcCertSalesRefundCount	 = getPMixTotalQty(PMixProductCertRef); //total gift cert refund
		var mcCertSalesCount	     = getPMixTotalQty(PMixProductCert); //  - mcCertSalesRefundCount;
		var mcCertSalesRefundAmount  = getPMixTotalnetAmount(PMixProductCertRef);
		var mcCertSalesAmount	     = getPMixTotalnetAmount(PMixProductCert);

		//to do array for every gift certificate and every gift card
		var arrGiftCertProdId = new Array();
		var arrGiftCertSoldQty = new Array();
		var arrGiftCertSoldAmt = new Array();
		var arrGiftCertRefAmt = new Array();
		var arrGiftCertRefQty = new Array();
		
		var arrGiftCardProdId = new Array();
		var arrGiftCardSoldQty = new Array();
		var arrGiftCardSoldAmt = new Array();
		var arrGiftCardRefQty = new Array();
		var arrGiftCardRefAmt = new Array();
		
		//informations for gift certificates		
		for(var i=0; i< certSoldProduct.Product.length(); i++)
		{
			var product = certSoldProduct.Product[i];
			arrGiftCertProdId[i] = product.@id;
			
			arrGiftCertRefQty[i] = getPMixTotalQty(product.OperationType.(@operationType=="REFUND").PMix);
			arrGiftCertRefAmt[i] = getPMixTotalnetAmount(product.OperationType.(@operationType=="REFUND").PMix);
			
			arrGiftCertSoldQty[i] = getPMixTotalQty(product.OperationType.(@operationType=="SALE").PMix);
			arrGiftCertSoldAmt[i] = getPMixTotalnetAmount(product.OperationType.(@operationType=="SALE").PMix) ;
		}
		//information for gift card
		for(var i=0; i< cardSoldProduct.Product.length(); i++)
		{
			var product = cardSoldProduct.Product[i];
			arrGiftCardProdId[i] = product.@id;
			
			arrGiftCardRefQty[i] = getPMixTotalQty(product.OperationType.(@operationType=="REFUND").PMix);
			arrGiftCardRefAmt[i] = getPMixTotalnetAmount(product.OperationType.(@operationType=="REFUND").PMix);
			
			arrGiftCardSoldQty[i] = getPMixTotalQty(product.OperationType.(@operationType=="SALE").PMix);
			arrGiftCardSoldAmt[i] = getPMixTotalnetAmount(product.OperationType.(@operationType=="SALE").PMix); 
		}
		
/*		
		// Gift cert 1$
		var PMixProductCertRefA	     = PMixOperatorSession.Product.(@id==GIFT_CERT_1$).OperationType.(@operationType=="REFUND").PMix;
		var PMixProductCertA	     = PMixOperatorSession.Product.(@id==GIFT_CERT_1$).OperationType.(@operationType=="SALE").PMix;
		var mcCertASalesRefundCount	 = getPMixTotalQty(PMixProductCertRefA);
		var mcCertASalesCount	     = getPMixTotalQty(PMixProductCertA); // - mcCardSalesRefundCount;
		var mcCertASalesRefundAmount = getPMixTotalnetAmount(PMixProductCertRefA); 
		var mcCertASalesAmount	     = getPMixTotalnetAmount(PMixProductCertA); 

		// Gift cert 5$
		var PMixProductCertRefB	     = PMixOperatorSession.Product.(@id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		var PMixProductCertB	     = PMixOperatorSession.Product.(@id==GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
		var mcCertBSalesRefundCount	 = getPMixTotalQty(PMixProductCertRefB);
		var mcCertBSalesCount	     = getPMixTotalQty(PMixProductCertB); // - mcCardSalesRefundCount;
		var mcCertBSalesRefundAmount = getPMixTotalnetAmount(PMixProductCertRefB); 
		var mcCertBSalesAmount	     = getPMixTotalnetAmount(PMixProductCertB); 
*/
		// Get all Product without Cert
		var PMixProductCardRef	     = cardRef;
		var PMixProductCard	     	 = cardSold;
		var mcCardSalesRefundCount	 = getPMixTotalQty(PMixProductCardRef);
		var mcCardSalesCount	     = getPMixTotalQty(PMixProductCard); // - mcCardSalesRefundCount;
		var mcCardSalesRefundAmount  = getPMixTotalnetAmount(PMixProductCardRef); 
		var mcCardSalesAmount	     = getPMixTotalnetAmount(PMixProductCard); 
		
		//netSalesAmountNeverTax 	= netSalesAmountNeverTax - (mcCertSalesAmount-mcCertSalesRefundAmount) - (mcCardSalesAmount-mcCardSalesRefundAmount);
	}else
	{

	var mcCertSalesRefundCount	 = new BigDecimal("0.00"); 
	var mcCertSalesCount	     = new BigDecimal("0.00"); 
	var mcCertSalesRefundAmount  = new BigDecimal("0.00");
	var mcCertSalesAmount	     = new BigDecimal("0.00");
	/*
	var mcCertASalesRefundCount	= new BigDecimal("0.00");
	var mcCertASalesCount	    = new BigDecimal("0.00");
	var mcCertASalesRefundAmount = new BigDecimal("0.00");
	var mcCertASalesAmount	     = new BigDecimal("0.00");

	var mcCertBSalesRefundCount	 = new BigDecimal("0.00");
	var mcCertBSalesCount	     = new BigDecimal("0.00");
	var mcCertBSalesRefundAmount = new BigDecimal("0.00");
	var mcCertBSalesAmount	    = new BigDecimal("0.00");
	*/
	var mcCardSalesRefundCount	= new BigDecimal("0.00");
	var mcCardSalesCount	    = new BigDecimal("0.00");
	var mcCardSalesRefundAmount = new BigDecimal("0.00");
	var mcCardSalesAmount	   = new BigDecimal("0.00");
	}
	
	//calculate the amount of gift cert and gift card sold  in breakfast day part.
	var substractGiftCardFromBreakfast 	 = 0;
	var substractGiftCertFromBreakfast 	 = 0;
	for(var g=0; g<certSoldProduct.Product.length(); g++)
	{
		for(var opType =0; opType < certSoldProduct.Product[g].OperationType.length(); opType++)
		{
			for(var iPrice =0; iPrice < certSoldProduct.Product[g].OperationType[opType].Price.length();iPrice++)
			{
				if(certSoldProduct.Product[g].OperationType[opType].Price[iPrice].@dayPart=="BREAKFAST_MENU")
				{
					if(certSoldProduct.Product[g].OperationType[opType].@operationType=="SALE")
					{
						if(certSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtTakeOut !="")
						{
							substractGiftCertFromBreakfast= Number(substractGiftCertFromBreakfast) + Number(certSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtTakeOut);
						}
						if(certSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtEatIn !="")
						{
							substractGiftCertFromBreakfast= Number(substractGiftCertFromBreakfast) + Number(certSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtEatIn);
						}
					}
					if(certSoldProduct.Product[g].OperationType[opType].@operationType=="REFUND")
					{
						if(certSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtTakeOut !="")
						{
							substractGiftCertFromBreakfast= Number(substractGiftCertFromBreakfast) - Number(certSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtTakeOut);
						}
						if(certSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtEatIn !="")
						{
							substractGiftCertFromBreakfast= Number(substractGiftCertFromBreakfast) - Number(certSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtEatIn);
						}
					}
				}
			}			
		}
	}
	
	
	for(var g=0; g<cardSoldProduct.Product.length(); g++)
	{
		for(var opType =0; opType < cardSoldProduct.Product[g].OperationType.length(); opType++)
		{
			for(var iPrice =0; iPrice < cardSoldProduct.Product[g].OperationType[opType].Price.length();iPrice++)
			{
				if(cardSoldProduct.Product[g].OperationType[opType].Price[iPrice].@dayPart=="BREAKFAST_MENU")
				{
					if(cardSoldProduct.Product[g].OperationType[opType].@operationType=="SALE")
					{
						if(cardSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtTakeOut !="")
						{
							substractGiftCardFromBreakfast= Number(substractGiftCardFromBreakfast) + Number(cardSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtTakeOut);
						}
						if(cardSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtEatIn !="")
						{
							substractGiftCardFromBreakfast= Number(substractGiftCardFromBreakfast) + Number(cardSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtEatIn);
						}
					}
					if(cardSoldProduct.Product[g].OperationType[opType].@operationType=="REFUND")
					{
						if(cardSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtTakeOut !="")
						{
							substractGiftCardFromBreakfast= Number(substractGiftCardFromBreakfast) - Number(cardSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtTakeOut);
						}
						if(cardSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtEatIn !="")
						{
							substractGiftCardFromBreakfast= Number(substractGiftCardFromBreakfast) - Number(cardSoldProduct.Product[g].OperationType[opType].Price[iPrice].PMix.@netAmtEatIn);
						}
					}
				}
			}			
		}
	}
	//API.dbg(substractGiftCardFromBreakfast+" "+substractGiftCertFromBreakfast);//removed due to NVS-1671
	
	
		//netSalesAmountNeverTax 	= netSalesAmountNeverTax - (mcCertSalesAmount-mcCertSalesRefundAmount) - (mcCardSalesAmount-mcCardSalesRefundAmount);
	// DES-167
	/*netSalesAmountNeverTax 	= netSalesAmountNeverTax.subtract(mcCertSalesAmount);
	netSalesAmountNeverTax 	= netSalesAmountNeverTax.add(mcCertSalesRefundAmount);*/
	netSalesAmountNeverTax 	= netSalesAmountNeverTax.subtract(mcCardSalesAmount);
	netSalesAmountNeverTax 	= netSalesAmountNeverTax.add(mcCardSalesRefundAmount);
	if(Country == "UK" || Country =="IE")
	{
		netSalesAmountNeverTax 	= netSalesAmountNeverTax.subtract(mcCertSalesAmount);
		netSalesAmountNeverTax 	= netSalesAmountNeverTax.add(mcCertSalesRefundAmount);
	}

	var mcCardRedeemedAmount= getMcCardRedeemedAmount(root/*Cash*/);

	var netSalesAmount		= summNodesAttributeBigDecimalValues(nodeCash, "netAmount");
		netSalesAmount		= netSalesAmount.subtract(mcCertSalesAmount);
		netSalesAmount		= netSalesAmount.add(mcCertSalesRefundAmount);
		netSalesAmount		= netSalesAmount.subtract(mcCardSalesAmount);
		netSalesAmount		= netSalesAmount.add(mcCardSalesRefundAmount);
	var taxAmount			= summNodesAttributeBigDecimalValues(nodeCash, "taxAmount");
	var taxAmount_P			= summNodesAttributeBigDecimalValues(nodeProductSalesCash, "taxAmount");	// D10
	var taxAmount_NP		= summNodesAttributeBigDecimalValues(nodeNonProductSalesCash, "taxAmount");	// D10

	var totalNonProductSales= summNodesAttributeBigDecimalValues(nodeNonProductSalesCash, "netAmount");
							  
	//UberEats NVS-6999 - msilva - UberEats Integration 
	deliveryBillableSaleTC  =0; 
	deliveryBillableSaleAmt =0; 

	// Get tender information
	if(nodeTenders != null) {
		var nodesTender = nodeTenders.Tender;
		var nodesTenderSize = nodesTender.length();

		for(var i = 0; i < nodesTenderSize; i++) {
			var nodeTender = nodesTender[i];
			var tcTenderId				= getNumberAttribute(nodeTender, "id");
			//get the tender category
			var tender_category = rootCash.TenderTable.TenderType.(@id ==tcTenderId).@category;
			
			tcTenderIdArray[tcTenderId] += summNodesAttributeValues(nodeTender, "tc");
			qtyTenderIdArray[tcTenderId] += summNodesAttributeValues(nodeTender, "qty");
			if(tender_category.toString() == "TENDER_FOREIGN_CURRENCY")
			{
				drawerAmountTenderIdArray[tcTenderId]=drawerAmountTenderIdArray[tcTenderId].add(summNodesAttributeBigDecimalValues(nodeTender, "fDrawerAmount"));
				changeDifferenceAmountTenderIdArray[tcTenderId]=changeDifferenceAmountTenderIdArray[tcTenderId].add(summNodesAttributeBigDecimalValues(nodeTender, "fChangeDifferenceAmount"));
				excessAmountTenderIdArray[tcTenderId]=excessAmountTenderIdArray[tcTenderId].add(summNodesAttributeBigDecimalValues(nodeTender, "fExcessAmount"));
			}
			else
			{
				drawerAmountTenderIdArray[tcTenderId]=drawerAmountTenderIdArray[tcTenderId].add(summNodesAttributeBigDecimalValues(nodeTender, "drawerAmount"));
				changeDifferenceAmountTenderIdArray[tcTenderId]=changeDifferenceAmountTenderIdArray[tcTenderId].add(summNodesAttributeBigDecimalValues(nodeTender, "changeDifferenceAmount"));
				excessAmountTenderIdArray[tcTenderId]=excessAmountTenderIdArray[tcTenderId].add(summNodesAttributeBigDecimalValues(nodeTender, "excessAmount"));
			}
			sumExcessAmount = sumExcessAmount.add(summNodesAttributeBigDecimalValues(nodeTender, "excessAmount")); //is in native currency
			//sumExcessAmount=sumExcessAmount.add(excessAmountTenderIdArray[tcTenderId]);
			/* information added in version 6.1.3
			qtyCashout[tcTenderId] += summNodesAttributeValues(nodeTender, "CashOutCount");
			amountCashout[tcTenderId]=amountCashout[tcTenderId].add(summNodesAttributeBigDecimalValues(nodeTender, "CashOutAmount"));
			qtyRefund[tcTenderId] += summNodesAttributeValues(nodeTender, "refundCount");
			refundCashout[tcTenderId]=refundCashout[tcTenderId].add(summNodesAttributeBigDecimalValues(nodeTender, "refundAmount"));
			*/

			// OI 27.01.2010 add for 6.1.17
			if(0==tcTenderId) {
				sumChangeRounding += summNodesAttributeValues(nodeTender,"changeRounding");
				qtyChangeRounding += summNodesAttributeValues(nodeTender,"changeRoundingCount");
			}
	    		cashoutTc[tcTenderId] += summNodesAttributeValues(nodeTender, "CashOutCount");
			cashoutAmount[tcTenderId] += summNodesAttributeValues(nodeTender, "CashOutAmount");

			//added for Ubert eats POC UberEats NVS-6999 - msilva - UberEats Integration  */
			if (deliveryTenders.split("|").indexOf(tcTenderId) != -1) {
				deliveryBillableSaleTC += summNodesAttributeValues(nodeTender, "tc");
				deliveryBillableSaleAmt += summNodesAttributeValues(nodeTender, "drawerAmount");
			} 

			
		}
	}
	
	// cashless & other payment total 
	var CashlessTC=0;
	var CashlessQty=0;
	var CashlessAmount=new BigDecimal("0.00");
	
	
	var totalOtherPaymentQty =0;
	var totalOtherPaymentAmount =new BigDecimal("0.00");
	var totalOtherPaymentExcess = new BigDecimal("0.00");
	
	var totalCreditSaleQty =0;
	var totalCreditSaleAmount =new BigDecimal("0.00");
	var totalCreditSaleExcess = new BigDecimal("0.00");
	
	var totalGiftCouponQty =0;
	var totalGiftCouponAmount =new BigDecimal("0.00");
	var totalGiftCouponExcess = new BigDecimal("0.00");
	
	var totalGiftCertificateQty =0;
	var totalGiftCertificateAmount =new BigDecimal("0.00");
	var totalGiftCertificateExcess = new BigDecimal("0.00");
	
	var totalGiftCardQty =0;
	var totalGiftCardAmount =new BigDecimal("0.00");
	var totalGiftCardExcess = new BigDecimal("0.00");
	
	if(nodeTenders != null) {
		var nodesTender = nodeTenders.Tender;
		var nodesTenderSize = nodesTender.length();
		for(var i = 0; i < nodesTenderSize; i++) {
			var nodeTender = nodesTender[i];
			var tcTenderId = getNumberAttribute(nodeTender, "id");
			var tender_category = rootCash.TenderTable.TenderType.(@id ==tcTenderId).@category;
			if(tender_category.toString() == "TENDER_ELECTRONIC_PAYMENT")
			{
				CashlessTC += tcTenderIdArray[tcTenderId];
				CashlessQty += qtyTenderIdArray[tcTenderId];
				CashlessAmount=CashlessAmount.add(drawerAmountTenderIdArray[tcTenderId]);
			}
			if(tender_category.toString() =="TENDER_OTHER_PAYMENT")
			{
				totalOtherPaymentQty += qtyTenderIdArray[tcTenderId];
				totalOtherPaymentAmount = totalOtherPaymentAmount.add(drawerAmountTenderIdArray[tcTenderId]);
				totalOtherPaymentExcess = totalOtherPaymentExcess.add(excessAmountTenderIdArray[tcTenderId]);
			}
			if(tender_category.toString() =="TENDER_CREDIT_SALES")
			{
				totalCreditSaleQty += qtyTenderIdArray[tcTenderId];
				totalCreditSaleAmount = totalCreditSaleAmount.add(drawerAmountTenderIdArray[tcTenderId]);
				totalCreditSaleExcess = totalCreditSaleExcess.add(excessAmountTenderIdArray[tcTenderId]);
			}
			if(tender_category.toString() =="TENDER_GIFT_COUPON")
			{
				//get the tender legacy  , this will be disponible in cash xml starting with 6.1.17
				var storedbPath = "StoreDB.TenderTypes.TenderType.(TenderId==\""+tcTenderId+"\").GiftCoupon.LegacyId";
				var type = getConfigValue(storedbPath , "");
	
				if(type.toString() =="GIFTCERTIFICATE")
				{
					totalGiftCertificateQty += qtyTenderIdArray[tcTenderId];
					totalGiftCertificateAmount = totalGiftCertificateAmount.add(drawerAmountTenderIdArray[tcTenderId]);
					totalGiftCertificateExcess = totalGiftCertificateExcess.add(excessAmountTenderIdArray[tcTenderId]);
				}
				else if(type.toString() =="GIFTCARD")
				{
					totalGiftCardQty += qtyTenderIdArray[tcTenderId];
					totalGiftCardAmount = totalGiftCardAmount.add(drawerAmountTenderIdArray[tcTenderId]);
					totalGiftCardExcess = totalGiftCardExcess.add(excessAmountTenderIdArray[tcTenderId]);
				}
				else
				{
					totalGiftCouponQty += qtyTenderIdArray[tcTenderId];
					totalGiftCouponAmount = totalGiftCouponAmount.add(drawerAmountTenderIdArray[tcTenderId]);
					totalGiftCouponExcess = totalGiftCouponExcess.add(excessAmountTenderIdArray[tcTenderId]);
				}
				
			}
		}	
	}
	
	/*
	for(var iIndex = CASHLESS_RANGE_INIT; iIndex < CASHLESS_RANGE_END; iIndex++) {
		CashlessTC += tcTenderIdArray[iIndex];
		CashlessQty += qtyTenderIdArray[iIndex];
		CashlessAmount=CashlessAmount.add(drawerAmountTenderIdArray[iIndex]);
	}
           */
	/*
	var CouponsQtty=qtyTenderIdArray[COUPON_A]+qtyTenderIdArray[COUPON_B]+qtyTenderIdArray[COUPON_C]+qtyTenderIdArray[COUPON_D]+tcTenderIdArray[COUPON_E];
	var CouponsAmount=((((drawerAmountTenderIdArray[COUPON_A].add(drawerAmountTenderIdArray[COUPON_B])).add(drawerAmountTenderIdArray[COUPON_C])).add(drawerAmountTenderIdArray[COUPON_D])).add(tcTenderIdArray[COUPON_E]));
	*/
	var CouponsTax=new BigDecimal("0.00");

	var inProgressTC		= summNodesAttributeValues(nodeVoid, "inProgressTC");	
	var inProgressAmount		= summNodesAttributeBigDecimalValues(nodeVoid, "inProgressAmount");	
	var inProgressEatinTC		= summNodesAttributeValues(nodeVoid, "inProgressEatinTC");	
	var inProgressEatinAmount	= summNodesAttributeBigDecimalValues(nodeVoid, "inProgressEatinAmount");	
	var inProgressTakeoutTC		= summNodesAttributeValues(nodeVoid, "inProgressTakeoutTC");	
	var inProgressTakeoutAmount	= summNodesAttributeBigDecimalValues(nodeVoid, "inProgressTakeoutAmount");	

	var inProgressProdTC		= summNodesAttributeValues(nodeVoid, "inProgressProdTC");	
	var inProgressNonProdTC		= summNodesAttributeValues(nodeVoid, "inProgressNonProdTC");	
	
	var overringsTC				= inProgressTC + summNodesAttributeValues(nodeVoid, "overringTC");
	var overringsAmount			= inProgressAmount.add(summNodesAttributeBigDecimalValues(nodeVoid, "overringAmount"));

	/* NVS-5544 -DKJ: substract automaticVoidedOrder (SCR) */ 
	overringsTC	-=summNodesAttributeValues(nodeVoid, "automaticVoidedOrderTC");
	overringsAmount	-=summNodesAttributeValues(nodeVoid, "automaticVoidedOrderAmount");		

	var nodeCashOutTC			= summNodesAttributeValues(nodeCashOut,"tc");
	var nodeCashOutAmount		= summNodesAttributeBigDecimalValues(nodeCashOut,"amount");

	var difference				= closingReading.subtract(openingReading);
	var pettyCashCount			= getPettyCashCount(nodeCashDetails);
	var pettyCashAmount			= getPettyCashAmount(nodeCashDetails);

	// OI 27.01.2010 change for 6.1.17
	//var totTcCashRefunds 	 	= refundsTC-cashlessRefundsTC+nodeCashOutTC;
	var totTcCashRefunds 	 	= refundsTC-cashlessRefundsTC;
	/*
	var totAmountCashRefunds 	= (refundsAmount + refundsTaxAmount + nodeCashOutAmount) - 
								  (cashlessRefundsAmount + cashlessRefundsTaxAmount);
	*/
	var totAmountCashRefunds 	= refundsAmount;
		totAmountCashRefunds	= totAmountCashRefunds.add(refundsTaxAmount);
		//totAmountCashRefunds	= totAmountCashRefunds.add(nodeCashOutAmount);
		totAmountCashRefunds	= totAmountCashRefunds.subtract(cashlessRefundsAmount);
		totAmountCashRefunds	= totAmountCashRefunds.subtract(cashlessRefundsTaxAmount);
	/*
	var grossSalesAmount		= 	difference  - 
									overringsAmount - 
									totAmountCashRefunds - 
									(cashlessRefundsAmount + cashlessRefundsTaxAmount) - 
									nodeTransfersInOtherReceiptsAmount - 
									(mcCertSalesAmount - mcCertSalesRefundAmount) -
									(mcCardSalesAmount - mcCardSalesRefundAmount);
	*/
	var grossSalesAmount		= difference;
		grossSalesAmount		= grossSalesAmount.subtract(overringsAmount);
		grossSalesAmount		= grossSalesAmount.subtract(totAmountCashRefunds);
		grossSalesAmount		= grossSalesAmount.subtract(cashlessRefundsAmount);
		grossSalesAmount		= grossSalesAmount.subtract(cashlessRefundsTaxAmount);
		grossSalesAmount		= grossSalesAmount.subtract(nodeTransfersInOtherReceiptsAmount);
		grossSalesAmount		= grossSalesAmount.subtract(mcCertSalesAmount);
		grossSalesAmount		= grossSalesAmount.add(mcCertSalesRefundAmount);
		grossSalesAmount		= grossSalesAmount.subtract(mcCardSalesAmount);
		grossSalesAmount		= grossSalesAmount.add(mcCardSalesRefundAmount);
	var totalnetSalesAmount		= netSalesAmount;
	var totTaxAmount 			= taxAmount;
	var totProductTaxAmount 	= taxAmount_P;	// D10
	var totNonProductTaxAmount 	= taxAmount_NP;	// D10

	var qtdTCDiscard = root.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
	var qtdTCDiscard_P = root.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.ProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10
	var qtdTCDiscard_NP = root.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.NonProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10

	var storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"CashReport\").Parameter.(@name==\"countOverringTC\").@value";
	var posdbPath = "Configuration.(@imports==\"Store.wide\").Section.(@name==\"CashReport\").Parameter.(@name==\"countOverringTC\").@value";
	var countOverring = getConfigValue(storedbPath , posdbPath);
	var totalTc 				= summNodesAttributeValues(root.CashTotals.Cash,"tc") - 
								  summNodesAttributeValues(qtdTCDiscard,"tc") + inProgressTC;
	if(countOverring != "true") //this is the default behavior we do not consider overring as transaction
	{
		totalTc = totalTc - overringsTC;
	}							  
								  
	var totalTcP 				= summNodesAttributeValues(root.CashTotals.ProductSales.Cash,"tc") - 
								  summNodesAttributeValues(qtdTCDiscard_P,"tc") + inProgressProdTC;	// D10
	var totalTcNP 				= summNodesAttributeValues(root.CashTotals.NonProductSales.Cash,"tc") - 
								  summNodesAttributeValues(qtdTCDiscard_NP,"tc") + inProgressNonProdTC;	// D10

	var tredsTC					= summNodesAttributeValues(nodeReduction, "tc");
	var tredsAfterTotal			= summNodesAttributeValues(nodeReduction, "redsAfterTotal");
	var tredsAmtAfterTotal		= summNodesAttributeBigDecimalValues(nodeReduction, "redsAmtAfterTotal");
	var tredAmtBeforeTl			= summNodesAttributeBigDecimalValues(nodeReduction, "amountBeforeTotal");
	var tredItemsBeforeTl		= summNodesAttributeValues(nodeReduction, "itemsBeforeTotal");
	var tredAmtAfterTl			= summNodesAttributeBigDecimalValues(nodeReduction, "amountAfterTotal");
	var tredItemsAfterTl		= summNodesAttributeValues(nodeReduction, "itemsAfterTotal");
	var tredAverageBeforeTl		= tredItemsBeforeTl > 0 ? (tredAmtBeforeTl / tredItemsBeforeTl) : 0;
	var tredAverageAfterTl		= tredsAfterTotal > 0 ? (tredsAmtAfterTotal / tredsAfterTotal) : 0;//tredItemsAfterTl > 0 ? (tredsAmtAfterTotal / tredItemsAfterTl) : 0;
	var promoItems				= summNodesAttributeValues(nodePromo, "items");
	var promoItemsAmount		= summNodesAttributeBigDecimalValues(nodePromo, "amount");
	var promoTc					= summNodesAttributeValues(nodePromo, "tc");
	var promoTcNetAmount		= summNodesAttributeBigDecimalValues(nodePromo, "tcNetAmount");
	var promoTcTaxAmount		= summNodesAttributeBigDecimalValues(nodePromo, "tcTaxAmount");
	var promoTcTotalAmount		= promoTcNetAmount.add(promoTcTaxAmount);

	// Drive-Thru values
	var dtinProgress			=0;
	var	dtTc					=0;
	var	dtTc_P					=0;
	var	dtTc_NP					=0;
	var	dtNetAmount				=new BigDecimal("0.00");
	var	dtProductNetAmount		=new BigDecimal("0.00");
	var	dtProductTaxAmount		=new BigDecimal("0.00");
	var	dtCars					=0;
	var dtDiscard				=null;
	var qtdTCDiscard			=null;
	var qtdTCDiscard_P			=null;
	var qtdTCDiscard_NP			=null;
	
	// Walk-Thru values
	var wtinProgress			=0;
	var	wtTc					=0;
	var	wtTc_P					=0;
	var	wtTc_NP					=0;
	var	wtNetAmount				=new BigDecimal("0.00");
	var	wtProductNetAmount		=new BigDecimal("0.00");
	var	wtProductTaxAmount		=new BigDecimal("0.00");
	var wtDiscard				=null;
	var qtdWtTCDiscard			=null;
	var qtdWtTCDiscard_P		=null;
	var qtdWtTCDiscard_NP		=null;
	//API.dbg("xmlcashreport before rptcashconsolidated if");
	if((reportType == RPTCASHCONSOLIDATED) || (reportType == RPTINTCASHCONSOLIDATED)){
		// consolidated can receive partial cash report from ISP script
		dtinProgress			= summNodesAttributeValues(root.(@podShort=="DT").CashDetails.Void,"inProgressTakeoutTC");			
		qtdTCDiscard			= root.(@podShort=="DT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
		qtdTCDiscard_P			= root.(@podShort=="DT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.ProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10
		qtdTCDiscard_NP			= root.(@podShort=="DT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.NonProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10
		dtTc					= getPodCashAttribute(root, "DT", "tc")-summNodesAttributeValues(qtdTCDiscard,"tc") + dtinProgress;
		dtTc_P					= getPodCashAttribute(root, "DT", "tc", "P")-summNodesAttributeValues(qtdTCDiscard_P,"tc");// + dtinProgress;
		dtTc_NP					= getPodCashAttribute(root, "DT", "tc", "NP")-summNodesAttributeValues(qtdTCDiscard_NP,"tc");// + dtinProgress;
		dtNetAmount				= getBigDecPodCashAttribute(root, "DT", "netAmount");
		dtCars					= getPodCashAttribute(root, "DT", "cars");
		dtProductNetAmount		= getBigDecPodCashAttribute(root, "DT", "netAmount","P");
		dtProductTaxAmount		= getBigDecPodCashAttribute(root, "DT", "taxAmount","P");

		if(flagTypePodWT) {		
			wtinProgress 		= summNodesAttributeValues(root.(@podShort=="WT").CashDetails.Void,"inProgressTakeoutTC");			
			qtdWtTCDiscard 		= root.(@podShort=="WT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
			qtdWtTCDiscard_P	= root.(@podShort=="WT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.ProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10
			qtdWtTCDiscard_NP 	= root.(@podShort=="WT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.NonProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10
			wtTc				= getPodCashAttribute(root, "WT", "tc")-summNodesAttributeValues(qtdWtTCDiscard,"tc") + wtinProgress;
			dtTc_P				= getPodCashAttribute(root, "WT", "tc", "P")-summNodesAttributeValues(qtdWtTCDiscard_P,"tc");// + dtinProgress;
			dtTc_NP				= getPodCashAttribute(root, "WT", "tc", "NP")-summNodesAttributeValues(qtdWtTCDiscard_NP,"tc");// + dtinProgress;
			wtNetAmount			= getBigDecPodCashAttribute(root, "WT", "netAmount");
			wtProductNetAmount	= getBigDecPodCashAttribute(root, "WT", "netAmount","P");
			wtProductTaxAmount	= getBigDecPodCashAttribute(root, "DT", "taxAmount","P");
		}
	}
	else {
		// keep others report types as it was...
		dtinProgress			= summNodesAttributeValues(rootCash.POS.(@podShort=="DT").CashDetails.Void,"inProgressTakeoutTC");
		qtdTCDiscard			= rootCash.POS.(@podShort=="DT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
		qtdTCDiscard_P			= root.POS.(@podShort=="DT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.ProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10
		qtdTCDiscard_NP			= root.POS.(@podShort=="DT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.NonProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10
		dtTc					= getPodCashAttribute(rootCash, "DT", "tc")-summNodesAttributeValues(qtdTCDiscard,"tc") + dtinProgress;
		dtTc_P					= getPodCashAttribute(rootCash, "DT", "tc", "P")-summNodesAttributeValues(qtdTCDiscard_P,"tc");// + dtinProgress;
		dtTc_NP					= getPodCashAttribute(rootCash, "DT", "tc", "NP")-summNodesAttributeValues(qtdTCDiscard_NP,"tc");// + dtinProgress;
		dtNetAmount				= getBigDecPodCashAttribute(rootCash, "DT", "netAmount");
		dtCars					= getPodCashAttribute(rootCash, "DT", "cars");
		dtProductNetAmount		= getBigDecPodCashAttribute(rootCash, "DT", "netAmount","P");
		dtProductTaxAmount		= getBigDecPodCashAttribute(rootCash, "DT", "taxAmount","P");

		if(flagTypePodWT) {			
			wtinProgress 		= summNodesAttributeValues(rootCash.POS.(@podShort=="WT").CashDetails.Void,"inProgressTakeoutTC");
			qtdWtTCDiscard 		= rootCash.POS.(@podShort=="WT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
			qtdWtTCDiscard_P	= rootCash.POS.(@podShort=="WT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.ProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10
			qtdWtTCDiscard_NP 	= rootCash.POS.(@podShort=="WT").CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.NonProductSales.Cash.(@netAmount=="0.00");//.@tc	// D10
			wtTc				= getPodCashAttribute(rootCash, "WT", "tc")-summNodesAttributeValues(qtdWtTCDiscard,"tc") + wtinProgress;
			dtTc_P				= getPodCashAttribute(rootCash, "WT", "tc", "P")-summNodesAttributeValues(qtdWtTCDiscard_P,"tc");// + dtinProgress;
			dtTc_NP				= getPodCashAttribute(rootCash, "WT", "tc", "NP")-summNodesAttributeValues(qtdWtTCDiscard_NP,"tc");// + dtinProgress;
			wtNetAmount			= getBigDecPodCashAttribute(rootCash, "WT", "netAmount");
			wtProductNetAmount	= getBigDecPodCashAttribute(rootCash, "WT", "netAmount","P");
			wtProductTaxAmount	= getBigDecPodCashAttribute(rootCash, "DT", "taxAmount","P");
		}
	}
	if ((reportType == RPTCASHIERFLASH) ||	(reportType == RPTCASHDRAWERCHANGE)  || (reportType == RPTOPERATRORLOGOUT) || (reportType == RPTCASHIERCLOSEBYDATE)) {	
		if (flagTypePos == "DT") {
			var nodeCashTotals 	= root.CashTotals[0];
			var nodeCash 		= findFirst(nodeCashTotals, "Cash");
			var nodeCashDetails	= root.CashDetails[0];		
			dtinProgress 		= 0;
			var nodeVoid 		= findFirst(nodeCashDetails, "Void");				
			if(nodeVoid != null) {
				dtinProgress 	= getNumberAttribute(nodeVoid, "inProgressTakeoutTC");
			}
			if(nodeCash != null) {
				qtdTCDiscard 	= nodeCash.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
				dtTc 		 	= getNumberAttribute(nodeCash, "tc")-summNodesAttributeValues(qtdTCDiscard,"tc") + dtinProgress;
				dtNetAmount  	= getBigDecimalAttribute(nodeCash, "netAmount");
				dtCars		 	= getNumberAttribute(nodeCash, "cars");
			} else {
				dtTc 		 	= 0;
				dtNetAmount  	= new BigDecimal("0.00");
				dtCars		 	= 0;
			}
		} else {
			dtTc 		 		= 0;
			dtNetAmount  		= new BigDecimal("0.00");
			dtCars		 		= 0;
		}
		
		
		if(flagTypePodWT) {
			var nodeCashTotals 	= root.CashTotals[0];
			var nodeCash 		= findFirst(nodeCashTotals, "Cash");
			var nodeCashDetails	= root.CashDetails[0];		
			dtinProgress 		=0;
			var nodeVoid 		= findFirst(nodeCashDetails, "Void");				
			if(nodeVoid != null) {
				dtinProgress 	= getNumberAttribute(nodeVoid, "inProgressTakeoutTC");
			}
			if(nodeCash != null) {
				qtdWtTCDiscard	= nodeCash.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
				wtTc 		 	= getNumberAttribute(nodeCash, "tc")-summNodesAttributeValues(qtdTCDiscard,"tc") + dtinProgress;
				wtNetAmount  	= getBigDecimalAttribute(nodeCash, "netAmount");
			} else {
				wtTc 		 	= 0;
				wtNetAmount  	= new BigDecimal("0.00");
				wtCars		 	= 0;
			}
		} else {
			wtTc 		 		= 0;
			wtNetAmount  		= new BigDecimal("0.00");
		}
		
	}
	dtNetAmount					= dtNetAmount.subtract(getPMixTotalnetAmount(PMixProductCardDT));
	dtNetAmount					= dtNetAmount.subtract(getPMixTotalnetAmount(PMixProductCertDT));
	dtNetAmount					= dtNetAmount.add(getPMixTotalnetAmount(PMixProductCertRefDT));
	dtNetAmount					= dtNetAmount.add(getPMixTotalnetAmount(PMixProductCardRefDT));
	var dtPercent				= calculatePercentage(dtNetAmount, netSalesAmount);
	wtNetAmount					= wtNetAmount.subtract(getPMixTotalnetAmount(PMixProductCardWT));
	wtNetAmount					= wtNetAmount.subtract(getPMixTotalnetAmount(PMixProductCertWT)); 	
	wtNetAmount					= wtNetAmount.add(getPMixTotalnetAmount(PMixProductCertRefWT));
	wtNetAmount					= wtNetAmount.add(getPMixTotalnetAmount(PMixProductCardRefWT));
	var wtPercent				= calculatePercentage(wtNetAmount, netSalesAmount);
	//API.dbg("sotec "+ breakFastDayMenunodesCashnetAmount+ " " +substractGiftCardFromBreakfast +" " +substractGiftCertFromBreakfast);  //removed due to NVS-1671
	
	breakFastDayMenunodesCashnetAmount = new BigDecimal(breakFastDayMenunodesCashnetAmount);
	breakFastDayMenunodesCashnetAmount = breakFastDayMenunodesCashnetAmount.subtract(substractGiftCardFromBreakfast);
	breakFastDayMenunodesCashnetAmount = breakFastDayMenunodesCashnetAmount.subtract(substractGiftCertFromBreakfast);

	// Breakfast values
	var breakFastDayMenuPercent	= calculatePercentage(breakFastDayMenunodesCashnetAmount, totalnetSalesAmount);
    //API.dbg("xmlCashReport before calculatePercentage function");
	// Eat in values	
	var eiqtdTCDiscard 			= root.CashStatistics.SaleType.(@name=="EAT_IN").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
	var eiTc					= summNodesAttributeValues(nodeEatInCashTotals.Cash, "tc") - 
								  (summNodesAttributeValues(eiqtdTCDiscard,"tc")<=0 ? 0 : summNodesAttributeValues(eiqtdTCDiscard,"tc")) +
								  inProgressEatinTC;
	var storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"CashReport\").Parameter.(@name==\"countOverringTC\").@value";
	var posdbPath = "Configuration.(@imports==\"Store.wide\").Section.(@name==\"CashReport\").Parameter.(@name==\"countOverringTC\").@value";
	var countOverring = getConfigValue(storedbPath , posdbPath);
	if(countOverring != "true") //this is the default behavior we do not consider overring as transaction
	{
		eiTc = eiTc - summNodesAttributeValues(nodeVoid, "overringEatinTC");
	}								  
	var eiNetAmount				= summNodesAttributeBigDecimalValues(nodeEatInCashTotals.Cash, "netAmount");
	eiNetAmount					= eiNetAmount.subtract(summNodesAttributeBigDecimalValues(PMixProductCard.PMix,"netAmtEatIn"));
	eiNetAmount					= eiNetAmount.subtract(summNodesAttributeBigDecimalValues(PMixProductCert.PMix,"netAmtEatIn"));    //(getPMixTotalnetAmount(PMixProductCert));
	eiNetAmount					= eiNetAmount.add(summNodesAttributeBigDecimalValues(PMixProductCertRef.PMix,"netAmtEatIn"));   //(getPMixTotalnetAmount(PMixProductCertRef));
	eiNetAmount					= eiNetAmount.add(summNodesAttributeBigDecimalValues(PMixProductCardRef.PMix,"netAmtEatIn"));
		
	var eiPercent				= calculatePercentage(eiNetAmount, netSalesAmount);
	var eiTax					= summNodesAttributeBigDecimalValues(nodeEatInCashTotals.Cash,"taxAmount"); 
	eiTax						= eiTax.subtract(summNodesAttributeBigDecimalValues(PMixProductCard.PMix,"taxEatIn"));
	eiTax						= eiTax.subtract(summNodesAttributeBigDecimalValues(PMixProductCert.PMix,"taxEatIn"));
	eiTax						= eiTax.add(summNodesAttributeBigDecimalValues(PMixProductCertRef.PMix,"taxEatIn"));
	eiTax						= eiTax.add(summNodesAttributeBigDecimalValues(PMixProductCardRef.PMix,"taxEatIn"));
	
	// Take out values
	var toqtdTCDiscard 			= root.CashStatistics.SaleType.(@name=="TAKE_OUT").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc
	var toTc					= summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "tc") - 
								  (summNodesAttributeValues(toqtdTCDiscard,"tc")<=0 ? 0 : summNodesAttributeValues(toqtdTCDiscard,"tc")) +
								  inProgressTakeoutTC;
	var storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"CashReport\").Parameter.(@name==\"countOverringTC\").@value";
	var posdbPath = "Configuration.(@imports==\"Store.wide\").Section.(@name==\"CashReport\").Parameter.(@name==\"countOverringTC\").@value";
	var countOverring = getConfigValue(storedbPath , posdbPath);
	if(countOverring != "true") //this is the default behavior we do not consider overring as transaction
	{
		toTc = toTc - summNodesAttributeValues(nodeVoid, "overringTakeoutTC");
	}	
	/*
	var toNetAmount				= summNodesAttributeBigDecimalValues(nodeTakeOutCashTotals.Cash, "netAmount")
								   - summNodesAttributeBigDecimalValues(PMixProductCard,"netAmtTakeOut")
								   - summNodesAttributeBigDecimalValues(PMixProductCert,"netAmtTakeOut")
								   + summNodesAttributeBigDecimalValues(PMixProductCertRef,"netAmtTakeOut")
								   + summNodesAttributeBigDecimalValues(PMixProductCardRef,"netAmtTakeOut");
	*/
	

	var toNetAmount				= summNodesAttributeBigDecimalValues(nodeTakeOutCashTotals.Cash, "netAmount");
	toNetAmount					= toNetAmount.subtract(summNodesAttributeBigDecimalValues(PMixProductCard.PMix,"netAmtTakeOut"));
	toNetAmount					= toNetAmount.subtract(summNodesAttributeBigDecimalValues(PMixProductCert.PMix,"netAmtTakeOut"));
	toNetAmount					= toNetAmount.add(summNodesAttributeBigDecimalValues(PMixProductCertRef.PMix,"netAmtTakeOut"));
	toNetAmount					= toNetAmount.add(summNodesAttributeBigDecimalValues(PMixProductCardRef.PMix,"netAmtTakeOut"));
	//var toPercent				= calculatePercentage(toNetAmount, totalnetSalesAmount);
	var toTax				= summNodesAttributeBigDecimalValues(nodeTakeOutCashTotals.Cash, "taxAmount");
	toTax					= toTax.subtract(summNodesAttributeBigDecimalValues(PMixProductCard.PMix,"taxTakeOut"));
	toTax					= toTax.subtract(summNodesAttributeBigDecimalValues(PMixProductCert.PMix,"taxTakeOut"));
	toTax					= toTax.add(summNodesAttributeBigDecimalValues(PMixProductCertRef.PMix,"taxTakeOut"));
	toTax					= toTax.add(summNodesAttributeBigDecimalValues(PMixProductCardRef.PMix,"taxTakeOut"));
	var toPercent 				= calculatePercentage((toNetAmount.add(toTax)), (totalnetSalesAmount.add(totTaxAmount)));
	
	if (Country == "DE" || Country =="UK" || Country =="IE")
	{
		toPercent 				= calculatePercentage(toNetAmount, totalnetSalesAmount);
	}
	
	// Take out values
	var otherqtdTCDiscard 		= root.CashStatistics.SaleType.(@name=="OTHER").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");//.@tc	
	var otherTc					= summNodesAttributeValues(nodeOtherCashTotals.Cash, "tc") - 
								  (summNodesAttributeValues(otherqtdTCDiscard,"tc")<=0 ? 0 : summNodesAttributeValues(otherqtdTCDiscard,"tc"));	
	/*
	var otherNetAmount			= summNodesAttributeBigDecimalValues(nodeOtherCashTotals.Cash, "netAmount")
								   - summNodesAttributeBigDecimalValues(PMixProductCard,"netAmtOther")
								   - summNodesAttributeBigDecimalValues(PMixProductCert,"netAmtOther")
								   + summNodesAttributeBigDecimalValues(PMixProductCertRef,"netAmtOther")
								   + summNodesAttributeBigDecimalValues(PMixProductCardRef,"netAmtOther");
	*/
	var otherNetAmount			= summNodesAttributeBigDecimalValues(nodeOtherCashTotals.Cash, "netAmount");
	otherNetAmount				= otherNetAmount.subtract(summNodesAttributeBigDecimalValues(PMixProductCard,"netAmtOther"));
	otherNetAmount				= otherNetAmount.subtract(summNodesAttributeBigDecimalValues(PMixProductCert,"netAmtOther"));
	otherNetAmount				= otherNetAmount.add(summNodesAttributeBigDecimalValues(PMixProductCertRef,"netAmtOther"));
	otherNetAmount				= otherNetAmount.add(summNodesAttributeBigDecimalValues(PMixProductCardRef,"netAmtOther"));
	var otherPercent			= calculatePercentage(otherNetAmount, netSalesAmount);
	var otherTax				= summNodesAttributeBigDecimalValues(nodeOtherCashTotals.Cash, "taxAmount");

	
	
   //API.dbg ("XMLCashReport END - before GenXMLCashRpt()");
	return(GenXMLCashRpt());
	
	
	//****************************************
	function GenXMLCashRpt() {

      API.dbg ("GenXMLCashRpt START");
		// D10 changes - block init
		switch(reportType) {
		case RPTINTCASHCONSOLIDATED:	// D10
			ExecRptIntCashConsolidated();
			break;
		case RPTCASHCONSOLIDATED:
			// fall thru
		default:
			ExecRptCashConsolidated();
			break;
		}
		// D10 changes - block end
		//API.dbg(XMLCashRpt);//removed due to NVS-1671
      API.dbg ("GenXMLCashRpt END");		
		return XMLCashRpt;
		
		function ExecRptIntCashConsolidated() {
			var iCount;
         
         API.dbg ("ExecRptIntCashConsolidated START");         
			XMLCashRpt = new XML("<dailyinternationalcashfile/>");
			var initialFloats = nodeCashDetails.TransfersIn.(@type=="INITIAL_FLOAT").Transfer;
			var initialFloatsSize = initialFloats.length();

			for(iCount=0; iCount<initialFloatsSize; iCount++) {
				var cmd = "XMLCashRpt.csh_InitAmount_ttype_" + iCount + "=Str2Currency(initialFloats[" + iCount + "].@amount)";
				var evaluate = eval(cmd);
			}
			
			// Get Use Tax information
			var nodeUseTaxTotals = null;
			try {
				if (root.CashDetails.length() > 1) {
					nodeUseTaxTotals = rootCash.CashDetails.UseTaxTotals[0];
				}
				else {
					nodeUseTaxTotals = root.CashDetails.UseTaxTotals[0];
				}
			}
			catch (ex) {
			}
			if(nodeUseTaxTotals != null && nodeUseTaxTotals.length() > 0) {
				for each (var nodeUseTax in nodeUseTaxTotals) {
					var taxId = nodeUseTax.@id;
					var	baseValue = nodeUseTax.@baseValue;
					var	calculatedValue = nodeUseTax.@calculatedValue;
					
					var useTax = new XML("<csh_UseTax/>");

					var id = new XML("<csh_UseTaxId/>");
					id.value = taxId;
					useTax.appendChild(id);
					var amount = new XML("<csh_UseTaxBaseValue/>");
					amount.value = baseValue;
					useTax.appendChild(amount);
					var tax = new XML("<csh_UseTaxCalculatedValue/>");
					tax.value = calculatedValue;
					useTax.appendChild(tax);

					XMLCashRpt.appendChild(useTax);
				}
			}
			
			XMLCashRpt.csh_OpeningForeverReading=BigDec2Currency(openingReading);
			XMLCashRpt.csh_CurrentForeverReading=BigDec2Currency(closingReading);

			XMLCashRpt.csh_TransactionCount=Number(totalTcP);
			XMLCashRpt.csh_TransactionCountAll=Number(totalTc);
			XMLCashRpt.csh_TransactionCountNP=Number(totalTcNP);

			XMLCashRpt.csh_OverringQuantity=Number(overringsTC);
			XMLCashRpt.csh_OverringAmount=BigDec2Currency(overringsAmount);
			XMLCashRpt.csh_RefundQuantity=Number(totTcCashRefunds);
			XMLCashRpt.csh_RefundAmount=BigDec2Currency(totAmountCashRefunds);
			XMLCashRpt.csh_RefundTax=BigDec2Currency(taxRefundtaxAmount);
			XMLCashRpt.csh_OtherReceiptsQuantity=Number(nodeTransfersInOtherReceiptsCout);
			XMLCashRpt.csh_OtherReceiptsAmount=BigDec2Currency(nodeTransfersInOtherReceiptsAmount);
			XMLCashRpt.csh_OverringQuantity_CSO=Number(overringsTCCSO);
			XMLCashRpt.csh_OverringAmount_CSO=BigDec2Currency(overringsAmountCSO);
			XMLCashRpt.csh_TcOverring_CSO=Number(overringsTCCSO);
			/*	DES-128 implement this only under change request
						XMLCashRpt.csh_CashlessSalesQuantity=CashlessQty;
						XMLCashRpt.csh_CashlessSalesAmount=(CashlessAmount.add(grossCashlessRefundsAmount)).toString();
			*/
			//giftcert
			for(var i =0; i< arrGiftCertProdId.length;i++)
			{
				var j=i+1;
				/* not for cash upload
				var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@prodId ="+arrGiftCertProdId[i];
				eval(cmd);
				var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@tc ="+arrGiftCertSoldQty[i]+"-"+arrGiftCertRefQty[i];
				eval(cmd);
				var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@amount ="+arrGiftCertSoldAmt+"-"+arrGiftCertRefAmt[i];
				eval(cmd);
				//var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@refundTc ="+arrGiftCertRefQty[i];
				//eval(cmd);
				//var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@refundAmount ="+arrGiftCertRefAmt[i];
				//eval(cmd);
				*/
				var cmd = "XMLCashRpt.csh_GiftCert"+j+"ProductId ="+arrGiftCertProdId[i];
				eval(cmd);
				var cmd = "XMLCashRpt.csh_GiftCert"+j+"Quantity ="+arrGiftCertSoldQty[i]+"-"+arrGiftCertRefQty[i];
				eval(cmd);
				var cmd = "XMLCashRpt.csh_GiftCert"+j+"Sold ="+arrGiftCertSoldAmt[i]+"-"+arrGiftCertRefAmt[i];
				eval(cmd);
				//var cmd = "XMLCashRpt.csh_GiftCert"+j+"refundQuantity ="+arrGiftCertRefQty[i];
				//eval(cmd);
				//var cmd = "XMLCashRpt.csh_GiftCert"+j+"refundAmount ="+arrGiftCertRefAmt[i];
				//eval(cmd);				
			}
			//giftcard
			for(var i=0; i< arrGiftCardProdId.length; i++)
			{
				var j=i+1;
				/*not for cash upload
				var cmd = "XMLCashRpt.GiftCard"+j+"Sold.@prodId ="+arrGiftCardProdId[i];
				eval(cmd);
				var cmd = "XMLCashRpt.GiftCard"+j+"Sold.@tc ="+arrGiftCardSoldQty[i]+"-"+arrGiftCardRefQty[i];
				eval(cmd);
				var cmd = "XMLCashRpt.GiftCard"+j+"Sold.@amount ="+arrGiftCardSoldAmt[i]+"-"+arrGiftCardRefAmt[i];
				eval(cmd);
				//var cmd = "XMLCashRpt.GiftCard"+j+"Sold.@refundTc ="+arrGiftCardRefQty[i];
				//eval(cmd);
				//var cmd = "XMLCashRpt.GiftCard"+j+"Sold.@refundAmount ="+arrGiftCardRefAmt[i];
				//eval(cmd);
				*/
				var cmd = "XMLCashRpt.csh_GiftCard"+j+"ProductId ="+arrGiftCardProdId[i];
				eval(cmd);
				var cmd = "XMLCashRpt.csh_GiftCard"+j+"Quantity ="+arrGiftCardSoldQty[i]+"-"+arrGiftCardRefQty[i];
				eval(cmd);
				var cmd = "XMLCashRpt.csh_GiftCard"+j+"Sold ="+arrGiftCardSoldAmt[i]+"-"+arrGiftCardRefAmt[i];
				eval(cmd);
				//var cmd = "XMLCashRpt.csh_GiftCard"+j+"refundQuantity ="+arrGiftCardRefQty[i];
				//eval(cmd);
				//var cmd = "XMLCashRpt.csh_GiftCard"+j+"refundAmount ="+arrGiftCardRefAmt[i];
				//eval(cmd);
			}
			
			
			/* add individual tags for every tender*/
			//counters for number of tenders per category
			var arrayGroupTenders = new Array();
			arrayGroupTenders["TENDER_NATIVE"] = 1;
			arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"] = 1;
			arrayGroupTenders["TENDER_GIFT_COUPON"] = 1;
			arrayGroupTenders["TENDER_GIFT_CERT"] = 1;
			arrayGroupTenders["TENDER_GIFT_CARD"] = 1;
			arrayGroupTenders["TENDER_FOREIGN_CURRENCY"] = 1;
			arrayGroupTenders["TENDER_CREDIT_SALES"] = 1;
			arrayGroupTenders["TENDER_OTHER_PAYMENT"] = 1;
			arrayGroupTenders["TENDER_BOG"] = 1;
			
			var nodesTender = rootCash.TenderTable.TenderType; //take all tenders defined in the store
			var nodesTenderSize = nodesTender.length();
			for(var i = 0; i < nodesTenderSize; i++) 
			{
				var nodeTender = nodesTender[i];
				var tenderCategory = nodeTender.@category;
				switch (tenderCategory.toString())
				{
					case "TENDER_NATIVE":
					{
						/*not for cash upload
						//add drawer change tag
						XMLCashRpt.NativeCurrency.@tc=qtyTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.NativeCurrency.@amount=drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						XMLCashRpt.NativeCurrency.@excess= excessAmountTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.NativeCurrency.@change= changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						*/
						//add csh_TenderCategory tags
						XMLCashRpt.csh_NativeCurrencyQuantity = qtyTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.csh_NativeCurrencyAmount = drawerAmountTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.csh_NativeCurrencyChange = changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.csh_NativeCurrencyExcess = excessAmountTenderIdArray[Number(nodeTender.@id)];
						arrayGroupTenders["TENDER_NATIVE"]++;
						break;
					}
					case "TENDER_ELECTRONIC_PAYMENT":
					{
						/*not for cash upload
						//add drawer change tag
						var cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						eval(cmd);
						var cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						*/
						//add csh_TenderCategory tags
						var cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+"Quantity ="+ qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+"Amount ="+ drawerAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+"Change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+"Excess ="+ excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]++;
						break;
					}
					case "TENDER_GIFT_COUPON":
					{
						//get the tender legacy  , this will be disponible in cash xml starting with 6.1.17
						var storedbPath = "StoreDB.TenderTypes.TenderType.(TenderId==\""+nodeTender.@id+"\").GiftCoupon.LegacyId";
						var type = getConfigValue(storedbPath , "");
	
						if(type.toString() =="GIFTCERTIFICATE")
						{
							/*not for cash upload
							var cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"Redeem.@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"Redeem.@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
							eval(cmd);
							var cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"Redeem.@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"Redeem.@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							*/
							//add csh_TenderCategory tags
							cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"RedeemQuantity = "+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"RedeemAmount="+drawerAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"RedeemChange= "+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"RedeemExcess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							arrayGroupTenders["TENDER_GIFT_CERT"]++;				
						}
						else if (type.toString() =="GIFTCARD")
						{
							/*not for cash upload
							var cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"Redeem.@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"Redeem.@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
							eval(cmd);
							var cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"Redeem.@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"Redeem.@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							*/
							//add csh_TenderCategory tags
							cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"RedeemQuantity = "+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"RedeemAmount="+drawerAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"RedeemChange= "+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"RedeemExcess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							arrayGroupTenders["TENDER_GIFT_CARD"]++;	
						}
						else //coupon
						{	
							/*not for cash upload
							//add drawer change tag
							var cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
							eval(cmd);
							var cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							*/
							//add csh_TenderCategory tags
							var cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+"Quantity = "+ qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+"Amount = "+drawerAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+"Change = "+ changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+"Excess = "+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							arrayGroupTenders["TENDER_GIFT_COUPON"]++;
						}
						break;
					}
					case "TENDER_FOREIGN_CURRENCY":
					{
						/*not for cash upload
						//add drawer change tag
						var cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						eval(cmd);
						var cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						*/
						//add csh_TenderCategory tags
						var cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+"Quantity = "+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+"Amount = "+drawerAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+"Change ="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+"Excess = "+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]++;
						break;
					}
					case "TENDER_CREDIT_SALES":
					{
						/*not for cash upload
						//add drawer change tag
						var cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						eval(cmd);
						var cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						*/
						
						cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+"Quantity = "+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+"Amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+"Change= "+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+"Excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
					
						arrayGroupTenders["TENDER_CREDIT_SALES"]++;
						break;
					}
					case "TENDER_OTHER_PAYMENT":
					{
						/*not for cash upload
						//add drawer change tag
						var cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						eval(cmd);
						var cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						*/	
						//if(Country !="DE")
						//{
							//add csh_TenderCategory tags
							var cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Quantity="+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Change ="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
						//}
						/*
						else
						{
							//add csh_TenderCategory tags
							var cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Quantity=0";
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Amount=0.00";
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Excess =0.00";
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Change=0.00";
							eval(cmd);
						}
						*/
						
						arrayGroupTenders["TENDER_OTHER_PAYMENT"]++;
						break;
					}
					default : 
							break;
				}
			}
			XMLCashRpt.csh_TenderElectronicPayment	= arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"];
			XMLCashRpt.csh_TenderCouponNo 	= arrayGroupTenders["TENDER_GIFT_COUPON"];
			XMLCashRpt.csh_TenderForeignCurrencyNo	= arrayGroupTenders["TENDER_FOREIGN_CURRENCY"];
			XMLCashRpt.csh_TenderCreditSaleNo	=	arrayGroupTenders["TENDER_CREDIT_SALES"];
			XMLCashRpt.csh_TenderOtherPaymentNo =	arrayGroupTenders["TENDER_OTHER_PAYMENT"];
			XMLCashRpt.csh_GCertRedeemNo =	arrayGroupTenders["TENDER_GIFT_CERT"];
			XMLCashRpt.csh_GCardRedeemNo =	arrayGroupTenders["TENDER_GIFT_CARD"];
			XMLCashRpt.csh_GCSoldNo =	arrGiftCardProdId.length;
			XMLCashRpt.csh_GCertSoldNo =	arrGiftCertProdId.length;
			/*
			XMLCashRpt.csh_GCSoldAQuantity=Number(mcCertASalesCount - mcCertASalesRefundCount);
			XMLCashRpt.csh_GCSoldAAmount=BigDec2Currency(mcCertASalesAmount.subtract(mcCertASalesRefundAmount));
			XMLCashRpt.csh_GCSoldBQuantity=Number(mcCertBSalesCount - mcCertBSalesRefundCount);
			XMLCashRpt.csh_GCSoldBAmount=BigDec2Currency(mcCertBSalesAmount.subtract(mcCertBSalesRefundAmount));
			*/
			XMLCashRpt.csh_ProductSalesTaxAmount=BigDec2Currency(totProductTaxAmount);
			XMLCashRpt.csh_NonProductSalesTaxAmount=BigDec2Currency(totNonProductTaxAmount);
			XMLCashRpt.csh_OtherTaxAmount=Nmb2Currency(0);	// ??
			XMLCashRpt.csh_AllNetSalesAmount=BigDec2Currency(totalnetSalesAmount);
			/*
			XMLCashRpt.csh_CouponAQuantity=Number(qtyTenderIdArray[COUPON_A]);
			XMLCashRpt.csh_CouponAAmount=BigDec2Currency(drawerAmountTenderIdArray[COUPON_A]);
			XMLCashRpt.csh_CouponBQuantity=Number(qtyTenderIdArray[COUPON_B]);
			XMLCashRpt.csh_CouponBAmount=BigDec2Currency(drawerAmountTenderIdArray[COUPON_B]);
			XMLCashRpt.csh_CouponCQuantity=Number(qtyTenderIdArray[COUPON_C]);
			XMLCashRpt.csh_CouponCAmount=BigDec2Currency(drawerAmountTenderIdArray[COUPON_C]);
			XMLCashRpt.csh_CouponDQuantity=Number(qtyTenderIdArray[COUPON_D]);
			XMLCashRpt.csh_CouponDAmount=BigDec2Currency(drawerAmountTenderIdArray[COUPON_D]);
			XMLCashRpt.csh_CouponEQuantity=Number(qtyTenderIdArray[COUPON_E]);
			XMLCashRpt.csh_CouponEAmount=BigDec2Currency(drawerAmountTenderIdArray[COUPON_E]);
			*/
			// we won't deal with it this time
			XMLCashRpt.csh_nonWWSCouponAQuantity=Number(0);
			XMLCashRpt.csh_nonWWSCouponAAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessAQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessAAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimAQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimAAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponBQuantity=Number(0);
			XMLCashRpt.csh_nonWWSCouponBAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessBQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessBAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimBQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimBAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponCQuantity=Number(0);
			XMLCashRpt.csh_nonWWSCouponCAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessCQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessCAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimCQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimCAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponDQuantity=Number(0);
			XMLCashRpt.csh_nonWWSCouponDAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessDQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessDAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimDQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimDAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponEQuantity=Number(0);
			XMLCashRpt.csh_nonWWSCouponEAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessEQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponExcessEAmount=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimEQuantity=Nmb2Currency(0);
			XMLCashRpt.csh_nonWWSCouponSkimEAmount=Nmb2Currency(0);

			XMLCashRpt.csh_DiscountSalesQuantity=Number(discountnodesCashTc);
			XMLCashRpt.csh_DiscountSalesAmount=BigDec2Currency(discountDiscount);
			XMLCashRpt.csh_DiscountTax = BigDec2Currency(discountDiscountTax); //not added in business componentsWeb

			XMLCashRpt.csh_DiscountSalesTax=BigDec2Currency(netSalesAmountDiscountTax);

			XMLCashRpt.csh_DiscountSalesCouponQuantity=Number(totalGiftCouponQty); //CouponsQtty);
			XMLCashRpt.csh_DiscountSalesCouponAmount=BigDec2Currency(totalGiftCouponAmount); //CouponsAmount);
			XMLCashRpt.csh_DiscountSalesCouponTax=BigDec2Currency(CouponsTax);
			/*
			XMLCashRpt.csh_GCARedeemQuantity=Number(qtyTenderIdArray[WSE_IN]);
			XMLCashRpt.csh_GCARedeemAmount=BigDec2Currency(drawerAmountTenderIdArray[WSE_IN]);
			XMLCashRpt.csh_GCARedeemExcess=BigDec2Currency(excessAmountTenderIdArray[WSE_IN]);
			XMLCashRpt.csh_GCBRedeemQuantity=Number(qtyTenderIdArray[REC_SALES]);
			XMLCashRpt.csh_GCBRedeemAmount=BigDec2Currency(drawerAmountTenderIdArray[REC_SALES]);
			XMLCashRpt.csh_GCBRedeemExcess=BigDec2Currency(excessAmountTenderIdArray[REC_SALES]);
			*/
			/*
			if(Country == "DE")
			{
				XMLCashRpt.csh_CreditSalesQuantity=Number(qtyTenderIdArray[WME_SALES]);
				XMLCashRpt.csh_CreditSalesAmount=BigDec2Currency(drawerAmountTenderIdArray[WME_SALES]);
			}
			else
			{
				//03.02.2009 OI false tender type
				XMLCashRpt.csh_CreditSalesQuantity=Number(0);
				XMLCashRpt.csh_CreditSalesAmount=BigDec2Currency(0);
			}
			*/
			XMLCashRpt.csh_NonProductSalesAmount=BigDec2Currency(totalNonProductSales);
			XMLCashRpt.csh_NonProductSalesTax=BigDec2Currency(totNonProductTaxAmount);

			XMLCashRpt.csh_NoTaxSalesQuantity=Number(netSalesTcTaxExempt+netSalesTcNoTax);
			XMLCashRpt.csh_GSTAmount=Nmb2Currency(0);	// Australian specific Report.c line 4533
			//XMLCashRpt.csh_NoTaxSalesAmount=BigDec2Currency(netSalesAmountNoTax + netSalesAmountTaxExempt +  netSalesAmountDiscountTaxExempt);
			var AuxBigDec=netSalesAmountNoTax;
			AuxBigDec=AuxBigDec.add( netSalesAmountTaxExempt);
			AuxBigDec=AuxBigDec.add( netSalesAmountDiscountTaxExempt);
			XMLCashRpt.csh_NoTaxSalesAmount=BigDec2Currency(AuxBigDec);
			XMLCashRpt.csh_PromoSalesQuantity=Number(promonodesCashTc);
			XMLCashRpt.csh_PromoSalesAmount=BigDec2Currency(promonodesCashnetAmount);
			XMLCashRpt.csh_PromoSalesTax=BigDec2Currency(promonodesCashTaxAmount);

			// Tax break calculations
			FormatByTaxChain(rootTaxTable, "csh_PromoTax_", nodeCashStatistics, "", "PROMO", "");
			FormatByTaxChain(rootTaxTable, "csh_EatInSalesBrack_", nodeCashStatistics, "EAT_IN", "SALE", "");
			FormatByTaxChain(rootTaxTable, "csh_TakeOutSalesBrack_", nodeCashStatistics, "TAKE_OUT", "SALE", "");
			FormatByTaxChain(rootTaxTable, "csh_OtherSalesBrack_", nodeCashStatistics, "OTHER", "SALE", "");
			FormatByTaxChain(rootTaxTable, "csh_RefundBrack_", nodeCashStatistics, "", "REFUND", "");
			FormatByTaxChain(rootTaxTable, "csh_OverringBrack_", nodeCashStatistics, "", "OVERRING", "");
			FormatByTaxChain(rootTaxTable, "csh_PromoBrack_", nodeCashStatistics, "", "PROMO", "");
			FormatByTaxChain(rootTaxTable, "csh_WasteBrack_", nodeCashStatistics, "", "WASTE", "");
			FormatByTaxChain(rootTaxTable, "csh_ManagerMealBrack_", nodeCashStatistics, "", "MANAGER", "");
			FormatByTaxChain(rootTaxTable, "csh_EmployeeMealBrack_", nodeCashStatistics, "", "CREW", "");
			FormatByTaxChain(rootTaxTable, "csh_EatInProductSalesBrack_", nodeCashStatistics, "EAT_IN", "SALE", "P");
			FormatByTaxChain(rootTaxTable, "csh_EatInNonProductSalesBrack_", nodeCashStatistics, "EAT_IN", "SALE", "NP");
			FormatByTaxChain(rootTaxTable, "csh_TakeOutProductSalesBrack_", nodeCashStatistics, "TAKE_OUT", "SALE", "P");
			FormatByTaxChain(rootTaxTable, "csh_TakeOutNonProductSalesBrack_", nodeCashStatistics, "TAKE_OUT", "SALE", "NP");
			FormatByTaxChain(rootTaxTable, "csh_OtherProductSalesBrack_", nodeCashStatistics, "OTHER", "SALE", "P");
			FormatByTaxChain(rootTaxTable, "csh_OtherNonProductSalesBrack_", nodeCashStatistics, "OTHER", "SALE", "NP");
			FormatByTaxChain(rootTaxTable, "csh_ManagerMealTotalBrack_", nodeCashStatistics, "", "MANAGER", "");	// is it equal to csh_ManagerMealBrack_ ?
			FormatByTaxChain(rootTaxTable, "csh_EmployeeMealTotalBrack_", nodeCashStatistics, "", "CREW", "");	// is it equal to csh_EmployeeMealBrack_ ?
			FormatByTaxChain(rootTaxTable, "csh_ProductPromoBrack_", nodeCashStatistics, "", "PROMO", "P");
			FormatByTaxChain(rootTaxTable, "csh_NonProductPromoBrack_", nodeCashStatistics, "", "PROMO", "NP");
			FormatByTaxChain(rootTaxTable, "csh_ProductEmployeeMealBrack_", nodeCashStatistics, "", "CREW", "P");
			FormatByTaxChain(rootTaxTable, "csh_NonProductEmployeeMealBrack_", nodeCashStatistics, "", "CREW", "NP");
			FormatByTaxChain(rootTaxTable, "csh_ProductManagerMealBrack_", nodeCashStatistics, "", "MANAGER", "P");
			FormatByTaxChain(rootTaxTable, "csh_NonProductManagerMealBrack_", nodeCashStatistics, "", "MANAGER", "NP");
			FormatByTaxChain(rootTaxTable, "csh_ProductRefundBrack_", nodeCashStatistics, "", "REFUND", "P");
			FormatByTaxChain(rootTaxTable, "csh_NonProductRefundBrack_", nodeCashStatistics, "", "REFUND", "NP");
			FormatByTaxChain(rootTaxTable, "csh_ProductOverringBrack_", nodeCashStatistics, "", "OVERRING", "P");
			FormatByTaxChain(rootTaxTable, "csh_NonProductOverringBrack_", nodeCashStatistics, "", "OVERRING", "NP");
			
			//31.03.2009	OI	add Discount Tags for Tax calculation
			FormatByTaxChain(rootTaxTable, "csh_EatInProductDiscountBrack_", nodeCashStatistics, "EAT_IN", "DISCOUNT", "P");
			FormatByTaxChain(rootTaxTable, "csh_EatInNonProductDiscountBrack_", nodeCashStatistics, "EAT_IN", "DISCOUNT", "NP");
			FormatByTaxChain(rootTaxTable, "csh_TakeOutProductDiscountBrack_", nodeCashStatistics, "TAKE_OUT", "DISCOUNT", "P");
			FormatByTaxChain(rootTaxTable, "csh_TakeOutNonProductDiscountBrack_", nodeCashStatistics, "TAKE_OUT", "DISCOUNT", "NP");
			FormatByTaxChain(rootTaxTable, "csh_OtherProductDiscountBrack_", nodeCashStatistics, "OTHER", "DISCOUNT", "P");
			FormatByTaxChain(rootTaxTable, "csh_OtherNonProductDiscountBrack_", nodeCashStatistics, "OTHER", "DISCOUNT", "NP");	

			var elements = tempXML.elements();
			for(var i=0; i < elements.length(); i++) {
				//API.dbg(elements[i]);  //removed due to NVS-1671
				XMLCashRpt.appendChild(elements[i]);
			}

			XMLCashRpt.csh_TcEmpMeal=Number(crewnodesCashTc);
			XMLCashRpt.csh_TcMgrMeal=Number(managernodesCashTc);
			XMLCashRpt.csh_TcOverring=Number(overringsTC);
			XMLCashRpt.csh_TcRefund=Number(refundsTC);
			XMLCashRpt.csh_TcOtherReceipt=Number(nodeTransfersInOtherReceiptsCout);
			XMLCashRpt.csh_TcSkim=Number(nodeTransfersOutskimCount);
			XMLCashRpt.csh_TcWaste=Number(wastenodesCashTc);

			XMLCashRpt.csh_EmployeeMealQuantity=Number(crewnodesCashTc);
			XMLCashRpt.csh_EmployeeMealAmount=BigDec2Currency(crewDiscount);
			XMLCashRpt.csh_EmployeeMealTax=BigDec2Currency(crewTaxDiscount);
			XMLCashRpt.csh_ManagerMealQuantity=Number(managernodesCashTc);
			XMLCashRpt.csh_ManagerMealAmount=BigDec2Currency(managerDiscount);
			XMLCashRpt.csh_ManagerMealTax=BigDec2Currency(managerTaxDiscount);

			XMLCashRpt.csh_TRedsBeforeTotalQuantity=Number(tredItemsBeforeTl);
			XMLCashRpt.csh_TRedsBeforeTotalAmount=BigDec2Currency(tredAmtBeforeTl);
			XMLCashRpt.csh_TRedsAfterTotalQuantity=Number(tredsAfterTotal);
			XMLCashRpt.csh_TRedsAfterTotalAmount=BigDec2Currency(tredsAmtAfterTotal);
			XMLCashRpt.csh_TRedsBeforeTotalQuantity_CSO = Number(TRedBeforeTotalQuantityCSO);
			XMLCashRpt.csh_TRedsBeforeTotalAmount_CSO = BigDec2Currency(TRedBeforeTotalAmountCSO);
			XMLCashRpt.csh_TRedsAfterTotalQuantity_CSO = Number(TRedAfterTotalQuantityCSO);
			XMLCashRpt.csh_TRedsAfterTotalAmount_CSO = BigDec2Currency(TRedAfterTotalAmountCSO);

			XMLCashRpt.csh_EatInNetSalesQuantity=Number(eiTc);
			XMLCashRpt.csh_EatInNetSalesAmount=BigDec2Currency(eiNetAmount);
			XMLCashRpt.csh_EatInNetSalesTax=BigDec2Currency(eiTax);
			XMLCashRpt.csh_EatInNetSalesDiscQuantity=Number(EatInDiscountTc);
			XMLCashRpt.csh_EatInNetSalesDiscAmount=BigDec2Currency(EatInDiscountAmount);
			XMLCashRpt.csh_EatInNetSalesDiscTax=BigDec2Currency(EatInTaxDiscount);

			XMLCashRpt.csh_TakeOutNetSalesQuantity=Number(toTc);
			XMLCashRpt.csh_TakeOutNetSalesAmount=BigDec2Currency(toNetAmount);
			XMLCashRpt.csh_TakeOutNetSalesTax=BigDec2Currency(toTax);
			XMLCashRpt.csh_TakeOutNetSalesDiscQuantity=Number(TakeOutDiscountTc);
			XMLCashRpt.csh_TakeOutNetSalesDiscAmount=BigDec2Currency(TakeOutDiscountAmount);
			XMLCashRpt.csh_TakeOutNetSalesDiscTax=BigDec2Currency(TakeOutTaxDiscount);

			XMLCashRpt.csh_OtherNetSalesQuantity=Number(otherTc);
			XMLCashRpt.csh_OtherNetSalesAmount=BigDec2Currency(otherNetAmount);
			XMLCashRpt.csh_OtherNetSalesTax=BigDec2Currency(otherTax);
			XMLCashRpt.csh_OtherNetSalesDiscQuantity=Number(OtherDiscountTc);
			XMLCashRpt.csh_OtherNetSalesDiscAmount=BigDec2Currency(OtherDiscountAmount);
			XMLCashRpt.csh_OtherNetSalesDiscTax=BigDec2Currency(OtherTaxDiscount);

			// 3.x Report.c line 4776 to 4778
			XMLCashRpt.csh_SuggestiveSalesTryQuantity=Number(0);
			XMLCashRpt.csh_SuggestiveSalesQuantity=Number(0);
			XMLCashRpt.csh_SuggestiveSalesAmount=Nmb2Currency(0);

			// MYTODO
			/*
			XMLCashRpt.csh_ForeignCurrencyAAmount=Nmb2Currency(0);
			XMLCashRpt.csh_ForeignCurrencyBAmount=Nmb2Currency(0);
			XMLCashRpt.csh_ForeignCurrencyCAmount=Nmb2Currency(0);
			XMLCashRpt.csh_ForeignCurrencyDAmount=Nmb2Currency(0);
			XMLCashRpt.csh_ForeignCurrencyEAmount=Nmb2Currency(0);
			*/
			XMLCashRpt.csh_DTTransactionCount=Number(dtTc_P);
			XMLCashRpt.csh_DTTransactionCountNP=Number(dtTc_NP);
			XMLCashRpt.csh_DTTransactionCountAll=Number(dtTc);

			XMLCashRpt.csh_DTAllNetProductSalesAmount=BigDec2Currency(dtProductNetAmount);
			XMLCashRpt.csh_DTAllTaxProductSalesAmount=BigDec2Currency(dtProductTaxAmount);
			XMLCashRpt.csh_TotalSkimAmount=BigDec2Currency(nodeTransfersOutskimAmount);

			// 3.x Report.c line 4847 and 4847
			XMLCashRpt.csh_OfflineSalesDayCloseAmount=Nmb2Currency(0);
			XMLCashRpt.csh_OffLineSalesMonthCloseAmount=Nmb2Currency(0);
			/*
			// MYTODO
			if(Country =="DE")
			{
				XMLCashRpt.csh_OtherPaymentAQuantity=Number(0);
				XMLCashRpt.csh_OtherPaymentAAmount=Nmb2Currency(0);
			}
			else
			{	//03.02.2009 OI we need the other payment
				XMLCashRpt.csh_OtherPaymentAQuantity=Number(qtyTenderIdArray[WME_SALES]);
				XMLCashRpt.csh_OtherPaymentAAmount=BigDec2Currency(drawerAmountTenderIdArray[WME_SALES]);
			}
			
			XMLCashRpt.csh_OtherPaymentAExcess=Nmb2Currency(0);
						
			XMLCashRpt.csh_OtherPaymentBQuantity=Number(0);
			XMLCashRpt.csh_OtherPaymentBAmount=Nmb2Currency(0);
			XMLCashRpt.csh_OtherPaymentBExcess=Nmb2Currency(0);
			XMLCashRpt.csh_OtherPaymentCQuantity=Number(0);
			XMLCashRpt.csh_OtherPaymentCAmount=Nmb2Currency(0);
			XMLCashRpt.csh_OtherPaymentCExcess=Nmb2Currency(0);
			XMLCashRpt.csh_OtherPaymentDQuantity=Number(0);
			XMLCashRpt.csh_OtherPaymentDAmount=Nmb2Currency(0);
			XMLCashRpt.csh_OtherPaymentDExcess=Nmb2Currency(0);
			XMLCashRpt.csh_OtherPaymentEQuantity=Number(0);
			XMLCashRpt.csh_OtherPaymentEAmount=Nmb2Currency(0);
			XMLCashRpt.csh_OtherPaymentEExcess=Nmb2Currency(0);
			*/
			XMLCashRpt.csh_WTTransactionCount=Number(wtTc_P);
			XMLCashRpt.csh_WTTransactionCountNP=Number(wtTc_NP);
			XMLCashRpt.csh_WTTransactionCountAll=Number(wtTc);
			XMLCashRpt.csh_WTAllNetProductSalesAmount=BigDec2Currency(wtProductNetAmount);

			XMLCashRpt.csh_BreakfastSalesaQuantity=Number(breakFastDayMenunodesCashTc);
			XMLCashRpt.csh_BreakfastSalesAmount=BigDec2Currency(breakFastDayMenunodesCashnetAmount);
			/*			
			XMLCashRpt.csh_CashlessSalesTC=CashlessQty;
			XMLCashRpt.csh_CashlessSalesAmount=(CashlessAmount.add(grossCashlessRefundsAmount)).toString();
			*/
			XMLCashRpt.csh_GiftCouponSalesTc = totalGiftCouponQty;
			XMLCashRpt.csh_GiftCouponSalesAmount = totalGiftCouponAmount;
			XMLCashRpt.csh_GiftCouponSalesExcess = totalGiftCouponExcess;
			
			XMLCashRpt.csh_GiftCertificateSalesTc = totalGiftCertificateQty;
			XMLCashRpt.csh_GiftCertificateSalesAmount = totalGiftCertificateAmount;
			XMLCashRpt.csh_GiftCertificateSalesExcess = totalGiftCertificateExcess;
			
			XMLCashRpt.csh_GiftCardSalesTc = totalGiftCardQty;
			XMLCashRpt.csh_GiftCardSalesAmount = totalGiftCardAmount;
			XMLCashRpt.csh_GiftCardSalesExcess = totalGiftCardExcess;
			
			XMLCashRpt.csh_OtherPaymentSalesTc = totalOtherPaymentQty;
			XMLCashRpt.csh_OtherPaymentSalesAmount = totalOtherPaymentAmount;
			XMLCashRpt.csh_OtherPaymentSalesExcess = totalOtherPaymentExcess;
			// tax table
			var taxTable = rootTaxTable.TaxTable;
			var taxTableSize = taxTable.length();

			if(Country =="DE")
			{
				for(var iCount=0; iCount<taxTableSize; iCount ++) {
					var cmd;
					var evaluate;
					var taxId = Number(taxTable[iCount].TaxType);
					var baseTaxAmount_TaxChain;
					var taxAmount_TaxChain;

					if(false==bConsolidated) {
						baseTaxAmount_TaxChain = root.CashTotals.Cash.Tax.(@id==taxId).@baseTaxAmount;
						taxAmount_TaxChain = root.CashTotals.Cash.Tax.(@id==taxId).@taxAmount;
					}
					else {
						baseTaxAmount_TaxChain = rootCash.CashTotals.Cash.Tax.(@id==taxId).@baseTaxAmount;
						taxAmount_TaxChain = rootCash.CashTotals.Cash.Tax.(@id==taxId).@taxAmount;
					}

					var taxIdFmt = API.formatNumber(Number(iCount+1), "00", 2);
					//var taxIdFmt = API.formatNumber(Number(taxId), "00", 2);

					cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRateId)";
					evaluate = eval(cmd);
					cmd = "XMLCashRpt.csh_TaxRate" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRate)";
					evaluate = eval(cmd);
					cmd = "XMLCashRpt.csh_TaxBasis" + taxIdFmt + "=" + Str2Currency(baseTaxAmount_TaxChain);
					evaluate = eval(cmd);
					cmd = "XMLCashRpt.csh_Tax" + taxIdFmt + "=" + Str2Currency(taxAmount_TaxChain);
					evaluate = eval(cmd);
				 }
			}
			
			else
			{
				//16.01.2008 OI we need tags for all tax types from id 1 to 15 and not only implemented.
				for(var iTCount=1; iTCount<16; iTCount++)
				{
					var boolActive = false;
					var taxIdFmt = API.formatNumber(Number(iTCount), "00", 2);
					var cmd;
					
					for(var iCount=0; iCount<taxTableSize; iCount ++) {
						var evaluate;
						var taxId = Number(taxTable[iCount].TaxType);
						var baseTaxAmount_TaxChain;
						var taxAmount_TaxChain;

						if(taxId == iTCount)
						{
							boolActive = true;
							if(false==bConsolidated) {
								baseTaxAmount_TaxChain = root.CashTotals.Cash.Tax.(@id==taxId).@baseTaxAmount;
								taxAmount_TaxChain = root.CashTotals.Cash.Tax.(@id==taxId).@taxAmount;
							}
							else {
								baseTaxAmount_TaxChain = rootCash.CashTotals.Cash.Tax.(@id==taxId).@baseTaxAmount;
								taxAmount_TaxChain = rootCash.CashTotals.Cash.Tax.(@id==taxId).@taxAmount;
							}

							//var taxIdFmt = API.formatNumber(Number(iCount+1), "00", 2);
							//var taxIdFmt = API.formatNumber(Number(taxId), "00", 2);

							cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRateId)";
							evaluate = eval(cmd);
							cmd = "XMLCashRpt.csh_TaxRate" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRate)";
							evaluate = eval(cmd);
							/*
							//06.02.2009 OI correction for GiftCertificates Sold
							if(iCount == 0)
							{
								baseTaxAmount_TaxChain= baseTaxAmount_TaxChain - (mcCertSalesAmount-mcCertSalesRefundAmount); //(mcCertBSalesAmount - mcCertBSalesRefundAmount) - (mcCertASalesAmount - mcCertASalesRefundAmount);
							}
							*/
							cmd = "XMLCashRpt.csh_TaxBasis" + taxIdFmt + "=" + Str2Currency(baseTaxAmount_TaxChain);
							evaluate = eval(cmd);
							cmd = "XMLCashRpt.csh_Tax" + taxIdFmt + "=" + Str2Currency(taxAmount_TaxChain);
							evaluate = eval(cmd);
							break;
						}	
					}
				 }

				 if(boolActive == false)
				 {
				 	cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt + "=Number(" + iTCount + ")";
					evaluate = eval(cmd);
					cmd = "XMLCashRpt.csh_TaxRate" + taxIdFmt + "=Number(0)";
					evaluate = eval(cmd);
					cmd = "XMLCashRpt.csh_TaxBasis" + taxIdFmt + "= 0.00";
					evaluate = eval(cmd);
					cmd = "XMLCashRpt.csh_Tax" + taxIdFmt + "= 0.00";
					evaluate = eval(cmd);
				 }
				 
			}

			// PLE-168 - must get consolidated  = group multiple entry for the same tender 
			if(nodeTenders != null) {
				var nodesTender = nodeTenders.Tender;
				var nodesTenderSize = nodesTender.length();
				var iLoop;
				for(var iIndex = 0; iIndex < nodesTenderSize; iIndex++) {
					// look for tender id in previous
					for(iLoop = 0; iLoop < iIndex; iLoop++) {
						if(nodesTender[iIndex].@id==nodesTender[iLoop].@id) {
							// already counted
							break;
						}
					}
					if(iLoop >= iIndex) {
						// not counted before
						var resp=<csh_Tender/>;
						var nodeTender = nodesTender[iIndex];	
					    var tcTenderId = getNumberAttribute(nodeTender, "id");
					    var tenderName = rootCash.TenderTable.TenderType.(@id==nodeTender.@id).@name;
						resp.csh_TenderName=tenderName.toString();
						resp.csh_TenderCategory = rootCash.TenderTable.TenderType.(@id==nodeTender.@id).@category.toString();
						resp.csh_TenderId=tcTenderId;
						resp.csh_TenderAmount=BigDec2Currency(drawerAmountTenderIdArray[tcTenderId]);
						resp.csh_TenderQty=Number(qtyTenderIdArray[tcTenderId]);
						/* add in version 6.1.3
						//resp.csh_TenderCashoutAmount=BigDec2Currency(amountCashout[tcTenderId]);
						//resp.csh_TenderCashoutQty=Number(qtyCashout[tcTenderId]);
						//resp.csh_TenderRefundAmount=BigDec2Currency(refundCashout[tcTenderId]);
						//resp.csh_TenderRefundQty=Number(qtyRefund[tcTenderId]);
						*/
						XMLCashRpt.appendChild(resp);
					}
				}
			}
			
         API.dbg ("ExecRptIntCashConsolidated END");                  
		}

		function ExecRptCashConsolidated()
		{
			// generate the XML output
			XMLCashRpt = new XML("<XMLCashRpt/>");

			XMLCashRpt.Manager.@value=managerId;
			XMLCashRpt.CashierReport.@value=iReportNumber;
			XMLCashRpt.CashierID.@value=cashierId;
			XMLCashRpt.Cashier.@value=API.setOnRight(cashierName, 19);
			XMLCashRpt.InitialFloat.@value=initialFloat.toString();
			XMLCashRpt.AdditionalFloat.@tc=nodeAdditionalFloatCount;
			XMLCashRpt.AdditionalFloat.@amount=nodeAdditionalFloatAmount;
			XMLCashRpt.Opentime.@value=cashierOpenTime;
			XMLCashRpt.Closetime.@value=cashierCloseTime;
			XMLCashRpt.Closereading.@value=closingReading.toString();
			XMLCashRpt.Openingreading.@value=openingReading.toString();
			XMLCashRpt.DIFFERENCE.@value=difference;
			XMLCashRpt.Overring.@tc=overringsTC;
			XMLCashRpt.Overring.@amount=overringsAmount.toString();
			XMLCashRpt.CashRefunds.@tc=totTcCashRefunds;
			XMLCashRpt.CashRefunds.@amount=totAmountCashRefunds.toString();
			var grossCashlessRefundsAmount = (cashlessRefundsAmount.add(cashlessRefundsTaxAmount)).toString();
			XMLCashRpt.CashlessRefunds.@tc=cashlessRefundsTC;
			XMLCashRpt.CashlessRefunds.@amount=grossCashlessRefundsAmount.toString();
			XMLCashRpt.OtherReceipts.@tc=nodeTransfersInOtherReceiptsCout;
			XMLCashRpt.OtherReceipts.@amount=nodeTransfersInOtherReceiptsAmount.toString();
			XMLCashRpt.GiftCertSold.@tc=mcCertSalesCount - mcCertSalesRefundCount;
			XMLCashRpt.GiftCertSold.@amount=(mcCertSalesAmount.subtract(mcCertSalesRefundAmount)).toString();
			XMLCashRpt.GiftCardSold.@tc=mcCardSalesCount - mcCardSalesRefundCount;
			XMLCashRpt.GiftCardSold.@amount=(mcCardSalesAmount.subtract(mcCardSalesRefundAmount)).toString();
			
			//giftcert
			for(var i =0; i< arrGiftCertProdId.length;i++)
			{
				var j= i+1;
				var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@prodId ="+arrGiftCertProdId[i];
				eval(cmd);
				cmd = "XMLCashRpt.GiftCert"+j+"Sold.@tc ="+arrGiftCertSoldQty[i]+"-"+arrGiftCertRefQty[i];
				eval(cmd);
				cmd = "XMLCashRpt.GiftCert"+j+"Sold.@amount ="+arrGiftCertSoldAmt[i]+"-"+arrGiftCertRefAmt[i];
				eval(cmd);
				//cmd = "XMLCashRpt.GiftCert"+j+"Sold.@refundTc ="+arrGiftCertRefQty[i];
				//eval(cmd);
				//cmd = "XMLCashRpt.GiftCert"+j+"Sold.@refundAmount ="+arrGiftCertRefAmt[i];
				//eval(cmd);
				
				/*not for drawer change
				cmd = "XMLCashRpt.csh_GiftCert"+j+"ProductId ="+arrGiftCertProdId[i];
				eval(cmd);
				cmd = "XMLCashRpt.csh_GiftCert"+j+"Quantity ="+arrGiftCertSoldQty[i]+"-"+arrGiftCertRefQty[i];
				eval(cmd);
				cmd = "XMLCashRpt.csh_GiftCert"+j+"Sold ="+arrGiftCertSoldAmt[i]+"-"+arrGiftCertRefAmt[i];
				eval(cmd);
				//cmd = "XMLCashRpt.csh_GiftCert"+j+"refundQuantity ="+arrGiftCertRefQty[i];
				//eval(cmd);
				//cmd = "XMLCashRpt.csh_GiftCert"+j+"refundAmount ="+arrGiftCertRefAmt[i];
				//eval(cmd);	
*/				
			}
			//giftcard
			for(var i=0; i< arrGiftCardProdId.length; i++)
			{
				var j= i+1;
				var cmd = "XMLCashRpt.GiftCard"+j+"Sold.@prodId ="+arrGiftCardProdId[i];
				eval(cmd);
				cmd = "XMLCashRpt.GiftCard"+j+"Sold.@tc ="+arrGiftCardSoldQty[i]+"-"+arrGiftCardRefQty[i];
				eval(cmd);
				cmd = "XMLCashRpt.GiftCard"+j+"Sold.@amount ="+arrGiftCardSoldAmt[i]+"-"+arrGiftCardRefAmt[i];
				eval(cmd);
				//cmd = "XMLCashRpt.GiftCard"+j+"Sold.@refundTc ="+arrGiftCardRefQty[i];
				//eval(cmd);
				//cmd = "XMLCashRpt.GiftCard"+j+"Sold.@refundAmount ="+arrGiftCardRefAmt[i];
				//eval(cmd);
				
				/*not for drawer change
				cmd = "XMLCashRpt.csh_GiftCard"+j+"ProductId ="+arrGiftCardProdId[i];
				eval(cmd);
				cmd = "XMLCashRpt.csh_GiftCard"+j+"Quantity ="+arrGiftCardSoldQty[i]+"-"+arrGiftCardRefQty[i];;
				eval(cmd);
				cmd = "XMLCashRpt.csh_GiftCard"+j+"Sold ="+arrGiftCardSoldAmt[i]+"-"+arrGiftCardRefAmt[i];
				eval(cmd);
				//cmd = "XMLCashRpt.csh_GiftCard"+j+"refundQuantity ="+arrGiftCardRefQty[i];
				//eval(cmd);
				//cmd = "XMLCashRpt.csh_GiftCard"+j+"refundAmount ="+arrGiftCardRefAmt[i];
				//eval(cmd);
				*/
			}
			/*
			XMLCashRpt.GiftCertASold.@tc=mcCertASalesCount - mcCertASalesRefundCount;
			XMLCashRpt.GiftCertASold.@amount=(mcCertASalesAmount.subtract(mcCertASalesRefundAmount)).toString();
			XMLCashRpt.GiftCertBSold.@tc=mcCertBSalesCount - mcCertBSalesRefundCount;
			XMLCashRpt.GiftCertBSold.@amount=(mcCertBSalesAmount.subtract(mcCertBSalesRefundAmount)).toString();
			*/
			XMLCashRpt.GROSSSALES.@value=grossSalesAmount.toString();	
			//XMLCashRpt.GROSSSALES.@value=grossSalesAmount.toString();	
			XMLCashRpt.NOTAXSALES.@tc=netSalesTcTaxExempt+netSalesTcNoTax;
			AuxBigDec=netSalesAmountNoTax.add(netSalesAmountTaxExempt);
			AuxBigDec=AuxBigDec.add(netSalesAmountDiscountTaxExempt);
			XMLCashRpt.NOTAXSALES.@value=AuxBigDec.toString();
			XMLCashRpt.NONTAXABLESALES.@value= netSalesAmountNeverTax.toString();
			//var taxSales = totalnetSalesAmount;//.subtract(netSalesAmountNeverTax);	// DES-167
			//taxSales=taxSales.subtract(new BigDecimal(XMLCashRpt.NOTAXSALES.@value));
			//28.01.2009	OI add it from reports.nps to get the same value.
			var taxSales = grossSalesAmount - Number(XMLCashRpt.NOTAXSALES.@value);  //- netSalesAmountNeverTax
			if(Country == "DE")
			{
				taxSales = totalnetSalesAmount;
				taxSales = taxSales.subtract(new BigDecimal(XMLCashRpt.NOTAXSALES.@value));
			}
			XMLCashRpt.TAXABLESALES.@tc=totTaxAmount;
			XMLCashRpt.TAXABLESALES.@amount=taxSales.toString();
			var totalProductSales	= totalnetSalesAmount.subtract(totalNonProductSales);
			XMLCashRpt.TOTALNETSALES.@value=totalnetSalesAmount.toString();
			//04.02.2009 OI we need a tax tag for cash report
			XMLCashRpt.TOTALTAX.@value=taxAmount;
			XMLCashRpt.NonProductSales.@value=totalNonProductSales.toString();
			XMLCashRpt.NonProductTax.@value=totNonProductTaxAmount;
			XMLCashRpt.ProductSales.@value=totalProductSales.toString();
			XMLCashRpt.ProductTax.@value=totProductTaxAmount;
			/*
			XMLCashRpt.GiftCardRedeem.@tc=qtyTenderIdArray[GIFT_CARD];
			XMLCashRpt.GiftCardRedeem.@amount=drawerAmountTenderIdArray[GIFT_CARD].toString();
			*/
			XMLCashRpt.CashlessSales.@tc=CashlessQty;
			XMLCashRpt.CashlessSales.@amount=(CashlessAmount.add(grossCashlessRefundsAmount)).toString();
			
			XMLCashRpt.GiftCouponSales.@tc = totalGiftCouponQty;
			XMLCashRpt.GiftCouponSales.@amount = totalGiftCouponAmount;
			XMLCashRpt.GiftCouponSales.@excess = totalGiftCouponExcess;
			
			XMLCashRpt.GiftCertificateSales.@tc = totalGiftCertificateQty;
			XMLCashRpt.GiftCertificateSales.@amount = totalGiftCertificateAmount;
			XMLCashRpt.GiftCertificateSales.@excess = totalGiftCertificateExcess;
			
			XMLCashRpt.GiftCardSales.@tc = totalGiftCardQty;
			XMLCashRpt.GiftCardSales.@amount = totalGiftCardAmount;
			XMLCashRpt.GiftCardSales.@excess = totalGiftCardExcess;
			
			XMLCashRpt.OtherPaymentSales.@tc = totalOtherPaymentQty;
			XMLCashRpt.OtherPaymentSales.@amount = totalOtherPaymentAmount;
			XMLCashRpt.OtherPaymentSales.@excess = totalOtherPaymentExcess;
			/*
			//03.02.2009 OI new Tags for e-cash
			XMLCashRpt.CashlessPaymentA.@tc=qtyTenderIdArray[E_CASH_A];
			XMLCashRpt.CashlessPaymentA.@amount=drawerAmountTenderIdArray[E_CASH_A].toString()
			XMLCashRpt.CashlessPaymentB.@tc=qtyTenderIdArray[E_CASH_B];
			XMLCashRpt.CashlessPaymentB.@amount=drawerAmountTenderIdArray[E_CASH_B].toString()
			XMLCashRpt.CashlessPaymentC.@tc=qtyTenderIdArray[E_CASH_C];
			XMLCashRpt.CashlessPaymentC.@amount=drawerAmountTenderIdArray[E_CASH_C].toString()
			XMLCashRpt.CashlessPaymentD.@tc=qtyTenderIdArray[E_CASH_D];
			XMLCashRpt.CashlessPaymentD.@amount=drawerAmountTenderIdArray[E_CASH_D].toString()
			XMLCashRpt.CashlessPaymentE.@tc=qtyTenderIdArray[E_CASH_E];
			XMLCashRpt.CashlessPaymentE.@amount=drawerAmountTenderIdArray[E_CASH_E].toString()
			*/
			XMLCashRpt.CashTransferIn.@tc=nodeTransfersInTransferCout;
			XMLCashRpt.CashTransferIn.@amount=nodeTransfersInTransferAmount.toString();
			XMLCashRpt.CashTransferOut.@tc=nodeTransfersOutTransferCout;
			XMLCashRpt.CashTransferOut.@amount=nodeTransfersOutTransferAmount.toString();

			XMLCashRpt.OtherCardsTransferIn.@tc=nodeTransfersInOtherCardsCout;
			XMLCashRpt.OtherCardsTransferIn.@amount=nodeTransfersInOtherCardsAmount.toString();
			XMLCashRpt.OtherCardsTransferOut.@tc=nodeTransfersOutOtherCardsCout;
			XMLCashRpt.OtherCardsTransferOut.@amount=nodeTransfersOutOtherCardsAmount.toString();
			
			/* this is other payment
			XMLCashRpt.BillableSales.@tc=qtyTenderIdArray[WME_SALES];
			XMLCashRpt.BillableSales.@amount=drawerAmountTenderIdArray[WME_SALES];
			//09.10.2008 OI add excess to BillableSales Teg
			XMLCashRpt.BillableSales.@excess=excessAmountTenderIdArray[WME_SALES];
			*/
			/*
			XMLCashRpt.GiftCertif.@tc=qtyTenderIdArray[WSE_IN];
			XMLCashRpt.GiftCertif.@amount=drawerAmountTenderIdArray[WSE_IN].toString();
			*/
			/* this is for other payment
			XMLCashRpt.GiftBook.@tc=qtyTenderIdArray[REC_SALES];
			XMLCashRpt.GiftBook.@amount=drawerAmountTenderIdArray[REC_SALES].toString();
			*/
			// Fault Gift Card Redeem,Cashless Sales and Billable Sales
			var computerCash	= difference.subtract(overringsAmount);
			computerCash		= computerCash.subtract(totAmountCashRefunds);
					
			//computerCash		= computerCash.subtract(drawerAmountTenderIdArray[GIFT_CARD]);	//09.10.2008 OI comment out
			computerCash		= computerCash.subtract(grossCashlessRefundsAmount);
			computerCash		= computerCash.add(nodeTransfersInTransferAmount);
			computerCash		= computerCash.subtract(nodeTransfersOutOtherCardsAmount);
			computerCash		= computerCash.add(nodeTransfersInOtherCardsAmount);
			computerCash		= computerCash.subtract(nodeTransfersOutTransferAmount);
			//computerCash		= computerCash.subtract(drawerAmountTenderIdArray[WME_SALES]);	//09.10.2008 OI comment out
			//computerCash		= computerCash.subtract(drawerAmountTenderIdArray[WSE_IN]);		//09.10.2008 OI comment out
			//computerCash		= computerCash.subtract(drawerAmountTenderIdArray[REC_SALES]);	//09.10.2008 OI comment out
			
		
			   computerCash		= computerCash.subtract(totalGiftCouponAmount);
			   computerCash		= computerCash.subtract(totalGiftCertificateAmount);
			   computerCash		= computerCash.subtract(totalGiftCardAmount);
			   computerCash		= computerCash.subtract(totalOtherPaymentAmount);
			   computerCash		= computerCash.add(totalGiftCouponExcess);
			   computerCash		= computerCash.add(totalGiftCertificateExcess);
			   computerCash		= computerCash.add(totalGiftCardExcess);
			   computerCash		= computerCash.add(totalOtherPaymentExcess);
			   /*
			   computerCash		= computerCash.subtract(drawerAmountTenderIdArray[GIFT_CARD]);
			   computerCash		= computerCash.subtract(drawerAmountTenderIdArray[WME_SALES]);
			   computerCash		= computerCash.subtract(drawerAmountTenderIdArray[WSE_IN]);	
			   computerCash		= computerCash.subtract(drawerAmountTenderIdArray[REC_SALES]);  
			   */
		
			//28.01.2009 OI substract the e-cash to get the right value
			computerCash		=computerCash.subtract(CashlessAmount);
			//28.01.2009 OI	computerCashBD is never used
			//computerCashBD		=computerCash.subtract(CashlessAmount);

			//UberEats Others
			computerCash -= deliveryBillableSaleAmt;

			XMLCashRpt.COMPUTEDCASH.@value=computerCash.toString();
			XMLCashRpt.CashSkims.@value=nodeTransfersOutskimAmount.toString();
			//OI 27.01.2010 add for 6.1.17
			XMLCashRpt.ChangeRounding.@value=trim(API.formatNumber(sumChangeRounding,".00",50));
			XMLCashRpt.ChangeRounding.@tc=qtyChangeRounding;
			
			var expectedCash = computerCash.add(initialFloat);
			
			//27.01.2010 add for 6.1.17
			expectedCash = expectedCash.subtract(sumChangeRounding);
			expectedCash = 	expectedCash.add(nodeAdditionalFloatAmount);
			
			expectedCash=expectedCash.subtract(nodeTransfersOutskimAmount);
			XMLCashRpt.Expectedcash.@value=expectedCash.toString();
			/*
			XMLCashRpt.CashCashUS.@tc=tcTenderIdArray[CASH_US];
			XMLCashRpt.CashCashUS.@amount=(drawerAmountTenderIdArray[CASH_US].subtract(initialFloat)).toString();
			XMLCashRpt.CouponA.@tc=qtyTenderIdArray[COUPON_A];
			XMLCashRpt.CouponA.@amount=drawerAmountTenderIdArray[COUPON_A].toString();
			XMLCashRpt.CouponB.@tc=qtyTenderIdArray[COUPON_B];
			XMLCashRpt.CouponB.@amount=drawerAmountTenderIdArray[COUPON_B].toString();
			XMLCashRpt.CouponC.@tc=qtyTenderIdArray[COUPON_C];
			XMLCashRpt.CouponC.@amount=drawerAmountTenderIdArray[COUPON_C].toString();
			XMLCashRpt.CouponD.@tc=qtyTenderIdArray[COUPON_D];
			XMLCashRpt.CouponD.@amount=drawerAmountTenderIdArray[COUPON_D].toString();
			XMLCashRpt.CouponE.@tc=qtyTenderIdArray[COUPON_E];
			XMLCashRpt.CouponE.@amount=drawerAmountTenderIdArray[COUPON_E].toString();
			*/
			if(-1!=reportType) {
			 	// Get tender information
				/*<Tender id="0" tc="1" qty="1" 
				initialFloat="0.00" drawerAmount="2.00" changeGivenCount="0" changeGivenAmount="0.00" 
				CashOutCount="0" CashOutAmount="0.00" refundCount="0" refundAmount="0.00" changeDifferenceCount="0" 
				changeDifferenceAmount="0.00" changeRoundingCount="0" changeRounding="0.00" excessCount="0" excessAmount="0.00"*/
				
				var nodesTender = nodeTenders.Tender;
				var nodesTenderSize = nodesTender.length();
				var iLoop;
				for(var iIndex = 0; iIndex < nodesTenderSize; iIndex++) {
					// look for tender id in previous
					for(iLoop = 0; iLoop < iIndex; iLoop++) {
						if(nodesTender[iIndex].@id==nodesTender[iLoop].@id) {
							// already counted
							break;
						}
					}
					if(iLoop >= iIndex) {
						// not counted before do the total
						resp=<Tender />;
						resp.@id = nodesTender[iIndex].@id; 
						resp.@tc = 0;
						resp.@qty = 0;
						resp.@initialFloat = 0;
						resp.@drawerAmount = 0;
						resp.@changeGivenCount = 0;
						resp.@changeGivenAmount = 0;
						resp.@CashOutCount = 0;
						resp.@refundCount = 0;
						resp.@refundAmount = 0;
						resp.@changeDifferenceCount = 0;
						resp.@changeDifferenceAmount = 0;
						resp.@changeRoundingCount = 0;
						resp.@changeRounding = 0;
						resp.@excessCount = 0;
						resp.@excessAmount = 0;
						for(iLoop = iIndex; iLoop < nodesTenderSize; iLoop++) {
							if(nodesTender[iIndex].@id==nodesTender[iLoop].@id)
							{
								resp.@tc =  Number(resp.@tc) + Number(nodesTender[iLoop].@tc);
								resp.@qty =  Number(resp.@qty) + Number(nodesTender[iLoop].@qty);
								resp.@initialFloat =  Number(resp.@initialFloat) + Number(nodesTender[iLoop].@initialFloat);
								resp.@drawerAmount =   Number(resp.@drawerAmount) + Number(nodesTender[iLoop].@drawerAmount);
								resp.@changeGivenCount =  Number(resp.@changeGivenCount) + Number(nodesTender[iLoop].@changeGivenCount);
								resp.@changeGivenAmount =  Number(resp.@changeGivenAmount) + Number(nodesTender[iLoop].@changeGivenAmount);
								resp.@CashOutCount =  Number(resp.@CashOutCount) + Number(nodesTender[iLoop].@CashOutCoun);
								resp.@CashOutAmount =  Number(resp.@CashOutAmount) + Number(nodesTender[iLoop].@CashOutAmount);
								resp.@refundCount =  Number(resp.@refundCount) + Number(nodesTender[iLoop].@refundCount);
								resp.@refundAmount =  Number(resp.@refundAmount) + Number(nodesTender[iLoop].@refundAmount);
								resp.@changeDifferenceCount =  Number(resp.@changeDifferenceCount) + Number(nodesTender[iLoop].@changeDifferenceCount);
								resp.@changeDifferenceAmount =  Number(resp.@changeDifferenceAmount) + Number(nodesTender[iLoop].@changeDifferenceAmount);
								resp.@changeRoundingCount =  Number(resp.@changeRoundingCount) + Number(nodesTender[iLoop].@changeRoundingCount);
								resp.@changeRounding =  Number(resp.@changeRounding) + Number(nodesTender[iLoop].@changeRounding);
								resp.@excessCount =  Number(resp.@excessCount) + Number(nodesTender[iLoop].@excessCount);
								resp.@excessAmount =  Number(resp.@excessAmount) + Number(nodesTender[iLoop].@excessAmount);
								
								//for foreign currency
								resp.@fInitialFloat =  Number(resp.@fInitialFloat) + Number(nodesTender[iLoop].@fInitialFloat);
								resp.@fDrawerAmount =   Number(resp.@fDrawerAmount) + Number(nodesTender[iLoop].@fDrawerAmount);
								resp.@fChangeGivenAmount =  Number(resp.@fChangeGivenAmount) + Number(nodesTender[iLoop].@fChangeGivenAmount);
								resp.@fCashOutAmount =  Number(resp.@fCashOutAmount) + Number(nodesTender[iLoop].@fCashOutAmount);
								resp.@fChangeDifferenceCount =  Number(resp.@fChangeDifferenceCount) + Number(nodesTender[iLoop].@fChangeDifferenceCount);
								resp.@fExcessAmount =  Number(resp.@fExcessAmount) + Number(nodesTender[iLoop].@fExcessAmount);
								
							}
						}
						XMLCashRpt.appendChild(resp);
					}
				}
	
				XMLCashRpt.chashTotals = nodeCash;
			}
			XMLCashRpt.Giftcardcashout.@tc=nodeCashOutTC;
			XMLCashRpt.Giftcardcashout.@amount=nodeCashOutAmount.toString();

			// OI 27.01.2010 add for 6.1.17
			XMLCashRpt.EFTcashout.@tc=nodeCashOutTC;
			XMLCashRpt.EFTcashout.@amount=nodeCashOutAmount;

			var storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"CashReport\").Parameter.(@name==\"totalSaleNetAmount\").@value";
			var posdbPath = "Configuration.(@imports==\"Store.wide\").Section.(@name==\"CashReport\").Parameter.(@name==\"totalSaleNetAmount\").@value";
			var netSaleAverage = getConfigValue(storedbPath , posdbPath);
			var div1;
			if(netSaleAverage == "true") //we do tha average by using the net sale
			{
				div1 = new BigDecimal(Number(totalnetSalesAmount));
			}	
			else	//default  gross price 		
			{
				div1 = new BigDecimal(Number(totalnetSalesAmount)+Number(taxAmount));
			}
			
			XMLCashRpt.TotalTCAC.@tc=totalTc -inProgressTC;
			
			var div2 = new BigDecimal(Number(XMLCashRpt.TotalTCAC.@tc));
			var unitPricePerTc	= (XMLCashRpt.TotalTCAC.@tc != 0) ? (div1.divide(div2,ROUND_MODE_PERCENT)) : 0; // Truncates value (ROUND_DOWN)			
			XMLCashRpt.TotalTCAC.@amount=unitPricePerTc.toString();

			XMLCashRpt.NetsalesDThru.@tc=dtTc;
			XMLCashRpt.NetsalesDThru.@amount=dtNetAmount.toString();
			XMLCashRpt.PercentDThru.@value=dtPercent;
			XMLCashRpt.Cars.@value=dtCars;
		
			XMLCashRpt.NetsalesWThru.@tc=wtTc;
			XMLCashRpt.NetsalesWThru.@amount=wtNetAmount.toString();
			XMLCashRpt.PercentWThru.@value=wtPercent;
			
			XMLCashRpt.NetsalesBfast.@tc=breakFastDayMenunodesCashTc;
			XMLCashRpt.NetsalesBfast.@amount=breakFastDayMenunodesCashnetAmount.toString();
			XMLCashRpt.BreakfastPercent.@value=breakFastDayMenuPercent;
			XMLCashRpt.NetsalesEatIn.@tc=eiTc;
			XMLCashRpt.NetsalesEatIn.@amount=eiNetAmount.toString();
			XMLCashRpt.EatIntax.@value=eiTax;
			XMLCashRpt.NetsalesTakeOut.@tc=toTc;
			XMLCashRpt.NetsalesTakeOut.@amount=toNetAmount.toString();
			XMLCashRpt.TakeOuttax.@value=toTax;

			//UberEats Others
			//XMLCashRpt.NetsalesOther.@tc=otherTc;
			//XMLCashRpt.NetsalesOther.@amount=otherNetAmount.toString();
			//XMLCashRpt.Othertax.@value=otherTax;			

			XMLCashRpt.TakeOutPercent.@value=toPercent;
			XMLCashRpt.NetsalesGarden.@tc=otherTc;
			XMLCashRpt.NetsalesGarden.@amount=otherNetAmount.toString();
			XMLCashRpt.Gardentax.@tc=otherTax;
			XMLCashRpt.Waste.@tc=wastenodesCashTc;
			XMLCashRpt.Waste.@amount=wastenodesCashnetAmount.toString();
			XMLCashRpt.PROMO.@tc=promonodesCashTc;
			XMLCashRpt.PROMO.@items=promoItems;
			if(Country =="UK" || Country =="IE")
			{
				XMLCashRpt.PROMO.@amount=new BigDecimal(promonodesCashnetAmount);
			}
			else
			{
				XMLCashRpt.PROMO.@amount=(new BigDecimal(promonodesCashnetAmount)).add(new BigDecimal(promonodesCashTaxAmount));
			}
			XMLCashRpt.EmpMealdiscount.@tc=crewnodesCashTc;
			if(Country == "DE" || Country =="UK" || Country =="IE" || Country == "PT") //PT required to be net
			{
				XMLCashRpt.EmpMealdiscount.@amount=new BigDecimal(crewDiscount);
			}
			else
			{
				XMLCashRpt.EmpMealdiscount.@amount=(new BigDecimal(crewDiscount)).add(new BigDecimal(crewTaxDiscount));
			}
			XMLCashRpt.MgrMealdiscount.@tc=managernodesCashTc;
			if(Country == "DE" || Country == "UK" || Country =="IE" || Country == "PT") //PT required to be net
				XMLCashRpt.MgrMealdiscount.@amount=new BigDecimal(managerDiscount);
			else
			{
				XMLCashRpt.MgrMealdiscount.@amount=(new BigDecimal(managerDiscount)).add(new BigDecimal(managerTaxDiscount));
			}
			XMLCashRpt.Amountdiscount.@tc=discountnodesCashTc.toString();
			XMLCashRpt.Amountdiscount.@amount=discountDiscount.toString();
			XMLCashRpt.Amountdiscount.@tax = discountDiscountTax.toString(); //not added in businesscomponentsWeb

			XMLCashRpt.RedBeforeTotal.@tc=tredItemsBeforeTl;
			XMLCashRpt.RedBeforeTotal.@amount=tredAmtBeforeTl;
			XMLCashRpt.AvgRedBeforeTotal.@value=tredAverageBeforeTl;
			XMLCashRpt.RedAfterTotal.@tc=tredsAfterTotal;//tredItemsAfterTl;
			XMLCashRpt.RedAfterTotal.@amount=tredsAmtAfterTotal;
			XMLCashRpt.AvgRedAfterTotal.@value=tredAverageAfterTl;
			XMLCashRpt.Draweropens.@value=unauthDrawerOpenings;
			
			/*add individual tags for all gift cerificate sold*/
					
			/* add individual tags for every tender*/
			//counters for number of tenders per category
			var arrayGroupTenders = new Array();
			arrayGroupTenders["TENDER_NATIVE"] = 1;
			arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"] = 1;
			arrayGroupTenders["TENDER_GIFT_COUPON"] = 1;
			arrayGroupTenders["TENDER_GIFT_CERT"] = 1;
			arrayGroupTenders["TENDER_GIFT_CARD"] = 1;
			arrayGroupTenders["TENDER_FOREIGN_CURRENCY"] = 1;
			arrayGroupTenders["TENDER_CREDIT_SALES"] = 1;
			arrayGroupTenders["TENDER_OTHER_PAYMENT"] = 1;
			arrayGroupTenders["TENDER_BOG"] = 1;
			
			var nodesTender = rootCash.TenderTable.TenderType; //take all tenders defined in the store
			var nodesTenderSize = nodesTender.length();
			for(var i = 0; i < nodesTenderSize; i++) 
			{
				var nodeTender = nodesTender[i];
				var tenderCategory = nodeTender.@category;
				switch (tenderCategory.toString())
				{
					case "TENDER_NATIVE":
					{
						//add drawer change tag
						XMLCashRpt.NativeCurrency.@tc=qtyTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.NativeCurrency.@amount=drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						XMLCashRpt.NativeCurrency.@excess= excessAmountTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.NativeCurrency.@change= changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						/*not for drawer change
						//add csh_TenderCategory tags
						XMLCashRpt.csh_NativeCurrencyQuantity = qtyTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.csh_NativeCurrencyAmount = drawerAmountTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.csh_NativeCurrencyChange = changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						XMLCashRpt.csh_NativeCurrencyExcess = excessAmountTenderIdArray[Number(nodeTender.@id)];
						*/
						arrayGroupTenders["TENDER_NATIVE"]++;
						break;
					}
					case "TENDER_ELECTRONIC_PAYMENT":
					{
						//add drawer change tag
						var cmd = "XMLCashRpt.CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						eval(cmd);
						var cmd = "XMLCashRpt.CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						/*not for drawer change
						//add csh_TenderCategory tags
						var cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+"Quantity ="+ qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+"Amount ="+ drawerAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+"Change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CashlessPayment"+arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]+"Excess ="+ excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						*/
						arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"]++;
						break;
					}
					case "TENDER_GIFT_COUPON":
					{
						//get the tender legacy  , this will be disponible in cash xml starting with 6.1.17
						var storedbPath = "StoreDB.TenderTypes.TenderType.(TenderId==\""+nodeTender.@id+"\").GiftCoupon.LegacyId";
						var type = getConfigValue(storedbPath , "");
	
						if(type.toString() =="GIFTCERTIFICATE")
						{
							var cmd = "XMLCashRpt.GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"Redeem.@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"Redeem.@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
							eval(cmd);
							var cmd = "XMLCashRpt.GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"Redeem.@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"Redeem.@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							/*not for drawer change
							//add csh_TenderCategory tags
							cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"RedeemQuantity = "+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"RedeemAmount="+drawerAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"RedeemChange= "+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GC"+arrayGroupTenders["TENDER_GIFT_CERT"]+"RedeemExcess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							*/
							arrayGroupTenders["TENDER_GIFT_CERT"]++;	
						}
						else if (type.toString() =="GIFTCARD")
						{
							var cmd = "XMLCashRpt.GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"Redeem.@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"Redeem.@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
							eval(cmd);
							var cmd = "XMLCashRpt.GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"Redeem.@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"Redeem.@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							/*not for drawer change
							//add csh_TenderCategory tags
							cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"RedeemQuantity = "+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"RedeemAmount="+drawerAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"RedeemChange= "+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_GCard"+arrayGroupTenders["TENDER_GIFT_CARD"]+"RedeemExcess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							*/
							arrayGroupTenders["TENDER_GIFT_CARD"]++;	
						}
						else
						{
							//add drawer change tag
							var cmd = "XMLCashRpt.Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
							eval(cmd);
							var cmd = "XMLCashRpt.Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							var cmd = "XMLCashRpt.Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							/*not for drawer change
							//add csh_TenderCategory tags
							var cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+"Quantity = "+ qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+"Amount = "+drawerAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+"Change = "+ changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_Coupon"+arrayGroupTenders["TENDER_GIFT_COUPON"]+"Excess = "+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							*/
							arrayGroupTenders["TENDER_GIFT_COUPON"]++;
						}
						break;
					}
					case "TENDER_FOREIGN_CURRENCY":
					{
						//add drawer change tag
						var cmd = "XMLCashRpt.ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						eval(cmd);
						var cmd = "XMLCashRpt.ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						/*not for drawer change
						//add csh_TenderCategory tags
						var cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+"Quantity = "+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+"Amount = "+drawerAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+"Change ="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_ForeignCurrency"+arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]+"Excess = "+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						*/
						arrayGroupTenders["TENDER_FOREIGN_CURRENCY"]++;
						break;
					}
					case "TENDER_CREDIT_SALES":
					{
						//add drawer change tag
						var cmd = "XMLCashRpt.CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						eval(cmd);
						var cmd = "XMLCashRpt.CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						/*not for drawer change
						//add csh_TenderCategory tags
						
						cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+"Quantity = "+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+"Amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+"Change= "+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						cmd = "XMLCashRpt.csh_CreditSale"+arrayGroupTenders["TENDER_CREDIT_SALES"]+"Excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						*/
						arrayGroupTenders["TENDER_CREDIT_SALES"]++;
						break;
					}
					case "TENDER_OTHER_PAYMENT":
					{
						//add drawer change tag
						var cmd = "XMLCashRpt.OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+".@tc="+qtyTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+".@amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)].toString();
						eval(cmd);
						var cmd = "XMLCashRpt.OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+".@excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						var cmd = "XMLCashRpt.OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+".@change="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
						eval(cmd);
						
						/*not for drawer change
						//if(Country !="DE")
						//{
							//add csh_TenderCategory tags
							var cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Quantity="+qtyTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Amount="+drawerAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Change ="+changeDifferenceAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Excess="+excessAmountTenderIdArray[Number(nodeTender.@id)];
							eval(cmd);
						//}
						/*else						
						{
							var cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Quantity=0";
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Amount=0.00";
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Excess =0.00";
							eval(cmd);
							
							cmd = "XMLCashRpt.csh_OtherPayment"+arrayGroupTenders["TENDER_OTHER_PAYMENT"]+"Change=0.00";
							eval(cmd);
						}
						*/
						arrayGroupTenders["TENDER_OTHER_PAYMENT"]++;
						break;
					}
					default : 
							break;
				}
			}
			//we need to store some auxialiry variables
			XMLCashRpt.csh_TenderElectronicPayment	= arrayGroupTenders["TENDER_ELECTRONIC_PAYMENT"];
			XMLCashRpt.csh_TenderCouponNo 	= arrayGroupTenders["TENDER_GIFT_COUPON"];
			XMLCashRpt.csh_TenderForeignCurrencyNo	= arrayGroupTenders["TENDER_FOREIGN_CURRENCY"];
			XMLCashRpt.csh_TenderCreditSaleNo	=	arrayGroupTenders["TENDER_CREDIT_SALES"];
			XMLCashRpt.csh_TenderOtherPaymentNo =	arrayGroupTenders["TENDER_OTHER_PAYMENT"];
			XMLCashRpt.csh_GCertRedeemNo =	arrayGroupTenders["TENDER_GIFT_CERT"];
			XMLCashRpt.csh_GCardRedeemNo =	arrayGroupTenders["TENDER_GIFT_CARD"];
			XMLCashRpt.csh_GCSoldNo =	arrGiftCardProdId.length;
			XMLCashRpt.csh_GCertSoldNo =	arrGiftCertProdId.length;
			if(nodeTenders != null) {
				var nodesTender = nodeTenders.Tender;
				var nodesTenderSize = nodesTender.length();
				
				for(var i = 0; i < nodesTenderSize; i++) {
					var resp=<csh_Tender/>;
					var nodeTender = nodesTender[i];	
				    var tcTenderId = getNumberAttribute(nodeTender, "id");
				    
					//verify if the tenders is not already in
					var allreadyIn = false;
					for(var j=0;j<i; j++)
					{
						if(nodesTender[j].@id == tcTenderId)
						{
							allreadyIn = true;
							break;
						}
					}
					
					if(allreadyIn ==false)
					{
						var tenderName = rootCash.TenderTable.TenderType.(@id==nodeTender.@id).@name;
						resp.csh_TenderName=tenderName.toString();
						resp.csh_TenderCategory = rootCash.TenderTable.TenderType.(@id==nodeTender.@id).@category.toString();
						resp.csh_TenderId=tcTenderId;
						resp.csh_TenderAmount=drawerAmountTenderIdArray[tcTenderId].toString(); //in foriegn if is the case
						resp.csh_TenderQty=Number(qtyTenderIdArray[tcTenderId]);
						//19.12.2008 oi more details
						resp.csh_TenderChange = changeDifferenceAmountTenderIdArray[tcTenderId].toString(); //in foriegn if is the case
						resp.csh_TenderExcess = excessAmountTenderIdArray[tcTenderId].toString();	//in foriegn currency if is the case
						XMLCashRpt.appendChild(resp);
					}
				}
	
			}
			
			
			//API.dbg("SOTEC: " + XMLCashRpt);
		}
	}
	
	/** Get OperationKindId */
	function getOperationKindId(nodeCashStatistics,saleTypeName,typeId) 
	{ 
		var retunArray = Array(0,new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"),new BigDecimal("0.00"));

		var nodesOperationKindAux;
		if(""==saleTypeName) {
			nodesOperationKindAux = nodeCashStatistics.SaleType.OperationKind; 
		}
		else {
			var cmd = "nodeCashStatistics.SaleType.(@name == \"" + saleTypeName + "\").OperationKind";
			nodesOperationKindAux = eval(cmd);
		}
		var cmd = "nodesOperationKindAux.(@id == \"" + typeId + "\")";
		var nodesOperationKind = eval(cmd);

		var nodesOperationKindSize = nodesOperationKind.length();
		for(var i = 0; i < nodesOperationKindSize; i++) {
			var nodeCashTotals = nodesOperationKind[i].CashTotals;
			if(nodeCashTotals != null) {
				var nodeCashAux = nodeCashTotals.Cash[0];
				if(nodeCashAux != null) {
					retunArray[0] += getNumberAttribute(nodeCashAux, "tc");
					retunArray[1]=retunArray[1].add(getBigDecimalAttribute(nodeCashAux, "netAmount"));
					retunArray[2]=retunArray[2].add(getBigDecimalAttribute(nodeCashAux, "netBeforeDiscount"));
					retunArray[3]=retunArray[3].add(getBigDecimalAttribute(nodeCashAux, "couponAmount"));
					retunArray[4]=retunArray[4].add(getBigDecimalAttribute(nodeCashAux, "taxAmount"));
					retunArray[5]=retunArray[5].add(getBigDecimalAttribute(nodeCashAux, "taxBeforeDiscount"));
					//OI 27.01.2010 add for 6.1.17
					retunArray[6] += getNumberAttribute(nodeCashAux, "couponTC");
				}
			}
		}
		return retunArray;
	}
			
	/** Get DayPartId */
	function getDayPartId(nodeCashStatistics,typeId) 
	{ 
		var retunArray = Array(0,new BigDecimal("0.00"),new BigDecimal("0.00"));	
		var nodesOperationKindAux = nodeCashStatistics.SaleType.DayPart; 
		var cmd = "nodesOperationKindAux.(@id == \"" + typeId + "\")";
		var nodesOperationKind = eval(cmd);
		var nodesOperationKindSize = nodesOperationKind.length();
		for(var i = 0; i < nodesOperationKindSize; i++) {
			var nodeCashTotals = nodesOperationKind[i].CashTotals;
			if(nodeCashTotals != null) {
				var nodeCashAux = nodeCashTotals.Cash[0];
				if(nodeCashAux != null) {
					retunArray[0] += getNumberAttribute(nodeCashAux, "tc");
					retunArray[1]=retunArray[1].add(getBigDecimalAttribute(nodeCashAux, "netAmount"));
					retunArray[2]=retunArray[1].add(getBigDecimalAttribute(nodeCashAux, "netBeforeDiscount"));
				}
			}
		}
		return retunArray;
	}
	
	/** Calculate total inital float on the given node */
	function calculateInitialFloat(nodeTenders) 
	{
		var total = new BigDecimal("0.00");
		if(nodeTenders != null) {
			for each (j in nodeTenders) {
				var nodesTender = j.Tender;
				for each (i in nodesTender) {
					//total += Number(i.@initialFloat);
					total = total.add(new BigDecimal(i.@initialFloat)); 
				}
			}
		}
		return (total);
	}
	
	/** Gets waste net amount */
	function getWasteNetAmount(nodeCashStatistics) 
	{
		var nodesOperationKind = nodeCashStatistics.OperationKind.(@id=="WASTE");
		var nodesOperationKindSize = nodesOperationKind.size;
		var total = new BigDecimal("0.00");
		for(var i = 0; i < nodesOperationKindSize; i++) {
			var nodeCashTotals = nodesOperationKind[i].CashTotals[0];
			if(nodeCashTotals != null) {
				var nodeCash = nodeCashTotals.Cash[0];
				if(nodeCash != null) {
					total=total.add(getBigDecimalAttribute(nodeCash, "netAmount"));
				}
			}
		}
		return total;
	}
	
	/** Gets the foreign drawer count */
	function getForeignCountAmt(nodeJapanData, foreignCurrency) 
	{
		var total = 0;
		var nodesCashCountForeign = nodeJapanData.CashCount.(@type=="FOREIGN")
		var nodesCashCountForeignSize = nodesCashCountForeign.length();
		for(var i = 0; i < nodesCashCountForeignSize; i++) {
			var nodeCashCount = nodesCashCountForeign[i];
			if(nodeCashCount.(@value) == foreignCurrency) {
				total += getNumberAttribute(nodeCashCount, "count")
			}
		}
		return total;
	}
	
	/** Calculates japan percentage by Some amount vs. Total Store Amount. */
	function calculatePercentage(amount, totalStoreAmount) 
	{
		//API.dbg("procentaj "+ amount+ " " + totalStoreAmount);//removed due to NVS-1671
		var r= new BigDecimal("0.00");
		if (Number(amount) == 0) {
			return(new BigDecimal("0.00"));
		}
		if (Number(totalStoreAmount) == 0) {
			return(new BigDecimal("0.00"));
		}
		r=amount.divide(totalStoreAmount,ROUND_MODE_PERCENT); //ROUND HALF DOWN 
		return(r.multiply(new BigDecimal("100.00")));
	}

	/** Gets the summ of day parts attributes */
	function getDayPartCashAttribute(nodeCashStatistics, dayPart, attributeName) 
	{
		var total = new BigDecimal("0.00");
		var nodesSaleType = nodeCashStatistics.SaleType;
		var nodesSaleTypeSize = nodesSaleType.length();
		for(var i = 0; i < nodesSaleTypeSize; i++) {
			var nodeSaleType = nodesSaleType[i];
			var nodeDayPartBF = nodeSaleType.DayPart.(@id==dayPart);
			if(nodeDayPartBF != null) {
				var nodeCash = nodeDayPartBF.Cash[0]; // Note that "Cash" is inside "CashTotals"
				total=total.add(getBigDecimalAttribute(nodeCash, attributeName));
			}
		}
		return total;
	}
	
	/** Gets the summ of given attribute values for given POD type */
	// productFlag is an optional parameter that indicates which kind of cash node we want
	// P - ProductSales, NP - NonProductSales and empty - cash node
	function getPodCashAttribute(startPoint, pod, attributeName, productFlag) 
	{
		var total = Number(0);
		if(startPoint != null) {
			if(0==startPoint.POS.length()) {
				var nodesPOS = startPoint;
			}
			else {
				var nodesPOS = startPoint.POS;
			}
			var nodesPOSsize = nodesPOS.length();
			for(var i = 0; i < nodesPOSsize; i++) {
				var nodePOS = nodesPOS[i].(@podShort==pod);
				if(nodePOS != null) {
					var nodeCashTotals;
					if("P"==productFlag) {
						nodeCashTotals = nodePOS.CashTotals.ProductSales;
					}
					else {
						if("NP"==productFlag) {
							nodeCashTotals = nodePOS.CashTotals.NonProductSales;
						}
						else {
							nodeCashTotals = nodePOS.CashTotals[0];
						}
					}
					var nodeCash = findFirst(nodeCashTotals, "Cash");
					total+=Number(getAttribute(nodeCash, attributeName));
				}
			}
		}
		return total;
	}

	/** Gets the summ of given attribute values for given POD type */
	// productFlag is an optional parameter that indicates which kind of cash node we want
	// P - ProductSales, NP - NonProductSales and empty - cash node
	function getBigDecPodCashAttribute(startPoint, pod, attributeName, productFlag) 
	{
		var total = new BigDecimal("0.00");
		if(startPoint != null) {
			if(0==startPoint.POS.length()) {
				var nodesPOS = startPoint;
			}
			else {
				var nodesPOS = startPoint.POS;
			}
			var nodesPOSsize = nodesPOS.length();
			for(var i = 0; i < nodesPOSsize; i++) {
				var nodePOS = nodesPOS[i].(@podShort==pod);
				if(nodePOS != null) {
					var nodeCashTotals;
					if("P"==productFlag) {
						nodeCashTotals = nodePOS.CashTotals.ProductSales;
					}
					else {
						if("NP"==productFlag) {
							nodeCashTotals = nodePOS.CashTotals.NonProductSales;
						}
						else {
							nodeCashTotals = nodePOS.CashTotals[0];
						}
					}
					var nodeCash = findFirst(nodeCashTotals, "Cash");
					total=total.add(getBigDecimalAttribute(nodeCash, attributeName));
				}
			}
		}
		return total;
	}

	
	/** Gets the petty-cash amount from a "CashDetails" node */
	function getPettyCashAmount(nodeCashDetails) 
	{
		var total = new BigDecimal("0.00");
		if(nodeCashDetails != null) {
			var nodeTransfersOut = nodeCashDetails.TransfersOut.(@type=="OTHER_PAYMENT");
			if(nodeTransfersOut != null) {
				var nodesTransferPettyCash = nodeTransfersOut.Transfer.(@destination=="PETTY_CASH");
				var size = nodesTransferPettyCash.length();
				for(var i = 0; i < size; i++) {
					total = total.add(new BigDecimal(nodesTransferPettyCash[i].(@amount)));
				}
			}
		}
		return total;
	}
	
	/** Gets the petty-cash count from a "CashDetails" node */
	function getPettyCashCount(nodeCashDetails) 
	{
		if(nodeCashDetails != null) {
			var nodeTransfersOut = nodeCashDetails.TransfersOut.(@type=="OTHER_PAYMENT");
			if(nodeTransfersOut != null) {
				var nodesTransferPettyCash = nodeTransfersOut.Transfer.(@destination=="PETTY_CASH");
				return nodesTransferPettyCash.length();
			}
		}
		return 0;
	}
	
	/** Calculates the gross amount of a "Cash" node */
	function getCashGrossAmount(nodeCash) 
	{
		if(nodeCash == null) {
			return 0;
		}
		var net = summNodesAttributeBigDecimalValues(nodeCash, "netAmount");
		var tax = summNodesAttributeBigDecimalValues(nodeCash, "taxAmount");
		net = net.add(tax);
		return net;
	}

	/**
	 * Gets the amount of McCards sold.
	 * @param startPoint product mix start point to look data (Can be the root, a POS, etc...)
	 * @param dayPart if not null, only the given day part will be included (LUNCH or BREAKFAST)
	 * @param saleType if not null, only the given sale type will be included (qtyEatIn or qtyTakeOut)
	 */
	function getmcCertSalesAmount(startPoint, dayPart, saleType) 
	{
		var total = new BigDecimal("0.00");
		if((startPoint == null) && (dayPart == null) && (saleType == null)){
			return total;
		}
		var nodeFamilyGroup = startPoint.FamilyGroup.(@groupName=="GIFT_COUPON");
		if(nodeFamilyGroup == null) {
			return total;
		}
		var nodesProduct = nodeFamilyGroup.Product;		

		var valueAmoutEatIn   = 0;
		var valueAmoutTakeOut = 0;
		var valueAmoutOther   = 0;
		for each (var i in nodesProduct) {
			var nodeOperationType = i.OperationType.(@operationType=="SALE");
			if(nodeOperationType != null) {
				if(dayPart == null) {
				    // All day parts
					var nodesPrice = nodeOperationType.Price;
				}else {
					// Just the given day part
					var nodesPrice = nodeOperationType.Price.(@dayPart==dayPart);
				}

				for each (var j in nodesPrice) {
					if(saleType == null) {
					// EatIn + TakeOut
						var qty = getPMixTotalQty(nodesPrice.PMix);
						nodePMix = nodesPrice.PMix;
						valueAmoutEatIn   += Number(nodePMix.@netAmtEatIn == null ? 0 : nodePMix.@netAmtEatIn);
						valueAmoutTakeOut += Number(nodePMix.@netAmtTakeOut == null ? 0 : nodePMix.@netAmtTakeOut);
						valueAmoutOther   += Number(nodePMix.@netAmtOther == null ? 0 : nodePMix.@netAmtOther);
					}else {
						// Just the given sale type
						var qty = getNumberAttribute(nodesPrice.PMix, saleType);
					}
					
					//total += (qty * getNumberAttribute(nodesPrice, "salePrice"));
					var aux = new BigDecimal("0.00");
					aux =getBigDecimalAttribute(nodesPrice, "salePrice");
					aux =aux.multiply(new BigDecimal(qty));
					total=total.add(aux);

				}
			}
		}
		return total;
	}
		
	/**
	 * Gets the amount of McCards redemeed
	 * @param startPoint CASH start point to look data (Can be the root, a POS, etc...)
	 */
	function getMcCardRedeemedAmount(startPoint) 
	{
		var total = new BigDecimal("0.00");
		if(startPoint == null) {
			return total;
		}
		var nodeTenders = startPoint.Tenders[0];
		if(nodeTenders == null) {
			return total;
		}
		var nodesTender = nodeTenders.getChildren();
		var nodesTenderSize = nodesTender.length();
		for(var i = 0; i < nodesTenderSize; i++) {
			var nodeTender = nodesTender[i];
			var tenderId = Number(nodeTender.@id);
			// 19: McCard 200
			// 20: McCard 500
			if(tenderId == MCCARD_1 || tenderId == MCCARD_2) {
				total=total.add(new BigDecimal(nodeTender.@drawerAmount));
			}
		}
		return total;
	}

	/**
	 * Gets the total tax amount of a "CashStatistics" node for the given operation type
	 */
	function getTotalTaxAmount(nodeCashStatistics, operationType) 
	{
		if(nodeCashStatistics == null) {
			return new BigDecimal("0.00");
		}
		var nodeSaleType = nodeCashStatistics.SaleType.(@name == operationType);
		if(nodeSaleType != null) {
			var nodeCashTotals = nodeSaleType.CashTotals[0];
			if(nodeCashTotals != null) {
				var nodeCash = nodeCashTotals.Cash[0];
				if(nodeCash != null) {
					return (new BigDecimal(nodeCash.@taxAmount));
				}
			}
		}
		return new BigDecimal("0.00");
	}

	/**
	 * Format tag brack for International Cash
	 */
	function FormatByTaxChain(rootTaxTable, tagName, nodeCashStatistics, saleTypeName, operationKindId, productFlag)
	{
		var nodesSaleType;
		var nodesOperationKind;
		var nodeBreakTaxes;

		if(""==saleTypeName) {
			nodesSaleType=nodeCashStatistics.SaleType;
		}
		else {
			var cmd = "nodeCashStatistics.SaleType.(@name == \"" + saleTypeName + "\")";
			nodesSaleType = eval(cmd);
		}
		if(""==operationKindId) {
			nodesOperationKind = nodesSaleType.OperationKind;
		}
		else {
			var cmd = "nodesSaleType.OperationKind.(@id == \"" + operationKindId + "\")";
			nodesOperationKind = eval(cmd);
		}

		var taxTable = rootTaxTable.TaxTable;
		var taxTableSize = taxTable.length();

		if( ( tagName == "csh_ManagerMealBrack_" )  || (  tagName == "csh_EmployeeMealBrack_" )   ||
		    ( tagName == "csh_ManagerMealTotalBrack_" )  || (  tagName == "csh_EmployeeMealTotalBrack_" ) ) {			
			for(var iCount=0; iCount<taxTableSize; iCount ++) {
				var cmd;
				var evaluate;
				var iValue;
				var taxRateId = Number(taxTable[iCount].TaxRateId);
				var tagId = taxRateId;

				if("P"==productFlag) {
					nodeBreakTaxes = nodesOperationKind.CashTotals.ProductSales.Cash.Tax.(@id==taxRateId);
				}
				else {
					if("NP"==productFlag) {
						nodeBreakTaxes = nodesOperationKind.CashTotals.NonProductSales.Cash.Tax.(@id==taxRateId);
					}
					else {
						nodeBreakTaxes = nodesOperationKind.CashTotals.Cash.Tax.(@id==taxRateId);
					}
				}

				if(nodeBreakTaxes.length()>0) {					
					iValue=0;
					for each (var nodeBT in nodeBreakTaxes) {
						iValue+=Number(nodeBT.@tc);
					}
				}
				else {
					iValue=0;
				}
				cmd = "XMLCashRpt." + tagName + tagId + ".Quantity="+Number(iValue);
				evaluate = eval(cmd);

				if(nodeBreakTaxes.length()>0) {					
					iValue=new BigDecimal("0.00");
					for each (var nodeBT in nodeBreakTaxes) {
						iValue=iValue.add(new BigDecimal(nodeBT.@baseTaxAmountBeforeDiscount) );
						iValue=iValue.add(new BigDecimal(nodeBT.@taxAmountBeforeDiscount) );
						iValue=iValue.subtract(new BigDecimal(nodeBT.@baseTaxAmount) );
						iValue=iValue.subtract(new BigDecimal(nodeBT.@taxAmount) );
					}
				}
				else {
					iValue=new BigDecimal("0.00");
				}
				cmd = "XMLCashRpt." + tagName + tagId + ".Amount="+iValue;
				evaluate = eval(cmd);

				if(nodeBreakTaxes.length()>0) {					
					iValue=new BigDecimal("0.00");
					for each (var nodeBT in nodeBreakTaxes) {							
						iValue=iValue.add(new BigDecimal(nodeBT.@taxAmountBeforeDiscount));
						iValue=iValue.subtract(new BigDecimal(nodeBT.@taxAmount));
					}
				}
				else {
					iValue=new BigDecimal("0.00");
				}
				cmd = "XMLCashRpt." + tagName + tagId + ".Tax="+iValue;
				evaluate = eval(cmd);
			}
		}
		else {
		for(var iCount=0; iCount<taxTableSize; iCount ++) {
			var cmd;
			var evaluate;
			var iValue;
			var taxRateId = Number(taxTable[iCount].TaxRateId);
			var tagId = taxRateId;

			if("P"==productFlag) {
				nodeBreakTaxes = nodesOperationKind.CashTotals.ProductSales.Cash.Tax.(@id==taxRateId);
			}
			else {
				if("NP"==productFlag) {
					nodeBreakTaxes = nodesOperationKind.CashTotals.NonProductSales.Cash.Tax.(@id==taxRateId);
				}
				else {
					nodeBreakTaxes = nodesOperationKind.CashTotals.Cash.Tax.(@id==taxRateId);
				}
			}

			if(nodeBreakTaxes.length()>0) {
				//iValue = nodeBreakTaxes.@tc;
				iValue=0;
				for each (var nodeBT in nodeBreakTaxes) {
					iValue+=Number(nodeBT.@tc);
				}
			}
			else {
				iValue=0;
			}
			cmd = "XMLCashRpt." + tagName + tagId + ".Quantity="+Number(iValue);
			evaluate = eval(cmd);

			if(nodeBreakTaxes.length()>0) {
				//iValue = nodeBreakTaxes.@baseTaxAmount;
				iValue=new BigDecimal("0.00");
				for each (var nodeBT in nodeBreakTaxes) {
					iValue=iValue.add(new BigDecimal(nodeBT.@baseTaxAmount));
				}
			}
			else {
				iValue=new BigDecimal("0.00");
			}
			cmd = "XMLCashRpt." + tagName + tagId + ".Amount="+iValue;
			evaluate = eval(cmd);

			if(nodeBreakTaxes.length()>0) {
				//iValue = nodeBreakTaxes.@taxAmount;
				iValue=new BigDecimal("0.00");
				for each (var nodeBT in nodeBreakTaxes) {
					iValue=iValue.add(new BigDecimal(nodeBT.@taxAmount));
				}
			}
			else {
				iValue=new BigDecimal("0.00");
			}
			cmd = "XMLCashRpt." + tagName + tagId + ".Tax="+iValue;
				evaluate = eval(cmd);
			}
		}
		return 0;
	}
	
	/**
	 * Gets the total tax amount of a "CashStatistics" node for the given operation type
	 */
	function getTotalTaxAmount(nodeCashStatistics, operationType) 
	{
		if(nodeCashStatistics == null) {
			return new BigDecimal("0.00");
		}
		var nodeSaleType = nodeCashStatistics.SaleType.(@name == operationType);
		if(nodeSaleType != null) {
			var nodeCashTotals = nodeSaleType.CashTotals[0];
			if(nodeCashTotals != null) {
				var nodeCash = nodeCashTotals.Cash[0];
				if(nodeCash != null) {
					return (new BigDecimal(nodeCash.@taxAmount));
				}
			}
		}
		return new BigDecimal("0.00");
	}

	/**
	 * Format tag brack for International Cash CSO
	 */
	function FormatByTaxChainCSO(rootTaxTable, tagName, nodeCashStatistics, saleTypeName, operationKindId, productFlag, tempXML)
	{
		var nodesSaleType;
		var nodesOperationKind;
		var nodeBreakTaxes;
		
		if(""==saleTypeName) {
			nodesSaleType=nodeCashStatistics.SaleType;
		}
		else {
			var cmd = "nodeCashStatistics.SaleType.(@name == \"" + saleTypeName + "\")";
			nodesSaleType = eval(cmd);
		}
		if(""==operationKindId) {
			nodesOperationKind = nodesSaleType.OperationKind;
		}
		else {
			var cmd = "nodesSaleType.OperationKind.(@id == \"" + operationKindId + "\")";
			nodesOperationKind = eval(cmd);
		}

		var taxTable = rootTaxTable.TaxTable;
		var taxTableSize = taxTable.length();

		for(var iCount=0; iCount<taxTableSize; iCount ++) {
			var cmd;
			var evaluate;
			var quantityValue;
			var AmountValue;
			var TaxValue;
			var taxRateId = Number(taxTable[iCount].TaxRateId);
			var tagId = taxRateId;
			
			if("P"==productFlag) {
				nodeBreakTaxes = nodesOperationKind.CashTotals.ProductSales.Cash.Tax.(@id==taxRateId);
			}
			else {
				if("NP"==productFlag) {
					nodeBreakTaxes = nodesOperationKind.CashTotals.NonProductSales.Cash.Tax.(@id==taxRateId);
				}
				else {
					nodeBreakTaxes = nodesOperationKind.CashTotals.Cash.Tax.(@id==taxRateId);
				}
			}
			
			if(nodeBreakTaxes.length()>0) {
				quantityValue=0;
				for each (var nodeBT in nodeBreakTaxes) {
					quantityValue+=Number(nodeBT.@tc);
				}
			}
			else {
				quantityValue=0;
			}
			
			if(nodeBreakTaxes.length()>0) {
				AmountValue=new BigDecimal("0.00");
				for each (var nodeBT in nodeBreakTaxes) {
					AmountValue=AmountValue.add(new BigDecimal(nodeBT.@baseTaxAmount));
				}
			}
			else {
				AmountValue=new BigDecimal("0.00");
			}
			
			if(nodeBreakTaxes.length()>0) {
				TaxValue=new BigDecimal("0.00");
				for each (var nodeBT in nodeBreakTaxes) {
					TaxValue=TaxValue.add(new BigDecimal(nodeBT.@taxAmount));
				}
			}
			else {
				TaxValue=new BigDecimal("0.00");
			}
			
			cmd = tagName + tagId;
			var find_node = tempXML.child(cmd);
			if(find_node == undefined) {
				var temp = "<" + tagName + tagId + "></" + tagName + tagId + ">";
				var child = new XML(temp);
				temp = "<Quantity>" + Number(quantityValue) + "</Quantity>";
				var quantity = new XML(temp);
				child.appendChild(quantity);
				temp = "<Amount>" + AmountValue + "</Amount>";
				var amount = new XML(temp);
				child.appendChild(amount);
				temp = "<Tax>" + TaxValue + "</Tax>";
				var tax = new XML(temp);
				child.appendChild(tax);
				tempXML.appendChild(child);
			}
			else {
				quantityValue += Number(find_node.Quantity);
				find_node.Quantity = quantityValue; 
				AmountValue = AmountValue.add(new BigDecimal(find_node.Amount));
				find_node.Amount = AmountValue; 
				TaxValue = TaxValue.add(new BigDecimal(find_node.Tax));
				find_node.Tax = TaxValue; 
			}
		}
		return 0;
	}
}

/**
 * PUBLIC
 * Responsible for formating the PMix By Date report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportPMixByDate(config, data)
{
	//By Date PMIX REPORT
	if(init(config, data, Array("CASH", "PMIX"), "PMXDT") != 0) {
		return getResponse();
	}

	var root = rootPmix.POS;
	genericPMix(config, data, root, RPTPMIXBYDATE);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the PMix By Date StoreWide report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportPMixByDateSW(config, data)
{
	//Consolidated PMIX REPORT
	if(init(config, data, Array("CASH", "PMIX"), "MXDSW") != 0) {
		return getResponse();
	}

	var root = rootPmix;
	genericPMix(config, data, root, RPTPMIXBYDATESW);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the PMix By Period report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportPMixByPeriod(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "PMIX"), "MXPRD") != 0) {
		return getResponse();
	}

	var root = rootPmix;
	genericPMix(config, data, root, RPTPMIXBYPERIOD);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the PMix By Period StoreWide report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportPMixByPeriodSW(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "PMIX"), "MXPSW") != 0) {
		return getResponse();
	}

	var root = rootPmix;
	genericPMix(config, data, root, RPTPMIXBYPERIODSW);
	return getResponse();
};

/**
 * PRIVATE
 * This function implements a generic PMix report
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function genericPMix(config, data, root, reportType)
{

	var pod = rootCash.@requestPod;
	addHeader(rootCash, "Product Mix", reportType);

	if(root.@errflag=="NODATA") {
		var message = API.getLocalMsg("MSG_REPORT_NO_DATE_FOR_PERIOD");
		addLine("ERROR:");
		addLine(message);
		return;
	}

	var missingDates="";
	if(RPTPMIXBYPERIOD==reportType) {
		missingDates=listMissingDates(rootPmix.POS);
	}
	else
	if(RPTPMIXBYPERIODSW==reportType) {
		if(0==rootPmix.POS.length()) {
			missingDates=listMissingDates(rootPmix.POS);
		}
		else {
			missingDates=listMissingDatesSW(rootPmix.POS);
		}
	}
	addMissingDates(reportType,String(missingDates));
	
	var managerTagCash = rootCash.CashStatistics.SaleType.OperationKind.(@id=="MANAGER").CashTotals.Cash;//.@tc
	var crewTagCash = rootCash.CashStatistics.SaleType.OperationKind.(@id=="CREW").CashTotals.Cash;//.@tc

	var managerCoupon = summNodesAttributeValues(managerTagCash,"couponAmount");
	var crewCoupon = summNodesAttributeValues(managerTagCash,"crewAmount");

	var qtdTCDiscard = rootCash.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00");
	var qtdTCs = rootCash.CashTotals.Cash.@tc - summNodesAttributeValues(qtdTCDiscard,"tc");

	addLine("No. OF TCs:        " + qtdTCs);
	addLine();
	addLine("NAME    SOLD AMOUNT  TTL% PROM WST USED");
	addLine();

	var rootProducts = root.FamilyGroup.(@groupName!="NON_PRODUCT" && @groupName != "GIFT_COUPON");
	var rootNonProducts = root.FamilyGroup.(@groupName=="NON_PRODUCT");
	var sumProducts = getTotalSum(rootProducts) + getTotalSum(rootNonProducts);

	// get information of the Products
	var valueMgrMealDct  = 0;
	var valueEmpMealDct  = 0;
	var valueOtherDct    = 0;
	var sumProductsSold  = 0;
	var sumProductsAmount= 0;
	var sumProductsTtl   = 0;
	var sumProductsProm  = 0;
	var sumProductsWst   = 0;
	var sumProductsUsed  = 0;
	if(rootProducts.length()){
		addLine(center("PRODUCTS"));
		for each (i in rootProducts) {
			var nodeProduct = i.Product;
			var totsold  = 0;
			var totamount= 0;
			var totttl   = 0;
			var totprom  = 0;
			var totwst   = 0;
			var totused  = 0;
			var valueMgrNetAmt = 0;
			var valueEmpNetAmt = 0;

			for each (j in nodeProduct) {
				var name = rootPmix.ProductTable.ProductInfo.(@id == j.@id).@name;
				var eatinPrice   = j.@eatinPrice;
				var takeoutPrice = j.@takeoutPrice;
				var otherPrice   = j.Product.@otherPrice;
				var rootOperationType = j.OperationType;
				var qtdsold = 0;
				var qtdwst  = 0;
				var qtdprom = 0;
				var amount  = 0;
				var valuePrice = 0;
				var qtdInOut = 0;
				var qtdrefund = 0;

				for each (k in rootOperationType) {

//				    var aux = Number(k.PMix.@qtyEatIn * eatinPrice) + Number(k.PMix.@qtyTakeOut * takeoutPrice) + (Number(k.PMix.@qtyOther) * Number(otherPrice));
					var aux = Number(String(k.PMix.@netBeforeDiscountEatIn)=="" ? k.PMix.@netAmtEatIn : k.PMix.@netBeforeDiscountEatIn);
					    aux += Number(String(k.PMix.@netBeforeDiscountTakeOut)=="" ? k.PMix.@netAmtTakeOut : k.PMix.@netBeforeDiscountTakeOut);
					    aux += Number(String(k.PMix.@netBeforeDiscountOther)=="" ? k.PMix.@netAmtOther : k.PMix.@netBeforeDiscountOther);

					if(k.@operationType == "REFUND"){
						amount  -= aux;
						qtdrefund += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}
					else{
						amount   += aux;
						qtdInOut += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}

					if(k.@operationType == "DISCOUNT"){
						valueOtherDct +=         (Number(k.PMix.@netBeforeDiscountEatIn) - Number(k.PMix.@netAmtEatIn)) +
										 (Number(k.PMix.@netBeforeDiscountTakeOut) - Number(k.PMix.@netAmtTakeOut)) +
										 (Number(k.PMix.@netBeforeDiscountOther) -  Number(k.PMix.@netAmtOther));
					}
					if(k.@operationType == "SALE") {
						if((k.PMix.@netBeforeDiscountEatIn != "") || (k.PMix.@netBeforeDiscountTakeOut != "") || (k.PMix.@netBeforeDiscountOther != "")) {
							valueOtherDct +=   (Number(k.PMix.@netBeforeDiscountEatIn) - Number(k.PMix.@netAmtEatIn)) +
										 (Number(k.PMix.@netBeforeDiscountTakeOut) - Number(k.PMix.@netAmtTakeOut)) +
										 (Number(k.PMix.@netBeforeDiscountOther) - Number(k.PMix.@netAmtOther));
						}
					}

					if(k.@operationType == "MANAGER"){
						valueMgrNetAmt =  Number(Number(k.PMix.@netAmtEatIn) + Number(k.PMix.@netAmtTakeOut) +  Number(k.PMix.@netAmtOther));
						valueMgrMealDct += (Number(k.PMix.@netBeforeDiscountEatIn) + Number(k.PMix.@netBeforeDiscountTakeOut) + Number(k.PMix.@netBeforeDiscountOther)) - valueMgrNetAmt;

//						if (valueMgrNetAmt == 0) {
//							qtdInOut -= Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
//						}
						qtdsold = qtdInOut;
					}
					if(k.@operationType == "CREW"){
						valueEmpNetAmt = Number(k.PMix.@netAmtEatIn) + Number(k.PMix.@netAmtTakeOut) + Number(k.PMix.@netAmtOther);
						valueEmpMealDct += Number((Number(k.PMix.@netBeforeDiscountEatIn) + Number(k.PMix.@netBeforeDiscountTakeOut)+ Number(k.PMix.@netBeforeDiscountOther)) - Number(valueEmpNetAmt));

//						if (valueEmpNetAmt == 0) {
//							qtdInOut -= Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
//						}
						qtdsold = qtdInOut;
					}

					if(k.@operationType == "PROMO"){
						 amount   -= aux;
	    				 qtdprom += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}
					if(k.@operationType == "WASTE"){
						 amount   -= aux;
	    				 qtdwst  += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}
					if((k.@operationType == "SALE") || (k.@operationType == "DISCOUNT")){
	    				 qtdsold += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}
				}

				qtdsold -=qtdrefund;
				var ttl =  Math.abs(calculatePercentage(amount,sumProducts));
				var used = qtdsold + qtdwst + qtdprom;
				addOperationLine(name, qtdsold, amount, API.setOnRight(API.formatNumber(Number(ttl), "##0.0", 5), 5), qtdprom, qtdwst, used);
				totsold   += Number(qtdsold);
				totamount += amount;
				totprom   += qtdprom;
				totwst    += qtdwst;
				totused   += Number(used);
			}

			var name = "GRP " +  API.setOnRight(i.@groupCode, 2)
			var valueTtl =  Math.abs(calculatePercentage(totamount,sumProducts));
			addLine(SEP_SC);
			addOperationLine(name, totsold, totamount, API.setOnRight(API.formatNumber(Number(valueTtl), "##0.0", 5), 5), totprom, totwst, totused);
			addLine(SEP_SC);
			addLine();

			sumProductsSold  += totsold;
			sumProductsAmount+= totamount;
			sumProductsTtl   += totttl;
			sumProductsProm  += totprom;
			sumProductsWst   += totwst;
			sumProductsUsed  += totused;
		}
	}
	else{
			addLine(center("PRODUCTS"));
			addLine(SEP_SC);
			addOperationLine("GRP xx", 0, 0, API.setOnRight(API.formatNumber(Number(0), "##0.0", 5), 5), 0, 0, 0);
			addLine(SEP_SC);
			addLine();
	}

	// get information of the Non Products
	var sumNonProductsSold  = 0;
	var sumNonProductsAmount= 0;
	var sumNonProductsTtl   = 0;
	var sumNonProductsProm  = 0;
	var sumNonProductsWst   = 0;
	var sumNonProductsUsed  = 0;
	if(rootNonProducts.length()){
		addLine(center("NON PRODUCTS"));
		for each (i in rootNonProducts) {
			var nodeProduct = i.Product;
			var totsold  = 0;
			var totamount= 0;
			var totttl   = 0;
			var totprom  = 0;
			var totwst   = 0;
			var totused  = 0;
			for each (j in nodeProduct) {
				var name = rootPmix.ProductTable.ProductInfo.(@id == j.@id).@name;
				var eatinPrice   = j.@eatinPrice;
				var takeoutPrice = j.@takeoutPrice;
				var otherPrice   = j.Product.@otherPrice;
				var rootOperationType = j.OperationType;
				var qtdsold = 0;
				var qtdwst  = 0;
				var qtdprom = 0;
				var amount  = 0;
				var valuePrice = 0;
				var qtdInOut = 0;

				for each (k in rootOperationType) {

//					var	aux = Number(k.PMix.@qtyEatIn * eatinPrice) + Number(k.PMix.@qtyTakeOut * takeoutPrice) + Number(k.PMix.@qtyOther * otherPrice);
					var aux = Number(String(k.PMix.@netBeforeDiscountEatIn)=="" ? k.PMix.@netAmtEatIn : k.PMix.@netBeforeDiscountEatIn);
					    aux += Number(String(k.PMix.@netBeforeDiscountTakeOut)=="" ? k.PMix.@netAmtTakeOut : k.PMix.@netBeforeDiscountTakeOut);
						aux += Number(String(k.PMix.@netBeforeDiscountOther)=="" ? k.PMix.@netAmtOther : k.PMix.@netBeforeDiscountOther);


					if(k.@operationType == "REFUND"){
						amount  -= aux;
	   				 	qtdsold -= Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}
					else{
						amount   += aux;
						qtdInOut = Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}
					if(k.@operationType == "DISCOUNT"){
						valueOtherDct += 	(Number(k.PMix.@netBeforeDiscountEatIn) - Number(k.PMix.@netAmtEatIn)) +
								 	(Number(k.PMix.@netBeforeDiscountTakeOut) - Number(k.PMix.@netAmtTakeOut)) +
									(Number(k.PMix.@netBeforeDiscountOther) - Number(k.PMix.@netAmtOther));


					}
					if(k.@operationType == "MANAGER"){
						valueMgrMealDct += 	(Number(k.PMix.@netBeforeDiscountEatIn) - Number(k.PMix.@netAmtEatIn)) +
										(Number(k.PMix.@netBeforeDiscountTakeOut) - Number(k.PMix.@netAmtTakeOut)) +
										(Number(k.PMix.@netBeforeDiscountOther) - Number(k.PMix.@netAmtOther));
						qtdsold = qtdInOut;
					}
					if(k.@operationType == "CREW"){
						valueEmpMealDct += 	(Number(k.PMix.@netBeforeDiscountEatIn) - Number(k.PMix.@netAmtEatIn)) +
									(Number(k.PMix.@netBeforeDiscountTakeOut) - Number(k.PMix.@netAmtTakeOut)) +
								   	(Number(k.PMix.@netBeforeDiscountOther) - Number(k.PMix.@netAmtOther));
						qtdsold = qtdInOut;
					}
					if(k.@operationType == "PROMO"){
						 amount   -= aux;
	    				 qtdprom += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}
					if(k.@operationType == "WASTE"){
	    				 qtdwst  += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}
					if((k.@operationType == "SALE") || (k.@operationType == "DISCOUNT")){
	    				 qtdsold += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}
				}

				var ttl =  Math.abs(calculatePercentage(amount,sumProducts));
				var used = qtdsold + qtdwst + qtdprom;
				addOperationLine(name, qtdsold, amount, API.setOnRight(API.formatNumber(Number(ttl), "##0.0", 5), 5), qtdprom, qtdwst, used);
				totsold   += Number(qtdsold);
				totamount += amount;
				totprom   += qtdprom;
				totwst    += qtdwst;
				totused   += Number(used);
			}

			var name = "GRP " +  API.setOnRight(i.@groupCode, 2)
			var valueTtl =  Math.abs(calculatePercentage(totamount,sumProducts));
			addLine(SEP_SC);
			addOperationLine(name, totsold, totamount, API.setOnRight(API.formatNumber(Number(valueTtl), "##0.0", 5), 5), totprom, totwst, totused);
			addLine(SEP_SC);
			addLine();

			sumNonProductsSold  += totsold;
			sumNonProductsAmount+= totamount;
			sumNonProductsTtl   += totttl;
			sumNonProductsProm  += totprom;
			sumNonProductsWst   += totwst;
			sumNonProductsUsed  += totused;
		}
	}

	// Calculate Summary information
	addLine(center("SUMMARY"));

	var totSumSold  = sumNonProductsSold+sumProductsSold;
	var totSumAmount= sumNonProductsAmount+sumProductsAmount;
	var totSumTtl   = sumNonProductsTtl+sumProductsTtl;
	var totSumProm  = sumNonProductsProm+sumProductsProm;
	var totSumWst   = sumNonProductsWst+sumProductsWst;
	var totSumUsed  = sumNonProductsUsed+sumProductsUsed;

	var value = Math.abs(calculatePercentage(sumNonProductsAmount,totSumAmount));
	addOperationLine("T.NPRD", sumNonProductsSold, sumNonProductsAmount, API.setOnRight(API.formatNumber(Number(value), "##0", 3), 4)+"%", sumNonProductsProm, sumNonProductsWst, sumNonProductsUsed);

	value = Math.abs(calculatePercentage(sumProductsAmount,totSumAmount));
	addOperationLine("T.PROD", sumProductsSold, sumProductsAmount, API.setOnRight(API.formatNumber(Number(value), "##0", 3), 4)+"%", sumProductsProm, sumProductsWst, sumProductsUsed);

	value = Math.abs(calculatePercentage(totSumAmount,totSumAmount));
	addOperationLine("T. SUM", totSumSold, totSumAmount, API.setOnRight(API.formatNumber(Number(value), "##0", 3), 4)+"%", totSumProm, totSumWst, totSumUsed);

	addLine(SEP_SL);
	addLine("-Mgr Meal Dct           :" + " " + API.setOnRight(API.formatNumber(Number(valueMgrMealDct)-managerCoupon, "####0.00", 9), 9));
	addLine("-Emp Meal Dct           :" + " " + API.setOnRight(API.formatNumber(Number(valueEmpMealDct)-crewCoupon, "####0.00", 9), 9));
	addLine("-Other Dct              :" + " " + API.setOnRight(API.formatNumber(Number(valueOtherDct)+managerCoupon+crewCoupon, "####0.00", 9), 9));
	addLine(SEP_SL);
	var totWithDisc = totSumAmount - (valueMgrMealDct + valueEmpMealDct + valueOtherDct);
	addLine("Total Less Discounts    :" + " " + API.setOnRight(API.formatNumber(Number(totWithDisc), "####0.00", 9), 9));

	addLine();
	addFooter(rootCash);

	return;

	/** Calculates japan percentage by Some amount vs. Total Store Amount. */
	function calculatePercentage(amount, totalStoreAmount)
	{
		var returnValue = 0;

		if (amount > 0) {
			if (totalStoreAmount <= 0) {
				returnValue = 100;
			} else {
				returnValue = (amount / totalStoreAmount * 100);
			}
		} else {
			returnValue = 0;
		}

		//return amount > 0 ? (amount / totalStoreAmount * 100) : 0;
		return returnValue;
	}

	/** Calculates Total Store Amount. */
	function getTotalSum(rootProducts)
	{
	var sumProductsAmount= 0;

	if(rootProducts.length()){
		for each (i in rootProducts) {
			var nodeProduct = i.Product;
			var totamount= 0;
			for each (j in nodeProduct) {
				var eatinPrice   = j.@eatinPrice;
				var takeoutPrice = j.@takeoutPrice;
				var otherPrice   = j.@otherPrice;
				var rootOperationType = j.OperationType;
				var amount = 0;
				for each (k in rootOperationType) {

//					var aux = Number(k.PMix.@qtyEatIn * eatinPrice) + Number(k.PMix.@qtyTakeOut * takeoutPrice) + Number(k.PMix.@qtyOther * otherPrice);
					var aux = Number(String(k.PMix.@netBeforeDiscountEatIn)=="" ? k.PMix.@netAmtEatIn : k.PMix.@netBeforeDiscountEatIn);
					    aux += Number(String(k.PMix.@netBeforeDiscountTakeOut)=="" ? k.PMix.@netAmtTakeOut : k.PMix.@netBeforeDiscountTakeOut);
						aux += Number(String(k.PMix.@netBeforeDiscountOther)=="" ? k.PMix.@netAmtOther : k.PMix.@netBeforeDiscountOther);


					if(k.@operationType == "REFUND"){
						amount  -= aux;
					}
					else{
						amount   += aux;
					}

					if(k.@operationType == "PROMO"){
						amount   -= aux;
					}
				}
				totamount += amount;
			}
			sumProductsAmount+= totamount;
		}
	}

	return sumProductsAmount;
	}

	/**
	 * Adds a given line by Group
	 * @param title of group
 	 * @param root By Group
  	 * @param sum Products
	 */
	function addLineByGroup(title, rootByGroup, sumProducts)
	{
		addLine(center(title));

		var sumProductsSold  = 0;
		var sumProductsAmount= 0;
		var sumProductsTtl   = 0;
		var sumProductsProm  = 0;
		var sumProductsWst   = 0;
		var sumProductsUsed  = 0;
		for each (i in rootByGroup) {
			var nodeProduct = i.Product;
			var totsold  = 0;
			var totamount= 0;
			var totttl   = 0;
			var totprom  = 0;
			var totwst   = 0;
			var totused  = 0;
			for each (j in nodeProduct) {
				if(j.OperationType.@operationType == "MANAGER"){
					valueMgrMealDct += j.@eatinPrice;
				}
				if(j.OperationType.@operationType == "CREW"){
					valueEmpMealDct += j.@eatinPrice;
				}
				var name = rootPmix.ProductTable.ProductInfo.(@id == j.@id).@name;

				var rootOperationType = j.OperationType;
				var qtdsold = 0;
				var qtdwst  = 0;
				var qtdprom = 0;
				var amount  = 0;
				var valuePrice = 0;
				var qtdInOut = 0;

				for each (k in rootOperationType) {
					valuePrice =  Number(k.Price.@salePrice);
					qtdInOut   =  Number(k.Price.PMix.@qtyEatIn) +  Number(k.Price.PMix.@qtyTakeOut);

					sold = qtdInOut;
					if(k.@operationType == "PROMO"){
	    				 qtdprom = qtdInOut;
					}
					if(k.@operationType == "WASTE"){
	    				 qtdwst  = qtdInOut;
					}
					if(k.@operationType == "SALE"){
	    				 qtdsold = qtdInOut;
					}
				}

				amount = valuePrice * qtdsold;
				var ttl =  calculatePercentage(amount,sumProducts);
				var used = qtdsold + qtdwst + qtdprom;
				addOperationLine(name, qtdsold, amount, API.setOnRight(API.formatNumber(Number(ttl), "#00.0", 5), 5), qtdprom, qtdwst, used);
				totsold   += Number(qtdsold);
				totamount += amount;
				totprom   += qtdprom;
				totwst    += qtdwst;
				totused   += Number(used);
			}

			var name = "GRP " +  API.setOnRight(i.@groupCode, 2)
			var valueTtl =  calculatePercentage(totamount,sumProducts);
			addLine(SEP_SC);
			addOperationLine(name, totsold, totamount, API.setOnRight(API.formatNumber(Number(valueTtl), "#00.0", 5), 5), totprom, totwst, totused);
			addLine(SEP_SC);
			addLine();

			sumProductsSold  += totsold;
			sumProductsAmount+= totamount;
			sumProductsTtl   += totttl;
			sumProductsProm  += totprom;
			sumProductsWst   += totwst;
			sumProductsUsed  += totused;
		}
	}

	/**
	 * Adds an operation line like this:
	 * "HPY HM     1    1.18   1.9    0   0    1"
	 * @param name operation name ("TOTAL ITEMS")
	 * @param sold
	 * @param amount
	 * @param ttl
	 * @param prom
	 * @param wst
	 * @param used
	 */
	function addOperationLine(name, sold, amount, ttl, prom, wst, used)
	{
		var value=0;

		if (Number(amount)<=999.99) {
			value= API.setOnRight(API.formatNumber(Number(amount), "##0.00", 6), 6);
		}
		else {
			if (Number(amount)<=9999.99) {
				value= API.setOnRight(API.formatNumber(Number(amount), "###0.00", 7), 7);
			}
			else {
				value= API.setOnRight(API.formatNumber(Number(amount), "####0.00", 8), 8);
			}
		}


		// 7: name, 3: sep, 3: sold, 6: amount, 12: value
		var line = API.setOnLeft(String(name).substring(0, 7),7)
		+ API.setOnRight(sold, 5)
		+ " "
		+ value
		+ " "
		+ ttl
		+ API.setOnRight(prom, 5)
		+ API.setOnRight(wst, 4)
		+ API.setOnRight(used, 5);

		addLine(line);
	}
}
/* Finish function implements a generic PMIX report */

/**
 * PUBLIC
 * Responsible for formating the PMix UPT By Date report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportPMixUPTByDate(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "PMIX"), "MUPTD") != 0) {
		return getResponse();
	}

	var root = rootPmix;
	genericPMixUPT(config, data, root, RPTPMIXUPTBYDATE);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the PMix UPT By Date StoreWide report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportPMixUPTByDateSW(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "PMIX"), "UPTSW") != 0) {
		return getResponse();
	}

	var root = rootPmix;
	genericPMixUPT(config, data, root, RPTPMIXUPTBYDATESW);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the PMix UPT By Hour report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportPMixUPTByHour(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "PMIX"), "MXUHR") != 0) {
		return getResponse();
	}

	var root = rootPmix;
	genericPMixUPT(config, data, root, RPTPMIXUPTBYHOUR);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the PMix UPT By Hour StoreWide report.
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function reportPMixUPTByHourSW(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "PMIX"), "MXUSW") != 0) {
		return getResponse();
	}

	var root = rootPmix;
	genericPMixUPT(config, data, root, RPTPMIXUPTBYHOURSW);
	return getResponse();
};

/**
 * PRIVATE
 * This function implements a generic PMix UPT report
 * Needed data types: CASH, PMIX
 * @author Celso
 */
function genericPMixUPT(config, data, root, reportType)
{

	var pod = rootCash.@requestPod;
	var title;
	var uptHour = "";

	lineRpt_array = new Array();

	var qtdTCDiscard = rootCash.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash;//.@tc
	var qtdTCs		 = rootCash.CashTotals.Cash.@tc - summNodesAttributeValues(qtdTCDiscard,"tc"); // - rootCash.CashTotals.GiftCouponSales.Cash.@tc;

	switch(reportType) {
    case RPTPMIXUPTBYDATE:
   	   	 title = "P.Mix(x1000)";
   	   	 break;
    case RPTPMIXUPTBYHOUR:
	   	 title = "P.Mix(x1000)-Hr";
		 uptHour = root.@requestTime.substring(0, 2);

		 if(uptHour==""){
			uptHour = "00";
		 }
		 var nodesbegTime = rootHourlySales.DayPartitioning.Segment.(@begTime.substring(0,2)==uptHour);
		 qtdTCs=0;
		 for each (begTime in nodesbegTime) {
		 	if(String(rootHourlySales.StoreTotal.Sales.(@id==begTime.@id).Product.OperationType.(@operationType=="MANAGER" || @operationType=="CREW" )) == ""){
				qtdTCs += Number(rootHourlySales.StoreTotal.Sales.(@id==begTime.@id).@tc);
			}
		 }
       	 break;
    case RPTPMIXUPTBYDATESW:
    	 title = "P.Mix(x1000)";
    	 break;
    case RPTPMIXUPTBYHOURSW:
		 title = "P.Mix(x1000)-Hr";
		 uptHour = root.@requestTime.substring(0, 2);

		 if(uptHour==""){
			uptHour = "00";
		 }
		 var nodesbegTime = rootHourlySales.DayPartitioning.Segment.(@begTime.substring(0,2)==uptHour);
		 qtdTCs=0;
		 for each (begTime in nodesbegTime) {
//		 	if(String(rootHourlySales.StoreTotal.Sales.(@id==begTime.@id).Product.OperationType.(@operationType=="MANAGER" || @operationType=="CREW" )) == ""){
			if(rootHourlySales.StoreTotal.Sales.(@id==begTime.@id).Product.OperationType.(@operationType=="MANAGER" || @operationType=="CREW" ).length() == 0){
				qtdTCs += Number(rootHourlySales.StoreTotal.Sales.(@id==begTime.@id).@tc);
			}
		 }

       	 break;
    default:
   	     title = "ERROR";
       	 break;
	}

	addHeader(rootCash, title, reportType);
	if(uptHour!=""){
		 addLine(center("Hour Fm "+ uptHour +":00 To " + (Number(uptHour)+1) + ":00"));
		 addLine();
	}

	if 	(qtdTCs == 0){
		addLine(center("No Data for the date requested"));
		addLine();
		addFooter(rootCash);
		return;
	}

	// Body of Report
	addLine("No. OF TCs:       " + qtdTCs);
	addLine("Item Code");
	addLine("           Sales       CT           UPT");

	var	sumAmount   = 0;
	var	sumQtdSold  = 0;
	var	sumValueUpt = 0;

	var rootProducts = root.FamilyGroup.(@groupName != "GIFT_COUPON");
	if(rootProducts.length()){
		for each (i in rootProducts) {
			var nodeProduct = i.Product;

			for each (j in nodeProduct) {
				var idProd = j.@id;
				var name 		 = rootPmix.ProductTable.ProductInfo.(@id == idProd).@name;
				var eatinPrice   = j.@eatinPrice;
				var takeoutPrice = j.@takeoutPrice;
				var otherPrice   = j.Product.@otherPrice;
				var rootOperationType = j.OperationType;
				var qtdsold 	= 0;
				var qtdprom 	= 0;
				var qtdwst		= 0;
				var amount 		= 0;
				var qtdInOut 	= 0;
				var flagUpt 	= false;

				for each (k in rootOperationType) {
					var aux = 0;
					if(uptHour!=""){
						var nodesprice = k.Price;
						for each (price in nodesprice){
							if(price.@saleTime == uptHour){
								flagUpt = true;
								aux = Number(String(price.PMix.@netBeforeDiscountEatIn)=="" ? price.PMix.@netAmtEatIn : price.PMix.@netBeforeDiscountEatIn);
								aux += Number(String(price.PMix.@netBeforeDiscountTakeOut)=="" ? price.PMix.@netAmtTakeOu : price.PMix.@netBeforeDiscountTakeOut);
								aux += Number(String(price.PMix.@netBeforeDiscountOther)=="" ? price.PMix.@netAmtOther : price.PMix.@netBeforeDiscountOther);

								qtdInOut += Number(price.PMix.@qtyEatIn) + Number(price.PMix.@qtyTakeOut) + Number(price.PMix.@qtyOther);
							}
						}
					}
					else{
						flagUpt = true;
						aux = Number(String(k.PMix.@netBeforeDiscountEatIn)=="" ? k.PMix.@netAmtEatIn : k.PMix.@netBeforeDiscountEatIn);
						aux += Number(String(k.PMix.@netBeforeDiscountTakeOut)=="" ? k.PMix.@netAmtTakeOu : k.PMix.@netBeforeDiscountTakeOut);
						aux += Number(String(k.PMix.@netBeforeDiscountOther)=="" ? k.PMix.@netAmtOther : k.PMix.@netBeforeDiscountOther);

						qtdInOut = Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}

					if(k.@operationType == "REFUND"){
						amount  -= aux;
						if((uptHour!="") && (flagUpt == true)){
		   				 	qtdsold -= Number(price.PMix.@qtyEatIn) + Number(price.PMix.@qtyTakeOut) + Number(price.PMix.@qtyOther);
		   				 }
		   				else{
							qtdsold -= Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
		   				}
					}
					else{
						amount   += aux;
//						qtdInOut = Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
					}

					if((k.@operationType == "MANAGER") || (k.@operationType == "CREW")){
						qtdsold -= 0;
						amount  -= aux;
					}

					if(k.@operationType == "PROMO"){
						amount  -= aux;
						if((uptHour!="") && (flagUpt == true)){
		   				 	qtdprom += Number(price.PMix.@qtyEatIn) + Number(price.PMix.@qtyTakeOut) + Number(price.PMix.@qtyOther);
		   				}
		   				else{
							qtdprom += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
		   				}
					}

					if(k.@operationType == "WASTE"){
						if((uptHour!="") && (flagUpt == true)){
		   				 	qtdwst += Number(price.PMix.@qtyEatIn) + Number(price.PMix.@qtyTakeOut) + Number(price.PMix.@qtyOther);
		   				}
		   				else{
							qtdwst += Number(k.PMix.@qtyEatIn) + Number(k.PMix.@qtyTakeOut) + Number(k.PMix.@qtyOther);
		   				}
					}
					if((k.@operationType == "SALE") || (k.@operationType == "DISCOUNT")){
	    				 qtdsold += qtdInOut;
					}
				}

				if(flagUpt == true){
					var valueUpt = (1000/qtdTCs)*qtdsold;
					addLineArray(lineRpt_array, idProd, name, amount, qtdsold,  valueUpt);

					sumAmount   += amount;
					sumQtdSold  += qtdsold;
					sumValueUpt += valueUpt;
				}
			}
		}
	}

	addLineUPT(lineRpt_array);

	addLine("TOT. GENERAL:");
	// 10: sep. 6: name, 4: sep, 3: sold, 5: sep, 7: value
	var line = "        "
	+ API.setOnRight(API.formatNumber(Number(sumAmount), "###0.00", 8), 8)
	+ "    "
	+ API.setOnRight(sumQtdSold, 5)
	+ "      "
	+ API.setOnRight(API.formatNumber(Number(sumValueUpt), "###0.00", 8), 8)

	addLine(line);

	addLine();
	addFooter(rootCash);

	return;

	function addLineUPT(linerpt_array)
	{
		linerpt_array.sort(function compareNumbers(a,b){return (Number(a.id) - Number(b.id));})
		for(var i = 0; i < linerpt_array.length; i++) {
			addLine(String(linerpt_array[i].text));
		}
	}

	/**
	 * Adds an operation line like this:
	 * "            Sales       CT           UPT "
     * "3 CHB   								 "
     * "     0.79        1        200.00         "
     * @param array for put a format line
     * @param id product
	 * @param name product
 	 * @param amount
	 * @param sold
	 * @param upt
	 */
	function addLineArray(linerpt_array, id, name, amount, sold,  upt)
	{

		var line = API.setOnRight(id, 6) + " " + API.setOnLeft(String(name).substring(0, 6),6) + "\n";
		line += "        "
		+ API.setOnRight(API.formatNumber(Number(amount), "###0.00", 8), 8)
		+ "    "
		+ API.setOnRight(sold, 5)
		+ "      "
		+ API.setOnRight(API.formatNumber(Number(upt), "###0.00", 8), 8);

		linerpt_array.push({id:Number(id), text:String(line)});
	}
}

/* Finish function implements a generic PMIX UPT report */

/**
 * PUBLIC
 * Responsible for formating the Products Active List report.
 * Needed data types: CASH, PRODS
 * @author Celso Fernandes
 */
function reportProdActiveList(config, data)
{
//	 Active Products List
//   * PRODS (Versao light e sem produtos inativos)
//   * PRODSFULL (Versao full e sem produtos inativos)
//   * PRODUCTDB (product-db.xml completo)
//   * NAMESDB (names-db.xml completo)

	round_array = new Array();
	round_array.push({id:0, text:"ROUND_UP"});
	round_array.push({id:1, text:"ROUND_DOWN"});
	round_array.push({id:2, text:"ROUND_CEILING"});
	round_array.push({id:3, text:"ROUND_FLOOR"});
	round_array.push({id:4, text:"ROUND_HALF_UP"});
	round_array.push({id:5, text:"ROUND_HALF_DOWN"});
	round_array.push({id:6, text:"ROUND_HALF_EVEN"});

	if(init(config, data, Array("CASH", "PRODS"), "PACTL") != 0){
		return getResponse();
	}

	var pod = rootCash.@requestPod;
	addHeader(rootCash, "Product list - Active Only", RPTDUMMY);

	// Body of Report
	addLine();
	addLine("        Tax Table");
	addLine("Index Rd Rate");

	for each (i in rootProduct.TaxTable.TaxType){
		var j = 0;
		while (round_array[j].text != i.Rounding) j++;
		addLine("   " + API.formatNumber(Number(i.TaxId), "00", 2) + "  " + API.formatNumber(Number(round_array[j].id), "00", 2) + "  " + API.formatNumber(Number(i.TaxRate), "#0.00000", 8));
	}

	addLine();
	addLine();
	addLine("        Product list");
	addLine();
	addLine("Code  Product       ET TT   E.Pr   T.Pr");

	for each (i in rootProduct.ProductInfo){
		if(Number(i.@id) < 10000000)
			addLineArray(i.@id, i.@shortName, i.PriceList.Pricing.(@priceCode=="EATIN").@entry, i.PriceList.Pricing.(@priceCode=="TAKEOUT").@entry,  i.PriceList.Pricing.(@priceCode=="EATIN").@price, i.PriceList.Pricing.(@priceCode=="TAKEOUT").@price);
	}

	addLine();
	addFooter(rootCash);

	return getResponse();

	function addLineArray(id, name, et, tt,  epr, tpr)
	{

		var line = API.setOnRight(id, 5)
		+ " "
		+ API.setOnLeft(String(name).substring(0, 12),12)
		line += "  "
		+ API.setOnRight(API.formatNumber(Number(et), "00", 2), 2)
		+ " "
		+ API.setOnRight(API.formatNumber(Number(tt), "00", 2), 2)
		+ "  "
		+ API.setOnRight(API.formatNumber(Number(epr), "#0.00", 5), 5)
		+ "  "
		+ API.setOnRight(API.formatNumber(Number(tpr), "#0.00", 5), 5);

		addLine(line);
	}

};
/* Finish function implements a generic Products report */

function reportOpenOrders(config, data)
{
	round_array = new Array();
	round_array.push({id:0, text:"ROUND_UP"});
	round_array.push({id:1, text:"ROUND_DOWN"});
	round_array.push({id:2, text:"ROUND_CEILING"});
	round_array.push({id:3, text:"ROUND_FLOOR"});
	round_array.push({id:4, text:"ROUND_HALF_UP"});
	round_array.push({id:5, text:"ROUND_HALF_DOWN"});
	round_array.push({id:6, text:"ROUND_HALF_EVEN"});

	if(init(config, data, Array("OPENORDERS"), "PACTL") != 0){
		return getResponse();
	}

	var pod = rootOpenOrders.@requestPod;
	addHeader(rootOpenOrders, "Open Orders Report", RPTDUMMY);

	var operatorName = new Array();
	var cont_operator=0;
	var x=0;
	var flag=0;

	for each (i in rootOpenOrders.Orders.View){
		flag=0;
		for(x=0;x<operatorName.length;x++){
			if(operatorName[x]==i.@operatorName){
				flag=1;
				break;
			}
		}

		if(flag==0){
			operatorName[cont_operator]=i.@operatorName;
			cont_operator++;
		}
	}

	var pod = new Array();
	var cont_pod=0;
	x=0;
	flag=0;

	for each (i in rootOpenOrders.Orders.View){
		flag=0;
		for(x=0;x<pod.length;x++){
			if(pod[x]==i.@pod){
				flag=1;
				break;
			}
		}

		if(flag==0){
			pod[cont_pod]=i.@pod;
			cont_pod++;
		}
	}

	// Body of Report
	var y=0;
	var order_count=0;
	var total_amount=0;
	var flagIsFirst=0;

	for(x=0;x<cont_pod;x++){
		addLine("Type: " + convertPOD(pod[x]) + " Total");

		for(y=0;y<cont_operator;y++){
			flagIsFirst=0;
			for each (i in rootOpenOrders.Orders.View){
				if(operatorName[y]==i.@operatorName && pod[x]==i.@pod){
					if(flagIsFirst==0){
						addLine("Srvr: " + operatorName[y]);
						addLine("Order     Total  Opened   Time");
						flagIsFirst=1;
					}
					addLineArray(i.@orderId,i.@grossAmount,i.@saleTime,Math.floor(Math.abs(((Number(i.ViewTimes.@totalTime)-Number(i.ViewTimes.@orderTime))/1000))));
					order_count++;
					total_amount = Number(total_amount) + Number(i.@grossAmount);
				}
			}
		}
	}

	addLine(SEP_DL);
	addLine(center("Order Totals"));
	addLine(SEP_DL);

	addLine("Order Count: " + order_count);
	addLine("Total Amount: " + API.formatNumber(Number(total_amount), "####0.00", 8));

	addLine();
	addFooter(rootOpenOrders);

	return getResponse();

	function convertPOD(pod)
	{
		switch(Number(pod)){
			case 0:
				return "FRONT_COUNTER";
				break;
			case 1:
				return "DRIVE_THRU";
				break;
			case 2:
				return "WALK_THROUGH";
				break;
			case 3:
				return "DELIVERY";
				break;
			case 4:
				return "COLDKIOSK";
				break;
			case 5:
				return "MCCAFE";
				break;
			case 6:
				return "MCEXPRESS";
				break;
			case 7:
				return "COLDKIOSK_DRINK";
				break;
			case 8:
				return "CSO";
				break;
			case 9:
				return "HOT";
				break;
			case 11:
				return "LOCAL";
				break;
			case 20:
				return "MCD";
				break;
			case 21:
				return "CHIPOTLE";
				break;
			case 22:
				return "BOSTON_MARKET";
				break;
			case 23:
				return "DONATOS";
				break;
			case 24:
				return "POD_UNDEFINED";
				break;
			default:
				return pod;
		}
	}

	function addLineArray(order, total, opened, time)
	{
		var second = (((Number(time)/60)-Math.floor(Number(time)/60))*60)>=10?Math.floor(((Number(time)/60)-Math.floor(Number(time)/60))*60):"0"+Math.floor(((Number(time)/60)-Math.floor(Number(time)/60))*60);
		var line = API.setOnRight(order, 1)
		+ "   "
		+ API.setOnRight(total, 10)
		+ "   "
		+ API.setOnRight(opened.substring(0,2) + ":" + opened.substring(2,4), 5)
		+ "   "
		+ API.setOnLeft(Math.floor(Number(time)/60) + ":" + second,12)

		addLine(line);
	}
};
/**
 * PUBLIC
 * Responsible for formating the Sale FCR report.
 * Needed data types: CASH, PMIX
 * @author Celso Fernandes
 */
function reportSaleFc(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "HOURLYSALES"), "RSLFC") != 0) {
		return getResponse();
	}

	var root = rootHourlySales;
	genericSale(config, data, root, RPTSALEFC);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Sale FCR StoreWide report.
 * Needed data types: CASH, HOURLYSALES
 * @author Celso
 */
function reportSaleFcSW(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "HOURLYSALES"), "SFCSW") != 0) {
		return getResponse();
	}

	var root = rootHourlySales;
	genericSale(config, data, root, RPTSALEFCSW);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Sale Hour report.
 * Needed data types: CASH, HOURLYSALES
 * @author Celso Fernandes
 */
function reportSaleHourByDate(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "HOURLYSALES"), "SHRDT") != 0) {
		return getResponse();
	}

	var root = rootHourlySales;
	genericSale(config, data, root, RPTSALEHOURBYDATE);
	return getResponse();
};


/**
 * PUBLIC
 * Responsible for formating the Sale Hour report.
 * Needed data types: CASH, HOURLYSALES
 * @author Mauricio
 * @since NPS-10575
 */
function reportSaleHourByPeriod(config, data) 
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "HOURLYSALES"), "SHRPRD") != 0) {
		return getResponse();
	}	

	var root = rootHourlySales;    		
	genericSale(config, data, root, RPTSALEHOURBYPERIOD);
	return getResponse();
};


/**
 * PUBLIC
 * Responsible for formating the Sale Hour StoreWide report.
 * Needed data types: CASH, HOURLYSALES
 * @author Celso Fernandes
 */
function reportSaleHourByDateSW(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "HOURLYSALES"), "SHDSW") != 0) {
		return getResponse();
	}

	var root = rootHourlySales;
	genericSale(config, data, root, RPTSALEHOURBYDATESW);
	return getResponse();
};



/**
 * PUBLIC
 * Responsible for formating the Sale Hour StoreWide report.
 * Needed data types: CASH, HOURLYSALES
 * @author Mauricio
 * @since NPS-10575
 */
function reportSaleHourByPeriodSW(config, data) 
{
	//By Period HOURLY SALES
	if(init(config, data, Array("CASH", "HOURLYSALES"), "SHPSW") != 0) {
		return getResponse();
	}	

	var root = rootHourlySales;    		
	genericSale(config, data, root, RPTSALEHOURBYPERIODSW);
	return getResponse();
};




/**
 * PUBLIC
 * Responsible for formating the Sale Average Ticket By Date report.
 * Needed data types: CASH, HOURLYSALES
 * @author Celso Fernandes
 */
function reportSaleAveTckByDate(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "HOURLYSALES"), "SATKD") != 0) {
		return getResponse();
	}

	var root = rootHourlySales
	genericSale(config, data, root, RPTSALEAVETKCDATE);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Sale Average Ticket By Date StoreWide report.
 * Needed data types: CASH, HOURLYSALES
 * @author Celso Fernandes
 */
function reportSaleAveTckByDateSW(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("CASH", "HOURLYSALES"), "STDSW") != 0) {
		return getResponse();
	}

	var root = rootHourlySales;
	genericSale(config, data, root, RPTSALEAVETKCDATESW);
	return getResponse();
};



/**
 * PRIVATE
 * This function implements a generic Sale report
 * Needed data types: CASH, HOURLYSALES
 * @author Celso Fernandes
 */
function genericSale(config, data, root, reportType)
{
    return US_GenericSale(config, data, root, reportType);
}



/**
 * PRIVATE
 * A Bucket data for Hourly Sales Report
 *
 */
function CashBucketData() {
	this.tc = 0;
	this.extTc  = 0;
	this.prodTC = 0;
	this.nonProdTC = 0;

	this.netAmt = 0;
	this.taxAmt = 0;

	this.prodNetAmt = 0;
	this.prodTaxAmt = 0;

	this.amtEmpDiscount = 0;
	this.taxEmpDiscount = 0;

	this.amtRefund = 0;
	this.taxRefund = 0;


	// for our calculation purpose
	this.tcFCDT = 0;
	this.netAmountFCDT = 0;
	this.taxAmountFCDT = 0;

	this.tcDT = 0;
	this.netAmountDT = 0;
	this.taxAmountDT = 0;
}


/**
 * PRIVATE
 * Used for debugging
 *
 */
function CashBucketDbgStr(Bucket) {
	var str = "";

	str = str + "tc = " + Bucket.tc + " ";
	str = str + "extTc = " + Bucket.extTc + " ";
	str = str + "prodTC = " + Bucket.prodTC + " ";
	str = str + "nonProdTC = " + Bucket.nonProdTC + " ";

	str = str + "netAmt = " + Bucket.netAmt + " ";
	str = str + "taxAmt = " + Bucket.taxAmt + " ";

	str = str + "prodNetAmt = " + Bucket.prodNetAmt + " ";
	str = str + "prodNetAmt = " + Bucket.prodNetAmt + " ";

	str = str + "amtEmpDiscount = " + Bucket.amtEmpDiscount + " ";
	str = str + "taxEmpDiscount = " + Bucket.taxEmpDiscount + " ";

	str = str + "amtRefund = " + Bucket.amtRefund + " ";
	str = str + "taxRefund = " + Bucket.taxRefund + " ";

	str = str + "tcFCDT = " + Bucket.tcFCDT + " ";
	str = str + "netAmountFCDT = " + Bucket.netAmountFCDT + " ";
	str = str + "taxAmountFCDT = " + Bucket.taxAmountFCDT + " ";

	str = str + "tcDT = " + Bucket.tcDT + " ";
	str = str + "netAmountDT = " + Bucket.netAmountDT + " ";
	str = str + "taxAmountDT = " + Bucket.taxAmountDT + " ";

	return str;
}

/**
 * PRIVATE
 * Object to hold Total cash data for Hourly report
 */
function CashTotalBucket() {
	this.totAccum 	  	= 0;
	this.totFCDT 		= 0;
	this.totProdSaleFCDT = 0;
	this.totTaxAmountFCDT = 0;
	this.totDT 			= 0;
	this.totProdSaleDT 	= 0;
	this.totTaxAmountDT	= 0;
}

/**
 * PRIVATE
 * Object to hold 1 hour of report data
 */
function HourlyCashBucket () {
	this.Bucket = new Array(4);

	this.Bucket[0] = new CashBucketData;
	this.Bucket[1] = new CashBucketData;
	this.Bucket[2] = new CashBucketData;
	this.Bucket[3] = new CashBucketData;
}


/**
 * PRIVATE
 * JavaScript workaround.  JC only allows pass by reference for non-premimitive
 *   object type.  so instead of passing assary of 24 hours, pass on object that
 *   has array of 24 hours
 * @author Sang Kim
 */
function HourlyPrintModeBucket() {
	this.Mode = new Array(24);

	// set to the default
	for (var i = 0; i < 24; i++) {
		this.Mode[i] = MODE_HOURLY;
	}
}

function DbgHourlyModeStr(HourlyPrintMode) {
	var str;

	str = "";
	for (var i = 0; i < 24; i++) {
		str = str +
			"HR " + String(i + 1) + "=" + HourlyPrintMode.Mode[ i ] + "\n";
	}

	return str;
}


/**
 * PRIVATE
 * function to read Hourly report intervals for US hourly Reports and SOS
 * @author Sang Kim
 */
function ReadReportIntervals(HourlyPrintMode) {
	var i;
	var hr;
	var sKey;
	var val;

	for (i = 0; i < 24; i++) {
		hr = i;
		sKey = "Hour" + String(hr) + "Increment"

		// call to get interval
		val = PosGetSOSIncrement(sKey);

//      API.DbgMessageBox("Key = " + sKey + " Value = " + val);

		switch(Number(val)) {
		case 15:
			HourlyPrintMode.Mode[ i ] = MODE_15MIN;
			break;

		case 30:
			HourlyPrintMode.Mode[ i ] = MODE_30MIN;
			break;

		case 60:
			HourlyPrintMode.Mode[ i ] = MODE_HOURLY;
			break;

		default:
			HourlyPrintMode.Mode[ i ] = MODE_HOURLY;
			break;
		}
	}
}


/**
 * PRIVATE
 * Call to gerenerate Hourly Sales report for US
 * US version allows hourly mode changes (15, 30, 60 minutes)
 * @author Sang Kim
 */
function US_GenericSale(config, data, root, reportType)
{
 	var GIFT_CARD_5$	= "8492";
 	var GIFT_CARD_10$	= "8493";
 	var GIFT_CARD_25$	= "8494";
 	var GIFT_CARD_50$	= "8495";
 	var GIFT_CARD_VAC	= "8460";

	var RELOAD_GIFT_CARD_5$	 	= "8496";
 	var RELOAD_GIFT_CARD_10$	= "8497";
 	var RELOAD_GIFT_CARD_25$	= "8498";
 	var RELOAD_GIFT_CARD_50$	= "8499";
 	var RELOAD_GIFT_CARD_VAC	= "8461";

 	var GIFT_CERT_1$	 = "936";
 	var GIFT_CERT_5$	 = "937";

	var pod = rootCash.@requestPod;
	var title;

	var podDT = root.POD.(@podShort=="DT");
	var podWT = root.POD.(@podShort=="WT");
	var	podFCDT = root.StoreTotal;

	if(root.@errflag=="NODATA") {
		var message = API.getLocalMsg("MSG_REPORT_NO_DATE_FOR_PERIOD");
		addLine("ERROR:");
		addLine(message);
		return;
	}

	// Holds display mode for each hour
	// mode can be 15 min, 30 min, or 1 hour
    var HourlyModes  = new HourlyPrintModeBucket();
    ReadReportIntervals(HourlyModes);

//var str = DbgHourlyModeStr( HourlyModes );
//API.DbgMessageBox(str);


	switch(reportType) {
    case RPTSALEFC:
   	   	 title = "FCR Sales Report";
   	   	 break;
    case RPTSALEFCSW:
	   	 title = "FCR Sales Report";
       	 break;
    case RPTSALEHOURBYDATE:
    case RPTSALEHOURBYPERIOD:
    	 title = "Hourly Sales";
    	 break;
    case RPTSALEHOURBYDATESW:
    case RPTSALEHOURBYPERIODSW:    
		 title = "Hourly Sales";
       	 break;
    case RPTSALEAVETKCDATE:
    	 title = "Avg Ticket";
    	 break;
    case RPTSALEAVETKCDATESW:
		 title = "Avg Ticket";
       	 break;
    default:
   	     title = "ERROR";
       	 break;
	}

	// Add header information		
	addHeader(rootCash, title, reportType);

	var missingDates="";
	if(RPTSALEHOURBYPERIOD==reportType) {
		missingDates=listMissingDates(rootHourlySales.POS);
	}
	else
	if(RPTSALEHOURBYPERIODSW==reportType) {
		if(0==rootHourlySales.POS.length()) {
			missingDates=listMissingDates(rootHourlySales.POS);
		}
		else {
			missingDates=listMissingDatesSW(rootHourlySales.POS);
		}
	}
	addMissingDates(reportType,String(missingDates));

	//
	//	Body
	//
	var nodesSalesSize 	= podFCDT.Sales.length();
	var nodesSales 		= podFCDT.Sales;

	//
	// if no order data
	//
	if(nodesSales.@TC == 0) {
		addLine(center("No TCs for reporting"));
		addLine();
		addFooter(rootCash);
		return;
	}

	//
	// Data found
	// Print report caption line
	RunReportCaption()


	//
	//  Data Body
	//
	var TotalBucket = new CashTotalBucket();
	RunBody(TotalBucket);


	//
	//  Total line
	//
	addLine();
	PrintTotalLine(reportType, TotalBucket);

	// add footer information
	addFooter(rootCash);

	return;




	/**
	 *  Runs report Body information
	 *  General algorithm is :
	 *  Load 1 hour data (up to 4 buckets) then proces afterward
	 */
	function RunBody(TotalBucket) {

		// place holder for 1 hour of bucket data
		var HourlyBucket;

		// printing mode - 1hr, 30min, 15 min
		var PrintMode;

		// create a new time tracking object
		// this is required because javaScript pass by reference only for
		// non-primitive objects
		var DispTime = new DisplayTime();

		var nStartHr = 0;
		var nEndHr   = 24;

		DispTime.Hour = nStartHr;
		DispTime.Min  = 0;

		var hrIdx = nStartHr;

		while (hrIdx < nEndHr) {

			// print mode for this hour
			PrintMode = HourlyModes.Mode[ hrIdx ];

// API.DbgMessageBox("Idx = " + hrIdx + " ReturnCode = " + PrintMode);

			// Create a bucket, load it with the 1 hour bucket data
			HourlyBucket = new HourlyCashBucket();

            // load the bucket with data for this hour
			CashLoadBucket(root, hrIdx, HourlyBucket);

			// Print the detail line based on the Print mode
			ReportLine(reportType, DispTime, PrintMode, HourlyBucket, TotalBucket);

			hrIdx++;
		}
	} // function RunBody


	/**
	 * PRIVATE
	 * Reads data for the passed hour, fills 1 hour worth of bucket data
	 */
	function CashLoadBucket(root, hour, HourData) {
		var nodesDayPart 	= root.DayPartitioning.Segment;
		var nodesDayPartSize= Number(nodesDayPart.length());

		var hourSegment   = 0;
		var minuteSegment = 0;
		var idxSegment    = 0;
		var bDataFound    = false;

		//  Find the data that belongs
		for(var k = 0; k < nodesDayPartSize; k++) {
			// search for the data that matches the hour that we are trying to pickup data for
			if(Number(String(nodesDayPart[k].@begTime).substring(0,2)) == hour){
				nodeSegment  = nodesDayPart[k];

				// from XML segment, pickup the hour and minute
				hourSegment   = String(nodeSegment.@begTime).substring(0,2);
				minuteSegment = String(nodeSegment.@begTime).substring(2,4);

				// we found a data, preserve the starting index for our data
				bDataFound = true;

				// this is the search starting point (data is assumed to be sorted by begTime)
				idxSegment = k;
				break;
			}
		}

		// while there are data for this hour, peek processing the buckets
		while(bDataFound == true) {

			// Preserve id for this segment
			var idSale = nodeSegment.@id;

			// XML to object conversion. Read the hour XML segmented data,
			// read it into Bucket data object
			var aBucketData = new CashBucketData();

			// Load the data bucket from XML
			CashLoadBucketFromSegment(aBucketData, idSale);

// Debugging point, verify that the data transfer from XML into Bucket is correct
//var strBuc =  CashBucketDbgStr(aBucketData);
//API.DbgMessageBox(strBuc);

			// look at the minute of the data,
			// add the fetched value to the proper bucket
			var NumMinute = Number(minuteSegment);

			// accumulate the proper bucket data within hourly bucket
			switch(NumMinute) {
			case 0:
				AccumCashBucket(HourData.Bucket[0],aBucketData);
				break;

			case 15:
				AccumCashBucket(HourData.Bucket[1],aBucketData);
				break;

			case 30:
				AccumCashBucket(HourData.Bucket[2],aBucketData);
				break;

			case 45:
				AccumCashBucket(HourData.Bucket[3],aBucketData);
				break;
			}

			// search while data still exists
			idxSegment++;

			if(Number(idxSegment) < Number(nodesDayPartSize)) {

				// if data still exists for this perticular hour, keep processing
				if (Number(String(nodesDayPart[idxSegment].@begTime).substring(0,2)) == hour) {
					nodeSegment  	= nodesDayPart[idxSegment];

					hourSegment 	= String(nodeSegment.@begTime).substring(0,2);
					minuteSegment   = String(nodeSegment.@begTime).substring(2,4);

					// Keep searching in a loop
					bDataFound = true;
				} else {
					// no more data for this perticular hour
					bDataFound = false;
				}
			} else {
				bDataFound = false;
			} // if(Number(idxSegment) < Number(nodesDayPartSize))
		} // while(bDataFound == true) {
	}

	/*
	 * PRIVATE
	 * Displays Report data caption/title bar
	 */
	function RunReportCaption() {

		// Body of Report
		if( (reportType == RPTSALEHOURBYDATE) ||
			(reportType == RPTSALEHOURBYDATESW) ||
			(reportType == RPTSALEHOURBYPERIOD) || 
			(reportType == RPTSALEHOURBYPERIODSW) ||
			(reportType == RPTSALEFC) ||
			(reportType == RPTSALEFCSW)) {

			addLine(" Time   T/C Prod Sale      A/C    ACCUM");

			if(	(reportType == RPTSALEFC) ||
				(reportType == RPTSALEFCSW)) {
				addLine("      ORTM ASTM CATM      TOTM        ");
			}
		}
		else{
			addLine(" Time   T/C      Sale  DT T/C   DT Sale");
		}
	} // RunReportCaption


	/*
	 * PRIVATE
	 * Walk through refund and discount data
	 * get sum of all the sales made to these two sales types
	 *
	 */
	function CalculateSalesNodeDiscard(nodeSales, BucketData) {
		var nodesProduct     = nodeSales.Product;
		var nodesProductSize = nodesProduct.length();

		// Walk though all the product XML nodes
		for(var j = 0; j < nodesProductSize; j++) {
			var nodesOperationType = nodesProduct[j].OperationType;

			var nodesDiscardMgrCrew = nodesProduct[j].(@id!=GIFT_CERT_1$  &&
					@id!=GIFT_CERT_5$  &&
					@id!=GIFT_CARD_5$  &&
					@id!=GIFT_CARD_10$ &&
					@id!=GIFT_CARD_25$ &&
					@id!=GIFT_CARD_50$ &&
					@id!=RELOAD_GIFT_CARD_5$ &&
					@id!=RELOAD_GIFT_CARD_VAC &&
					@id!=GIFT_CARD_VAC &&
					@id!=RELOAD_GIFT_CARD_10$ &&
					@id!=RELOAD_GIFT_CARD_25$ &&
					@id!=RELOAD_GIFT_CARD_50$
					).OperationType.(@operationType=="MANAGER" || @operationType=="CREW").PMix.(@netAmount=="0.00");

			var nodesDiscardRefund = nodesProduct[j].(@id!=GIFT_CERT_1$  &&
					@id!=GIFT_CERT_5$  &&
					@id!=GIFT_CARD_5$  &&
					@id!=GIFT_CARD_10$ &&
					@id!=GIFT_CARD_25$ &&
					@id!=GIFT_CARD_50$ &&
					@id!=RELOAD_GIFT_CARD_VAC &&
					@id!=GIFT_CARD_VAC &&					
					@id!=RELOAD_GIFT_CARD_5$ &&
					@id!=RELOAD_GIFT_CARD_10$ &&
					@id!=RELOAD_GIFT_CARD_25$ &&
					@id!=RELOAD_GIFT_CARD_50$
					).OperationType.(@operationType=="REFUND");

			// summation of all discounts
			if(nodesDiscardMgrCrew.length() != 0){
				BucketData.amtEmpDiscount += summNodesAttributeValues(nodesDiscardMgrCrew.PMix,"netAmount");
				BucketData.taxEmpDiscount += summNodesAttributeValues(nodesDiscardMgrCrew.PMix,"taxAmount");
			}

			// summation of all refunds
			if(nodesDiscardRefund.length() != 0){
				BucketData.amtRefund += summNodesAttributeValues(nodesDiscardRefund.PMix,"netAmount");
				BucketData.taxRefund += summNodesAttributeValues(nodesDiscardRefund.PMix,"taxAmount");
			}

		}  // for

	} // CalculateSalesNodeDiscard

	/*
	 * PRIVATE
	 * Loads 1 data bucket by sychronizing the time segment
	 * and sales data with the ID, then pick up all required data
	 * into the object structure
	 */
	function CashLoadBucketFromSegment(aBucketData, idSale) {

		// find the sales node with the same ID as the time segment
		var nodeSales 		= podFCDT.Sales.(@id == idSale);

		var nodesDT			= podDT.StoreTotal.Sales.(@id==idSale);
		var nodesWT			= podWT.StoreTotal.Sales.(@id==idSale);


		// Walk through the structure, calculate refunds and discounts
		CalculateSalesNodeDiscard(nodeSales, aBucketData);

		// load the bucket from the time segment and sale node
		aBucketData.tc = Number(nodeSales.@tc);
		aBucketData.extTc  = Number(nodeSales.@extTC);

		aBucketData.prodTC = Number(nodeSales.@ProdTC);
		aBucketData.nonProdTC = Number(nodeSales.@nonProdTC);

		aBucketData.netAmt = Number(nodeSales.@netAmount);
		aBucketData.taxAmt = Number(nodeSales.@taxAmount);
		aBucketData.prodNetAmt = Number(nodeSales.@productNetAmount);
		aBucketData.prodTaxAmt = Number(nodeSales.@productTaxAmount);

		// After loading data, do simple calculation for later use
		aBucketData.tcFCDT 		   = aBucketData.extTc

		aBucketData.netAmountFCDT  += aBucketData.prodNetAmt;
		aBucketData.taxAmountFCDT  += aBucketData.prodTaxAmt;


		//  if any, Pick up drive though and walkthrough data
		if((String(nodesDT) != "") || (String(nodesWT) != "")) {
			if(String(nodesDT) != "") {
				aBucketData.tcDT 		  = Number(nodesDT.@tc);
				aBucketData.netAmountDT   = Number(nodesDT.@productNetAmount);
				aBucketData.taxAmountDT   = Number(nodesDT.@productTaxAmount);
			}
			else {
				aBucketData.tcDT 		  = Number(nodesWT.@tc);
				aBucketData.netAmountDT   = Number(nodesWT.@productNetAmount);
				aBucketData.taxAmountDT   = Number(nodesWT.@productTaxAmount);
			}
		}

	} // CashLoadBucketFromSegment



	/*
	 * PRIVATE
	 * Accumulate values from a bucket data
	 *
	 */
	function AccumCashBucket(Tgt, Src) {
		Tgt.tc			+= Number(Src.tc);
		Tgt.extTc		+= Number(Src.extTc);
		Tgt.prodTC		+= Number(Src.prodTc);
		Tgt.nonProdTC	+= Number(Src.nonProdTc);

		Tgt.netAmt		+= Number(Src.netAmt);
		Tgt.taxAmt		+= Number(Src.taxAmt);

		Tgt.prodNetAmt	+= Number(Src.prodNetAmt);
		Tgt.prodTaxAmt	+= Number(Src.prodTaxAmt);

		Tgt.amtEmpDiscount += Number(Src.amtEmpDiscount);
		Tgt.taxEmpDiscount += Number(Src.taxEmpDiscount);

		Tgt.amtRefund += Number(Src.amtRefund);
		Tgt.taxRefund += Number(Src.taxRefund);

		Tgt.tcFCDT			+= Number(Src.tcFCDT);
		Tgt.netAmountFCDT	+= Number(Src.netAmountFCDT);
		Tgt.taxAmountFCDT	+= Number(Src.taxAmountFCDT);

		Tgt.tcDT		+= Number(Src.tcDT);
		Tgt.netAmountDT += Number(Src.netAmountDT);
		Tgt.taxAmountDT += Number(Src.taxAmountDT);
	}


	/*
	 * PRIVATE
	 * Prints 1 line of detail based on hourly mode
	 * bucket accumulation is also done based ob hourly sales mode
	 */
	function ReportLine(reportType, DispTime, PrintMode, HourlyBucket, TotalBucket) {

		var AccumBucket1;
		var AccumBucket2;

		switch(PrintMode) {
		case MODE_HOURLY:
			AccumBucket1 = new CashBucketData();

			// get all 4 buckets, add into another bucket to get summary info
			AccumCashBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumCashBucket(AccumBucket1, HourlyBucket.Bucket[1]);
			AccumCashBucket(AccumBucket1, HourlyBucket.Bucket[2]);
			AccumCashBucket(AccumBucket1, HourlyBucket.Bucket[3]);

			AccumTotalCash(AccumBucket1, TotalBucket);

			DispTime.Min = 0;
			DispTime.Hour = DispTime.Hour + 1;

			PrintDetailLine(reportType, DispTime, AccumBucket1, TotalBucket);
			break;

		case MODE_30MIN:
			AccumBucket1 = new CashBucketData();
			AccumBucket2 = new CashBucketData();

			// get all 4 buckets, add into another bucket to get summary info
			AccumCashBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumCashBucket(AccumBucket1, HourlyBucket.Bucket[1]);

			AccumTotalCash(AccumBucket1, TotalBucket);

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLine(reportType, DispTime, AccumBucket1, TotalBucket);

			AccumCashBucket(AccumBucket2, HourlyBucket.Bucket[2]);
			AccumCashBucket(AccumBucket2, HourlyBucket.Bucket[3]);

			AccumTotalCash(AccumBucket2, TotalBucket);

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLine(reportType, DispTime, AccumBucket2, TotalBucket);
			break;

		case MODE_15MIN:
			AccumTotalCash(HourlyBucket.Bucket[0], TotalBucket);
			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLine(reportType, DispTime, HourlyBucket.Bucket[0], TotalBucket);


			AccumTotalCash(HourlyBucket.Bucket[1], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLine(reportType, DispTime, HourlyBucket.Bucket[1], TotalBucket);


			AccumTotalCash(HourlyBucket.Bucket[2], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLine(reportType, DispTime, HourlyBucket.Bucket[2], TotalBucket);


			AccumTotalCash(HourlyBucket.Bucket[3], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLine(reportType, DispTime, HourlyBucket.Bucket[3], TotalBucket);
			break;
		};

	}

	/**
	 * PRIVATE
	 * Prints total lines
	 */
	function PrintTotalLine(reportType, TotalBucket) {
		var showLine = (TotalBucket.totFCDT > 0);

		if(	(reportType == RPTSALEHOURBYDATE) ||
			(reportType == RPTSALEHOURBYDATESW) ||
			(reportType == RPTSALEHOURBYPERIOD) || 
			(reportType == RPTSALEHOURBYPERIODSW) ||
			(reportType == RPTSALEFC) ||
			(reportType == RPTSALEFCSW)){

			(TotalBucket.totFCDT >  0) ?
				addLine(" Total " +
					API.formatNumber(Number(TotalBucket.totFCDT), "###0", 4) + "  " +
					API.formatNumber(Number(TotalBucket.totProdSaleFCDT), "####0.00", 8) + " " +
					API.formatNumber(Number(TotalBucket.totProdSaleFCDT/TotalBucket.totFCDT), "####0.00", 8) + " " +
					API.formatNumber(Number(TotalBucket.totAccum), "####0.00", 8)) : 0;

			if(	(reportType == RPTSALEFC) ||
				(reportType == RPTSALEFCSW)){
				addLine("        " +
					API.formatNumber(0, "00", 2) + "   " +
					API.formatNumber(0, "00", 2) + "   " +
					API.formatNumber(0, "00", 2) + "        " +
					API.formatNumber(0, "00", 2));
			}
			addLine();
		}
		else{
			(showLine >  0) ?
				addLine(" Total " +
					API.formatNumber(Number(TotalBucket.totFCDT), "###0", 4) + " " +
					API.formatNumber(Number(TotalBucket.totProdSaleFCDT+TotalBucket.totTaxAmountFCDT), "#####0.00", 9)+ "    " +
					API.formatNumber(Number(TotalBucket.totDT), "###0", 4) + " " +
					API.formatNumber(Number(TotalBucket.totProdSaleDT+TotalBucket.totTaxAmountDT), "#####0.00", 9)) : 0;

			var brkFastTCs   = summNodesAttributeValues(rootCash.CashStatistics.SaleType.DayPart.(@id=="BREAKFAST_MENU" || @id=="BREAKFAST_DAY_MENU").CashTotals.Cash, "tc");
			var brkFastSales = summNodesAttributeValues(rootCash.CashStatistics.SaleType.DayPart.(@id=="BREAKFAST_MENU" || @id=="BREAKFAST_DAY_MENU").CashTotals.Cash, "netAmount") +
					summNodesAttributeValues(rootCash.CashStatistics.SaleType.DayPart.(@id=="BREAKFAST_MENU" || @id=="BREAKFAST_DAY_MENU").CashTotals.Cash, "taxAmount");

			addLine(" Breakfast TCs:   " + API.formatNumber(brkFastTCs, "#######0", 8));
			addLine(" Breakfast Sales: " + API.formatNumber(Number(brkFastSales), "#####0.0", 8));
		}

	}

	/*
     * PRIVATE
	 *	Prints single detail line
	 *  only if transaction count is > 0 for the data
	 */
	function PrintDetailLine(reportType, DispTime, Bucket, TotalBucket) {

		var showLine = (Bucket.tcFCDT > 0);
		//var showLine = 1;

		if(	(reportType == RPTSALEHOURBYDATE)	||
			(reportType == RPTSALEHOURBYDATESW) ||
			(reportType == RPTSALEHOURBYPERIOD)	||
			(reportType == RPTSALEHOURBYPERIODSW) ||
			(reportType == RPTSALEFC)			||
			(reportType == RPTSALEFCSW)) {

			(showLine >  0) ?
				addLine(
					" " +
					API.formatNumber(DispTime.Hour, "00", 2) + ":" +
					API.formatNumber(DispTime.Min, "00", 2)  + " " +
					API.formatNumber(Number(Bucket.tcFCDT), "###0", 4) + "  " +
					API.formatNumber(Number(Bucket.netAmountFCDT), "####0.00", 8) + " " +
					API.formatNumber(Number(Bucket.netAmountFCDT/Bucket.tcFCDT), "####0.00", 8) + " " +
					API.formatNumber(Number(TotalBucket.totAccum), "####0.00", 8)):0;

			if(	(reportType == RPTSALEFC) ||
				(reportType == RPTSALEFCSW)){

				(showLine >  0) ?
					addLine(" " +
						API.formatNumber(DispTime.Hour, "00", 2) + ":" +
						API.formatNumber(DispTime.Min, "00", 2)  + " " +
						API.formatNumber(Number(Bucket.tcFCDT), "###0", 4) + "  " +
						API.formatNumber(Bucket.netAmountFCDT+Bucket.taxAmountFCDT, "####0.00", 8) + "    " +
						API.formatNumber(Bucket.tcDT, "###0", 4) + "  " +
						API.formatNumber(Bucket.netAmountDT+Bucket.taxAmountDT, "####0.00", 8)):0;
			}
		}
		else{
			(showLine >  0) ?
				addLine(" " +
					API.formatNumber(DispTime.Hour, "00", 2) + ":" +
					API.formatNumber(DispTime.Min, "00", 2)  + " " +
					API.formatNumber(Bucket.tcFCDT, "###0", 4) + "  " +
					API.formatNumber(Bucket.netAmountFCDT+Bucket.taxAmountFCDT, "####0.00", 8) + "    " +
					API.formatNumber(Bucket.tcDT, "###0", 4) + "  " +
					API.formatNumber(Bucket.netAmountDT+Bucket.taxAmountDT, "####0.00", 8)) : 0;
		}
	}


	/*
	 * PRIVATE
	 * Accumulate bucket data into
	 * total object
	 */
	function AccumTotalCash(Bucket, TotalBucket) {
		// adds all bucket data into the total data
		TotalBucket.totAccum 	  	 += Number(Bucket.netAmountFCDT);
		TotalBucket.totFCDT 		 += Number(Bucket.tcFCDT);
		TotalBucket.totProdSaleFCDT  += Number(Bucket.netAmountFCDT);
		TotalBucket.totTaxAmountFCDT += Number(Bucket.taxAmountFCDT);
		TotalBucket.totDT 			 += Number(Bucket.tcDT);
		TotalBucket.totProdSaleDT 	 += Number(Bucket.netAmountDT);
		TotalBucket.totTaxAmountDT	 += Number(Bucket.taxAmountDT);
	}


} // US_GenericSale


/* Finish function implements a generic SALE report */

//##########################
// Report Speed Of Service
//##########################


/**
 * PUBLIC
 * Responsible for formating the Sale FCR report By Date.
 * Needed data types: CASH, SOS
 * @author Celso Fernandes
 */
function reportSosFc(config, data)
{
	if(init(config, data, Array("CASH","SOS"), "RSSFC") != 0){
		return getResponse();
	}

	genericSos(config, data, rootSOS, RPTSOSFC);

	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the DRIVE-THRU SALES REPORT - HOURLY.
 * Needed data types: CASH, SOS
 * @author Celso
 */
function reportSosDTHourly(config, data)
{
	if(init(config, data, Array("CASH","SOS"), "SDTHL") != 0){
		return getResponse();
	}

	genericSos(config, data, rootSOS, RPTSOSDTHOUR);

	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the DRIVE THRU DIAGNOSTIC REPORT.
 * Needed data types: CASH, SOS
 * @author Celso
 */
function reportSosDTDiagnostic(config, data)
{

 	if(init(config, data, Array("CASH","SOS"), "SDTDC") != 0){
		return getResponse();
	}
	genericSos(config, data, rootSOS, RPTSOSDTDIAG);

	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the KVS TIMING REPORT FOR PRIMARY (MFY).
 * Needed data types: CASH, SOS
 * @author Celso
 */
 function reportSosMfy(config, data)
 {

 	if(init(config, data, Array("CASH","SOS"), "RSMFY") != 0){
		return getResponse();
	}

	genericSos(config, data, rootSOS, RPTSOSMFY);

	return getResponse();
};


/**
 * PUBLIC
 * Responsible for formating the McCafe TIMING REPORT FOR (CBB).
 * Needed data types: CASH, SOS
 * @author Me
 */
 function reportSosCbb(config, data) {
     if(init(config, data, Array("CASH","SOS"), "RSCBB") != 0){
          return getResponse();
     }
     genericSos(config, data, rootSOS, RPTSOSCBB);
     return getResponse();
};
/**
 * PRIVATE
 * Function used for Hourly SOS report data object abstration
 * 4 buckets in an hour, and this object holds the numbers
 * @author Sang Kim
 */
function SOSHourData() {
	this.Bucket = new Array(4);

	this.Bucket[0] = new SOSBucketData;
	this.Bucket[1] = new SOSBucketData;
	this.Bucket[2] = new SOSBucketData;
	this.Bucket[3] = new SOSBucketData;
};

/**
 * PRIVATE
 * Debugging helper.  Converts all object data into a long string.
 * @author Sang Kim
 */
function SOSBucketDbgStr(Bucket) {
	var str;

	str = "";
	str = str + "TC=" + Bucket.totTc + " ";
	str = str + "totProdSale=" + Bucket.totProdSale + " ";
	str = str + "totcars=" + Bucket.totcars + " ";

	str = str + "untilTotal=" + Bucket.untilTotal + " ";
	str = str + "untilStore=" + Bucket.untilStore + " ";
	str = str + "untilRecall=" + Bucket.untilRecall + " ";
	str = str + "untilPay=" + Bucket.untilPay + " ";
	str = str + "untilCloseDrawer=" + Bucket.untilCloseDrawer + " ";
	str = str + "untilServe=" + Bucket.untilServe + " ";
	str = str + "totalTime=" + Bucket.totalTime + " ";

	str = str + "itemsCount=" + Bucket.itemsCount + " ";

	str = str + "tcOverOrderPreset=" + Bucket.tcOverOrderPreset + " ";
	str = str + "tcOverLinePreset=" + Bucket.tcOverLinePreset + " ";
	str = str + "tcOverCashPreset=" + Bucket.tcOverCashPreset + " ";

	str = str + "tcOverPresentationPreset=" + Bucket.tcOverPresentationPreset + " ";
	str = str + "tcOverTotalPreset=" + Bucket.tcOverTotalPreset + " ";
	str = str + "tcOverStorePreset=" + Bucket.tcOverStorePreset + " ";

	str = str + "undoTime=" + Bucket.undoTime + " ";
	str = str + "heldTime=" + Bucket.heldTime + " ";

	str = str + "tcUnder25=" + Bucket.tcUnder25 + " ";
	str = str + "tcOver50=" + Bucket.tcOver50 + " ";
	str = str + "tcHeld=" + Bucket.tcHeld + " ";

	str = str + "hotTc=" + Bucket.hotTc + " ";
	str = str + "hotUntilStore=" + Bucket.hotUntilStore + " ";
	str = str + "hotUntilRecall=" + Bucket.hotUntilRecall + " ";
	str = str + "tcOverHoldPreset=" + Bucket.tcOverHoldPreset + " ";

	return str;
};

/*
 * Used to take a peek at Houly buckets
 * @author Sang Kim
 */
function SOSHourDataDbgStr( HourData ) {
	var bucket1 = SOSBucketDbgStr( HourData.Bucket[0] );
	var bucket2 = SOSBucketDbgStr( HourData.Bucket[1] );
	var bucket3 = SOSBucketDbgStr( HourData.Bucket[2] );
	var bucket4 = SOSBucketDbgStr( HourData.Bucket[3] );

	var sum =
		"\n[0]\n" + bucket1 +
		"\n[1]\n" + bucket2 +
		"\n[2]\n" + bucket3 +
		"\n[3]\n" + bucket4;

	return sum;
}

/**
 * PRIVATE
 * Loads a single bucket data from XML segment
 * A additional layer for debugging stage
 * @author Sang Kim
 */
function SOSLoadBucketFromSegment(BucketData, nodeServiceTime) {

	// Accumulate values by Segment
	BucketData.totTc 		  		= Number(nodeServiceTime.@tc);
	BucketData.totProdSale   		= Number(nodeServiceTime.@totalAmount);
	BucketData.totcars   			= Number(nodeServiceTime.@cars);

	BucketData.untilTotal			= Number(nodeServiceTime.@untilTotal)/1000;
	BucketData.untilStore			= Number(nodeServiceTime.@untilStore)/1000;
	BucketData.untilRecall			= Number(nodeServiceTime.@untilRecall)/1000;
	BucketData.untilPay				= Number(nodeServiceTime.@untilPay)/1000;
	BucketData.untilCloseDrawer		= Number(nodeServiceTime.@untilCloseDrawer)/1000;
	BucketData.untilServe			= Number(nodeServiceTime.@untilServe)/1000;
	BucketData.untilDeliver			= Number(nodeServiceTime.@untilDeliver) / 1000;
	BucketData.totalTime			= Number(nodeServiceTime.@totalTime)/1000;

	BucketData.itemsCount			= Number(nodeServiceTime.@itemsCount);

	BucketData.tcOverOrderPreset	= Number(nodeServiceTime.@tcOverOrderPreset);
	BucketData.tcOverLinePreset		= Number(nodeServiceTime.@tcOverLinePreset);
	BucketData.tcOverCashPreset		= Number(nodeServiceTime.@tcOverCashPreset);
	BucketData.tcOverPresentationPreset= Number(nodeServiceTime.@tcOverPresentationPreset);
	BucketData.tcOverTotalPreset	= Number(nodeServiceTime.@tcOverTotalPreset);
	BucketData.tcOverStorePreset	= Number(nodeServiceTime.@tcOverStorePreset);

	BucketData.undoTime				= Number(nodeServiceTime.ProductionTime.@undoTime)/1000;
	BucketData.heldTime				= Number(nodeServiceTime.ProductionTime.@heldTime)/1000;
	BucketData.tcUnder25			= Number(nodeServiceTime.ProductionTime.@tcUnder25);
	BucketData.tcOver50			    = Number(nodeServiceTime.ProductionTime.@tcOver50);
	BucketData.tcHeld				= Number(nodeServiceTime.ProductionTime.@tcHeld);

	BucketData.hotTc				= Number(nodeServiceTime.ProductionTime.@hotTc);
	BucketData.hotUntilStore		= Number(nodeServiceTime.ProductionTime.@hotUntilStore)/1000;
	BucketData.hotUntilRecall		= Number(nodeServiceTime.ProductionTime.@hotUntilRecall)/1000;
	BucketData.tcOverHoldPreset 	= Number(nodeServiceTime.ProductionTime.@tcOverHoldPreset);
     /* added for expansion */
     BucketData.tcOverTotalPresetCBB         = Number(nodeServiceTime.@overTotalTargetCBB);
     BucketData.tcUnderTotalPresetCBB        = Number(nodeServiceTime.@underTotalTargetCBB);
     BucketData.tcOverPresentationPresetCBB  = Number(nodeServiceTime.@overPresentationTargetCBB);
     BucketData.tcUnderPresentationPresetCBB = Number(nodeServiceTime.@underPresentationTargetCBB);
     BucketData.tcOverTotal                  = Number(nodeServiceTime.ProductionTime.@tcOverTotalTimeCBB);
     BucketData.tcUndrTotal                  = Number(nodeServiceTime.ProductionTime.@tcUnderTotalTimeCBB);
}

function CalculateServA(bucketData, serviceTime, servicTarget)
{
	if(g_segmentData != null && g_segmentData != undefined)
	{
		//Getting appropriate segment from segmentData
		var xmlSegment = g_segmentData.Segment.(@begTime == serviceTime.@begTime);
		if(xmlSegment != null && xmlSegment != undefined)
		{
			for each(Order in xmlSegment.Order)
			{
				if(Number(Order.@servic) <= Number(servicTarget))
				{
					bucketData.totServA++;
				}
			}
		}
	}
}

function CalculateOepeA(bucketData, serviceTime, oepeTarget)
{
	if(g_segmentData != null && g_segmentData != undefined)
	{
		//Getting appropriate segment from segmentData
		var xmlSegment = g_segmentData.Segment.(@begTime == serviceTime.@begTime);
		if(xmlSegment != null && xmlSegment != undefined)
		{
			for each(Order in xmlSegment.Order)
			{
				var total = Number(Order.@cash) + Number(Order.@pnst) + Number(Order.@oecb);
				if(total <= Number(oepeTarget))
				{
					bucketData.totOepeA++;
				}
			}
		}
	}
}

/**
 * PRIVATE
 * Adds values from Src bucket into Target bucket
 * @author Sang Kim
 */
function AccumBucket(Tgt, Src) {

	Tgt.totTc 		  		+= Number(Src.totTc);
	Tgt.totProdSale   		+= Number(Src.totProdSale);
	Tgt.totcars   			+= Number(Src.totcars);

	Tgt.untilTotal			+= Number(Src.untilTotal);
	Tgt.untilStore			+= Number(Src.untilStore);
	Tgt.untilRecall			+= Number(Src.untilRecall);
	Tgt.untilPay			+= Number(Src.untilPay);
	Tgt.untilCloseDrawer	+= Number(Src.untilCloseDrawer);
	Tgt.untilServe			+= Number(Src.untilServe);
	Tgt.untilDeliver		+= Number(Src.untilDeliver);
	Tgt.totalTime			+= Number(Src.totalTime);

	Tgt.itemsCount			+= Number(Src.itemsCount);

	Tgt.tcOverOrderPreset	+= Number(Src.tcOverOrderPreset);
	Tgt.tcOverLinePreset	+= Number(Src.tcOverLinePreset);
	Tgt.tcOverCashPreset	+= Number(Src.tcOverCashPreset);
	Tgt.tcOverPresentationPreset += Number(Src.tcOverPresentationPreset);
	Tgt.tcOverTotalPreset	+= Number(Src.tcOverTotalPreset);
	Tgt.tcOverStorePreset	+= Number(Src.tcOverStorePreset);

	Tgt.undoTime			+= Number(Src.undoTime);
	Tgt.heldTime			+= Number(Src.heldTime);
	Tgt.tcUnder25			+= Number(Src.tcUnder25);
	Tgt.tcOver50			+= Number(Src.tcOver50);
	Tgt.tcHeld				+= Number(Src.tcHeld);

	Tgt.hotTc				+= Number(Src.hotTc);
	Tgt.hotUntilStore		+= Number(Src.hotUntilStore);
	Tgt.hotUntilRecall		+= Number(Src.hotUntilRecall);
	Tgt.tcOverHoldPreset 	+= Number(Src.tcOverHoldPreset);
     /* added for expansion */
     Tgt.tcOverTotal          += Number(Src.tcOverTotal);
     Tgt.tcUndrTotal          += Number(Src.tcUndrTotal);
	 
	 Tgt.totServA			+= Number(Src.totServA);
	 Tgt.totOepeA			+= Number(Src.totOepeA);
}

/**
 * PRIVATE
 * Object for keeping total information for bucket processing
 *
 * @author Sang Kim
 */
function SOSTotalBucket() {
	this.totAvc_ac		= 0;
	this.totAccum		= 0;
	this.totAccumTc		= 0;
	this.totAccumcars	= 0;
	this.totAccumtts	= 0;
	this.totAccumhld	= 0;
	this.totAccumOepea	= 0;
	
	this.FCtotProdSale	= 0;
	this.FCtotTc		= 0;
	this.FCtotAvc_ac	= 0;
	this.FCovra			= 0;
	this.FCpvtotl		= 0;
	this.FCtotAccum		= 0;
	this.FCot			= 0;
	this.FCcash			= 0;
	this.FCpnst			= 0;
	this.FCtotl			= 0;
	this.FcServA		= 0;
	this.FcOrb			= 0;
	this.FcServic		= 0;

	this.mfytctot 		= 0;
	this.mfysntot 		= 0;
	this.mfyavgtot 		= 0;
	this.mfyttstot 		= 0;
	this.mfyovr50tot 	= 0;
	this.mfyundr25tot 	= 0;
     this.cbbtctot       = 0;
     this.cbbsntot       = 0;
     this.cbbavgtot      = 0;
     this.cbbttstot      = 0;
     this.cbbovr50tot    = 0;
     this.cbbundr25tot   = 0;

	this.totot			= 0;
	this.totcash		= 0;
	this.totpnst		= 0;
	this.totovrp		= 0;
	this.totovtotl		= 0;
	this.tothld			= 0;
	this.tothold		= 0;
	this.totpvtotl		= 0;
	this.totoecb		= 0;

	this.podot			= 0;
	this.podcash		= 0;
	this.podpnst		= 0;
	this.podhold		= 0;
	this.podoecb		= 0;

	this.accumpodfc 	= 0;
	this.accumpoddt		= 0;
	this.accumpodkvs	= 0;

	this.accumtcfc 		= 0;
	this.accumtotlfc	= 0;
	this.accumkvsttl	= 0;
	this.accumtcdt 		= 0;
	this.accumtotldt	= 0;
	this.accumfcsale	= 0;
	this.accumdtsale	= 0;
	this.accumfcdtsale  = 0;
     this.accummfySN     = 0;
     this.accumcbbTC     = 0;
     this.accumcbbTTS    = 0;
     this.accumcbbSales  = 0;
}


/**
 * PRIVATE
 * Object used for storing a bucket information.
 * This object can store single 15 min data from XML,
 * or summation of several bucket data:
 *  add 2 15 min bucket to get 30 min bucket
 *  add 4 15 min bucket to get 60 min bucket
 *  add 2 30 min bucket to get 60 min bucket *
 * @author Sang Kim
 */
function SOSBucketData() {

	this.FCtotProdSale	= 0;
	this.FCtotTc		= 0;
	this.FCtotAvc_ac	= 0;
	this.FCovra			= 0;
	this.FCpvtotl		= 0;
	this.FCtotAccum		= 0;
	this.FCot			= 0;
	this.FCcash			= 0;
	this.FCpnst			= 0;
	this.FCtotl			= 0;


	this.totAvc_ac		= 0;
	this.totAccum		= 0;
	this.totAccumTc		= 0;
	this.totAccumcars	= 0;
	this.totAccumtts	= 0;
	this.totAccumhld	= 0;

	this.podot			= 0;
	this.podcash		= 0;
	this.podpnst		= 0;
	this.podhold		= 0;

	this.totot			= 0;
	this.totcash		= 0;
	this.totpnst		= 0;
	this.totovrp		= 0;
	this.totovtotl		= 0;
	this.tothld			= 0;
	this.tothold		= 0;

	this.mfytctot 		= 0;
	this.mfysntot 		= 0;
	this.mfyavgtot 		= 0;
	this.mfyttstot 		= 0;
	this.mfyovr50tot 	= 0;
	this.mfyundr25tot 	= 0;

	this.totProdSale	= 0;
	this.totTc			= 0;
	this.totcars		= 0;

	this.untilTotal		= 0;
	this.untilStore		= 0;
	this.untilRecall	= 0;
	this.untilPay		= 0;
	this.untilCloseDrawer= 0;
	this.untilServe		= 0;
	this.untilDeliver   = 0;
	this.totalTime		= 0;
	this.itemsCount		= 0;

	this.tcOverOrderPreset= 0;
	this.tcOverLinePreset = 0;
	this.tcOverCashPreset = 0;
	this.tcOverPresentationPreset=0;
     this.tcUnderPresentationPreset=0;
	this.tcOverTotalPreset= 0;
     this.tcUnderTotalPreset= 0;
	this.tcOverStorePreset= 0;

     this.tcOverTotalPresetCBB          =0;
     this.tcUnderTotalPresetCBB         =0;
     this.tcOverPresentationPresetCBB   =0;
     this.tcUnderPresentationPresetCBB  =0;
	this.undoTime			= 0;
	this.heldTime			= 0;
	this.tcUnder25			= 0;
	this.tcOver50			= 0;
	this.tcHeld				= 0;
     this.tcOverTotal         = 0;
     this.tcUndrTotal         = 0;

	this.hotTc				= 0;
	this.hotUntilStore		= 0;
	this.hotUntilRecall		= 0;
	this.tcOverHoldPreset 	= 0;
	
	this.totServA			= 0;
	this.totOepeA			= 0;
}

/**
 * PRIVATE
 * Object for keeping time.  Is used because JavaScript
 * parameters are passed by value for all premitive data types
 * two primitive data types are combined as a complex data type
 * so that the information is passed by reference
 *
 * @author Sang Kim
 */
function DisplayTime() {
   this.Hour = 0;
   this.Min  = 0;
}

/**
 * PRIVATE
 * Reads data for the passed hour, fills 1 hour worth of bucket data
 */
function SOSLoadBucket(root, rootPos, hour,  HourData, flagIsPROD, servicTarget, oepeTarget, reportType) {

	var nodesDayPart 	= root.DayPartitioning.Segment;
	var nodesDayPartSize= Number(nodesDayPart.length());

	var hourSegment   = 0;
	var minuteSegment = 0;
	var idxSegment    = 0;
	var bDataFound    = false;

	//  Find the data that belongs
	for(var k = 0; k < nodesDayPartSize; k++) {
		// search for the data that matches the hour that we are trying to pickup data for
		if(Number(String(nodesDayPart[k].@begTime).substring(0,2)) == hour){
			nodeSegment  = nodesDayPart[k];

			// from XML segment, pickup the hour and minute
			hourSegment   = String(nodeSegment.@begTime).substring(0,2);
			minuteSegment = String(nodeSegment.@begTime).substring(2,4);

			// we found a data, preserve the starting index for our data
			bDataFound = true;

			// this is the search starting point (data is assumed to be sorted by begTime)
			idxSegment = k;
			break;
		}
	}


	// while there are data for this hour, peek processing the buckets
	while(bDataFound == true) {

		// Preserve id for this segment
		var idDayPart = nodeSegment.@id;

		// Check if is production
		var nodeServiceTime = rootPos.ServiceTime.(@segmentId==idDayPart);
		if(flagIsPROD == 0) {
			nodeServiceTime = rootPos.ServiceTime.(@id==idDayPart);
		}
		
		nodeServiceTime.@begTime = nodeSegment.@begTime;
		nodeServiceTime.@endTime = nodeSegment.@endTime;

		// XML to object conversion. Read the hour XML segmented data,
		// read it into Bucket data object
		var aBucketData = new SOSBucketData();
		SOSLoadBucketFromSegment(aBucketData, nodeServiceTime);	
		if((reportType == RPTSOSFC) || (reportType == RPTSOSDTHOUR))
		{
			//Calculate ServA
			CalculateServA(aBucketData, nodeServiceTime, servicTarget);
			//Calculate OepeA
			CalculateOepeA(aBucketData, nodeServiceTime, oepeTarget);
		}

//		turn it on for debugging
//		var DbgStr = SOSBucketDbgStr(aBucketData);
//		API.DbgMessageBox("Hour = " + hourSegment + " " + DbgStr);


		// look at the minute of the data,
		// add the fetched value to the proper bucket
		var NumMinute = Number(minuteSegment);

		// accumulate the proper bucket data within hourly bucket
		switch(NumMinute) {
		case 0:
			AccumBucket(HourData.Bucket[0], aBucketData);
// Debugging line - enable it to take a peek at bucket value
//			var DbgStr = SOSBucketDbgStr(HourData.Bucket[0]);
//			API.DbgMessageBox(DbgStr);

			break;

		case 15:
			AccumBucket(HourData.Bucket[1], aBucketData);

			break;

		case 30:
			AccumBucket(HourData.Bucket[2], aBucketData);
			break;

		case 45:
			AccumBucket(HourData.Bucket[3], aBucketData);
			break;
		}

		// search while data still exists
		idxSegment++;

		if(Number(idxSegment) < Number(nodesDayPartSize)) {

			// if data still exists for this perticular hour, keep processing
			if (Number(String(nodesDayPart[idxSegment].@begTime).substring(0,2)) == hour) {
				nodeSegment  	= nodesDayPart[idxSegment];

				hourSegment 	= String(nodeSegment.@begTime).substring(0,2);
				minuteSegment   = String(nodeSegment.@begTime).substring(2,4);

				// Keep searching in a loop
				bDataFound = true;
			} else {
				// no more data for this perticular hour
				bDataFound = false;
			}
		} else {
			bDataFound = false;
		}
	}
}





/**
 * PRIVATE
 * Reads CSR data for the 1 hour worth of bucket data
 */
function SOSCSRLoadBucket(root, hour,  HourData, flagIsPROD, servicTarget, oepeTarget, reportType) {

     if (root == null) return;
	var nodesDayPart 	= root.DayPartitioning.Segment;
	var nodesDayPartSize= Number(nodesDayPart.length());

	var hourSegment   = 0;
	var minuteSegment = 0;
	var idxSegment    = 0;
	var bDataFound    = false;

	//  Find the data that belongs
	for(var k = 0; k < nodesDayPartSize; k++) {

		 if(Number(String(nodesDayPart[k].@begTime).substring(0,2)) == hour){
			nodeSegment  = nodesDayPart[k];

			// from XML segment, pickup the hour and minute
			hourSegment   = String(nodeSegment.@begTime).substring(0,2);
			minuteSegment = String(nodeSegment.@begTime).substring(2,4);

			// we found a data, preserve the starting index for our data
			bDataFound = true;
			idxSegment = k;
			break;
		 }
	}


	// while there are data for this hour, peek processing the buckets
	while(bDataFound == true) {

		// Preserve id for this segment
		var idDayPart = nodeSegment.@id;

		// Check if is production
		var nodeServiceTime;

		if(flagIsPROD == 0) {
			nodeServiceTime = root.ServiceTime.(@id==idDayPart);
		} else {
			nodeServiceTime = root.StoreTotals.ServiceTime.(@segmentId==idDayPart);
		}

		nodeServiceTime.@begTime = nodeSegment.@begTime;
		nodeServiceTime.@endTime = nodeSegment.@endTime;

		// read a bucket data from XML
		var aBucketData = new SOSBucketData();
		SOSLoadBucketFromSegment(aBucketData, nodeServiceTime);
		if((reportType == RPTSOSFC) || (reportType == RPTSOSDTHOUR))
		{
			//Calculate ServA
			CalculateServA(aBucketData, nodeServiceTime, servicTarget);
			//Calculate OepeA
			CalculateOepeA(aBucketData, nodeServiceTime, oepeTarget);
		}

//		var DbgStr = SOSBucketDbgStr(aBucketData);
//		API.DbgMessageBox(DbgStr);


		// look at the minute of the data,
		// add the fetched value to the proper bucket
		var NumMinute = Number(minuteSegment);

		// accumulate the proper bucket data within hourly bucket
		switch(NumMinute) {
		case 0:
			AccumBucket(HourData.Bucket[0], aBucketData);
// Debugging line - enable it to take a peek at bucket value
//			var DbgStr = SOSBucketDbgStr(HourData.Bucket[0]);
//			API.DbgMessageBox(DbgStr);

			break;

		case 15:
			AccumBucket(HourData.Bucket[1], aBucketData);
			break;

		case 30:
			AccumBucket(HourData.Bucket[2], aBucketData);
			break;

		case 45:
			AccumBucket(HourData.Bucket[3], aBucketData);
			break;
		}

		// search while data still exists
		idxSegment++;

		if(Number(idxSegment) < Number( root.DayPartitioning.Segment.length() )) {

			// if data still exists for this perticular hour, keep processing
			if (Number(String(nodesDayPart[idxSegment].@begTime).substring(0,2)) == hour) {
				nodeSegment  	= root.DayPartitioning.Segment[idxSegment];
				hourSegment 	= String(nodeSegment.@begTime).substring(0,2);
				minuteSegment   = String(nodeSegment.@begTime).substring(2,4);

				bDataFound = true;
			} else {
				// no more data for this perticular hour
				bDataFound = false;
			}
		} else {
			bDataFound = false;
		}
	}
}

function GenerateSegmentData(config, data)
{
	var dataFound = false;
	g_segmentData = new XML("<SegmentData />");
	//Extracting detailedSos
	var detailedSos = data[0].toString();
	detailedSos = detailedSos.replace("<?xml","<!-- bug_336551");
	detailedSos = detailedSos.replace("?>","bug_336551 -->");
	var xmlDetailedSos = new XML(detailedSos);
	
	//Browsing storeTotals
	for each (var StoreTotals in xmlDetailedSos)
	{
		//Getting segmentId
		var segmentId = StoreTotals.ServiceTime.@segmentId.toString();
		if(segmentId != null && segmentId != undefined && segmentId != "")
		{
			var xmlSegment = g_segmentData.Segment.(@id == segmentId);
			if(xmlSegment == null || xmlSegment == undefined)
			{
				xmlSegment = new XML("<Segment />");
				xmlSegment.@id = segmentId;
				//Get partition time
				var xmlPartition = xmlDetailedSos.DayPartitioning.Segment.(@id == segmentId);
				if(xmlPartition != null && xmlPartition != undefined)
				{
					xmlSegment.@begTime = xmlPartition.@begTime;
					xmlSegment.@endTime = xmlPartition.@endTime;
				}
				//Adding segment
				g_segmentData.appendChild(xmlSegment);
			}
			//Creating tag order
			var xmlOrder =  new XML("<Order />");
			//Calculating servic
			var untilCloseDrawer	= Math.round(Number(StoreTotals.ServiceTime.@untilCloseDrawer) / 1000);
			var untilServe 			= Math.round(Number(StoreTotals.ServiceTime.@untilServe) / 1000);
			var untilRecall			= Math.round(Number(StoreTotals.ServiceTime.@untilRecall) / 1000);
			var untilStore			= Math.round(Number(StoreTotals.ServiceTime.@untilStore) / 1000);
			//Saving important data
			xmlOrder.@orderKey 	= StoreTotals.ServiceTime.@orderKey;
			xmlOrder.@servic	= untilServe > untilCloseDrawer ? untilServe - untilCloseDrawer : 0;
			xmlOrder.@cash		= untilCloseDrawer > untilRecall ? untilCloseDrawer - untilRecall : 0;
			xmlOrder.@pnst		= untilServe > untilCloseDrawer ? untilServe - untilCloseDrawer : 0;
			xmlOrder.@oecb 		= untilRecall > untilStore ? untilRecall - untilStore : 0;
			//Adding order
			xmlSegment.appendChild(xmlOrder);
			dataFound = true;
		}
	}
	//Cleaning if data not found
	if(!dataFound)
	{
		g_segmentData = "";
	}
	
	return (true);
}

/**
 * PRIVATE
 * This function implements a generic Sale SOS report for US
 * The main different from the generic is that the end user can
 * select reporting intervals (15 min, 30 min, 1 hour)
 *
 * @author Sang Kim
 */
function US_Sos(config, data, root, reportType)
{
	var flagIsPROD = 0;
	var title;
	var posFC = root.POS.(@podShort=="FC");
	var posWT = root.POS.(@podShort=="WT");
	var posDT = root.POS.(@podShort=="DT");
	var	posFCDT = root.StoreTotals;
	
	if(root.@errflag=="NODATA") {
		var message = API.getLocalMsg("MSG_REPORT_NO_DATE_FOR_PERIOD");
		addLine("ERROR:");
		addLine(message);
		return;
	}
	if(root.@errflag=="NODATABYDATE") {
		var businessDate=String(root.@requestDate);
		// convert from YYYYMMDD to MM/DD/YYYY
		businessDate=API.formatDate(businessDate, "MM/dd/yyyy");
		var message = API.getLocalMsg("MSG_BC_NOREPORTDATE", [businessDate]);
		addLine("ERROR:");
		addLine(message);
		return;
	}
	
	//Testing DetailedSos data
	if((g_segmentData == null || g_segmentData == undefined || g_segmentData == "") && (reportType == RPTSOSFC || reportType == RPTSOSDTHOUR))
	{
		var message = API.getLocalMsg("MSG_BC_NODETAILEDSOSAVAILABLE");
		addLine("ERROR:");
		addLine(message);
		return;
	}
	
	// Holds display mode for each hour
	// mode can be 15 min, 30 min, or 1 hour
    var HourlyModes  = new HourlyPrintModeBucket();
    ReadReportIntervals(HourlyModes);


    // object used for storing total information
    // total informations are typically used in footer section of the report
    var TotalBucket = new SOSTotalBucket();

	var DisplayMode = 0;

	orderTarget = root.PresetsTable.@orderTarget;
	lineTarget	= root.PresetsTable.@lineTarget;
	cashTarget	= root.PresetsTable.@cashTarget;
	totalTarget	= root.PresetsTable.@totalTarget;
	storeTarget	= root.PresetsTable.@storeTarget;
	holdTarget	= root.PresetsTable.@holdTarget;
	presentationTarget= root.PresetsTable.@presentationTarget;

	/*presets accessed directly via script*/
	storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"ProductionPresets\").Parameter.(@name==\"ServicTarget\").@value"; 
	posdbPath = "Configuration.(@imports==\"Store.wide\").Section.(@name==\"ProductionPresets\").Parameter.(@name==\"ServicTarget\").@value";
	servicTarget = getConfigValue(storedbPath , posdbPath);
	if (null == servicTarget || undefined == servicTarget || "" == servicTarget)
	{
		servicTarget = 90;
	}
	else
	{
		servicTarget = Number(servicTarget);
	}

	storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"ProductionPresets\").Parameter.(@name==\"OEPETarget\").@value"; 
	posdbPath = "Configuration.(@imports==\"Store.wide\").Section.(@name==\"ProductionPresets\").Parameter.(@name==\"OEPETarget\").@value";
	oepeTarget = getConfigValue(storedbPath , posdbPath);
	if (null == oepeTarget || undefined == oepeTarget || "" == oepeTarget)
	{
		oepeTarget = 120;
	}
	else
	{
		oepeTarget = Number(oepeTarget);
	}
	
     /* added for CBB support */
     underPresentationTargetCBB    =root.PresetsTable.@underPresentationTargetCBB;
     overPresentationTargetCBB     =root.PresetsTable.@overPresentationTargetCBB;
     underTotalTargetCBB           =root.PresetsTable.@underTotalTargetCBB;
     overTotalTargetCBB            =root.PresetsTable.@overTotalTargetCBB;
	// Check if is production
	var bIsLocalMode = (posFC.length()!=0) || (posDT.length()!=0) || (posWT.length()!=0);
	if(bIsLocalMode) {
//   	if((posFC.length()!=0) || (PosDT.length()!=0)) {
   	 	flagIsPROD = 0   // Local
   	}
   	else{
   		flagIsPROD = 1   // Prod
   	}

// Debug
//API.DbgMessageBox(data);
//API.DbgMessageBox(root);

	// this value is set from RunHeader
	var  rootPos;

	//#####################################
	// Header Section
	//#####################################
	RunHeader();


	//#####################################
	// Body Section
	//#####################################
    var bDataForBody = (rootPos.ServiceTime.length() != 0);
    // if no data, bail out
	if 	(bDataForBody == false) {
		addLine();
		addLine(center("No Data for the date requested"));
		addLine();
		addFooter(rootCash);
		return;
	} else {
		// if data detected, run 24 hours of detail
		RunBody(servicTarget, oepeTarget);
	}

	//#####################################
	// Footer Section
	//#####################################
	RunFooter(servicTarget, oepeTarget);

	return;


	/**
	 * PRIVATE
	 * Sub Function
	 * Runs report header information
	 *
	 */
	function RunHeader()
	{
		switch(reportType) {
		case RPTSOSFC:
	   		 title = "FCR Sales Report";
 			 if(flagIsPROD == 0) { 		// Local
				 if(posFC.length() !=0 ){
			 		 rootPos = posFC;
				 }
			 }
			 else{
		   		 rootPos = rootSOSFC.StoreTotals;
			 }
	   		 break;

		case RPTSOSDTHOUR:
	   		 title = "DRIVE-THRU SALES REPORT - HOURLY";
			 //root= (((rootSOSDT!=null)?rootSOSDT:new XML()) + ((rootSOSWT!=null)?rootSOSWT:new XML()));
			 root= (((rootSOSDT!=null)?rootSOSDT:new XML()));

	   		 var rootPosDt = (posDT.length()!=0)?posDT:rootSOSDT.StoreTotals.(@productionNodeId=="DT");
	   		 if (rootPosWt == null) {
	   		 	rootPosWt =new XML();
	   		 	rootPos =rootPosDt;
	   		 } else {
			 	var rootPosWt = (posWT.length()!=0)?posWT:rootSOSWT.StoreTotals.(@productionNodeId=="WT");
			 	rootPos= combineSOS(rootPosDt,rootPosWt);
			 }

       		 break;

		case RPTSOSDTDIAG:
	   		 title = "DRIVE THRU DIAGNOSTIC REPORT";
			 root= (((rootSOSDT!=null)?rootSOSDT:new XML()) + ((rootSOSWT!=null)?rootSOSWT:new XML()));
	   		 var rootPosDt = (posDT.length()!=0)?posDT:root.StoreTotals.(@productionNodeId=="DT");
			 var rootPosWt = (posWT.length()!=0)?posWT:root.StoreTotals.(@productionNodeId=="WT");
			 rootPos=((rootPosDt!=null)?rootPosDt:new XML()) + ((rootPosWt!=null)?rootPosWt:new XML());
       		 break;

 		case RPTSOSMFY:
	   		 title = "KVS TIMING REPORT FOR PRIMARY (MFY)";
	   		 rootPos = rootSOSMFY.StoreTotals;
       		 break;
          case RPTSOSCBB:
                title = "McCAFE TIMING REPORT";
                rootPos = rootSOSCBB.StoreTotals;
                break;
		default:
   			 title = "ERROR";
       		 break;
		}

		addLine(SEP_DL);
		addHeader(rootCash, title, reportType);

		if(reportType == RPTSOSFC)
		{
			//       123456789012345678901234567890123456789
			addLine("TIME  PRODSALE T/C     AVG  SERV%A  ORB");
			addLine("       ACCUM    OT    CASH  SERVIC TOTL");
		}

		if(reportType == RPTSOSDTHOUR)
		{
			//       123456789012345678901234567890123456789
			addLine("TIME PRODSALE T/C AVG  TOTL OEPE%A PFWD%");
			addLine("     CARSV OT  OECB CASH PSNT OEPE  PFWD");
		}

		if(reportType == RPTSOSMFY) {
			// SDO-2686 07/26/2010 RPS  Modified spacing
			addLine("TIME      SN# AVG#   TTS OVR50 UNDR25");
		}
          if(reportType == RPTSOSCBB) {
               /* the title has to match the actual presets */
               qvrVal    =overTotalTargetCBB/1000;
               undrVal   =underTotalTargetCBB/1000;
               addLine("TIME   PQ#    AVG#  TTS  OVR"+qvrVal+"  UNDR"+undrVal);
          }
		if(reportType == RPTSOSDTDIAG) {
			addLine("TIME  #   ORDER LINE CASH PSNT  POS  OV");
			var strOv90 = totalTarget.substring(0, 2);
			addLine("     Cars TIME  TIME TIME TIME  TIME " + strOv90);
		}

	} // function RunHeader()


	/**
	 *  Runs report footer information
	 *
	 */
	function RunFooter(servicTarget, oepeTarget)
	{
	//				          1         2         3         4
	//				 1234567890123456789012345678901234567890
		if(reportType == RPTSOSDTHOUR){
			var totAccumAvc_ac 	= (TotalBucket.totAccumTc!=0)?TotalBucket.totAccum/TotalBucket.totAccumTc:0;
			var totAccumot     	= (TotalBucket.totAccumTc!=0)?TotalBucket.podot/TotalBucket.totAccumTc:0;
			var totAccumcash   	= (TotalBucket.totAccumTc!=0)?TotalBucket.podcash/TotalBucket.totAccumTc:0;
			var totAccumpnst   	= (TotalBucket.totAccumTc!=0)?TotalBucket.podpnst/TotalBucket.totAccumTc:0;
			var totAccumoecb   	= (TotalBucket.totAccumTc!=0)?TotalBucket.podoecb/TotalBucket.totAccumTc:0;
			var totAccumpvtotl 	= (TotalBucket.totAccumTc!=0 ? TotalBucket.totpvtotl / TotalBucket.totAccumTc : 0);
			var totAccumoepe 	= totAccumoecb + totAccumcash + totAccumpnst;
			var totAccumhold   	= (TotalBucket.totAccumhld != 0) ? TotalBucket.podhold / TotalBucket.totAccumhld : 0;
			var totAccumPfwd	= Math.round(100 * TotalBucket.totAccumhld / TotalBucket.totAccumTc);
			var totAccumOepea	= Math.round(100 * TotalBucket.totAccumOepea / TotalBucket.totAccumTc);

			addLine();
			//       123456789012345678901234567890123456789
			addLine("TOTL PRODSALE T/C AVG  TOTL OEPE%A PFWD%");
			addLine("     CARSV OT  OECB CASH PSNT OEPE  PFWD");
			addLine("       " +
				API.formatNumber(TotalBucket.totAccum, "#####0", 6) + " " +
				API.formatNumber(TotalBucket.totAccumTc, "##0", 3) + " " +
				API.formatNumber(totAccumAvc_ac, "##0.00", 6) + " " +
				API.formatNumber(totAccumpvtotl, "##0", 3) + "   " +
				API.formatNumber(totAccumOepea,"##0", 3) + "%  " +
				API.formatNumber(totAccumPfwd,"##0", 3) + "%");

			addLine("       " +
			//NVS-7493 Tishin
				API.formatNumber(TotalBucket.totAccumcars, "##0", 3) + " " +
				API.formatNumber(totAccumot, "##0", 3) + "   " +
				API.formatNumber(totAccumoecb, "##0", 3) + "  " +
				API.formatNumber(totAccumcash, "##0", 3) + "  " +
				API.formatNumber(totAccumpnst, "##0", 3) + "  " +
				API.formatNumber(totAccumoepe, "##0", 3) + "   " +
				API.formatNumber(totAccumhold, "##0", 3));
		}

		if(reportType == RPTSOSDTDIAG){
			var totlTarget = totalTarget/1000
			var pnstTarget = presentationTarget/1000

			addLine();
			addLine("PRESETS     " +
				API.formatNumber(orderTarget/1000, "#0", 2)+"   "+
				API.formatNumber(lineTarget/1000, "#0", 2)+"    "+
				API.formatNumber(cashTarget/1000, "#0", 2)+"   "+
				API.formatNumber(presentationTarget/1000, "#0", 2)+"   "+
				API.formatNumber(totalTarget/1000, "#0", 2));
			addLine("           ORD   LT  CASH PSNT POS");
			addLine("           TIME      TIME TIME TIME");
		}

		if(reportType == RPTSOSMFY){
			// SDO-2686 07/26/2010 RPS Modified spacing and increased TTS field to 4 digits
			addLine();
			addLine("TIME      SN#   AVG#  TTS OVR50 UNDR25");
			addLine("         " +
	//		API.formatNumber(TotalBucket.totAccumTc, "###0", 4) + "  " +
			API.formatNumber(TotalBucket.mfysntot, "###0", 4) + "  " +
			API.formatNumber(TotalBucket.mfysntot  / TotalBucket.totAccumTc,"#0.00", 5) + " " +
			API.formatNumber(TotalBucket.mfyttstot / TotalBucket.totAccumTc,"###0", 4) + "   " +
			API.formatNumber(TotalBucket.mfyovr50tot,"##0", 3)+ "    " +
			API.formatNumber(TotalBucket.mfyundr25tot,"##0", 3));

			addLine("GOALS               " +
			API.formatNumber(totalTarget/1000, "##0", 3));
		}

          if(reportType == RPTSOSCBB){
               /* the title has to match the actual presets */
               qvrVal    =overTotalTargetCBB/1000;
               undrVal   =underTotalTargetCBB/1000;
               addLine();
			   //NVS-108 RPS 10-21-09
               addLine("TOTAL  PQ#    AVG#  TTS  OVR"+qvrVal+"  UNDR"+undrVal);
               addLine("      " +
               API.formatNumber(TotalBucket.mfysntot, "###0", 4) + "   " +
               API.formatNumber(TotalBucket.mfysntot  / TotalBucket.totAccumTc,"#0.00", 5) + "  " +
               API.formatNumber(TotalBucket.mfyttstot / TotalBucket.totAccumTc,"##0", 3) + "    " +
               API.formatNumber(TotalBucket.mfyovr50tot,"##0", 3)+ "     " +
               API.formatNumber(TotalBucket.mfyundr25tot,"##0", 3));
               addLine("GOALS               " +
               API.formatNumber(totalTarget/1000, "##0", 3));
          }

		if((reportType == RPTSOSFC) || (reportType == RPTSOSDTHOUR))
		{
			if(reportType == RPTSOSFC)
			{
				// footer header
				/*addLine("TIME  PRODSALE T/C     AVG OVRP OVTOTL");
				addLine("                OT    CASH PSNT   TOTL");*/

				//                1         2         3     
				//       123456789012345678901234567890123456789
				addLine("TIME  PRODSALE T/C     AVG  SERV%A  ORB");
				addLine("                OT    CASH  SERVIC TOTL");

				addLine("      " +
					API.formatNumber(TotalBucket.FCtotProdSale, "#######0", 8) + " " +
					API.formatNumber(TotalBucket.FCtotTc, "##0", 3) + " " +
					API.formatNumber(TotalBucket.FCtotProdSale/TotalBucket.FCtotTc, "###0.00", 7) + "    "  +
					API.formatNumber(Math.round(Number(100 * TotalBucket.FcServA / TotalBucket.FCtotTc)), "##0", 3) + "%  " +
					API.formatNumber(TotalBucket.FcOrb / TotalBucket.FCtotTc, "##0", 3));

				addLine("     " +  "       " + "   " +
				//NVS-8440 Tishin
					API.formatNumber(TotalBucket.FCot   / TotalBucket.FCtotTc, "##0", 3) + "     " +
					API.formatNumber(TotalBucket.FCcash / TotalBucket.FCtotTc, "##0", 3) + "   " +
					API.formatNumber(TotalBucket.FcServic / TotalBucket.FCtotTc, "###0", 4) + "  " +
					API.formatNumber(TotalBucket.FCtotl / TotalBucket.FCtotTc, "###0", 4));

				addLine();
				addLine("         PRESET");
				addLine("         SERVIC  " + servicTarget);
			}
			else
			{
				addLine();
				addLine("         PRESET");
				addLine("         OEPE  " + oepeTarget);
			}
		}


		addFooter(rootCash);

	} // function RunFooter()


	/**
	 *  Runs report Body information
	 *  General algorithm is :
	 *  Load 1 hour data (up to 4 buckets) then proces afterward
	 */
	function RunBody(servicTarget, oepeTarget) {

          // place holder for 1 hour of bucket data
		var HourlyBucket;

		// printing mode - 1hr, 30min, 15 min
		var PrintMode;

		// create a new time tracking object
		// this is required because javaScript pass by reference only for
		// non-primitive objects
		var DispTime = new DisplayTime();

		var hrIdx = 0;

		while (hrIdx < 24) {
			PrintMode = HourlyModes.Mode[ hrIdx ];

			// Create a bucket, load it with the 1 hour bucket data
			HourlyBucket = new SOSHourData();

			// load the buckets for this hour with the data
			SOSLoadBucket(root, rootPos, hrIdx,  HourlyBucket, flagIsPROD, servicTarget, oepeTarget, reportType);

			// Print the detail line based on the Print mode
			ReportLine(reportType, DispTime, PrintMode, HourlyBucket, TotalBucket);

			hrIdx++;
		}
	} // function RunBody

	/**
	 *  Prints 1 hour data to the output
	 *  1 hour data can be:
	 *  1 line of output if PrintMode is hourly
	 *  2 lines of output if PrintMode is every 30 min
	 *  4 lines of output if PrintMode is every 15 min
	 */
	function ReportLine(reportType, DispTime, PrintMode, HourlyBucket, TotalBucket) {
		switch(reportType) {
		case RPTSOSFC:
			ReportFCLine(DispTime, PrintMode, HourlyBucket, TotalBucket);
			break;

		case RPTSOSMFY:
			ReportMFYLine(DispTime, PrintMode, HourlyBucket, TotalBucket);
			break;
          case RPTSOSCBB:
               ReportCBBLine(DispTime, PrintMode, HourlyBucket, TotalBucket);
               break;
		case RPTSOSDTHOUR:
			ReportDTHOURLine(DispTime, PrintMode, HourlyBucket, TotalBucket);
			break;

		case RPTSOSDTDIAG:
			ReportDTDIAGLine(DispTime, PrintMode, HourlyBucket, TotalBucket);
			break;
		}

	} // function ReportLine

	function ReportDTDIAGLine(DispTime, PrintMode, HourlyBucket, TotalBucket) {
		var AccumBucket1;
		var AccumBucket2;

		switch(PrintMode) {
		case MODE_HOURLY:
			AccumBucket1 = new SOSBucketData();

			// get all 4 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[2]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[3]);

			AccumTotaDTDIAG(AccumBucket1, TotalBucket);
			DispTime.Min = 0;
			DispTime.Hour = DispTime.Hour + 1;

			PrintDetailLineDTDIAG(DispTime, AccumBucket1);
			break;

		case MODE_30MIN:
			AccumBucket1 = new SOSBucketData();
			AccumBucket2 = new SOSBucketData();

			// get all 4 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);

			AccumTotaDTDIAG(AccumBucket1, TotalBucket);

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLineDTDIAG(DispTime, AccumBucket1);

			AccumBucket(AccumBucket2, HourlyBucket.Bucket[2]);
			AccumBucket(AccumBucket2, HourlyBucket.Bucket[3]);

			AccumTotaDTDIAG(AccumBucket2, TotalBucket);

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLineDTDIAG(DispTime, AccumBucket2);
			break;

		case MODE_15MIN:
			AccumTotaDTDIAG(HourlyBucket.Bucket[0], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLineDTDIAG(DispTime, HourlyBucket.Bucket[0]);

			AccumTotaDTDIAG(HourlyBucket.Bucket[1], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLineDTDIAG(DispTime, HourlyBucket.Bucket[1]);


			AccumTotaDTDIAG(HourlyBucket.Bucket[2], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLineDTDIAG(DispTime, HourlyBucket.Bucket[2]);


			AccumTotaDTDIAG(HourlyBucket.Bucket[3], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			PrintDetailLineDTDIAG(DispTime, HourlyBucket.Bucket[3]);
			break;


		} // switch(PrintMode)

		return; // function ReportMFYLine


		// no implementation
		function AccumTotaDTDIAG(Bucket, TotalBucket) {
		}

		function PrintDetailLineDTDIAG(DispTime, Bucket) {
			var cars;
			var orderTime;
			var lineTime;
			var cashTime;
			var psntTime;
			var posTime;
			var ov90;

			cars		= Bucket.totcars;
			if (Bucket.totTc > 0){
				orderTime	= Bucket.untilStore / Bucket.totTc;
				lineTime	= (Bucket.untilRecall-Bucket.untilStore) / Bucket.totTc;
				cashTime	= (Bucket.untilCloseDrawer - Bucket.untilRecall) / Bucket.totTc;
                psntTime    = (Bucket.totalTime > Bucket.untilCloseDrawer) ? ((Bucket.totalTime - Bucket.untilCloseDrawer) / Bucket.totTc) : 0;          // SDE-1284 & NPS-5493
			} else {
				orderTime	= 0;
				lineTime	= 0;
				cashTime	= 0;
				psntTime	= 0;
			}
			posTime		= orderTime + lineTime + cashTime + psntTime;
			ov90		= Bucket.tcOverTotalPreset;

			addLine(
				API.formatNumber(DispTime.Hour, "00", 2) + ":" +
				API.formatNumber(DispTime.Min, "00", 2) + " " +
				API.formatNumber(cars, "##0", 3)+ "  " +
				API.formatNumber(orderTime, "##0", 3)+ "  " +
				API.formatNumber(lineTime, "##0", 3)+ "   " +
				API.formatNumber(cashTime, "##0", 3) + "  " +
				API.formatNumber(psntTime, "##0", 3) + "  " +
				API.formatNumber(posTime, "##0", 3) + "  " +
				API.formatNumber(ov90, "#0", 2));
		}	//function PrintDetailLineDTDIAG
	}



	/**
	 * PRIVATE
	 * This function implements a routine for calculating totals and
	 * Displaying the detail line for body part of MFY report
	 *
	 * @author Sang Kim
	 */
	function ReportMFYLine(DispTime, PrintMode, HourlyBucket, TotalBucket) {
		var AccumBucket1;
		var AccumBucket2;

		var mfytc;
		var mfysn;
		var mfyavg;
		var mfytts;
		var mfyovr50;
		var mfyundr25;


		switch(PrintMode) {
		case MODE_HOURLY:
			AccumBucket1 = new SOSBucketData();

			// get all 4 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[2]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[3]);

			// Accumulate totals
			AccumTotaMFY(AccumBucket1, TotalBucket);

			DispTime.Min   = 0;
			DispTime.Hour   = DispTime.Hour + 1;

			// Print Detail Line
			PrintDetailLineMFY(DispTime, AccumBucket1);
			break;

		case MODE_30MIN:
			AccumBucket1 = new SOSBucketData();
			AccumBucket2 = new SOSBucketData();

			// get all 2 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);

			AccumBucket(AccumBucket2, HourlyBucket.Bucket[2]);
			AccumBucket(AccumBucket2, HourlyBucket.Bucket[3]);

			// Accumulate totals
			AccumTotaMFY(AccumBucket1, TotalBucket);

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}


			// Print Detail Line
			PrintDetailLineMFY(DispTime, AccumBucket1);



			// Accumulate totals
			AccumTotaMFY(AccumBucket2, TotalBucket);

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			// Print Detail Line
			PrintDetailLineMFY(DispTime, AccumBucket2);
			break;


		case MODE_15MIN:
			// Accumulate totals
			AccumTotaMFY(HourlyBucket.Bucket[0], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			// Print Detail Line
			PrintDetailLineMFY(DispTime, HourlyBucket.Bucket[0]);


			// Accumulate totals
			AccumTotaMFY(HourlyBucket.Bucket[1], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			// Print Detail Line
			PrintDetailLineMFY(DispTime, HourlyBucket.Bucket[1]);



			// Accumulate totals
			AccumTotaMFY(HourlyBucket.Bucket[2], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			// Print Detail Line
			PrintDetailLineMFY(DispTime, HourlyBucket.Bucket[2]);



			// Accumulate totals
			AccumTotaMFY(HourlyBucket.Bucket[3], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			// Print Detail Line
			PrintDetailLineMFY(DispTime, HourlyBucket.Bucket[3]);
			break;

		} // switch(PrintMode)

		return; // function ReportMFYLine


		function AccumTotaMFY(Bucket, TotalBucket) {
			mfytc		= Bucket.totTc;
			mfysn		= Bucket.itemsCount;
			if (Bucket.totTc!=0) {
				mfyavg		= mfysn/mfytc;
				mfytts		= Bucket.untilServe / Bucket.totTc;
			} else {
				mfyavg		= 0;
				mfytts		= 0;
			}
			mfyovr50	= Bucket.tcOver50;
			mfyundr25	= Bucket.tcUnder25;

			TotalBucket.mfytctot 		+= mfytc;
			TotalBucket.mfysntot 		+= mfysn;
			TotalBucket.mfyavgtot 		+= mfyavg;
			TotalBucket.mfyttstot 		+= Bucket.untilServe;
			TotalBucket.mfyovr50tot 	+= mfyovr50;
			TotalBucket.mfyundr25tot 	+= mfyundr25;

			TotalBucket.totAccumTc		+= Bucket.totTc;
			TotalBucket.totAccumtts		+= mfytts;

		//	TotalBucket.mfyttstot 		+= mfytts;

		}	// AccumTotaMFY

          function AccumTotaCBB(Bucket, TotalBucket) {
               mfytc          = Bucket.totTc;
               mfysn          = Bucket.itemsCount;
               if (Bucket.totTc!=0) {
                    mfyavg         = mfysn/mfytc;
                    mfytts         = Bucket.untilServe / Bucket.totTc;
               } else {
                    mfyavg         = 0;
                    mfytts         = 0;
               }
               mfyovr50  = Bucket.tcOver50;
               mfyundr25 = Bucket.tcUnder25;
               TotalBucket.mfytctot          += mfytc;
               TotalBucket.mfysntot          += mfysn;
               TotalBucket.mfyavgtot         += mfyavg;
               TotalBucket.mfyttstot         += Bucket.untilServe;
               TotalBucket.mfyovr50tot  += mfyovr50;
               TotalBucket.mfyundr25tot      += mfyundr25;
               TotalBucket.totAccumTc        += Bucket.totTc;
               TotalBucket.totAccumtts       += mfytts;
          //   TotalBucket.mfyttstot         += mfytts;

          }    // AccumTotaCBB
		function PrintDetailLineMFY(DispTime, Bucket) {
			addLine(
				API.formatNumber(DispTime.Hour, "00", 2) + ":" +
				API.formatNumber(DispTime.Min,  "00", 2) + "    " +
				API.formatNumber(mfysn, "###0", 4) + "  " +
				API.formatNumber(mfyavg,"##0", 3) + " " +
				API.formatNumber(mfytts,"##0", 3) + "   " +
				API.formatNumber(mfyovr50,"##0", 3)+ "    " +
				API.formatNumber(mfyundr25,"##0", 3));
		}	//function PrintDetailLineMFY

          function PrintDetailLineCBB(DispTime, Bucket) {
               addLine(
				API.formatNumber(DispTime.Hour, "00", 2) + ":" +
				API.formatNumber(DispTime.Min,  "00", 2) + "    " +
				API.formatNumber(mfysn, "###0", 4) + "  " +
				API.formatNumber(mfyavg,"##0", 3) + "  " +
				// SDO-2686 07/26/2010 RPS Modified spacing and increased TTS field to 4 digits
				API.formatNumber(mfytts,"###0", 4) + "   " +
				API.formatNumber(mfyovr50,"##0", 3)+ "    " +
				API.formatNumber(mfyundr25,"##0", 3));
          }    //function PrintDetailLineMFY
	}	//function function ReportMFYLine
     /**
      * PRIVATE
      * This function implements a routine for calculating totals and
      * Displaying the detail line for body part of MFY report
      *
      * @author DeMario J.
      */
     function ReportCBBLine(DispTime, PrintMode, HourlyBucket, TotalBucket) {
          var AccumBucket1;
          var AccumBucket2;
          var mfytc;
          var mfysn;
          var mfyavg;
          var mfytts;
          var mfyovr50;
          var mfyundr25;
          switch(PrintMode) {
          case MODE_HOURLY:
               AccumBucket1 = new SOSBucketData();
               // get all 4 buckets, add into another bucket to get summary info
               AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
               AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);
               AccumBucket(AccumBucket1, HourlyBucket.Bucket[2]);
               AccumBucket(AccumBucket1, HourlyBucket.Bucket[3]);
               // Accumulate totals
               AccumTotaCBB(AccumBucket1, TotalBucket);
               DispTime.Min   = 0;
               DispTime.Hour   = DispTime.Hour + 1;
               // Print Detail Line
               PrintDetailLineCBB(DispTime, AccumBucket1);
               break;
          case MODE_30MIN:
               AccumBucket1 = new SOSBucketData();
               AccumBucket2 = new SOSBucketData();
               // get all 2 buckets, add into another bucket to get summary info
               AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
               AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);
               AccumBucket(AccumBucket2, HourlyBucket.Bucket[2]);
               AccumBucket(AccumBucket2, HourlyBucket.Bucket[3]);
               // Accumulate totals
               AccumTotaCBB(AccumBucket1, TotalBucket);
               DispTime.Min = DispTime.Min + 30;
               if (DispTime.Min > 45) {
                    DispTime.Min = 0;
                    DispTime.Hour = DispTime.Hour + 1;
               }
               // Print Detail Line
               PrintDetailLineCBB(DispTime, AccumBucket1);
               // Accumulate totals
               AccumTotaCBB(AccumBucket2, TotalBucket);
               DispTime.Min = DispTime.Min + 30;
               if (DispTime.Min > 45) {
                    DispTime.Min = 0;
                    DispTime.Hour = DispTime.Hour + 1;
               }
               // Print Detail Line
               PrintDetailLineCBB(DispTime, AccumBucket2);
               break;
          case MODE_15MIN:
               // Accumulate totals
               AccumTotaCBB(HourlyBucket.Bucket[0], TotalBucket);
               DispTime.Min = DispTime.Min + 15;
               if (DispTime.Min > 45) {
                    DispTime.Min = 0;
                    DispTime.Hour = DispTime.Hour + 1;
               }
               // Print Detail Line
               PrintDetailLineCBB(DispTime, HourlyBucket.Bucket[0]);
               // Accumulate totals
               AccumTotaCBB(HourlyBucket.Bucket[1], TotalBucket);
               DispTime.Min = DispTime.Min + 15;
               if (DispTime.Min > 45) {
                    DispTime.Min = 0;
                    DispTime.Hour = DispTime.Hour + 1;
               }
               // Print Detail Line
               PrintDetailLineCBB(DispTime, HourlyBucket.Bucket[1]);
               // Accumulate totals
               AccumTotaCBB(HourlyBucket.Bucket[2], TotalBucket);
               DispTime.Min = DispTime.Min + 15;
               if (DispTime.Min > 45) {
                    DispTime.Min = 0;
                    DispTime.Hour = DispTime.Hour + 1;
               }
               // Print Detail Line
               PrintDetailLineCBB(DispTime, HourlyBucket.Bucket[2]);
               // Accumulate totals
               AccumTotaCBB(HourlyBucket.Bucket[3], TotalBucket);
               DispTime.Min = DispTime.Min + 15;
               if (DispTime.Min > 45) {
                    DispTime.Min = 0;
                    DispTime.Hour = DispTime.Hour + 1;
               }
               // Print Detail Line
               PrintDetailLineCBB(DispTime, HourlyBucket.Bucket[3]);
               break;
          } // switch(PrintMode)
          return; // function ReportMFYLine
          function AccumTotaMFY(Bucket, TotalBucket) {
               mfytc          = Bucket.totTc;
               mfysn          = Bucket.itemsCount;
               if (Bucket.totTc!=0) {
                    mfyavg         = mfysn/mfytc;
                    mfytts         = Bucket.untilServe / Bucket.totTc;
               } else {
                    mfyavg         = 0;
                    mfytts         = 0;
               }
               mfyovr50  = Bucket.tcOver50;
               mfyundr25 = Bucket.tcUnder25;
               TotalBucket.mfytctot          += mfytc;
               TotalBucket.mfysntot          += mfysn;
               TotalBucket.mfyavgtot         += mfyavg;
               TotalBucket.mfyttstot         += Bucket.untilServe;
               TotalBucket.mfyovr50tot  += mfyovr50;
               TotalBucket.mfyundr25tot      += mfyundr25;
               TotalBucket.totAccumTc        += Bucket.totTc;
               TotalBucket.totAccumtts       += mfytts;
          //   TotalBucket.mfyttstot         += mfytts;
          }    // AccumTotaMFY
          function AccumTotaCBB(Bucket, TotalBucket) {
               mfytc          = Bucket.totTc;
               mfysn          = Bucket.itemsCount;
               if (mfytc !=0) {
                    mfyavg         = mfysn/mfytc;
                    mfytts         = Bucket.untilServe / Bucket.totTc;
               } else {
                    mfyavg         = 0;
                    mfytts         = 0;
               }
               mfyovr50  = Bucket.tcOverTotal;
               mfyundr25 = Bucket.tcUndrTotal;
               TotalBucket.mfytctot          += mfytc;
               TotalBucket.mfysntot          += mfysn;
               TotalBucket.mfyavgtot         += mfyavg;
               TotalBucket.mfyttstot         += Bucket.untilServe;
               TotalBucket.mfyovr50tot  += mfyovr50;
               TotalBucket.mfyundr25tot      += mfyundr25;
               TotalBucket.totAccumTc        += Bucket.totTc;
               TotalBucket.totAccumtts       += mfytts;
          //   TotalBucket.mfyttstot         += mfytts;
          }    // AccumTotaCBB
          function PrintDetailLineMFY(DispTime, Bucket) {
               addLine(
                    API.formatNumber(DispTime.Hour, "00", 2) + ":" +
                    API.formatNumber(DispTime.Min,  "00", 2) + "    " +
                    API.formatNumber(mfysn, "###0", 4) + "  " +
                    API.formatNumber(mfyavg,"##0", 3) + " " +
                    API.formatNumber(mfytts,"##0", 3) + "   " +
                    API.formatNumber(mfyovr50,"##0", 3)+ "    " +
                    API.formatNumber(mfyundr25,"##0", 3));
          }    //function PrintDetailLineMFY
          function PrintDetailLineCBB(DispTime, Bucket) {
               addLine(
                    API.formatNumber(DispTime.Hour, "00", 2) + ":" +
                    API.formatNumber(DispTime.Min,  "00", 2) + " " +
                    API.formatNumber(mfysn, "###0", 4) + "   " +
                    API.formatNumber(mfyavg,"#0.00", 5) + "  " +
                    API.formatNumber(mfytts,"##0", 3) + "    " +
                    API.formatNumber(mfyovr50,"##0", 3)+ "     " +
                    API.formatNumber(mfyundr25,"##0", 3));
          }    //function PrintDetailLineMFY
     }    //function function ReportMFYLine
	function ReportDTHOURLine(DispTime, PrintMode, HourlyBucket, TotalBucket) {
		var AccumBucket1;
		var AccumBucket2;

		var ot;
		var lt;
		var cash;
		var pnst;
		var totl;
		var ovrp;
		var ovtotl;
		var hld;
		var hold;
		var oecb;

		switch(PrintMode) {
		case MODE_HOURLY:
			AccumBucket1 = new SOSBucketData();

			// get all 4 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[2]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[3]);
	
			AccumTotalDTHOUR(AccumBucket1, TotalBucket);

			DispTime.Min   = 0;
			DispTime.Hour   = DispTime.Hour + 1;

			PrintDetailLineDTHOUR(DispTime, AccumBucket1)
			break;

		case MODE_30MIN:
			AccumBucket1 = new SOSBucketData();
			AccumBucket2 = new SOSBucketData();

			// get all 2 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);

			// Accumulate totals
			AccumTotalDTHOUR(AccumBucket1, TotalBucket);

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}


			// Print Detail Line
			PrintDetailLineDTHOUR(DispTime, AccumBucket1);


			// get all 2 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucket2, HourlyBucket.Bucket[2]);
			AccumBucket(AccumBucket2, HourlyBucket.Bucket[3]);


			// Accumulate totals
			AccumTotalDTHOUR(AccumBucket2, TotalBucket);

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
			// Print Detail Line
			PrintDetailLineDTHOUR(DispTime, AccumBucket2);
			break;

		case MODE_15MIN:
			// Accumulate totals
			AccumTotalDTHOUR(HourlyBucket.Bucket[0], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			// Print Detail Line
			PrintDetailLineDTHOUR(DispTime, HourlyBucket.Bucket[0]);

			// Accumulate totals
			AccumTotalDTHOUR(HourlyBucket.Bucket[1], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			// Print Detail Line
			PrintDetailLineDTHOUR(DispTime, HourlyBucket.Bucket[1]);

			// Accumulate totals
			AccumTotalDTHOUR(HourlyBucket.Bucket[2], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			// Print Detail Line
			PrintDetailLineDTHOUR(DispTime, HourlyBucket.Bucket[2]);

			// Accumulate totals
			AccumTotalDTHOUR(HourlyBucket.Bucket[3], TotalBucket);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			// Print Detail Line
			PrintDetailLineDTHOUR(DispTime, HourlyBucket.Bucket[3]);
			break;

		} // switch(PrintMode)


		function AccumTotalDTHOUR(Bucket, TotalBucket) {
			Bucket.totAvc_ac 	  = (Bucket.totTc!=0) ? Number(Bucket.totProdSale/Bucket.totTc):0;

			TotalBucket.totAccum  	 	+= Bucket.totProdSale;
			TotalBucket.totAccumTc 	 	+= Bucket.totTc;
			TotalBucket.totAccumcars 	+= Bucket.totcars;
			TotalBucket.totAccumOepea	+= Bucket.totOepeA;
			
			if (Bucket.totTc > 0) {
				ot		= Bucket.untilStore / Bucket.totTc;
				cash	= (Bucket.untilCloseDrawer - Bucket.untilRecall) / Bucket.totTc;
				pnst	= (Bucket.totalTime - Bucket.untilCloseDrawer) / Bucket.totTc;	// SDE-1428
				oecb	= (Bucket.untilRecall - Bucket.untilStore) / Bucket.totTc;
			} else {
				ot		= 0;
				cash	= 0;
				pnst	= 0;
				oecb	= 0;
			}

			totl	= ot + oecb + cash + pnst;
			ovrp	= Bucket.tcOverPresentationPreset;
			ovtotl	= Bucket.tcOverTotalPreset;
			hld		= Number(Bucket.tcHeld);

			if (hld!=0) {
				hold	= Bucket.heldTime/hld;
			} else {
				hold = 0;
			}
			TotalBucket.totAccumhld += hld;

			TotalBucket.totot		+= Number(ot);
			TotalBucket.totcash		+= Number(cash);
			TotalBucket.totpnst		+= Number(pnst);
			TotalBucket.totovrp		+= Number(ovrp);
			TotalBucket.totovtotl	+= Number(ovtotl);
			TotalBucket.tothld		+= Number(hld);
			TotalBucket.tothold		+= Number(hold);
			TotalBucket.totpvtotl	+= Number(totl * Bucket.totTc);
			TotalBucket.totoecb		+= Number(oecb);

			TotalBucket.podot		+= ot   * Bucket.totTc;
			TotalBucket.podcash		+= cash * Bucket.totTc;
			TotalBucket.podpnst		+= pnst * Bucket.totTc;
			TotalBucket.podoecb		+= oecb * Bucket.totTc;
			TotalBucket.podhold		+= hold * hld;
		} //function AccumTotalDTHOUR


		function PrintDetailLineDTHOUR(DispTime, Bucket) {
			addLine(
				API.formatNumber(DispTime.Hour, "00", 2) + ":" +
				API.formatNumber(DispTime.Min, "00", 2) + " " +
				API.formatNumber(Bucket.totProdSale, "#####0", 7) + " " +
				API.formatNumber(Bucket.totTc, "##0", 3) + " " +
				API.formatNumber(Bucket.totAvc_ac, "##0.00", 6) + " " +
				API.formatNumber(totl,"##0", 3) + "   " +
				API.formatNumber(Math.round(Bucket.totTc != 0 ? 100 * Bucket.totOepeA / Bucket.totTc : 0),"###0", 3) + "%  " +
				API.formatNumber(Math.round(Bucket.totTc != 0 ? 100 * Bucket.tcHeld / Bucket.totTc : 0),"###0", 3) + "%");
				
			var oecb = Math.round(Bucket.totTc != 0 ? (Bucket.untilRecall - Bucket.untilStore) / Bucket.totTc : 0);
				
			addLine("       " +
				API.formatNumber(Bucket.totcars, "##0", 3) + " " +
				//NVS-7493 Tishin
				API.formatNumber(ot, "##0", 3) + "   " +
				API.formatNumber(oecb, "##0", 3) + "  " +
				API.formatNumber(cash, "##0", 3) + "  " +
				API.formatNumber(pnst, "##0", 3) + "  " +
				API.formatNumber(oecb + cash + pnst, "##0", 3) + "   " +
				API.formatNumber(hold, "##0", 3));
				
		}	//function PrintDetailLineDTHOUR


	}  // function ReportDTHOURLine


	/**
	 * PRIVATE
	 * This function implements a routine for calculating totals and
	 * Displaying the detail line for body part of FC report
	 *
	 * @author Sang Kim
	 */
	function ReportFCLine(DispTime, PrintMode, HourlyBucket, TotalBucket) {
		var AccumBucket1;
		var AccumBucket2;

		var ot;
		var lt;
		var cash;
		var pnst;
		var totl;
		var ovra;
		var pvtotl;
		var servic;
		var orb;

		switch(PrintMode) {
		case MODE_HOURLY:
			AccumBucket1 = new SOSBucketData();

			// get all 4 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[2]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[3]);

			// Total Accumulation
			AccumTotalFC( AccumBucket1, TotalBucket );

			DispTime.Min   = 0;
			DispTime.Hour   = DispTime.Hour + 1;
			PrintDetailLineFC(DispTime, AccumBucket1);
			break;

		case MODE_30MIN:
			AccumBucket1 = new SOSBucketData();
			AccumBucket2 = new SOSBucketData();

			// get all 2 buckets, to get first 15 min
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[0]);
			AccumBucket(AccumBucket1, HourlyBucket.Bucket[1]);

			// get all 2 buckets, to get second 15 min
			AccumBucket(AccumBucket2, HourlyBucket.Bucket[2]);
			AccumBucket(AccumBucket2, HourlyBucket.Bucket[3]);

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}

			AccumTotalFC( AccumBucket1, TotalBucket );
			PrintDetailLineFC(DispTime, AccumBucket1);


			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
			AccumTotalFC(AccumBucket2, TotalBucket );
			PrintDetailLineFC(DispTime, AccumBucket2);
			break;

		case MODE_15MIN:
			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
			AccumTotalFC( HourlyBucket.Bucket[0], TotalBucket );
			PrintDetailLineFC(DispTime,HourlyBucket.Bucket[0]);

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
			AccumTotalFC( HourlyBucket.Bucket[1], TotalBucket );
			PrintDetailLineFC(DispTime, HourlyBucket.Bucket[1]);


			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
			AccumTotalFC( HourlyBucket.Bucket[2], TotalBucket );
			PrintDetailLineFC(DispTime, HourlyBucket.Bucket[2]);


			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
			AccumTotalFC( HourlyBucket.Bucket[3], TotalBucket );
			PrintDetailLineFC(DispTime, HourlyBucket.Bucket[3]);
			break;
		} //switch(PrintMode) {

		return; //function ReportFCLine


		function AccumTotalFC(Bucket, TotalBucket) {

			// if valid to divide, then calculate total info
			if (Bucket.totTc > 0) {
				Bucket.totAvc_ac	= Bucket.totProdSale / Bucket.totTc;
				ot					= Bucket.untilTotal  / Bucket.totTc;
				lt					= 0;
				if((root.POS.@podShort=="HOT")){
					lt 		= Bucket.untilRecall / Bucket.totTc;
				}

				cash	= (Bucket.untilCloseDrawer - Bucket.untilTotal) / Bucket.totTc;
				// SDE-1284 commented out due to calc problem in CSR report
 				pnst	= (Bucket.untilServe > Bucket.untilCloseDrawer)?(Bucket.untilServe - Bucket.untilCloseDrawer) / Bucket.totTc:0;		// SDE-1284
				servic	= (Bucket.untilServe > Bucket.untilCloseDrawer) ? (Bucket.untilServe - Bucket.untilCloseDrawer) / Bucket.totTc : 0;
				totl	= ot + cash + servic;
				TotalBucket.totAccum 	   += Bucket.totProdSale;
				orb	= (Bucket.untilDeliver > Bucket.untilServe) ? (Bucket.untilDeliver - Bucket.untilServe) / Bucket.totTc : 0;
			} else {
				Bucket.totAvc_ac	= 0;
				ot			= 0;
				lt			= 0;
				cash		= 0;
				pnst		= 0;
				totl		= 0;
				servic		= 0;
				orb 		= 0;

				TotalBucket.totAccum 	   += Bucket.totProdSale;
			}

			ovra		= Bucket.tcOverPresentationPreset;
			pvtotl		= Bucket.tcOverTotalPreset;

			TotalBucket.FCtotAvc_ac		+= Number(Bucket.totAvc_ac);

			TotalBucket.FCovra			+= Number(ovra);
			TotalBucket.FCpvtotl		+= Number(pvtotl);
			TotalBucket.FCtotl			+= Number(totl * Bucket.totTc);
			TotalBucket.FCot			+= Number(ot   * Bucket.totTc);
			TotalBucket.FCcash			+= Number(cash * Bucket.totTc);
			TotalBucket.FCpnst			+= Number(pnst * Bucket.totTc);
			TotalBucket.FCtotProdSale	+= Number(Bucket.totProdSale);
			TotalBucket.FCtotTc			+= Number(Bucket.totTc);
			TotalBucket.FCtotAccum		+= Number(TotalBucket.totAccum);
			
			TotalBucket.FcServA			+= Number(Bucket.totServA);
			TotalBucket.FcOrb			+= Number(orb * Bucket.totTc);
			TotalBucket.FcServic		+= Number(servic * Bucket.totTc);
		} // function AccumTotalFC()

		function PrintDetailLineFC(DispTime, Bucket) {
				addLine(
					API.formatNumber(DispTime.Hour,  "00", 2) + ":" +
					API.formatNumber(DispTime.Min, "00", 2) + " " +
					API.formatNumber(Bucket.totProdSale, "#######0", 8) + " " +
					API.formatNumber(Bucket.totTc, "##0", 3) + " " +
					API.formatNumber(Bucket.totAvc_ac, "###0.00", 7) + "   "  +
					API.formatNumber(Math.round(Bucket.totTc != 0 ? 100 * Bucket.totServA / Bucket.totTc : 0), "###0", 4) + "%  " +
					API.formatNumber(orb, "##0", 3));

				addLine("     " +
					API.formatNumber(TotalBucket.totAccum, "######0", 7) + "   " +
					API.formatNumber(ot, "##0", 3) + "     " +
					API.formatNumber(cash, "##0", 3) + "    " +
					API.formatNumber(servic, "###0", 4) + " " +
					API.formatNumber(totl, "###0", 4));

		} //function PrintDetailLineFC()

	} // function ReportFCLine

}  // US_SOS


/**
 * PRIVATE
 * This function implements a generic Sale SOS report
 * Needed data types: CASH, HOURLYSALES, SOS
 * @author Celso Fernandes
 */
function genericSos(config, data, root, reportType)
{
	return US_Sos(config, data, root, reportType);
}


/**
 * PUBLIC
 * Responsible for formating the CONSOLIDATED SERVICE REPORT for US
 * Needed data types: CASH, SOS
 * @author Sang Kim
 */
function US_ReportSOSCSR(config, data)
{
	if(init(config, data, Array("CASH","SOS"), "SSCSR") != 0){
		return getResponse();
	}			

	if(rootSOS.@errflag=="NODATA") {
		var message = API.getLocalMsg("MSG_REPORT_NO_DATE_FOR_PERIOD");
		addLine("ERROR:");
		addLine(message);
		return getResponse();
	}
	if(rootSOS.@errflag=="NODATABYDATE") {
		var businessDate=String(rootSOS.@requestDate);
		// convert from YYYYMMDD to MM/DD/YYYY
		businessDate=API.formatDate(businessDate, "MM/dd/yyyy");
		var message = API.getLocalMsg("MSG_BC_NOREPORTDATE", [businessDate]);
		addLine("ERROR:");
		addLine(message);
		return getResponse();
	}

	if ((rootSOSFC == null) || ((rootSOSDT == null) && (rootSOSWT == null)) || (rootSOSMFY == null)) {
		addLine("ERROR: POS configuration error.\nCall support, error code = SSCSR-S");
		return getResponse();
	}

	/*presets accessed directly via script*/
	storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"ProductionPresets\").Parameter.(@name==\"ServicTarget\").@value"; 
	posdbPath = "Configuration.(@imports==\"Store.wide\").Section.(@name==\"ProductionPresets\").Parameter.(@name==\"ServicTarget\").@value";
	servicTarget = getConfigValue(storedbPath , posdbPath);
	if (null == servicTarget || undefined == servicTarget || "" == servicTarget)
	{
		servicTarget = 90;
	}
	else
	{
		servicTarget = Number(servicTarget);
	}

	storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"ProductionPresets\").Parameter.(@name==\"OEPETarget\").@value"; 
	posdbPath = "Configuration.(@imports==\"Store.wide\").Section.(@name==\"ProductionPresets\").Parameter.(@name==\"OEPETarget\").@value";
	oepeTarget = getConfigValue(storedbPath , posdbPath);
	if (null == oepeTarget || undefined == oepeTarget || "" == oepeTarget)
	{
		oepeTarget = 120;
	}
	else
	{
		oepeTarget = Number(oepeTarget);
	}

	// create a new time tracking object
	// this is required because javaScript pass by reference only for
	// non-primitive objects
	var DispTime = new DisplayTime();

	// Alias to make variables more consistant
	var rootFC = rootSOSFC;
	var rootDT = (((rootSOSDT!=null)? rootSOSDT : new XML()) +
				( (rootSOSWT!=null)? rootSOSWT : new XML()));
	var rootMFY = rootSOSMFY;
     var rootCBB = rootSOSCBB;
	var flagIsPROD = 1;

    var HourlyModes  = new HourlyPrintModeBucket();
    ReadReportIntervals(HourlyModes);

	// not used for this report
	var reportType = 0;

    // object used for storing total information
    // total informations are typically used in footer section of the report
    var TotalBucket = new SOSTotalBucket();


	/*
	 *   Header
	 */
	RunHeader();


	/*
	 *   Body
	 */
	RunBody(servicTarget, oepeTarget);


	/*
	 *   Footer
	 */
	RunFooter();

	return getResponse();



	/*
	 *  Runs the header of the report
	 */
	function RunHeader() {
 		addLine(SEP_DL);
  		addHeader(rootCash, "CONSOLIDATED SERVICE REPORT", RPTSOSCSR);

     //                     1         2         3        34
     //            1234567890123456789012345678901234567890
          addLine("       FC                               ");
          addLine("         +                              ");
          addLine("HOUR      DT   KVS   McCAFE             ");
          addLine("END  T/C TOTL  SN#  T/C  TTS    TOTAL   ");
          addLine("TIME    SALES   TTS    SALES   T/C    SALES");

	} //function RunHeader


	/*
	 *  Runs the body of the report
	 */
	function RunBody(servicTarget, oepeTarget) {
		var nStartHr = 0;
		var nEndHr = 24;


		var hrIdx = nStartHr;
		while ( hrIdx < nEndHr ) {

			// printing mode for this perticular hour
			var PrintMode = HourlyModes.Mode[ hrIdx ];

			// Create a bucket, load it with the 1 hour bucket data
			FCHrBucket = new SOSHourData();
			DTHrBucket = new SOSHourData();
			MFYHrBucket = new SOSHourData();
               CBBHrBucket = new SOSHourData();

			// Load 1 hour data from FC, DT, MFT
			SOSCSRLoadBucket(rootFC,  hrIdx,  FCHrBucket, flagIsPROD, servicTarget, oepeTarget, reportType);
			SOSCSRLoadBucket(rootDT,  hrIdx,  DTHrBucket, flagIsPROD, servicTarget, oepeTarget, reportType);
			SOSCSRLoadBucket(rootMFY, hrIdx,  MFYHrBucket, flagIsPROD, servicTarget, oepeTarget, reportType);
               SOSCSRLoadBucket(rootCBB, hrIdx,  CBBHrBucket, flagIsPROD, servicTarget, oepeTarget, reportType);
			// Print the detail line based on the Print mode
			CSRReportLine(reportType, DispTime, PrintMode,
				FCHrBucket,
				DTHrBucket,
				MFYHrBucket,
                    CBBHrBucket,
				TotalBucket);

			hrIdx++

		} // while


	} //function RunBody()


	/**
	 *  Prints 1 hour of data to the output
	 *  The output can be:
	 *  1 line if print mode is hourly
	 *  2 lines if print mode is 30 min
	 *  4 lines if print mode is 15 min
	 */
     function CSRReportLine(reportType, DispTime, PrintMode, FCHrBucket, DTHrBucket, MFYHrBucket, CBBHrBucket, TotalBucket) {
		var AccumBucketFC;
		var AccumBucketDT;
		var AccumBucketMFY;
          var AccumBucketCBB;
		var avgtotlfc = 0;
		var fcdtsale = 0;
		var kvsttl = 0;
		var avgtotlfc = 0;
		var avgtotldt = 0;
		var avgtotlmfy = 0;
          var avgtotlcbb = 0;

		switch(PrintMode) {
		case MODE_HOURLY:
			AccumBucketFC = new SOSBucketData();
			AccumBucketDT = new SOSBucketData();
			AccumBucketMFY = new SOSBucketData();
               AccumBucketCBB = new SOSBucketData();
			// get all 4 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucketFC, FCHrBucket.Bucket[0]);
			AccumBucket(AccumBucketFC, FCHrBucket.Bucket[1]);
			AccumBucket(AccumBucketFC, FCHrBucket.Bucket[2]);
			AccumBucket(AccumBucketFC, FCHrBucket.Bucket[3]);

			AccumBucket(AccumBucketDT, DTHrBucket.Bucket[0]);
			AccumBucket(AccumBucketDT, DTHrBucket.Bucket[1]);
			AccumBucket(AccumBucketDT, DTHrBucket.Bucket[2]);
			AccumBucket(AccumBucketDT, DTHrBucket.Bucket[3]);

			AccumBucket(AccumBucketMFY, MFYHrBucket.Bucket[0]);
			AccumBucket(AccumBucketMFY, MFYHrBucket.Bucket[1]);
			AccumBucket(AccumBucketMFY, MFYHrBucket.Bucket[2]);
			AccumBucket(AccumBucketMFY, MFYHrBucket.Bucket[3]);

               AccumBucket(AccumBucketCBB, CBBHrBucket.Bucket[0]);
               AccumBucket(AccumBucketCBB, CBBHrBucket.Bucket[1]);
               AccumBucket(AccumBucketCBB, CBBHrBucket.Bucket[2]);
               AccumBucket(AccumBucketCBB, CBBHrBucket.Bucket[3]);

			// Total Accumulation
               AccumTotalCSR( AccumBucketFC, AccumBucketDT, AccumBucketMFY, AccumBucketCBB, TotalBucket );

			DispTime.Min   = 0;
			DispTime.Hour   = DispTime.Hour + 1;
               PrintDetailLineCSR(DispTime, AccumBucketFC, AccumBucketDT, AccumBucketMFY, AccumBucketCBB);
			break;

		case MODE_30MIN:
			AccumBucketFC = new SOSBucketData();
			AccumBucketDT = new SOSBucketData();
			AccumBucketMFY = new SOSBucketData();
               AccumBucketCBB = new SOSBucketData();
			// get all 4 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucketFC, FCHrBucket.Bucket[0]);
			AccumBucket(AccumBucketFC, FCHrBucket.Bucket[1]);

			AccumBucket(AccumBucketDT, DTHrBucket.Bucket[0]);
			AccumBucket(AccumBucketDT, DTHrBucket.Bucket[1]);

			AccumBucket(AccumBucketMFY, MFYHrBucket.Bucket[0]);
			AccumBucket(AccumBucketMFY, MFYHrBucket.Bucket[1]);

               AccumBucket(AccumBucketCBB, CBBHrBucket.Bucket[0]);
               AccumBucket(AccumBucketCBB, CBBHrBucket.Bucket[1]);
			// Total Accumulation
               AccumTotalCSR( AccumBucketFC, AccumBucketDT, AccumBucketMFY, AccumBucketCBB, TotalBucket );

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
               PrintDetailLineCSR(DispTime, AccumBucketFC, AccumBucketDT, AccumBucketMFY, AccumBucketCBB);



			AccumBucketFC = new SOSBucketData();
			AccumBucketDT = new SOSBucketData();
			AccumBucketMFY = new SOSBucketData();
               AccumBucketCBB = new SOSBucketData();
			// get all 4 buckets, add into another bucket to get summary info
			AccumBucket(AccumBucketFC, FCHrBucket.Bucket[2]);
			AccumBucket(AccumBucketFC, FCHrBucket.Bucket[3]);

			AccumBucket(AccumBucketDT, DTHrBucket.Bucket[2]);
			AccumBucket(AccumBucketDT, DTHrBucket.Bucket[3]);

			AccumBucket(AccumBucketMFY, MFYHrBucket.Bucket[2]);
			AccumBucket(AccumBucketMFY, MFYHrBucket.Bucket[3]);

               AccumBucket(AccumBucketCBB, CBBHrBucket.Bucket[2]);
               AccumBucket(AccumBucketCBB, CBBHrBucket.Bucket[3]);
			// Total Accumulation
               AccumTotalCSR( AccumBucketFC, AccumBucketDT, AccumBucketMFY, AccumBucketCBB, TotalBucket );

			DispTime.Min = DispTime.Min + 30;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
               PrintDetailLineCSR(DispTime, AccumBucketFC, AccumBucketDT, AccumBucketMFY, AccumBucketCBB);
			break;

		case MODE_15MIN:
			// accumlate single bucket information, then print out
			// there are 4 buckets to report within an hour
               AccumTotalCSR( FCHrBucket.Bucket[0], DTHrBucket.Bucket[0], MFYHrBucket.Bucket[0], CBBHrBucket.Bucket[0], TotalBucket );

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
               PrintDetailLineCSR(DispTime, FCHrBucket.Bucket[0], DTHrBucket.Bucket[0], MFYHrBucket.Bucket[0], CBBHrBucket.Bucket[0]);



               AccumTotalCSR( FCHrBucket.Bucket[1], DTHrBucket.Bucket[1], MFYHrBucket.Bucket[1], CBBHrBucket.Bucket[1], TotalBucket );

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
               PrintDetailLineCSR(DispTime, FCHrBucket.Bucket[1], DTHrBucket.Bucket[1], MFYHrBucket.Bucket[1], CBBHrBucket.Bucket[1]);



               AccumTotalCSR( FCHrBucket.Bucket[2], DTHrBucket.Bucket[2], MFYHrBucket.Bucket[2], CBBHrBucket.Bucket[2], TotalBucket );

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
               PrintDetailLineCSR(DispTime, FCHrBucket.Bucket[2], DTHrBucket.Bucket[2], MFYHrBucket.Bucket[2], CBBHrBucket.Bucket[2]);



               AccumTotalCSR( FCHrBucket.Bucket[3], DTHrBucket.Bucket[3], MFYHrBucket.Bucket[3], CBBHrBucket.Bucket[3], TotalBucket );

			DispTime.Min = DispTime.Min + 15;
			if (DispTime.Min > 45) {
				DispTime.Min = 0;
				DispTime.Hour = DispTime.Hour + 1;
			}
               PrintDetailLineCSR(DispTime, FCHrBucket.Bucket[3], DTHrBucket.Bucket[3], MFYHrBucket.Bucket[3], CBBHrBucket.Bucket[3]);
			break;
		} //switch(PrintMode)

		return;


		/**
		 *
		 *  Accumlates the hourly numbers for reporting, then update the total bucket
		 *
		 */
          function AccumTotalCSR( AccumBucketFC, AccumBucketDT, AccumBucketMFY, AccumBucketCBB, TotalBucket ) {
			fcdttc 	 = Number(AccumBucketFC.totTc)		 + Number(AccumBucketDT.totTc);
			fcdtsale = Number(AccumBucketFC.totProdSale) + Number(AccumBucketDT.totProdSale);
			kvsttl   = Number(0);

               avgtotlfc  = (AccumBucketFC.totTc!= 0) ? Number(AccumBucketFC.totalTime) / Number(AccumBucketFC.totTc) : Number(0);
               avgtotldt  = (AccumBucketDT.totTc!= 0) ? Number(AccumBucketDT.totalTime) / Number(AccumBucketDT.totTc) : Number(0);

				/* XXXSDE-357XXX  NPS-357 -change to untilServe */
               avgtotlmfy = (AccumBucketMFY.totTc!= 0) ? (Number(AccumBucketMFY.untilServe) / Number(AccumBucketMFY.totTc)) : Number(0);
			   // NPS-101 RPS 10/22/09
               avgtotlcbb = (AccumBucketCBB.totTc!= 0) ? (Number(AccumBucketCBB.untilServe) / Number(AccumBucketCBB.totTc)) : Number(0);
			TotalBucket.accumpodfc 	+= Number(avgtotlfc) * Number(AccumBucketFC.totTc);
			TotalBucket.accumpoddt	+= Number(avgtotldt) * Number(AccumBucketDT.totTc);

			var totAvg = Number(avgtotlmfy) * fcdttc;
			TotalBucket.accumpodkvs	+= totAvg;

			//RPS  07/27/2010  NVS-309
			TotalBucket.mfyttstot += AccumBucketMFY.untilServe;
			TotalBucket.totAccumTc += AccumBucketMFY.totTc;

			TotalBucket.accumtcfc 	+= Number(AccumBucketFC.totTc);
			TotalBucket.accumtotlfc	+= Number(avgtotlfc);
			TotalBucket.accumkvsttl	+= Number(avgtotlmfy);

			TotalBucket.accumtcdt 		+= Number(AccumBucketDT.totTc);
			TotalBucket.accumtotldt		+= Number(avgtotldt);
			TotalBucket.accumfcsale		+= Number(AccumBucketFC.totProdSale);
			TotalBucket.accumdtsale		+= Number(AccumBucketDT.totProdSale);
			TotalBucket.accumfcdtsale	+= Number(fcdtsale);
               TotalBucket.accummfySN        +=Number(AccumBucketMFY.itemsCount);
               TotalBucket.accumcbbTC        +=Number(AccumBucketCBB.totTc);
               TotalBucket.accumcbbTTS       +=Number(AccumBucketCBB.untilServe);  //nvs-1368
               TotalBucket.accumcbbSales     +=Number(AccumBucketCBB.totProdSale);
		} //function AccumTotalCSR

		/*
		 *  Prints single defail line of CSR report
		 *
		 */
          function PrintDetailLineCSR(DispTime, BucketFC, BucketDT, BucketMFY, BucketCBB) {
               /* SDE-2667 -format the CRS to new spec, including cbb */
               fmtEndTime     =API.formatNumber(DispTime.Hour, "00", 2) + ":" + API.formatNumber(DispTime.Min, "00", 2);
               fmtTotTcFc     =API.formatNumber(BucketFC.totTc, "###0", 4);
               fmtAvgtotlfc   =API.formatNumber(avgtotlfc, "###0", 4);
               fmtAvgtotlmfy  =API.formatNumber(avgtotlmfy, "###0", 4);
               fmtTotTcDt     =API.formatNumber(BucketDT.totTc , "###0", 4);
               fmtAvgtotldt   =API.formatNumber(avgtotldt, "###0", 4);
               fmtFcdttc      =API.formatNumber(fcdttc, "###0", 4);
               fmtFcdtsale    =API.formatNumber(fcdtsale, "#0.00", 8);

               fmtTotProdSFC  =API.formatNumber(BucketFC.totProdSale, "#0.00", 8);
               fmtTotProdSDT  =API.formatNumber(BucketDT.totProdSale, "#0.00", 8);
               fmtTotalTC     =API.formatNumber(BucketFC.totTc+BucketDT.totTc, "###0", 4);
               fmtTotalSales  =API.formatNumber(BucketFC.totProdSale+BucketDT.totProdSale, "#0.00", 8);
               fmtMfySN       =API.formatNumber(BucketMFY.itemsCount, "###0", 4);
               fmtTotTcCBB    =API.formatNumber(BucketCBB.totTc, "###0", 4);  /* total trans count */
               fmtCBBttc      =API.formatNumber(avgtotlcbb, "###0", 4);  /* total screen time */
               fmtCBBsale     =API.formatNumber(BucketCBB.totProdSale, "#0.00", 8);  /* total sales */
               addLine(fmtEndTime+""+fmtTotTcFc+" "+fmtAvgtotlfc+" "+fmtMfySN+" "+fmtTotTcCBB+
                                     " "+fmtCBBttc+" "+fmtTotalTC+ " "+fmtTotalSales);
               addLine("      "+fmtTotProdSFC+" "+fmtAvgtotlmfy+"  "+fmtCBBsale);
               //addLine(" ");
               addLine(" DT "+fmtTotTcDt+"  "+fmtAvgtotldt);
               addLine("      "+fmtTotProdSDT);
		} //function PrintDetailLineCSR

	} //function CSRReportLine


	function RunFooter() {
		//#####################################
		// Footer Section
		//#####################################
          AccumTotTc     =TotalBucket.accumtcfc + TotalBucket.accumtcdt;
          fmtAccumTotTc  =API.formatNumber(AccumTotTc, "###0", 4);
          accumfcdttc    =TotalBucket.accumtcfc + TotalBucket.accumtcdt;
          fmtAccumfcdttc =API.formatNumber(accumfcdttc, "##0", 3);
          accumtcfc      =API.formatNumber(TotalBucket.accumtcfc, "###0", 4);
          accumfctotl    =API.formatNumber(TotalBucket.accumpodfc/TotalBucket.accumtcfc, "###0", 4);
          //accumkvstotl   =API.formatNumber(TotalBucket.accumpodkvs/AccumTotTc, "###0", 4);
          accumkvstotl   =API.formatNumber(TotalBucket.mfyttstot/TotalBucket.totAccumTc, "###0", 4);

		  // NVS-305 RPS  06/22/2010   Changed formatt digits of dollar amounts from 6 to 8
          accumtcdt      =API.formatNumber(TotalBucket.accumtcdt, "###0", 4);
          accumdttotl    =API.formatNumber(TotalBucket.accumpoddt/TotalBucket.accumtcdt, "###0", 4);
          accumfcdtsale  =API.formatNumber(TotalBucket.accumfcdtsale, "#0.00", 8);
          fmtfcdtsales   =API.formatNumber(TotalBucket.accumfcsale+TotalBucket.accumdtsale, "#0.00", 8);
          accumfcsale    =API.formatNumber(TotalBucket.accumfcsale, "#0.00", 8);
          accumdtsale    =API.formatNumber(TotalBucket.accumdtsale, "#0.00", 8);
          accummfySN     =API.formatNumber(TotalBucket.accummfySN, "###0", 4);
          accumcbbTC     =API.formatNumber(TotalBucket.accumcbbTC, "###0", 4);
		  // NVS-106  RPS 10/21/09
		  TempNum = (TotalBucket.accumcbbTC != 0) ? (TotalBucket.accumcbbTTS / TotalBucket.accumcbbTC) : 0;
          accumcbbTTS    =API.formatNumber(TempNum, "###0", 4);
          accumcbbSales  =API.formatNumber(TotalBucket.accumcbbSales, "#0.00", 8);
          /* formatting */
          addLine();
          addLine("TOTAL:        "+accummfySN+" "+accumcbbTC+" "+accumcbbTTS+" "+fmtAccumTotTc+" "+fmtfcdtsales);
          addLine(" FC "+accumtcfc+" "+accumfctotl+" "+accumkvstotl+"    "+accumcbbSales);
	  addLine("       "+accumfcsale);
          addLine(" DT "+accumtcdt+" "+accumdttotl);
          addLine("       "+accumdtsale);

			addFooter(rootCash);
	} //function RunFooter

} //function US_ReportSOSCSR


/**
 * PUBLIC
 * Responsible for formating the CONSOLIDATED SERVICE REPORT.
 * Needed data types: CASH, SOS
 * @author Celso
 */
function reportSosCsr(config, data)
{
	return US_ReportSOSCSR(config, data);
};



/* Finish function implements a generic SALE SOS report */

//Kalpesh - offer-promotion detail report - NVS-4635 - start
function reportOfferPromtionDetail(config, data)
{ 
	return reportOffersPromoDetail(config,data, RPTCASHACCUMULATED)
}
function reportOfferPromtionDetailSW(config, data)
{ 
	return reportOffersPromoDetail(config,data, RPTCASHCONSOLIDATED);
}

function reportOffersPromoDetail(config, data, reportType)
{
	if (init(config, data, Array("CASH", "PMIX"), "OFFER") != 0) {
		return getResponse();
	}
	
		/* Offers */
		var custom = rootConfig.CustomData[0].CustomData.Report.OffersReport;		
		var xmlCustom = new XML(custom.toString());

		API.dbg("Report Offer-Promtion Details rootConfig="+rootConfig.toString());
		
		addLine(SEP_DL);
		addHeader(rootCash, "Digital Offers Redeemed Detail", reportType);		

		var OfferLine = "";
		var PromoOrOfferTotalCount = 0;
		var PromoOrOfferTotalDiscount = 0;		
		var PromoOrOrderDiscountTC = 0;
		var OrderDiscountTC = 0;
		var ItemDiscountTC = 0;		
		var PromoDiscountTC = 0;		
		var OrderDiscountAmt = 0;
		var ItemDiscountAmt = 0;		
		var PromoDiscountAmt = 0;		
		
		addLine("TOTAL OFFERS ANALYSIS");
		addLine("");
		addLine("OFFER Type     #Redeemed	$Amt Disc");
		addLine("");
		
		// Loop through all offer types and print out digital offers detail report	
		for each (var Offer in xmlCustom.OfferTypes.Offer) {			
			if (Offer.@type.toUpperCase().indexOf("ORDER") >= 0) 
				{
					//Add in to a order discount buckets
					OrderDiscountTC += Number(Offer.@tc);		
					OrderDiscountAmt += Number(Offer.@totalDiscount);	
				}
			else if (Offer.@type.toUpperCase().indexOf("ITEM") >= 0)
				{
					ItemDiscountTC += Number(Offer.@tc);
					ItemDiscountAmt += Number(Offer.@totalDiscount);	
				}
			else 
				{
					PromoDiscountTC += Number(Offer.@tc);
					PromoDiscountAmt += Number(Offer.@totalDiscount);				
				}
			
			PromoOrOfferTotalCount += Number(Offer.@tc);
			PromoOrOfferTotalDiscount += Number(Offer.@totalDiscount);
		}					
		
		if (OrderDiscountTC >= 0) 
		{
			OfferLine = API.setOnLeft("ORDER DISCOUNT", 14) + "	" + OrderDiscountTC + "		" + API.setOnRight(API.formatNumber(OrderDiscountAmt, "####.00", 6), 6);
			addLine(OfferLine);		
		}
		if(ItemDiscountTC >= 0)
		{
			OfferLine = API.setOnLeft("ITEM DISCOUNT", 14) + "	" + ItemDiscountTC+ "		" + API.setOnRight(API.formatNumber(ItemDiscountAmt, "####.00", 6), 6);
			addLine(OfferLine);
		}
		if(PromoDiscountTC >= 0)  //Do not log this because not required in report as per requirements.
		{
			OfferLine = API.setOnLeft("PROMO", 10) + "	" + PromoDiscountTC + "		" + API.setOnRight(API.formatNumber(PromoDiscountAmt, "####.00", 6), 6);
			addLine(OfferLine);
		}		
		addLine("");
		OfferLine = API.setOnLeft("TOTAL", 12) + " = " + API.formatNumber(PromoOrOfferTotalCount, "###", 3) + "		" + API.formatNumber(PromoOrOfferTotalDiscount, "####.00", 6);
		addLine(OfferLine);		

//---------------------------------------------------------OFFER ORDER LEVEL DISCOUNT---------------
	
		addLine(SEP_DL);		
		addLine("Digital Offers ORDER-LEVEL Discount");
		
		var ItemLine = ""
		var OffersTotalCount = 0;
		var DiscountAmt = 0;

		addLine("");
		addLine("% Discount	#Redeemed	$Amt Disc");
		addLine("");
				
		// Loop through all ORDER-LEVEL promotion types and print out		
		for each (var OrderDiscount in xmlCustom.OrderDiscounts.OrderDiscount) {	

			if (OrderDiscount.@discountType.indexOf("%") >= 0)  //for % discount
			{		
				ItemLine = OrderDiscount.@discountType + "		" + OrderDiscount.@tc + "		" + OrderDiscount.@totalDiscount;
				OffersTotalCount += Number(OrderDiscount.@tc);			
				DiscountAmt += Number(OrderDiscount.@totalDiscount);	
				addLine(ItemLine);			
			}			
		}

		addLine("");
		ItemLine = API.setOnLeft("TOTAL", 10) + " = " + API.formatNumber(OffersTotalCount, "###", 3) + "	" + API.formatNumber(DiscountAmt, "####.00", 6);
		addLine(ItemLine);
		
		OffersTotalCount = 0; //reset
		DiscountAmt = 0;		
		
		addLine(SEP_SL);				
		addLine("$ Discount	#Redeemed	$Amt Disc");
		addLine("");
				
		// Loop through all ORDER-LEVEL promotion types and print out		
		for each (var OrderDiscount in xmlCustom.OrderDiscounts.OrderDiscount) {	
			if (OrderDiscount.@discountType.indexOf("%") < 0) //for $ discount
			{		
				ItemLine = OrderDiscount.@discountType + "		" + OrderDiscount.@tc + "		" + OrderDiscount.@totalDiscount;
				OffersTotalCount += Number(OrderDiscount.@tc);			
				DiscountAmt += Number(OrderDiscount.@totalDiscount);	
				addLine(ItemLine);				
			}
		}
		
		
		addLine("");
		ItemLine = API.setOnLeft("TOTAL", 10) + " = " + API.formatNumber(OffersTotalCount, "###", 3) + "	" + API.formatNumber(DiscountAmt, "####.00", 6);
		addLine(ItemLine);
		
//------------------------------------------------------OFFER ITEM LEVEL DISCOUNT-----------------	
		addLine(SEP_DL);		
		addLine("Digital Offers ITEM-LEVEL Discount");
		addLine("");

		ItemLine = "";
		var prdName = "";
		OffersTotalCount = 0;
		DiscountAmt = 0;		
		
		addLine("Product Name	#Qty	$AmtOff	$AmtDisc");
		
		// Loop through all ITEM-LEVEL promotion types and print out		
		for each (var ItemDiscount in xmlCustom.ItemDiscounts.ItemDiscount) {		
			prdName = ItemDiscount.@productName;
			ItemLine = API.setOnLeft(prdName.substr(0, 14),15) + "	" + ItemDiscount.@totalQty + "	" + ItemDiscount.@discountAmount + "	" + ItemDiscount.@totalDiscount;			
			OffersTotalCount += Number(ItemDiscount.@totalQty);	
			DiscountAmt += Number(ItemDiscount.@totalDiscount);	
			addLine(ItemLine);				
		}
		addLine("");
		ItemLine = API.setOnLeft("TOTAL", 10) + " = " + API.formatNumber(OffersTotalCount, "###", 3) + "	" + API.formatNumber(DiscountAmt, "####.00", 6);
		addLine(ItemLine);		
		addLine("");			

//--------------------------------------------------------------PROMOTIONS------------

		/* Promotions */
		custom = rootConfig.CustomData[0].CustomData.Report.PromotionsReport;		
		xmlCustom2 = new XML(custom.toString());	
	
		addLine(SEP_DL);
		addLine("	Promotions Detail Report");
		addLine(SEP_DL);		
		
		addLine("TOTAL PROMOTIONS ANALYSIS");
		addLine("");
		addLine("Promotion Type     #Redeemed	$Amt Disc");
		addLine("");	
		
		OfferLine = "";		
		
		PromoOrOfferTotalCount = 0;
		PromoOrOfferTotalDiscount = 0;
		OrderDiscountTC = 0;
		ItemDiscountTC = 0;				
		PromoDiscountTC = 0;		
		OrderDiscountAmt = 0;
		ItemDiscountAmt = 0;		
		PromoDiscountAmt = 0;				
		
		// Loop through all promotion types and print out promotion detail report	
		for each (var Promotion in xmlCustom2.PromotionTypes.Promotion) {			
			if (Promotion.@type.toUpperCase().indexOf("ORDER") >= 0) 
				{
					//Add in to a order discount buckets
					OrderDiscountTC += Number(Promotion.@tc);		
					OrderDiscountAmt += Number(Promotion.@totalDiscount);	
				}
			else if (Promotion.@type.toUpperCase().indexOf("ITEM") >= 0)
			{
				ItemDiscountTC += Number(Promotion.@tc);
				ItemDiscountAmt += Number(Promotion.@totalDiscount);	
			}
			else
			{
				PromoDiscountTC += Number(Promotion.@tc);
				PromoDiscountAmt += Number(Promotion.@totalDiscount);				
			}
			
			PromoOrOfferTotalCount += Number(Promotion.@tc);
			PromoOrOfferTotalDiscount += Number(Promotion.@totalDiscount);
		}					
		
		if (OrderDiscountTC >= 0) 
		{
			OfferLine = API.setOnLeft("ORDER DISCOUNT", 14) + "		" + OrderDiscountTC + "	" + API.setOnRight(API.formatNumber(OrderDiscountAmt, "##0.00", 6), 6);
			addLine(OfferLine);		
		}
		if(ItemDiscountTC >= 0)
		{
			OfferLine = API.setOnLeft("ITEM DISCOUNT", 14) + "		" + ItemDiscountTC + "	" + API.setOnRight(API.formatNumber(ItemDiscountAmt, "##0.00", 6), 6);
			addLine(OfferLine);
		}
		if(PromoDiscountTC >= 0) //Do not log this because not required in report as per requirements.
		{
			OfferLine = API.setOnLeft("PROMO", 10) + "		" + PromoDiscountTC + "	" + API.setOnRight(API.formatNumber(PromoDiscountAmt, "##0.00", 6), 6);
			addLine(OfferLine);
		}		
		addLine("");
		OfferLine = API.setOnLeft("TOTAL", 12) + "	 = " + API.formatNumber(PromoOrOfferTotalCount, "###", 3) + "		" + API.formatNumber(PromoOrOfferTotalDiscount, "##0.00", 6);
		addLine(OfferLine);		
		
//------------------------------------------------------------PROMOTIONS ORDER-LEVEL DISCOUNT-------------		
				
		addLine(SEP_DL);
		addLine("Promotions ORDER-LEVEL DISCOUNT");

		ItemLine = ""
		OffersTotalCount = 0;
		PromoAmt = 0;

		addLine("");
		addLine("% Discount	#Redeemed	$Amt Disc");
		addLine("");		
				
		// Loop through all ORDER-LEVEL promotion types and print out		
		for each (var OrderDiscount in xmlCustom2.OrderDiscounts.OrderDiscount) {		
			if (OrderDiscount.@discountType.indexOf("%") >= 0)  //for % discount
			{	
				ItemLine = OrderDiscount.@discountType + "		" + OrderDiscount.@tc + "		" + OrderDiscount.@totalDiscount;
				addLine(ItemLine);		
				OffersTotalCount += Number(OrderDiscount.@tc);	
				PromoAmt += Number(OrderDiscount.@totalDiscount);				
			}
		}	

		addLine("");			
		ItemLine = API.setOnLeft("TOTAL", 10) + " = " + API.formatNumber(OffersTotalCount, "###", 3) + "	" + API.formatNumber(PromoAmt, "####.00", 6);
		addLine(ItemLine);		
		addLine("");	

		OffersTotalCount = 0; //reset
		PromoAmt = 0;
		
		addLine(SEP_SL);		
		addLine("$ Discount	#Redeemed	$Amt Disc");
		addLine("");
				
		// Loop through all ORDER-LEVEL promotion types and print out		
		for each (var OrderDiscount in xmlCustom2.OrderDiscounts.OrderDiscount) {	
			if (OrderDiscount.@discountType.indexOf("%") < 0) //for $ discount
			{		
				ItemLine = OrderDiscount.@discountType + "		" + OrderDiscount.@tc + "		" + OrderDiscount.@totalDiscount;
				OffersTotalCount += Number(OrderDiscount.@tc);			
				PromoAmt += Number(OrderDiscount.@totalDiscount);	
				addLine(ItemLine);				
			}
		}
		
		addLine("");			
		ItemLine = API.setOnLeft("TOTAL", 10) + " = " + API.formatNumber(OffersTotalCount, "###", 3) + "	" + API.formatNumber(PromoAmt, "####.00", 6);
		addLine(ItemLine);		
		addLine("");			
		
//------------------------------------------------------------------PROMOTIONS ITEM-LEVEL DISCOUNT-------------	
		ItemLine = "";
		OffersTotalCount = 0;
		DiscountAmt = 0;
		PromoAmt = 0;

		addLine(SEP_DL);
		addLine("Promotions ITEM-LEVEL DISCOUNT");
		addLine("");
		
		addLine("Product Name	#Qty	$AmtOff	$AmtDisc");
		
		// Loop through all ITEM-LEVEL promotion types and print out		
		for each (var ItemDiscount in xmlCustom2.ItemDiscounts.ItemDiscount) {		
			prdName = ItemDiscount.@productName;
			ItemLine = API.setOnLeft(prdName.substr(0, 14),15) + "	" + ItemDiscount.@totalQty + "	" + ItemDiscount.@discountAmount + "	" + ItemDiscount.@totalDiscount;			
			OffersTotalCount += Number(ItemDiscount.@totalQty);	
			DiscountAmt += Number(ItemDiscount.@totalDiscount);				
			addLine(ItemLine);				
		}		
		addLine("");			
		ItemLine = API.setOnLeft("TOTAL", 10) + " = " + API.formatNumber(OffersTotalCount, "###", 3) + "	" + API.formatNumber(DiscountAmt, "####.00", 6);
		addLine(ItemLine);		
		addLine("");
		
		xmlCustom = "";
		xmlCustom2 = "";
		custom = "";

	//Add footer and return response
	addFooter(rootCash);	
	return getResponse();		
	
} //Kalpesh - offer-promotion detail report - NVS-4635 - end

// should be lookup for reportType
// maybe = PosCheckSessionProperty("ReportFlags", "CONSOLIDATED")) ? RPTCASHCONSOLIDATED : RPTCASHACCUMULATED;
function reportOffersByDate(config, data)
{
	return reportOffers(config, data, RPTCASHACCUMULATED);
}
function reportOffersByDateSW(config, data)
{
	return reportOffers(config, data, RPTCASHCONSOLIDATED);
}
function reportCurrentDayOffers(config, data)
{ 
return reportOffers(config,data, RPTCASHACCUMULATED)
}
function reportCurrentDayOffersSW(config, data)
{ 
return reportOffers(config,data, RPTCASHCONSOLIDATED);
}

function reportOffers(config, data, reportType)
{
	if (init(config, data, Array("CASH", "PMIX"), "OFFER") != 0) {
		return getResponse();
	}
	// This needed init(config, data, Array("CASH", "PMIX") and is a bit slow!
	
	
	var custom = rootConfig.CustomData[0].CustomData.Report.OffersReport;
	API.dbg("reportOffers rootConfig="+rootConfig.toString());
	/* removed decoding custom = decode_base64(custom);	*/ 
	var xmlCustom = new XML(custom.toString());	
	
	addLine(SEP_DL);
	addHeader(rootCash, "Offers/Promotions Summary Report", reportType);
	
		addLine("Manager           : " + API.setOnRight(API.formatNumber(Number(rootConfig.Manager.@id),   "###",         3), COLS - 22));			
		addLine(SEP_DL);

		/* Offers */
		addLine("TOTAL OFFERS REDEEMED");
		addLine("");
		addLine("Offer Type             #Offers Redeemed");
		addLine("");		
		var OfferLine = ""
		var OffersTotalCount = 0;
		var TotalAmt = new BigDecimal("0.00");
		var Discount = 0;
		var Promo = 0;
		// Loop through all offer types and print out		
		for each (var Offer in xmlCustom.OfferTypes.Offer) {			
			if (Offer.@type.toUpperCase().indexOf("DISCOUNT") >= 0) 
				//Add in to a discount bucket
				Discount += Number(Offer.@tc);			
			else
			{
				// Add in to a promo bucket
				Promo += Number(Offer.@tc);	
			}
			OffersTotalCount += Number(Offer.@tc);
		}					
		if (Discount >= 0) 
		{
			OfferLine = API.setOnLeft("DISCOUNT", 28) + " = " + API.setOnRight(API.formatNumber(Discount, "###", 3), 6);		
			addLine(OfferLine);		
		}
		if(Promo >= 0)
		{
			OfferLine = API.setOnLeft("PROMO", 28) + " = " + API.setOnRight(API.formatNumber(Promo, "###", 3), 6);				
			addLine(OfferLine);	
		}
		addLine("");
		var TotalLine = API.setOnLeft("TOTAL OFFERS REDEEMED", 28) + " = " + API.setOnRight(API.formatNumber(OffersTotalCount, "###", 3), 6);
		addLine(TotalLine);				

		/* Promotions */
		var custom = rootConfig.CustomData[0].CustomData.Report.PromotionsReport;
		/* removed decoding custom = decode_base64(custom);	*/ 
		var xmlCustom = new XML(custom.toString());	
		
//		addLine("TOTAL PROMOTIONS REDEEMED");
		addLine("");
		addLine("Promotion Type     #Promotions Redeemed");
		addLine("");		
		OfferLine = ""
		var PromotionsTotalCount = 0;
		TotalAmt = new BigDecimal("0.00");
		Discount = 0;
		Promo = 0;
		// Loop through all promotion types and print out		
		for each (var Promotion in xmlCustom.PromotionTypes.Promotion) {			
			if (Promotion.@type.toUpperCase().indexOf("DISCOUNT") >= 0) 
				//Add in to a discount bucket
				Discount += Number(Promotion.@tc);			
			else
			{
				Promo += Number(Promotion.@tc);
			}
			PromotionsTotalCount += Number(Promotion.@tc);
		}					
		if (Discount >= 0) 
		{
			OfferLine = API.setOnLeft("DISCOUNT", 28) + " = " + API.setOnRight(API.formatNumber(Discount, "###", 3), 6);		
			addLine(OfferLine);		
		}
		if(Promo >= 0)
		{
			OfferLine = API.setOnLeft("PROMO", 28) + " = " + API.setOnRight(API.formatNumber(Promo, "###", 3), 6);				
			addLine(OfferLine);
		}
		addLine("");
		TotalLine = API.setOnLeft("TOTAL PROMOTIONS REDEEMED", 28) + " = " + API.setOnRight(API.formatNumber(PromotionsTotalCount, "###", 3), 6);
		addLine(TotalLine);
		
		addLine("");
		TotalLine = API.setOnLeft("TOTAL OFFERS/PROMOTIONS", 28) + " = " + API.setOnRight(API.formatNumber(OffersTotalCount+PromotionsTotalCount, "###", 3), 6);
		addLine(TotalLine);				

		
	addFooter(rootCash);	
	return getResponse();
}


function decode_base64(data) {
  // http://kevin.vanzonneveld.net
  // +   original by: Tyler Akins (http://rumkin.com)
  // +   improved by: Thunder.m
  // +      input by: Aman Gupta
  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // +   bugfixed by: Onno Marsman
  // +   bugfixed by: Pellentesque Malesuada
  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // +      input by: Brett Zamir (http://brett-zamir.me)
  // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
  // *     returns 1: 'Kevin van Zonneveld'
  // mozilla has this native
  // - but breaks in 2.0.0.12!
  //if (typeof this.window['atob'] === 'function') {
  //    return atob(data);
  //}
  var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
    ac = 0,
    dec = "",
    tmp_arr = [];

  if (!data) {
    return data;
  }

  data += '';
	// remove all characters that are not A-Z, a-z, 0-9, +, /, or =
	//var base64test = /[^A-Za-z0-9\+\/\=]/g;
	//if (base64test.exec(data)) {
	//	API.SLog("LOGLEVL_WARNING", "invalid base64 characters in the input text " + data);
	//}
	//data = data.replace(/[^A-Za-z0-9\+\/\=]/g, "");

  do { // unpack four hexets into three octets using index points in b64
    h1 = b64.indexOf(data.charAt(i++));
    h2 = b64.indexOf(data.charAt(i++));
    h3 = b64.indexOf(data.charAt(i++));
    h4 = b64.indexOf(data.charAt(i++));

    bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

    o1 = bits >> 16 & 0xff;
    o2 = bits >> 8 & 0xff;
    o3 = bits & 0xff;

    if (h3 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1);
    } else if (h4 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1, o2);
    } else {
      tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
    }
  } while (i < data.length);

  dec = tmp_arr.join('');

  return dec;
}


/**
 * PUBLIC
 * Responsible for formating the Time Punch report for a single user.
 * Needed data types: TIMEPUNCH
 * @author Gustavo
 */
function reportSingleTimePunch(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("TIMEPUNCH"), "TIMREC") != 0) {
		return getResponse();
	}
	var user=rootTimePunch.Users.User;
	addLine(SEP_DL);
	addLine(center("Time Punch Receipt"));
	addLine(center("Date:" + API.formatDate(rootTimePunch.@requestDate,"MM/dd/yyyy") + "    Store# " + rootConfig.StoreId));
	addLine(SEP_DL);
	addLine("Employee ID: "+user.@id);
	addLine("Employee Name: "+user.@name);
	addLine();
	addLine("Time Punch Data");
	addLine("        Punch      Punch       Elapsed");
	addLine("          In        Out          Time");
	var bOpen=false;
	for each (timeInfo in user.Time) {
		addLine("        "+timeInfo.@intime+"      "+timeInfo.@outtime+"        "+timeInfo.@elapsed);
		if((timeInfo.@intime == "*****") || (timeInfo.@outtime == "*****")) {
			bOpen=true;
		}
	}
	addLine("                               -------");
	addLine("       Total Hours              "+((bOpen)?"*****":user.Total.@time));
	addLine();
	addLine("Note: Total hours may differ on ISP");
	addFooter(rootTimePunch);
	return getResponse();
};

/**
 * PUBLIC
 * Responsible for formating the Time Punch report for the store.
 * Needed data types: TIMEPUNCH
 * @author Gustavo
 */
function reportGlobalTimePunch(config, data)
{
	//By Period PMIX REPORT
	if(init(config, data, Array("TIMEPUNCH"), "TIMREC") != 0) {
		return getResponse();
	}
	addLine(SEP_DL);
	addLine(center("Daily  Time  Punch  Report"));
	addLine(center("Business Date: " + API.formatDate(rootTimePunch.@requestDate,"MM/dd/yyyy")));
	addLine(center("Time: " + API.formatTime(rootTimePunch.@creationDate.substring(9,17),"HH:mm:ss")));
	addLine(center("Store#: " + rootConfig.StoreId));
	addLine(SEP_DL);
	for each (user in rootTimePunch.Users.User) {
		addLine();
		addLine("Employee ID: "+user.@id);
		addLine("Employee Name: "+user.@name);
		var lines=0;
		var times="Time Punches: ";
		for each (timeInfo in user.Time) {
			if((lines%2) == 1) {
				times+=",";
			}
			times+=timeInfo.@intime;
			if(timeInfo.@outtime != "*****") {
				times+="," + timeInfo.@outtime;
			}
			lines++;
			if((lines%2) == 0) {
				addLine(times);
				times="             ";
			}
		}
		addLine(times);
	}
	addLine();
	addFooter(rootTimePunch);
	return getResponse();
};

/**
 * Gets eatin+takeout+other quantity from a "PMix" node.
 * @param nodePMix "PMix" node
 * @return an int representing the total quantity.
 */
function getPMixTotalQty(nodePMix)
{
	if(nodePMix != null) {
		var valueqtyEatIn   = 0;
		var valueqtyTakeOut = 0;
		var valueqtyOther   = 0;

		for each (var i in nodePMix) {
			valueqtyEatIn 	+= Number(i.@qtyEatIn);
			valueqtyTakeOut += Number(i.@qtyTakeOut);
			valueqtyOther 	+= Number(i.@qtyOther);
		}

		return new Number(valueqtyEatIn)
			+ new Number(valueqtyTakeOut)
			+ new Number(valueqtyOther);
	}else {
		return 0;
	}
}

/**
 * Gets eatin+takeout+other netAmount from a "PMix" node.
 * @param nodePMix "PMix" node
 * @return an int representing the total netAmount.
 */
function getPMixTotalnetAmount(nodePMix)
{
	if(nodePMix != null) {
		var valuenetAmountEatIn   = 0;
		var valuenetAmountTakeOut = 0;
		var valuenetAmountOther   = 0;

		for each (var i in nodePMix) {
			valuenetAmountEatIn 	+= Number(i.@netAmtEatIn);
			valuenetAmountTakeOut   += Number(i.@netAmtTakeOut);
			valuenetAmountOther 	+= Number(i.@netAmtOther);
		}

		return new Number(valuenetAmountEatIn)
			+ new Number(valuenetAmountTakeOut)
			+ new Number(valuenetAmountOther);
	}else {
		return 0;
	}
}

/** Finds the currently logged operator */
function findCurrentOperator(rootNode)
{
	for each (rootPos in rootNode.POS){
		flagTypePos    = String(rootPos.@podShort);
		for each (i in rootPos.OperatorSession) {
			if(String(i.@logout) == "") {
			return i;
			}
		}
	}
	return null;
}

/** Finds last logged operator */
function findLastOperator(rootNode)
{
	var lastOper = null;
	var lastDate = "19000101 00:00:00";
	for each (rootPos in rootNode.POS){
		for each (i in rootPos.OperatorSession) {
			if(String(i.@logout) >= lastDate) {
				flagTypePos    = String(rootPos.@podShort);
				lastDate = i.@logout;
				lastOper = i;
			}
		}
	}
	return lastOper;
}

/** Finds last logged operator on a specific node.
    When there is just one, get it even if no logout was identified. */
function findLastOperatorOnNode(rootNode, posName)
{
	var lastOper = null;
	var lastDate = "19000101 00:00:00";
	for each (rootPos in rootNode.POS){
		var currPosName = "" + rootPos.@serviceType + rootPos.@id;
		if (currPosName === posName) {
				for each (i in rootPos.OperatorSession) {
				if((lastOper===null) || (String(i.@logout) >= lastDate)) {
					flagTypePos    = String(rootPos.@podShort);
					lastDate = i.@logout;
					lastOper = i;
				}
			}
		}
	}
	return lastOper;
}


/** Adds the default header for reports */
function addHeader(rootNode, title, reportType)
{
	var storeId			= Number(rootConfig.StoreId);
	var posId			= getPosId();
	var storeName		= rootConfig.StoreName;
	var managerId		= Number(rootConfig.Manager.@id);
	var nodesPOS		= rootNode.POS;
	var businessDate	= getBusinessDate(nodesPOS);
	if(businessDate != "N/A") {
		businessDate	= API.formatDate(businessDate, "MM/dd/yyyy");
	} else{
		businessDate	= API.formatDate(rootNode.@creationDate, "MM/dd/yyyy");
	}

	addLine(SEP_DL);
	if(posId != 0){
		addLine(center("STORE# " + storeId + " POS# " + posId));
	}
	else{
		addLine(center("STORE# " + storeId ));
	}

	addLine(center(storeName));
	addLine();
	addLine(center("BUSINESS DATE: " + businessDate));
	addLine();
	// NVS-100 RPS 10/15/09   Added RPTSOSCBB
	if((reportType == RPTSOSFC) || (reportType == RPTSOSDTHOUR) || (reportType == RPTSOSCBB) ||
	   (reportType == RPTSOSDTDIAG) || (reportType  == RPTSOSMFY) || (reportType  == RPTSOSCSR)){
		var date = formatDateTimeAMPM(String(rootNode.@creationDate));
		addLine(center("MANAGER: " + managerId + "   " + API.setOnRight(date, COLS-posId.length)));
	}
	else {
		addLine(center("MANAGER: " + managerId));
	}
	addLine();
	addLine("SUP-SIGN     MGR.SIGN    ASST/CREW-SIGN");
	addLine();
	addLine();
	if(title) {
		addLine(SEP_DL);
		addLine(center(title));
		if((reportType == RPTCASHCONSOLIDATED) || (reportType == RPTCASHBYPERIODSW) ||
		    (reportType == RPTPMIXBYDATESW)     || (reportType  == RPTPMIXBYPERIODSW)||
		    (reportType == RPTPMIXUPTBYHOURSW)  || (reportType  == RPTPMIXUPTBYDATESW) ||
   		    (reportType == RPTSALEFCSW) 		|| (reportType  == RPTSALEHOURBYDATESW)||
   		    (reportType == RPTSALEAVETKCDATESW)){
				addLine(center("POD:" + (rootNode.@requestPOD==""?"ALL":rootNode.@requestPOD)));
		}
		addLine(SEP_DL);
	}

	if((reportType == RPTCASHCONSOLIDATED) || (reportType == RPTCASHENDDAYSTOREWIDE) || (reportType == RPTCASHBYPERIODSW) ||
	    (reportType == RPTPMIXBYDATESW)     || (reportType  == RPTPMIXBYPERIODSW)||
	    (reportType == RPTPMIXUPTBYHOURSW)  || (reportType  == RPTPMIXUPTBYDATESW) ||
	    (reportType == RPTSALEFCSW) 		|| (reportType  == RPTSALEHOURBYDATESW)||
	    (reportType == RPTSALEAVETKCDATESW)){

		addLine(center("Consolidated"));
		addLine("POS included:");
		var opLogged="";
		var opOther="";
		for each (i in nodesPOS) {
			if(String(i.@businessDate) != "") {
				if(opLogged.search(i.@id) == -1) {
					opLogged = opLogged + " " + i.@id;
				}
			}
			else{
				opOther = opOther + " " + i.@id;
			}
		}
		addLine(API.setOnRight(opLogged, COLS));
		addLine("POS off-line:");
		addLine(API.setOnRight(opOther, COLS));
		addLine();
	}
}



/** Adds the default header for ISP MAL reports */
function addMAlHeader(rootNode, title, reportType) {
	var storeId			= Number(rootConfig.StoreId);
	var posId			= getPosId();
	var storeName		= rootConfig.StoreName;
	var managerId		= Number(rootConfig.Manager.@id);
	var nodesPOS		= rootNode.POS;
	var businessDate	= getBusinessDate(nodesPOS);
	if(businessDate != "N/A") {
		businessDate	= API.formatDate(businessDate, "MM/dd/yyyy");
	} else{
		businessDate	= API.formatDate(rootNode.@creationDate, "MM/dd/yyyy");
	}

	addLine(SEP_DL);
	if(posId != 0){
		addLine(center("STORE# " + storeId + " POS# " + posId));
	}
	else{
		addLine(center("STORE# " + storeId ));
	}

	addLine(center(storeName));
	addLine();
	addLine(center("BUSINESS DATE: " + businessDate));
	addLine();
	addLine(center("MANAGER: " + managerId));
	addLine();
	addLine();
	if(title) {
		addLine(SEP_DL);
		addLine(center(title));
		addLine(SEP_DL);
	}
}

/** Adds the default footer for reports */
function addFooter(rootNode)
{
	addLine(SEP_DL);
	addLine(center("Printed on " + API.formatDateTime(rootNode.@creationDate)));
	addLine(SEP_DL);
}

/**
 * Finds the biggest business date on a list of POS nodes
 * @return business date in the format "yyyyMMdd HH:mm:ss"
 */
function getBusinessDate(nodesPos)
{
	var nodesPosSize = nodesPos.length();
	var bestMillis = -1;
	var bestDate = "N/A";

	for(var i = 0; i < nodesPosSize; i++) {
		var nodePOS = nodesPos[i];
		var posDate = nodePOS.@businessDate;
		var posMillis = API.parseDateTime(posDate + " 00:00:00").getTime();
		if(posMillis > bestMillis) {
			bestMillis = posMillis;
			bestDate = posDate;
		}
	}
	return bestDate;
}

/**
 * Combines two SOS xml reports into one
 * @node1 & 2
 * @return the summ of values of 0 if 'nodes' or 'attributeName' are null.
 */
function combineSOS(rootSOS1, rootSOS2) {

	/* combine all 96 buckets */
	for (i=1;i<=96;i++) {
		serviceTime1 =rootSOS1.ServiceTime.(@segmentId==i);
		serviceTime2 =rootSOS2.ServiceTime.(@segmentId==i);

		/* handle any null segments */
		if (  (serviceTime1.toString().length == 0) && (serviceTime2.toString().length > 0) ) {
			serviceTime1 = serviceTime2;
		} else if (  (serviceTime1.toString().length > 0) && (serviceTime2.toString().length == 0) ) {

		} else if ( (serviceTime1.toString().length > 0) && (serviceTime2.toString().length > 0) ) {
			serviceTime1.@tc						=Number(serviceTime1.@tc)+Number(serviceTime2.@tc);
			serviceTime1.@cars 						=Number(serviceTime1.@cars)+Number(serviceTime2.@cars);
			serviceTime1.@untilTotal					=Number(serviceTime1.@untilTotal)+Number(serviceTime2.@untilTotal);
			serviceTime1.@untilStore					=Number(serviceTime1.@untilStore)+Number(serviceTime2.@untilStore);
			serviceTime1.@untilRecall				=Number(serviceTime1.@untilRecall)+Number(serviceTime2.@untilRecall);
			serviceTime1.@untilCloseDrawer			=Number(serviceTime1.@untilCloseDrawer)+Number(serviceTime2.@untilCloseDrawer);
			serviceTime1.@untilPay					=Number(serviceTime1.@untilPay)+Number(serviceTime2.@untilPay);
			serviceTime1.@untilServe					=Number(serviceTime1.@untilServe)+Number(serviceTime2.@untilServe);
			serviceTime1.@totalTime					=Number(serviceTime1.@totalTime)+Number(serviceTime2.@totalTime);
			serviceTime1.@itemsCount					=Number(serviceTime1.@itemsCount)+Number(serviceTime2.@itemsCount);
			serviceTime1.@tcOverLinePreset			=Number(serviceTime1.@tcOverLinePreset)+Number(serviceTime2.@tcOverLinePreset);
			serviceTime1.@tcOverPresentationPreset		=Number(serviceTime1.@tcOverPresentationPreset)+Number(serviceTime2.@tcOverPresentationPreset);
			serviceTime1.@tcOverTotalMFY				=Number(serviceTime1.@tcOverTotalMFY)+Number(serviceTime2.@tcOverTotalMFY);
			serviceTime1.@tcOverTotalFC				=Number(serviceTime1.@tcOverTotalFC)+Number(serviceTime2.@tcOverTotalFC);
			serviceTime1.@tcOverTotalDT				=Number(serviceTime1.@tcOverTotalDT)+Number(serviceTime2.@tcOverTotalDT);
			serviceTime1.@totalAmount				=Number(serviceTime1.@totalAmount)+Number(serviceTime2.@totalAmount);

			serviceTime1.ProductionTime.@tcOver50 		=Number(serviceTime1.ProductionTime.@tcOver50)+Number(serviceTime2.ProductionTime.@tcOver50);
			serviceTime1.ProductionTime.@tcWorkUnder25 		=Number(serviceTime1.ProductionTime.@tcWorkUnder25)+Number(serviceTime2.ProductionTime.@tcWorkUnder25);
			serviceTime1.ProductionTime.@tcUnderTotalTimeCBB 		=Number(serviceTime1.ProductionTime.@tcUnderTotalTimeCBB)+Number(serviceTime2.ProductionTime.@tcUnderTotalTimeCBB);
			serviceTime1.ProductionTime.@tcOverTotalTimeMFY 		=Number(serviceTime1.ProductionTime.@tcOverTotalTimeMFY)+Number(serviceTime2.ProductionTime.@tcOverTotalTimeMFY);
			serviceTime1.ProductionTime.@tcOverTotalTimeDT 		=Number(serviceTime1.ProductionTime.@tcOverTotalTimeDT)+Number(serviceTime2.ProductionTime.@tcOverTotalTimeDT);
			serviceTime1.ProductionTime.@tcUnderPresentationTimeDT 		=Number(serviceTime1.ProductionTime.@tcUnderPresentationTimeDT)+Number(serviceTime2.ProductionTime.@tcUnderPresentationTimeDT);
			serviceTime1.ProductionTime.@tcUnderPresentationTimeFC 		=Number(serviceTime1.ProductionTime.@tcUnderPresentationTimeFC)+Number(serviceTime2.ProductionTime.@tcUnderPresentationTimeFC);
			serviceTime1.ProductionTime.@tcUnderPresentationTimeCBB 		=Number(serviceTime1.ProductionTime.@tcUnderPresentationTimeCBB)+Number(serviceTime2.ProductionTime.@tcUnderPresentationTimeCBB);
		}
	}

	return rootSOS1;
}
/**
 * Summs the values of the given attribute from all given nodes.
 * @nodes list of nodes to summ attributes
 * @attributeName name of the attribute to get value from
 * @return the summ of values of 0 if 'nodes' or 'attributeName' are null.
 */
function summNodesAttributeValues(nodes, attributeName)
{
	if(nodes == null || attributeName == null) {
		return 0;
	}

	var total = 0;
	var size = nodes.length();
	if(size == 1){
		var cmd = "nodes.@" + attributeName;
		var value = eval(cmd);
		total += Number(value);
	}
	else{
		for(var i = 0; i < size; i++) {
			var cmd = "nodes[" + i + "]" + ".@" + attributeName;
			var value = eval(cmd);
			total += Number(value);
		}
	}
	return total;
}

//
// Helper Functions
//
/** Parses 'val' to an integer, returning 0 if null or empty*/
function toInt(val)
{
	if(!val || String(val) == "") {
		return 0;
	}
	// Must create a Number first because parseInt will resolve "010" as an octal number
	return parseInt(Number(val));
}
/** Prints a ruler to help developer align the report*/
function addRuler()
{
	addLine("         1         2         3         4");
	addLine("1234567890123456789012345678901234567890");
}

/** Convenience method to center a string in the report */
function center(str)
{
	return API.center(str, COLS);
}

/** Wraps XMLElement.getChild() to ignore null nodes */
function getChild(node, name)
{
	return node == null ? null : node.name;
}

/** Wraps XMLElement.findFirst() to ignore null nodes */
function findFirst(node, name)
{
	if(node == null || name == null) {
		return null;
	}
	var cmd = "node.." + name + "[0]";
	var value = eval(cmd);
	return value == null ? null : value;
}

/** Wraps XMLElement.findFirst() to ignore null nodes */
function find(node, attName, attValue)
{
	if(node == null || attName == null || attValue == null) {
		return 0;
	}
	var cmd = "node.(@" + attName + " == " + attValue + ")";
	var value = eval(cmd);
	return node == null ? null : value;
}

/** Gets a numeric attribute in the form of a big-decimal, if not found, returns ZERO */
function getBigDecimalAttribute(node, attribute)
{
	if(node != null) {
		var value = eval("node.@" + attribute)
		if(value != null && value != "") {
			return new BigDecimal(value);
		}
	}
	return ZERO;
}

/** Gets an attribute value, if not found, returns "" */
function getAttribute(node, attribute)
{
	if(node != null) {
		var value = eval("node.@" + attribute)
		return String(value);
	}
	return "";
}
/** Gets a numeric attribute, if not found, returns 0 */
function getNumberAttribute(node, attribute)
{
	if(node != null) {
		var cmd = "node.@" + attribute;
		var value = eval(cmd);
		if(value != null && value != "") {
			return Number(value);
		}
	}
	return 0;
}

/** Lindomar Araujo: 2014/08/28 - SQC-6001 - The function getGrillDescription was duplicated to send the new pararameter "hideAddGrillParameter" when grilled product is a SGP item */
/** Returns a grill line description */
function getGrillDescription(nodeItemView, typeDescription, isChefCrafted)
{
	return getGrillDescription(nodeItemView, typeDescription, isChefCrafted, false);
}

//NVS-6171 Tishin Thomas 12/19/2016 writing new function for McCafe CBB Items

function getGrillDescriptionForMcCafeItems(nodeItemView, typeDescription, isChefCrafted, hideAddGrillModifier)
{
	//var GRILL_NO = API.getLocalMsg("LMSG_SL_NO",null);
	var GRILL_LIGHT = API.getLocalMsg("LMSG_SL_QUALIFIER01",null);
	var GRILL_ONLY = API.getLocalMsg("LMSG_SL_QUALIFIER02",null);
	var GRILL_ONLYLIGHT = API.getLocalMsg("LMSG_SL_QUALIFIER03",null);
	
	
	var TYPE_COMMENT	= 6;
	
	
	var description;
	if (isChefCrafted == true) {
		description = nodeItemView.dtName;
	} else if (typeDescription == false) {
		description = nodeItemView.description;
	} else {
		description = nodeItemView.longName;
	}
	
	switch (Number(nodeItemView.specialModifiers)) {
		  case 3: return GRILL_ONLYLIGHT + " " + description;
          case 2: return GRILL_ONLY + " " + description;
          case 1: return GRILL_LIGHT + " " + description;
	}
	// Default item quantity
	var defaultQtd = Number(nodeItemView.componentDefaultQtd);
	// Quantity that the item will have after grill eg.(1 cheese + (-1 cheese) -> zero)
	var quantity = defaultQtd + Number(nodeItemView.grilledQuantity);
	// The maximun quantity this item can have
	var maxQtd = Number(nodeItemView.componentMaxQtd);
	// Quantity that should be shown to user.
	var quantityToShow = Math.abs(Number(nodeItemView.grilledQuantity));
	var productType = nodeItemView.productType;

	if(defaultQtd == quantity) {
	    //when the defaultQtd is equal to selected quantity it should go to grill script NVS-2778 Error and quantity is removed.		
		return description;
	}
	if(quantity == 0) {
		// If the item will have quantity of zero, we just show the remove sign. eg. "no cheese"
          return "0" + " " + description;
	}
	if(defaultQtd == 0) {
		if(maxQtd == 1) {
			if(productType == TYPE_COMMENT) {
				return description;
			}else {
				if(isChefCrafted == "true") {
					return "1" + " " + description;
				} else {
				return "1" + description;
				}                  
			}
		}else {
			if(productType == TYPE_COMMENT) { // SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
				else {
					if (quantityToShow == 1) {
					    if(isChefCrafted == "true") {
							return "1" + " " + description;
						} else {
						return  "1" + " " + description;
						} 
					} else {
						if(isChefCrafted == "true") {
							return  quantityToShow + " " + description;
						} else {
						return quantityToShow + " " + description;
						}	                               
					}
				}
			}else {
				if (quantityToShow == 1) {
				    if(isChefCrafted == "true") {
						return "1" + " " + description;
					} else {
					return "1" + " " + description;
					} 
				} else {
				    if(isChefCrafted == "true") {
						return quantityToShow + " " + description;
					} else {
					return quantityToShow + " " + description;
					}
				}

			}
		}
	}else if(defaultQtd == 1) {
		if(maxQtd == 2) {
               return "2" + " " + description;
		}else {
			if(productType == TYPE_COMMENT) {
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
				else {
					if (quantityToShow == 1) {
                              return "2" + " " + description;
					} else {
                              return Number(defaultQtd+quantityToShow) + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
                         return "2" + " " + description;
				} else {
                         return Number(defaultQtd+quantityToShow) + " " + description;
				}
			}
		}
	}else if(defaultQtd == 2) {
		if(maxQtd == 3 && quantity == 3) {
               return quantity + " " + description;
		}else if(maxQtd > 3 && quantity > 2) {
			if(productType == TYPE_COMMENT) {// SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
				else {
					if (quantityToShow == 1) {
                              return quantity + " " + description;
					} else {
                              return Number(defaultQtd+quantityToShow) + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
                         return quantity + " " + description;
				} else {
                         return Number(defaultQtd+quantityToShow) + " " + description;
				}
			}
		}
		else {
			if (quantityToShow == 1) {
                    return Number(defaultQtd-1) + " " + description;
			} else {
                    return Number(defaultQtd-quantityToShow) + " " + description;
			}
		}
	}else {
		if(maxQtd == (defaultQtd + 1) && quantity == maxQtd) {
               return quantity + " " + description;
		}else if(quantity > defaultQtd) {
			if(productType == TYPE_COMMENT) {
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
				else {
					if (quantityToShow == 1) {
                              return quantity + " " + description;
					} else {
                              return Number(defaultQtd+quantityToShow) + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
                         return quantity + " " + description;
				} else {
                         return Number(defaultQtd+quantityToShow) + " " + description;
				}
			}
		} else if(quantity > 0){
			return quantity + " " + description;
		}else {
			if(productType == TYPE_COMMENT) {
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
			}
		}
	}
}

/** Returns a grill line description */
function getGrillDescription(nodeItemView, typeDescription, isChefCrafted, hideAddGrillModifier) {

	// Lindomar Araujo: 2017/06/30 - NVS-7764 - Changed because the typeDescription parameter was comming always undefined for FC.
	//                                          Now, I'm checking, and if it's not true, I'm setting to false, as DT does.
	if (typeDescription != true && typeDescription != "true") {
		typeDescription = false;
	}

	var GRILL_NO = API.getLocalMsg("LMSG_SL_NO",null);
	var GRILL_ADD = API.getLocalMsg("LMSG_SL_ADD",null) + " ";
	var GRILL_XTRA = API.getLocalMsg("LMSG_SL_MORE",null);
	var GRILL_LIGHT = API.getLocalMsg("LMSG_SL_QUALIFIER01",null);
	var GRILL_ONLY = API.getLocalMsg("LMSG_SL_QUALIFIER02",null);
	var GRILL_ONLYLIGHT = API.getLocalMsg("LMSG_SL_QUALIFIER03",null);
	var GRILL_LESS = API.getLocalMsg("LMSG_SL_LESS",null);

	var TYPE_COMMENT	= 6;
	if (hideAddGrillModifier == true) {
		GRILL_ADD = "";
	}
	
	var description;
	if (isChefCrafted == true) {
		description = nodeItemView.dtName;
	} else if (typeDescription == false) {
		description = nodeItemView.description;
	} else {
		description = nodeItemView.longName;
	}
	

	// Item's special modifiers
	switch (Number(nodeItemView.specialModifiers)) {
		  case 3: return GRILL_ONLYLIGHT + " " + description;
          case 2: return GRILL_ONLY + " " + description;
          case 1: return GRILL_LIGHT + " " + description;
	}
	// Default item quantity
	var defaultQtd = Number(nodeItemView.componentDefaultQtd);
	// Quantity that the item will have after grill eg.(1 cheese + (-1 cheese) -> zero)
	var quantity = defaultQtd + Number(nodeItemView.grilledQuantity);
	// The maximun quantity this item can have
	var maxQtd = Number(nodeItemView.componentMaxQtd);
	// Quantity that should be shown to user.
	var quantityToShow = Math.abs(Number(nodeItemView.grilledQuantity));
	var productType = nodeItemView.productType;

	if(defaultQtd == quantity) {
	    //when the defaultQtd is equal to selected quantity it should go to grill script NVS-2778 Error and quantity is removed.		
		return description;
	}
	if(quantity == 0) {
		// If the item will have quantity of zero, we just show the remove sign. eg. "no cheese"
          return GRILL_NO + " " + description;
	}
	if(defaultQtd == 0) {
		if(maxQtd == 1) {
			if(productType == TYPE_COMMENT) { // SDO-392
				return description;
			}else {
				if(isChefCrafted == "true") {
					return GRILL_ADD + " " + description;
				} else {
				return GRILL_ADD + description;
				}                  
			}
		}else {
			if(productType == TYPE_COMMENT) { // SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
				else {
					if (quantityToShow == 1) {
					    if(isChefCrafted == "true") {
							return GRILL_ADD + " " + description;
						} else {
						return GRILL_ADD + description;
						} 
					} else {
						if(isChefCrafted == "true") {
							return GRILL_ADD + " " + quantityToShow + " " + description;
						} else {
						return GRILL_ADD + quantityToShow + " " + description;
						}	                               
					}
				}
			}else {
				if (quantityToShow == 1) {
				    if(isChefCrafted == "true") {
						return GRILL_ADD + " " + description;
					} else {
					return GRILL_ADD + description;
					} 
				} else {
				    if(isChefCrafted == "true") {
						return GRILL_ADD + " " + quantityToShow + " " + description;
					} else {
					return GRILL_ADD + quantityToShow + " " + description;
					}
				}

			}
		}
	}else if(defaultQtd == 1) {
		if(maxQtd == 2) {
               return GRILL_XTRA + " " + description;
		}else {
			if(productType == TYPE_COMMENT) { // SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
				else {
					if (quantityToShow == 1) {
                              return GRILL_XTRA + " " + description;
					} else {
                              return GRILL_XTRA + " " + quantityToShow + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
                         return GRILL_XTRA + " " + description;
				} else {
                         return GRILL_XTRA + " " + quantityToShow + " " + description;
				}
			}
		}
	}else if(defaultQtd == 2) {
		if(maxQtd == 3 && quantity == 3) {
               return GRILL_XTRA + " " + description;
		}else if(maxQtd > 3 && quantity > 2) {
			if(productType == TYPE_COMMENT) {// SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
				else {
					if (quantityToShow == 1) {
                              return GRILL_XTRA + " " + description;
					} else {
                              return GRILL_XTRA + " " + quantityToShow + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
                         return GRILL_XTRA + " " + description;
				} else {
                         return GRILL_XTRA + " " + quantityToShow + " " + description;
				}
			}
		}else {
			if (quantityToShow == 1) {
                    return GRILL_LESS + " " + description;
			} else {
                    return GRILL_LESS + " " + quantityToShow + " " + description;
			}
		}
	}else {
		if(maxQtd == (defaultQtd + 1) && quantity == maxQtd) {
               return GRILL_XTRA + " " + description;
		}else if(quantity > defaultQtd) {
			if(productType == TYPE_COMMENT) { // SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
				else {
					if (quantityToShow == 1) {
                              return GRILL_XTRA + " " + description;
					} else {
                              return GRILL_XTRA + " " + quantityToShow + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
                         return GRILL_XTRA + " " + description;
				} else {
                         return GRILL_XTRA + " " + quantityToShow + " " + description;
				}
			}
		}else {
			if(productType == TYPE_COMMENT) { // SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;
				}
				else {
					if (quantityToShow == 1) {
                              return GRILL_LESS + " " + description;
					} else {
                              return GRILL_LESS + " " + quantityToShow + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
                         return GRILL_LESS + " " + description;
				} else {
                         return GRILL_LESS + " " + quantityToShow + " " + description;
				}
			}
		}
	}
}

/** Julia Paar: 16-Feb-2016 - Merging Chef Crafted from 6.3- The function getAltLangGrillDescription was duplicated to send the new pararameter "isChefCrafted" so it return the dt name instead of the long name */
/** Returns a grill line description */
function getAltLangGrillDescription(nodeItemView, typeDescription)
{
	return getAltLangGrillDescription(nodeItemView, typeDescription, false);
}
function getAltLangGrillDescription(nodeItemView, typeDescription, isChefCrafted) 
{
	var GRILL_NO = API.geti18nMsg(4,"LMSG_SL_NO",[] );
	var GRILL_ADD = API.geti18nMsg(4,"LMSG_SL_ADD",[]  );
	var GRILL_XTRA = API.geti18nMsg(4,"LMSG_SL_MORE",[] );
	var GRILL_LIGHT = API.geti18nMsg(4,"LMSG_SL_QUALIFIER01",[] );
	var GRILL_ONLY = API.geti18nMsg(4,"LMSG_SL_QUALIFIER02",[] );
	var GRILL_ONLYLIGHT = API.geti18nMsg(4,"LMSG_SL_QUALIFIER03",[] );
	var GRILL_LESS = API.geti18nMsg(4,"LMSG_SL_LESS",[] );
	
	var TYPE_COMMENT	= 6;
	// Item's description (name)
	
	var description;
	if (isChefCrafted == true) {
		description = nodeItemView.dtName;
	} else if (typeDescription == false) {
		description = nodeItemView.description;
	} else {
		description = nodeItemView.longName;
	}

	
	// Item's special modifiers
	switch (Number(nodeItemView.specialModifiers)) {
		case 3: return GRILL_ONLYLIGHT + " " + description;
		case 2: return GRILL_ONLY + " " + description;
		case 1: return GRILL_LIGHT + " " + description;
	}
	// Default item quantity
	var defaultQtd = Number(nodeItemView.componentDefaultQtd);
	// Quantity that the item will have after grill eg.(1 cheese + (-1 cheese) -> zero)
	var quantity = defaultQtd + Number(nodeItemView.grilledQuantity);
	// The maximun quantity this item can have
	var maxQtd = Number(nodeItemView.componentMaxQtd);
	// Quantity that should be shown to user.
	var quantityToShow = Math.abs(Number(nodeItemView.grilledQuantity));
	var productType = nodeItemView.productType;

	if(defaultQtd == quantity) {
		//when the defaultQtd is equal to selected quantity it should go to grill script NVS-2778 Error and quantity is removed.		
		return description;
	}
	if(quantity == 0) {
		// If the item will have quantity of zero, we just show the remove sign. eg. "no cheese"
		return GRILL_NO + " " + description;
	}
	if(defaultQtd == 0) {
		if(maxQtd == 1) {
			if(productType == TYPE_COMMENT) { // SDO-392
				return description;	
			}else {
				return GRILL_ADD + " " + description;
			}
		}else {
			if(productType == TYPE_COMMENT) { // SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;	
				}
				else {
					if (quantityToShow == 1) {
						return GRILL_ADD + " " + description;						
					} else {
						return GRILL_ADD + " " + quantityToShow + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
					return GRILL_ADD + " " + description;						
				} else {
					return GRILL_ADD + " " + quantityToShow + " " + description;
				}
				
			}
		}
	}else if(defaultQtd == 1) {
		if(maxQtd == 2) {
			return GRILL_XTRA + " " + description;
		}else {
			if(productType == TYPE_COMMENT) { // SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;	
				}
				else {
					if (quantityToShow == 1) {
						return GRILL_XTRA + " " + description;						
					} else {
						return GRILL_XTRA + " " + quantityToShow + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
					return GRILL_XTRA + " " + description;						
				} else {
					return GRILL_XTRA + " " + quantityToShow + " " + description;
				}
			}
		}
	}else if(defaultQtd == 2) {
		if(maxQtd == 3 && quantity == 3) {
			return GRILL_XTRA + " " + description;
		}else if(maxQtd > 3 && quantity > 2) {
			if(productType == TYPE_COMMENT) {// SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;	
				}
				else {
					if (quantityToShow == 1) {
						return GRILL_XTRA + " " + description;						
					} else {
						return GRILL_XTRA + " " + quantityToShow + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
					return GRILL_XTRA + " " + description;						
				} else {
					return GRILL_XTRA + " " + quantityToShow + " " + description;
				}
			}
		}else {
			if (quantityToShow == 1) {
				return GRILL_LESS + " " + description;						
			} else {
				return GRILL_LESS + " " + quantityToShow + " " + description;
			}
		}
	}else {
		if(maxQtd == (defaultQtd + 1) && quantity == maxQtd) {
			return GRILL_XTRA + " " + description;
		}else if(quantity > defaultQtd) { 
			if(productType == TYPE_COMMENT) { // SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;	
				}
				else {
					if (quantityToShow == 1) {
						return GRILL_XTRA + " " + description;						
					} else {
						return GRILL_XTRA + " " + quantityToShow + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
					return GRILL_XTRA + " " + description;						
				} else {
					return GRILL_XTRA + " " + quantityToShow + " " + description;
				}
			}
		}else {
			if(productType == TYPE_COMMENT) { // SDO-392
				if(nodeItemView.grilledQuantity == (defaultQtd+1)) {
					return description;	
				}
				else {
					if (quantityToShow == 1) {
						return GRILL_LESS + " " + description;						
					} else {
						return GRILL_LESS + " " + quantityToShow + " " + description;
					}
				}
			}else {
				if (quantityToShow == 1) {
					return GRILL_LESS + " " + description;						
				} else {
					return GRILL_LESS + " " + quantityToShow + " " + description;
				}
			}
		}
	}
}


/** Adds the default header from store-db */
function addDefaultHeader()
{
	var value = rootConfig.Header;
	
	if(value != null && value != "") {
		var lines = String(value).split("\\n");
		for(var i = 0; i < lines.length; i++) {
			addLine(center(lines[i]));
		}
	}

	/* NVS-2383 Implement the Voice Survey Code on receipts */
	if ( PosCheckParameter_ex("Report","PrintSurveyCode", 'true') && rootView != null ) {
		var view = rootView.View;		
		var surveyCode = "";
		try {
			
			var posId;
			if (checkIsMobileOrder(view) == false) {
				posId = view.@tenderPOS;
			} else {
				posId = view.@orderKey;
			}
			//NVS-3441
			var isFromKiosk = (Number(view.@pod) == PODCSO);
			//NVS-4243
			if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){
				isRcpHHOT = true; 
			}
			var useRecallerId = isFromKiosk || isRcpHHOT;			

			var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,useRecallerId,false);
			var rcpDate = API.formatDate(view.@saleDate, "MMddyy");
			var rcpTotal = API.formatNumber(Number(view.@grossAmount), "0000.00", 7);
			surveyCode = API.formatNumber(Number(rootConfig.StoreId), "00000", 5) + "-" +
						 API.formatNumber(toInt(posId.substring(3, 7)), "00", 2) +
						 API.formatNumber(majorMinor.substr(0,2), "00", 2) +
						 rcpDate.substr(0,1) + "-" + rcpDate.substr(1,3) + rcpDate.substr(6,2) + "-" + view.@saleTime.substr(0,4);
			surveyCode = surveyCode.luhnGet() + "-" + rcpTotal.substr(0,4) + rcpTotal.substr(5,1) + "-" + rcpTotal.substr(6,1);
		} catch (e) {
		}
		if (surveyCode != "") {
			//Tishin Thomas 10/21/2016 NVS-5555  "Sales receipt changes" feature not implemented in SP8 order receipts
			//Tishin Thomas 11/30/2016 removed space on top of survey code and added the space after Restaurent Number, suggested by Morris Tracy.
			addLine(center("Survey Code:"));
			addBoldLine(center(surveyCode));
		}
	}
	//Tishin Thomas 10/21/2016 NVS-5555  "Sales receipt changes" feature not implemented in SP8 order receipts
	var strStore = rootConfig.StoreId;
	addLine();
	addLine(center("McDonald's Restaurant #" +strStore));
	
	var value = rootConfig.StoreAddress;
	if(value != null && value != "") {
		var lines = String(value).split("\\n");
		for(var i = 0; i < lines.length; i++) {
				addLine(center(lines[i].substring(0,39)));
		}
	}

	var valueCity = rootConfig.City;
	
	var valueState = rootConfig.State;
	
	var valueZipCode = rootConfig.StoreZipCode;
	
	if((valueCity != null && valueCity != "") && (valueState != null && valueState != "") && (valueZipCode != null && valueZipCode != "")){
		var city = String(valueCity).split("\\n");
		var state = String(valueState).split("\\n");
		var zipCode = String(valueZipCode).split("\\n");
		
		addLine(center(city + ", " + state + " " + zipCode));
	}

//	var value = rootConfig.Country;
//	if(value != null && value != "") {
//		var lines = String(value).split("\\n");
//		for(var i = 0; i < lines.length; i++) {
//			addLine(center(lines[i].substring(0,39)));
//		}
//	}

	//addLine(" ");
	/* addLine(center("! ! ! THANK YOU ! ! !")); */
	//Tishin Thomas 10/21/2016 NVS-5555  "Sales receipt changes" feature not implemented in SP8 order receipts
	//var strStore = rootConfig.StoreId;
	//addLine(center("McDonald's Restaurant #" +strStore));
	//addLine();
	//addLine(" ");
}
function getState(rootConfig) {
	var posMode = true;
	var state = String(rootConfig.State);
    if (state.length == 0) {
		/* check if getstoredb is a valid method */
		for (prop in API) {
			posMode = false;
			break;
		}
		/* get state this way for POS */
		if (posMode == true) {
			state = String(xmlStoreDB.StoreDB.StoreProfile.StoreDetails.State);
		}
	}
	/* add comma, only when state is populated */
    if (state.length > 0) state = ", "+state;
    return state;
}

/** Adds the default header from store-db */
function addDefaultFooter()
{
	var value = rootConfig.Footer;
	if(value != null && value != "") {
		var lines = String(value).split("\\n");
		for(var i = 0; i < lines.length; i++) {
			if(lines[i].length < COLS)
				addLine(center(lines[i]));
			else {
				addLine();
				addLine(lines[i]);
			}
		}
	}
}
/**
 * This function returns the resulting report and executes some memory cleanup.
 * @return the report response to kernel
 */
function getResponse()
{
	var response	= outputBuffer;
	// Make a cleanup so that the garbage collector can free
	// some memory when the script ends.
	rootConfig		= null;
	rootCash		= null;
	rootPmix		= null;
	rootHourlySales	= null;
	rootView		= null;
	rootSOS			= null;
	rootCustom		= null;
	rootProduct		= null;

	rootSOSFC		= null;
	rootSOSDT		= null;
	rootSOSWT		= null;
	rootSOSMFY		= null;

	rootTimePunch	= null;

	outputBuffer	= null;
	return response;
}
/* public
 * Will take a line of text adding it to the outputBuffer.  It respects escape sequences, currently
 * only the newline (\n) is supported.
 @author Rich Schreiber
 *
 * This was created for SDE-1601
 */
function addLineEscSeq(line, centerLine)
{
	var EscOn = false;
	var CurPos = 0;
	var TempLine = "";

	if(line != null) {
		var LineLength = line.length;
		var	CurChar;

		// go through the string one char a time
		while (CurPos < LineLength) {
			CurChar = line.charAt(CurPos);

			// Check to see if we are in an escape sequence
			if (EscOn == false) {
				// not currently escaped, do we need to start?
				if (CurChar != "\\") {
				    // No, just add the char
					TempLine += CurChar;
				} else {
					// Yes discard the backslash and move on
					EscOn = true;
				}
			} else {
				// we are in an escape sequence
				switch (CurChar) {
				// This is for a newline
				case "n":

					// add the line to the output buffer, centering if requested
					if (centerLine == true) {
						outputBuffer.append(center(TempLine));
					} else {
						outputBuffer.append(TempLine);
					}
					// Clear tempLine and add newline to the buffer
					TempLine = "";
					//NVS-7185 15-MAR-2017 John Brancaleon - remove extra blank line
					outputBuffer.append("\n");
					break;
				// Default behavior just add the char
				default:
					TempLine += CurChar;
					break;
				}
				EscOn = false;
			}
			CurPos++;
		}
	}

	// add the line to the output buffer, centering if requested
	if (centerLine == true) {
		outputBuffer.append(center(TempLine));
	} else {
		outputBuffer.append(TempLine);
	}
	// Final newline
	//NVS-7185 15-MAR-2017 John Brancaleon - remove extra blank line
	//outputBuffer.append("\n");	
}

/* public
 * Will take a line of text adding it to the outputBuffer.  It respects escape sequences, currently
 * only the newline (\n) is supported.
 @author DeMario J.
 *
 * This was created for SDE-1601
 */
function formatLineEscSeq(line, centerLine) {
	var EscOn = false;
	var CurPos = 0;
	var TempLine = "";
	var retBuffer = new StringBuffer();

	if(line != null) {
		var LineLength = line.length;
		var	CurChar;
		//NVS-7185 15-MAR-2017 John Brancaleon - Add a blank line before this informational line
		retBuffer.append("\n"); 
		// go through the string one char a time
		while (CurPos < LineLength) {
			CurChar = line.charAt(CurPos);

			// Check to see if we are in an escape sequence
			if (EscOn == false) {
				// not currently escaped, do we need to start?
				if (CurChar != "\\") {
				    // No, just add the char
					TempLine += CurChar;
				} else {
					// Yes discard the backslash and move on
					EscOn = true;
				}
			} else {
				// we are in an escape sequence
				switch (CurChar) {
				// This is for a newline
				case "n":

					// add the line to the output buffer, centering if requested
					if (centerLine == true) {
						retBuffer.append(center(TempLine));
					} else {
						retBuffer.append(TempLine);
					}
					// Clear tempLine and add newline to the buffer
					TempLine = "";
					//NVS-7185 15-MAR-2017 John Brancaleon - remove extra blank line
					retBuffer.append("\n"); 
					break;
				// Default behavior just add the char
				default:
					TempLine += CurChar;
					break;
				}
				EscOn = false;
			}
			CurPos++;
		}
	}

	// add the line to the output buffer, centering if requested
	if (centerLine == true) {
		retBuffer.append(center(TempLine));
	} else {
		retBuffer.append(TempLine);
	}
	// Final newline
	//retBuffer.append("\n");
	return retBuffer;
}

/** Appends a new line in the report. */
function addLine(line)
{
	if(line != null) {
		outputBuffer.append(line);
	}
	outputBuffer.append("\n");
}
/** Appends a bold line in the report. */
function addBoldLine(line)
{
	if(line != null) {
		startBold();
		outputBuffer.append(line);
		endBold();
	}
	outputBuffer.append("\n");
}
/** Appends a double-sized line in the report. */
function addSize2Line(line)
{
	if(line != null) {
		startSize2();
		outputBuffer.append(line);
		endSize2();
	}
	outputBuffer.append("\n");
}
/** Appends a bold double-sized line in the report. */
function addBoldSize2Line(line)
{
	if(line != null) {
		startBoldSize2();
		outputBuffer.append(line);
		endBoldSize2();
	}
	outputBuffer.append("\n");
}

/**
 * Initializes global variables.
 * @param config configuration xml data (StringBuffer)
 * @param array of data (StringBuffer[])
 * @param requiredDataTypes if this optional parameter is set, it will break
 * if any given required data is not present.
 */
function init(config, data, requiredDataTypes, functionName)
{
	getRecieptLists();

	initGlobalt();
	rootConfig = new XML(config);

	ParseCustomdata();  //NVS-965
	var bRequiredXML = Array(false, false, false, false, false, false, false, false, false, false, false);
	var matched = 0;
	var requiredDataTypesSize = requiredDataTypes != null ? requiredDataTypes.length : 0;

	for(var i = 0; i < data.length; i++) {
		if(data[i] != null) {
//			API.dbgBreak();
			var xml = new XML(data[i]);
			var dataType = xml.@requestDataType.toLowerCase();
			if("cash" == dataType) {
				rootCash = xml;
			}else if("pmix" == dataType) {
				rootPmix = xml;
			}else if("view" == dataType) {
				rootView = xml;
			}else if("hourlysales" == dataType) {
				rootHourlySales = xml;
			}else if("openorders" == dataType) {
				rootOpenOrders = xml;
			}else if("sos" == dataType) {
				rootSOS = xml;
				if(rootSOS.StoreTotals.@productionNodeId.length() != 0){
					//var BOHelper=new BusinessObjectHelper();
					//var alias=BOHelper.getQueueAlias(rootSOS.StoreTotals.@productionNodeId);
					if(rootSOSDT==null) {
						rootSOSDT = (rootSOS.StoreTotals.@productionNodeId == "DT")?rootSOS:null;
					}
					if(rootSOSWT==null) {
						rootSOSWT = (rootSOS.StoreTotals.@productionNodeId == "WT")?rootSOS:null;
					}
					if(rootSOSFC==null) {
						rootSOSFC = (rootSOS.StoreTotals.@productionNodeId == "FC")?rootSOS:null;
					}
					if(rootSOSMFY==null) {
						rootSOSMFY = (rootSOS.StoreTotals.@productionNodeId == "MFY")?rootSOS:null;
                         }
                         if(rootSOSCBB==null) {
                              rootSOSCBB = (rootSOS.StoreTotals.@productionNodeId == "CBB")?rootSOS:null;
					}
				}
			}else if("custom" == dataType) {
				rootCustom = xml;
			}else if("prods" == dataType) {
				rootProduct = xml;
			}else if("timepunch" == dataType) {
				rootTimePunch = xml;
			}else if("kvsview" == dataType) {
				rootKVSView = xml;
			}
			for(var j = 0; j < requiredDataTypesSize; j++) {
				if(requiredDataTypes[j].toLowerCase() == dataType) {
					matched++;
					bRequiredXML[j]=true;
					break;
				}
			}
		}
	}

	if(matched < requiredDataTypesSize) {
		var missingTypes="";
		for(var j = 0; j < requiredDataTypesSize; j++) {
			if(missingTypes.length != 0) {
				missingTypes+=" | ";
			}
			if(!bRequiredXML[j]) {
				missingTypes+=requiredDataTypes[j].toLowerCase();
			}
		}
		//API.dbg("ERROR:Missing data type (" + missingTypes + ") for report function " +  functionName + ". Check Configuration.");//removed due to NVS-1671
		missingTypes="";
		for(var j = 0; j < requiredDataTypesSize; j++) {
			if(!bRequiredXML[j]) {
				missingTypes+=requiredDataTypes[j].substr(0,1).toUpperCase();
			}
		}
		addLine("ERROR: POS configuration error.\nCall support,  error code = " +  functionName.substr(0,5) + "-" + missingTypes);
		return -1;
	}

	try {   // NVS-1249
		// Lindomar Araujo: 2016/09/06 - NVS-5144 - during the tests of the NVS-5144, I faced with a problem that the bellow variable was undefined, I just added a protection
		if (rootStoreDB == null || rootStoreDB == undefined || rootStoreDB == "") {
			var rootStoreDB =  xmlStoreDB;
		}
	} catch (e) {
		API.dbg("rootStoreDB error - likely undefined");
	}

	//NVS-3839, NVS-3844, NVS-3846 - msilva
	if(isRcpKiosk){
		if(rootView == null || rootView.View == undefined || rootView.View == '')
		{
			var lastView = hlp.getLastSaleView();
			if(lastView == null) {
				lastView = hlp.getCurrentView();
			}	
			if(lastView == undefined || lastView == '')
			{
				try {
					var ctx=new SessionContext;
				} catch (e) {
					return;
				}
				var kioskReversePartialTransView = ctx.get("kioskReversePartialTransView");
				if(kioskReversePartialTransView != undefined && kioskReversePartialTransView != '')
				{
					rootView.View = new XML(kioskReversePartialTransView);
				}
			}
			else{
				rootView.View = lastView;
			}
		}	
	}

	return 0;	
}

/**
 * Gets the pos identification - WhoAmI()
 */
function getPosId()
{
	var posId = rootConfig.PosId[0];
	if(posId != null) {
		return new Number(posId.substring(3, 8));
	}else {
		return "N/A";
	}
}
/**
 * In .21, Custom Data XML is not parsed correctly, this addresses the matter
 */
function ParseCustomdata()
{
	var cdata = new XML("<CustomData>"+rootConfig.CustomData+"</CustomData>");
	rootConfig.CustomData=cdata;
}
/**
 * Adds a separator line.
 * @param separatorText Text to add in the center of the line, or null for nothing
 */
function addSeparator(separatorText)
{
	if(separatorText != null) {
		addLine(API.center(SEP_DL, separatorText));
	}else {
		addLine(SEP_DL);
	}
}
/** Starts a text with inverted color */
function startInvertedColor()
{
	outputBuffer.append("<@ReverseOn>");
}
/** Ends a text with inverted color */
function endInvertedColor()
{
	outputBuffer.append("<@ReverseOff>");
}
/** Adds a Cut tag. The paper will be cut at that position.*/
function cutPaper()
{
	outputBuffer.append("<@Cut>");
}
/** Quebec SRM - Start Hide block */
function startHide()
{
	outputBuffer.append("<@HideOn>");
}
/** Quebec SRM - End Hide block */
function endHide()
{
	outputBuffer.append("<@HideOff>");
}
/** Starts a <B>bold</b> text */
function startBold()
{
	outputBuffer.append("<@BoldOn>");
}
/** Ends a <B>bold</b> text */
function endBold()
{
	outputBuffer.append("<@BoldOff>");
}
function startUnderLine()
{
	outputBuffer.append("<@UnderLineOn>");
}
function endUnderLine()
{
	outputBuffer.append("<@UnderLineOff>");
}
/** Starts a double-sized text*/
function startSize2()
{
	outputBuffer.append("<@DoubleCharOn>");
}
/** Ends a double-sized text*/
function endSize2()
{
	outputBuffer.append("<@DoubleCharOff>");
}
/** Starts a bold double-sized text*/
function startBoldSize2()
{
	startBold();
	startSize2();
}
/** Ends a bold double-sized text*/
function endBoldSize2()
{
	endSize2();
	endBold();
}

/** Remove spaces of String **/
function trim(s)
{
	return rtrim(ltrim(s+""));
}



/** Remove left spaces of String **/
function ltrim(s)
{
	s = String(s);  // <---- ADDED
	var l=0;
	while(l < s.length && s[l] == ' ')
	{	l++; }
	return s.substring(l, s.length);
}

/** Remove right spaces of String **/
function rtrim(s)
{
    s = String(s);  // <---- ADDED
	var r=s.length -1;
	while(r > 0 && s[r] == ' ')
	{	r-=1;	}
	return s.substring(0, r+1);
}

/*
* NVS-6857 JP - RECEIPT_DATE_FORMAT was replaced by formatDateTimeAMPM and formatDateTimeAMPMFromView
* Java script does not have a string format that adds AM or PM at the end of the time, so it had to be 
* built in the code.
*/
function formatDateTimeAMPMFromView(view) {
	var formattedDate = "";
	if (view != null && view != "" && view != undefined) {
		var dateOnly = view.@saleDate;		
		var hours = view.@saleTime.substring(0,2);
		if (Number(hours) == 0) {
			timeOnly = "12" + ":" + view.@saleTime.substring(2,4) + " AM";
		} else if (Number(hours) < 12) {
			timeOnly = hours + ":" + view.@saleTime.substring(2,4) + " AM";
		} else if (Number(hours) == 12) {
			timeOnly = hours + ":" + view.@saleTime.substring(2,4) + " PM";
		} else {			
			timeOnly = Number(hours) - 12;
			if (String(timeOnly).length < 2 ) {
				timeOnly = "0" + timeOnly + ":" + view.@saleTime.substring(2,4) + " PM"; 
			} else {
				timeOnly = timeOnly + ":" + view.@saleTime.substring(2,4) + " PM";
			}
		}
		
		formattedDate = API.formatDate(dateOnly, receiptDateFmt) + " " + timeOnly;
	}
	return formattedDate;
}

/*
* The dateAndTime format is 20170209 09:07:51
*/
function formatDateTimeAMPM (dateAndTime) {
	var formattedDate = "";
	if (dateAndTime != null && dateAndTime != "" && dateAndTime != undefined) {
		var dateOnly = String(dateAndTime).substring(0,8);	
		var theTime = dateAndTime.substring(9);
		var hours = theTime.substring(0,2);
		if (Number(hours) == 0) {
			timeOnly = "12" + ":" + dateAndTime.substring(12,14) + " AM";
		} else if (Number(hours) < 12) {
			timeOnly = hours + ":" + dateAndTime.substring(12,14) + " AM";
		} else if (Number(hours) == 12) {
			timeOnly = hours + ":" + dateAndTime.substring(12,14) + " PM";
		} else {
			timeOnly = Number(hours) - 12;
			if (String(timeOnly).length < 2 ) {
				timeOnly = "0" + timeOnly + ":" + dateAndTime.substring(12,14) + " PM"; 
			} else {
				timeOnly = timeOnly + ":" + dateAndTime.substring(12,14) + " PM";
			}
		}
		formattedDate = API.formatDate(dateOnly, receiptDateFmt) + " " + timeOnly;
	}
	return formattedDate;
}

/*
* The dateAndTime format is 20170209 09:07:51

*/
function formatTimeAMPM (dateAndTime) {
	var formattedTime = "";
	if (dateAndTime != null && dateAndTime != "" && dateAndTime != undefined) {
		var dateOnly = String(dateAndTime).substring(0,8);	
		var theTime = dateAndTime.substring(9);
		var hours = theTime.substring(0,2);
		var timeTest;
		if (Number(hours) == 0) {
			timeOnly = "12" + ":" + dateAndTime.substring(12,14) + " AM";
		} else if (Number(hours) < 12) {
			timeOnly = hours + ":" + dateAndTime.substring(12,14) + " AM";
		}  else if (Number(hours) == 12) {
			timeOnly = hours + ":" + dateAndTime.substring(12,14) + " PM";
		} else {
			timeOnly = Number(hours) - 12;
			if (String(timeOnly).length < 2 ) {
				timeOnly = "0" + timeOnly + ":" + dateAndTime.substring(12,14) + " PM"; 
			} else {
				timeOnly = timeOnly + ":" + dateAndTime.substring(12,14) + " PM";
			}
		}
		
		formattedTime = timeOnly;
	}
	return formattedTime;
}
/**
 * Gets a resource string
 * @param resourceKey resource key
 */
function getStr(resourceKey)
{
	if(RESOURCES[LANG] != null) {
		return RESOURCES[LANG][resourceKey];
	}else {
		return RESOURCES["en_US"][resourceKey]; // Default language
	}
}

if(!this["_resources_"]) { // Avoids having to initialize those fields every-time
	this["_resources_"] = true;
	// Number of columns
	var COLS = 39;
//                   Default separators (39 characters)
//			               1         2         3        3
//			      123456789012345678901234567890123456789
	var SEP_DL = "======================================="; // double line
	var SEP_SL = "---------------------------------------"; // single line
	var SEP_GL = "        -------------------------------"; // grill slip line
	var SEP_UL = "_______________________________________"; //  under line
	var SEP_RR = "+++++++++++++Report reprint++++++++++++"; //  Report reprint
	var SEP_ER = "+++++++++++++End of reprint++++++++++++"; //  End of reprint
	var SEP_SC = "***************************************"; //  asterisk
	// Sale status
	var SALE_STATUS_CURRENT_SALE_VOIDED	= 1 << 11;
	var SALE_STATUS_LAST_SALE_VOIDED	= 1 << 12;
	// Transaction kinds
 	var TRANS_KIND_SALE				= 0;
	var TRANS_KIND_REFUND			= 1;
	var TRANS_KIND_WASTE			= 2;
	var TRANS_KIND_MANAGER_MEAL		= 3;
	var TRANS_KIND_CREW_MEAL		= 4;
	var TRANS_KIND_ALLOWANCE		= 5;
	var TRANS_KIND_TAB				= 12;
	var TRANS_KIND_WAVE				= 13;
	var TRANS_KIND_WAVE_ADJUSTMENT	= 14;
	
	// Tender kinds
	var TENDER_KIND_PAYMENT			= 0;
	var TENDER_KIND_ALLOWANCE		= 1;
	var TENDER_KIND_CREW_MEAL		= 2;
	var TENDER_KIND_MANAGER_MEAL	= 3;
	var TENDER_KIND_CHANGE			= 4;
	var TENDER_KIND_KEEP_CHANGE		= 5;
	var TENDER_KIND_BILLABLEREFUND	= 6;
	var TENDER_KIND_DISCOUNT_COUPON = 8;
	var TENDER_KIND_ORIGINAL_PAYMENT= 9;
	var TENDER_KIND_REVERSAL		= 11;	
	//Sale type description
	var SALETYPE = {}
	SALETYPE["0"] = "EAT-IN";
	SALETYPE["1"] = "TAKE-OUT";
	SALETYPE["2"] = "OTHERS";

	// Types of reports
	var RPTDUMMY					= 0
	var RPTOPERATRORLOGOUT			= 2;
	var RPTOPERATORLOGIN			= 3;
	var RPTENDOFDAY					= 4;
	var RPTREMDRWCHANGE				= 40;
	var RPTREMLOGIN					= 41;

	// Types of report CASH
	var RPTCASHIERFLASH				= 5;
	var RPTCASHDRAWERCHANGE			= 6;
	var RPTCASHIERCLOSEBYDATE		= 7;
	var RPTCASHBYPERIOD				= 8;
	var RPTCASHDAILYCLOSEBYDATE		= 9;
	var RPTCASHENDDAYSTOREWIDE		= 10;
	var RPTCASHACCUMULATED			= 11;
	var RPTCASHCONSOLIDATED			= 12;
	var RPTCASHINDRAWER				= 13;
	var RPTCASHBYPERIODSW			= 14;
	var RPTINTCASHCONSOLIDATED		= 41;
	var RPTCASHBYDATE				= 39;
	var RPTCASHBYDATESW				= 38;

	// Types of report PMIX
	var RPTPMIXBYDATE				= 15;
	var RPTPMIXBYPERIOD				= 16;
	var RPTPMIXBYPERIODSW			= 17;
	var RPTPMIXBYDATESW				= 18;

	var RPTPMIXUPTBYDATE			= 19;
	var	RPTPMIXUPTBYDATESW			= 20;
	var	RPTPMIXUPTBYHOUR			= 21;
	var	RPTPMIXUPTBYHOURSW			= 22;

	// Types of report SALE
	var RPTSALEFC					= 24;
	var RPTSALEFCSW					= 25;
	var RPTSALEHOURBYDATE			= 26;
	var RPTSALEHOURBYDATESW			= 27;
	var RPTSALEAVETKCDATE			= 28;
	var RPTSALEAVETKCDATESW			= 29;
	var RPTSALEHOURBYPERIOD			= 42;
	var RPTSALEHOURBYPERIODSW		= 43;

	var RPTSOSFC					= 30;
	var RPTSOSFCSW					= 31;
	var RPTSOSHOURBYDATE			= 32;
	var RPTSOSDTHOUR				= 33;
	var RPTSOSDTDIAG				= 34;
	var RPTSOSMFY					= 35;
	var RPTSOSCSR					= 36;
     var RPTSOSCBB                      = 37;
	
	// Types of report Time Punch
	var RPSINGLETIMEPUNCH			= 50;
	var RPGLOBALTIMEPUNCH			= 51;
	var RPTCASHISPMAL				= 52;

	// Common big-decimal value
	var ZERO = new BigDecimal("0");
     if(!NUMBER_FORMAT) {
	// Default number format
	var NUMBER_FORMAT = "#,###,##0.00";
     }
	// Date format used at customer receipts
	//NVS-5201 04-NOV-2016 John Brancaleon - load the StoreDB to get the date and time formats
	var storeDbXml = new XML(API.getStoredb().toString());
	var receiptDateFmt = storeDbXml.StoreDB.StoreProfile.Localization.DateFormat;

	//var RECEIPT_DATE_FORMAT2 = storeDbXml.StoreDB.StoreProfile.Localization.DateFormat.toString() + " " + storeDbXml.StoreDB.StoreProfile.Localization.TimeFormat.toString();
	/* var RECEIPT_DATE_FORMAT = "MMM.dd''yy (EEE) HH:mm"; */
	// Internationalized strings
	var RESOURCES = {};
	// ####################### English Resources ("en_US") #########################
	RESOURCES["en_US"] = {};
	//NVS-5201 04-NOV-2016 John Brancaleon - This value should come from the storedb, not hard coded.
	RESOURCES["en_US"]["CURRENCY_SYMBOL"] = storeDbXml.StoreDB.StoreProfile.Localization.CurrencyFormat.toString();	//"US$";
}

	initGlobalt();

/**
 * PUBLIC
 * Implements the balance receipt
 * Needed data types: VIEW
 * @author Celso Fernandes
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function balanceReceipt(config, data)
{
	initGlobalt();
	rootConfig = new XML(config);
	if(rootConfig.CustomData.length() == 0) {
		return new StringBuffer();
	}
	//addLine(SEP_UL);
	startBold();
		// Adds the default receipt header from store-db
		addDefaultHeader();
		addLine(center("TEL# " + rootConfig.StorePhoneNumber));
	endBold();

	addLine();
	var posId = "KS# " + toInt(rootConfig.PosId.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	var date = formatDateTimeAMPM(String(rootConfig.@creationDate));
	addLine(posId + API.setOnRight(date, COLS-posId.length));
	addGiftInfo();
	addLine();

	// Adds default store-DB xml footer to the first copy
	addDefaultFooter();
	addLine();

	//addLine(SEP_UL);


	return getResponse();

	/** Adds Cashless information (if any) and returns true if signature is required */
	function addGiftInfo()
	{
		var custom = rootConfig.CustomData[0];
		var lines = String(custom).split("CASHLESS_GC:");
		for(var i = 1; i < lines.length; i++) {
			var fields = String(lines[i]).split("|");
			var provider = fields[0].replace("CASHLESS_GC", ""); // + " SALE";
			var providerSale = provider  + " SALE";
			var card = fields[1]; 		// Card #
			var expires = fields[2];	// Card expiration date
			var auth = fields[3];		// Authorization code
			var printFlag = fields[5];	//
			var seq = fields[6];		// Sequence #
			var mer = fields[7];		// Merchant id
			var balance = API.formatNumber(fields[8], NUMBER_FORMAT, 12);	// Balance #
			var amt = fields[9];		// Operation amount
			var vlr = fields[10];		// value
			var store = fields[11];		// store
			var msg = fields[12];		// Mensagem

			if(i == 1) {
				addLine("MER# " + mer);
//				addLine("STORE# " + rootConfig.StoreId + " MER# " + mer);
			}

			startBold();
			addLine();
			addLine(center("GIFT CARD"));
			addLine(center("BALANCE RECEIPT"));
			endBold();

			addLine();

			addLine("ACCOUNT# " + card);
			addLine("AUTH CODE - " + auth  + "\nSEQ# " + seq);   // NVS-1153
				startBold();
				addLine();
				addLine(center("GIFT CARD BALANCE"));
				var trimBalance="$"+trim(balance)
				addLine(center(trimBalance));
				endBold();
			addLine();
		}
		//addLine(msg);
		addLineEscSeq(msg, true);
		addLine();
		addLine(center("Keep this receipt for your records"));
	}
}

/**
 * PUBLIC
 * Implements the cashout receipt
 * Needed data types: VIEW
 * @author Celso Fernandes
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function cashoutReceipt(config, data)
{
	var firstPass = true;
	
	initGlobalt();
	rootConfig = new XML(config);
	if(rootConfig.CustomData.length() == 0) {
		return new StringBuffer();
	}
	var custom = rootConfig.CustomData[0];
	// need to figure out if this is the first pass or the second pass
	var passArgs = custom.split("|PASSARG:");
	custom = passArgs[0];
	if (passArgs.length > 0)
	{
		if (passArgs[1] == "second")
		{
			firstPass = false;
		}
	}

	//addLine(SEP_UL);
	startBold();
		// Adds the default receipt header from store-db
		addDefaultHeader();
		addLine(center("TEL# " + rootConfig.StorePhoneNumber));
	endBold();

	startInvertedColor();
	addLine();
	startBold();
	addLine(center("**** GIFT CARD CASH OUT ****"));
	endBold();
	addLine();
	endInvertedColor();


	var posId = "KS# " + toInt(rootConfig.PosId.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	var date = formatDateTimeAMPM(String(rootConfig.@creationDate));
	addLine(posId + API.setOnRight(date, COLS-posId.length));
	//var secondCopy = String(outputBuffer);
	addCSOGiftInfo(firstPass);
	
	if (firstPass == true)
	{
		// Adds default store-DB xml footer to the first copy
		addDefaultFooter();
		addLine();
		//addLine(SEP_UL);
		//addLine();addLine();addLine();addLine();addLine();addLine();
		//cutPaper();
	}


	//
	// Start of the second copy
        //
	//addLine(secondCopy);
	//addCSOGiftInfo(false);

	if (firstPass == false)
	{
		addLine("______________________________________");
		addLine("CUSTOMER SIGNATURE");
		addLine();
		addLine("______________________________________");
		addLine("MANAGER SIGNATURE");
		addLine();
		addLine("______________________________________");
		addLine("CREW SIGNATURE");
		addLine();
		addLine();
		// Adds default store-DB xml footer to the first copy
		addDefaultFooter();
		addLine();
	}


	return getResponse();

	/** Adds Cashless information (if any) and returns true if signature is required */
	function addCSOGiftInfo(firstCopy)
	{
		var lines = String(custom).split("CASHLESS_GC:");
		var fields = String(lines[1]).split("|");
		var provider = fields[0].replace("CASHLESS_GC", ""); // + " SALE";
		var providerSale = provider  + " SALE";
		var card = fields[1]; 		// Card #
		var expires = fields[2];	// Card expiration date
		var auth = fields[3];		// Authorization code
		var printFlag = fields[5];	//
		var seq = fields[6];		// Sequence #
		var mer = fields[7];		// Merchant id
		var balance = API.formatNumber(fields[8], NUMBER_FORMAT, 12);	// Balance #
		var amt = fields[9];		// Operation amount
		var vlr = fields[10];		// value
		var store = fields[11];		// store
		var msg = fields[12];		// Mensagem

//		var strStore = "STORE# " + rootConfig.StoreId;
//		var strMer = " MER# " + mer;
//		addLine(strStore + API.setOnRight(strMer, COLS-strStore.length));

		addLine();
		if(firstCopy==true) {
			//var line = "QTY ITEM";
			//line = line + API.setOnRight("TOTAL", COLS-line.length);
			line = API.setOnRight("TOTAL", COLS);
			addLine(line);
			var qty = API.setOnRight(1,3);
			var name = "GIFT CARD CASH OUT";
			var price = " " + API.formatNumber(Number(vlr), NUMBER_FORMAT, 8);
			line = API.setOnLeft(qty + " " + name, COLS-price.length) + price;
			addLine(line);
			addLine();
			addLine(API.setOnLeft("Subtotal", COLS-9) + price);
			addLine(API.setOnLeft("Tax", COLS-4) + "0.00");
			addLine(API.setOnLeft("Total Refund", COLS-9) + price);
			addLine();
			addLine(API.setOnLeft("Cash Out Amount", COLS-9) + price);
		}
		else {
			var name = "GIFT CARD CASH OUT AMOUNT";
			var price = " " + API.formatNumber(Number(vlr), NUMBER_FORMAT, 8);
			line = API.setOnLeft(name, COLS-price.length) + price;
			addLine(line);
		}
		addLine();
		addLine();

		addLine("MER# " + mer);
		addLine("ACCOUNT# " + card);
		addLine("AUTH CODE " + auth  + "\nSEQ# " + seq);   // NVS-1153
		if(provider == "Gift Card") {
			startBold();
			addLine();
			addLine(center("GIFT CARD BALANCE"));
			var trimBalance="$"+trim(balance)
			addLine(center(trimBalance));
			endBold();
		}
		addLine();
		//addLine(msg);
		addLineEscSeq(msg, true);
		addLine();
	}
}



/**
 * PUBLIC
 * Implements the refund by cash receipt
 * Needed data types: VIEW
 * @author Mauricio Yokomizo
 * @signature public java.lang.StringBuffer refundByCashReceipt(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function refundByCashReceipt(config, data) 
{
	
    if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
	}
	
    // Order information
    var view		= rootView.View;
    
    addLine(SEP_UL);
    
    startBold(); {
	// Adds the default receipt header from store-db
	addDefaultHeader();
	addLine(center("TEL# " + rootConfig.StorePhoneNumber + " Store# " + rootConfig.StoreId));
    } endBold();

    addLine();
	startInvertedColor();
	startBoldSize2();
	addLine("  **** REFUND **** ");
	endBoldSize2();
	endInvertedColor();

    addLine();
    
    var posId = "KS# " + toInt(rootConfig.PosId.substring(3, 7)); // Eg: POS0001:89 - > KS#1
    
	var date = formatDateTimeAMPMFromView(view);
    addLine(posId + API.setOnRight(date, COLS-posId.length));
    addLine();
    var mfySide = "";

    //NVS-3607
    //NVS-3441
	var isFromKiosk = (Number(view.@pod) == PODCSO);

	//NVS-4243
	if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){
		isRcpHHOT = true; 
	}
	var useRecallerId = isFromKiosk || isRcpHHOT;			

    var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),true,useRecallerId,false);
    var kvsOrder = "KVS Order " + majorMinor;
    var saleTypes	= Array("Eat-In", "Take-Out", "Other");
    var saleType	= toInt(view.@type);

	if ((mfySide!="") || (kvsOrder!="")) {
	    addLine("<@BoldOn>" + mfySide + "<@BoldOff> " + kvsOrder);
	    addLine();
	}
    addLine();
    // Adds sub-total, tax an total information
    var totalAmt	= Number(view.@grossAmount);
    var taxAmt		= Number(view.@totalTax);
    var subTotalAmt	= Number(view.@totalAmount);        //totalAmt - taxAmt;
    var tenders		= view.ItemTenderView;

    addDetailLine("Subtotal",	subTotalAmt);
    addDetailLine("Tax",		taxAmt);
    addDetailLine("Total Refund",	totalAmt);
	addLine();			

    addDetailLine("Change", 0);

    addLine();

	addLine("Authorized");
	addLine("Signature:_________________________");
	addLine();
	addLine("Address");
	addLine("___________________________________");
	addLine();
	addLine("Phone #");
	addLine("___________________________________");
	addLine();
	addLine("Reason");
	addLine("___________________________________");
	
	var secondCopy = outputBuffer + "";
	
	addLine();
	
	// Adds default store-DB xml footer to the first copy
	addDefaultFooter();
	addLine();		
	addLine(SEP_UL);
	
	addLine();addLine();addLine();addLine();addLine();addLine();
	cutPaper();
	addLine(secondCopy);	
    
    // Add default Receipt Footer from store-DB 
    addLine();
    addDefaultFooter();

    addLine();
    addLine(SEP_UL);
    
    return getResponse();

    /** Adds a detail line given a description (string) and amount (number) */
    function addDetailLine(description, amount) 
    {
	var sig = "";
	var sizeAmount = 12;
	if(amount < 0) {
	    amount = -amount;
	    var sizeAmount = 10;
	    sig = "- ";
	}
	addLine(API.setOnLeft(description, COLS-sizeAmount-sig.length) + sig + API.formatNumber(amount, NUMBER_FORMAT, sizeAmount));
    }
}


/**
 * PUBLIC
 * Implements fnMountOrderId
 * Needed data types: VIEW
 * @author Celso Fernandes
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function fnMountOrderId(OrderId,Order,Major,Minor)
{
	return(OrderId=="") ? PosMountOrderIdJS("1",Order,Major,Minor) : OrderId;
}

/**
 * PUBLIC
 * Implements fnMountOrderIdEx
 * @author Kevin Dilks
 * @review Marcelo Silva  NVS-3607/NVS-3441
 * @signature public java.lang.StringBuffer fnMountOrderIdEx(java.lang.StringBuffer OrderId, java.lang.StringBuffer Order, java.lang.StringBuffer Major, java.lang.StringBuffer Minor, java.lang.StringBuffer TenderPOS, java.lang.Boolean trimPosNumber, java.lang.Boolean showRecallerId);
 */
function fnMountOrderIdEx(OrderId,Order,Major,Minor,TenderPOS,trimPosNumber,showRecallerId,useBigOrderFormat)
{
	if (showRecallerId == undefined || showRecallerId == null)
	{
		showRecallerId = false;
	}

	//NVS-3748
	if (useBigOrderFormat == undefined || useBigOrderFormat == null)
	{
		useBigOrderFormat = false;
	}	

	var orderRegister = Order.substr(0,7);
	
	var tenderRegister = ""; 
	
	if(TenderPOS != undefined && TenderPOS != null && TenderPOS != "")
	{
		tenderRegister = TenderPOS.substr(0,7);
	}
	
	var recallerEqual = tenderRegister == orderRegister;
	
	// NVS-3107: We have to chop off the pos number from the order ID when orderNbrFormat = "2"
	//NVS-3607
	//NVS-3748
	if (OrderId=="" || (showRecallerId && !recallerEqual) || (!trimPosNumber && OrderId.toString().length < 3))
	{
	
		var numberFormat;
		if(trimPosNumber)
		{
			numberFormat = "1";
		}else
		{
			//NVS-3748
			if(useBigOrderFormat)
			{
				numberFormat = largeOrderNumberFormat;
			}
			else{
				numberFormat = orderNbrFormat;
			}

		}
		
		var number = PosMountOrderIdJS(numberFormat,Order,Major,Minor,TenderPOS,showRecallerId);
		
		return number;
	}
	else if(showRecallerId && OrderId.substring(OrderId.length - 5, OrderId.length) == "-1/-1")
	{
		while(Major.length < 2) {
			Major="0"+Major;
		}
		var orderNum;

		//NVS-3441
		if(trimPosNumber){
			orderNum = Major.substr(Major.length-2,2);
		}
		else if(showRecallerId){
			orderNum = Number(TenderPOS.substring(3,7))+Major.substr(Major.length-2,2);
		}
		else{
			orderNum = Number(Order.substring(3,7))+Major.substr(Major.length-2,2);
		}
		
		if(toInt(Minor) != 0) {
			orderNum+="/"+Minor;
		}
		
		return orderNum;
	}
	else
	{
		//NVS-3748
		var numberFormat;
		if(useBigOrderFormat)
		{
			numberFormat = largeOrderNumberFormat;
		}
		else{
			numberFormat = orderNbrFormat;
		}
		var posMultiOrder = OrderId.search("/");
		if (posMultiOrder == -1) {
			posMultiOrder = OrderId.length;
		}
		if (numberFormat == "2" && posMultiOrder >= 2 && trimPosNumber){
			return OrderId.substring(posMultiOrder - 2, OrderId.length);
		}
		else{
			return OrderId;
		}
	}
}

/** PosMountOrderIdJS
 *
 * @brief - This function implements the BC,Business Component: <b>PosMountOrderIdJS</b>\n
 * This BC checks if it's possible to void a sale!\n
 * In a workflow sequence it is called:<b>PosMountOrderIdJS NbrFormat szOrder szMajor szMinor</b>\n
 * In java script it should be called:<b>PosMountOrderIdJS(NbrFormat,szOrder,szMajor,szMinor)</b>\n
 * @param - NbrFormat - Number Format
 * @param - Order - POD + order number
 * @param - Major - major number
 * @param - Minor - minor number
 * @param - TenderPOS - Tender POD
 * @param - showRecallerId - show register id which recalled the order
 * Return - rval - OrderId
 */
function PosMountOrderIdJS(szNbrFormat,Order,Major,Minor,TenderPOS,showRecallerId) {

	if (showRecallerId == undefined || showRecallerId == null)
	{
		showRecallerId = false;
	}

	var OrderId="";
	switch(Number(szNbrFormat)) {
	default:
	case 1:
		while(Major.length < 2) {
			Major="0"+Major;
		}
		OrderId=Major.substr(Major.length-2,2);
		if(toInt(Minor) != 0) {
			OrderId+="/"+Minor;
		}
		break;
	case 2:
		while(Major.length < 2) {
			Major="0"+Major;
		}
		//NVS-3441
		if(showRecallerId && TenderPOS != undefined && TenderPOS != null)
		{
			OrderId=Number(TenderPOS.substr(3,4))+Major.substr(Major.length-2,2);
		}else
		{
		OrderId=Number(Order.substr(3,4))+Major.substr(Major.length-2,2);
		}
		if(toInt(Minor) != 0) {
			OrderId+="/"+Minor;
		}
		break;
	}
	return(OrderId);
}


//SDO-1794  RPS 01/25/10
function reportCalcCashInDrawer(config, data)
{
	PosSetSessionProperty("CashInDrawer", "0");
	if(init(config, data, Array("CASH"), "CSDRW") != 0) {
		return getResponse();
	}

	var lastPOS		= rootCash.POS;
	var indLastPOS	= lastPOS.length() - 1;
	var nodePOS		= lastPOS[0];
	var statusPOS	= getAttribute(nodePOS, "status");

	var currentOperator	= findCurrentOperator(rootCash);
	var operatorName	= getAttribute(currentOperator, "name");
	var totalExpected	= 0;

	// POS must be opened and an operator must be logged
	if( ( statusPOS != "OPLOGGED" ) || (currentOperator == null) ) {
		addLine("ERROR:There is not an Operator Logged");
		return getResponse();
	}

	var initialFloat = Number(addInitialFloats(rootCash, currentOperator));
	var totalCashTendered = Number(addTendersSummary(rootCash, currentOperator));
	var totalSkims = Number(addSkimsSummary(rootCash, currentOperator));
	totalExpected  = initialFloat + totalCashTendered - totalSkims;
	PosSetSessionProperty("CashInDrawer", totalExpected);


	return getResponse();


	/**
	 * Adds the summary of tenders followed by the total of operations and its total amount
	 * @return total amount of tenders
	 */
	function addTendersSummary(rootCash, currentOperator)
	{
		var tenderName;
		var localAmount;
		var operations = 0;
		var nodesTenderSize = 0;
		var initialFloat = new BigDecimal(0);

		var nodeTenders		= findFirst(currentOperator, "Tenders");
		if(nodeTenders != null){
			var nodesTenders 	= nodeTenders[0].*;
			var nodesTenderSize = nodesTenders.length();
			var nodeTender 		= nodesTenders[0];
			operations 			= getNumberAttribute(nodeTender[0], "tc");
		}

		var nodeSkim		= findFirst(currentOperator, "TransfersOut");
		if(nodeSkim != null){
			var nodesSkim		= nodeSkim.Transfer;
			var nodesSkimSize	= nodesSkim.length();
		}

		var totalLocalAmount = new BigDecimal(0);
		var totalOperations  = new BigDecimal(0);
		var totalSkim 		 = new BigDecimal(0);

		if(nodesTenderSize > 0) {
			totalSkim = new BigDecimal(getNumberAttribute(nodeSkim, "amount"));

			nodesTenderSize = 1; // Get only <TenderType id="0" name="US$" />
			for(var i = 0; i < nodesTenderSize; i++) {
				var nodeTender = nodesTenders[i];

				operations 		= getNumberAttribute(nodeTender, "tc");
				localAmount 	= new BigDecimal(getNumberAttribute(nodeTender, "drawerAmount"));
				initialFloat 	= getNumberAttribute(nodeTender, "initialFloat");
				localAmount 	= localAmount.subtract(initialFloat);
				tenderId 		= getNumberAttribute(nodeTender, "id");
				// search the description of tender id
				tenderName 		= findTenderDescription(rootCash, tenderId);

				// assumes that all transfer out operations are maden in cash (TenderType 0) so skim amount is added only to cash amount
				if(tenderId=="0") {
					localAmount = localAmount.add(totalSkim);
				}

				totalLocalAmount = totalLocalAmount.add(localAmount);
				totalOperations  = totalOperations.add(operations);
			}
		}
		return totalLocalAmount;
	}

	/**
	 * Adds the summary of skims followed by the total of operations and its total amount
	 * @return total amount of skims
	 */
	function addSkimsSummary(rootCash, currentOperator)
	{
		var nodeCashDetails			= findFirst(currentOperator, "CashDetails");
		var nodesTransfersOut		= nodeCashDetails.TransfersOut;
		var nodesTransfersOutSize	= nodesTransfersOut.length();
		var totalTransfer			= new BigDecimal(0);

		if(nodesTransfersOutSize > 0) {
			for(var i = 0; i < nodesTransfersOutSize; i++) {
				var nodeTransferOut = nodesTransfersOut[i];
				var transferName 	= getAttribute(nodeTransferOut, "type");
				var transferAmount 	= new BigDecimal(getNumberAttribute(nodeTransferOut, "amount"));
				var transferQtty 	= getNumberAttribute(nodeTransferOut, "count");
				totalTransfer 		= totalTransfer.add(transferAmount);

				// assumes that all transfer out operations are maden in cash (TenderType 0)
				currencyName = findTenderDescription(rootCash, "0");
			}
		}
		return totalTransfer;
	}

	/**
	 * Adds all initial floats
	 * @return total initial floats
	 */
	function addInitialFloats(rootCash, currentOperator)
	{
		var nodeInitialFloat		= findFirst(currentOperator, "TransfersIn");
		var nodesInitialFloat		= nodeInitialFloat.Transfer;
		var nodesInitialFloatSize	= nodesInitialFloat.length();

		var tenderName;

		var totalLocalAmount= new BigDecimal(0);
		var localAmount 	= new BigDecimal(0);
		var initialFloat 	= new BigDecimal(0);

		if(nodesInitialFloatSize > 0) {

			totalOperations  = getNumberAttribute(nodeInitialFloat, "count");
			totalLocalAmount = getNumberAttribute(nodeInitialFloat, "amount");

			for(var i = 0; i < nodesInitialFloatSize; i++) {
				var nodeInitialFloat = nodesInitialFloat[i];

				localAmount = getNumberAttribute(nodeInitialFloat, "amount");
				tenderId = getNumberAttribute(nodeInitialFloat, "tenderId");
				// search the description of tender id
				tenderName = findTenderDescription(rootCash, tenderId);
			}
		}
		return totalLocalAmount;
	}


	/** Wraps XMLElement.findFirst() to ignore null nodes */
	function findTenderDescription(rootNode,tenderId)
	{

		var cmd = "rootNode.TenderTable.TenderType.(@id == " + tenderId + ")";
		var value = eval(cmd);
		return value.@name;
	}
}

/**
 * PRIVATE
 * Calculate mod 43 check digit for bar code
 * @author fernando.vicente
 */
function code39CheckDigit(varBarcode)
{
	var charSet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%";
	var subtotal = 0;
	var pos = 0;
	var str = "" + varBarcode.toString();
	for(var i = 0; i < str.length; i++) {
		var ch = "" + str[i];
		pos = charSet.indexOf(ch);
		if(pos > -1) {
			subtotal += pos;
		}
	}
	subtotal = subtotal % 43;
	return charSet[subtotal];
}

/**
 * PUBLIC
 * Implements the barCode
 * Needed data types: VIEW
 * @author Celso
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function barCode(varBarcode)
{
	//NVS-560 RPS 11-3-2011  barcode will not have leading zeros and no check digit
	var varBarcodeFormat = API.formatNumber(Number(varBarcode), "#000", 4);
	varBarcodeFormat = trim(varBarcodeFormat);
	startBarCode();
	outputBuffer.append(varBarcodeFormat);
	//outputBuffer.append(code39CheckDigit(varBarcodeFormat));
	endBarCode();
}

function UberbarCode(varBarcode)
{
	//NVS-560 RPS 11-3-2011  barcode will not have leading zeros and no check digit
	startBarCode();
	outputBuffer.append(varBarcode);
	//outputBuffer.append(code39CheckDigit(varBarcodeFormat));
	endBarCode();
}

/** Starts Barcode Sequence*/
function startBarCode()
{
	outputBuffer.append("<@BarCodeOn>");
}

/** Starts Barcode Sequence*/
function BarCode128()
{
	outputBuffer.append("<@BarCode128>");
}
/** Ends Barcode Sequence*/
function endBarCode()
{
	outputBuffer.append("<@BarCodeOff>");
}



/**
 * LOCAL
 * @brief Consolidates or removes the autocondiment (AC) items from the given view. (Part of feature PLE-194)
 * @param acDisplayProperty - property which defines where the AC items will be displayed, valid properties: 'receipt' or 'picklist'.
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.String acDisplayProperty);
 * @author Kalil Garcia
 */
 function lConsolidateACItems(acDisplayProperty) {
	try {
		//API.dbg("Reports.nps:lConsolidateACItems() - Consolidating AC items based on display property: [" + acDisplayProperty + "]...");//removed due to NVS-1671
		var view 			= rootView.View;
		var acItemsList 	= new Array();

		// first assert promo quantities
		assertPromoQuantities(view);

		// Removes all the auto-condiment items from the view.
		for (var j = 0; j < view.ItemView.length(); ++j) {
			var isAC 		= view.ItemView[j].AutoCondiment;
			var acDisplay 	= view.ItemView[j].ACDisplay;
			if (isAC=='true') {
				if (canDisplayACItem(acDisplay, acDisplayProperty)) {
					var acItemView 		= view.ItemView[j];
					var parentsQty 		= getParentsQuantity(view, j, new Number(acItemView.level));
					acItemView.quantity *= parentsQty;
					acItemView.level 	= 0; 	// Auto-condiment must be in the level zero.
					consolidateACItem(acItemView);
				}
				delete view.ItemView[j];
				j--;
			}
		}
		// Removes the AC zombie parents.
		removeACZombieParents(view);
		// Re-adds the joined auto-condiment items to the view.
		for (var x=0; x < acItemsList.length; x++) {
			view.appendChild(acItemsList[x]);
		}
	} catch(ex) {
		API.dbg("Could not consolidate auto-condiments on the view, due to: " + ex);
	}

	function assertPromoQuantities(view) {
		try {
			var promoId  = 0;
			var promoQty = 0;
			for (var j = 0; j < view.ItemView.length(); ++j) {
				var isAC 	= view.ItemView[j].AutoCondiment;
				var item  	= view.ItemView[j];
				var level 	= new Number(item.level);

				if (level == 0) {
					// root item
					// rootItem		= item;
					rootQtyPromo	= new Number(item.quantityPromo);
					rootPromoId		= new Number(item.promo.@id);
				} else if (rootQtyPromo > 0 && isAC == 'true') {
					// Autocondiment with promo
					var parentQty		= getLevelQuantity(view, j, level);
					var	qtyPromo		= rootQtyPromo * parentQty * new Number(item.quantity);
					var promoxml		= '<promo id="' + rootPromoId + '">' + rootQtyPromo + '</promo>';
					//API.dbg("[assertPromoQuantities] promoxml: [" + promoxml + "]"); //removed due to NVS-1671
					var promo			= new XML(promoxml);

					// item.quantity		= getLevelQuantity(view, j, level);
					//API.dbg("[assertPromoQuantities] item.quantity: [" + item.quantity + "]");//removed due to NVS-1671
					item.quantityPromo	= qtyPromo;
					//API.dbg("[assertPromoQuantities] item.quantityPromo: [" + item.quantityPromo + "]");//removed due to NVS-1671
					delete item.promo;
					item.appendChild(promo);
				}
			}
		} catch (ex) {
			API.dbg("FATAL ERROR: Could not fix promo quantities, due to: " + ex);
		}
		/*
		 * Gets the quantity of a given level.
		 * @author - Kalil
		 */
		 function getLevelQuantity(view, curIndex, level) {
			try {
				var total = 1;
				for (var x = curIndex; x >=0; x--) {
					if (new Number(view.ItemView[x].level) < level) {
						if (view.ItemView[x].level == 0) {
							return total;
						} else {
							total = total * new Number(view.ItemView[x].quantity);
						}
					}
				}
			} catch (ex) {
				API.dbg("FATAL ERROR: Could not get the quantity of the previous level, due to: " + ex);
			}
			return 1;
		}
	}


	/*
	 * Removes the AC zombie parents.
	 * @since - PLE-194
	 * @author - Kalil
	 */
	function removeACZombieParents(view) {
		for (var j=0; j<view.ItemView.length(); ++j) {
			var acDNAPath		= new Number(view.ItemView[j].acDNAPath);
			var isLastElement 	= (j == view.ItemView.length() - 1);
			if (acDNAPath==1) {
				if (!hasChild(j)) {
					// Has no child and it was linked to an AC item, lets check if it is a zombie parent.
					if (removeZombieParent(j)) {
						// Lets reset it and starts again, we dont know if we left the grandparent as a zombie.
						j=-1;
					}
				}
			}
		}
		// Lets remove the DNA information.
		for (var j = 0; j < view.ItemView.length(); ++j) {
			var acDNAPath = new Number(view.ItemView[j].acDNAPath);
			if (acDNAPath == 1) {
				delete view.ItemView[j].acDNAPath;
			}
		}

		/*
		 * Verifies if the given item index has children items.
		 * @since - PLE-194
		 * @author - Kalil
		 */
		 function hasChild(curIndex) {
			var level = new Number(view.ItemView[curIndex].level);
			var isLastElement = (j == view.ItemView.length() - 1);
			if ((!isLastElement) && (level < new Number(view.ItemView[curIndex+1].level))) {
				return true;
			}
			return false;
		}

		/*
		 * Removes the zombie parent. It will only be preserved if it has at least one of the following characteristics:
		 * 		1) OPENED CHOICE (MUST SHOW OPENED CHOICES)
		 * 		2) GRILLED ITEMS (MUST SHOW GRILLED PRODUCTS)
		 * 		3) NON ZERO PRICE (COST NOT INCLUSE)
		 *      4) QUANTITY GREATER THAN ZERO (MUST SHOW VOID ITEM)
		 *		5) PROMO QUANTITY NOT EQUALS TO ZERO (MUST SHOW PROMOTED ITEMS)
		 * @since - PLE-194
		 * @author - Kalil
		 */
		function removeZombieParent(index) {
			var quantity		= new Number(view.ItemView[index].quantity);
			var promoQty		= new Number(view.ItemView[index].quantityPromo);
			var totalPrice		= new Number(view.ItemView[index].totalPrice);
			var totalPriceBP	= new Number(view.ItemView[index].BPTotalPrice);
			var isGrillLine		= view.ItemView[index].isGrillLine;
			var productType		= new Number(view.ItemView[index].productType);	// OPEN CHOICE=4
			var	level			= new Number(view.ItemView[index].level);
			var prodAction		= new Number(view.ItemView[index].prodAction);

			if (	totalPriceBP		== 0		&&
					promoQty			== 0		&&
					quantity			> 0			&&
					productType			!= 4		&&
					isGrillLine			== 'false'	&&
					totalPrice			== 0		&&
					level				!= 0		&&
					prodAction			!= 3
			) {
				delete view.ItemView[index];
				return true;
			} else {
				return false;
			}
		}
	}

	/*
	 * Calculates the parents quantity.
	 * @since - PLE-194
	 * @author - Kalil
	 */
	 function getParentsQuantity(view, curIndex, curLevel) {
		try {
			var qty = 1;
			for (var x=curIndex;x>=0;x--) {
				if (new Number(view.ItemView[x].level) < curLevel) {
					curLevel = new Number(view.ItemView[x].level);
					qty *= new Number(view.ItemView[x].quantity);
					// Creates the AC DNA indicating the genealogy path, so we
					// can find the its possible zombie parents.
					view.ItemView[x].acDNAPath = "1";
					if (curLevel == 0) {
						break;
					}
				}
			}
			return qty;
		} catch (ex) {
			API.dbg("FATAL ERROR: Could not calculate parents quantity for auto-condiments, due to: " + ex);
			return 1; // At least keeps the AC default quantity.
		}
	}

	/*
	 * Verifies if the ACDisplay tag has the given display property value, such as: 'receipt' or 'picklist'.
	 */
	 function canDisplayACItem(acDisplay, type) {
		var props = acDisplay.split("|");
		for (var w=0;w<props.length;w++) {
			if (props[w]==type) {
				return true;
			}
		}
		return false;
	}

	/*
	 * Consolidates the incoming order items.
	 * @author - Kalil
	 */
	function consolidateACItem(acItemView) {
		// Auto-condiment must be in the level zero.
		acItemView.level 			= 0;
		// Auto-condiment item does not accept non-zero price.
		acItemView.unitPrice		= 0;
		acItemView.netUnitPrice		= 0;
		acItemView.unitTax			= 0;
		acItemView.totalPrice		= 0;
		acItemView.netTotalPrice	= 0;
		acItemView.totalTax			= 0;
		acItemView.ADTotalPrice		= 0;
		acItemView.ADNetTotalPrice	= 0;
		acItemView.ADTotalTax		= 0;
		// Is not selected any more.
		acItemView.currentSelected  = 'false';
		var sz = acItemsList.length;
		for (var x=0; x < sz; x++) {
			var item = acItemsList[x];
			if (item.productCode == acItemView.productCode) {
				// By design, does not support grilled quantities. (AC items are not grillable)
				var promoQty		= (new Number(item.quantityPromo) 	+ new Number(acItemView.quantityPromo));
				var promoId			= getPromoId(item, acItemView);
				item.quantity 		= (new Number(item.quantity) 		+ new Number(acItemView.quantity));
				item.quantityPromo	= promoQty;
				if (promoQty > 0) {
					var promoxml = '<promo id="' + promoId + '">' + promoQty + '</promo>';
					var promo = new XML(promoxml);
					delete item.promo;
					item.appendChild(promo);
				}
				return;
			}
		}
		// Item was not found in the list, lets add it.
		acItemsList[sz] = acItemView;
	}

	function getPromoId(item, acItemView) {
		if (new Number(item.quantityPromo) > 0) {
			return item.promo.@id;
		} else {
			return acItemView.promo.@id;
		}
	}
}

function printIncomingContent(config, data) {
	addLine("======================================== PERA");
	outputBuffer.append(config);
	for (var i = 0; i < data.length; i++) {
		addLine("======================================== CONTENT #" + i);
		if (data[i] == null) {
			outputBuffer.append("N/A\n");
		} else {
			outputBuffer.append(data[i]);
		}
	}
	API.SLog("LOGLEVL_WARNING", "[banana2]: " + outputBuffer);
}

/** Appends a new line in the report. */
function addLine(line) {
	if (line != null) {
		outputBuffer.append(line);
		//NVS-7275 22-MAR-2017 John Brancaleon - Rewrite this section of code to make it clearer and add the necessary blank line
		if(line.length > 0 && line.substring(line.length-2) != "\n") {
			outputBuffer.append("\n");
		} else {
			outputBuffer.append("\n");
		}
	} else { 
		outputBuffer.append("\n");		
	}
}

/**
 * PUBLIC
 * Implements the dual point pick list receipt
 * Needed data types: VIEW
 * @Dan Naleway, John Clark
 */
function reportDualPointPickList(config, data) {

	var LIGHT  = 1;
	var ONLY   = 2;
	//NVS-3441
	var IsMobileOrder = false;
	var numberFormat = orderNbrFormat;
	
	if(numberFormat == null) {
		numberFormat = 0;
	}

	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
	}

	/* if not set to DualPoint, or if Overring, exit */
	var view = rootView.View;
	var isOverring	= ((Number(view.@saleStatus) == SALE_STATUS_LAST_SALE_VOIDED) || (Number(view.@saleStatus) == SALE_STATUS_CURRENT_SALE_VOIDED));
	var isDualPoint = PosCheckParameter_ex("Report","DualPoint","true") == true;
	if(!isDualPoint || isOverring){
		return;
	}

	/* Order information */
	var showCanceledItems="false";
	var prnPickList = true;

	var custom 	 = rootConfig.CustomData[0];
	if(custom != null) {
		var fields = String(custom).split(":");
		if(fields.length>=1) {
			showCanceledItems = fields[0];
			if(fields.length>=2) {
				prnPickList = (fields[1] != "1");
			}
		}
	}

	IsMobileOrder = checkIsMobileOrder(view);
	var Stall = "N/A";
	var POD = "N/A";
	if (IsMobileOrder == true) {
		var CheckInInfo = view.CustomInfo.Info.(@name == "checkInData").@value;
		if (CheckInInfo != undefined && CheckInInfo != null) {
				POD = CheckInInfo.charAt(11);
				Stall = CheckInInfo.charAt(14);
		}
	}
	var saleTypes	= Array("Eat-In", "Take-Out", "Other");
	var saleType	= toInt(view.@type);
	var totalDue = Number(view.@totalDue);

	/* Check Refund */
	var isRefund = (view.@transactionKind == TRANS_KIND_REFUND);
	if (view.@vmChildrenMultiplied == "true") {
		// KVS view comes with quantities already multiplied
		divideItemQuantities(view);
	}
	if(isRefund) {
		return getResponse();
	}

/* big order number at the top */
	addLine();
	//NVS-559 RPS 10-7-2011
	var orderNum;
	
	//NVS-3607
	if (IsMobileOrder == true) {
			orderNum = toInt(view.@orderKey.substring(3,7)) + view.@orderId;
	}else{
		//NVS-3441
		//NVS-3748
		var isFromKiosk = (Number(view.@pod) == PODCSO);

		//NVS-4243
		if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){
			isRcpHHOT = true; 
		}
		var useRecallerId = isFromKiosk || isRcpHHOT;			

		var trimPOS = Number(largeOrderNumberFormat) == 1 ? true : false;
		orderNum = fnMountOrderIdEx("",String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),trimPOS,useRecallerId,true);
	}
			
	//NVS-6999 - NVS-7115 - msilva - UberEats Integration
	var uberEatsOrderKey = GetUberEatsOrderKey();

	outputBuffer.append("<@BigCharOn>");
	if(uberEatsOrderKey != false){
		addLine(rtrim(API.center(uberEatsOrderKey, 8)));	// NVS-2766 Kiosk has only 6 char @BigChar - so add rtrim to strip blanks for this printer
	}else{
		addLine(rtrim(API.center(orderNum, 8)));	// NVS-2766 Kiosk has only 6 char @BigChar - so add rtrim to strip blanks for this printer
	}
	outputBuffer.append("<@BigCharOff>");
	// Lindomar Araujo: 2016/09/06 - NVS-5144 - Add the TagId information on the Grill / Pick List slip, if available
	var TableTagId = String(view.@tableTagId);
	// NVS-5461 John Brancaleon 11-OCT-2016 - Allow -1 as tag ID if customer choses not to have table service, and don't show it on the receipt if it is -1 
	if (TableTagId != "" && Number(TableTagId) > 0 && POD != "4") {  
		startBoldSize2();
		if(view.@MobileOrderStatus == "1"){
			addLine("     TABLE #" + TableTagId);
		}
		else {
		addLine("     LOCATOR #" + TableTagId);
		}
		endBoldSize2();
	}
	addLine();


/* line two of header info */
/*	addLine(" ");
	var value = rootConfig.Header;
	if(value != null && value != "") {
		var lines = String(value).split("\\n");

		// print second line from header info - ie McDonalds's Romeoville
		if(lines[2] != null && lines[2] != "") {
			addLine(center(lines[2]));
		}

	}*/

/* ks# and date */
	//NVS-559 RPS 10-7-2011
	var posId;
	if (IsMobileOrder == false) {
		posId = "KS# " + toInt(view.@tenderPOS.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	} else {
		if (POD == "0") {
			posId = "Lobby";
		} else if (POD == "4") {
			posId = "Curbside Stall " + Stall;
		} else {
			posId = "KS# " + toInt(view.@tenderPOS.substring(3, 7)); // Eg: POS0001:89 - > KS#1
		}
	}
	
	var date = formatDateTimeAMPMFromView(view);	
	addLine(posId + API.setOnRight(date, COLS-posId.length));
	addLine();


/* sale type eat in - take out */
	startBoldSize2();
	addLine(API.center(saleTypes[saleType], 20));
	endBoldSize2();
	addLine(SEP_UL);

/* Identify if is Special Order */	
//NVS-5743 - Auto Print Pick List for Held Car in DT feature is not working. Parameter "enableHeldAutoPrint" is not present in store-db
	var kvsView = rootKVSView.View;
	if(kvsView.@parkingLocation != undefined && kvsView.@parkingLocation != null && kvsView.@parkingLocation != ""){
		startBoldSize2();
		//NVS-6821 Tishin Thomas Auto print pick list for held orders in DT]: Space is missing in "PARKINGLOT"  for picklist printed for DT Held Orders.
		if(kvsView.@parkingLocation=="PARKINGLOT"){
			addLine("*** " + "PARKING LOT" + " ***");
		}
		else{
		addLine("**** " + kvsView.@parkingLocation + " ****"); //Kalpesh - NVS-6044
		}
		endBoldSize2();
		addLine("");
	}
	if (kvsView.@IsSGP == "true") {
		addLine();
		outputBuffer.append("<@BigCharOn>");
		addLine(API.geti18nMsg(1, "MSG_BC_PICKLIST_SPECIAL_PRODUCT",[]));
		outputBuffer.append("<@BigCharOff>");
		addLine();
	}
	view = checkPlainForReceipt(view);
	view = checkSmartGrillForReceipt(view);
	
	//  Print the items in the order
	pickListView = new OrderView(view);
	pickListView.SetPickList(true);
	pickListView.PrintSaleItemsForPickList(); //NVS-4706 - Felipe Ramas
	//pickListView.PrintSaleItems();
	
	
/* add barcode if configured in store-db */
	addLine(SEP_UL);
	addLine();
	//NVS-7914 - Tishin - Enable Pick Ticket Printer for Non-Dual Point 2.0
	var storedbPathBarcode = "Configurations.Configuration.(@type==\"POS\").Section.(@name==\"Report\").Parameter.(@name==\"PLBarCode\").@value";
    	var posdbPathBarcode = "Configuration.(@imports==\"POS\").Section.(@name==\"Report\").Parameter.(@name==\"PLBarCode\").@value";
    	var barcodeVal = getConfigValue(storedbPathBarcode , posdbPathBarcode, "1");
	if(barcodeVal == "true"){
			
		if(uberEatsOrderKey != false){
			UberbarCode(uberEatsOrderKey);
			addLine();
			addLine();	
		}
		else{
		barCode(orderNum);
		addLine();
		addLine();
		}
	}
	addLine();
	return getResponse();


	/** Adds an item description given an <ItemView> tag */
	function addItemLine(item, qtyLevelZero)
	{
		var ident = "";
		var level = toInt(item.level);

		var itemClass = item.productType.length();
		if (itemClass != 0) {
			if (item.productType == 4) {
				return;
			}
		}

		//NVS-856 changed i<level to i<=level
		for(var i=1; i<=level; i++) {
			ident += " ";
		}
		if (item.level == 0) {
			qtyLevelZero = 1;
		}
		var aux = item.quantity  * qtyLevelZero;
		var qty = API.setOnRight(aux, 3);
		var name = item.longName;
		var compl = "";
		if(toInt(item.quantityPromo) != 0) {
			compl = item.quantityPromo + "P";
		}
		var line = null;
		
		//Lindomar Araujo: 2014/08/28 - SQC-6001 - Checking if the smartRouting and hideAddGrillParameter is enabled to check if the product is a SGP item 
		// NVS_3116 by KP
		if ((sgpEnabled == "true" && sgpHideAddGrill == "true") && item.isCYT == "true") {
			hideAddGrillModifier = true;
		} else {
			if (item.isGrillLine == "false") {
				hideAddGrillModifier = false;
			}
		}
		if(item.isGrillLine == "true") {
			//line = "    " + ident + getGrillDescription(item, true, false, hideAddGrillModifier);
			//NVS-6471 & NVS-6705 16-FEB-2017 John Brancaleon -  Print the modifiers/numbers that are displayed on the monitor/POS. 
			if(this.parent.data.displayNumbersInsteadofModifiers == "true" || this.parent.data.displayNumbersInsteadofModifiers == true){
				line = "    " + ident + getGrillDescriptionForMcCafeItems(this.data, true, false, hideAddGrillModifier);
			}
			else{
				line = "    " + ident + getGrillDescription(this.data, true, false, hideAddGrillModifier);
			}		

		}else {
			line = ident + qty + " " + name;
		}
		line = API.setOnLeft(line, COLS-compl.length) + compl;
		addLine(line);
	}
};

/** PUBLIC FUNCTION
 * If promotions are applied - sort the view with promotions in order and on top
 *
 * @param xml xmlOrderView the item view that will be sorted
 * @return sorted xml
 */
 function sortPromotionsOnReceipt(xmlOrderView) {
	/* link the children items with main items */
	var itemArray = new Array();
	for each (var item in xmlOrderView.ItemView) {
		if (Number(item.level) == 0) {
			childItemArray = new Array();
			cursor = itemArray.push({item:item, children:childItemArray});
		} else {
			/* add all children as an array within the main item */
			itemArray[cursor-1].children.push(item);
		}
	}

	while (xmlOrderView.ItemView.length() > 0)
		delete xmlOrderView.ItemView[0];

	/* sort promotion products */	
	function comparePromotions(a,b) {
		var aP = a.item.PromotionApplied;
		var bP = b.item.PromotionApplied; 
		if (aP == undefined && bP == undefined)			return (0);		// same
		if (bP == undefined)							return (-1);	// A first
		if (aP == undefined)							return (1);		// B first
		
		// check and group by promotionCounter
		if (aP.@promotionCounter == bP.@promotionCounter)	return (0);		// same
		if (aP.@promotionCounter  < bP.@promotionCounter)	return (-1);	// A first
		if (aP.@promotionCounter  > bP.@promotionCounter)	return (1);		// B first
		return (0);
	}
	itemArray.sort(comparePromotions);

	/* copy sorted items back into XML view */
	/* ALSO... update itemCode to match new order */
	for(var i = 0; i < itemArray.length; i++) {
		/* add main item */
		var ItemView = new XML(itemArray[i].item);
		ItemView.itemCode = i;
		xmlOrderView.ItemView+=ItemView;

		/* then add it's children */
		children = itemArray[i].children;
		for(var j = 0; j < children.length; j++) {
			var ItemView = new XML(children[j]);
			ItemView.itemCode = i;
			xmlOrderView.ItemView+=ItemView;
		}
	}
	return xmlOrderView;
}
// NVS-7776 Tishin Thomas new function for removing special characters
function removeSpecialCharacters(promotionName) {
	
	var blankPos = promotionName.indexOf("\n");
				if (blankPos > -1) {
					promotionName = promotionName.substring(0, blankPos);
				}
				var arr=promotionName.split(" ");
				var loop=0;
				var x = "";
				for each (x in arr) {
					var numCharCode = x.charCodeAt(0);
					if (numCharCode.toString() == "8211" ) {
						arr[loop] = "-";
					}
					loop=loop+1;
				}
			promotionName=arr.join(" ");
		return promotionName;
}
/** PUBLIC FUNCTION
 * If exists an item with grillReason PLAIN, applies the logic of PLAIN, modifying first item to PLAIN item and removing the other items with the same grillReason
 *
 * @param xml xmlOrderView the item view that will be formatted
 * @return formated xml
 */
 function checkPlainForReceipt(xmlOrderView) {
	var level = 0;
	var plainApplied = false;

	for (var i = 0; i < xmlOrderView.ItemView.length(); i++) {
		item=xmlOrderView.ItemView[i];

		if(level != item.level){
			plainApplied = false;
		}
		level = item.level;
		if(item.grillReason == 1){
			if(plainApplied == false){
				item.quantity = 1;
				item.grilledQuantity = 1;
				item.componentDefaultQtd = 0;
				item.componentMinQtd = 0;
				item.componentMaxQtd = 1;
				item.specialModifiers = 0;
				item.productType = 6;
				item.familyGroup = 8;
				item.longName = PLAIN;
				item.dtName = PLAIN;
				item.formattedGrillQty = PLAIN;
				item.grillType = "PLAIN";
				item.description = PLAIN;
				item.name = PLAIN;
				item.displayOrder = 0;
				item.productCode = 0;

				plainApplied = true;
			}else{
				item=null;
				delete xmlOrderView.ItemView[i];
				i--;
			}
		}
	}

	return xmlOrderView;
}

/** PUBLIC FUNCTION
 * Removes components which contains ForceCompDisplay MONITORS
 *
 * @param xml xmlOrderView the item view that will be formatted
 * @return formated xml
 */
 function checkForceCompForReceipt(xmlOrderView) {

	for (var i = 0; i < xmlOrderView.ItemView.length(); i++) {
		item=xmlOrderView.ItemView[i];

		if(item.ForceCompDisplay == "MONITORS"){
			item=null;
			delete xmlOrderView.ItemView[i];
			i--;
		}
	}

	return xmlOrderView;
}
/** PUBLIC FUNCTION
 * Removes components which contains ForceCompDisplay MONITORS
 *
 * @param xml xmlOrderView the item view that will be formatted
 * @return formated xml
 */
 function checkForceComp(xmlOrderView) {

	for (var i = 0; i < xmlOrderView.ItemView.length(); i++) {
		item=xmlOrderView.ItemView[i];

		if(item.ForceCompDisplay == "MONITORS"){
			item=null;
			delete xmlOrderView.ItemView[i];
			i--;
		}
	}

	return xmlOrderView;
}

/** PUBLIC FUNCTION
 * Removes components which contains grillReason USERACTION
 *
 * @param xml xmlOrderView the item view that will be formatted
 * @return formated xml
 */
 function checkSmartGrill(xmlOrderView) {
	for (var i = 0; i < xmlOrderView.ItemView.length(); i++) {
		item=xmlOrderView.ItemView[i];

		if(item.grillReason == 2){
			item=null;
			delete xmlOrderView.ItemView[i];
			i--;
		}
	}

	return xmlOrderView;
}

/** PUBLIC FUNCTION
 * Removes components which contains grillReason USERACTION
 *
 * @param xml xmlOrderView the item view that will be formatted
 * @return formated xml
 */
 function checkSmartGrillForReceipt(xmlOrderView) {
	for (var i = 0; i < xmlOrderView.ItemView.length(); i++) {
		item=xmlOrderView.ItemView[i];

		if(item.grillReason == 2){
			item=null;
			delete xmlOrderView.ItemView[i];
			i--;
		}
	}

	return xmlOrderView;
}

function checkShowChosenItemAsIngredientForReceipt(xmlOrderView) {
	for (var i = 0; i < xmlOrderView.ItemView.length(); i++) {
		var item = xmlOrderView.ItemView[i];

		if(item.showChosenItemAsIngredient == "true"){
			var level = Number(item.level) + 1;

			for(var j=i+1; j < xmlOrderView.ItemView.length(); j++) {
				var subItem = xmlOrderView.ItemView[j];

				if(subItem.level == level) {
					if(subItem.prodAction == "3") { //3- ChoiceProduct
						subItem.prodAction = "0";
						//subItem.isGrillLine = "true";
					}
				}else {
					break;
				}
			}
		}
	}

	return xmlOrderView;
}
/**
 * PUBLIC
 * Implements the Kiosk Barcode receipt
 * Needed data types: NONE
 * Custom parameter format: <barcode>:<redemptions>:<start date>:<end date>:<promotion name>:<product name>:<restaurant>
 * @author Adriana
  */
function reportKioskBarcodeReceipt(config, data) {

	if(init(config, data, Array(), null) != 0){
		return getResponse();
	}

	var custom 	 = rootConfig.CustomData.toString();
	if(custom == null) {
		return getResponse();
	}
	//API.dbg(custom);

	custom = custom.split(":");
	if (custom.length < 7) {
		return getResponse();
	}

	var barcode = custom[0];
	var redemptions = Number(custom[1]);
	var start = custom[2];
	var end = custom[3];
	var promotion = custom[4];
	var product = custom[5];
	var restaurant = custom[6];

	if(barcode == null || redemptions == null || start == null || end == null || product == null || restaurant == null) {
		return getResponse();
	}

	addLine();
	addHeader(rootConfig,promotion,RPTDUMMY);
	addLine();
	addLine("Product: " + product);
	addLine();
	addLine("Good from " + start.substring(4,6) + "/" + start.substring(6) + "/" + start.substring(0,4) + " to " + end.substring(4,6) + "/" + end.substring(6) + "/" + end.substring(0,4));
	addLine("At " + (restaurant == "ALL" ? "any restaurant" : "this restaurant"));
	addLine((redemptions > 0 ? "For " + redemptions + (redemptions > 1 ? " times" : " time") : ""));
	addLine();
	//API.dbg("Printing barcode '" + barcode + "'");	//removed due to NVS-1671	
	BarCode128();
	for (var i=0;i<barcode.length;i+=2){
		var strVal = barcode[i].toString() + barcode[i+1].toString();
		var charVal = Number(strVal);
		if (charVal==0) {
		   // fodeu
		   outputBuffer.append("<@BarCode128_Char00>");
		} else {
			outputBuffer.append(String.fromCharCode(charVal));
		}
	}
	addLine();
	addLine();
	addFooter(rootConfig);
	addLine();
	addLine();

	return getResponse();
}

function reportOrderNumber(config, data) {

	var LIGHT  = 1;
	var ONLY   = 2;
	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
	}

	// Order information
	var showCanceledItems="false";
	var prnPickList = true;
	var custom 	 = rootConfig.CustomData[0];
	if(custom != null) {
		var fields = String(custom).split(":");
		if(fields.length>=1) {
			showCanceledItems = fields[0];
			if(fields.length>=2) {
				prnPickList = (fields[1] != "1");
			}
		}
	}
	startBold(); {
		// Adds the default receipt header from store-db
		addDefaultHeader();
		addLine(center("TEL# " + rootConfig.StorePhoneNumber + " Store# " + rootConfig.StoreId));
	} endBold();

	startBoldSize2();
	addLine();
	addLine();

	addLine("Your Order Number Is:");
	endBoldSize2();
	var view = rootView.View;
	var orderNum = view.@orderId;
	addLine();
	addLine("       " + "<@BigOn>" + orderNum + "<@BigOff>");
	return getResponse();

};

/**
 * PUBLIC
 * Format a NPAudit slip for the store manager.
 * Needed data types: CUSTOM, string in format <fileName>|<timestamp>|<businessDate>|<globalRepositoryPath> generated by GrabSupportInfo BC.
 * @author datique
 */
function reportNPAudit(config, data) 
{
	if(init(config, data, Array(), null) != 0) {
		return getResponse();
	}	

	var packageName = null;
	var yyyy = null;
	var mm = null;
	var dd = null;
	var HH = null;
	var MM = null;
	var SS = null;
	var businessDate = null;
	var globalRepoPath = null;
	
	var custom 	 = rootConfig.CustomData.toString();
	if(custom == null) {
		return getResponse();
	}
	//API.dbg(custom);
	
	if(custom != null) {	
	
		startBold(); {
			addLine(center("NPAudit Report"));
			addLine();
		} endBold();
		addLine();

		var fields = custom.split("|");
		if(fields.length>=1) {
			packageName = fields[0];
			if(fields.length>=2) {
				yyyy = (fields[1].substr(0, 4));
				mm = (fields[1].substr(4, 2));
				dd = (fields[1].substr(6, 2));
				HH = (fields[1].substr(8, 2));
				MM = (fields[1].substr(10, 2));
				SS = (fields[1].substr(12, 2));

				addLine(mm + "/" + dd + "/" + yyyy + " " + HH + ":" + MM + ":" + SS);
				addLine();

				if(fields.length>=3) {
					businessDate = fields[2];
					addLine("Business date: " + businessDate);
					addLine();
					
					if (fields.length>=4) {
						globalRepoPath = fields[3];
						addLine("Folder: " + globalRepoPath);
						addLine();
					}
				}
			}
		
			addLine("File: " + packageName);
		}
		
	}
	
	return getResponse();
}

/**
 * PUBLIC
 * Format a NPAuditFilter slip for the store manager.
 * Needed data types: CUSTOM, string in format <fileName>|<from timestamp>|<to timestamp> generated by PosNPAuditFilter BC.
 * @author datique
 */
function reportNPAuditFilter(config, data) 
{
	if(init(config, data, Array(), null) != 0) {
		return getResponse();
	}	

	var packageName = null;
	var yyyy = null;
	var mm = null;
	var dd = null;
	var HH = null;
	var MM = null;
	var SS = null;
	var businessDate = null;
	var globalRepoPath = null;
	
	var custom 	 = rootConfig.CustomData.toString();
	if(custom == null) {
		return getResponse();
	}
	//API.dbg(custom);
	
	if(custom != null) {	
	
		startBold(); {
			addLine(center("NPAudit Filter request was successful."));
			addLine();
		} endBold();
		addLine();

		var fields = custom.split("|");
		if(fields.length>=1) {
			packageName = fields[0];
			addLine("File: " + packageName);
			addLine();
			
			if(fields.length>=2) {
				yyyy = (fields[1].substr(0, 4));
				mm = (fields[1].substr(4, 2));
				dd = (fields[1].substr(6, 2));
				HH = (fields[1].substr(8, 2));
				MM = (fields[1].substr(10, 2));

				addLine("From: " + mm + "/" + dd + "/" + yyyy + " " + HH + ":" + MM);
				addLine();

				if(fields.length>=3) {
					yyyy = (fields[2].substr(0, 4));
					mm = (fields[2].substr(4, 2));
					dd = (fields[2].substr(6, 2));
					HH = (fields[2].substr(8, 2));
					MM = (fields[2].substr(10, 2));
	
					addLine("To: " + mm + "/" + dd + "/" + yyyy + " " + HH + ":" + MM);
					addLine();
						
				}
			}
		}
		
	}
	
	return getResponse();
}

/**
 * PUBLIC
 * Format a NGCOD Alive Status slip.
 * Needed data types: CUSTOM
 * @author fmorales
 * Modified for NVS-5745
 */
function reportNGCODAliveStatusSW(config, data) {
	if(init(config, data, Array(), null) != 0) {
		return getResponse();
	}	

	var custom = rootConfig.CustomData;
	if(custom == null) {
		return getResponse();
	}

    //report header
	initGlobalt();
	iAux = String(data[0]).indexOf("?>") + 2;    // remove <?xml version="1.0" encoding="UTF-8" ?>
	var newData = String(data[0]).slice(iAux);
	configString = new XML(config.toString());
	posStates = new XML(newData);

	var storeId			= Number(configString.StoreId);
	var posId = "N/A";
	if(configString.PosId[0] != null) {
		posId =  Number(configString.PosId[0].substring(3, 8));
	}
	var storeName		= configString.StoreName;
	var managerId		= Number(configString.Manager.@id);
	addLine(SEP_DL);
    if(posId==0) {
		addLine(center("STORE# " + storeId));
    }
    else {
		addLine(center("STORE# " + storeId + " POS# " + posId));
    }

	addLine(center(storeName));
	addLine();
	addLine(center("MANAGER: " + managerId));
	addLine();
	addLine("SUP-SIGN     MGR.SIGN    ASST/CREW-SIGN");
	addLine();
	addLine();
	addLine(SEP_DL);

/*
<NGCODAliveStatus>
	<POS id="" online="" timeOut="">
		<CodService id="" alive=""> 
			<NGCOD ipPort="" alive="" /> 
		</CodService> 
	</POS>
</NGCODAliveStatus>
*/
	startBold();
	{
		addLine(center(API.geti18nMsg(1, "MSG_NGCOD_COD_REPORT_TITLE",[])));
	} 
	endBold();
	addLine(center(API.geti18nMsg(1, "MSG_NGCOD_COD_REPORT_HLP_MSG_ROW1",[])));
	addLine(center(API.geti18nMsg(1, "MSG_NGCOD_COD_REPORT_HLP_MSG_ROW2",[])));
	addLine();
	var POSIncluded = "";
	var POSOffLine = "";
	var POSTimeOut = "";
	var POSWithoutCodService = "";
	var POSCodServiceNGCOD = "";
	var OnlineRegNodes = [];
	//display included and offline POS
	for each (POS in custom.CustomData.NGCODAliveStatus.POS) {
		var posId = POS.@id;
		var posOnline = POS.@online;
		var timeOut = POS.@timeOut;
		
		if (posOnline=="true"){
			POSIncluded += posId.substr(5) + " ";
			OnlineRegNodes.push(POS);
		}
		else {
			POSOffLine += posId.substr(5) + " ";
		}
	}
		
	addLine("POS included:");
	addLine(API.setOnRight(POSIncluded, COLS));
	addLine();
	addLine("POS off-line:");
	addLine(API.setOnRight(POSOffLine, COLS));
	addLine();
	//display detailed info form header
	addLine("POS   COD    SVC   COD IP/Port     COD");
	addLine("      SVC?   OK?                   OK?");
	
    for each (OnlinePOS in OnlineRegNodes) {
	//if a POS node have CodService value
		if (OnlinePOS.CodService.toSource()){
			for each (CodService in OnlinePOS){
				var Num=OnlinePOS.@id;
				var COD=CodService.@id;
				var SVC=CodService.@alive;
				var IPPort=CodService.NGCOD.@ipPort;
				var App=CodService.NGCOD.@alive;
				//text for COD
				if (COD==""){
					COD="N  ";
				}
				else {
					COD="Y  ";
				}
				//text for SVC
				if (SVC=="true"){
					SVC="Y  ";
				}
				else if (SVC=="false"){
					SVC="N  ";
				}
				else {
					SVC="N/A";
				}			
				//text for IPPort
				if (IPPort==""){
					IPPort="N/A          ";
				}
				else {
					IPPort=IPPort;
				}			
				//text for App
				if (App=="true"){
					App="Y";
				}
				else if (App=="false"){
					App="N";
				}
				else {
					App="N/A";
				}
				addLine(Num.substr(5) + "    " + COD + "    " + SVC + "   " + IPPort + "   " + App);			
			}
		}
	//if no CodService value, this node has no NGCOD config/service	
		else {
			addLine(OnlinePOS.@id.substr(5) + "    " + "N  " + "    " + "N/A" + "   " + "N/A        " + "     " + "N/A");		
		}
	}
	addLine();
	addLine(API.geti18nMsg(1, "MSG_NGCOD_COD_REPORT_LEGEND",[]));
	addLine(API.geti18nMsg(1, "MSG_NGCOD_COD_REPORT_LEGEND_POS",[]));
	addLine(API.geti18nMsg(1, "MSG_NGCOD_COD_REPORT_LEGEND_COD_SVC",[]));
	addLine(API.geti18nMsg(1, "MSG_NGCOD_COD_REPORT_LEGEND_SVC_OK",[]));
	addLine(API.geti18nMsg(1, "MSG_NGCOD_COD_REPORT_LEGEND_IP_PORT",[]));
	addLine(API.geti18nMsg(1, "MSG_NGCOD_COD_REPORT_LEGEND_COD_OK",[]));
	return getResponse();
}

/**
 * PUBLIC
 * Implements the MDS invoice
 * Needed data types: INVOICE
 * @author Renato Capello
 * @signature public java.lang.StringBuffer reportMDSInvoice(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function reportMDSInvoice(config, data) 
{
	init(config, data);

	var copyDescription = new Array();
	copyDescription[0] = "Restaurant's copy";
	copyDescription[1] = "Customer's copy";
	
	for(i = 0; i < 2; i++) {
		addLine(SEP_UL);
		startBold();
			// Adds the default receipt header from store-db
			addDefaultHeader();
			addLine(center("TEL# " + rootConfig.StorePhoneNumber + " Store# " + rootConfig.StoreId));
		endBold();

		addLine();

		var posId = "KS# " + toInt(rootConfig.PosId.substring(3, 5)); // Eg: POS01 -> KS#1
		var date = formatDateTimeAMPM(String(rootConfig.@creationDate));
		addLine(posId + API.setOnRight(date, COLS-posId.length));
		addLine();
		addLine(SEP_UL);
		addLine();
		addBoldLine(copyDescription[i]);
		addLine();
		addLine(SEP_UL);
		addLine();

		// Printing delivery data
		var mdsOrderNumber = "";
		var name = "";
		var phone = "";

		var rootInvoice = new XML(data[0]);
		if(null != rootInvoice) {
			if(null != rootInvoice.InvoiceData) { 
				if(null != rootInvoice.InvoiceData.OrderNumber) {
					mdsOrderNumber = rootInvoice.InvoiceData.OrderNumber.toString();
				}
				if(null != rootInvoice.InvoiceData.CustomerName) {
					name = rootInvoice.InvoiceData.CustomerName.toString();
				}
				if(null != rootInvoice.InvoiceData.CustomerPhoneNumber) {
					phone = rootInvoice.InvoiceData.CustomerPhoneNumber.toString();
				}
			}
		}
		addLine("Order Number: " + mdsOrderNumber);
		addLine("Customer name: " + name);
		addLine("Customer phone number: " + phone);

		// Printing order data
		addLine();
		addLine(SEP_UL);
		addLine();

		if((null != rootInvoice) && (null != rootInvoice.InvoiceData)) {
			var itemNumber = 0;
			for each (var item in rootInvoice.InvoiceData.OrderItem) {
				itemNumber++;
				addLine("*** item #" + itemNumber);
				if(item.ItemName != null) {
					addLine("ItemName=" + item.ItemName.toString());
				}
				if(item.Quantity != null) {
					addLine("Quantity=" + item.Quantity.toString());
				}
				if(item.UnitPrice != null) {
					addLine("UnitPrice=" + item.UnitPrice.toString());
				}
				if(item.Price != null) {
					addLine("Price=" + item.Price.toString());
				}
				if(item.GovTax != null) {
					addLine("GovTax=" + item.GovTax.toString());
				}
				if(item.ModifyOrder != null) {
					addLine("ModifyOrder=" + item.ModifyOrder.toString());
				}
				if(item.Total != null) {
					addLine("Total=" + item.Total.toString());
				}
				if(item.TotalHeader != null) {
					addLine("TotalHeader=" + item.TotalHeader.toString());
				}
			}
		}
		addLine(SEP_UL);
		addLine();addLine();addLine();addLine();addLine();addLine();
		cutPaper();
	}
	return getResponse();
}

/**
 * PUBLIC
 * Implements the MDS invoice (of a halted order)
 * Needed data types: INVOICE
 * @author Renato Capello
 * @signature public java.lang.StringBuffer reportMDSHaltedOrderInvoice(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function reportMDSHaltedOrderInvoice(config, data) 
{
	init(config, data);

	var copyDescription = new Array();
	copyDescription[0] = "Restaurant's copy";
	copyDescription[1] = "Customer's copy";
	
	for(i = 0; i < 2; i++) {
		addLine(SEP_UL);
		startBold();
			// Adds the default receipt header from store-db
			addDefaultHeader();
			addLine(center("TEL# " + rootConfig.StorePhoneNumber + " Store# " + rootConfig.StoreId));
		endBold();

		addLine();

		var posId = "KS# " + toInt(rootConfig.PosId.substring(3, 5)); // Eg: POS01 -> KS#1
		var date = formatDateTimeAMPM(String(rootConfig.@creationDate));
		addLine(posId + API.setOnRight(date, COLS-posId.length));
		addLine();
		addLine(SEP_UL);
		addLine();
		addBoldLine(copyDescription[i]);
		addLine();
		addLine(SEP_UL);
		addLine();

		// Printing delivery data
		var mdsOrderNumber = "";
		var name = "";
		var phone = "";

		var rootInvoice = new XML(data[0]);
		if(null != rootInvoice) {
			if(null != rootInvoice.InvoiceData) { 
				if(null != rootInvoice.InvoiceData.OrderNumber) {
					mdsOrderNumber = rootInvoice.InvoiceData.OrderNumber.toString();
				}
				if(null != rootInvoice.InvoiceData.CustomerName) {
					name = rootInvoice.InvoiceData.CustomerName.toString();
				}
				if(null != rootInvoice.InvoiceData.CustomerPhoneNumber) {
					phone = rootInvoice.InvoiceData.CustomerPhoneNumber.toString();
				}
			}
		}
		addLine("Order Number: " + mdsOrderNumber);
		addLine("Customer name: " + name);
		addLine("Customer phone number: " + phone);

		// Printing order data
		addLine();
		addLine(SEP_UL);
		addLine();

		if((null != rootInvoice) && (null != rootInvoice.InvoiceData)) {
			var itemNumber = 0;
			for each (var item in rootInvoice.InvoiceData.OrderItem) {
				itemNumber++;
				addLine("*** item #" + itemNumber);
				if(item.ItemName != null) {
					addLine("ItemName=" + item.ItemName.toString());
				}
				if(item.Quantity != null) {
					addLine("Quantity=" + item.Quantity.toString());
				}
				if(item.UnitPrice != null) {
					addLine("UnitPrice=" + item.UnitPrice.toString());
				}
				if(item.Price != null) {
					addLine("Price=" + item.Price.toString());
				}
				if(item.GovTax != null) {
					addLine("GovTax=" + item.GovTax.toString());
				}
				if(item.ModifyOrder != null) {
					addLine("ModifyOrder=" + item.ModifyOrder.toString());
				}
				if(item.Total != null) {
					addLine("Total=" + item.Total.toString());
				}
				if(item.TotalHeader != null) {
					addLine("TotalHeader=" + item.TotalHeader.toString());
				}
			}
		}
		addLine(SEP_UL);
		addLine();addLine();addLine();addLine();addLine();addLine();
		cutPaper();
	}
	return getResponse();
}

/**
 * PUBLIC
 * Responsible for formating the waste slip.
 * Needed data types: VIEW
 * @author Francisco
 */
function wasteSlip(config, data) {
	if(init(config, data, Array("VIEW"), "wasteSlip") != 0) {
		return getResponse();
	}	
	
	var nodeView = rootView.View;
	var creationDate = rootView.@creationDate;

	addDefaultHeader();
	addLine(SEP_UL);
	addBoldSize2Line(center("### WASTE SLIP ###"));
	addLine();
	var productionSide	= nodeView.@productionSide;
	var orderKey		= nodeView.@orderKey;
	if (productionSide != null && productionSide != "") {
		addBoldSize2Line(productionSide);
	}
	addLine("Date: " + formatDateTimeAMPM(String(creationDate)));
	addLine();

	var nodesItemView = nodeView.ItemView;
	var addedGrillItems = new Array();
	var removedGrillItems = new Array();
	
	for each (item in nodesItemView) {
		var grilledQuantity = item.grilledQuantity;
		if (grilledQuantity.length() == 0) {
			// first line - no grill
			printLine(item);
		
		} else { 
			if(Number(grilledQuantity) < 0) {
				removedGrillItems.push(item);
			}
			else {
				addedGrillItems.push(item);
			}
		}
	}
	
	// print added grill items first
	sortItemsByProductCode(addedGrillItems);
	for each(item in addedGrillItems){
		printLine(item);
	}
	
	// now print removed items
	sortItemsByProductCode(removedGrillItems);
	for each (item in removedGrillItems){
		printLine(item);
	}
	
	addLine();
    addLine(SEP_SL);
    addDefaultFooter();
	addLine();
	return getResponse();
	
	/** Sort items by product code */
	function sortItemsByProductCode(list){
		list.sort(compare);			
		
		/** Used in sort function */
		function compare(element0, element1){
			return (Number(element0.productCode) - Number(element1.productCode));
		}
    }

	/** Print corresponding line for the given item view */
	function printLine(nodeItemView){
			var line = generateLineItem(nodeItemView);
			if (line != "") {
				if (Number(nodeItemView.level) == 0) {
					addBoldSize2Line(line);
				} else {
					addBoldLine(line);
				}
			}
		}
	
	/**
	 * Get a line for this element.
	 * @param element The item.
	 * @return The line to be printed.
	 */
	function generateLineItem(element) {
		var productCode = element.productCode;
		var productName = element.description;
		var quantity	= Math.abs(Number(element.quantity));
		var level = Number(element, "level");
		if (quantity == 0 || element.ACDisplay.length() > 0)  {
			return "";
		}
		if (level == 0 && quantity == 0) {
	 	    quantity = element.grilledQuantity;
		    var line = "  " + quantity + " " + productName;
	 	} else if (level > 0) {
			var line = "      " + getGrillDescription(element, false, false);
	 	} else {
	    	var line = "  " + quantity + " " + productName;		
	 	}
		return line;
	}
}

/** checkIsMobileOrder
 *    
 * @brief - This function checks the New POS sale view to determine if this view actually corresponds to a paid mobile order or not.
 * @param - view - New POS sale view.
 * @returns - True if the view corresponds to a paid mobile order, otherwise false.
 * @since - MOT-223 - ORB - For paid orders, the printed pick-list (when bumped by mini-orb) must be as the receipt layout; 
 */
function checkIsMobileOrder(View)
{
	
	var result = false;	
	var orderSrc = View.@orderSrc.toString();
	if(orderSrc != null && orderSrc != "" && orderSrc != "0")		
	{
		//Mobile order
		result = true;
	}
	
	return result;
}


/**
 * @brief Constructor of ConsolidatedViewForReport class
 *
 * @param [in] view - View to consolidate in flat string format
 * @since 1.17-
 */
function ConsolidatedViewForReport (view) {
    this.view = new XML (view);		// Original view to be consolidated
}

/**
 * @brief Change Equivalent information
 *
 * @return
 * @since 1.17-
 */
ConsolidatedViewForReport.prototype.changeEquivalent = function () {
	var qtyViewItem=this.view.ItemView.length();
	var qtyEquivItem=this.view.EquivalentItemView.length();
	for(var j=0; j<qtyEquivItem; j++) {
		for(var i=0; i < qtyViewItem; i++) {
			if(this.view.ItemView[i].EquivalentCode.length() > 0) {
				if(this.view.EquivalentItemView[j].productCode.toString() == this.view.ItemView[i].EquivalentCode.toString()) {
					this.view.ItemView[i].productCode = this.view.EquivalentItemView[j].productCode;
					this.view.ItemView[i].description = this.view.EquivalentItemView[j].description;
					this.view.ItemView[i].longName = this.view.EquivalentItemView[j].longName;
					this.view.ItemView[i].dtName = this.view.EquivalentItemView[j].dtName;
					if(this.view.EquivalentItemView[j].displayOrder != 0) {
						if(this.view.EquivalentItemView[j].displayOrder < 0) {
							var a=this.view.ItemView[i].ProdIntId;
							if(a < 0) {
								a=this.view.ItemView[i].SaleLine;
							}
							this.view.ItemView[i].displayOrder=(this.view.EquivalentItemView[j].displayOrder+1)*-10000+a*10+((this.view.ItemView[i].isGrillLine || this.view.ItemView[i].ComponentsChange)?0:9);
						}
					}
					else {
						this.view.ItemView[i].displayOrder=-10000+this.view.ItemView[i].SaleLine*10+((this.view.ItemView[i].isGrillLine || this.view.ItemView[i].ComponentsChange)?0:9);
					}
				}
			}
		}
	}
}

/**
 * @brief Consolidates a view, returning its value in flat string format.
 *
 * @return The consolidated view.
 * @since 1.17-
 */
ConsolidatedViewForReport.prototype.consolidate = function () {
	// Change equivalent
	this.changeEquivalent();
    // Create array with sale items
    var newViewArray = this.detachChoice ();
    // Create the consolidated view
    var sortedView = this.createConsolidation (newViewArray);
	// Sort the Consolidated View
    this.sortView (sortedView);
    // Copies attributes from original view
    this.copyViewAttributes (sortedView);
	this.copyItemTenderView(sortedView);
	this.copyOffers (sortedView);
	this.copyPromotions(sortedView); // NPS-11867
	this.copyCustomer(sortedView); 
    return sortedView.toXMLString();
}

/**
 * @brief Copies attributes from internal view to a provided view.
 *
 * @param [in] view - View to add attributes to
 * @since 1.17-
 */
ConsolidatedViewForReport.prototype.copyViewAttributes = function (view) {
    for (var attr in this.view.@*) {
	view.@[this.view.@*[attr].name()] = this.view.@*[attr];
    }
}

/**
 * @brief
 *
 * @param
 * @since 1.17-
 */
ConsolidatedViewForReport.prototype.copyItemTenderView = function (view) {
	var qtyItemTenderView = this.view.ItemTenderView.length();
	for(var i=0;i<qtyItemTenderView;i++){
		view.ItemTenderView[i]="";
		view.ItemTenderView[i].kind = this.view.ItemTenderView[i].kind;
		view.ItemTenderView[i].description = this.view.ItemTenderView[i].description;
		view.ItemTenderView[i].code = this.view.ItemTenderView[i].code;
		view.ItemTenderView[i].qty = this.view.ItemTenderView[i].qty;
		view.ItemTenderView[i].value = this.view.ItemTenderView[i].value;
		view.ItemTenderView[i].fiscalIndex = this.view.ItemTenderView[i].fiscalIndex;
		view.ItemTenderView[i].taxOption = this.view.ItemTenderView[i].taxOption;
		view.ItemTenderView[i].cat = this.view.ItemTenderView[i].cat;
		view.ItemTenderView[i].fValue = this.view.ItemTenderView[i].fValue;
		view.ItemTenderView[i].pValue = this.view.ItemTenderView[i].pValue;
		view.ItemTenderView[i].srcPOSId = this.view.ItemTenderView[i].srcPOSId;
		view.ItemTenderView[i].subtotalOpt = this.view.ItemTenderView[i].subtotalOpt;
		if(this.view.ItemTenderView[i].drawer.length() > 0) {
			view.ItemTenderView[i].drawer = this.view.ItemTenderView[i].drawer;
		}
		view.ItemTenderView[i].skim = this.view.ItemTenderView[i].skim;
		view.ItemTenderView[i].srcTender = this.view.ItemTenderView[i].srcTender;
		var qtySourceTenders = this.view.ItemTenderView[i].SourceTenders.SourceTender.length();
		for(var j=0;j<qtySourceTenders;j++){
			view.ItemTenderView[i].SourceTenders.SourceTender[j]="";
			view.ItemTenderView[i].SourceTenders.SourceTender[j].@sourceCode = this.view.ItemTenderView[i].SourceTenders.SourceTender[j].@sourceCode;
			view.ItemTenderView[i].SourceTenders.SourceTender[j].@sourceValue = this.view.ItemTenderView[i].SourceTenders.SourceTender[j].@sourceValue;
		}
		for each (var item in this.view.ItemTenderView[i].SourceTenders.SourceTender) {
			// assuming that the first entry is always the last tender (push_back was used to store tender in the vector)
			view.ItemTenderView[i].SourceTender = ""+item.@sourceCode;
			break;
		}
		view.ItemTenderView[i].rounding = this.view.ItemTenderView[i].rounding;
		view.ItemTenderView[i].tenderRoundAdj = this.view.ItemTenderView[i].tenderRoundAdj;
	}
}

/**
 * @brief
 *
 * @param
 * @since 1.23 - NPS-8922
 */
ConsolidatedViewForReport.prototype.copyItemFeeView = function (view) {
	var qtyFee = this.view.Fee.length();
	for(var i=0; i<qtyFee; i++){
		view.Fee[i]					= "";
		view.Fee[i].@code 			= this.view.Fee[i].@code;
		view.Fee[i].@value 			= this.view.Fee[i].@value;
		view.Fee[i].@quantity 		= this.view.Fee[i].@quantity;
		view.Fee[i].@quantityPromo 	= this.view.Fee[i].@quantityPromo;
		view.Fee[i].@description 	= this.view.Fee[i].@description;
		var qtyFeeTaxChain = this.view.Fee[i].taxChain.length();
		if(qtyFeeTaxChain >= 1){
			for(var j=0; j<qtyFeeTaxChain; j++){
				view.Fee[i].taxChain[j]     = "";
				view.Fee[i].taxChain[j].@id = this.view.Fee[i].taxChain[j].@id;
				var qtyFeeTax = this.view.Fee[i].taxChain[j].tax.length();
				if(qtyFeeTax >= 1){
					for(var k=0; k<qtyFeeTax; k++){
						view.Fee[i].taxChain[j].tax[k] 						= "";
						view.Fee[i].taxChain[j].tax[k].@id 					= this.view.Fee[i].taxChain[j].tax[k].@id;
						view.Fee[i].taxChain[j].tax[k].@rate 				= this.view.Fee[i].taxChain[j].tax[k].@rate;
						view.Fee[i].taxChain[j].tax[k].@type				= this.view.Fee[i].taxChain[j].tax[k].@type;
						view.Fee[i].taxChain[j].tax[k].@baseAmt				= this.view.Fee[i].taxChain[j].tax[k].@baseAmt;
						view.Fee[i].taxChain[j].tax[k].@amount				= this.view.Fee[i].taxChain[j].tax[k].@amount;
						view.Fee[i].taxChain[j].tax[k].@calculationSequence	= this.view.Fee[i].taxChain[j].tax[k].@calculationSequence;
					}
				}
			}
		}
	}
}

/**
 * @brief
 *
 * @param
 * @since 1.23 - NPS-11606
 */
ConsolidatedViewForReport.prototype.copyOffers = function (view) {	
	var qtyOffers = this.view.Offers.length();
	for(var i=0; i<qtyOffers; i++){
		var offers = new XML("<Offers/>");
		offers.@tagId			= this.view.Offers[i].@tagId;
		offers.@discountType	= this.view.Offers[i].@discountType;
		offers.@discountAmount 	= this.view.Offers[i].@discountAmount;
		offers.@offerId		 	= this.view.Offers[i].@offerId;
		offers.@override		= this.view.Offers[i].@override;
		offers.@applied			= this.view.Offers[i].@applied;
		offers.@clearAfterOverride	= this.view.Offers[i].@clearAfterOverride;
		offers.@promotionId			= this.view.Offers[i].@promotionId;
		view.appendChild(offers);	
	}
}

/**
 * @brief
 *
 * @param
 * @since 1.23 - NPS-11867
 */
ConsolidatedViewForReport.prototype.copyPromotions = function (view) {	
	var hasPromotions = this.view.Promotions.length();
	if(hasPromotions > 0) {
		var qtyPromotion = this.view.Promotions.Promotion.length();
		var promotions = new XML("<Promotions/>");	
		promotions.@tenderId = this.view.Promotions.@tenderId;
		promotions.@amountBeforeTenderPromo = this.view.Promotions.@amountBeforeTenderPromo;
		for(var i=0; i<qtyPromotion; i++){
			var promotion = new XML("<Promotion/>");
		        promotion.@id	= this.view.Promotions.Promotion[i].@id; 
		        promotion.@counter	= this.view.Promotions.Promotion[i].@counter; 
		        promotion.@discountType = this.view.Promotions.Promotion[i].@discountType; 
		        promotion.@discountAmount	= this.view.Promotions.Promotion[i].@discountAmount; 
		        promotion.@offerId	= this.view.Promotions.Promotion[i].@offerId; 
		        // NPS-19043 
		        promotion.@promotionName	= this.view.Promotions.Promotion[i].@promotionName; 
		        promotion.@showIndividualPrices	= this.view.Promotions.Promotion[i].@showIndividualPrices;
				//NVS-5600
				promotion.@undoOnBft = this.view.Promotions.Promotion[i].@undoOnBft; 
				promotion.@promotionOnTender = this.view.Promotions.Promotion[i].@promotionOnTender; 
				promotion.@returnedValue = this.view.Promotions.Promotion[i].@returnedValue; 
				promotion.@discountLimit = this.view.Promotions.Promotion[i].@discountLimit; 
				promotion.@isSaleDiscount = this.view.Promotions.Promotion[i].@isSaleDiscount; 
				promotion.@countTowardsPromotionLimit = this.view.Promotions.Promotion[i].@countTowardsPromotionLimit; 
				promotion.@exclusive = this.view.Promotions.Promotion[i].@exclusive; 
			promotions.appendChild(promotion);	
		}
		view.appendChild(promotions);	
	}
}

/**
 * @brief
 *
 * @param
 * @since 1.23 - NPS-11606
 */
ConsolidatedViewForReport.prototype.copyCustomer = function (view) {	
	var qtyCustomer = this.view.Customer.length();
	for(var i=0; i<qtyCustomer; i++){
		var Customer = new XML("<Customer/>");
		Customer.@id 	 	= this.view.Customer[i].@id;
		Customer.@nickname	= this.view.Customer[i].@nickname;
		Customer.@greeting 	= this.view.Customer[i].@greeting;
		view.appendChild(Customer);	
	}
}

/**
 * @brief Detaches choices from a given view.
 *
 * @return Returns a view with choices put outside value meals.
 * @since 1.17-
 */
ConsolidatedViewForReport.prototype.detachChoice = function () {
	// Create array with sale items
	var itemChoice=new Array();
	var qtyPromoLevelZero=0;
	var qtyLevelZero=0;
	var qtyViewItem=this.view.ItemView.length();
	var newViewArray = new Array ();
	var isParentChoice=false;

	for(var i=0; i < qtyViewItem; i++) {
		var item=this.view.ItemView[i];
		lastItemCode=item.itemCode;
		if(Number(item.level) == 0) {
			qtyLevelZero=Number(item.quantity);
			qtyPromoLevelZero=Number(item.quantityPromo);
		}
		// Verify Choice
		if((Number(item.level) > 0) && (Number(item.prodAction) == 3)) {
			if(Number(item.productType) != 4) {
				// This is Choice
				var levelChoice=Number(item.level);
				item.level=0;
				item.levelChoice = levelChoice;
				itemChoice.push({item:XML(item)});
				for(var j=i+1; j < qtyViewItem; j++) {
					var itemChoiceB=this.view.ItemView[j];
					if(itemChoiceB.level > levelChoice) {
						itemChoiceB.isChoiceChild = true;
						itemChoiceB.level-=levelChoice;
						itemChoiceB.quantity*=item.quantity;
					}
					else {
						break;
					}
				}
				// calculate qty after child
				item.quantityPromo=qtyPromoLevelZero*item.quantity;
				item.quantity*=qtyLevelZero;
				isParentChoice=true;
			}
		}
		else if (item.isChoiceChild == true && isParentChoice == true) {
			// This item belongs to the Choice
			delete item.isChoiceChild;
			itemChoice.push({item:XML(item)});
		}
		else {
			// This is not Choice
			newViewArray.push({item:XML(item)});
			isParentChoice=false;
		}
	}
    // Put choice items at array's end
    for(var i=0; i < itemChoice.length; i++) {
		var iInd=newViewArray.length;
		newViewArray.push({item:XML(itemChoice[i].item)});
    }
    return newViewArray;
}

/**
 * @brief Create a consolidated view.
 *
 * @param [in] viewArray - Array representing a view
 * @since 1.17-
 */
ConsolidatedViewForReport.prototype.createConsolidation = function (viewArray) {
	//Recreate Original XML
	var auxXML=new XML("<View/>");
	var szViewArray=new Array();
	var szAux="";
	var i=0;
	// Create  line array with the same iItemCode
	while(i < viewArray.length) {
		var itemHasDiscount = false;
		var ItemView=viewArray[i].item;
		var iItemCode = ItemView.itemCode.toString();
		szAux =szAux + ItemView.productCode + ItemView.grilledQuantity;
		if(ItemView.discounts != undefined && ItemView.discounts != null){
			itemHasDiscount = true;
		}
		if(ItemView.PromotionApplied != undefined && ItemView.PromotionApplied != null){		// NVS-4280
			itemHasDiscount = true;
		}
		var count=1;
		for(var j=i+1; j < viewArray.length; j++) {
			var nextItemView=viewArray[j].item;
			if((iItemCode!=nextItemView.itemCode) || (nextItemView.level==0)){
				break;
			}
			count++;
			szAux=szAux + nextItemView.productCode + nextItemView.grilledQuantity;
			if(nextItemView.discounts != undefined && nextItemView.discounts != null){
				itemHasDiscount = true;
			}
			if(nextItemView.PromotionApplied != undefined && nextItemView.PromotionApplied != null){		// NVS-4280
				itemHasDiscount = true;
			}
		}
		for(var k=0;k<count;k++) {
			szViewArray.push({id:String(i), item:String(szAux), hasDiscount:itemHasDiscount});
		}
		szAux="";
		i=j;
	}
	var bItemChecked = new Array(szViewArray.length);

	var iInd = -1;
	var count_iInd = 1;
	for(var i = 0; i < szViewArray.length; i++) {
		var ItemArray = szViewArray[i].item;
		var itemHasDiscount = szViewArray[i].hasDiscount;

		if(bItemChecked[i] == "true"){
			continue;
		}else{
			bItemChecked[i] = "true";
			var ItemXML=XML(viewArray[i].item);
			auxXML.ItemView+=ItemXML;
			iInd += count_iInd;
			count_iInd = 1;
			var a=i+1;
			while((a < szViewArray.length) && (ItemXML.itemCode==viewArray[a].item.itemCode) && (Number(viewArray[a].item.level) != 0) && (bItemChecked[a] != "true")){
				var ItemXML2=XML(viewArray[a].item);
				auxXML.ItemView+=ItemXML2;
				bItemChecked[a] = "true";
				count_iInd++;
				a++;
			}
			if(ItemXML.PromotionApplied != undefined) {
				continue;	
			}
		}

		for(var j = i+1; j < szViewArray.length; j++) {

			if((ItemArray == szViewArray[j].item) && (bItemChecked[j] != "true") && !(itemHasDiscount || szViewArray[j].hasDiscount)) {
				bItemChecked[j] = "true";
				// Item already used in table
				szViewArray[j].item = -j;

				var ItemXML=XML(viewArray[j].item);
				if(ItemXML.PromotionApplied != undefined) {
					continue;	
				}				

				if(ItemXML.level == 0) {
					auxXML.ItemView[iInd].quantity = Number (auxXML.ItemView[iInd].quantity)
					+ Number (ItemXML.quantity);

					auxXML.ItemView[iInd].quantityPromo = Number (auxXML.ItemView[iInd].quantityPromo)
					+ Number (ItemXML.quantityPromo);

					auxXML.ItemView[iInd].quantityItemPromo = Number (auxXML.ItemView[iInd].quantityItemPromo)
					+ Number (ItemXML.quantityItemPromo);

					var sizePromoDest=auxXML.ItemView[iInd].promo.length();
					for(var a=0;a<sizePromoDest;a++) {
						var id = auxXML.ItemView[iInd].promo[a].id;
						var sizePromoOrig = auxXML.ItemView[iInd].promo.length();
						for(var b=0;b<sizePromoOrig;b++){
							if(id = auxXML.ItemView[iInd].promo[b].id) {
								auxXML.ItemView[iInd].promo[a] = Number(auxXML.ItemView[iInd].promo[a]) + Number(auxXML.ItemView[iInd].promo[b]);
							}
						}
					}

					var value1 = new BigDecimal(auxXML.ItemView[iInd].unitPrice);
					var value2 = new BigDecimal(ItemXML.unitPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].unitPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].netUnitPrice);
					var value2 = new BigDecimal(ItemXML.netUnitPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].netUnitPrice = value1.toString();;

					var value1 = new BigDecimal(auxXML.ItemView[iInd].unitTax);
					var value2 = new BigDecimal(ItemXML.unitTax);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].unitTax = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].totalPrice);
					var value2 = new BigDecimal(ItemXML.totalPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].totalPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].netTotalPrice);
					var value2 = new BigDecimal(ItemXML.netTotalPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].netTotalPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].totalTax);
					var value2 = new BigDecimal(ItemXML.totalTax);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].totalTax = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].ADTotalPrice);
					var value2 = new BigDecimal(ItemXML.ADTotalPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].ADTotalPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].ADNetTotalPrice);
					var value2 = new BigDecimal(ItemXML.ADNetTotalPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].ADNetTotalPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].ADTotalTax);
					var value2 = new BigDecimal(ItemXML.ADTotalTax);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].ADTotalTax = value1.toString();
				}
			}
		}
	}
	return auxXML;
}

/**
 * @brief Sorts a consolidated view
 *
 * @param [in, out] newViewCons - Consolidated view to sort, as a XML object
 * @since 1.17-
 */
ConsolidatedViewForReport.prototype.sortView = function (newViewCons) {
    var flagdisplayOrder=false;
    var displayOrderArray = new Array();
    var compfunc = function (a, b) {
	return (Number(a.id) - Number(b.id));
    };
    for each (var item in newViewCons.ItemView) {
	if (Number(item.level) == 0) {
	    displayOrderArray.push({id:Number(item.displayOrder)});
	}
    }
    // Sort displayOrder Array
    displayOrderArray.sort (compfunc)
    //Seach duplicate displayOrder
    for(var i=1; i < displayOrderArray.length; i++) {
	if(displayOrderArray[i-1].id == displayOrderArray[i].id){
	    // There is duplicate displayOrder
	    flagdisplayOrder=true;
	    break;
	}
    }

    // Create array with sale items
    var newViewArray = new Array();
    var key = "000000000";
    var displayOrder = "000000000";
    var productCode = "";
    for each (var item in newViewCons.ItemView) {
	if (Number(item.level) == 0) {
	    key = API.formatNumber(Number(item.displayOrder), "000000000", 9)
	}
	displayOrder = API.formatNumber(Number(item.displayOrder), "000000000", 9)
	if (flagdisplayOrder==true) {
	    productCode = API.formatNumber(Number(item.productCode), "00000", 5)
	}
	// Create key to sort
	var aux = String(key) + Number(item.level) + String(displayOrder)+ String(productCode);
	newViewArray.push({id:String(aux), item:String(item)});
    }
    // Sort array with sale items
    newViewArray.sort (compfunc);

    var sortViewCons = new XML("<View/>");
    for(var i = 0; i < newViewArray.length; i++) {
	var ItemView = new XML(newViewArray[i].item);
	sortViewCons.ItemView+=ItemView;
    }

    newViewCons = sortViewCons;
}

function removeContainerFromView(orderView) {
	var containerItemCode = -1;
	var viewSize = orderView.ItemView.length();
	var i = 0;
	
	var newViewArray = new Array ();
    //NVS-6353 13-JAN-2016 John Brancaleon.		
 	while(i < viewSize) {
		var item=orderView.ItemView[i];
/*		if((item.level == 0) && (item.isContainerVM != null) && (item.isContainerVM == "true")) {
			containerItemCode = item.itemCode;
			delete(orderView.ItemView[i]);
			viewSize--;
			continue;
		}
		
		if((containerItemCode > -1) && (containerItemCode == item.itemCode) && (item.level > 0)){
			orderView.ItemView[i].level = Number(orderView.ItemView[i].level) - 1;
		}
		
		if((containerItemCode != item.itemCode) && (item.level == 0)) {
			containerItemCode = -1;
		}

		// NPS-8922 - Start
		var nextEl = item.parent().children()[ item.childIndex() + 1 ];
		if(nextEl != undefined) {
			if(nextEl.name() == "Deposit") {
				item.Deposit = nextEl;
			}
		}
		// NPS-8922 - End
*/			
		newViewArray.push({item:XML(item)});		
		i++;
	}
 
	var cnView = new ConsolidatedViewForReport (orderView);
	var sortedView = cnView.createConsolidation (newViewArray);
	cnView.copyViewAttributes (sortedView);
	cnView.copyItemTenderView(sortedView);
	cnView.copyItemFeeView(sortedView); // NPS-8922
	cnView.copyOffers(sortedView); 
	cnView.copyPromotions(sortedView); // NPS-11867
	cnView.copyCustomer(sortedView); 
	return sortedView;
}

/**
 * PUBLIC
 * Responsible for formating the SSP report
 * Needed data types: SOS
 * @author Celso Fernandes
 */
function reportSosCsv(config, data) 
{
	var storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"SSPReport\").Parameter.(@name==\"filePath\").@value";
	var filePath = getConfigValue(storedbPath , "") + "";
	if (filePath === "") {
		API.SLog("LOGLEVL_WARNING", "[reportSosCsv] parameter 'filePath' is empty or not present");
		return null;
	}
	storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"SSPReport\").Parameter.(@name==\"storeAreasNames\").@value";
	var type = getConfigValue(storedbPath , "");
	var requiredData = type.split("|");
	var totalTC = 0;
	var xmlData = new Array();
	API.SLog("LOGLEVL_WARNING", "[reportSosCsv] data length:" + data.length);
	for each (text in data) {
		API.SLog("LOGLEVL_WARNING", "[reportSosCsv] data:" + text);
		if (text == null) {
			continue;
		}
		var item = new XML(text);
		xmlData.push(item);
		for each (segment in item.StoreTotals.ServiceTime) {
			totalTC += Number(segment.@tc.toString());
		}
	}
	API.SLog("LOGLEVL_WARNING", "[reportSosCsv] starting");
	try {
		var content = new StringBuffer();	
		for each (element in requiredData) {
			var xml = search(xmlData, element);
			API.SLog("LOGLEVL_WARNING", "[reportSosCsv]" + element + ":\n" + xml + "\n");
			if (xml == null) {
				API.SLog("LOGLEVL_WARNING", "[reportSosCsv]" + element + " empty");
				content.append("-1;-1;"+ element + ";;;;;;;;;;;;\n");
				continue;
			}
			var dayPartition = xml.DayPartitioning;
			var empty = true;
			for each (segment in xml.StoreTotals.ServiceTime) {
				if (empty) {
					empty = false;
				}
				var dayPart = dayPartition.Segment.(@id == segment.@segmentId);
				var line = new StringBuffer();
				var tc = Number(segment.@tc.toString());
				var itemsCount = Number(segment.@itemsCount.toString());
				var csoTC = 0;
				var hotTC = 0;
				for each (source in segment..Source) {
					if (source.@type == "CSO") {
						csoTC += Number(source.@tc);
					} else if (source.@type == "HOT") {
						hotTC += Number(source.@tc);
					}
				}
				line.append(dayPart.@begTime.toString());
				line.append(";");
				line.append(dayPart.@endTime.toString())
				line.append(";");
				line.append(xml.@requestServicesList.toString());
				line.append(";");
				line.append(tc.toString())
				line.append(";");
				line.append(itemsCount.toString())
				line.append(";");
				line.append(((tc / totalTC) * 100).toFixed(2));
				line.append(";");
				line.append((itemsCount / tc).toFixed(2));
				line.append(";");
				line.append(csoTC === 0 ? "" : csoTC.toString());
				line.append(";");
				line.append(hotTC === 0 ? "" : hotTC.toString());
				line.append(";");
				var red = segment.Counters.Counter.(@name == "RED");
				line.append(red.@tc.toString());
				line.append(";");
				var white = segment.Counters.Counter.(@name == "WHITE");
				line.append(white.@tc.toString());
				line.append(";");
				var drinks = segment.Counters.Counter.(@name == "DRINKS");
				line.append(drinks.@tc.toString());
				line.append(";");
				var complexDrinks = segment.Counters.Counter.(@name == "CPLXDRK");
				line.append(complexDrinks.@tc.toString());
				line.append(";");
				var simpleDrinks = segment.Counters.Counter.(@name == "SMPLDRK");
				line.append(simpleDrinks.@tc.toString());
				line.append(";");
				var potato = segment.Counters.Counter.(@name == "POTATO");
				line.append(potato.@tc.toString());
				line.append("\n");
				API.SLog("LOGLEVL_WARNING", "[reportSosCsv]" + line.toString());
				content.append(line.toString());
			}
			if (empty) {
				API.SLog("LOGLEVL_WARNING", "[reportSosCsv]" + element + " empty");
				content.append("-1;-1;"+ element + ";;;;;;;;;;;;\n");
			}
		}
		var file = new File(filePath);
		file.open("w");
		file.write(content.toString());
		file.close();
	} catch (error) {
		API.SLog("LOGLEVL_WARNING", "[reportSosCsv] Error opening file '" + filePath + "'. " + error);
	}
	API.SLog("LOGLEVL_WARNING", "[reportSosCsv] finished");
	return null;
	function search(array, key) {
		for each (item in array) {
			API.SLog("LOGLEVL_WARNING", "[reportSosCsv] searching for " + key + ". xml:\n" + item);
			if (item.@requestServicesList == key) {
				return item;
			}
		}
		return null;
	}
};

/**
 * PUBLIC
 * Responsible for printing the barcode when serving the order at KVS.
 * This barcode is intended to be read by Mini ORB to bump the order as delivered.
 * Needed data types: VIEW
 * @author Renato Capello
 */
function kvsReceipt(config, data) {
  if (init(config, data, Array("VIEW"), "RECPT") != 0) {
    return getResponse();
  }

  // Order information
  var view = rootView.View;

  addLine(" ");
  //NVS-3607
  //NVS-3441
  var isFromKiosk = (Number(view.@pod) == PODCSO);

	//NVS-4243
	if (toInt(view.@tenderPOS.substring(3,7)) != toInt(view.@orderKey.substring(3, 7))){
		isRcpHHOT = true; 
	}
	var useRecallerId = isFromKiosk || isRcpHHOT;	 

  var majorMinor = fnMountOrderIdEx(String(view.@orderId),String(view.@orderKey),String(view.@major),String(view.@minor),String(view.@tenderPOS),false,useRecallerId,false);
  addLine("Order " + majorMinor);
  addLine("<@BarcodeOn>" + majorMinor + "<@BarcodeOff>");
  return getResponse();
}


/**
 *
 * @brief Function to format the offer details report.
 * The offer details report will be shown in the Print Privew screen and can be printed and saved.
 *
 */
function offersDetailsReport(config, data) {
	initGlobalt();
	rootConfig = new XML(config);
	
	var xmlCustom = rootConfig.CustomData[0];
	if (xmlCustom == null) {
		return getResponse();
	}
	var titleLabel = API.geti18nMsg(5,"RES_OFFERS_DETAIL");
	addLine(center(titleLabel));
	
	addLine("");
		
	var offerNameLabel = API.geti18nMsg(5,"RES_OFFERS_NAME");
	startBold();
	addLine(center(offerNameLabel));
	endBold();
	var offerName = "";
	var shortDescription = "";
	var longDescription = "";
	if (rootStoreDB == null) {	
		rootStoreDB = new XML(API.getStoredb());
	}
	// NVS-1915 : Check for offers info using "<language>", "<language>-<countryId>", "<language>_<countryId>"
	var language = rootStoreDB.StoreDB.StoreProfile.Localization.Language;	
	var countryId = rootStoreDB.StoreDB.StoreProfile.Localization.CountryId;	
	var offersLanguage = xmlCustom.Promotion.Languages.Language.(@code == language);
	if(offersLanguage == undefined) offersLanguage = xmlCustom.Promotion.Languages.Language.(@code == language + "-" + countryId);
	if(offersLanguage == undefined) offersLanguage = xmlCustom.Promotion.Languages.Language.(@code == language + "_" + countryId);
	if(offersLanguage == undefined) {
		offerName = xmlCustom.Promotion.name.toString();
		shortDescription = xmlCustom.Promotion.ShortDescription.toString();	
		longDescription = xmlCustom.Promotion.LongDescription.toString();
	}
	else {
		offerName = offersLanguage.Name.toString();
		shortDescription = offersLanguage.ShortDescription.toString();
		longDescription = offersLanguage.LongDescription.toString();
	}
	offerName = offerName.replace("\n", " ");
	addText(offerName, COLS);
	addLine("");
	
	var shortDescriptionLabel = API.geti18nMsg(5,"RES_OFFERS_SHORT_DESCRIPTION");
	startBold();
	addLine(center(shortDescriptionLabel));
	endBold();
	addText(shortDescription, COLS);
	addLine("");
	
	var longDescriptionLabel = API.geti18nMsg(5,"RES_OFFERS_LONG_DESCRIPTION");
	startBold();
	addLine(center(longDescriptionLabel));
	endBold();
	addText(longDescription, COLS);
	addLine("");
		
	return getResponse();
}

/** addText
 *
 * @brief Helper function to format a text to fit in the line length (columns).
 * @param Text - string - the text to be formatted
 * @param lineLength - int - number of columns 
 */
function addText(text, lineLength) {
	if(lineLength == null || lineLength == undefined) {
		lineLength = COLS;
	}
	var words = text.split(" ");
	while(words.length > 0) {
		var count = 0;
		var	currentLineLength = 0;
		for each(word in words) {
			currentLineLength += word.length;
			if(currentLineLength >= lineLength){
				break;
			}
			currentLineLength++;
			count++;
		}
		for(i=0;i<count;i++) {
			if(words.length > 0) {
				outputBuffer.append(words.shift() + " ");
			}
		}
		outputBuffer.append("\n");
	}
}

/**
 * PUBLIC
 * Implements the Kiosk Barcode promotion receipt
 * Needed data types: NONE
 * Custom parameter format: <product name 1|product name 2|...>@<product price>@<utilization amount>@<promotion start date|promotion end date>@<barcode number>
 * @author Paulo Florencio
  */
function reportKioskBarcodePromotionReceipt(config, data) {

	if(init(config, data, Array(), null) != 0){
		return getResponse();
	}
	
	var custom = rootConfig.CustomData.toString();
	if(custom == null) {
		return getResponse();
	}
	
	//API.dbg("-----custom: " + custom);
	
	custom = custom.split("@");
	
	if (custom.length < 5) {
		return getResponse();
	}
	
	var productsNames = custom[0].split("|");
	var price = custom[1];
	var utilizationAmount = custom[2];
	var promotionValidPeriod = custom[3].split("|");
	var barcode = custom[4];

	if (!productsNames || !price || !utilizationAmount || !promotionValidPeriod || !barcode) {
		return getResponse();
	}

	addLine();
	addHeader(rootConfig,"GRATUIT",RPTDUMMY);
	addLine();
	addLine("Pour votre prochain passage");
	for each (var productName in productsNames){
		addLine(productName);
	}
	addLine(price);
	addLine();
	addLine("pour toute commande superieure a: " + utilizationAmount);
	addLine("Valable a: " + rootConfig.StoreName.toString());
	addLine("uniquement sur les bornes");
	addLine("Du: " + promotionValidPeriod[0]);
	addLine("Au: " + promotionValidPeriod[1]);
	addLine("Offre non cumulable");
	addLine("Veuillez scanner le code barre ci-dessous");
	//API.dbg("Printing barcode '" + barcode + "'");
	BarCode128();
	outputBuffer.append(barcode);
	addLine();
	addLine();
	addFooter(rootConfig);
	addLine();
	addLine();

	//API.dbg("-----Barcode promotion receipt: " + outputBuffer);
	
	return getResponse();
}

/**
 * @brief - Prints an item without its price.
 * @author - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 */
Sale.prototype.printItemLineWithoutPrice = function (item, qtyLevelZero) {

	var ident     = "";
	var level     = toInt(item.level);
	var itemClass = item.productType.length();
	if (itemClass != 0 && item.productType == 4) {
		return;
	}
	for(var i=0; i<level; i++) {
		ident += "  ";
	}
	if (item.level == 0) {
		qtyLevelZero = 1;
	}
	var aux   = item.quantity  * qtyLevelZero;
	var qty   = API.setOnRight(aux, 3);
	var name  = item.longName;

	var lineText = null;

	if (item.choiceLevel > 0) {
		ident = ident + "  ";
	}

	var line = null;
	if (sgpEnabled == "true" && sgpHideAddGrill == "true") {
		if (item.isCYT == "true") {
			hideAddGrillModifier = true;
			var lastItemCode = item.itemCode;
		} else {
			if (item.isGrillLine == "false") {
				hideAddGrillModifier = false
			}
		}
	}
	if(item.isGrillLine == "true") {
		// Lindomar Araujo: 2014/08/28 - SQC-6001 - Sending the new parameter(hideAddGrillModifier) to the function getGrillDescription
		//line = "    " + ident + getGrillDescription(item, true, false, hideAddGrillModifier);
		if(item.displayNumbersInsteadofModifiers == "true" || item.displayNumbersInsteadofModifiers == true){
			//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
			line = "  " + ident + getGrillDescriptionForMcCafeItems(this.data, true, false, hideAddGrillModifier);
		}
		else{
			//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
			//NVS-7292 This fix is a workaround when "this.data" is null. (!this.data?item:this.data)
			line = "  " + ident + getGrillDescription(!this.data?item:this.data, true, false, hideAddGrillModifier);
		}		
	} else {
		line = ident + qty + " " + name;
	}

	//line = API.setOnLeft(line, COLS-price.length) + price;

	this.printer.print (line);

	if (null != lineText) {
		var size = 30 - lineText.length;
		this.printer.print (this.formatting.createPadding (size) + lineText);
	}
}

/**
 * @brief Prints the sale representation of all the items without the price
 * @author - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 */
Sale.prototype.printAllWithoutPrice = function () {
	
	for (var it = this.iterator (); ! it.atEnd (); it.next ()) {
		var item = it.get ();
		this.printItemLineWithoutPrice (item.product, item.levelZeroQty);
	}
}

/**
 * @brief Prints the sale representation without the price
 * OBS: This function does not print the mac cafe items
 * @author - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 */
Sale.prototype.printWithoutPrice = function () {
	
	for (var it = this.iterator (); ! it.atEnd (); it.next ()) {
		var item = it.get ();
		
		// Print only the normal items
		if (!item.isMcCafe) {
			this.printItemLineWithoutPrice (item.product, item.levelZeroQty);
		}
	}
}

/**
 * @brief Prints only the mc cafe items representation without the price
 * OBS: This function does not print the normal sale items.
 * @author - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 */
Sale.prototype.printMcCafeWithoutPrice = function () {
	
	for (var it = this.iterator (); ! it.atEnd (); it.next ()) {
		var item = it.get ();
		
		// Print only the MacCafe items
		if (item.isMcCafe) {
			this.printItemLineWithoutPrice (item.product, item.levelZeroQty);
		}
	}
}

/**
 * PUBLIC
 * Implements the customer receipt
 * Needed data types: orderId
 * @author Celso
 * @signature public java.lang.StringBuffer reportCashInDrawer(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function orderIdBigger(orderId) 
{
	outputBuffer.append("<@BigCharOn>");
	addLine(API.center(rtrim(orderId), 6));  //NVS-3119 JP
	outputBuffer.append("<@BigCharOff>");
}

/**
 * @brief - Prints a pick list with the items the user ordered, so that he can pay it at the front counter.
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 * @author - Felipe Armoni
 */
function reportCSOPickList(config, data) {
	
	var showAsSinglePrice = false;
	var LIGHT  = 1;
    var ONLY   = 2;
	
	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
		
	} else {
		// Part of feature PLE-194 : Auto condiment - By KFG
		lConsolidateACItems("receipt");
	}
		
	var view = rootView.View;
	var title = PosCSOI18nGetMessageJS("CSO_MSG_REROUTE_PICK_LIST_TICKET");	
	
	addLine();
	
	// SDO-4631 - KIOSK V4 - When the production is offline an incorrect message on picklist is displayed on the instead of "Production Offline"
	if ((sessionSale.get("STORE_FAILED") != "true") && (view.@orderId != "-1/-1")) {
		orderIdBigger(view.@orderId.toString());
	
	}
	// WWR-3972 - Change to show the order number when there is partial payment on issue - Felipe Ramas - GSS-190
	else if ((sessionSale.get("NGK_ORDER_REROUTE")) || sessionSale.get("PAY_AT_COUNTER")){
			orderIdBigger(view.@orderId.toString());
	}	else {
		addLine(center(PosCSOI18nGetMessageJS("CSO_MSG_REROUTE_STORE_FAILED")));
	}
		
	// Add a message to inform customer
	startBoldSize2();
	addLine();
	addLine(title);
	endBoldSize2();

	addLine();

	/* Added following for NPS-5064.  RPS 11-19-2008 */
    if (view.@vmChildrenMultiplied == "true") {
    	// 	KVS view comes with quantities already multiplied
    	divideItemQuantities(view);
    }
    
	//var posId = "CI# " + toInt(rootConfig.PosId.substring(3, 7)); // Eg: POS0001:89 - > CI#1
	var date = formatDateTimeAMPMFromView(view);
	
	addLine(API.setOnRight(date,COLS));
	//addLine(posId + API.setOnRight(API.formatDateTime(date, RECEIPT_DATE_FORMAT),COLS));
	
    addLine();
    
    // Print individual items from the pick list.
    addLine("QTY ITEM");
	    
    addLine();
    recieptView = new OrderView(view);
	recieptView.SetPickList(true);	
	recieptView.PrintSaleItemsForPickList();
   
    addLine();
    addLine(SEP_UL);
    
    return getResponse();	
}



function EMVDeclineReceipt(config, data) {
	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
	}
    var view		= rootView.View;
	var customInfo	= view.CustomInfo;
	var haveDeclineInfo = true;
	var pedResponse;
	try {
		var pedResponse = new XML(customInfo);
	} catch (e) {
		haveDeclineInfo = false;
	}

    startBold(); 
	{
		// Adds the default receipt header from store-db
		//NVS-8015 Tishin Thomas
		if (offerCustomerName != undefined && offerCustomerName != null && offerCustomerName != "")
		{
			addDefaultHeader(false);
			addLine(center("!!! THANK YOU " + offerCustomerName.substring(0, 21) + "!!!"));
		}
		else
		{
			addDefaultHeader();
		}
		addLine(center("TEL# " + rootConfig.StorePhoneNumber + " Store# " + rootConfig.StoreId));

	} endBold();
	var posId;
	if (checkIsMobileOrder(view) == false) {
		posId = "KS# " + toInt(view.@tenderPOS.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	} else {
		posId = "KS# " + toInt(view.@orderKey.substring(3, 7)); // Eg: POS0001:89 - > KS#1
	}

	var date = formatDateTimeAMPMFromView(view);
	addLine(posId + API.setOnRight(date, COLS-posId.length));

	// If the decline info was present and valid, we'll add it here
	// otherwise we'll print a note saying we didn't get the info
	if (haveDeclineInfo == true) {
	} else {
		addLine("Decline information not available");
	}
	
	addLine("MER# " + pedResponse.MERCHID);
	addLine("CARD ISSUER          ACCOUNT#");

	var providername = pedResponse.PAYMENT_MEDIA;
	var cardnum = pedResponse.ACCT_NUM;
	var cardType = pedResponse.PAYMENT_TYPE;
	if(cardType == "GC" || cardType == "GIFT") {
		providername="Gift Card";
	} else if(cardType == "DB" || cardType == "DEBIT") {
		providername="Debit";
	} else {
		if (providername == "MASTERCARD" || providername == "MC") {
			providername = "Master";
		} else if (providername == "AMEX") {
			providername = "Amex";
		} else if (providername == "DISCOVER" || providername == "DISC") {
			providername = "Dscvr";
		} else if (providername == "VISA") {
			providername = "Visa";
		}
	}
	var providerSale = providername + " SALE";
	addLine(API.setOnLeft(providerSale, 14) + " " + cardnum)
	addLine(pedResponse.EMV_CHIP_INDICATOR);
	var totalAmount = "US$ " + view.@totalDue;
	addLine("Total" + API.setOnRight(totalAmount, COLS - 5));
	addLine();
	startBold();
	addLine(center("DECLINED"));
	endBold();
	addLine("Mode: " + pedResponse.EMV_MODE);
	addLine("AID: " + pedResponse.EMV_TAG_4F);
	addLine("TVR: " + pedResponse.EMV_TAG_95);
	addLine("IAD: " + pedResponse.EMV_TAG_9F10);
	addLine("TSI: " + pedResponse.EMV_TAG_98);
	addLine("ARC: " + pedResponse.EMV_TAG_8A);
	startBold();
	addLine(center("EMV Offline Data"));
	endBold();
	addLine("TAG 50: " + pedResponse.EMV_TAG_50);
	addLine("TAG 5F2A: " + pedResponse.EMV_TAG_5F2A);
	addLine("TAG 5F34: " + pedResponse.EMV_TAG_5F34);
	addLine("TAG 82:  " + pedResponse.EMV_TAG_82);
	addLine("TAG 95:  " + pedResponse.EMV_TAG_95);
	addLine("TAG 9A: " + pedResponse.EMV_TAG_9A);
	addLine("TAG 9C: " + pedResponse.EMV_TAG_9C);
	addLine("TAG 9F02: " + pedResponse.EMV_TAG_9F02);
	addLine("TAG 9F03: " + pedResponse.EMV_TAG_9F03);
	addLine("TAG 9F07: " + pedResponse.EMV_TAG_9F07);
	addLine("TAG 9F0D: " + pedResponse.EMV_TAG_9F0D);
	addLine("TAG 9F0E: " + pedResponse.EMV_TAG_9F0E);
	addLine("TAG 9F10: " + pedResponse.EMV_TAG_9F10);
	addLine("TAG 9F12: " + pedResponse.EMV_TAG_9F12);
	addLine("TAG 9F1A: " + pedResponse.EMV_TAG_9F1A);
	addLine("TAG 9F26: " + pedResponse.EMV_TAG_9F26);
	addLine("TAG 9F27: " + pedResponse.EMV_TAG_9F27);
	addLine("TAG 9F34: " + pedResponse.EMV_TAG_9F34);
	addLine("TAG 9F36: " + pedResponse.EMV_TAG_9F36);
	addLine("TAG 9F37: " + pedResponse.EMV_TAG_9F37);
	addLine("TAC Default: " + pedResponse.EMV_TAC_DEFAULT);
	addLine("TAC Denial: " + pedResponse.EMV_TAC_DENIAL);
	addLine("TAC OnLine: " + pedResponse.EMV_TAC_ONLINE);
	
	addDefaultFooter();
 	
	return getResponse();
}

//NVS-3839, NVS-3844, NVS-3846 - msilva
function reversalPartialTransReport(config, data){	

	isKioskTPUI = true;
	isRcpKiosk = true;
	
	if(init(config, data, Array("VIEW"), "RECPT") != 0){
		return getResponse();
	}
	
	try {
		var ctx=new SessionContext;
	} catch (e) {
		return;
	}
	
	var merchantAdded = false;
	reversals =String(ctx.get("CASHLESS_REVERSAL"));
	if (reversals.length == 0) { return;}

	revs = String(reversals).split("CASHLESS:");
	
	addDefaultHeader();
	startInvertedColor();
	startBoldSize2();
	addLine(center("  **** REVERTED **** "));
	endBoldSize2();
	endInvertedColor();
	addLine(SEP_UL);	
	
	for(var i = 1; i < revs.length; i++) {
		revInfo =String(revs[i]);
		fields 	=revInfo.split("|");
		var provider = fields[0].replace("CASHLESS:", ""); // + " SALE";
		providerSale = provider  + " REVERSAL";
		var card = " " + fields[1]; // Card #
		var expires = fields[2];	// Card expiration date
		var auth = fields[3];		// Authorization code
		var seq = fields[6];		// Sequence #
		var mer = fields[7];		// Merchant id
		var balance = API.formatNumber(Number(fields[8]), NUMBER_FORMAT, 12);	// Balance #
		var amt = fields[10];		// Operation amount
		var needsSignature 	=fields[5];

		var firstCopy = "";

		if (!merchantAdded) {
			line = "MER# "+mer;
			firstCopy = firstCopy + line + "\n";
			merchantAdded = true;
		}

		if (provider == "Gift Card") {expires = "";}

		var line = "CARD ISSUER          ACCOUNT#";

		//NVS-7249 - msilva - Add a blank line beetween the cards
		if(i > 1){
			line = "\n" + line;
		}		

		firstCopy = firstCopy + line + "\n";

		line = API.setOnLeft(providerSale, 14) + card;
		firstCopy = firstCopy + line + "\n";

		line = "TRANSACTION AMOUNT" + API.setOnRight("-"+amt, COLS-18);
		firstCopy = firstCopy + line + "\n";

		line = "AUTHORIZATION CODE - ******\nSEQ# " + seq + "\n";   // NVS-1153
		firstCopy = firstCopy + line;

		/* decrement signature line */
		// NVS-6785 23-FEB-2017 John Brancaleonb - Remove the individual Signature line
		//if(Number(needsSignature)) {
			//line = "\n___________________________________\nAuthorized Signature - (Store copy)\n\n";
			//firstCopy = firstCopy + line;
		//}		
		
		addLine(firstCopy);
		addLine();
	}	

	addLine(SEP_UL);
	addDefaultFooter();

	//msilva - Add full receipt
	return getResponse();

	//msilva - Add full receipt
	//kioskReversalReceiptContent = outputBuffer.toString();
	//outputBuffer = "";
	//return (receiptkioskTPUI(config, data));
	
}


/**
 * @brief - Checks if a given product is distributed only at the McCafe.
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 * @author - Felipe Armoni
 */
function isMcCafeProduct(productCode) {
	
	var result;
	var hasMcCafe, hasFrontCounter;
	var distribution = csoProductInfo[productCode].xmlNode.Distribution;
	
	hasMcCafe = false;
	hasFrontCounter = false;
	
	for each (var item in distribution.Point) {
		
		if (item == "MCCAFE") {
			hasMcCafe = true;
		
		} else if (item == "FRONT_COUNTER") {
			hasFrontCounter = true;
			
		}
	}
	
	// If this product is not distributed at McCafe
	if (hasMcCafe == false) {
		result = false;
	} 
	
	// If this product is also distributed at the front counter.
	else if (hasFrontCounter == true) {
		result = false;
	} 
	
	// If this product is distributed at the McCafe and is not distributed at the front counter.
	else {
		result = true;
	}
	
	return result;
}

function getNumCashlessTransactions(config, data)
{
	var rootCtx = new SessionContext;
	
	//DAILY CLOSE RPT BY DATE
	if(init(config, data, Array("CASH", "PMIX"), "ENDDY") != 0) {
		return getResponse();
	}
	
	var rptType = RPTCASHCONSOLIDATED;
	var XMLCashRpt = XMLCashReport(rootConfig, rootCash, rootPmix, null, rptType);
	
	if(XMLCashRpt.CashlessSales.@tc > 0 || XMLCashRpt.CashlessRefunds.@tc > 0 || XMLCashRpt.GiftCardRedeem.@tc > 0
		|| XMLCashRpt.GiftCardSold.@tc > 0 || PosCheckSessionProperty("Cashless3CutoverRequired", "true"))
	{
		rootCtx.set("cashless_total_transaction_count", "1" , true);
		return true;
	}
	
	rootCtx.set("cashless_total_transaction_count", "0" , true);
	return false;
}


/* print routine for an item which doesn't print price*/
OrderItems.prototype.printForPickList = function printForPickList() {

	/* prevent items from being printed twice */ 
	if (this.printed) { return; } 	
	
	/* don't print voided items */
	if ((this.data.quantity == 0) && (this.data.isGrillLine == "false")) { return; } //NVS-1014
	
	/* don't print items if parent's qty is 0 */ 
	if ((this.parent != null) && (this.parent.data.quantity == 0)) { return; } //NVS-1089
	
	var level 	=this.level;
	var qty 		=API.setOnRight(this.data.quantity, 3);	
	var name  	=this.data.longName;
	var ident		="";
	var inlineMsg	="";
	var OffersItem = this.data.PromotionApplied[0];

	/* filter SMART choices */ 
	if ( (this.data.productCode > 100000) && (this.data.isGrillLine == false) ) { return; }     // NVS-1100 added isGrillLine
	/* dont print sandwich under EVM's that don't have grills */
	if ( (level > 0) 
		&& (Number(this.data.prodAction) == 0) 
		&& (Number(this.data.productType) == 2) 
		&& (this.data.isGrillLine != "true") 
		&& (!this._hasGrills()) 
		
	   ) { 
		return;
	} 
	if (this.data.productType == "8" && this.data.familyGroup == "5" && this.data.dtName != "" && this.data.dtName.toLowerCase().indexOf("surcharge") != -1) {
		this.printed = true;
		return;
	}

	/* format price */ 
	var price="";
	//price = (this.displayPrice == null)?this.data.totalPrice:this.displayPrice;	
	//var priceNoComma = removeChar(String(price),",");
	//price = API.formatNumber(Number(priceNoComma), NUMBER_FORMAT, 8);
	//if ((level > 0) && (price == 0) && (this.data.unitPrice != 0)) { 
	//if ((level > 0) && (price == 0)) { 
	//	price = ""; 
	//} 
	
	//if ((price == 0) && (this.data.isGrillLine == "true") ) { 
	//	price = ""; 
	//} 

	/* condiments attached as choices are not indented extra (strange but true) */ 
	if ( (this.data.prodAction == 3) && (this.data.productType == 2) && (level > 1) ) { level--; } 

	/* indent based on level */
	for(var i=0; i<level; i++) { ident += "  "; }
	
	// Lindomar Araujo: 2014/08/28 - SQC-6001 - Checking if the smartRouting and hideAddGrillParameter is enabled to check if the product is a SGP item
	/* handle grills */ 
	if (sgpEnabled == "true" && sgpHideAddGrill == "true") {
		if (this.data.isCYT == "true") {
			hideAddGrillModifier = true;
			var lastItemCode = this.data.itemCode;
		} else {
			if (this.data.isGrillLine == "false") {
				hideAddGrillModifier = false
			}
		}
	}
	if(this.data.isGrillLine == "true") {
		// Lindomar Araujo: 2014/08/28 - SQC-6001 - Sending the new parameter(hideAddGrillModifier) to the function getGrillDescription
		//line = "    " + ident + getGrillDescription(this.data, true, false, hideAddGrillModifier);
		//NVS-6471 & NVS-6705 16-FEB-2017 John Brancaleon -  Print the modifiers/numbers that are displayed on the monitor/POS. 
		if(this.parent.data.displayNumbersInsteadofModifiers == "true" || this.parent.data.displayNumbersInsteadofModifiers == true){
			//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
			line = "  " + ident + getGrillDescriptionForMcCafeItems(this.data, true, false, hideAddGrillModifier);
		}
		else{
			//NVS-6762 22-FEB-2017 John Brancaleon  remove 2 extra spaces before the line is added.
			line = "  " + ident + getGrillDescription(this.data, true, false, hideAddGrillModifier);
		}		

	/* handle non grilled items */
	} else { 
		line = ident + qty + " " + name;
	} 

	/* make sure line doesn't get any longer than 30 cols */
	if (line.length > 30) { line = line.substring(0, 30); }
	
	if (this.settings.printPickList == false) {
	
		/* handle any inline messages */ 
		if (this.settings.inlineText) {
			if ((this.data.isUpcharge == "true") && ((this.settings.showUpCharge != null) && (this.settings.showUpCharge))) { 
				inlineMsg = " <" + this.settings.upchargeText + ">  ";
			}

			if ((this.hasDiscount) && ((this.settings.showDiscount != null) && (this.settings.showDiscount) && (!this.settings.suppressDiscount))) { 
				inlineMsg = " <" + this.settings.discountText + ">  " + price;
			} 
			
			price = inlineMsg + price;
		}

		/* handle promo indicator */ 
		if( (toInt(this.data.quantityPromo) != 0) && (this.level == 0)) {
			price = this.data.quantityPromo + "P" + price;
		} 
		
		line =API.setOnLeft(line, COLS-String(price).length) + price;
		addLine(line);
		
		/* add any upcharge text */ 
		if (!this.settings.inlineText) { 
			if ((this.data.isUpcharge == "true") && ((this.settings.showUpCharge != null) && (this.settings.showUpCharge))) {
				chargeText = "<"+this.settings.upchargeText.substr(0,16)+">";
				size = 30 - chargeText.length;
				addLine(this._createPadding(size) + chargeText);
			} 


			/* add any discount text */
			if ((this.hasDiscount) && ((this.settings.showDiscount != null) && (this.settings.showDiscount) && (!this.settings.suppressDiscount))) { 
				discoText = "<"+this.settings.discountText.substr(0,16)+">";
				size = 30 - discoText.length;
				addLine(this._createPadding(size) + discoText);
			} 
		}
	} else {
		/* handle promo indicator */   //Kalpesh - NVS-1579
		if( (toInt(this.data.quantityPromo) != 0) && (this.level == 0)) {
			line =API.setOnLeft(line, COLS-String(qty).length) + this.data.quantityPromo + "P";	          
		} 
		addLine(line);
	}
	
	/* mark items as being printed */ 
	this.printed = true;
}

/* prints Items without prices for pickList*/
OrderView.prototype.PrintSaleItemsForPickList = function () {
	//Merge no grilled items
	this.MergeItemsForPickList();

	for(var i=0; i < this.itemList.length; i++) {
		this.itemList[i].printForPickList();
		innnerPrint(this.itemList[i]);
	}

	/* due to a limit in the java interpreter, recursive methods can't see interval variables the 2nd time around, so an inner function is used */
	function innnerPrint (item) { 
		for(var i=0; i < item.children.length; i++) {
			item.children[i].printForPickList();
			if (item.children.length > 0) { 
				innnerPrint(item.children[i]);
			} 
		}
	} 
} 

//NVS-4801 - msilva
/** 
 * @brief mobileDTShowItems : show list of invalid and valid items of original view from FOE 
 * @since 6.1.23 NPS-12260 
 */ 
function mobileDTShowItems(config, data) 
{ 
    initGlobalt(); 
    rootConfig = new XML(config); 

    // Order information 
    var hlp = new BusinessObjectHelper; 
    var ctx=new SessionContext; 
    var view = ctx.get("SavedFOEView"); 
    // format 
	var xmlView=XML(view); 
    var lineHeader="============================="; 
    var invalidItemsHeader=" Invalid Items "; 
    var validItemsHeader=" Valid Items "; 
    var invalidPromotionsHeader=" Invalid Offers "; 
    var msgInvalidationReason; 
	//NVS-4806 - msilva
    var bShowHeader=true; 
    for each (var item in xmlView.InvalidItemView){
        if(true==bShowHeader) { 
            addLine(lineHeader); 
            addLine(invalidItemsHeader); 
            addLine(lineHeader); 
            addLine(); 
            bShowHeader=false; 
        } 
        var msgvalidationCode = hlp.getSysMessage("MSG_PRODUCTVALIDATIONCODE_"+item.validationCode); 
		addLine(item.name + " - " + msgvalidationCode); 
    } 

    addLine(); 
    bShowHeader=true; 
	
	//NVS-4806 - msilva
    for each (var promotion in xmlView.InvalidPromotions.Promotion) { 
        if(true==bShowHeader) { 
            addLine(lineHeader); 
            addLine(invalidPromotionsHeader); 
            addLine(lineHeader); 
            addLine(); 
            bShowHeader=false; 
        } 
        switch (promotion.@rejection.toString()) { 
            case "Expired": 
                msgInvalidationReason=hlp.getSysMessage("MSG_PROMOTION_VALIDATION_EXPIRED"); 
                break; 
            case "InvalidStore": 
                msgInvalidationReason=hlp.getSysMessage("MSG_PROMOTION_VALIDATION_INVALID_STORE"); 
                break; 
            case "MissingProducts": 
                msgInvalidationReason=hlp.getSysMessage("MSG_PROMOTION_VALIDATION_MISSING_PRODUCTS"); 
                break; 
            case "InvalidPod": 
                msgInvalidationReason=hlp.getSysMessage("MSG_PROMOTION_VALIDATION_INVALID_POD"); 
                break; 
            case "InvalidDateTime": 
                msgInvalidationReason=hlp.getSysMessage("MSG_PROMOTION_VALIDATION_INVALID_DATE_TIME"); 
                break; 
            case "InvalidItems": 
                msgInvalidationReason=hlp.getSysMessage("MSG_PROMOTION_VALIDATION_INVALID_ITEMS"); 
                break; 
            default: 
            case "Other": 
                msgInvalidationReason=hlp.getSysMessage("MSG_PROMOTION_VALIDATION_OTHER"); 
                break; 
        } 
        addLine(promotion.@promotionName + " - " + msgInvalidationReason); 
    } 
    addLine(); 
    bShowHeader=true; 
    for each (var item in xmlView.ItemView) { 
        if((0==Number(item.level)) && (Number(item.quantity)>0)) { 
            if(true==bShowHeader) { 
                addLine(lineHeader); 
                addLine(validItemsHeader); 
                addLine(lineHeader); 
                addLine(); 
                bShowHeader=false; 
            } 
            addLine(item.dtName); 
        } 
    } 
    return getResponse(); 
}
/* NVS-4645 - Enhanced Presentation of 2-For Promotions brief Calculates the total price of each promotion of a sale */
Sale.prototype.getPromotionTotal = function(id, counter, qtyLevelZero) 
{ 
  if(this.promotionData != null) 
  { 
    for(var i = 0; i < this.promotionData.length; i++) 
    { 
      if(this.promotionData[i].id == id && this.promotionData[i].counter == counter) 
      { 
        return this.promotionData[i].total; 
      } 
    } 
  } 
  return null; 
}
/* NVS-4645 - Enhanced Presentation of 2-For Promotions - brief Gets some configuration data of a promotion given by its ID and counter*/
Sale.prototype.getPromotionData = function(id, counter) 
{ 
  if(this.promotionData != null) 
  { 
    for(var i = 0; i < this.promotionData.length; i++) 
    { 
      if(this.promotionData[i].id == id && this.promotionData[i].counter == counter) 
      { 
        return this.promotionData[i]; 
      } 
    } 
  } 
  return null; 
}
/* NVS-4645 - Enhanced Presentation of 2-For Promotions - brief PromotionData constructor */
function PromotionData(id, counter, name, total, showIndividualPrices) 
{ 
  this.id = id; 
  this.counter = counter; 
  this.name = name; 
  this.total = total; 
  this.showIndividualPrices = showIndividualPrices; 
  this.nameAlreadyUsed = false; 
} 
/** 
 * \brief Builds all PromotionData objects corresponding to the promotions of the current sale 
 * \since NPS-19043 - NVS-4645 - Enhanced Presentation of 2-For Promotions
 */ 
Sale.prototype.setPromotionsData = function(view) 
{ 
  var promoData = []; 
  if(view.Promotions != null) 
  { 
    var numberOfPromotions = view.Promotions.Promotion.length(); 
    for (var i = 0; i < numberOfPromotions; i++) { 
      var promotion = view.Promotions.Promotion[i]; 
      var total = new BigDecimal(0); 
      for(var it = this.iterator(); !it.atEnd (); it.next()) 
      { 
        var item = it.get(); 
        if(item.product.PromotionApplied != undefined) 
        { 
          if(promotion.@id == item.product.PromotionApplied.@promotionId && promotion.@counter == item.product.PromotionApplied.@promotionCounter) 
          { 
            var totalPromotionDiscount = new BigDecimal(item.product.PromotionApplied.@discountAmount); 
            var itemPrice; 
            itemPrice = new BigDecimal(item.product.totalPrice).subtract(totalPromotionDiscount); 
            total = total.add(itemPrice); 
          } 
        } 
      } 
      var showIndividualPrices = promotion.@showIndividualPrices.toUpperCase(); 
      promoData[i] = new PromotionData(promotion.@id, promotion.@counter, promotion.@promotionName, total, !(showIndividualPrices == "FALSE")); 
    } 
  } 
  this.promotionData = promoData; 
}

function printCustomerPreferencesValidProducts(config, data){
	
	initGlobalt();
	rootConfig = new XML(config);
	
	
	var customData = rootConfig.CustomData[0];
	if (customData == null) {
		return getResponse();
	}
	
	
	var jsonData =  JSON.parse(customData);
	
	
	addLine();
	addLine(SEP_UL);
	startBold();
	addLine(center("Invalid Items"));
	endBold();
	addLine(SEP_UL);
	addLine();
	
	
	for each(var item in jsonData.invalid) {
		addLine( item.description );		
	}
	addLine();
	addLine(SEP_UL);
	startBold();
	addLine(center("Valid Items"));
	endBold();
	addLine(SEP_UL);
	addLine();
	for each(var item in jsonData.valid) {
		addLine( item.description );		
	}
	
	
	return getResponse();
}

/* NVS-7096 - Customer Preference Barcode Integration. */
function printSaleQRCode(config, data) 
{	
	var LIGHT  = 1;
	var ONLY   = 2;
	
	initGlobalt();
	rootConfig = new XML(config);
	
	var customData = rootConfig.CustomData[0];
	if (customData == null) {
		return getResponse();
	}
	
	addLine(SEP_UL);
	addLine();
	addLine();
	
	startBold();
	addLine(center("Use this code to reorder"));
	addLine(center("the same items or"));
	addLine(center("to share your preferences"));
	addLine(center("with your friends"));
	endBold();
	
	addLine();
	addLine();
	
	API.logDebug(12001, "printSaleQRCode " + customData);
	
	var jsonData =  JSON.parse(customData);
	
	var localconfig = new Config ("ValueMealDisplay", true);
    var showAsSinglePrice = localconfig.getBoolParameter ("VMDisplay_ShowAsSinglePrice");
	
	var view = new XML(Base64.decode(jsonData.view));
	
	view = removeContainerFromView(view);
	view = checkPlainForReceipt(view);
	view = checkForceCompForReceipt(view);
	view = checkSmartGrillForReceipt(view);
	view = checkShowChosenItemAsIngredientForReceipt(view);
	
	 /* Added following for NPS-5064.  RPS 11-19-2008 */
    if (view.@vmChildrenMultiplied == "true") {
		// KVS view comes with quantities already multiplied
		divideItemQuantities(view);
    }
    /* end of NPS-5064 */
	
	//#############################	
	if(showAsSinglePrice){
		try{
			view = new XML(onAdjustViewForEvmrOverride(view));
		}catch(ex){
			API.dbg("Warning: onAdjustViewForEvmr() failed, or it doesn't exists");
		}
	}
	
	// Detach the choices of the view
    var newViewArray=new Array();
    detachChoice(view,newViewArray,showAsSinglePrice);
    
    // Create the consolidated view
    var newViewCons = new XML("<View/>");	
    creatConsView(newViewArray,newViewCons,showAsSinglePrice);
    
    //Sort the Consolidated View
    sortConsView(newViewCons);
		
	var sale = new Sale ();
	
	// Adds sale items
    var qtyLevelZero=1;
    var promoLevelZero=false;
    var qtyViewItem = newViewCons.ItemView.length();
    var iItem = -1;
    var it=0;
    for each (var item in newViewCons.ItemView) {
		iItem++;
		if (item.level == 0) {
			qtyLevelZero = item.quantity;
			promoLevelZero = (toInt(item.quantityPromo) != 0);
		}
		if((item.quantity != 0) || (item.specialModifiers == LIGHT) 
		   || (item.specialModifiers == ONLY)) {
			if (qtyLevelZero != 0) {
				var childNode = false;
				for(var i = iItem; i < qtyViewItem; i++) {
					var childView = newViewCons.ItemView[i];
					if(promoLevelZero) {
						childNode = true;
					}
					if(item.level > childView.level) {
						break;
					}
					if(childView.isGrillLine == "true") {
						childNode = true;
					}
					if(childView.ForceCompDisplay == "POS" || childView.ForceCompDisplay == "ALL") {
						childNode = true;
					}
				}
				
				if(!((item.level != 0) && (item.isGrillLine == "false") 
		     && (item.productType == 2)) || (childNode == true)) {
					sale.addItem (item, qtyLevelZero);
				}
			}
		}
    }
	
	sale.printWithoutPrice();
	
	addLine( "<@QRCodeOn>" + jsonData.barcode + "<@QRCodeOff><@LinePitchZeroOff>" );
	addLine(SEP_UL);	

	//Add blank lines to avoid cut before the end of the image
	for(var i = 0; i < 2; i++)
	{
		addSize2Line();
	}
	
	return getResponse();
}

/** 
 * \brief Verify and return the UberEats Order Key 
 * \since NVS-6999 - NVS-7115 - msilva - UberEats Integration
 * @return false: Is not a UberEats Order
 * @Other then false: UberEats Order Number (shortCode)
 */ 
function GetUberEatsOrderKey(){
	
	try{

		if(reportsIsUberEatsOrder(true) || isUberEatsOrder(true)){

			var currentView = rootView.View;
			if(currentView == null)
			{
				return false;
			}
			
			var uberEatsOrderKey = currentView.@shortCode + currentView.@longCode;
			var upperuberEatsOrderKey = uberEatsOrderKey.toUpperCase();
			return upperuberEatsOrderKey;
			
		}
	}catch(e){
		return false;
	}
	
	return false;
}
/** 
 * @brief Check when the order in progress is a UberEats Order
 * @return 
 * true: The order is a UberEats order
 * false: Order is not a UberEats order
 * @since UberEats NVS-6999 - msilva - UberEats Integration 
 */
function reportsIsUberEatsOrder(isReceipt){
	 
	if(isReceipt == undefined || isReceipt == null || isReceipt == ""){
		isReceipt = false;
	}
	//Check order in progress
	var currentView = rootView.View;
	if(currentView == null){
	  return false;
	}
	//Check deliveryBillableSale parameter
	var deliveryBillableSale = currentView.CustomInfo.Info.(@name=="deliveryBillableSale").@value;
	if(deliveryBillableSale == undefined || deliveryBillableSale == "" || deliveryBillableSale == "false" || deliveryBillableSale == false){
		return false
	}
	//Check UberEats NickName
	//var customerNickName = view.@customerNickName;
	var customerNickName = currentView.CustomInfo.Info.(@name=="customerNickname").@value;
	if(customerNickName == undefined || customerNickName == null || customerNickName == ""){
		return false;
	}
	if((deliveryBillableSale == true || deliveryBillableSale.toString() == "true") && customerNickName.toString() == "UberEats"){
		return true;
	}else{
		return false;
	}

}

/** 
 * @brief Validate and decrypt eCP encoded fields
 * @return decoded field
 * customerFirstName, customerLastName, customerNickname
 * @since NVS-7990 - msilva
 */
function validateDecryptNickName(nickName){

		if(nickName != undefined && nickName != null && nickName != "" && nickName != " "){
			nickName = API.AESDefaultDecrypt(nickName);
		}	
		
		return nickName;
}
/* signed aut version 9-9076
 * authority id = coe
 * authority level = 40
 * authority name = NewPOS COE developer
 * group = npi
 * validity = 2010-04-18
 * signature type = slash_star
 * time stamp (GMT) = Wed Jan 31 01:28:45 2018
 * certificate = 393735312d37393437002dc5fca17124846fb3ec6396bee5ca9015c88dff743e9cfb2550ee5812feb069ec0e0886bc1b0ce222c3412c782aa719213a0010
 * =================================================================================================================================
*/
