/**
 * BCCashless.nps
 * This NPS file implements Cashless Business Componentes .
 *
 * Copyright (c) 2005-2007 - Torex Retail PLC-
 *
 * $Source: /NewPOS/SRC/uscvs/cvs/___Config61/Posdata/US/nps/BCCashless.nps,v $
 * $Revision: 1.1.1.1.4.10.10.1 $
 * $Date: 2009/07/31 15:02:06 $ (of revision)
  * $Author: djohnson $ (of revision)
 */
const GC_STRING="giftCouponString";
const CASHLESS_GIFT_CARD="CASHLESS_GC";
const CASHLESS_CASHOUT="CASHLESS_CASHOUT";

/** PosIsCashlessAvailableJS
 *
 * This function checks if the cashless is loaded and locally available
 * Return - rval - True if available
 */
function PosIsCashlessAvailableJS()
{
    return(PinpadIsOnlineJS());
}

/** PosIsCashlessLoadedJS
 *
 * This function checks if the cashless is loaded
 * Return - rval - True if loaded
 */
function PosIsCashlessLoadedJS()
{
	if(PosCheckParameter("Cashless3", "Active", "true")) {
		return true;
	}
    var Everest = PosCheckParameter("TCLExtension","everest","true");
    var eSocket = PosCheckParameter("TCLExtension","esocket","true");
	return(Everest || eSocket);
}

/**PosGCActivationJS
 *
 * @brief - This function implements the BC,Business Component: <b>PosGCActivationJS</b>\n
 * Persistence:<b>Persisted</b>\n
 * This BC activates the gift card of last sale!\n
 * Should be called by the workflow sequence when the sale is finished.\n
 * In a workflow sequence it is called:<b>PosGCActivationJS</b>\n
 * In java script it should be called:<b>PosGCActivationJS</b>\n
 * Return - rval - True for successful execution or False for failure.
 */
function PosGCActivationJS(flags)
{
	function isAReloadableGiftCard(code)
	{
		return("8496" == code || "8497" == code || "8498" == code || "8499" == code || "8501" == code || "8461" == code);
	}
	function compareAmount(e1, e2)
	{
		var a1 = Number(e1[2]);
		var a2 = Number(e2[2]);
		if(a1 > a2)
			return 1;
		if(a1 < a2)
			return -1;

		var r1 = isAReloadableGiftCard(e1[0]);
		var r2 = isAReloadableGiftCard(e2[0]);
		if(r1 && !r2)
			return 1;
		if(!r1 && r2)
			return -1;

		return(0);
	}
	function compareTypeAndAmount(e1, e2)
	{
		var r1 = isAReloadableGiftCard(e1[0]);
		var r2 = isAReloadableGiftCard(e2[0]);
		if(r1 && !r2)
			return 1;
		if(!r1 && r2)
			return -1;

		var a1 = Number(e1[2]);
		var a2 = Number(e2[2]);
		if(a1 > a2)
			return 1;
		if(a1 < a2)
			return -1;

		return(0);
	}
	function getGiftCards(giftCardStr)
	{
		var giftCards=new Array();
		var GCStrArray=giftCardStr.split("|");
		if ((GCStrArray == null) || (GCStrArray.length <= 0)) {
			return(null);
		}
		for(var i=0; i < GCStrArray.length; ++i) {
			giftCards[i]=GCStrArray[i].split(";");
			var fields=giftCards[i];
		}
		return(giftCards);
	}
	function activation(giftCards,prefix)
	{
		var i,j

		giftCards.sort(compareTypeAndAmount);
		//Arch Card Timeout
		GCTIMEOUT = rootCtx.get("giftCardTimeout");
		if ( GCTIMEOUT <= 0) { 
			GCTIMEOUT = 90000; //Set default Gift card timeout
		} else {
			GCTIMEOUT*= 1000; //Configurable Timeout 
		}
		rootCtx.set("msgTimeout",GCTIMEOUT,false); 

		var actQty=0;
		var relQty=0;
		var text="";
		//var Amount=new BigDecimal();
		for(i=0; i < giftCards.length; ++i) {
			var fields=giftCards[i];
			if(!isAReloadableGiftCard(fields[0])) { // ProductCode = fields[0];
				actQty+=Number(fields[1]);
				// Amount=fields[2];
			} else {
				relQty+=Number(fields[1]);
			}
		}
		if(actQty != 0 && relQty != 0) {
			var i1=0;
			var i2=0;
			while(i2 < giftCards.length && !isAReloadableGiftCard(giftCards[i2][0])) {
				++i2;
			}
			var i1Length=i2;
			while(i1 < i1Length || i2 < giftCards.length) {
				if(i1 < i1Length) {
					text+="Gift Card $" + Number(giftCards[i1][2]) + "-" + giftCards[i1][1];
					++i1;
				} else {
					text+="                            ";
				}
				if(i2 < giftCards.length) {
					text+="          Reload $" + Number(giftCards[i2][2]) + "-" + giftCards[i2][1] + "\n";
					++i2;
				} else {
					text+="                                      \n";
				}
			}
			PosShowMessage("MSG_BC_GC_ACTIV_RELOAD",text,actQty,relQty,"_TIMEOUT:msgTimeout");// Prompt 1 Reload and GC
		} else if(actQty != 0) {
			for(i=0; i < giftCards.length; ++i) {
				text+="Gift Card $" + Number(giftCards[i][2]) + "-" + giftCards[i][1] + "\n";
			}
			PosShowMessage("MSG_BC_GC_ACTIVATION",text,actQty,"_TIMEOUT:msgTimeout");// Prompt 1 GC
		} else {
			for(i=0; i < giftCards.length; ++i) {
				text+="Reload $" + Number(giftCards[i][2]) + "-" + giftCards[i][1] + "\n";
			}
			PosShowMessage("MSG_BC_GC_RELOAD",text,relQty,"_TIMEOUT:msgTimeout");// Prompt 1 Reload
		}
		while(!PosCheckCashDrawer()) {
			PosShowMessage("MSG_BC_DRAWER_OPENED");
		}
		giftCards.sort(compareTypeAndAmount);
		var actNumber=1;
		var relNumber=1;
		var Continue=true;
		for(i=0; Continue && i < giftCards.length; ++i) {
			var fields=giftCards[i];
			for(j=Number(fields[1]); Continue && j > 0; --j) {
				var text;
				var msg;
				var reload=isAReloadableGiftCard(fields[0]);
				while(Continue) {
					if(!reload) { // ProductCode = fields[0];
						PosDisplayText("MSG_BC_GC_ACTIVATING",1,true,true,fields[2]);
						msg="Gift Card to Activate: " + actQty + "\n\nCurrently Activating Gift Card #"+actNumber+" for "+fields[2]+"\nPress OK to Activate\nPress Cancel to Exit.";  //Msg 2b
						msg2="Gift Card to Activate: " + actQty + "\n\nCurrently Activating Gift Card #"+actNumber+" for "+fields[2]+"\nPress OK to Activate"; //Msg 2a
						
						} else {
						PosDisplayText("MSG_BC_GC_RELOADING",1,true,true,fields[2]);
						msg="Gift Card to Reload: " + relQty + "\n\nCurrently Reloading Gift Card #"+relNumber+" for "+fields[2]+"\nPress OK to Reload\nPress Cancel to Exit.";  //Msg 2b
						msg2="Gift Card to Reload: " + relQty + "\n\nCurrently Reloading Gift Card #"+relNumber+" for "+fields[2]+"\nPress OK to Reload"; //Msg 2a
					
					}	
					
					var startcounter = new NPDate();
					var startcounterMilliseconds = startcounter.getMilliseconds();					
					var timeoutLimit = startcounter;

					timeoutLimit.setMilliseconds(GCTIMEOUT + startcounterMilliseconds);
					
					PosShowMessage(msg2,"_TIMEOUT:msgTimeout"); // Prompt 2a
					var endcounter = new NPDate();
					
					if ( endcounter >= timeoutLimit ) {					
						if(!PosShowConfirmationMessage(msg,"OK","Cancel")) {  //Prompt 2b
							Continue=false;
						}
					}
					
					// Check if system is online
					if (PosIsCashlessAvailableJS() != true) {
						// SDE-2198
						// if not online, get it online by resetting
						if (SiletResetCashlessJS() != true) {
							// still no?  display error message and bail out
							PosShowMessage("MSG_BC_GC_NOT_AVAILABLE");
							Continue = false;
						}
					}

					if(Continue && PosActivateGCJS(fields[2],reload)) {
						if(!reload) {
							++actNumber;
							actQty-=1;
							rootCtx.set("GC_PURCHASE_TYPE", "Purchase");
						} else {
							++relNumber;
							relQty-=1;
							rootCtx.set("GC_PURCHASE_TYPE", "Reload");
						}
						giftCardText=(j != 1) ? (prefix + fields[0] + ";" + (j-1) + ";" + fields[2]) : prefix;
						var sep=(j != 1) ? "|" : "";
						for(k=i+1; k < giftCards.length; ++k) {
							giftCardText+=sep + giftCards[k][0] + ";" + giftCards[k][1] + ";" + giftCards[k][2];
							sep="|";
						}
						rootCtx.set(GC_STRING,giftCardText,true);
						var CashlessGC=rootCtx.get(CASHLESS_GIFT_CARD);
						/* NVS-981 */
						CashlessGC = CashlessGC + "<totalGC>" + fields[2] + "</totalGC>";
						PosCreateReport("VIEW","receiptGift@reports.nps",flags,CashlessGC);
						rootCtx.set(CASHLESS_GIFT_CARD,"");

						// SDE-2198
						CleanCashlessState();

						break;
					}
					Continue=PosShowConfirmationMessage("MSG_BC_GC_ACT_ERROR","OK","Cancel");
				}
			}
		}
		if(!Continue || (giftCardText.length != 0)) {
			giftCardText="R" + ((actNumber != 1 || relNumber != 1) ? "+" : "-") + giftCardText;
			rootCtx.set(GC_STRING,giftCardText,true);
		}
		return(Continue);
	}
	function refund(giftCards,headFields,sign)
	{
		var notInProgress=PosNotATransactionInProgress(true)
		if(notInProgress) {
			while(!PosGetAuthorization("manager"))
				;
			PosSetTransactionKind(ACC_OT_REFUND,(headFields[3] != "1")
				? ACC_OT_REFUND
				: ((headFields[4] == "0" && sign == "-") ? ACC_OT_GC_BILLABLE_REFUND : ACC_OT_MX_BILLABLE_REFUND));
			for(var i=0; i < giftCards.length; ++i) {
				var fields=giftCards[i];
				for(var j=Number(fields[1]); j > 0; --j) {
					PosDoSale(fields[0],true);
					/* added for NPS-7495 -variable arch card */
					PosSetFloatPrice(fields[2]); 
				}
			}
			PosSetSaleType(headFields[0]); // price code
			
			/* NVS-1020 -prevent manager promts, has already been prompted */ 
			PosSetSessionProperty("CalledFromGCActivate","true","false");
			PosDoTotal();
			PosSetSessionProperty("CalledFromGCActivate","false","false");
		}
		// Successful refund
		var bSuccRefund = false;
		var bCashlessFailed = false;


		// loop until successful tender
		while (!bSuccRefund) {
			var TenderId;

			// Not a bilable sale
			if (headFields[3] != "1") {
				// once cashless failed, force refund in cash mode
				if (bCashlessFailed) {
					TenderId = "-1";
				} else {
					TenderId = (PosShowConfirmationMessage("MSG_BC_REFUND_TYPE","Cashless","Cash")) ? "10" : "-1"
				}
			} else {
				// billable sale
				TenderId = "6";
			}

			// the system may require manager id verification
			// put this function in a loop to force the successful authentication
			if( PosDoTender(TenderId,"-1") )  {
			    bSuccRefund = true;
                    // SDE-2553  RPS 05-15-09, SDE-2789 -only FC
                    if (PosCheckParameter("TCLExtension","esocket","true") && (!PosCheckSessionProperty("POD","DRIVE_THRU")) ) {
					result=npTCLEvalEx("Everest_Operation 22 0 0");
				}
			} else {
				// tender failuare
				// and the type is cashless,
				//	set this so that the refund proces can continue using cash
				if (TenderId == "10") {
					// set a flag to bypass confirmation msg
					bCashlessFailed =  true;

					// force it to cash
					TenderId = "-1";
				}
			}
		}

          PosDoEndOfSale();
		rootCtx.set(GC_STRING,"-1",true);
		var viewString=rootCtx.get(KEY_VIEW);
		var view=new XML(viewString);
		view.@LSOrderId=headFields[1];
		view.@LSTotAmount=headFields[2];
		rootCtx.set(KEY_VIEW,view.toString(),true);
		PosCreateReceiptJS(0,"VIEW","Receipt#USReceiptReports",flags);
		return;
	}


	var giftCardText=rootCtx.get(GC_STRING);
	if(null == giftCardText || 0 == giftCardText.length) {
		return(true);
	}
	var index=giftCardText.indexOf("!");
	if(index == -1 || index == giftCardText.length-1) {
		return(true);
	}
	
	if(PosCheckParameter("Cashless3", "Active", "true")) {
		var stopResponse = StopCashlessSession();
		var maxTries = 10;
		while (stopResponse != null && maxTries > 0 && stopResponse.RESULT_CODE == CASHLESS_DEVICE_BUSY)
		{
			TimedDelay(1000);
			stopResponse = StopCashlessSession();
			maxTries--;
		}
	}
	
	do {
		var saleType=0;
	var OK=false;
	if(giftCardText.substr(0,2) != "R-" && giftCardText.substr(0,2) != "R+") {
		var index1=giftCardText.indexOf("!");
	    var giftCards=getGiftCards(giftCardText.substr(index1+1));
		if ((giftCards == null) || (giftCards.length <= 0)) {
			return(true);
		}
		OK=activation(giftCards,giftCardText.substr(0,index1+1));
	}
	giftCardText=rootCtx.get(GC_STRING);
	PosDisplayText("",1);
	var index=giftCardText.indexOf("!");
	if(OK || (index < 0)) {
		return(true);
	}
	sign=giftCardText.substr(1,1);
	giftCardText=giftCardText.substr(2);
	var index=giftCardText.indexOf("!");
    var giftCards=getGiftCards(giftCardText.substr(index+1));
	if ((giftCards == null) || (giftCards.length <= 0)) {
		return(true);
	}
	}
	while(refund(giftCards,giftCardText.substr(0,index).split("#"),sign) == false);
	return(false);
}

/**PosGiftCardCashOutJS
 *
 * @brief - This function implements the BC,Business Component: <b>PosGiftCardCashOutJS</b>\n
 * Persistence:<b>not persisted</b>\n
 * This BC cash out a gift card!\n
 * In a workflow sequence it is called:<b>PosGiftCardCashOutJS</b>\n
 * In java script it should be called:<b>PosGiftCardCashOutJS</b>\n
 * Return - rval - True for successful execution or False for failure.
 */
function PosGiftCardCashOutJS(flags)
{
	/* SDE-2275 -only allow GC Cashout when operator is logged in */
	var bLogged = PosCheckState("POS_OpLogged");
	if (!bLogged) {
		PosShowMessage("MSG_BC_NOTSALEMODE");
		return false;
	}

	PosResetPinpad();
	if(!PosIsInSaleMode() || !PosNotATransactionInProgress(false)) {
		return(false);
	}
   	PosSetSessionProperty("CASHLESS_TENDERID","11");

	if(PosCashOut()) {
		if((typeof(PosIsCoinDispenseLoadedJS) == 'function') && (typeof(PosDispenseCoins) == 'function')) {
			if(PosIsCoinDispenseLoadedJS()) {
			   	var value=rootCtx.get("CASHLESS_VALUE");
				value=value.substr(value.length-2);
				if(Number(value) != 0) {
					PosDispenseCoins(value);
				}
			}
		}
		PosOpenCashDrawer(false);
		var CashLessStr=rootCtx.get(CASHLESS_GIFT_CARD);
    CashLessStr = CashLessStr + "<totalGC>" + CashLessStr.split("|")[10] + "</totalGC>";   // NVS-1163
    PosCreateReport("CUSTOMDATA","CashoutReceipt#USReceiptReports",flags,CashLessStr + "|PASSARG:first");
    PosCreateReport("CUSTOMDATA","CashoutReceipt#USReceiptReports",flags,CashLessStr + "|PASSARG:second");

		// SDE-2198
		CleanCashlessState();

	} else {
		var CashLessStr=rootCtx.get(CASHLESS_GIFT_CARD);
    CashLessStr = CashLessStr + "<totalGC>" + CashLessStr.split("|")[8] + "</totalGC>";   // NVS-1163
		if((CashLessStr != null) && (CashLessStr != "")) {
               /* SDE-2606 -check the auth if it's valid */
               args =CashLessStr.split("@");
               auth =args[3];
               if (auth > 0) {
                    PosCreateReport("CUSTOMDATA","BalanceReceipt#USReceiptReports",flags,CashLessStr);
               }
		}
	}
	return(true);
}

/* following function appears to be unused - Alan 12-26-2013 */
/**PosCashOutJS
 *
 * @brief - This function implements the BC,Business Component: <b>PosCashOutJS</b>\n
 * Persistence:<b>not persisted</b>\n
 * This BC do cash out!\n
 * In a workflow sequence it is called:<b>PosCashOutJS</b>\n
 * In java script it should be called:<b>PosCashOutJS</b>\n
 * Return - rval - True for successful execution or False for failure.
 */
function PosCashOutJS(flags)
{
	if(!PosIsInSaleMode() || !PosNotATransactionInProgress(false)) {
		return(false);
	}

   	PosSetSessionProperty("CASHLESS_TENDERID","10");

	if(PosCashOut()) {
		if((typeof(PosIsCoinDispenseLoadedJS) == 'function') && (typeof(PosDispenseCoins) == 'function')) {
			if(PosIsCoinDispenseLoadedJS()) {
			   	var value=rootCtx.get("CASHLESS_VALUE");
				value=value.substr(value.length-2);
				if(Number(value) != 0) {
					PosDispenseCoins(value);
				}
			}
		}
		PosOpenCashDrawer(false);
		var CashLessStr=rootCtx.get(CASHLESS_CASHOUT);
		PosCreateReport("CUSTOMDATA","CashoutReceipt#USReceiptReports",flags,CashLessStr);
	} else {
		var CashLessStr=rootCtx.get(CASHLESS_CASHOUT);
		if((CashLessStr != null) && (CashLessStr != "")) {
			PosCreateReport("CUSTOMDATA","BalanceReceipt#USReceiptReports",flags,CashLessStr);
		}
	}
	return(true);
}

/**PosGiftCardBalanceJS
 *
 * @brief - This BC gets the gift card balance
 * Return - rval - true if it got the balance
 */
function PosGiftCardBalanceJS(flags)
{
	PosResetPinpad();
	var CashLessStr=GCBalanceJS();
	if(null == CashLessStr) {
		return false;
	}
	CashLessStr = CashLessStr + "<totalGC>" + CashLessStr.split("|")[8] + "</totalGC>";   // NVS-1163
	PosCreateReport("CUSTOMDATA","BalanceReceipt#USReceiptReports",flags,CashLessStr);
	PosSetSessionProperty("Cashless3CutoverRequired", "true", true);
	return true;
}

/** ResetCashlessJS
 *
 * @brief - Reset pinpad
 * Return - true if it suceeed
 */
function ResetCashlessJS()
{
	return ResetEverest();
}


/** SiletResetCashlessJS
 *
 * @brief - Reset pinpad, but no status dialog box show up
 * Return - true if it suceeed
 */
function SiletResetCashlessJS(){
	var result;

      // If eSocket.POS
	if (PosIsCashlessLoadedJS()) {
	    	// Set online
		result=npTCLEvalEx("Everest_Operation 1 0 0");
		if(Number(result) >= 0) {
			result=true;
		} else {
                  result=false;
		}
	} else {
            result=false;
	}

	return result;
}
/* signed aut version 9-9076
 * authority id = coe
 * authority level = 40
 * authority name = NewPOS COE developer
 * group = npi
 * validity = 2010-04-18
 * signature type = slash_star
 * time stamp (GMT) = Wed Jan 31 01:28:44 2018
 * certificate = 393735312d3739343700a3740fdff14546aef6c9e206028482c65f3916003db3e6ad27cf023796065c77b91f5baeda56a307f2ecb6a7391bf1fae6350010
 * =================================================================================================================================
*/
