/** 
 * @file BusinessComponentsCSO.nps
 * @brief This NPS file implements BusinessComponentsCSO Initialiation. This is the main entry of CSL for CSO.
 *
 * @addtogroup 	CSL The NewPOS Core Script Lybrary (CSL)
 *
 * Copyright (C) 2011 McDonalds Corp. All rights reserved. 
 *
 * $Source: /NewPOS/SRC/npkiosk/cvs/npkiosk/PosData/nps/BusinessComponentsCSO.nps,v $
 * $Revision: 1.133 $
 * $Date: 2013/09/02 17:37:40 $ (of revision)
 * $Author: pflorencio $ (of revision)
 * @{
 */


executeScript("BusinessComponents.nps",true);
// NPS-22908 POS-456 - Optimized Auto EVM
executeScript("CSL_AutoEvmCSO.nps",true);
executeScript("CSL_CSO.nps",true);

/*global variables for reading RFm configuration*/

// CSO-332 - Overwrite store-db parameters using pos-db settings
var Country = (storeDbXml.StoreDB.StoreProfile.StoreDetails.Country).toUpperCase();

var SHARED_CTX = new Array(); 
var sessionSale = new SessionContext;

// CSO-583 - Multiple sites with Kiosk non functional and displaying a white screen - AUNP-110
// Default value is Monday (1)
var GLOBAL_CURRENT_WEEK_DAY = 1;

/**
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 */
var grillObjectArray = null;
var grillRecord = new GrillOperationRecord();

var csoItemGroupManager = lGetItemGroupManager();

lAddScriptConfigurationsToContext();

/**PosDoOperatorLogout
 *
 * @brief - This BC calls PosDoOperatorLogout_CSL and, if defined, onLogoutFinalize
 * @param remote - String - Optional, "true" to indicate a remote logout (default:"false")
 * @hook <i>onLogoutFinalize()</i> -  invoked after PosDoOperatorLogout_CSL
 */
function PosDoOperatorLogout(remote) {
	var ret = PosDoOperatorLogout_CSL("true");
	if(typeof(onLogoutFinalize) == "function") {
		ret = onLogoutFinalize();
	}
	return ret;
}

/**
 * @brief - Function to load the initial definitions
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lAddScriptConfigurationsToContext() {
	SHARED_CTX["KEY_PRODUCT_CODE"] = "ProductCode";
	
	SHARED_CTX["KEY_WF_CSO_DOCANCELORDER"] = "WF_CSO_DoVoidSale";
	SHARED_CTX["KEY_WF_CSO_DOBACK"] = "WF_CSO_DoBack";
	SHARED_CTX["KEY_WF_CSO_UPDATESHAREDCONTEXT"] = "WF_CSO_UpdateSharedContext $Action $Key $Value";
	SHARED_CTX["KEY_WF_CSO_SHOWLANGUAGES"] = "WF_CSO_ShowLanguages";
	SHARED_CTX["KEY_WF_CSO_GETPRODUCTPRICES"] = "WF_CSO_GetProductPrices $ProductCodes";
	SHARED_CTX["KEY_WF_CSO_SETLANGUAGE"] = "WF_CSO_UISetLanguage $CountryId $Language";
	SHARED_CTX["KEY_WF_CSO_DOSALE"] = "WF_CSO_DoSale $ProductCode";
	SHARED_CTX["KEY_WF_CSO_DOSALEREDEEM"] = "WF_CSO_DoSale_Redeem $ProductCode $BarCode";
	SHARED_CTX["KEY_WF_CSO_DOCLONEITEM"] = "WF_CSO_DoCloneItem $ItemIndex $BarCode";
	SHARED_CTX["KEY_WF_CSO_GOHOME"] = "WF_CSO_GoHome";
	SHARED_CTX["KEY_WF_CSO_SHOWCUSTOMIZESCREEN"] = "WF_CSO_ShowCustomizeScreen $ItemIndex";
	SHARED_CTX["KEY_WF_CSO_CUSTOMIZEPRODUCTCOMPONENT"] = "WF_CSO_CustomizeProductComponent $CompIndex";
	SHARED_CTX["KEY_WF_CSO_CLEARGRILL"] = "WF_CSO_ClearGrill";
	SHARED_CTX["KEY_WF_CSO_DOGRILLEND"] = "WF_CSO_DoGrillEnd $Type";
	SHARED_CTX["KEY_WF_CSO_DOCHANGECHOICE"] = "WF_CSO_DoChangeChoice $OriginProduct $NewProduct";
	SHARED_CTX["KEY_WF_CSO_DOGRILLADDREMOVE"] = "WF_CSO_DoGrillAddRemove $ItemIndex $Oper";
	SHARED_CTX["KEY_WF_CSO_DOGRILLADDREMOVEALL"] = "WF_CSO_DoGrillAddRemoveAll $ItemIndex $Oper";
	SHARED_CTX["KEY_WF_CSO_SETGRILLMODIFIER"] = "WF_CSO_SetGrillModifier $ItemIndex $Bit";
	SHARED_CTX["KEY_WF_CSO_DOREDEEMBARCODE"] = "WF_CSO_DoRedeemBarCode $BarCode";
	SHARED_CTX["KEY_WF_CSO_SETDELIVERYLATER"] = "WF_CSO_SetDeliveryLater $Index $Later";
	SHARED_CTX["KEY_WF_CSO_ORDERTIMEOUT"] = "WF_CSO_OrderTimeOut";
	SHARED_CTX["KEY_WF_CSO_DECREASEQUANTITY"] = "WF_CSO_DecreaseQuantity $ItemIndex";
	SHARED_CTX["KEY_WF_CSO_SHOWPRICE"] = "WF_CSO_ShowPrice";
	SHARED_CTX["KEY_WF_CSO_SWITCHUI"] = "WF_CSO_SwitchUI";
	
	// NPS-8384 - Kiosk GUI - Enable Portion-Based Configuration Options on the "Full" Customization Screen
	SHARED_CTX["KEY_WF_CSO_ADDREMOVEPORTIONS"] = "WF_CSO_AddRemovePortions $ItemIndex $Oper";
	
	// NPS-8385 Kiosk GUI - Enable a Swap Configuration Option on the Full Customization Screen.
	SHARED_CTX["KEY_WF_CSO_SWAPINGREDIENT"] = "WF_CSO_SwapIngredient $OriginalItem $NewItem";
	
	// NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
	SHARED_CTX["KEY_WF_CSO_FORWARDORDERTOFC"] = "WF_CSO_ForwardOrderToFC";
	
	//NPS-9457: Redirect Customer to FC for Issues with Kiosk Generated Barcode - 5691038
	SHARED_CTX["KEY_WF_CSO_SETSALEPROPERTY"] = "WF_CSO_SetSaleProperty $Name $Value";
	
	// SDO-6068 - CSO - Local French Promotion - Ability to validate promotion properties
	// SDO-6162 - CSO - Local French Promotion - FR1. Ability to display local promotions - I have a coupon - Drop 2
	SHARED_CTX["KEY_WF_CSO_REDEEMLOCALPROMOTIONBARCODE"] = "WF_CSO_RedeemLocalPromotionBarcode $BarCode $Mode";
    
	// SDO-6072 - CSO - Local French Promotion - Ability to load new promotion configurations without the need of application restart
	SHARED_CTX["KEY_WF_CSO_RELOADPROMOTIONS"] = "WF_CSO_ReloadPromotions";

	// SDO-6068 - CSO - Local French Promotion - Ability to allow the customer to access the promotion conditions and its offers
	SHARED_CTX["KEY_WF_CSO_FINISHPROMOTION"] = "WF_CSO_FinishPromotion $ChoiceCodes $OfferCodes $AuxData";
	
	// SDO-6067 - CSO - Local French Promotion - FR1. Ability to display local promotions
	SHARED_CTX["KEY_WF_CSO_LOCALPROMOTIONAVAILABILITY"] = "WF_CSO_LocalPromotionAvailability";
	SHARED_CTX["KEY_WF_CSO_SHOWLOCALPROMOTIONS"] = "WF_CSO_ShowLocalPromotions";
	SHARED_CTX["KEY_WF_CSO_FINISHITEMGROUPCUSTOMIZATION"] = "WF_CSO_FinishItemGroupCustomization";

	//SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
	SHARED_CTX["KEY_WF_CSO_SHOWSCREEN"] = "WF_CSO_ShowScreen $Number $ButtonNumber";
	SHARED_CTX["KEY_BUTTON_NUMBER"] = "ButtonNumber";
	SHARED_CTX["KEY_WF_CSO_DOCLONEITEMGROUP"] = "WF_CSO_DoCloneItemGroup $GroupId";
	
	//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
	SHARED_CTX["KEY_WF_CSO_FINISHLOCALPROMOTIONBARCODEREDEMPTION"] = "WF_CSO_FinishLocalPromotionBarcodeRedemption $BarcodeInfo";
	
	// SDO-6859 - Kiosk Local Promotion - Suggestive Sale does not work when user back from Mccafe tab
	SHARED_CTX["KEY_SCREEN_NUMBER"] = "Number";
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		// --------------------------------------------------------
		// NEW WORKFLOWS FOR NGK APPLICATION
		// --------------------------------------------------------	
		
		SHARED_CTX["WF_NGK_POS_RELOAD"] = "WF_NGK_POSReload";
		
		SHARED_CTX["WF_UI_INITIALIZE"] = "WF_NGK_UIInitialize"; 										// Performs the GUI hand-shake
		SHARED_CTX["WF_DOSALE"] = "WF_NGK_DoSale $ProductCode"; 										// Orders one or more items at once
		SHARED_CTX["WF_UPDATE_SHARED_CONTEXT"] = "WF_NGK_UpdateSharedContext $Action $Key $Value"; 		// Updates the shared context
		SHARED_CTX["WF_ORDER_BASKET_DECREASE_QUANTITY"] = "WF_NGK_DecreaseQuantity $ItemIndex"; 		// Decreases the current quantity in one
		SHARED_CTX["WF_ORDER_BASKET_INCREASE_QUANTITY"] = "WF_NGK_IncreaseQuantity $ItemIndex $PromotionData"; 		// Increases the current quantity in one
		SHARED_CTX["WF_GRILL_MAKE_IT_DEFAULT"] = "WF_NGK_GrillMakeItDefault"; 							// Resets all the performed grill operations
		SHARED_CTX["WF_GRILL_MAKE_IT_PLAIN"] = "WF_NGK_GrillMakeItPlain"; 								// Makes the produt plain based on the minimum configuration
		SHARED_CTX["WF_GRILL_ADDREMOVE"] = "WF_NGK_GrillAddRemove $ItemIndex $Oper";					// Changes the quantity of an ingredient
		// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
		SHARED_CTX["WF_GRILL_ADDREMOVE_PORTION"] = "WF_NGK_GrillAddRemovePortion $ItemIndex $Oper";		// Changes the quantity of a portion based ingredient
		SHARED_CTX["WF_GRILL_SETMODIFIER"] = "WF_NGK_GrillSetModifier $ItemIndex $Bit";					// Sets a grill modifier, such as 1-light or 2-only
		SHARED_CTX["WF_GRILL_INIT"] = "WF_NGK_GrillInitialize $CompIndex";								// Starts the grill process for a specific item
		// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
		// added HasDiscount parameter
		SHARED_CTX["WF_GRILL_SHOW_CUSTOMIZE_SCREEN"] = "WF_NGK_GrillShowCustomizeScreen $ItemIndex $HasDiscount";	// Display the itens which are customizable in a VM or starts the grill directly if it is a single item
		// CSO-256 - NGK - Customization of Products - 7848282
		// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
		SHARED_CTX["WF_GRILL_FINISH"] = "WF_NGK_GrillFinalize $Type"; 									// Finalizes the grill mode - Type=2-Cancel, 3-Save
		SHARED_CTX["WF_SHOW_PREVIOUS_SCREEN_TMP"] = "WF_NGK_ShowCurrentMenu";	 						// Temporary for the POC
		SHARED_CTX["WF_ORDER_TIMEOUT"] = "WF_NGK_OrderTimeout"; 										// Called by the GUI when no user interaction is detected.
		SHARED_CTX["WF_SHOW_MAIN_SCREEN"] = "WF_NGK_ShowMainScreen"; 									// Called when the VML is successfully executed
		SHARED_CTX["WF_SHOW_SCREEN"] = "WF_NGK_ShowScreen $Number $IsMainScreen $ButtonNumber $increaseImages $ButtonsDisplaySequence";			// Called for screen transitions
		SHARED_CTX["WF_SETDELIVERYLATER"] = "WF_NGK_SetDeliveryLater $Index $Later";
		
		// CSO-229 - NGK Support Deliver Early Feature - 7826861
		SHARED_CTX["WF_SETDELIVERYEARLIER"] = "WF_NGK_SetDeliveryEarlier $Index $Earlier";
		SHARED_CTX["WF_ENDDELIVERYEARLIER"] = "WF_NGK_EndDeliveryEarlier $ConfirmChanges";
		
		SHARED_CTX["WF_REDEEMLOCALPROMOTIONBARCODE"] = "WF_NGK_RedeemLocalPromotionBarcode $BarCode $Mode";   // SDO-6068 - CSO - Local French Promotion - Ability to validate promotion properties / SDO-6162 - CSO - Local French Promotion - FR1. Ability to display local promotions - I have a coupon - Drop 2
		SHARED_CTX["WF_RELOADPROMOTIONS"] = "WF_NGK_ReloadPromotions";									// SDO-6072 - CSO - Local French Promotion - Ability to load new promotion configurations without the need of application restart
		SHARED_CTX["WF_FINISHPROMOTION"] = "WF_NGK_FinishPromotion $ChoiceCodes $OfferCodes $AuxData";	// SDO-6068 - CSO - Local French Promotion - Ability to allow the customer to access the promotion conditions and its offers
		SHARED_CTX["WF_LOCALPROMOTIONAVAILABILITY"] = "WF_NGK_LocalPromotionAvailability";				// SDO-6067 - CSO - Local French Promotion - FR1. Ability to display local promotions
		SHARED_CTX["WF_SHOWLOCALPROMOTIONS"] = "WF_NGK_ShowLocalPromotions";							// SDO-6067 - CSO - Local French Promotion - FR1. Ability to display local promotions
		SHARED_CTX["WF_FINISHITEMGROUPCUSTOMIZATION"] = "WF_NGK_FinishItemGroupCustomization";			// SDO-6067 - CSO - Local French Promotion - FR1. Ability to display local promotions
	
		//SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
		SHARED_CTX["WF_SHOWSCREEN"] = "WF_NGK_ShowScreen $Number $ButtonNumber";
		SHARED_CTX["WF_ORDER_BASKET_INCREASE_GROUP_QUANTITY"] = "WF_NGK_IncreaseItemGroupQuantity $GroupId $PromotionData";
	
		//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
		SHARED_CTX["WF_FINISHLOCALPROMOTIONBARCODEREDEMPTION"] = "WF_NGK_FinishLocalPromotionBarcodeRedemption $BarcodeInfo";

		// CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
		SHARED_CTX["WF_SHOWLOCALPROMOTIONBARCODEREADER"] = "WF_NGK_ShowLocalPromotionBarcodeReader $Source";
		// CSO-41 - NGK v5.3 - Display Nutritional Information - 7160864
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		// CSO-491 - nutrition info pop-up - buttons add to cart and signal
		// CSO-508 - Remove SIGNAL button of allergen/nutritional popup when opened during value meal loop, suggestive selling, upselling and promotions.
		SHARED_CTX["KEY_WF_NGK_SHOWNUTRITIONALINFORMATION"] = "WF_NGK_ShowNutritionalInformation $ProductCodes $IgnoreChoices $CartIndex $AllowAllergens $AllowSale";

		// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		SHARED_CTX["KEY_WF_NGK_GRILL_BYB"] = "WF_NGK_GrillBYB $ProductCode $CartIndex";
		SHARED_CTX["KEY_WF_SHOW_SCREEN_PRE_BUILT"] = "WF_NGK_ShowScreenBYBPreBuilts $Number";

		// CSO-108 - GB - CR for DA - NP6.1.21- NGK - Does not support coupons like GUI 4 did - button on the bottom bar - 7325231
		SHARED_CTX["WF_DOSALEHOME"] = "WF_NGK_DoSaleHome $ProductCode $IsPromotionProduct"; 								// Orders one or more items at once and return to the home screen

		// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
		SHARED_CTX["WF_NGK_DOTENDER"] = "WF_NGK_DoTender $TenderId $WelcomeMsg";
		SHARED_CTX["WF_MOA_CHECKIN_CONTINUE"] = "WF_NGK_MOA_CHECKIN_CONTINUE";
		SHARED_CTX["WF_NGK_DO_CANCEL_ORDER"] = "WF_NGK_BackFromSaleType";

		// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
		SHARED_CTX["WF_NGK_FINISH_DISCOUNT_BY_ITEM"] = "WF_NGK_FinishDiscountByItem $ProductCode $Rate $Barcode $Outage";

		// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
		SHARED_CTX["WF_SCAN_MOA_OFFER"] = "WF_NGK_ScanMoaOffer";
		SHARED_CTX["WF_REDEEM_MOA_OFFER"] = "WF_NGK_RedeemMoaOffer $BarCode $InputMethod $MoaOfferKind";
		SHARED_CTX["WF_SHOW_OFFER_WELCOME"] = "WF_NGK_ShowOfferWelcome";
		SHARED_CTX["WF_REMOVE_OFFER"] = "WF_NGK_RemoveOffer $offerId";
		SHARED_CTX["WF_REMOVE_PROMOTION"] = "WF_NGK_RemovePromotion $PromoId $PromoCounter";
		
		// CSO-259 - NGK Modify EVM Choices After Adding to Basket - 7810667
		// CSO-745 - POS-340 - Order Basket Redesign - new param $Qty
		SHARED_CTX["WF_START_UPDATE_CHOICE_VML"] = "WF_NGK_START_UPDATE_CHOICE_VML $ItemIndex $Qty";
		// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191 - new parameter: ComponentsList
		// CSO-745 - POS-340 - Order Basket Redesign - new parameter: IsOrderReview
		SHARED_CTX["WF_FINISH_UPDATE_CHOICE_VML"] = "WF_NGK_FINISH_UPDATE_CHOICE_VML $ItemIndex $ChoiceList $GrillsList $IsOrderReview";
		
		// CSO-256 - NGK - Customization of Products - 7848282
		// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
		SHARED_CTX["WF_PRODUCT_CUSTOMIZATION_FINALIZE"] = "WF_NGK_ProductCustomizationFinalize $Result";
		
		// CSO-261 - NGK - ADA - Magnifier implementation - 7736790
		SHARED_CTX["WF_MAGNIFIER_ENABLED"] = "WF_NGK_MagnifierEnabled";

		//  CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191 - new parameter
		SHARED_CTX["WF_DO_MAKE_MEAL"] = "WF_NGK_DoMakeMeal $SizeSelected $SellSequence";
		
		// CSO-282 - CYT Redesign - 8024409
		SHARED_CTX["KEY_WF_CYT_SHOW_SCREEN"] = "WF_NGK_CYTShowScreen $ProductType $GroupFilter";
		
		// CSO-327 - CYT import via scanner - 8052105
		SHARED_CTX["WF_CYT_SHOW_BARCODE_READER"] = "WF_NGK_CYTShowBarcodeReader";
		SHARED_CTX["WF_CYT_SCAN_BARCODE"] = "WF_NGK_CYTScanBarcode $Barcode";

		// CSO-520 - [6.1.23.MR3 Bundle 4.2][NGK 5.13] Coupon landing screen buttons do not honour working hour configuration
		SHARED_CTX["WF_NGK_SHOW_MONOPOLY"] = "WF_NGK_ShowMonopoly $Number $IsMainScreen $ButtonNumber $increaseImages";
		
		// CSO-521 - [6.1.23.MR2 Bundle 4.2][NGK 5.13] Unable to turn off the "I have a coupon" button
		SHARED_CTX["WF_COUPON_LANDING_SCREEN"] = "WF_NGK_ShowCouponsLandingScreen";

		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		// CSO-443 - Implement the Allergen Signal screen
		SHARED_CTX["WF_ALLERGENS_SHOW_SIGNAL_SCREEN"] = "WF_NGK_ShowAllergensSignalScreen";
		// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
		// CSO-506 - Implement allergen notification pop up if a product in cart already contains allergen
		SHARED_CTX["WF_ALLERGENS_UPDATE_SELECTION"] = "WF_NGK_UpdateSelectedAllergens $SelectedAllergens";
		
		// CSO-463 - NGK-US FDA Mandate - Calorie Calculation for Meals - 8263717
		SHARED_CTX["WF_ROUND_ENERGY_VALUE"] = "WF_NGK_RoundEnergyValue $EnergyValue $RoundingRequestID";

		// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
		SHARED_CTX["WF_GRILL_EXECUTE_OPERATION"] = "WF_NGK_GrillExecuteOperation $Operation $Index $CurrentGrill $CostInclusive";
		// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
		SHARED_CTX["WF_SIDE_SALE_EXECUTE_OPERATION"] = "WF_NGK_SideSaleExecuteOperation $Operation $ProdInfo $GrillList $IsOrderReview $ProductSellSequence";
		
		// CSO-745 - POS-340 - Order Basket Redesign
		SHARED_CTX["WF_NGK_SHOW_ORDER_REVIEW"] = "WF_NGK_ShowOrderReview $ChangeEatingLocation $PromotionData"; 
		SHARED_CTX["WF_NGK_REMOVE_ITEM"] = "WF_NGK_RemoveItem $ItemIndex";
		SHARED_CTX["WF_NGK_PERFORM_DONATION_ITEM"] = "WF_NGK_PERFORM_DONATION $donationButton";
		
		// CSO-766 - POS-362 - Customer Choice on NGK (8618134)		
		SHARED_CTX["WF_NGK_RETRIEVE_CYT_INFO"] = "WF_NGK_RetrieveCYTInfo $ProductCode $SellSequence";
		SHARED_CTX["WF_NGK_RETRIEVE_CHOICES_UPPRICES"] = "WF_NGK_RetrieveChoicesUpPrices $Products $VmSeq $ChoiceSeq $IdRequest";
		// CSO-894 - POS-71 - Improved Customer Journey at Kiosk for Digital Offers and Enhanced Promotions
		SHARED_CTX["WF_NGK_GET_PROMOTION_STEP"] = "WF_NGK_GetPromotionStep $PromotionID $PromotionData $IsOnEditMode";
		SHARED_CTX["WF_NGK_GET_OFFER_STEP"] = "WF_NGK_GetOfferStep $OfferID $CustomerID $PromotionData $IsOnEditMode";
		SHARED_CTX["WF_NGK_VOID_PROMOTION_AND_ITEMS"] = "WF_NGK_VoidPromotionAndItems $PromotionID $PromotionCounter $PromotionData";
		SHARED_CTX["WF_NGK_CHECK_LIMITS_AND_VALIDATE_PROMOTION"] = "WF_NGK_CheckLimitsAndValidatePromotion $JSONPromotions $PromotionData $Mode";
		SHARED_CTX["WF_NGK_INCREASE_DEAL_QUANTITY"] = "WF_NGK_IncreaseDealQuantity $DealId $PromotionCounter $PromotionData";
		SHARED_CTX["WF_NGK_SHOW_PROMOTIONS"] = "WF_NGK_ShowPromotions $ScreenNumber $IsMainScreen $ButtonNumber $increaseImages $ShowPromotionScreen";
		SHARED_CTX["WF_NGK_GET_PROMOTION_ID_BY_BARCODE"] = "WF_NGK_GetPromotionIdByBarcode $Barcode $Mode";
		SHARED_CTX["WF_NGK_GET_GENERAL_PROMOTIONS"] = "WF_NGK_GetGeneralPromotions $ShowPromotionScreen";
		SHARED_CTX["WF_NGK_ACTIVATE_DEALS"] = "WF_NGK_ActivateDeals $IsPromotion $PromotionArray $FillSteps";
		SHARED_CTX["WF_NGK_CHECK_VIRTUAL_DEALS_LIMITS"] = "WF_NGK_CheckVirtualDealsLimits $PromotionData $DealId $NumberVirtualDeals";
		SHARED_CTX["WF_NGK_RELEASE_RESERVED_PROMOTIONS"] = "WF_NGK_ReleaseReservedPromotions $PromotionIds";
		SHARED_CTX["WF_NGK_RELEASE_RESERVED_OFFERS"] = "WF_NGK_ReleaseReservedOffers";
		SHARED_CTX["WF_NGK_PROMOTION_UNDO"] = "WF_NGK_PromotionUndo $PromotionId $PromotionCounter";
		SHARED_CTX["WF_NGK_VALIDATE_DEALS_ON_REMOVE"] = "WF_NGK_ValidateDealsOnRemove $DealId $IsPromotion";
		SHARED_CTX["WF_NGK_SHOW_PROMOTION_BARCODE_READER"] = "WF_NGK_ShowPromotionBarcodeReader";
		
		// CSO-972 - [6.1.29-SP8][GQT][COE] When we make an order in Kiosk and if you want to go back and edit it,then if we select any product it is showing the message PRODUCT IS NOT ACTIVE
		SHARED_CTX["KEY_WF_NGK_FINAL_SHOW_ORDER_REVIEW"] = "WF_NGK_FinalShowOrderReview";		

		// CSD-47 - Ungated Scan - scan on all screens
		SHARED_CTX["WF_NGK_REDEEM_GENERIC_BARCODE"] = "WF_NGK_RedeemGenericBarcode $Barcode $Origin";
		SHARED_CTX["WF_UNGATED_SCAN_RETURN_SCREEN"] = "WF_NGK_UngatedScanReturnScreen";
		SHARED_CTX["WF_UNGATED_SCAN_REFRESH_CART"] = "WF_NGK_UngatedScanRefreshCart";
		
		SHARED_CTX["WF_UNGATED_SCAN_BRUTE_FORCE_FINISHED"] = "WF_NGK_UngatedScanBruteForceFinished";
        // CSO-1199 - POS-466 - NGK Closed Loop Prize Redemption (Monopoly)
        SHARED_CTX["WF_SHOW_MONOPOLY_BARCODE_READER"] = "WF_NGK_ShowMonopolyBarcodeReader $KeypadOnly";
        SHARED_CTX["WF_EVALUATE_MONOPOLY_CODE"] = "WF_NGK_EvaluateMonopolyCode $Barcode";
        SHARED_CTX["WF_CANCEL_MONOPOLY"] = "WF_NGK_CancelMonopoly";
		
		//CSO-1258 - NGK 5.17 - Mobile Offers - the "any product" offers are no longer supported
		SHARED_CTX["WF_NGK_UPDATE_PROMOTION_PRODUCTS"] = "WF_NGK_UpdatePromotionProducts $ProductCodes";
		
		//CSO-1258 - NGK 5.17 - Mobile Offers - the "any product" offers are no longer supported
		SHARED_CTX["WF_NGK_UPDATE_PROMOTION_PRODUCTS"] = "WF_NGK_UpdatePromotionProducts $ProductCodes";
		
		PosCSOSendSharedContextJS();
	}
}

/**
 * @brief Helper function to retrieve the list of the product prices
 *
 * @param ProductList - String - Content the products in choice separeted by | or null
 * @return - view - XML event.
 * <?xml version="1.0" encoding="UTF-8"?>
 * <Event type="ASYNC" name="DATA_PRODUCT_PRICES">	<Payload>
 * 	<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
 *		<Product>
 *			<Parameter name="1" value="2.50"/>
 *		</Product>]]>
 *	</Payload>
 * </Event>
 * @author - Wilson
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOGetProductPricesJS(productList) {
	var hlp = new BusinessObjectHelper();
	var products;
	
	if (productList != null) {
		if (productList.indexOf("|") < 0) {
			// NPS-11712 - DA - NP6.1.21 - CSO NP6 stopped working after latest RFM package - ACSI1341670
			var file = hlp.PosReadFile(productList);
			if (file != undefined && file != "")
			{
				if (file.indexOf("|") < 0) {
					file += "|";
				}
				
				productList = file;
			}
			else
			{
				productList += "|";
			}
		}
		products = productList.split("|");
	}
 	
	//SDO-3295 - CSO - CData tag must only be part of the events which have an embedded XML
	var xmlResult = new StringBuffer();
	xmlResult.append(GLOBAL_UTF8_PROLOG_XML);
	xmlResult.append("<Event type=\"ASYNC\" name=\"DAT_SYS_PRODUCT_PRICES\">\n");
	xmlResult.append("\t\t<Product>\n");

	for each (prd in products) {
		if (prd == "") {
			break;
		}
		
		if (sessionSale.get("IS_NGK") == "true")
		{
			// KFG - Added protection for NGK POC.
			if (csoProductInfo[prd] != null) { 
				price = csoProductInfo[prd].price.getCurrent();
				xmlResult.append("\t\t\t<Parameter name=\""+ prd + "\" value=\"" + price + "\"/>\n");
			}
		}
		else
		{
			// NPS-11712 - DA - NP6.1.21 - CSO NP6 stopped working after latest RFM package - ACSI1341670
			try
			{
				price = getUpdatedPrice(prd);
				xmlResult.append("\t\t\t<Parameter name=\""+ prd + "\" value=\"" + price + "\"/>\n");
			}
			catch (ex)
			{
				API.dbg("ERROR: Could not update product " + prd + " price, due to: " + ex);
			}
		}
	}
	xmlResult.append("\t\t</Product>");
	xmlResult.append("</Event>");
	
	return PosSendUICmd(xmlResult.toString());
	
	function getProductPriceBySaleType(productCode) {
		var productXml = csoProductInfo[productCode].xmlNode;
		var saleType = orderFormatter().formatSaleType(hlp.getSaleType());

		return productXml.PriceList.PriceTag.Pricing.(@priceCode == saleType).Price;
	}
	
	function getUpdatedPrice(productCode, isChoice, maxDepth, depth, referenceProductCode) {

		var productXml = csoProductInfo[productCode].xmlNode;
		var price;
		var componentXml;
		var choiceXml;
		
		if (productXml.@statusCode != "ACTIVE") return 0.0;
		
		price = Number(getProductPriceBySaleType(productCode));

		if (typeof isChoice === "undefined") {
			isChoice = false;
		}
		if (typeof depth === "undefined") {
			depth = 1;
		}
		if (typeof maxDepth === "undefined") {
			maxDepth = 4;
		}

		if (depth === maxDepth) return price;
		
		if (isChoice) {
			if (productXml.Composition.Component != undefined) {
				componentXml = productXml.Composition.Component.(ProductCode == referenceProductCode && CostInclusive.toString() == "false");
				
				if (componentXml != undefined){
					price += Number(getUpdatedPrice(componentXml.ProductCode.toString(), false, maxDepth, depth + 1));
				}
			}
			if (productXml.Choices.Component != undefined){
				choiceXml = productXml.Choices.Component.(ProductCode == referenceProductCode && CostInclusive.toString() == "false");
				
				if (choiceXml  != undefined){
					price += Number(getUpdatedPrice(choiceXml.ProductCode.toString(), true, maxDepth, depth + 1, choiceXml.ReferenceProduct.toString()));
				}
			}
		}
		else {
			for each (var component in productXml.Composition.Component) {
				if (component.CostInclusive.toString() == "false"){
					price += lGetMultiplicativeFactor(component) * Number(getUpdatedPrice(component.ProductCode.toString(), false, maxDepth, depth + 1));
				}
			}
			for each (var choice in productXml.Choices.Component) {
				if (choice.CostInclusive.toString() == "false"){
					price += lGetMultiplicativeFactor(choice) * Number(getUpdatedPrice(choice.ProductCode.toString(), true, maxDepth, depth + 1, choice.ReferenceProduct.toString()));
				}
			}
		}
		
		return price;
	}
	
	//NPS-10164 - Kiosk GUI 4 - Drop 2 - Happy Meals not showing combined price - ACSI0780963
	function lGetMultiplicativeFactor(componentXml){
		var defaultQuantity = Number(componentXml.DefaultQuantity);
		var chargeThreshold = Number(componentXml.ChargeThreshold);
		
		return defaultQuantity - chargeThreshold;
	}
}

/**
 * @brief - Calculate the product price based on the price combination rules
 * @param - productCode: product whose price will be calculated
 * @param - addBYBExtraPrice: true if the BYBAutoSelections should be checked and
			added to the price, false otherwise.
 * @return - The product combined price as a string
 * @author - Vladimir Dobroff
 * @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996 
 * @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
 */
function lGetProductCombinedPrice(productCode, addBYBExtraPrice, preSelected)
{
	var productInfo = csoProductInfo[productCode];
	
	if (!productInfo || !productInfo.isValid)
	{
		API.dbg("lGetProductCombinedPrice - Invalid product code: " + productCode);
		return "0.00";
	}
	
	var isCCM = lIsCCM(productInfo.xmlNode);
	var combinationRule = lGetProductPriceCombinationRule(productCode);
	
	// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	if (addBYBExtraPrice != undefined)
	{
		var price = new BigDecimal(lGetProductFixedPrice(productCode, addBYBExtraPrice));
	}
	else
	{
		var price = new BigDecimal(lGetProductFixedPrice(productCode));
	}
	
	if (combinationRule == "RULE4")
	{
		price = lCalculateCCMInitialPrice(productCode, preSelected);
		return price.toString();
	}
	//If the CSOCombineToVMPrice parameter is defined as true in the base product, use rule 1
	else if (combinationRule == "RULE1")
	{
		price = price.add(new BigDecimal(lGetProductFixedPrice(lGetCSOReferenceProduct(productCode), isCCM)));
		return price.toString();
	}
	//If the CSOCombineToVMPrice parameter is defined as true in at least one choice / inner choice, use rule 2
	else if (combinationRule == "RULE2")
	{	
		price = price.add(new BigDecimal(lGetCSOProductAdditionalPrice(productCode, isCCM)));
		return price.toString();
	}
	//If the ReferenceProduct is defined in at least one choice / inner choice, use rule 3
	else if (combinationRule == "RULE3")
	{
		price = price.add(new BigDecimal(lGetNewPosProductAdditionalPrice(productCode, isCCM)));
		return price.toString();
	}
	
	//Fallback. Return the base product price without adding any reference product price
	return price.toString();
}

function lCalculateCCMInitialPrice(productCode, anchor)
{	
	var price = "0.00";
	var productInfo = csoProductInfo[productCode];

	if (!productInfo || !productInfo.isValid)
		return price;
	
	//Initial CCM prices will NOT be displayed when CCM is configured with any of the options defined with escalating percent rates to reduce price
	if(productInfo.xmlNode.PriceList.PricingMethod != null && productInfo.xmlNode.PriceList.PricingMethod != undefined && productInfo.xmlNode.PriceList.PricingMethod != "REGULAR_PRICE")
	{
		API.dbg("lCalculateCCMInitialPrice - Price of CCM code[" + productCode + "] skiped due to price method " + productInfo.xmlNode.PriceList.PricingMethod);
		return "";
	}
	
	// add CCM Price
	var productPrice = new BigDecimal(lGetPriceTagValueBySaleType(productCode));

	// add non cost inclusive components in the price 
	for each (var component in productInfo.xmlNode.Composition.Component) {
		if (component.CostInclusive.toString() == "false"){
			var multiplier = new BigDecimal(lGetMultiplicativeFactor(component));
			var componentUnitPrice = new BigDecimal(lGetProductFixedPrice(component.ProductCode.toString()));
			productPrice = productPrice.add(multiplier.multiply(componentUnitPrice));
		}
	}
	
	// add non cost inclusive choices in the price [use ccm reference product]
	for each(var choice in productInfo.xmlNode.Choices.Component) 
	{
		if(!choice.CostInclusive || choice.CostInclusive.toString() == "true")
			continue; 
		
		// consider only mandatory choices;
		var multiplier = new BigDecimal(
			choice.FlexibleChoice.toString() == "true" ? 
			choice.MinQuantity.toString() : 
			choice.DefaultQuantity.toString()
		);
		
		var referenceCode = undefined;

		// in case of ccms with anchor product filled, use anchor instead ccm reference product
		// check whether anchor product matches options contained in anchor choice
		if(anchor != undefined && choice.Anchor != undefined && choice.Anchor.toString() == "true")
		{
			var anchorChoiceInfo = csoProductInfo[choice.ProductCode.toString()];
			if(anchorChoiceInfo != undefined)
			{
				var anchorProduct = anchorChoiceInfo.xmlNode.Composition.Component.ProductCode.contains(anchor.Product.@code.toString());
				if(anchorProduct)
				{
					referenceCode = anchor.Product.@code.toString();
				}
			}
		}
				
		if(!referenceCode)
		{ 
			referenceCode = lGetCSOCCMBaseProduct(choice.ProductCode.toString());
		}

		//Initial CCM prices will NOT be displayed when one or more CCM Choices are not configured with “Base product” reference
		if(!referenceCode){
			API.dbg("lCalculateCCMInitialPrice - Price of CCM code[" + productCode + "] skiped. Base product not found for choice " + choice.ProductCode.toString());
			return "";
		}
		
		var choiceUnitPrice = new BigDecimal(lGetPriceTagValueBySaleType(referenceCode));
		productPrice = productPrice.add(multiplier.multiply(choiceUnitPrice));
	}

	price = productPrice.toString();
	return price;
}

/**
* @brief - Get the price combination rule that should be used for a particular product
* @return - "NONE" - Only the product fixed price should be calculated (include it's own price and any component / inner component
*                    whose price is not included and do not depend of a choice)
*           "RULE1" - Consider the product fixed price and only the CSOReferenceProductCode fixed price that is defined in it's own sturcture
*           "RULE2" - Consider the product fixed price and the combined price of all the CSOReferenceProductCode defined in it's choices / inner choices
*                     Note that the price of the CSOReferenceProductCode will be calculated using this same rule recursively
*           "RULE3" - Same as RULE2, but instead of CSOReferenceProductCode will use the NewPos ReferenceProduct
                    - This rule will have precedence over the others when the NewPos Suppress Discount is enabled
* @author - Vladimir Dobroff
* @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
* @modified - NGK 5.6 - CSO-79 - NGK- Use Existing NP6 Suppress Discount Feature - 7376320
*/
function lGetProductPriceCombinationRule(productCode)
{
	var combinationRule = "NONE";

	if(csoProductInfo[productCode] != undefined && lIsCCM(csoProductInfo[productCode].xmlNode) && !checkHidePrice(productCode))
	{
		combinationRule = "RULE4";
	}
	//CSO-79 - NGK- Use Existing NP6 Suppress Discount Feature - 7376320
	else if (isNewPosSuppressDiscountEnabled() && isNewPosReferenceProductDefinedInChoices(productCode))
	{	
		//If supress discount is enabled, the RULE3 has precedence over the others.
		//The discount can only be suppressed if the NewPos reference product is configured.
		combinationRule = "RULE3";
	}
	else if (isCSOCombineToVMPriceDefined(productCode))
	{
		combinationRule = "RULE1";
	}
	else if (isCSOCombineToVMPriceDefinedInChoices(productCode))
	{
		combinationRule = "RULE2";
	}
	else if (isNewPosReferenceProductDefinedInChoices(productCode))
	{
		combinationRule = "RULE3";
	}
	
	return combinationRule;
}

/**
* @brief - Get the product price defined in the PriceList.PriceTag.Pricing tag from product-db.xml
* @return - string with product price. Will return "0.00" if the price is not defined.
* @author - Paulo Florencio, Vladimir Dobroff
* @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
*/
function lGetPriceTagValueBySaleType(productCode)
{
	if (!csoProductInfo[productCode] || !csoProductInfo[productCode].isValid)
	{
		return "0.00";
	}

	var productXml = csoProductInfo[productCode].xmlNode;
	var saleType = orderFormatter().formatSaleType(hlp.getSaleType());
	// CSD-205 - Customization does not work when the price tag of a component has new lines
	var priceXml = productXml.PriceList.PriceTag.Pricing.(@priceCode == saleType).Price.toString().replace(/\s+/g, "");
	
	//Check for invalid sale type and empty price tag
	if (!priceXml.toString()) return "0.00";
	
	return priceXml.toString();
}

/**
* @brief - Get the difference between the default quantity and the charge threshold of a component. 
* @return - Number representing the difference. If the difference is negative, will return zero
* @author - Paulo Florencio, Vladimir Dobroff
* @since - NPS-10164 - Kiosk GUI 4 - Drop 2 - Happy Meals not showing combined price - ACSI0780963
*        - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
*/
function lGetMultiplicativeFactor(componentXml, isCCM){
	var isFlexibleChoice = isCCM && componentXml.FlexibleChoice.toString().toLowerCase() == "true" ;
	var defaultQuantity = isFlexibleChoice ? Number(componentXml.MinQuantity) :  Number(componentXml.DefaultQuantity);
	var chargeThreshold = Number(componentXml.ChargeThreshold);
	
	var diff = defaultQuantity - chargeThreshold;
	if (diff < 0) diff = 0;
	
	return diff;
}

/**
* @brief - The product fixed price is defined by the sum of the prices of all it's components / inner components 
*          that do not require a choice and whose cost is not included
* @param - productCode: product whose price will be calculated
* @param - addBYBExtraPrice: true if the BYBAutoSelections should be checked and
		   added to the price, false otherwise.
* @return - string with product price. Will return "0.00" if the product is invalid.
* @author - Vladimir Dobroff
* @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
* @modified - CSO-91 - [NGKv5.3] Bottled Milk drink in Happy Meal loop shows negative uplift amount which should not be displayed
*           - Added support to Auto Choice
* @modified - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
*/
function lGetProductFixedPrice(productCode, addBYBExtraPrice, isCCM)
{
	if (!productCode)
	{
		return "0.00";
	}
	
	var productInfo = csoProductInfo[productCode];

	if (!productInfo || !productInfo.isValid)
	{
		return "0.00";
	}
	
	var price = "0.00";
	
	//Products of type CHOICE are not included in the fixed price, unless it is an auto choice.
	if (productInfo.xmlNode.@productClass.toString() == "CHOICE")
	{
		//CSO-91 - [NGKv5.3] Bottled Milk drink in Happy Meal loop shows negative uplift amount which should not be displayed
		var choicePrice = new BigDecimal("0.00");
		var components = productInfo.xmlNode.Composition.Component;
		
		for each (var component in components)
		{
			//Check if it is an auto choice
			if (Number(component.DefaultQuantity) > 0)
			{
				if (component.CostInclusive.toString() == "false")
				{
					choicePrice = new BigDecimal(lGetProductFixedPrice(component.ProductCode.toString()));
				}
				else
				{
					choicePrice = new BigDecimal(lGetPriceTagValueBySaleType(productCode));
				}
				
				break;
			}
		}
		
		price = choicePrice.toString();
	}
	else
	{
		var productPrice = new BigDecimal(lGetPriceTagValueBySaleType(productCode));
		var components = productInfo.xmlNode.Composition.Component;
		
		for each (var component in components) {
			if (component.CostInclusive.toString() == "false") 
			{
				var multiplier = new BigDecimal(lGetMultiplicativeFactor(component));
				var componentUnitPrice = new BigDecimal(lGetProductFixedPrice(component.ProductCode.toString()));
				
				productPrice = productPrice.add(multiplier.multiply(componentUnitPrice));
			}
		}
		
		//CSO-91 - [NGKv5.3] Bottled Milk drink in Happy Meal loop shows negative uplift amount which should not be displayed
		var choices = productInfo.xmlNode.Choices.Component;

		for each (var choice in choices) {
			if (choice.CostInclusive.toString() == "false") 
			{
				var multiplier = new BigDecimal(lGetMultiplicativeFactor(choice, isCCM));
				var choiceUnitPrice = new BigDecimal(lGetProductFixedPrice(choice.ProductCode.toString()));
				productPrice = productPrice.add(multiplier.multiply(choiceUnitPrice));
			}
		}
		
		// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
		if (addBYBExtraPrice != undefined && addBYBExtraPrice && productInfo.cytVersion && productInfo.cytVersion != 2)
		{
			if (productInfo.isBybPreBuilt &&
				productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection") != undefined)
			{
				var bybAutoSelection = productInfo.xmlNode.CustomParameters.Parameter.(@name == "BYBAutoSelection").@value.toString();

				for each (var component in components){
					productPrice = productPrice.add(getBYBExtraPrice(bybAutoSelection, component.ProductCode.toString(), new BigDecimal(component.MaxQuantity.toString()), new BigDecimal(component.ChargeThreshold.toString())));
				}
				
				var canAdds = productInfo.xmlNode.CanAdds.Component;
				for each (var canAdd in canAdds){
					productPrice = productPrice.add(getBYBExtraPrice(bybAutoSelection, canAdd.ProductCode.toString(), new BigDecimal(canAdd.MaxQuantity.toString()), new BigDecimal(canAdd.ChargeThreshold.toString())));
				}
			}
		}
		
		price = productPrice.toString();
	}
	
	return price;
	
	/**
	 * @brief - This function calculates the extra price of a component based on the BYBAutoSelection parameter.
	 * @param - autoSelection: The BYBAutoSelection for the product
	 * @param - productCode: The product code for the component
	 * @param - maxQuantity: The product maximum quantity for the component
	 * @param - chargeThreshold: The charge threshold for the component.
	 * @return - The extra price.
	 * @author - Vivian Cury
	 * @since - CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
	 * @modified - SDO-10221 - NGK 5.91 - Price inconsistency for portion-based products with invalid configurations on BYB Phase 1
	 */
	function getBYBExtraPrice(autoSelection, productCode, maxQuantity, chargeThreshold)
	{
		var extraPrice = new BigDecimal("0.0");
		
		if (autoSelection.indexOf(productCode) >= 0)
		{
			var productSelection = autoSelection.substring(autoSelection.indexOf(productCode));
			if (productSelection.indexOf("|") >= 0)
			{
				productSelection = productSelection.substring(0, productSelection.indexOf("|"));
			}
			
			var selections = productSelection.split(":");
			var qty;
			if (selections.length > 1)
			{
				qty = new BigDecimal(selections[1]);
				// SDO-10221 - NGK 5.91 - Price inconsistency for portion-based products with invalid configurations on BYB Phase 1
				// Must verify maximum quantity of this product.
				if (qty > maxQuantity)
				{
					qty = new BigDecimal(maxQuantity);
				}
			}
			else
			{
				qty = new BigDecimal("1");
			}
			
			if (qty > chargeThreshold)
			{
				var prodPrice = new BigDecimal(lGetProductFixedPrice(productCode));
				extraPrice = extraPrice.add(prodPrice.multiply(qty.subtract(chargeThreshold)));
			}
		}
		
		return extraPrice;
	}
}

/**
* @brief - Get the CSOReferenceProductCode of a certain product
* @return - string with the product code of the reference product. Will return null if the reference product cannot be retrieved or if it is invalid.
* @author - Vladimir Dobroff
* @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
*/
function lGetCSOReferenceProduct(productCode)
{
	if (!productCode)
	{
		return null;
	}

	var productInfo = csoProductInfo[productCode];

	if (productInfo && productInfo.isValid)
	{
		if (isCSOCombineToVMPriceDefined(productCode))
		{
			var CSOReferenceProductCode = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOReferenceProductCode").@value.toString();
			
			if (CSOReferenceProductCode)
			{
				var refProductInfo = csoProductInfo[CSOReferenceProductCode];
				
				if (refProductInfo && refProductInfo.isValid)
				{
					return CSOReferenceProductCode;
				}
			}
		}
	}
	
	return null;
}



function lGetCSOCCMBaseProduct(productCode)
{
	if (!productCode)
	{
		return null;
	}

	var productInfo = csoProductInfo[productCode];
	
	if (productInfo && productInfo.isValid)
	{
		var CSOReferenceProductCode = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCCMBaseProduct").@value.toString();
		
		if (CSOReferenceProductCode)
		{			
			var refProductInfo = csoProductInfo[CSOReferenceProductCode];
			
			if (refProductInfo && refProductInfo.isValid)
			{
				return CSOReferenceProductCode;
			}
		}
	}
	
	return null;
}


/**
* @brief - Caculates the additional price of a product using the CSO reference products found in it's choices / inner choices.
* @return - string with the additional price. Will return "0.00" if the product is invalid
* @author - Vladimir Dobroff
* @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
*/
function lGetCSOProductAdditionalPrice(productCode, isCCM)
{
	if (!productCode)
	{
		return "0.00";
	}

	var productInfo = csoProductInfo[productCode];

	if (productInfo && productInfo.isValid)
	{
		var additionalPrice = new BigDecimal("0.00");
		
		//if the product is a choice, check if it has a reference product.
		if (productInfo.xmlNode.productClass == "CHOICE")
		{
			if (isCSOCombineToVMPriceDefined(productCode))
			{
				var referenceProduct = lGetCSOReferenceProduct(productCode);
				
				if (referenceProduct)
				{							
					var multiplier = new BigDecimal(lGetMultiplicativeFactor(choice));
					
					var value = new BigDecimal(lGetProductFixedPrice(referenceProduct));
					value = value.add(new BigDecimal(lGetCSOProductAdditionalPrice(referenceProduct)));
					
					additionalPrice = additionalPrice.add(multiplier.multiply(value));
				}
			}
		}
		else
		{
			for each (var component in productInfo.xmlNode.Composition.Component) {
				if (component.CostInclusive.toString() == "false")
				{
					var multiplier = new BigDecimal(lGetMultiplicativeFactor(component));
					var value = new BigDecimal(lGetCSOProductAdditionalPrice(component.ProductCode.toString()));
					
					additionalPrice = additionalPrice.add(multiplier.multiply(value));
				}
			}
			for each (var choice in productInfo.xmlNode.Choices.Component) {
				if (choice.CostInclusive.toString() == "false"){
					if (isCSOCombineToVMPriceDefined(choice.ProductCode.toString()))
					{
						var referenceProduct = lGetCSOReferenceProduct(choice.ProductCode.toString());
						
						if (referenceProduct)
						{							
							var multiplier = new BigDecimal(lGetMultiplicativeFactor(choice, isCCM));
							
							var value = new BigDecimal(lGetProductFixedPrice(referenceProduct));
							value = value.add(new BigDecimal(lGetCSOProductAdditionalPrice(referenceProduct)));
							
							additionalPrice = additionalPrice.add(multiplier.multiply(value));
						}
					}
				}
			}
		}
		
		return additionalPrice.toString();
	}
	
	return "0.00";
}

/**
* @brief - Caculates the additional price of a product using the New Pos reference products found in it's choices / inner choices.
* @return - string with the additional price. Will return "0.00" if the product is invalid
* @author - Vladimir Dobroff
* @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
*/
function lGetNewPosProductAdditionalPrice(productCode, isCCM)
{
	if (!productCode || !csoProductInfo[productCode] || !csoProductInfo[productCode].isValid)
	{
		return "0.00";
	}
	
	var productInfo = csoProductInfo[productCode];
	var productXml = productInfo.xmlNode;
	
	//Since the choice additional price depends of the reference product defined in the parent product, return zero in this case
	if (productInfo.xmlNode.productClass == "CHOICE")
	{
		return "0.00";
	}
	
	var additionalPrice = new BigDecimal("0.00");
	
	for each (var component in productXml.Composition.Component)
	{
		if (component.CostInclusive.toString() == "false")
		{
			var multiplier = new BigDecimal(lGetMultiplicativeFactor(component));
			var value = new BigDecimal(lGetNewPosProductAdditionalPrice(component.ProductCode.toString()));
			
			additionalPrice = additionalPrice.add(multiplier.multiply(value));
		}
	}
	for each (var choice in productXml.Choices.Component)
	{
		if (choice.CostInclusive.toString() == "false")
		{
			if (choice.ReferenceProduct && choice.ReferenceProduct.toString())
			{
				
				var multiplier = new BigDecimal(lGetMultiplicativeFactor(choice, isCCM));				
				//Get the unit price of the reference product (fixed price + additional price)
				var value = new BigDecimal(lGetProductFixedPrice(choice.ReferenceProduct.toString()));
				value = value.add(new BigDecimal(lGetNewPosProductAdditionalPrice(choice.ReferenceProduct.toString())));
			
				additionalPrice = additionalPrice.add(multiplier.multiply(value));
			}
		}
	}

	return additionalPrice.toString();
}

/**
* @brief - Check if CSOCombineToVMPrice is defined as true in a particular product
* @return - true if the parameter is defined and is set as true, false otherwise
* @author - Vladimir Dobroff
* @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
*/
function isCSOCombineToVMPriceDefined(productCode)
{
	if (!productCode)
	{
		return false;
	}
	
	var productInfo = csoProductInfo[productCode];

	if (productInfo && productInfo.isValid)
	{
		if (productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCombineToVMPrice").@value == "true")
		{
			return true;
		}
	}
	
	return false;
}

/**
* @brief - Check if CSOCombineToVMPrice is defined as true inside of at least one choice / inner choice of a product
*        - Doesn't consider cost incusive or choice quantities, just check the parameter
* @return - true if the parameter is defined and is set as true, false otherwise
* @author - Vladimir Dobroff
* @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
*/
function isCSOCombineToVMPriceDefinedInChoices(productCode)
{
	if (!productCode)
	{
		return false;
	}

	var productInfo = csoProductInfo[productCode];

	if (productInfo && productInfo.isValid)
	{
		var productXml = productInfo.xmlNode;
	
		for each (var component in productXml.Composition.Component)
		{
			if (isCSOCombineToVMPriceDefinedInChoices(component.ProductCode))
			{
				return true;
			}
		}

		for each (var choice in productXml.Choices.Component)
		{
			if (isCSOCombineToVMPriceDefined(choice.ProductCode)) 
			{
				return true;
			}
			
			if (isCSOCombineToVMPriceDefinedInChoices(choice.ProductCode))
			{
				return true;
			}
		}
	}
	
	return false;
}

/**
* @brief - Check if ReferenceProduct is defined inside of at least one choice / inner choice of a product.
*          Doesn't consider cost incusive or choice quantities, just check if the parameter exists
* @return - true if the parameter exists, false otherwise
* @author - Vladimir Dobroff
* @since - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
*/
function isNewPosReferenceProductDefinedInChoices(productCode)
{
	if (!productCode)
	{
		return false;
	}

	var productInfo = csoProductInfo[productCode];

	if (productInfo && productInfo.isValid)
	{
		var productXml = productInfo.xmlNode;
	
		for each (var component in productXml.Composition.Component)
		{
			if (isNewPosReferenceProductDefinedInChoices(component.ProductCode))
			{
				return true;
			}
		}
		
		for each (var choice in productXml.Choices.Component)
		{
			if (choice.ReferenceProduct.toString())
			{
				return true;
			}
			
			if (isNewPosReferenceProductDefinedInChoices(choice.ProductCode))
			{
				return true;
			}
		}
	}
	
	return false;
}

/**
 *
 * @brief - Resolve the grill operation done on given item
 * @param - itemView: The node of the grill item (from NP Kernel Order view)
 * @return - The grill text that should be shown on Kiosk screen
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 * @modified - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 *           - Separated in two functions so that it can be executed without an ItemView from the NewPos view
 */
function lResolveGrillOperationName(itemView)
{
	if (!itemView) return "";

	var productCode = itemView.productCode.toString();
	//The quantity returned in the NewPos view is relative to the default quantity.
	//To get the current quantity must do the sum below.
	var currentQuantity = (Number(itemView.quantity) + Number(itemView.componentDefaultQtd)).toString();
	var defaultQuantity = itemView.componentDefaultQtd.toString();
	var maximumQuantity = itemView.componentMaxQtd.toString();
	var modifiers = itemView.specialModifiers.toString();
	
	return lResolveGrillOperationNameExtended(productCode, currentQuantity, defaultQuantity, maximumQuantity, modifiers);
}

/**
 *
 * @brief - Resolve the grill operation done on given item
 * @return - The grill text that should be shown on Kiosk screen
 * @author - Christiano Meirelles / Vladimir Dobroff
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 * @modified - CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
 *           - Modified the function so that it can be executed without an ItemView from the NewPos view
 */
function lResolveGrillOperationNameExtended(productCode, currentQuantity, defaultQuantity, maximumQuantity, modifiers)
{
	/* I18N Keys
	CSO_MSG_GRILL_LIGHT=- Light {0}
	CSO_MSG_GRILL_COMMENT=- Make it {0}
	CSO_MSG_GRILL_ADD=- Add {0} {1}
	CSO_MSG_GRILL_PLUS=- Extra {0} {1}
	CSO_MSG_GRILL_NONE=- No {0}
	CSO_MSG_GRILL_REMOVE=- Remove {0} {1}
	NGK_MSG_GRILL_EXTRA=- Extra {0}
	*/
	
	var productInfo = csoProductInfo[productCode.toString()];
	
	if (!productInfo) return "";
	
	var grillName = productInfo.names[sessionSale.get("LANGUAGE")] ? productInfo.names[sessionSale.get("LANGUAGE")].csoName : "";
	
	if (modifiers == "1") {
		return PosCSOI18nGetMessageJS("CSO_MSG_GRILL_LIGHT", grillName);
	}
	
	var defQty = Number(defaultQuantity);
	var qty = Number(currentQuantity);
	
	if (qty > defQty) {
		// CSO-134 - CSO v5 - Enable Grill Portion Based configuration for Can Adds
		var isPortionBased = lCanSetLight(productInfo.xmlNode);
		
		if (productInfo.xmlNode.@productClass == "COMMENT") {
			return PosCSOI18nGetMessageJS("CSO_MSG_GRILL_COMMENT", grillName);
		}
		
		if (defQty == 0) {
			// CSO-134 - CSO v5 - Enable Grill Portion Based configuration for Can Adds
			if (isPortionBased)
			{
				if (sessionSale.get("IS_NGK") == "true")
				{
					// CSO-260 - CR - NGK - Improvements to CYT Phase 1 - 7797958
					// CR - 7797958 - NGK Improvements to CYT Phase 1
					var maxQty = Number(maximumQuantity);
					if (qty == maxQty) {
						return PosCSOI18nGetMessageJS("NGK_MSG_GRILL_EXTRA", grillName);
					}
					else {
						return PosCSOI18nGetMessageJS("CSO_MSG_GRILL_ADD", grillName);				
					}
				}
				else 
				{
					return PosCSOI18nGetMessageJS("NGK_MSG_GRILL_EXTRA", grillName);
				}
			}
			else
			{
				return PosCSOI18nGetMessageJS("CSO_MSG_GRILL_ADD", (qty - defQty).toString(), grillName);
			}
		} else {
			// CSO-134 - CSO v5 - Enable Grill Portion Based configuration for Can Adds
			if (isPortionBased)
			{
				return PosCSOI18nGetMessageJS("NGK_MSG_GRILL_EXTRA", grillName);
			}
			else
			{
				return PosCSOI18nGetMessageJS("CSO_MSG_GRILL_PLUS", (qty - defQty).toString(), grillName);
			}
		}
	} else {
		if (qty == 0) {
			return PosCSOI18nGetMessageJS("CSO_MSG_GRILL_NONE", grillName);
		} else {
			return PosCSOI18nGetMessageJS("CSO_MSG_GRILL_REMOVE", (defQty - qty).toString(), grillName);
		}
	}
	
	return grillName;
}

/**
 *
 * @brief - Decrease one unit of given item
 * @return - True if completed sucessfull
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODecreaseQuantityJS(itemIndex) {
	API.dbg("itemIndex" + itemIndex);
	var indexArray = itemIndex.split("|");
	if(indexArray.length > 1){
		//Decrease quantity of items in a group
		var itemGroup = csoItemGroupManager.getOrderViewItemGroup(indexArray[1]);
		
		if(itemGroup != null){
		
			//Added for NGK - logic to identify the current selected group / product
			if (sessionSale.get("IS_NGK") == "true")
			{
				csoItemGroupManager.setSelectedGroup(itemGroup.groupId);
			}
			
			//Added for NGK - logic to identify the current selected group / product
			if (sessionSale.get("IS_NGK") == "true")
			{
				csoItemGroupManager.resetSelectedGroup();
			
				//If the item has a clone, it will be grouped together in the order basket.
				//In this case, the cloned group should become the selected one after the other removal
				if (csoItemGroupManager.hasClone(itemGroup))
				{
					var clone = csoItemGroupManager.getFirstClone(itemGroup);
				
					if (clone != null)
					{
						csoItemGroupManager.setSelectedGroup(clone.groupId);
					}
				}
			}
			
			// EQA-956 - [November Release][6.1.21RC13HF1][SL 2.80.02a][Local Promotions][Lab 05][FR] Basket total price incorrect after subtracting a Local Promotion coupon
			lRemoveItemGroupDiscount(itemGroup);
			
			csoItemGroupManager.removeOrderViewItemGroupFromOrder(itemGroup);
			csoItemGroupManager.destroyOrderViewItemGroup(itemGroup);
		}
		
		//CSO-745 - POS-340 - Order Basket Redesign 
		//If the order is empty, go to main screen
		var hlp = new BusinessObjectHelper;
		var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		var orderHasItems = false;
		for each (var item in kioskOrderView.Order.Item) {
			if(item.@voided == "false"){
				orderHasItems = true;
				break;
			}
		}
		if(!orderHasItems) {
			PosNGKShowMainScreen();
			// CSD-166 - If a local promotion item is the last one in order and it is removed the kiosk shows an empty order list on order review screen.
			return false;
		}
	
	} else {
	
		//Added for NGK - logic to identify the current selected group / product
		if (sessionSale.get("IS_NGK") == "true")
		{
			csoItemGroupManager.resetSelectedGroup();
		}
	
		//Decrease quantity of an individual item
		PosDoSelIndex(itemIndex);
		
		var hlp = new BusinessObjectHelper;
		var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		
		//CES-2586 - Kiosk GUI 4 - Fatal Error when decreasing the qty - ACSI0874700
		if(kioskOrderView.Order.Item.(@index == itemIndex) == undefined){
			return true;
		}
		
		// CSO-745 - POS-340 - Order Basket Redesign
		if (!sessionSale.get("IS_NGK") == "true")
		{
			if (kioskOrderView.Order.Item.(@index == itemIndex).Product[0].@qty == "1") {
				if (!PosCSOShowBalloonMessageJS('CSO_MSG_DELETE_CONFIRM','MSG_YES','MSG_NO')) {
					return true;
				}
			}
		}
		
		PosDoVoidLine("1");
	}
	
	return true;
	
	//Added for NGK
	function lGetQuantityInsideGroups(kioskOrderView, itemIndex)
	{
		var quantity = 0;
		var item = itemIndex.toString();
	
		for each (var group in kioskOrderView.Order.Group)
		{
			var groupItems = group.@memberIndexes.toString().split("|");
			
			for (var i = 0; i < groupItems.length; i++) 
			{
				if (groupItems[i] == item)
				{
					quantity++;
				}
			}
		}
		
		return quantity;
	}
	
	// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
	// TODO: will have to review this for the multiple products discount feature - if at least one item (different from the one that was selected) has discount keep return true
	function lHasDiscount(kioskOrderView, itemIndex)
	{
		var hasDiscount = false;
		var index=0;
		for each (var item in kioskOrderView.Order.Item) {
			if(Number(item.Product.@qty)!=0) {
				if(index == itemIndex) {
					var tdAmount=new BigDecimal(item.Product.@discountAmount);
					if(tdAmount.compareTo(BigDecimal.ZERO) > 0) {
						hasDiscount=true;
					}
					if(false==hasDiscount) {
						for each (var subitem in kioskOrderView.Order.Item.Product.Product) {
							var tdAmount=new BigDecimal(subitem.@discountAmount);
							if(tdAmount.compareTo(BigDecimal.ZERO) > 0) {
								hasDiscount=true;
							}
						}
					}
					break;
				}
				else {
					index++;
				}
			}
		}
		if(index != itemIndex) {
			// error
			API.dbg("CSO - item not found[" + itemIndex + "] in ["+kioskOrderView.Order+"]");
		}
		return (hasDiscount);
	}
}

 /**
 * @brief Function to set language to be used
 *
 * @param language code.
 * @return List of languages separetaed by "|".
 * @author - Wilson
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOSetLanguageJS(country, language) {
	var xmlResult = new StringBuffer();

	newLanguage = language+"_"+country;
    API.dbg("[CSO - PosSetLanguageJS] Current language: [" + newLanguage + "].");

	sessionSale.set("LANGUAGE", newLanguage);
	PosSetLanguage(country, language);
	xmlResult.append(GLOBAL_UTF8_PROLOG_XML);
	xmlResult.append("<Event type=\"ASYNC\" name=\"DAT_SYS_CURRENT_LANGUAGE\">\n");
	xmlResult.append("\t<Parameter name='I18N' value=\""+newLanguage+"\"/>\n");
	
	// CSO-84 - NGK - APMEA Support for Arabic (Right to Left) - 7364695
	if (sessionSale.get("IS_NGK") == "true")
	{
		var rightToLeftOrientationLanguages = lGetCSOUserInterfaceStringParameter("rightToLeftOrientationLanguageCountry", "");
		
		if (rightToLeftOrientationLanguages != "" &&
			rightToLeftOrientationLanguages.indexOf(newLanguage) >= 0)
		{
			xmlResult.append("\t<Parameter name='FlowDirection' value=\"rightToLeft\"/>\n");
		}
		else
		{
			xmlResult.append("\t<Parameter name='FlowDirection' value=\"leftToRight\"/>\n");
		}
	}
	
    xmlResult.append("\</Event>");
	
	return PosSendUICmd(xmlResult.toString());
}


/**
 * @brief - Sets the default language for the Kiosk (CSO) based on the store-db configured localization.
 * @param - none
 * @return - Always TRUE.
 * @since - NPS-5801
 * @author - Kalil
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
 function PosCSOSetDefaultLanguageJS() {
 
	if (!PosNotATransactionInProgress("false")) {
		// CSO-889 - NGK5.1.14QR5: Hardcoded String Appearing on Kiosk
		PosShowMessage("CSO_MSG_TRANSACTION_IN_PROGRESS");
	}
 
	// CSO-332 - Overwrite store-db parameters using pos-db settings
	var countryId 	= storeDbXml.StoreDB.StoreProfile.Localization.CountryId;	
	var language 	= storeDbXml.StoreDB.StoreProfile.Localization.Language;
	
	if (sessionSale.get("IS_NGK") == "true")
	{
		sessionSale.set("DEFAULT_LANGUAGE", language+"_"+countryId);
	}
	
	API.dbg("INFO_CSO : Reseting to the default language: [" + countryId + "_" + language + "]");
	PosCSOSetLanguageJS(countryId, language);
	return true;
}

 /**
 * @brief Function to display the available languages and wait the selection in order to set the current language
 *
 * @param NONE.
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOLanguageSelectionJS() {
	var langToBeSelected = new Array();
	var btnToBeSelected = new Array();
	
	for each (var language in csoConfigurationInfo.languages) {
		if (language.code.toLowerCase().indexOf("_kiosk") > -1) {
			continue;
		}
		
		langToBeSelected.push(new Array(language.name, "flag_" + language.code.split("_")[0] + ".png"));
		btnToBeSelected.push(language.code);
	}

	API.dbg("[CSO - PosCSOLanguageSelectionJS] langToBeSelected = " + langToBeSelected.join("|"));
	API.dbg("[CSO - PosCSOLanguageSelectionJS] btnToBeSelected = " + btnToBeSelected.join("|"));
	
	var selectedLang = PosCSOSendSyncMessageJS("SYNC_DLG", langToBeSelected, btnToBeSelected, "CSO_MSG_SELECT_LANGUAGE");
	if (selectedLang) {
		selectedLang = selectedLang.split("_");
		PosCSOSetLanguageJS(selectedLang[1], selectedLang[0]);
	}

	return true;
}

 /**
 * @brief Function to alternate between available languages
 *
 * @param NONE.
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoSwitchLanguageJS() {
	var useNext = false;

	var curentLanguageCode = sessionSale.get("LANGUAGE");
	if (curentLanguageCode == null) {
	    API.dbg("[CSO - PosCSODoSwitchLanguageJS] curentLanguageCode not set");
		return true;
	}
	
	if (csoConfigurationInfo.languages.length == 1) {
		var selectedLang = csoConfigurationInfo.languages[0].code.split("_");
		API.dbg("[CSO - PosCSODoSwitchLanguageJS] only 1 language available " + selectedLang);
		PosCSOSetLanguageJS(selectedLang[1], selectedLang[0]);
		return true;
	}
	
	for each (var language in csoConfigurationInfo.languages) {
		if (language.code.toLowerCase().indexOf("_kiosk") > -1) {
			continue;
		}
		
		if (language.code == curentLanguageCode) {
		    useNext = true;
			continue;
		}
		
		if (useNext) {
		    var selectedLang = language.code.split("_");
     		API.dbg("[CSO - PosCSODoSwitchLanguageJS] switching to " + selectedLang);
			PosCSOSetLanguageJS(selectedLang[1], selectedLang[0]);
			return true;
		}
	}
	
	//Getting this far means the current language is the last language in the
	//csoConfigurationInfo.languages array so in order to switch we have to find the first kiosk language.
	//
	// NPS-9949 Start Screen --> press change Language - ACSI0639364
	for each (var language in csoConfigurationInfo.languages) {
		if (language.code.toLowerCase().indexOf("_kiosk") > -1) {
			continue;
		}
		if (language.code != curentLanguageCode) {
		    var selectedLang = language.code.split("_");
     		API.dbg("[CSO - PosCSODoSwitchLanguageJS] switching to " + selectedLang);
			PosCSOSetLanguageJS(selectedLang[1], selectedLang[0]);
			return true;
		}
	}
	
	return true;
}

/**
 * @brief Function to select a Zone Area (Table Service)
 * @param zoneId - Zone Area selected
 * @param confirmationScreenNumber - Table Service Confirmation screen number
 * @return - true
 * @Author Leandro
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOSetZoneIdTableService(zoneId, confirmationScreenNumber) {
	sessionSale.set("CONFIRMZONEID", zoneId);
	lAddSharedContext("CONFIRMZONEID", zoneId);
	PosCSODoShowScreenJS(confirmationScreenNumber);
	return true;
}

/**
 * @brief Function to add an item into shared context and send to UI
 * @param key - item to be added 
 * @param value - value to be added
 * @return  true
 * @Author Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lAddSharedContext(key, value) {
	API.dbg("CSO - Adding Shared Context value - key = ["+key+"] - value = ["+value+"]");
	SHARED_CTX[key] = value;
	PosCSOSendSharedContextJS();
	return true;
}

/**
 * @brief Function to remove an item from shared context and send to UI
 * @param key - item to be removed 
 * @return  true
 * @Author Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lRemoveSharedContext(key) {
	API.dbg("CSO - Removing Shared Context value - key = ["+key+"]");
	delete SHARED_CTX[key];
	API.dbg("CSO - Shared Context value removed");
	PosCSOSendSharedContextJS();
	return true;
}

/**
 * @brief Function to check an item's value into shared context
 * @param key - item to be checked
 * @param value - value to be checked
 * @return  true if value is equal to the content of the key in shared context, false otherwise
 * @Author Vivian Cury
 * @since - CSO-70 - NGK French Mobile CheckIn Requirements - 7339563
 * @modified - CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
 */
function PosCSOCheckSharedContext(key, value) {
	
	// CSO-318 - NGK- US Nutrition Enhancement (US Law) - 8022159
	if ((SHARED_CTX == undefined) || (SHARED_CTX == null)) return null;

	//API.dbg("CSO - Checking Shared Context - key: [" + key + "] - value: [" + value + "] - key value: [" + SHARED_CTX[key] + "]");
	
	if (SHARED_CTX[key] === value)
	{
		return true;
	}
	
	return false;
}

/**
 * @brief Function to send the shared context to UI
 * @return  paramList - String - Content the parameters list of shared context
 * @Author Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOSendSharedContextJS() {
	var xmlResult = new StringBuffer();
	xmlResult.append(GLOBAL_UTF8_PROLOG_XML);
	xmlResult.append("<Event type=\"ASYNC\" name=\"DAT_SYS_SHARED_CONTEXT\">\n");
	xmlResult.append("\t\t<SharedContext>\n");
	for (key in SHARED_CTX) {
		xmlResult.append("\t\t\t<Parameter name=\"" + key + "\" value=\"" + SHARED_CTX[key] + "\"/>\n");
	}
	xmlResult.append("\t\t</SharedContext>\n");
	xmlResult.append("</Event>");
    return PosSendUICmd(xmlResult.toString());
}

/**
 * @brief - Update the SHARED_CTX
 * @param - action: The desired action - 'clear', 'remove', 'add'
 * @param - key: The key to be added or removed (this parameter is ignored if the action is 'clear')
 * @param - value: The value to be added (this parameter is ignored if the action is 'clear' or 'add')
 * @author - Christiano Meirelles
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOUpdateSharedContextJS(action, key, value) {

	API.dbg("CSO - PosCSOUpdateSharedContextJS - Action = [" + action + "]");
	
	if (action == "clear") {
		SHARED_CTX = new Array(); 
		API.dbg("CSO - PosCSOUpdateSharedContextJS - Shared Context cleared");
	} else if (action == "remove") {
		delete SHARED_CTX[key];
		API.dbg("CSO - PosCSOUpdateSharedContextJS - Shared Context key removed (key=[" + key + "])");
	} else if (action == "add") {
		SHARED_CTX[key] = value;
		API.dbg("CSO - PosCSOUpdateSharedContextJS - Shared Context key added (key=[" + key + "], value=[" + value + "])");
	}
	
	return true;
}

/**
 * @brief - Gets the literal value of a given CSO parameter name.
 * @param - sectionName - name of the section.
 * @param - parameterName - name of the parameter.
 * @param - defaultValue - default value that will be used for the compare in case of not finding the configuration.
 * @param - valueToCheck - value that will be compared to the parametr value
 * @return - true if the parameter value is equal to valueToCheck, false otherwise
 * @author - Vladimir
 * @since - NGK 5.1
 */
function PosCheckSectionParameterValue(sectionName, parameterName, defaultValue, valueToCheck)
{
	var hlp 	= new BusinessObjectHelper;
	var data 	= hlp.findParamInSectionConfig(parameterName, sectionName);
	var rc 		= (data == null ? defaultValue : data);
	
	if (rc == valueToCheck)
	{
		return true;
	}
	
	return false;
}

/**
 * @brief - Gets the integer value of a given CSO parameter name.
 * @param - parameterName - name of the parameter.
 * @param - defaultValue - Default value in case of not finding the configuration.
 * @return - Value for the parameter name.
 * @since - NPS-5801
 * @author - Kalil
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lGetCSOUserInterfaceIntegerParameter(parameterName, defaultValue) {
	var hlp 	= new BusinessObjectHelper;
	var data 	= hlp.findParamInSectionConfig(parameterName, "CSO.UserInterface");
	var rc 		= defaultValue;
	if (data != null) {
		rc = Number(data);
		if (isNaN(rc)) { 
			rc = defaultValue;
			API.dbg("INFO_CSO: Parameter [" + parameterName + "] has NOT been correctly configured [" + data + "], integer value was expected instead, default value will be considered.");
		}
	}
	API.dbg("INFO_CSO : CSO parameter [" + parameterName + "] has been set to [" + rc + "]");
	return rc;
}

/**
 * @brief - Sells a given product code.
 * @return - rval - true if allowed to continue
 * @author - Kalil
 */
function PosCSODoSaleJS(productCode, barcodeString, quantity) {
	var products = productCode.split("|");
	var barcodes = null;
	
	if (barcodeString != null && barcodeString.length > 0) {
		barcodes = barcodeString.split("|");
	}
		
	var totalBeforeDoSale = lGetCurrentTotal();
	
	for (var i=0; i<products.length; i++) {
		var code = products[i];
		var barcode = null;
		if(barcodes != null && barcodes.length > i) {
			barcode = barcodes[i];
		}

		if (!lDoKioskSale(code, barcode, quantity)) {
			return false;
		}
	}
	
	// SQC-4855 - Kiosk V4RC13 - Price should be displayed for components of the Sugestive Selling when jointomenu= true?
	var totalBeforeSuggestiveSelling = lGetCurrentTotal();
	
	// NGK - Suggestive Sale
	if (sessionSale.get("IS_NGK") != "true") {
		//<-- SDO-6121 CSO - Local French Promotion - FR8. Ability to display suggestive selling (Drop 2)
		if(!csoItemGroupManager.isOrderGroupCloning && !csoItemGroupManager.isItemCloning && !csoItemGroupManager.isItemGroupSelling){
			var suggestiveSaleProducts = PosCSOGetSuggestiveSaleProducts(products[0]);

			if(suggestiveSaleProducts.length > 0){
				var itemGroup = null;
				var selectedItemExtract = null;

				for each(ssp in suggestiveSaleProducts){
					if(ssp.joinToMenu){
						itemGroup = csoItemGroupManager.createOrderViewItemGroup();
						itemGroup.canIncrease = true;
						itemGroup.hideGroupTitle = true;
						selectedItemExtract = csoItemGroupManager.getSelectedItemExtract();
						itemGroup.members.push({ code:selectedItemExtract.code, key:selectedItemExtract.key, index:selectedItemExtract.index, showPrice:true, free:false });
						break;
					}
				}

				for each(ssp in suggestiveSaleProducts){
					if(lDoKioskSale(ssp.code, null, null)){
						if(ssp.joinToMenu && itemGroup != null){
							selectedItemExtract = csoItemGroupManager.getSelectedItemExtract();
							itemGroup.members.push({ code:selectedItemExtract.code, key:selectedItemExtract.key, index:selectedItemExtract.index, showPrice:true, free:false });
						}
					}
				}

				if(itemGroup != null) {
					if (itemGroup.members.length < 2){
						csoItemGroupManager.destroyOrderViewItemGroup(itemGroup);
					} else {
						// SQC-4855 - Kiosk V4RC13 - Price should be displayed for components of the Sugestive Selling when jointomenu= true?
						itemGroup.groupPrice = ((new BigDecimal(totalBeforeSuggestiveSelling)).subtract(new BigDecimal(totalBeforeDoSale))).toString();
					}
				}
			}
		}
		//SDO-6121 -->
	}
	
	//Added for NGK - logic to identify the current selected group / product
	if (sessionSale.get("IS_NGK") == "true")
	{
		csoItemGroupManager.resetSelectedGroup();
	}
	
	return true;
	
	function lDoKioskSale(productCode, barcode, quantity) {
		var qty = Number(quantity);
		// Lets check if the quantity was informed.
		if ((quantity != null) && (!isNaN(qty))) {
			// Resets the previous quantity (if any)
			PosDoQuantum(-1);
			// Sets the given quantity (if the quantity is ZERO a void item will be performed when it is not last line)
			PosDoQuantum(qty);
		}
		
		if ((barcode != null) && (barcode.length > 0)) {
			return(PosInsertRedeemableProductIntoOrder(productCode,barcode));
		}
		
		API.dbg("CSO - PosCSODoSaleJS.lDoKioskSale - ProductCode["+productCode+"]");
		
		if(!PosDoChoice(productCode)) {
			// Sale did not end with a choice
			if(PosDoSale(productCode)) {
				return (true);				
			} else {
				API.dbg("CSO - PosCSODoSaleJS.lDoKioskSale fail - ProductCode["+productCode+"]");
				return (false);
			}
		}
		return(true);
	}
	
	function lGetCurrentTotal(){
		var xmlView = new XML(hlp.getCurrentView());
		var total = parseFloat(xmlView.@totalAmount.toString());
		if(isNaN(total)) total = 0.0;
		return total;
	}
}

/**
 * @brief - This BC tenders a sale (fake)
 * @return - rval - true if allowed to continue
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSODoTenderSimulatorJS(tenderId, sleep) {
	function lSleep(seconds)
	{
		var start = new Date().getTime();
		for (var i = 0; i < 1e15; i++) {
			if ((new Date().getTime() - start) > (seconds * 1000))
				break;
		}
	}

	function lSendMessage(code, text)
	{
		var xmlResult = new StringBuffer();
		xmlResult.append(GLOBAL_UTF8_PROLOG_XML);
		xmlResult.append("<Event type=\"ASYNC\" name=\"DLG_MSG_START\">");
		xmlResult.append("<Parameter name=\"Code\" value=\"" + code + "\" />");
		xmlResult.append("<Parameter name=\"Msg\" value=\"" + text + "\" />");
		xmlResult.append("<Parameter name=\"ButtonMsg\" value=\"\" />");
		xmlResult.append("</Event>");
		PosSendUICmd(xmlResult.toString());
	}

	for (i = 0; i < 7; i++)
	{
		lSleep(sleep);
		lSendMessage(i, "Message: [" + i + "]");
	}
	
	return PosCSODoTenderJS(tenderId, -1, 3, 'CSO_MSG_RETRY', 'CSO_MSG_YES', 'CSO_MSG_NO');
}

/**
 * @brief - Check if the current order has the total amout equals to zero
 * @return - True if the current order has the total amout equals to zero, false otherwise
 * @author - Christiano Meirelles
 */
function PosCSOIsZeroAmoutOrderJS() {
	var hlp = new BusinessObjectHelper;
	var saleView = new XML(hlp.getCurrentView());

	if (Number(saleView.@totalAmount) > 0) {
		return false;
	}
	
	return true;
}

/**
 * @brief - Check if the current order has only redemmable products and tender the order.
 * @return - True if order has been tendered successfully. False otherwise
 * @author - Christiano Meirelles
 */
function PosCSODoTenderZeroAmoutOrderJS(tenderId) {
	if (!PosCSOIsZeroAmoutOrderJS()) {
		API.dbg("ERROR: PosCSODoTenderZeroAmoutOrderJS - Current order  has an amount greater than zero.");
		return false;
	}

	var hlp = new BusinessObjectHelper;
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));	
	if (kioskOrderView.Order.Item.(@isRedeemable == false).length() > 0) {
		API.dbg("Current order has no redemable products. Printing pick list to pay at front counter");
		lPrintPickListToPayAtFrontCounter();
		
		return false;
	}
	
	var tenderSucceed = PosDoTender(tenderId, '-1');
	
	if (!tenderSucceed) {
		API.dbg("Tender process FAILED.");
		lPrintPickListToPayAtFrontCounter();
		
		return false;
	}
	return true;
}

/**
 * @brief - This BC tenders a sale
 * @return - rval - true if allowed to continue
 */
function PosCSODoTenderJS(tenderId, amount) {
	
	var eftAttempts;
	var retryTender;
	
	if (tenderId == null) {
		tenderId = sessionSale.get("CSO_TenderId");
		if (tenderId == null || tenderId == "") {
			return false;
		}
	}
		
	if (amount == null) {
		amount = '-1'; // Amount equals '-1' performs an exact tender.
	}
	
	retryTender = false;
	eftAttempts = 0;
	
	do {
	
		eftAttempts++;
	
		ret = PosDoTender(tenderId, amount);
		PosCSODoCloseScreenPopupJS();
		
		// If the tender succeeded.
		if (ret) {
			retryTender = false;
			
		} else {
			//NPS-9788: Enable Kiosk v4 compatibility to NP6.1.19
			if (SHARED_CTX["NEWPOS_VERSION"].indexOf("6.1.16") >= 0 ||
				SHARED_CTX["NEWPOS_VERSION"].indexOf("6.1.17") >= 0 ||
				SHARED_CTX["NEWPOS_VERSION"].indexOf("6.1.18") >= 0 ||
				SHARED_CTX["NEWPOS_VERSION"].indexOf("6.1.19") >= 0)
			{
				retryTender = PosCSOAskSimpleJS('CSO_MSG_RETRY', 'CSO_MSG_YES', 'CSO_MSG_NO');
			} else {
				retryTender = PosCSORetryTenderJS(eftAttempts);
			}
		}
		
	} while (retryTender)
	
	if (ret) {
		API.dbg("Tender process SUCCEEDED.");
		PosCSODoPlaySoundJS("Kiosk_Payment_Prompt");
		sessionSale.set("CSO_TenderId", null);
		
	} else {
		API.dbg("Tender process FAILED.");
	}
	
	return ret;
}

/**
 * @brief - Check if the user chose to cancel the current sale or to pay at the front counter.
 * @returns - True if the user chose to pay at the front counter or false if the user chose to cancel the order.
 * @author - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 */
function PosCSOProcessEFTFailureJS() {
	
	var cancelTender = sessionSale.get("CSO_CancelTender");
	
	sessionSale.set("CSO_TenderId", null);
	
	// Pay at Counter
	if (cancelTender == "false") {
		return true;
	} 
	
	// Cancel the sale
	else {
		PosDoVoidSale('false','false');
		API.dbg("Order has been voided SUCCESSFULLY.");
		return false;
	}
	
}

/**
 * @brief - Shows a screen that allows the user to choose between retrying the cashless payment, paying the order at the counter or canceling the order.
 * @returns - True if the user chose to retry the cashless payment, or false if the user chose to pay at the counter or cancel the order.
 * @param eftAttemps - Number of EFT payments that were attempted.
 * @author - Felipe Armoni
 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
 */
function PosCSORetryTenderJS(eftAttempts) {
	
	var maxEftAttempts = lGetEftMaxAttempts();
	var chosenOption;
	var retValue;
	
	// i18n tags:
	var retryOrCounterMsgLine1 = "CSO_MSG_REROUTE_RETRY_OR_COUNTER_LINE_1";
	var retryOrCounterMsgLine2 = "CSO_MSG_REROUTE_RETRY_OR_COUNTER_LINE_2";
	var retryEftMsg = "CSO_BTN_REROUTE_RETRY_EFT";
	var cancelMsg = "CSO_BTN_REROUTE_RETRY_CANCEL";
	var payAtCounterMsg = "CSO_BTN_REROUTE_RETRY_COUNTER";
	
	if (eftAttempts > maxEftAttempts) {
		chosenOption = lShowTenderRetryScreen(false, retryOrCounterMsgLine1, retryOrCounterMsgLine2, retryEftMsg, cancelMsg, payAtCounterMsg);
		
	} else {
		chosenOption = lShowTenderRetryScreen(true, retryOrCounterMsgLine1, retryOrCounterMsgLine2, retryEftMsg, cancelMsg, payAtCounterMsg);
		
	}
	
	// Retry EFT
	if (chosenOption == 1) {
		retValue = true;
	} 
	
	// Pay at Counter
	else if (chosenOption == 2) {
		retValue = false;
		sessionSale.set("CSO_CancelTender", "false");	
	}
	
	// Cancel Sale
	else if (chosenOption == 3) {
		retValue = false;
		sessionSale.set("CSO_CancelTender", "true");
	} 
	
	return retValue;

	/**
	 * @brief - Get the maximum number of EFT cashless payments attempts that can be made.
	 * @returns - An integer containing the number of attempts.
	 * @author - Felipe Armoni
	 * @since - NPS-8550 - Kiosk GUI - Rerouting of Kiosk orders to the front counter queue.
	 */
	function lGetEftMaxAttempts() {
		var maxAttempts = lGetCSOUserInterfaceIntegerParameter("maxNumberOfEFTAttempts", 3);
		
		if (maxAttempts == undefined) {
			maxAttempts = 3;
		
		} else if (maxAttempts > 9 || maxAttempts < 0) {
			maxAttempts = 3;
		
		} else {
			maxAttempts = parseInt(maxAttempts);
			
		}
		
		return maxAttempts;
	}	
}

function lPrintPickListToPayAtFrontCounter() {
	var hlp 	= new BusinessObjectHelper;
	var curView = hlp.getCurrentView();
	var flag 	= "NOPREVIEW|SAVE";
	var ctx		= new SessionContext;
	if(null == curView) {
		API.dbg("Current view is NULL, nothing to do.");
		return(false);
	}
	
	PosDoVoidSale('false','false');
	API.dbg("Order has been voided SUCCESSFULLY.");
	
	var view = new XML(curView);	
	ctx.set(KEY_REMVIEW,view.toString(),true);
	var showCanceledItems = hlp.findParamInSectionConfig("showCanceledItems","UserInterface");
	var custMsg = hlp.getSysMessage("MSG_PICKLST_CASHLESS_FAILED");
	if (custMsg == "MSG_PICKLST_CASHLESS_FAILED") {
		// Default message //PLE-94
		custMsg = "Take your ticket to the front counter\nto complete your order.";
	}
	//we must select the correct flag for getting the data.
	var storedbPath = "Configurations.Configuration.(@type==\"Store.wide\").Section.(@name==\"Kiosk\").Parameter.(@name==\"ConsolidatedReportPickList\").@value";
	var posdbPath = "Configuration.(@imports==\"Store.wide\").Section.(@name==\"Kiosk\").Parameter.(@name==\"ConsolidatedReportPickList\").@value";
	var consolidate = getConfigValue(storedbPath , posdbPath);

	if(consolidate == "false") {			
		PosCreateReport("VIEW","reportPickList@reports.nps",flag+"|REMOTE",showCanceledItems+":1:"+custMsg);
	} else {
		PosCreateReport("FULLCONSVIEW","reportPickList@reports.nps",flag+"|REMOTE",showCanceledItems+":1:"+custMsg);
	}
	PosShowMessage(custMsg);
	
	return true;
}

/**
 * @brief - Resets the initial states to show the main screen
 * SDO-4295 Note: The transaction is only ended when the workflow: WF_CSO_AskRemoveCard is called by the screen.xml.
 * This workflow should be executed whenever the initial main screen is shown.
 * @author - Fabio Wada
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function PosCSOGoHomeJS(resetLanguage) {

	if (resetLanguage === undefined) resetLanguage = "true";

	if (PosNotATransactionInProgress("false")) {
		if (resetLanguage === "true") {
			PosCSOSetDefaultLanguageJS();
		}
		PosCSODoCloseAllScreenPopupJS();
		PosCSOEndLoopMealJS();
		PosCSOClearHideProductsBySaleTypeJS();
		PosCSODoShowScreenJS(sessionSale.get("baseCSOScreenId"));
		PosCSOCleanVisitedScreensList();
		// SDO-6769 - CSO - Suggestive Selling - Screens that have no suggestive selling configured shows the suggestive selling screen
		PosCSOCleanSale();
		//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
		PosCSOChangeStoredBarcodeStatusJS("AVAILABLE", "true");
		csoItemGroupManager.reset();
		csoGrillOrder = null;
		PosSetSessionProperty("HAS_SUGGESTIVE_SELLING", "false");
		return true;
	}
	return false;
}

/**
 * @brief - Shows product's price on screen
 * @author - Leandro
 * @since - WWR-1170 - The menu item's price displays on the screen even though "WF_CSO_ShowPrice" workflow action is not configured on the "OnActivate" screen event
 */
function PosCSOShowPriceJS()
{	
	//Modified for NGK - Added the product's prices in the message
	if (sessionSale.get("IS_NGK") == "true")
	{
		lSendNGKShowPriceMessage(false);
	}
	else
	{
		// NPS-10718 - Kiosk 4 RC9 HF1 - freeze issue - ACSI0902215
		PosSendUICmd('<Event type="ASYNC" name="DAT_SYS_SHOW_PRICES"/>');
	}
	
	return true;
}

/**
 * @brief - Added for NGK. Sends the DLG_SYS_SHOWPRICE message with the product prices of the current screen.
 *          Only send the message if there is at least one product whoce price should be shown
 * @author - Vladimir
 * @since - CSO-20 - Merge NGK Scripts into Kiosk v4 release
 *        - CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
 *        - CSO-32 - HIDE PRODUCT PRICES BUTTON ENHANCEMENTS - 6994584
 */
function lSendNGKShowPriceMessage(checkOnlyCSODisplayPrice)
{
	var eventXml = new XML('<Event type="ASYNC" name="DLG_SYS_SHOWPRICE"/>');
	var screenXml = new XML('<Screen/>');
	
	//only send the xml if there is at least one button with a price
	var sendXml = false;

	var currentScreenNumber = sessionSale.get("NGK_CURRENT_SCREEN");
	if (!currentScreenNumber) return;
	
	//The NGK_CURRENT_SCREEN may contain more than one screen number (for example, the carrousel)
	var screens = currentScreenNumber.split("|");
	
	for each (var number in screens)
	{
		//Only display prices for screens of type menu (2852)
		if (ngkScreenInfo[number] && ngkScreenInfo[number].xmlNode.@type == "2852")
		{
			screenXml.@number = number;
		
			for each (var button in ngkScreenInfo[number].xmlNode.Button)
			{
				var buttonParameters = button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
				
				for each (var parameter in buttonParameters)
				{
					var baseProductCode = parameter.@value.toString();

					//CSO-33 - Retrofit from v4: IMPLEMENTATION OF THE DELI OF THE DAY - 6994607
					var deliInfo = GetDeliOfTheDayInfo(baseProductCode);
					if (deliInfo) baseProductCode = deliInfo.deliOfTheDayProductCode;

					var productInfo = csoProductInfo[baseProductCode];
					
					//CSO-28 - NGK - Standardise Meal Combine Price Calculation - 7097996
					if (productInfo && productInfo.isValid)
					{
						//CSO-32 - HIDE PRODUCT PRICES BUTTON ENHANCEMENTS - 6994584
						var CSODisplayPrice = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSODisplayPrice").@value.toString();
						
						// CSO-87 - CR - NGK Build Your Burger Functionality - 7351555
						var price = lIsCCM(productInfo.xmlNode) && checkHidePrice(baseProductCode) ? "" : lGetProductCombinedPrice(baseProductCode, true);
						var formattedPrice = lFormatPrice(price);
					
						var buttonsXml = new XML("<Button/>");
						buttonsXml.@number = button.@number.toString();
						buttonsXml.@price = formattedPrice;
					
						//CSO-32 - HIDE PRODUCT PRICES BUTTON ENHANCEMENTS - 6994584
						if (checkOnlyCSODisplayPrice == true)
						{
							if (CSODisplayPrice == "true")
							{
								screenXml.appendChild(buttonsXml);
								sendXml = true;
							}
						}
						else
						{
							//In this case the workflow WF_NGK_UpdateScreen has been defined for the screen, so the 
							//prices should be shown for all the products, unless CSODisplayPrice is set to false
							if (CSODisplayPrice != "false")
							{
								screenXml.appendChild(buttonsXml);
								sendXml = true;
							}
						}
					}
					
				}
			}
			eventXml.appendChild(screenXml);
		}
	}
	
	if (sendXml)
	{
		PosSendUICmd(eventXml.toXMLString());
	}
}

/**
 * @brief  - Check if CCM price shall be hidden
 * @author - Rafael Azevedo
 * @since  - CSO-766 - POS-362 - Customer Choice on NGK (8618134)
 */
function checkHidePrice(productCode)
{
	var productInfo = csoProductInfo[productCode];

	if (!productInfo || !productInfo.isValid)
		return true;
	
	//Initial CCM prices will NOT be displayed when CCM is configured with any of the options defined with escalating percent rates to reduce price
	if(productInfo.xmlNode.PriceList.PricingMethod != null && productInfo.xmlNode.PriceList.PricingMethod != undefined && productInfo.xmlNode.PriceList.PricingMethod != "REGULAR_PRICE")
		return true;
	
	// add non cost inclusive choices in the price [use ccm reference product]
	for each(var choice in productInfo.xmlNode.Choices.Component) 
	{
		if(!choice.CostInclusive || choice.CostInclusive.toString() == "true")
			continue; 
		
		var referenceCode = lGetCSOCCMBaseProduct(choice.ProductCode.toString());
		
		//Initial CCM prices will NOT be displayed when one or more CCM Choices are not configured with “Base product” reference
		if(!referenceCode)
			return true;
	}
	
	return false;
}


/**
 * @brief  - Set the color of the price label on CSO
 * @author - Ferenc Balassa
 * @since  - SDO-5552 CSO - Product Price Display Enhancements
 */
function PosCSOSetColourPriceJS(color){
	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_SET_COLOR_OF_PRICE" />');
	eventXml.appendChild(new XML('<Color>'+color+'</Color>'));
	
	PosSendUICmd(eventXml.toString());
	return true;
}

/**
 * @brief - Formats amount to display
 * @author - Leandro
 * @since - NPS-8100 - Kiosk v3 RC4 must include fixes for 3 previously identified bugs - ACSP9307775
 */
function PosCSOFormatAmountJS(amount) {
	function lGetAmountMask() {
		function lStringReplicate(value, length) {
			var result = "";
			for (var i = 0; i < length; i++) {
				result += value;
			}
			return result;
		}
		
		var decimalSeparator = csoConfigurationInfo.currency.decimalSeparator;
		var thousandSeparator = csoConfigurationInfo.currency.thousandSeparator;
		var currencyDecimals = csoConfigurationInfo.currency.decimalsCount;
		
		if (decimalSeparator == null || thousandSeparator == null || currencyDecimals == null ||
			decimalSeparator == "" || thousandSeparator == "" || currencyDecimals == "")
			return null;
	
		return "###" + thousandSeparator + "###" + thousandSeparator +
			"##0" + decimalSeparator + lStringReplicate("0", currencyDecimals);
	}

	if (amount == null)
		return null;

	var commaIndex = amount.indexOf(',');
	var pointIndex = amount.indexOf('.');
	
	if (commaIndex >= 0 && (pointIndex > commaIndex || pointIndex < 0))
		amount = amount.replace('.', '').replace(',', '.');

	//Modifed for NGK because of a number formatting issue
	if (sessionSale.get("IS_NGK") == "true")
	{
		// NPS-11479 - In coupon promotion with Gui4 we cannot show decimals in price field - ACSI1259136
		// This is now a global function
		var formatedNumber = sFormatCurrency(lGetAmountMask(), Number(amount));
		var currencySymbol = csoConfigurationInfo.currency.symbol;
		formatedNumber = formatedNumber + " " + currencySymbol;
	
		return formatedNumber;
	}
	else
	{
		return trim(API.formatNumber(Number(amount), lGetAmountMask()));
	}
}

/**
 * @brief - Compare two products to see if their components, canAdds and comments are the same when grilled.
 * @param - productCodeA - string 
 * @param - productCodeB - string
 * @returns - True if both products are the same from a grill point of view. Otherwise returns false.
 * @author - Felipe Armoni
 * @since - NPS-8380 Kiosk GUI - Enable Meal Size Selection at the End of the Meal Loop
 */
function lCompareGrillableProducts(productCodeA, productCodeB) {
	
	var productAInfo = csoProductInfo[productCodeA.toString()];
	var productBInfo = csoProductInfo[productCodeB.toString()];
	
	var productA = productAInfo.xmlNode;
	var productB = productBInfo.xmlNode;
	
	if (productAInfo.isGrillable != productBInfo.isGrillable) {
		return false;
	}
	
	if (!lCompareComponentList(productA.Composition.Component, productB.Composition.Component)) {
		return false;
	}
	
	if (!lCompareComponentList(productA.CanAdds.Component, productB.CanAdds.Component)) {
		return false;
	}
	
	if (!lCompareComponentList(productA.Comments.Component, productB.Comments.Component)) {
		return false;
	}
	
	API.dbg("The products: " + productCodeA + " and " + productCodeB + " allow the same grill operations.");
	return true;
	
	function lCompareComponentList(componentListA, componentListB) {
		var itemA, itemB;
		
		if (componentListA.length() != componentListA.length()) {
			return false;
		}
		
		for each (itemA in componentListA) {
			itemB = componentListB.(ProductCode == itemA.ProductCode);
			
			// If A has a component that is not present in B.
			if (itemB == undefined){
				API.dbg("The Component: " + itemA.ProductCode + " of the product " + productCodeA + " is not present in the product " + productCodeB);
				return false;
			}
			
			if (!lCompareComponents(itemA, itemB)) {
				// If the components don't match return false.
				API.dbg("The Component: " + itemA.ProductCode + " of has different characteristics in: " + productCodeA + " and: " + productCodeB);
				return false;
			}
		}
		
		/** 
		 * @brief - Compares two components to see if their child tags: DefaultQuantity, MinQuantity and MaxQuantity are the same.
		 * @param - componentA - XML <Component>
		 * @param - componentB - XML <Component>
		 * @returns - true if the componetns match, otherwise false.
		 * @author - Felipe Armoni.
		 * @since - NPS-8380 Kiosk GUI - Enable Meal Size Selection at the End of the Meal Loop
		 */
		function lCompareComponents(componentA, componentB){
			
			if (componentA.DefaultQuantity != componentB.DefaultQuantity){
				return false;
			} 
			if (componentA.MinQuantity != componentB.MinQuantity){
				return false;
			}
			if (componentA.MaxQuantity != componentB.MaxQuantity) {
				return false;
			}
			
			return true;
		}
	}
}

/**
 * @brief - This function generates an array of GrillObjects. The value of those objects is obtained from the main product code.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 */
function lGenerateGrillObjectArray(mainProductCode) {
	
	var componentsArray = [];
	var grillObject;
	var index;
	var mainProductNode;
	var componentType;
	var component;
	
	grillObjectArray = [];
	
	var mainProductNode = csoProductInfo[mainProductCode.toString()].xmlNode;
	
	// Get the components of this product.
	componentsArray["Composition"] = mainProductNode.Composition.Component;
	componentsArray["CanAdds"] = mainProductNode.CanAdds.Component;
	componentsArray["Comment"] = mainProductNode.Comments.Component;
	
	index = 0;
	
	// Iterate through each component type (Composition, CanAdds and Comments) and add them to the arrays itemsArray and swapItemsArray.
	for (componentType in componentsArray) {
		
		// Iterate through each component.
		for each (component in componentsArray[componentType]) {
			
			// Skip the ingredients that cannot be customized.
			if (!lIsComponentGrillable(component)) {
				continue;
			}
			
			grillObject = new GrillObject();
			grillObject.Index = index;
			grillObject.Code = component.ProductCode;
			grillObject.MinQuantity = component.MinQuantity;
			grillObject.MaxQuantity = component.MaxQuantity;
			grillObject.DefaultQuantity = component.DefaultQuantity;
			grillObject.CurrentQuantity = component.DefaultQuantity;
			grillObject.ChargeThreshold = component.ChargeThreshold;
			grillObject.Modifiers = "0";
			grillObject.Type = componentType;
					
			grillObjectArray[index] = grillObject;
			
			index++;
		}
	}
	
	/**
	 * @brief - Check to see if a given component can be grilled.
	 * @param - component - Component node to be checked
	 * @returns - True if the component can be grilled otherwise false.
	 * @author - Felipe Armoni
	 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	 */
	function lIsComponentGrillable(component) {
		
		var componentNode = csoProductInfo[component.ProductCode.toString()].xmlNode;
		
		if (parseInt(component.MinQuantity) == parseInt(component.MaxQuantity)) {
			return false;
		}
		
		if (componentNode.@statusCode != "ACTIVE") {
			return false;
		}
		
		return true;
	}
}

/**
 * @brief - This object represents one item of the grill screen.
 * @author - Felipe Armoni
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 */
function GrillObject(){
	
	this.Index;
	this.Code;
	this.MinQuantity;
	this.MaxQuantity;
	this.DefaultQuantity;
	this.CurrentQuantity;
	this.ChargeThreshold;
	this.Modifiers;
	this.Type;
}

/**
 * @brief - This object represents a grill operation. It will be used to call the PosDoGrill function.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function GrillOperation() {
	
	this.Operation;
	this.Bit;
	this.Index;
}

/**
 * @brief - This object represents a set of grill operations that was made for a single product.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function GrillOperationSet(code){
	
	this.ProductCode = code;
	this.EndGrillChoice = -1;
	this.GrillOperationsArray = new Array();
}

/**
 * @brief - Adds a new operation to the GrillOperationsArray.
 * @param - operation - Object of the type GrillOperation.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
GrillOperationSet.prototype.addOperation = function(operation) {
	this.GrillOperationsArray.push(operation);
}

/**
 * @brief - Sets the EndGrillChoice property.
 * @param - choice - Integer that represents a grill end choice.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
GrillOperationSet.prototype.setGrillEndChoice = function(choice) {
	this.EndGrillChoice = choice;
}

/**
 * @brief - Sets a given operation to the undefied state.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
GrillOperationSet.prototype.removeLastOperations = function() {
	this.ProductCode = undefined;
	this.EndGrillChoice = undefined;
	this.GrillOperationsArray = undefined;
}

/**
 * @brief - This object represents a set of grill operations for a given product.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function GrillOperationRecord() {
	
	this.CurrentIndex = -1;
	this.GrillOperationsForProduct = [];	
}

/**
 * @brief - Creates a new product array to hold the modifications for it.
 * @param - Product Code.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
GrillOperationRecord.prototype.addProduct = function(code) {
	
	// Increments the current index
	this.CurrentIndex++;
	
	// Creates a new array for that index
	this.GrillOperationsForProduct[this.CurrentIndex] = new GrillOperationSet(code);
}

/**
 * @brief - Removes the last product.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
GrillOperationRecord.prototype.removeLastProduct = function(productCode) {
	if (this.CurrentIndex < 0) {
		return;
	}
	
	var operations = this.GrillOperationsForProduct[this.CurrentIndex];
	
	// If the last product inserted in this array corresponds to the given code, than remove last product from the array.
	if (Number(operations.ProductCode) == Number(productCode)) {
		this.CurrentIndex--;
		this.GrillOperationsForProduct.pop();
	}
}

/**
 * @brief - Adds a new operation for the product that is being currently grilled.
 * @param - operation - Object of the type GrillOperation.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
GrillOperationRecord.prototype.addOperation = function(operation) {
	this.GrillOperationsForProduct[this.CurrentIndex].addOperation(operation);	
}

/**
 * @brief - Sets the EndGrillChoice for a given product. This property represents the button the user clicked when he made the grill
 * Ok, or Cancel.
 * @param - choice - Integer that represents a grill end choice. Its possible values are: 0 - Cancel, 1 - Commit, 2 - Cancel and End
 * and 3 - Commit and End.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
GrillOperationRecord.prototype.registerEndGrillChoice = function(choice) {
	this.GrillOperationsForProduct[this.CurrentIndex].setGrillEndChoice(choice);
}

/**
 * @brief - Substitutes the ProductCode property of a grill operation.
 * Note the substitution only occurs once, therefore this method must be called twice if there are two products with the same 
 * code that need to be substituted.
 * @param - originalProductCode - Current product code that needs to be substituted.
 * @param - newProductCode - New product code.
 * @since - NPS-8380 Kiosk GUI - Enable Meal Size Selection at the End of the Meal Loop
 * @author - Felipe Armoni
 */
GrillOperationRecord.prototype.substituteProduct = function(originalProductCode, newProductCode) {
	
	var i;
	
	for (i in this.GrillOperationsForProduct) {
		
		if (this.GrillOperationsForProduct[i].ProductCode == originalProductCode){
			this.GrillOperationsForProduct[i].ProductCode = newProductCode;
			break;
		}
	}
}

GrillOperationRecord.prototype.isGrillRunning = function() {
	// CSO-39 - NGK v5.3 - Enhancements To Grill Screens Including CanAdds And Comments - 7160840
	// Currently NGK is not using the grill operations record
	if (sessionSale.get("IS_NGK") != "true") {
		if(this.GrillOperationsForProduct.length > 0) {
			return (this.GrillOperationsForProduct[this.GrillOperationsForProduct.length - 1].EndGrillChoice == -1)
		}
	}
	
	return false;
}

/**
 * @brief - Adds a new grill product to the customize first record.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function lAddProductRecord(code) {
	grillRecord.addProduct(code);
}

/**
 * @brief - Removes the last grill product from the customize first record.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function lRemoveLastProductRecord(productCode) {
	grillRecord.removeLastProduct(productCode);
}

/**
 * @brief - Sets the EndGrillChoice for a given product. This property represents the button the user clicked when he made the grill
 * Ok, or Cancel.
 * @param - choice - Integer that represents a grill end choice. Its possible values are: 0 - Cancel, 1 - Commit, 2 - Cancel and End
 * and 3 - Commit and End.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function lRegisterEndGrillChoice(choice) {
	grillRecord.registerEndGrillChoice(choice);
}

/**
 * @brief - This function resets the grill operation.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function lClearCustomizationFirstGrill(mainProductCode) {
	
	lGenerateGrillObjectArray(mainProductCode);
		
	lDoGrillCustomizationFirstOperation("r", "-1", "-1");
}

/**
 * @brief - This function substitutes a product code in the grill operation for another.
 * @since - NPS-8380 Kiosk GUI - Enable Meal Size Selection at the End of the Meal Loop
 * @author - Felipe Armoni
 */
function lSubstituteGrillProductCode(originalProductCode, newProductCode) {
	
	grillRecord.substituteProduct(originalProductCode, newProductCode);
}

/**
 * @brief - This function emulates the behaviour of the PosDoGrillOper function.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function lDoGrillCustomizationFirstOperation(oper, bit, index) {
	
	if (oper == "+" || oper == "p") {
		
		if (grillObjectArray[index].CurrentQuantity < grillObjectArray[index].MaxQuantity) {
			grillObjectArray[index].CurrentQuantity = parseInt(grillObjectArray[index].CurrentQuantity) + 1;
			lRegisterOperation(oper, bit, index);
		}
		
	} else if (oper == "-" || oper == "m") {
		
		if (grillObjectArray[index].CurrentQuantity > grillObjectArray[index].MinQuantity) {
			grillObjectArray[index].CurrentQuantity = parseInt(grillObjectArray[index].CurrentQuantity) - 1;
			lRegisterOperation(oper, bit, index);
		}
		
	} else if (oper == "0" && bit == "1") {
		
		if (grillObjectArray[index].Modifiers == 0) {
			grillObjectArray[index].Modifiers = 1;
			lRegisterOperation(oper, bit, index);
			
		} else if (grillObjectArray[index].Modifiers == 1) {
			grillObjectArray[index].Modifiers = 0;
			grillObjectArray[index].CurrentQuantity = grillObjectArray[index].DefaultQuantity;
			lRegisterOperation(oper, bit, index);
		}
		
	} else if (oper == "c" || oper == "?") {
		grillObjectArray[index].Modifiers = 0;
		grillObjectArray[index].CurrentQuantity = grillObjectArray[index].DefaultQuantity;
		lRegisterOperation(oper, bit, index);
	
	} else if (oper == "r") {
		lRegisterOperation(oper, bit, index);
	}
	
	return;
	
	function lRegisterOperation(oper, bit, index) {
		var grillOper = new GrillOperation();
		
		grillOper.Operation = oper;
		grillOper.Bit = bit;
		grillOper.Index = index;

		grillRecord.addOperation(grillOper);
	}
}

/**
 * @brief - This function adds or removes all of the possible quantity of a given ingredient.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702 
 * @author - Felipe Armoni
 */
function lDoCustomizationFirstAddRemoveAll(oper, index) {
		
	// Remove any Light modifiers
	if (grillObjectArray[index].Modifiers > 0) {
		lDoGrillCustomizationFirstOperation("0", "1", index);
	}
	
	// Add until maximum quantity is reached
	if (oper == "+" || oper == "p") {
		while (grillObjectArray[index].CurrentQuantity < grillObjectArray[index].MaxQuantity) {
			lDoGrillCustomizationFirstOperation("+", "-1", index);
		}
		
	// Remove until minimum quantity is reached
	} else if (oper == "-" || oper == "m") {
		while (grillObjectArray[index].CurrentQuantity > grillObjectArray[index].MinQuantity) {
			lDoGrillCustomizationFirstOperation("-", "-1", index);
		}
	}
}

/**
 * @brief - Execute all of the grill operations that were stored in memory.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function lProcessGrillOperations() {
	
	var grillProduct;
	var grillOper;
	var selectedIndex;
	var previoslySelectedIndexes = new Array();
	var index;
	
	index = lGetLastSoldItemIndex();
	
	// Selects the last sold items to do the grill.
	PosDoSelIndex(index);
	
	for (grillProduct in grillRecord.GrillOperationsForProduct) {
		if (!PosDoGrillStart(sessionSale.get("baseGrillScreenId"))) {
			return false;
		}
		
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		var xmlGrillView = lGetGrillView();
		
		API.dbg("******* GRILL VIEW *************\n" + xmlGrillView.toXMLString());
		
		// Get the product index.
		for each (var originalComponent in xmlGrillView.Component) {
			
			// Check the indexes by the product code and the previously selected indexes (the previosly selected indexes are importante because a value meal
			// can have one or more components of the same code).
			if ((originalComponent.@code == grillRecord.GrillOperationsForProduct[grillProduct].ProductCode) && (lIsValueInArray(previoslySelectedIndexes, originalComponent.@index) == -1)) {
				selectedIndex = originalComponent.@index;
				previoslySelectedIndexes.push(selectedIndex);
				break;
			}
		}
		
		PosDoSelGrillIndex(selectedIndex);
		
		API.dbg("********* SELECTED COMPONENT **********\n" + originalComponent.toXMLString());
		
		// SDO-9374 - [BYB phase 1] - NGK takes about 10 seconds to add 1 BYB with 10 grills to the cart
		xmlGrillView = lGetGrillView();
	
		for each (grillOper in grillRecord.GrillOperationsForProduct[grillProduct].GrillOperationsArray) {
			
			if (grillOper.Operation == "r") {
				// CSO-617 - Replace all references of PosClearGrill by PosClearGrillUnit
				PosClearGrillUnitJS();
			} else {
				PosDoGrillOper(grillOper.Operation, grillOper.Bit, grillOper.Index);
				
			}
		}
		
		ret = PosDoGrillEnd(grillRecord.GrillOperationsForProduct[grillProduct].EndGrillChoice);
	}
	
	lResetOperationRecord();
	
	/**
	 * @brief - Check if an array has a given value.
	 * @returns - (-1) if the array doesn't contains the given value, otherwise it returns the corresponding index.
	 * @param array
	 * @param value
	 * @author - Felipe Armoni
	 * @since NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	 */
	function lIsValueInArray(array, value) {
		var index, foundIndex;
		
		foundIndex = -1;
		for (index in array) {
			
			if (array[index] == value){
				foundIndex = index;
				break;
				
			}
		}
		
		return foundIndex;
	}
	
	/**
	 * @brief - Gets the last sold item index from the POS order view.
	 * @returns - An integer with the greatest itemCode element inside the POS order view.
	 * @author - Felipe Armoni
	 * @since NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
	 */
	function lGetLastSoldItemIndex() {
		
		var orderView = new XML(hlp.getCurrentView());
		var item;
		var index;
		var itemCode;
		
		index = -1;
		
		for each (item in orderView.ItemView){
			
			itemCode = parseInt(item.itemCode);
			
			if (itemCode > index) {
				index = itemCode;
			}
		}
		
		return index;
	}
}

/**
 * @brief - This function resets the grill operation records.
 * @since - NPS-8382 - Kiosk GUI - Enable the option to display the "Full" customization screen when a menu item is selected - 5437702
 * @author - Felipe Armoni
 */
function lResetOperationRecord() {
	grillRecord = new GrillOperationRecord();
}

/**
 *
 * @brief - Gets the literal value of a given CSO parameter name.
 * @param - name - name of the parameter.
 * @param - defaultValue - default value in case of not finding the configuration.
 * @return - Value for the parameter name.
 * @since - NPS-5801
 * @author - Kalil
 * @since - NPS-7449 - Kiosk v3.0 Integration and Configuration Improvements - 4778742
 */
function lGetParameterStr(name, defaultValue) {
	var hlp 	= new BusinessObjectHelper;
	var data 	= hlp.findParamInSectionConfig(name, "CSO.UserInterface");
	var rc 		= (data == null ? defaultValue : data);
	API.dbg("INFO_CSO : CSO parameter [" + name + "] has been set to [" + rc + "]");
	return rc;
}

/**
 * @brief - This function sets the value of a sale property.
 * @param - Name - Name of the property.
 * @param - Value - Value to bet set to the property.
 * @since - NPS-9457: Redirect Customer to FC for Issues with Kiosk Generated Barcode - 5691038
 * @author - Vivian Cury
 */
function PosCSOSetSaleProperty(Name, Value) {
	sessionSale.set(Name, Value);
}

/**
 * @brief - This function checks if the sale property 'PAYATCOUNTER' is set and has the value "true"
 * @since - NPS-9457: Redirect Customer to FC for Issues with Kiosk Generated Barcode - 5691038
 * @author - Vivian Cury
 */
function PosCSOCheckPayAtCounterJS() {
	if (sessionSale.get("PAYATCOUNTER") == "true")
	{
		sessionSale.set("PAYATCOUNTER", "false")
		return true;
	}
	
	return false;
}

/**
 * @brief - This function checks if the NewPos version is the one passed in the Version parameter
 * @since - NPS-9788: Enable Kiosk v4 compatibility to NP6.1.19
 * @author - Vivian Cury
 */
function PosCSOCheckNewPosVersionJS(Version) {
	if (SHARED_CTX["NEWPOS_VERSION"].indexOf(Version) >= 0)
	{
		return true;
	}
	
	return false;
}

/**
 * @brief - This function checks if there is a new local promotion available for reload
 * @since - SDO-6072: CSO - Local French Promotion - Ability to load new promotion configurations without the need of application restart
 * @author - Leandro
 */
function PosCSOReloadLocalPromotionsJS(mediaCode) {
    if (sessionSale.get("NEW_LOCAL_PROMOTIONS_AVAILABLE") != "true") {
        API.dbg("CSO - PosCSOReloadLocalPromotionsJS: No updates for local promotions.");
	
        if (sessionSale.get("IS_NGK") == "true")
        {
            //EQA-563 - Kiosk workflow error: 'WF_NGK_ReloadPromotions' failed.'
            //TODO NGK: Check if this fix should be applied in Kiosk V4
            return true;
        }
        else
        {
            return;
        }
    }
    
    function lSendMessage(code, text)
	{
		var xmlResult = new StringBuffer();
		xmlResult.append(GLOBAL_UTF8_PROLOG_XML);
		xmlResult.append("<Event type=\"ASYNC\" name=\"DLG_MSG_START\">");
		xmlResult.append("<Parameter name=\"Code\" value=\"" + code + "\" />");
		xmlResult.append("<Parameter name=\"Msg\" value=\"" + text + "\" />");
		xmlResult.append("<Parameter name=\"ButtonMsg\" value=\"\" />");
		xmlResult.append("</Event>");
		PosSendUICmd(xmlResult.toString());
	}

    var isInProgress = (!PosNotATransactionInProgress("true"));
    
    if (!isInProgress) {
        API.dbg("CSO - PosCSOReloadLocalPromotionsJS: Updating local promotions...");
        
        lSendMessage(mediaCode, "CSO_LOCALPROMO_APPLYING_CONFIGURATION");
        
        PosCSOLoadLocalPromotionsJS();
        sessionSale.set("NEW_LOCAL_PROMOTIONS_AVAILABLE", "false");
        
        PosCSODoCloseScreenPopupJS();
		// NPS-11603 - [French Local Promotions][Pilot][FR][ACSI1213221]Displaying Promotion Button not dynamic
        PosCSOSendPromoAvailableJS();
        
        API.dbg("CSO - PosCSOReloadLocalPromotionsJS: Updated local promotions.");
    } else {
        API.dbg("CSO - PosCSOReloadLocalPromotionsJS: Skip update, sale in progress.");
    }

	if (sessionSale.get("IS_NGK") == "true")
	{
		//EQA-563 - Kiosk workflow error: 'WF_NGK_ReloadPromotions' failed.'
		//TODO NGK: Check if this fix should be applied in Kiosk V4
		return true;
	}
}

function PosCSOReleaseBarcodeFilesJS() {
	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_RELEASE_BARCODE" />');
	var barcodeFolder = lGetParameterStr("localPromotionsBarcodeFolder", "..\\out\\LocalPromotionsBarcode\\");
	eventXml.appendChild(new XML('<Folder>' + barcodeFolder + '</Folder>'));
	
	return PosSendUICmd(eventXml.toXMLString());
}

/**
 * @brief - This function switchs the current daypart of Kiosk to the previous daypart for a determined period of time
 * @param - timeout - Amount of time in seconds to keep the previous daypart.
 * @since - CSO-2 - CSO v4 - 6595136 - AT - CR for Kiosk 4 - Switch from breakfast to lunch 
 * @author - Vivian Cury
 */
function PosCSOSwitchDaypartJS(timeout) {
	if (timeout == null || timeout == "") {
		timeout = "180";
	}
	
	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_SWITCH_DAYPART" />');
	eventXml.appendChild(new XML('<Timeout>' + timeout + '</Timeout>'));
	
	return PosSendUICmd(eventXml.toXMLString());
}

/**
 * @brief - This function resets the daypart of Kiosk when it was changed by the function 'PosCSOSwitchDaypartJS'
 * @since - CSO-2 - CSO v4 - 6595136 - AT - CR for Kiosk 4 - Switch from breakfast to lunch 
 * @author - Vivian Cury
 */
function PosCSOResetDaypartJS() {
	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_RESET_DAYPART" />');
	
	return PosSendUICmd(eventXml.toXMLString());
}

/**
 * @brief - This function switchs the current daypart of Kiosk to the previous daypart for a determined period of time
 * @since - CSO-328 - NGK Date-specific Override of Working Hours - 7977439
 * @author - Renato Tsuchida
 */
function PosNGKSwitchDaypartWorkingHoursJS() {
	var timeout = lGetCSOUserInterfaceIntegerParameter("daypart.overrideTimeToLive", 180)
	
	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_SWITCH_DAYPART" />');
	eventXml.appendChild(new XML('<Timeout>' + timeout + '</Timeout>'));

	GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE = lGetPreviousDayPartEndTime();
	if (GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE){
		lAddSharedContext("NGK_SWITCH_DAYPART", "true");
		API.dbg("PosNGKSwitchDaypartWorkingHoursJS - Switching DayPart to " + GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE);
	}
	
	return PosSendUICmd(eventXml.toXMLString());
};

/**
 * @brief - This function resets the daypart of Kiosk when it was changed by the function 'PosNGKSwitchDaypartWorkingHoursJS'
 * @since - CSO-328 - NGK Date-specific Override of Working Hours - 7977439
 * @author - Renato Tsuchida
 */
function PosNGKResetDaypartWorkingHoursJS() {
	var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_RESET_DAYPART" />');

	// CSO-328 - NGK Date-specific Override of Working Hours - 7977439
	GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE = null;
	lAddSharedContext("NGK_SWITCH_DAYPART", "false");
	API.dbg("PosNGKResetDaypartWorkingHoursJS - Reseting DayPart to OS date");

	return PosSendUICmd(eventXml.toXMLString());
};


/***************************************************** NGK Functions ***************************************************************************************/

/**
 * @brief - This function return the value of a shared context key without the parameters.
 * @param key - shared context key
 * @since - NGK v1.0 (French pilot)
 * @author - Vladimir Dobroff
 */
function PosNGKGetSharedCtxValueWithoutParameters(key)
{
	if (key != null && SHARED_CTX[key] != null)
	{
		//Remove the parameters if they exist
		var value = SHARED_CTX[key].split(" ");
		
		if ((value.length > 0) && (value[0] != null))
		{
			return value[0];
		}
	}

	return "";
}

 /**
 * @brief - Function to go to the Home screen. This workflow should be executed whenever the initial main screen is shown.
 * @return - true if successful, false otherwise.
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
 function PosNGKDoGoHomeJS()
 {
	 // SQC-9997 [Kiosk 5.16 - Order Basket] Incorrect flow  when select "Edit" (from Order Summary) and "Cancel" 
	PosSetSessionProperty("NGK_IS_ORDER_REVIEW", "false");
	
	//Reset the selected order location
	sessionSale.set("NGK_ORDER_REROUTE", "NONE");
	sessionSale.set("NGK_MOA_PAYMENT", "false");
	sessionSale.set("NGK_MOA_ORDER", "false");
	// SQS-240 - [NGK5.16.1 - Ungated Scan] - After perform a Moa Checkin, if I select "Edit" and "Cancel", kiosk displays Payment Screen instead Order Review
	sessionSale.set("SALETYPEDEFINED", "");
	
	//CSD-189 - Promotion with sale type unavailable after cancel the last order
	//type of sale (0=EAT IN;1=TAKE OUT;2=OTHER)
	PosSetSaleType(0);
	
	// CSO-153 - NGK - Create Percentage Discount Barcodes On NGKiosk - 6998290
	sessionSale.set("NGK_DISCOUNT_BARCODE_APPLIED", null);

	// CSD-58 - FR10 - Display customer's name on the order review screen's header
	sessionSale.set("NGK_WELCOME_MESSAGE",null);
	sessionSale.set("DISPLAYED_PAYMENT_SELECTION","false");
	sessionSale.set("NGK_REINJECT_ORDER","false");
	
	//CSO-420 - [DRM] CYT C2 [KIOSK Offers] - Incorrect error message is displayed and the offer gets removed from the order basket when the same QR code is scanned twice on the KIOSK
 	//CSO-428 - [DRM] CYT C2 [KIOSK Offers] - No confirmation message is displayed for the user when user scans same offer with different QR code or scans a new offer on the KIOSK
	GLOBAL_NGK_LAST_BARCODE = null;
	
	// CSO-546 - POS-243 - GB - CR for NGK - Customisation and Order Basket Enhancements - 7683191
	GLOBAL_NGK_GRILL = null;
	GLOBAL_NGK_GRILL_LAST_EVENT = null;
	GLOBAL_NGK_AUTO_GRILL = null;
 
	// CSO-121 - NGK Allergen and Nutritional Customise enhancement - 7322627
	// CSO-443 - Implement the Allergen Signal screen
	lRemoveSharedContext("NGK_SELECTED_ALLERGENS");

	//Updates the list of the current valid advertisements screens and sends it to the gui if necessary
	PosNGKUpdatePromotionalScreens();
	var promoScreenNumber = PosNGKGetFirstValidPromotionalMainScreen();
	
	if (promoScreenNumber == "-1")
	{
		API.dbg("PosNGKDoGoHomeJS: no valid promo screen (type 2850) defined in screen.xml");
			
		return false;
	}
	
	PosSetSessionProperty("baseCSOScreenId", promoScreenNumber, "false");
	
	//SDO-6120 - CSO - Local French Promotion - FR7. Ability to print and redeem barcodes (Drop 2)
	PosCSOChangeStoredBarcodeStatusJS("AVAILABLE", "true");
	csoItemGroupManager.reset();
	
	return PosNGKDoShowScreenJS(promoScreenNumber);
 }
 
/**
 * @brief - Function that updates the list of valid advertisement screens and sends it to the GUI if necessary
 * @return - true if successful, false otherwise.
 * @author - Vladimir Dobroff
 * @since - NGK v5.1
 *        - Modified for NGK 5.3 - NPS-12101 - CR to support 16x9 landscape mode on NGK - 6994488
 * @changed - CSO-937 - Kiosk load times delaying POS nodes from unlocking after apply update - AUNP-301
 */
 function PosNGKUpdatePromotionalScreens(inInitialization)
 {	
	if (sessionSale.get("IS_NGK") == "true")
	{
		var mainAdScreens9x16 = PosNGKGetMainPromotionalScreens("9X16");
		var mainAdScreens5x4 = PosNGKGetMainPromotionalScreens("5X4");
		var mainAdScreensAda = PosNGKGetMainPromotionalScreens("ADA");
		var mainAdScreens16x9 = PosNGKGetMainPromotionalScreens("16X9");
		var subAdScreens9x16 = PosNGKGetSubPromotionalScreens("9X16");
		var subAdScreens16x9 = PosNGKGetSubPromotionalScreens("16X9");
		
		// CSO-583 - Multiple sites with Kiosk non functional and displaying a white screen - AUNP-110
		// If there are no screens to be displayed, we shouldn't send the message to the UI.
		if ((mainAdScreens9x16.join("|").toString() == "-1" && PosCSOCheckSharedContext("NGK_LAYOUT", "9X16")) ||
			(mainAdScreens5x4.join("|").toString() == "-1" && PosCSOCheckSharedContext("NGK_LAYOUT", "5X4")) ||
			(mainAdScreens16x9.join("|").toString() == "-1" && PosCSOCheckSharedContext("NGK_LAYOUT", "16X9")))
		{
			PosCSOLog(CSOLOG_DEBUG, 18435, "PosNGKUpdatePromotionalScreens :: There are no advertisement screens to be displayed in the current layout");
			return true;
		}

		// CSO-937 - Kiosk load times delaying POS nodes from unlocking after apply update - AUNP-301
		var sendScreens = (inInitialization != null) && (inInitialization != undefined) && (inInitialization.toLowerCase() == "true");

		// CSO-937 - Kiosk load times delaying POS nodes from unlocking after apply update - AUNP-301
		if (sendScreens ||
			GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_9X16 != mainAdScreens9x16.join("|") ||
			GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_5X4 != mainAdScreens5x4.join("|") ||
			GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_ADA != mainAdScreensAda.join("|") ||
			GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_16X9 != mainAdScreens16x9.join("|") ||
			GLOBAL_NGK_SUB_ADVERTISEMENT_SCREENS_9X16 != subAdScreens9x16.join("|") ||
			GLOBAL_NGK_SUB_ADVERTISEMENT_SCREENS_16X9 != subAdScreens16x9.join("|"))
		{
			var eventXml = new XML('<Event type="ASYNC" name="DAT_SYS_ADVERTISEMENT_SCREENS"/>');
			
			var mainAdScreens9x16Xml = new XML('<Parameter name="mainAdvertisementScreens"/>');
			mainAdScreens9x16Xml.@value = mainAdScreens9x16.join("|");
			eventXml.appendChild(mainAdScreens9x16Xml);
			
			var mainAdScreens5x4Xml = new XML('<Parameter name="mainAdvertisementScreens5x4"/>');
			mainAdScreens5x4Xml.@value = mainAdScreens5x4.join("|");
			eventXml.appendChild(mainAdScreens5x4Xml);
			
			var mainAdScreensAdaXml = new XML('<Parameter name="mainAdvertisementScreensAda"/>');
			mainAdScreensAdaXml.@value = mainAdScreensAda.join("|");
			eventXml.appendChild(mainAdScreensAdaXml);
			
			var mainAdScreens16x9Xml = new XML('<Parameter name="mainAdvertisementScreens16x9"/>');
			mainAdScreens16x9Xml.@value = mainAdScreens16x9.join("|");
			eventXml.appendChild(mainAdScreens16x9Xml);
			
			var subAdScreens9x16Xml = new XML('<Parameter name="subAdvertisementScreens"/>');
			subAdScreens9x16Xml.@value = subAdScreens9x16.join("|");
			eventXml.appendChild(subAdScreens9x16Xml);
			
			var subAdScreens16x9Xml = new XML('<Parameter name="subAdvertisementScreens16x9"/>');
			subAdScreens16x9Xml.@value = subAdScreens16x9.join("|");
			eventXml.appendChild(subAdScreens16x9Xml);
			
			GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_9X16 = mainAdScreens9x16.join("|");
			GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_5X4 = mainAdScreens5x4.join("|");
			GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_ADA = mainAdScreensAda.join("|");
			GLOBAL_NGK_MAIN_ADVERTISEMENT_SCREENS_16X9 = mainAdScreens16x9.join("|");
			GLOBAL_NGK_SUB_ADVERTISEMENT_SCREENS_9X16 = subAdScreens9x16.join("|");
			GLOBAL_NGK_SUB_ADVERTISEMENT_SCREENS_16X9 = subAdScreens16x9.join("|");
			
			return PosSendUICmd(eventXml.toString());
		}
	}
	
	return true;
}

/**
 * @brief - Function to get the first valid advertisement main screen.
 * @return - screen number
 * @author - Vladimir Dobroff
 * @since - NGK v5.1
 *        - Modified for NGK 5.3 - NPS-12101 - CR to support 16x9 landscape mode on NGK - 6994488
 */
function PosNGKGetFirstValidPromotionalMainScreen()
{
	if (PosNGKGetMainPromotionalScreens("9X16").length > 0 && PosNGKGetMainPromotionalScreens("9X16")[0] != "-1") return PosNGKGetMainPromotionalScreens("9X16")[0];
	if (PosNGKGetMainPromotionalScreens("5X4").length > 0 && PosNGKGetMainPromotionalScreens("5X4")[0] != "-1") return PosNGKGetMainPromotionalScreens("5X4")[0];
	if (PosNGKGetMainPromotionalScreens("ADA").length > 0 && PosNGKGetMainPromotionalScreens("ADA")[0] != "-1") return PosNGKGetMainPromotionalScreens("ADA")[0];
	if (PosNGKGetMainPromotionalScreens("16X9").length > 0 && PosNGKGetMainPromotionalScreens("16X9")[0] != "-1") return PosNGKGetMainPromotionalScreens("16X9")[0];
	
	//No valid screen has been found
	return "-1";
}

/**
 * @brief - Function to get the first valid banner screen.
 * @return - screen number
 * @author - Vladimir Dobroff
 * @since - NGK v5.3 - NPS-12101 - CR to support 16x9 landscape mode on NGK - 6994488
 */
function PosNGKGetFirstValidPromotionalSubScreen()
{
	if (PosNGKGetSubPromotionalScreens("9X16").length > 0 && PosNGKGetSubPromotionalScreens("9X16")[0] != "-1") return PosNGKGetSubPromotionalScreens("9X16")[0];
	if (PosNGKGetSubPromotionalScreens("16X9").length > 0 && PosNGKGetSubPromotionalScreens("16X9")[0] != "-1") return PosNGKGetSubPromotionalScreens("16X9")[0];
	
	//No valid screen has been found
	return "-1";
}

/**
 * @brief - Function to check if the provided screen is of a certain type
 * @param screenAspectRatio - one of the following values: 9X16, 5X4, ADA, 16x9
 * @return - true or false
 * @author - Vladimir Dobroff
 * @since - NGK v5.1
 *        - Modified for NGK 5.3 - NPS-12101 - CR to support 16x9 landscape mode on NGK - 6994488
 */
function PosNGKCheckMainPromotionalScreenType(screenXmlNode, screenAspectRatio)
{
	if (!screenXmlNode)
	{
		return false;
	}

	var adsAdaModeImageSuffix = lGetCSOUserInterfaceStringParameter("adaModeAdImageSuffix", "_ADA.png");
	var ads5x4ModeImageSuffix = lGetCSOUserInterfaceStringParameter("promotional5x4MainScreenSuffix", "_5x4.png");
	var ads16x9ModeImageSuffix = lGetCSOUserInterfaceStringParameter("promotional16x9MainScreenSuffix", "_16x9.png");
	
	var adsDefaulMainScreen9x16 = lGetCSOUserInterfaceStringParameter("promotionalDefaultMainScreen", "-1");
	var adsDefaulMainScreen5x4 = lGetCSOUserInterfaceStringParameter("promotionalDefaultMainScreen5x4", "-1");
	var adsDefaulMainScreenAda = lGetCSOUserInterfaceStringParameter("promotionalDefaultMainScreenADA", "-1");
	var adsDefaulMainScreen16x9 = lGetCSOUserInterfaceStringParameter("promotionalDefaultMainScreen16x9", "-1");
	
	//Return false if the screen is configured as a default screen
	if (screenXmlNode.@number == adsDefaulMainScreen9x16) return false;
	if (screenXmlNode.@number == adsDefaulMainScreen5x4) return false;
	if (screenXmlNode.@number == adsDefaulMainScreenAda) return false;
	if (screenXmlNode.@number == adsDefaulMainScreen16x9) return false;
	
	var screenBitmap = screenXmlNode.Button.(@number == "1").@bitmap;
	
	if (screenBitmap.toString())
	{
		if (adsAdaModeImageSuffix && (screenBitmap.toString().indexOf(adsAdaModeImageSuffix) != -1))
		{
			if (screenAspectRatio == "ADA") return true;
			return false;
		}

		if (ads5x4ModeImageSuffix && (screenBitmap.toString().indexOf(ads5x4ModeImageSuffix) != -1))
		{
			if (screenAspectRatio == "5X4") return true;
			return false;
		}
		
		if (ads16x9ModeImageSuffix && (screenBitmap.toString().indexOf(ads16x9ModeImageSuffix) != -1))
		{
			if (screenAspectRatio == "16X9") return true;
			return false;
		}
	}
	
	if (screenAspectRatio == "9X16")
	{
		//If the screen does not contain any of the other suffixes assume it is a 9X16
		return true;
	}
	
	return false;
}

/**
 * @brief - Function to get the main promotional default screen for a certain screen type
 * @param screenAspectRatio - one of the following values: 9X16, 5X4, ADA, 16X9
 * @return - screen number, or -1 if none is found
 * @author - Vladimir Dobroff
 * @since - NGK v5.1
 *        - Modified for NGK 5.3 - NPS-12101 - CR to support 16x9 landscape mode on NGK - 6994488
 */
function PosNGKGetMainPromotionalDefaultScreen(screenAspectRatio)
{
	if (screenAspectRatio == "9X16")
	{
		return lGetCSOUserInterfaceStringParameter("promotionalDefaultMainScreen", "-1");
	}
	
	if (screenAspectRatio == "5X4")
	{
		return lGetCSOUserInterfaceStringParameter("promotionalDefaultMainScreen5x4", "-1");
	}
	
	if (screenAspectRatio == "ADA")
	{
		return lGetCSOUserInterfaceStringParameter("promotionalDefaultMainScreenADA", "-1");
	}
	
	if (screenAspectRatio == "16X9")
	{
		return lGetCSOUserInterfaceStringParameter("promotionalDefaultMainScreen16x9", "-1");
	}
	
	return "-1";
}

/**
 * @brief - Function to get the list of the main advertisement screens.
 * @param screenAspectRatio - one of the following values: 9X16, 5X4, ADA, 16X9
 * @return - Array with the valid screens. If no valid screen is found, return an array with a single element (-1)
 * @author - Vladimir Dobroff
 * @since - NGK v5.1
 *        - Modified for NGK 5.3 - NPS-12101 - CR to support 16x9 landscape mode on NGK - 6994488
 */	
function PosNGKGetMainPromotionalScreens(screenAspectRatio)
{
	var screenList = [];
	
	for each (screen in ngkScreenInfo)
	{
		var screenNode = screen.xmlNode;
		if ((screenNode.@type=="2850"))
		{
			if (PosNGKCheckMainPromotionalScreenType(screenNode, screenAspectRatio))
			{
				if (PosNGKIsScreenValid(screenNode.@number))
				{
					screenList.push(screenNode.@number);
				}
			}
		}
	}
	
	if (screenList.length == 0)
	{
		var adsDefaultMainScreen = PosNGKGetMainPromotionalDefaultScreen(screenAspectRatio);
	
		if (adsDefaultMainScreen && (adsDefaultMainScreen != "-1"))
		{
			if (PosNGKIsScreenValid(adsDefaultMainScreen))
			{
				screenList.push(adsDefaultMainScreen);
			}
		}
	}
	
	if (screenList.length == 0)
	{
		API.dbg("WARNING: PosNGKGetMainPromotionalScreens - There is no valid attractive screen configured for: " + screenAspectRatio);
		screenList.push("-1");
	}
	
	return screenList;
}

/**
 * @brief - Function to get the list of the sub advertisement screens (the ones that appear above the menus).
 * @param screenAspectRatio - one of the following values: 9X16, 16X9
 * @return - Array with the valid screens. If no valid screen is found, return an array with a single element (-1)
 * @author - Vladimir Dobroff
 * @since - NGK v5.1
 *        - Modified for NGK 5.3 - NPS-12101 - CR to support 16x9 landscape mode on NGK - 6994488
 */
function PosNGKGetSubPromotionalScreens(screenAspectRatio)
{
	var screenList = [];

	var adsDefaultSubScreen = lGetCSOUserInterfaceStringParameter("promotionalDefaultSubScreen", "-1");
	var adsDefaultSubScreen16x9 = lGetCSOUserInterfaceStringParameter("promotionalDefaultSubScreen16x9", "-1");
	
	var ads16x9ImageSuffix = lGetCSOUserInterfaceStringParameter("promotional16x9SubScreenSuffix", "_16x9.png");
	
	for each (screen in ngkScreenInfo)
	{
		var screenNode = screen.xmlNode;
		if ((screenNode.@type=="2853"))
		{
			//Get the bitmap image name associated with the first screen button
			var screenBitmap = "";
			var buttonList = screenNode.Button;
			if (buttonList && buttonList.length() > 0)
			{
				screenBitmap = buttonList[0].@bitmap.toString();
			}
		
			if (screenNode.@number == adsDefaultSubScreen) continue;
			if (screenNode.@number == adsDefaultSubScreen16x9) continue;
		
			if (PosNGKIsScreenValid(screenNode.@number))
			{
				if (ads16x9ImageSuffix && (screenBitmap.indexOf(ads16x9ImageSuffix) != -1))
				{
					if (screenAspectRatio == "16X9") screenList.push(screenNode.@number);
				}
				else
				{
					if (screenAspectRatio == "9X16") screenList.push(screenNode.@number);
				}
			}
		}
	}
	
	if (screenList.length == 0)
	{
		if (adsDefaultSubScreen && (adsDefaultSubScreen != "-1") && (screenAspectRatio == "9X16"))
		{
			if (PosNGKIsScreenValid(adsDefaultSubScreen))
			{
				screenList.push(adsDefaultSubScreen);
			}
		}
		
		if (adsDefaultSubScreen16x9 && (adsDefaultSubScreen16x9 != "-1") && (screenAspectRatio == "16X9"))
		{
			if (PosNGKIsScreenValid(adsDefaultSubScreen16x9))
			{
				screenList.push(adsDefaultSubScreen16x9);
			}
		}
	}
	
	if (screenList.length == 0)
	{
		screenList.push("-1");
	}
	
	return screenList;
}
 
 /**
 * @brief Shows the main screen
 * @author - Kalil Garcia
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKShowMainScreen() {
	var ctx = new SessionContext;
	var mainScreen = ctx.get("NGK_MAIN_SCREEN");
	// CSO-205 - NGK - CYT feedback changes - Arrows and icon size - 7754248
	var increaseImg = ctx.get("NGK_MAIN_SCREEN_INCREASE_IMG");
	if (mainScreen != null) {
		PosNGKDoShowScreenJS(mainScreen, null, null, "true", increaseImg);
	}
	else {
		// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
		var ctx=new SessionContext;
		PosNGKShowCarrouselJS (ctx.get("NGK_SCREEN_CARROUSEL"), ctx.get("NGK_SCREEN_MENU"))
	}
	return true;
}
 
  /**
 * @brief Function to display the available languages and wait the selection in order to set the current language. Based on PosCSOLanguageSelectionJS
 *
 * @param NONE.
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKAskOrderLanguageJS(screen, button) {

	var screenConfig = screen.split("|");
	var buttonConfig = button.split("|");
	
	var screenArray = new Array();
	screenArray.push(new Array(PosCSOI18nGetMessageJS(screenConfig[0]), screenConfig[1], screenConfig[2], screenConfig[3], screenConfig[4]));

	var langToBeSelected = new Array();
	var btnToBeSelected = new Array();
	
	for each (var language in csoConfigurationInfo.languages) {
		if (language.code.toLowerCase().indexOf("_kiosk") > -1) {
			continue;
		}
		
		langToBeSelected.push(new Array(language.name, buttonConfig[0], buttonConfig[1], buttonConfig[2], "flag_" + language.code.split("_")[0] + ".png"));
		btnToBeSelected.push(language.code);
	}

	API.dbg("[CSO - PosNGKAskOrderLanguageJS] langToBeSelected = " + langToBeSelected.join("|"));
	API.dbg("[CSO - PosNGKAskOrderLanguageJS] btnToBeSelected = " + btnToBeSelected.join("|"));
	
	var selectedLang = PosNGKSendSyncPickImageJS("DLG_ASK_ORDER_LANGUAGE", langToBeSelected, btnToBeSelected, screenArray);
	if (selectedLang) {
		selectedLang = selectedLang.split("_");
		PosCSOSetLanguageJS(selectedLang[1], selectedLang[0]);
	}

	return true;
}

 /**
 * @brief Function to set the current sale type. Also sends a message informing the current selection.
 * @param saleType (0=EAT IN;1=TAKE OUT;2=OTHER)
 * @author - Kalil Garcia
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKSetSaleType(saleType) {
	var evtMsg = new StringBuffer();
	PosSetSaleType(saleType);
	sessionSale.set("NGK_SALE_TYPE", saleType);
	
	// NPS-22752 - POS-399 - Ungated Scan - Configure Scanner Hardware to always ON states
	if(saleType) {
		sessionSale.set("SALETYPEDEFINED", "true");
	}

	evtMsg.append(GLOBAL_UTF8_PROLOG_XML);
	evtMsg.append("<Event type=\"ASYNC\" name=\"DAT_SYS_SALE_TYPE\">\n");
	evtMsg.append("\t<Parameter name='saleType' value=\""+saleType+"\"/>\n");
    evtMsg.append("\</Event>");
	return PosSendUICmd(evtMsg.toString());
}

/**
 * @brief  Returns true if the mode is between 1 or 2
 * @author - Leandro Pereira	
 * @since  - CSO-376 NGK Selection Screen for Payment and Eat-in/Take-out to be Configurable - 8111349
 */
function PosNGKOrderEatingPaymentBeginLayoutByMode(){

	var layoutMode = parseInt(lGetParameterStr("order.EatingPaymentScreenLocationMode", "0"));	

	API.dbg("order.EatingPaymentScreenLocationMode, returned value: " + layoutMode);

	if (layoutMode <=2 || layoutMode >=0)
	{
		if (layoutMode == 1 || layoutMode == 2)
			return true;
	}

	return false;
}

function PosNGKCheckSaleType() {
	var hlp = new BusinessObjectHelper;
	var saleTypeNP = hlp.getSaleType();
	var saleTypeCSO = sessionSale.get("NGK_SALE_TYPE");
	
	if (saleTypeCSO != saleTypeNP) {
		API.dbg("PosNGKCheckSaleType - Sale type has been changed from " + saleTypeCSO + " to " + saleTypeNP);
		API.dbg("PosNGKCheckSaleType - Changing sale type to " + saleTypeCSO);
		PosSetSaleType(saleTypeCSO);
	}
}

 /**
 * @brief Function to check if a certain type of point of distribution exists in one of the products inside the order view. Will check only the first level of products
 * @param PODType - Point of distribution type (FRONT_COUNTER, DRIVE_THRU, etc..)
 * @param useCurrentView - if true, will use the current view, if false will use the last order view
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKPointOfDistributionExistsInOrderView(PODType, useCurrentView)
{
	var orderViewProductList;

	if (useCurrentView)
	{
		orderViewProductList = lGetProductListFromCurrentOrderView();
	}
	else
	{
		orderViewProductList = lGetProductListFromLastOrderView();
	}
	
	for each (orderViewProduct in orderViewProductList)
	{
		if (csoProductInfo[orderViewProduct.@code] != null)
		{
			if (IsProductOfPointOfDistribution(csoProductInfo[orderViewProduct.@code], PODType))
			{
				return true;
			}
		}
	}
	
	return false;
	
	function lGetProductListFromCurrentOrderView()
	{
		var hlp = new BusinessObjectHelper;
		var view = getKioskView(hlp.getCurrentView());
		xmlView = new XML(view);
		
		var productXmlList = xmlView.Order.Item.(@voided == "false").Product;
		
		return productXmlList;
	}
	
	function lGetProductListFromLastOrderView()
	{
		var hlp = new BusinessObjectHelper;
		var view = getKioskView(hlp.getLastSaleView());
		xmlView = new XML(view);
		
		var productXmlList = xmlView.Order.Item.(@voided == "false").Product;
		
		return productXmlList;
	}	
	
}

 /**
 * @brief Function to get the order number. If the current order does not exists, get from the last view.
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKGetOrderNumber()
{
	// CSO-131 - CSO v5 - The order number displayed in the finalizing screen must be configurable
	var ctx = new SessionContext;
	var value = ctx.get("orderNumber");
	
	if (value != undefined && value != "")
	{
		return value;
	}
	
	var hlp = new BusinessObjectHelper();
	
	var currentView = new XML(hlp.getCurrentView());
	var previousView = new XML(hlp.getLastSaleView());
	
	if (currentView != null && currentView.@major != undefined)
	{
		return currentView.@major;
	}
	else if (previousView != null && previousView.@major != undefined)
	{
		return previousView.@major;
	}
	
	return -1;
}

/**
 * @brief Function to get the id of the current Pos, as defined inside Services.Service.@name in pos-db.xml
 * @return - The Pos id
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKGetPosId()
{
	var posdbPath;
	var sStoredbValue;

	posdbPath = "Services.Service.(@type==\"POS\").@name";
	sStoredbValue = getConfigValue("", posdbPath);
	API.dbg ("PosNGKGetPosId Value >" + sStoredbValue);
	
  	return sStoredbValue;
}

/**
 * @brief Function to get the default RemPOD of the current Pos
 * @return - The default RemPOD from pos-db.xml / store-db.xml
 * @author - Vladimir Dobroff
 * @since - NGK 5.5 - CSO-85 - EU CR for NGK Multi Payment Service Platform Support - 7359977
 */
function PosNGKGetDefaultRemPOD()
{
	var storedbPath = "Configurations.Configuration.(@type==\"POS\").Section.(@name==\"PosType\").Parameter.(@name==\"RemPOD\").@value";
	var posdbPath = "Services.Service.(@type==\"POS\").Configuration.Section.(@name==\"PosType\").Parameter.(@name==\"RemPOD\").@value";
	var remPodValue = getConfigValue(storedbPath, posdbPath);
	API.dbg ("PosNGKGetDefaultRemPod Value: " + remPodValue);
	
  	return remPodValue;
}

/**
 * @brief Function to set the current RemPOD of the current Pos
 * @return - true
 * @author - Vladimir Dobroff
 * @since - NGK 5.5 - CSO-85 - EU CR for NGK Multi Payment Service Platform Support - 7359977
 */
function PosNGKSetDefaultRemPOD(remPod)
{
	if (!remPod)
	{
		//If the remPod was not defined, use the default value
		var defaultRemPod = PosNGKGetDefaultRemPOD();
		if (defaultRemPod)
		{
			PosChangeRemPOD(defaultRemPod);
		}
	}
	else
	{
		PosChangeRemPOD(remPod);
	}
	
  	return true;
}

/**
 * @brief - Function to save the view to generate the pick list
 * @return - true if successful
 * @author - Vladimir Dobroff
 */
function PosNGKStorePickListView()
{
	var hlp 	= new BusinessObjectHelper;
	var curView = hlp.getCurrentView();

	var ctx		= new SessionContext;
	
	if(curView == null)
	{
		//CSO-85 - EU CR for NGK Multi Payment Service Platform Support - 7359977
		//The current view will be null after a PosDoStore, so also check the last view
		curView = hlp.getLastSaleView();
		
		if (curView == null)
		{
			API.dbg("Current view is NULL, nothing to do.");
			return false;
		}
	}

	var view = new XML(curView);
	ctx.set(KEY_REMVIEW,view.toString(),true);
	
	return true;
}


/**
 * @brief - Starts a message as if it were sent by the pinpad device. This is only to be used for development purposes.
 * @param - msgCode - Message code (not mandatory) used to diaplay a video/image configured in the "CSO.EFTMedia" section of the store-db file.
 * @param - i18nKey - The text which would appear in the pinpad.
 * @return - rval - true if sent to the GUI.
 * @author - Kalil, Vladimir Dobroff
 */
function PosNGKStartMessageJS(msgCode, i18nKey)
{
	var xmlResult = new StringBuffer();
	xmlResult.append(GLOBAL_UTF8_PROLOG_XML);
	xmlResult.append("<Event type=\"ASYNC\" name=\"DLG_MSG_START\">");
	xmlResult.append("<Parameter name=\"Code\" value=\"" + (msgCode == null ? "" : msgCode) + "\" />");
	xmlResult.append("<Parameter name=\"Msg\" value=\"" + PosCSOI18nGetMessageJS(i18nKey) + "\" />");
	xmlResult.append("<Parameter name=\"ButtonMsg\" value=\"\" />");
	xmlResult.append("<Parameter name=\"AnalyticsInfo\" value=\"ScreenNameKey:" + i18nKey + "\" />");
	xmlResult.append("</Event>");
	return PosSendUICmd(xmlResult.toString());
}

/**
 * @brief - Stops (closes) a message as if it were sent by the pinpad device. This is only to be used for development purposes.
 * @return - rval - true if sent to the GUI.
 * @author - Kalil, Vladimir Dobroff
 */
function PosNGKStopMessageJS()
{
	var xmlResult = new StringBuffer();
	xmlResult.append(GLOBAL_UTF8_PROLOG_XML);
	xmlResult.append("<Event type=\"ASYNC\" name=\"DLG_MSG_STOP\"/>");
	return PosSendUICmd(xmlResult.toString());
}

/**
 * @brief - Starts the UI timeout
 * @return - rval - true if sent to the GUI. 
 * @author - Renato Tsuchida
 * @since  - CSO-420 - [DRM] CYT C2 [KIOSK Offers] - Incorrect error message is displayed and the offer gets removed from the order basket when the same QR code is scanned twice on the KIOSK
 			 CSO-428 - [DRM] CYT C2 [KIOSK Offers] - No confirmation message is displayed for the user when user scans same offer with different QR code or scans a new offer on the KIOSK
 */
function PosNGKStartTimeoutJS()
{
	var xmlResult = new StringBuffer();
	xmlResult.append(GLOBAL_UTF8_PROLOG_XML);
	xmlResult.append("<Event type=\"ASYNC\" name=\"DLG_TIMEOUT_START\"/>");
	return PosSendUICmd(xmlResult.toString());
}

/**
 * @brief - Stops the UI timeout
 * @return - rval - true if sent to the GUI.
 * @author - Renato Tsuchida
 * @since  - CSO-420 - [DRM] CYT C2 [KIOSK Offers] - Incorrect error message is displayed and the offer gets removed from the order basket when the same QR code is scanned twice on the KIOSK
 			 CSO-428 - [DRM] CYT C2 [KIOSK Offers] - No confirmation message is displayed for the user when user scans same offer with different QR code or scans a new offer on the KIOSK
 */
function PosNGKStopTimeoutJS()
{
	var xmlResult = new StringBuffer();
	xmlResult.append(GLOBAL_UTF8_PROLOG_XML);
	xmlResult.append("<Event type=\"ASYNC\" name=\"DLG_TIMEOUT_STOP\"/>");
	return PosSendUICmd(xmlResult.toString());
}

/**
 * @brief - This BC tenders a sale
 * @return - rval - true if allowed to continue
 * @author - Kalil, Vladimir Dobroff
 * @modified - NGK 5.5 - CSO-85 - EU CR for NGK Multi Payment Service Platform Support - 7359977
 */
function PosNGKDoTenderJS(tenderId, amount, showAnimation)
{
	// CSO-144 - NGK - Mobile Order Check-In At Kiosk - 7473775
	if(showAnimation == null) {
		// default is show
		showAnimation=true;
	}
	else {
		// CSO-394 - Uk-CR-Enhancements to Voucher Redemption at NGK - 8072392
		if(typeof showAnimation!="boolean") {
			if(showAnimation.toLowerCase() == "true") {
				showAnimation=true;
			}
			else {
				showAnimation=false;
			}
		}
	}
	
	if (tenderId == null) {
		return false;
	}
	if (amount == null) {
		amount = '-1';
	}
	// Clears info area
	PosDisplayText("",1);

	API.dbg("processing cashless for tender id=" + tenderId);
	
	//SSU-70 - Move the EFT retry max numbers from the WF to the store-db file.
	//
	//  Also moved the remaining configurations to storedb.xml. Below is a summary of the used format:
	//    retryTitle - Format: I18N_KEY|COLOR|COLOR|COLOR|IMAGE_KEY
	//    retryConfirm - Format: I18N_KEY|COLOR|COLOR|COLOR|IMAGE_KEY
	//    retryCancel - Format: I18N_KEY|COLOR|COLOR|COLOR|IMAGE_KEY
	var retryTitle = lGetCSOUserInterfaceStringParameter("tender.retryTitle", null);
	var retryConfirm = lGetCSOUserInterfaceStringParameter("tender.retryConfirm", null);
	var retryCancel = lGetCSOUserInterfaceStringParameter("tender.retryCancel", null);
	
	if ((typeof EFTSimLoaded != "undefined") && EFTSimLoaded == true && showAnimation)
	{
		PosNGKStartMessageJS("2", "NGK_MSG_TENDER_START_TRANSACTION");
	}
	
	// Amount equals '-1' performs an exact tender.
	var bEndOfSale = PosDoTender(tenderId, amount);
	PosNGKSendAnalyticsTenderInfo(bEndOfSale);

	PosNGKStopMessageJS();
	
	//SSU-70 - Move the EFT retry max numbers from the WF to the store-db file.
	var remainingRetries = Number(lGetCSOUserInterfaceStringParameter("tender.retryAttempts", "0"));
	
	while ((!bEndOfSale) && (remainingRetries > 0))
	{
		remainingRetries--;
		
		if (PosNGKAskConfirmationMessageJS(retryTitle, retryConfirm, retryCancel))
		{
			if ((typeof EFTSimLoaded != "undefined") && EFTSimLoaded == true && showAnimation)
			{
				PosNGKStartMessageJS("2", "NGK_MSG_TENDER_START_TRANSACTION");
			}
		
			bEndOfSale = PosDoTender(tenderId, amount);
			PosNGKSendAnalyticsTenderInfo(bEndOfSale);
		
			PosNGKStopMessageJS();
		}
		else
		{
			if (sessionSale.get("NGK_POPUP_TIMEOUT") == "true")
			{
				PosDoBackFromTotal();
				PosDoVoidSale('false','false');
				sessionSale.set("NGK_ORDER_CANCEL", "true");

				return false;
			}
			else
			{
				remainingRetries = 0;
			}
		}
	}
	
	if (bEndOfSale)
	{
		API.dbg("Cashless process SUCCEEDED.");
		
		// CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
		// This is necessary to consume the offer
		if (typeof(PosOffersEndOfSale) == "function")
		{
			PosOffersEndOfSale();
		}
		return PosDoEndOfSale(true);
	}
	
	API.dbg("Cashless process FAILED.");
	var hlp	= new BusinessObjectHelper;

	//In case the payment failed, check if the customer would like to try in the front counter
	var redirectTitle = lGetCSOUserInterfaceStringParameter("tender.redirectTitle", null);
	var redirectYes = lGetCSOUserInterfaceStringParameter("tender.redirectYes", null);
	var redirectNo = lGetCSOUserInterfaceStringParameter("tender.redirectNo", null);
	var redirectEnable = lGetCSOUserInterfaceStringParameter("tender.redirectEnable", "true");
	
	if (redirectEnable == "true" &&
		redirectTitle != null &&
		redirectYes != null &&
		redirectNo != null &&
		PosNGKAskConfirmationMessageJS(redirectTitle, redirectYes, redirectNo))
	{
		//CSO-85 - EU CR for NGK Multi Payment Service Platform Support - 7359977
		PosDoBackFromTotal();
		
		PosSetSessionProperty("NGK_ORDER_REROUTE", "PAY_AT_COUNTER");
		PosSetSessionProperty("NGK_ORDER_EFT_FAILED", "true");
	}
	else
	{	
		PosDoBackFromTotal();
		PosDoVoidSale('false','false');
		sessionSale.set("NGK_ORDER_CANCEL", "true");
	}
	
	return(false);
}

/**
 * @brief - Function to get the localized image name from Store-db.xml.
 * @param - imageKey - key to be used to find the image inside StoreDB -> Configurations -> Configuration type="Store.wide" -> Section name="ImageDB_XX_YY"
 * @return - Localized image name. If it is not found, will return the one corresponding to the default language.
 *           If the default one is not found either will return null.
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
 function PosNGKGetLocalizedImageFromStoreDB(imageKey)
 {
	var currentLangCode = sessionSale.get("LANGUAGE");
	var defaultLangCode = sessionSale.get("DEFAULT_LANGUAGE");
	
	var hlp = new BusinessObjectHelper;
	
	var image = hlp.findParamInSectionWide(imageKey, "ImageDB_" + currentLangCode);
	
	if (image == null)
	{
		image = hlp.findParamInSectionWide(imageKey, "ImageDB_" + defaultLangCode);
	}
	
	return image;
 }
 
/**
 * @brief - Function to get the localized video name from Store-db.xml.
 * @param - videoKey - key to be used to find the video inside StoreDB -> Configurations -> Configuration type="Store.wide" -> Section name="VideoDB_XX_YY"
 * @return - Localized video name. If it is not found, will return the one corresponding to the default language.
 *           If the default one is not found either will return null.
 * @author - Gabor Hollosy
 * @since - NGK v5 - CSO-413 - Ability to configure "collection point" screens to display custom video
 */
 function PosNGKGetLocalizedVideoFromStoreDB(videoKey)
 {
	var currentLangCode = sessionSale.get("LANGUAGE");
	var defaultLangCode = sessionSale.get("DEFAULT_LANGUAGE");
	
	var hlp = new BusinessObjectHelper;
	
	var videoName = hlp.findParamInSectionWide(videoKey, "VideoDB_" + currentLangCode);
	
	if (videoName == null)
	{
		videoName = hlp.findParamInSectionWide(videoKey, "VideoDB_" + defaultLangCode);
	}
	
	return videoName;
 }

/**
 * @brief - Function to check if the product can be sold in the current day time. Internally check the product Day Part Code and compare it to the current time.
 * @param - productCode - The product whose configuration will be checked
 * @return - true if can be sold, false otherwise
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
 function PosNGKCheckProductDayPartCode(productCode)
 {
	var hlp = new BusinessObjectHelper;

	if (csoProductInfo[productCode] == null)
	{
		API.dbg("PosNGKCheckProductDayPartCode - Invalid product code: " + productCode);
		return false;
	}
	
	var productXmlNode = csoProductInfo[productCode].xmlNode;
	
	if (productXmlNode == null)
	{
		API.dbg("PosNGKCheckProductDayPartCode - Invalid product code: " + productCode);
		return false;
	}
	
	var productDayPartCode = productXmlNode.DayPartCode;
	
	//if the product day part code is not configured, assume that the product can be sold during the whole day
	if ((productDayPartCode == null) || (productDayPartCode == undefined))
	{
		API.dbg("PosNGKCheckProductDayPartCode - Invalid Day Part Code for product: " + productCode);
		return true;
	}
	
	//Check if the product may be sold during the whole day
	if (productDayPartCode == "BREAKFAST_DAY_MENU")
	{
		return true;
	}

	var currentTime = new Date();
	var breakfastStartTime = new Date();
	var breakfastEndTime = new Date();	
	
	var breakfastStartString;
	var breakfastEndString;
	
	//Check for weekends
	if ((currentTime.getDay() == 0) || (currentTime.getDay() == 6))
	{
		breakfastStartString = storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekEnd;
		breakfastEndString = storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekEnd;
	}
	else
	{
		breakfastStartString = storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStartTimeWeekDay;
		breakfastEndString = storeDbXml.StoreDB.StoreProfile.BusinessLimits.BreakfastStopTimeWeekDay;
	}
	
	//if the breakfast time is not configured, assume that the product can be sold during the whole day
	if ((breakfastStartString == null) || (breakfastEndString == null))
	{
		API.dbg("PosNGKCheckProductDayPartCode - Breakfast time not configured inside Store-db.xml (StoreDB->StoreProfile->BusinessLimits)");
		return true;
	}
	
	var startTimeHH = Number(breakfastStartString.split(":")[0]);
	var startTimeMM = Number(breakfastStartString.split(":")[1]);
	
	var endTimeHH = Number(breakfastEndString.split(":")[0]);
	var endTimeMM = Number(breakfastEndString.split(":")[1]);

	breakfastStartTime.setHours(startTimeHH, startTimeMM, 0, 0);
	breakfastEndTime.setHours(endTimeHH, endTimeMM, 0, 0);
	
	//PosShowMessage("productDayPartCode: " + productDayPartCode);
	//PosShowMessage("currentTime: " + currentTime);
	//PosShowMessage("currentTime.getDay(): " + currentTime.getDay());
	//PosShowMessage("breakfastStartTime: " + breakfastStartTime);
	//PosShowMessage("breakfastEndTime: " + breakfastEndTime);
	
	if (productDayPartCode == "BREAKFAST_MENU")
	{
		//Check if inside the breakfast limits
		if ((currentTime >= breakfastStartTime) && (currentTime <= breakfastEndTime))
		{
			return true;
		}
	}
	else if (productDayPartCode == "DAY_MENU")
	{
		//Check if inside the day limits
		if ((currentTime < breakfastStartTime) || (currentTime > breakfastEndTime))
		{
			return true;
		}
	}
	//else
	//{
	//	API.dbg("PosNGKCheckProductDayPartCode - Invalid Day Part Code inside Store-db.xml for product: " + productCode);
	//	return true;
	//}
	
	return false;
 }
 
 /**
 * @brief - Function to check if the screen should be active in the current day time. Internally check the screen Day Part and the Working Hours and compares it to the current time.
 * @param - screenCode - The screen whoose configuration will be checked
 * @return - true if should be active, false otherwise
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
 function PosNGKCheckScreenDayPartAndWorkingHours(screenCode)
 {
	var hlp = new BusinessObjectHelper;

	if (ngkScreenInfo[screenCode] == null)
	{
		API.dbg("PosNGKCheckScreenDayPartAndWorkingHours - Invalid screen code: " + screenCode);
		return false;
	}
	
	var screenXmlNode = ngkScreenInfo[screenCode].xmlNode;
	
	if (screenXmlNode == null)
	{
		API.dbg("PosNGKCheckScreenDayPartAndWorkingHours - Invalid screen code: " + screenCode);
		return false;
	}
	
	var screenDayPart = screenXmlNode.@daypart;

	// CSO-328 - NGK Date-specific Override of Working Hours - 7977439
	var usePreviousDayPart = PosCSOCheckSharedContext("NGK_SWITCH_DAYPART", "true");
	var previousDateTime = null;
	if (usePreviousDayPart){
		if (!GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE){
			GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE = lGetPreviousDayPartEndTime();
		}
	 	previousDateTime = GLOBAL_NGK_ORDER_START_PREVIOUS_DAYPART_DATE;
	}
	
	//If the day part is not set, check if the screen is associated with the working hours
	if (screenDayPart == null || screenDayPart == undefined)
	{
		var pointOfDistribution = lGetPointOfDistributionByScreenNumber(screenCode);
				
		if (pointOfDistribution)
		{
			if (!pointOfDistribution.isEnabled || !IsAtWorkingHours(pointOfDistribution, previousDateTime))
			{
				return false;
			}
		}
		
		return true;
	}
	
	var dayPartXmlNode = rootStoreDB.StoreDB.DayParts.DayPart.(@name == screenDayPart);
	
	if ((dayPartXmlNode == null) || (dayPartXmlNode == undefined) || (dayPartXmlNode.length() < 1))
	{
		API.dbg("PosNGKCheckScreenDayPartAndWorkingHours - The following day part is not configured inside Store-db.xml: " + screenDayPart);
		return false;
	}
	
	//PosShowMessage("screenDayPartCode: " + dayPartXmlNode[0].@name);
	
	return lCheckDayPartLimits(dayPartXmlNode[0], previousDateTime);	
	
	
	 /**
	 * @brief - Inner function to check the day part limits.
	 * @return - true if the current time is inside the limits, false otherwise
	 * @author - Vladimir Dobroff
	 * @since - NGK v1.0 (French pilot)
	 */
	function lCheckDayPartLimits(dayPartXmlNode, previousDateTime)
	{
		// CSO-583 - Multiple sites with Kiosk non functional and displaying a white screen - AUNP-110
		// We must make sure the dates will be compared in the right way
		var formatter = orderFormatter();
		
		// CSO-1181 - RS Request Form -NGK show wrong day part menu sometimes - INC9214918
		var previousDateTimeValid = IsValidDate(previousDateTime);
		
		// CSO-328 - NGK Date-specific Override of Working Hours - 7977439
		var currentTime = previousDateTimeValid ? new NPDate(previousDateTime) : new NPDate();
		var dayPartStartTime = previousDateTimeValid ? new NPDate(previousDateTime) : new NPDate();
		var dayPartEndTime = previousDateTimeValid ? new NPDate(previousDateTime) : new NPDate();
	
		var weekDayXmlNode = lGetDayPartOfWeekDay(dayPartXmlNode);

		//If the weekday is not configured, log an error and return false
		if (weekDayXmlNode == null)
		{
			PosCSOLog(CSOLOG_DEBUG, 18435, "PosNGKCheckScreenDayPartAndWorkingHours - lCheckDayPartLimits - Check the day part configurations inside Store-db.xml, a weekday is missing.");
			return false;
		}
		
		var startTimeHH = Number(weekDayXmlNode.@start.split(":")[0]);
		var startTimeMM = Number(weekDayXmlNode.@start.split(":")[1]);
		
		var endTimeHH = Number(weekDayXmlNode.@end.split(":")[0]);
		var endTimeMM = Number(weekDayXmlNode.@end.split(":")[1]);
		
		dayPartStartTime.setHours(startTimeHH, startTimeMM, 0, 0);
		// CSO-583 - Multiple sites with Kiosk non functional and displaying a white screen - AUNP-110
		// The daypart must end at the last second of the minute
		dayPartEndTime.setHours(endTimeHH, endTimeMM, 59, 999);
		
		//PosShowMessage("currentTime: " + currentTime);
		//PosShowMessage("currentTime.getDay(): " + currentTime.getDay());		
		//PosShowMessage("StartTime: " + dayPartStartTime);
		//PosShowMessage("EndTime: " + dayPartEndTime);
		
		// CSO-583 - Multiple sites with Kiosk non functional and displaying a white screen - AUNP-110
		if ((formatter.formatTime(currentTime) >= formatter.formatTime(dayPartStartTime)) &&
			(formatter.formatTime(currentTime) <= formatter.formatTime(dayPartEndTime)))
		{
			return true;
		}		
		
		return false;
	}
	
	function lGetPointOfDistributionByScreenNumber(screenNumber){
		for each (var pointOfDistribution in csoConfigurationInfo.pointsOfDistribution){
			for each (var screen in pointOfDistribution.screenNumbers){
				if (screen == screenNumber){
					return pointOfDistribution;
				}
			}
		}
		return null;
	}
	
 }

 /**
* @brief - Returns the WeekDay configuration of the current or given weekday
* @param - dayParts - XML with the DayParts configuration
* @param - weekDay - Specified weekday to be returned.
* @author - Renato Tsuchida
* @since - CSO-328 - NGK Date-specific Override of Working Hours - 7977439
* @modified - CSO-583 - Multiple sites with Kiosk non functional and displaying a white screen - AUNP-110
*/
function lGetDayPartOfWeekDay(dayParts, weekDay) {
	weekDay = (weekDay == undefined || weekDay == null) ? new Date().getDay() : weekDay;

	/*
	  Introduced GLOBAL_CURRENT_WEEK_DAY to store the last value in case function new Date().getDay() fails:
	  For some unknown reason, getDay() function returned a full date in milliseconds instead
	  the index of the day of the week.
	  Once this behavior is part of the javascript engine inside NewPOS, this protection (global variable)
	  was inserted in the script to keep NGK running.
	*/
	if (weekDay < 0 || weekDay > 6)
	{
		weekDay = GLOBAL_CURRENT_WEEK_DAY;
	}
	else
	{
		GLOBAL_CURRENT_WEEK_DAY = weekDay;
	}
	
	switch(weekDay){
		case 0:
			return dayParts.DayPartSunday;
		case 1:
			return dayParts.DayPartMonday;
		case 2:
			return dayParts.DayPartTuesday;
		case 3:
			return dayParts.DayPartWednesday;
		case 4:
			return dayParts.DayPartThursday;
		case 5:
			return dayParts.DayPartFriday;
		case 6:
			return dayParts.DayPartSaturday;
		default:
			// If we still couldn't find a value, then return the default Monday
			return dayParts.DayPartMonday;
	}
};

/**
* @brief - Checks the current time and gets the closest endtime in the past.
* @author - Renato Tsuchida
* @since - CSO-328 - NGK Date-specific Override of Working Hours - 7977439
*/
function lGetPreviousDayPartEndTime() {
	var endTimes = lGetEndTimes(rootStoreDB.StoreDB.DayParts);

	if (endTimes.length == 0){
		API.dbg("lGetPreviousDayPartEndTime - Could not find any DayPart configuration")
		return null;
	}

	var currentTime = Number(new Date().getHours().toString() + new Date().getMinutes().toString());
	if (endTimes.indexOf(currentTime) != -1){
		currentTime++;
	}
	endTimes.push(currentTime);
	endTimes.sort(function(a, b){
		return a - b;
	});

	var index = endTimes.indexOf(currentTime);
	var lastEndTime = endTimes[index - 1];
	endTimes.splice(index, 1);

	var previous = new NPDate();
	if (lastEndTime == undefined || lastEndTime == null){
		previous.setDate(previous.getDate() - 1);
		endTimes = lGetEndTimes(rootStoreDB.StoreDB.DayParts, previous.getDay());
		if (endTimes.length == 0){
			API.dbg("lGetPreviousDayPartEndTime - Could not find any DayPart configuration for the previous day")
			return null;
		}
		lastEndTime = Math.max.apply(Math, endTimes);
	}

	var lastEndTimeStr = lastEndTime.toString();
	lastEndTimeStr = lastEndTimeStr.length == 3 ? "0" + lastEndTimeStr : lastEndTimeStr;
	var hours = lastEndTimeStr.substring(0, 2);
	var minutes = lastEndTimeStr.substring(2, 4);
	previous.setHours(hours, minutes-1, 0, 0);


	return previous;

	/**
	* @brief - Inner function that returns an array of endtimes with unique values of a day.
	* @param - dayParts - XML with the DayParts configuration
	* @param - weekDay - Specified weekday of the desired endtimes.
	* @author - Renato Tsuchida
	* @since - CSO-328 - NGK Date-specific Override of Working Hours - 7977439
	*/
	function lGetEndTimes(dayParts, weekDay){
		var endTimes = [];

		if (!dayParts || !dayParts.DayPart){
			return endTimes;
		}

		for (var i = 0; i < dayParts.DayPart.length(); i++) {

			var part = lGetDayPartOfWeekDay(rootStoreDB.StoreDB.DayParts.DayPart[i], weekDay);
			if (!part){
				continue;
			}
			var partEnd = part.@end.toString();
			var endTime = Number(partEnd.replace(":", "").toString());

			if (endTimes.indexOf(endTime) == -1 && endTime != 0){
				endTimes.push(endTime);
			}
		}
		return endTimes;
	};
};
 
/**
 * @brief - Function to check if the screen is valid. Checks the following criterias:
 *           - Screen exists in the screen.xml
 *           - CSO.UserInterface - NONDisplay.screenNumbers
 *           - CSO.UserInterface - promotionalScreenProducts
 *           - Day Part
 *           - Working Hours
 * @param - screenCode - The screen whoose configuration will be checked
 * CSO-305 - Menu with no Active Products Should not Appear - 7958410
 * @param - isCYT
 * @return - true if should be active, false otherwise
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
function PosNGKIsScreenValid(screenCode, isCYT)
{
	//Checks if the screen exists
	
	var hlp = new BusinessObjectHelper;
	

	if ((screenCode == null) || (ngkScreenInfo[screenCode] == null))
	{
		API.dbg("PosNGKIsScreenValid - Invalid screen code: " + screenCode);
		return false;
	}
	
	//CSO-305 - Menu with no Active Products Should not Appear - 7958410
	sessionSale.set("screenCode", screenCode);
	
	var screenXmlNode = ngkScreenInfo[screenCode].xmlNode;
	
	if (screenXmlNode == null)
	{
		API.dbg("PosNGKIsScreenValid - Invalid screen code: " + screenCode);
		return false;
	}
	
	//Checks if the screen is disabled for this restaurant
	
	var nonDisplayScreenNumbers = lGetCSOUserInterfaceStringParameter("NGKNonDisplay.screenNumbers", null);
	
	if (nonDisplayScreenNumbers != null)
	{
		var splittedScreenNumbers = nonDisplayScreenNumbers.split("|");
		
		for each (var screenNumber in splittedScreenNumbers)
		{
			if (screenNumber == screenCode)
			{
				return false;
			}
		}
	}
	
	//Checks if the screen is associated with products that are in the outage file
	
	var promotionalScreenProducts = lGetCSOUserInterfaceStringParameter("promotionalScreenProducts", null);
	
	if (promotionalScreenProducts != null)
	{
		var splittedPromotionalScreenProducts = promotionalScreenProducts.split("|");
	
		//CSO-632 - 8322255 - Banner Screens not to display for inactive items
		for each (var promotionalConfig in splittedPromotionalScreenProducts)
		{
			var splittedPromotionalConfig = promotionalConfig.split("=");
		
			if (splittedPromotionalConfig[0] == screenCode)
			{
				if (splittedPromotionalConfig[1])
				{
					var productConfig = splittedPromotionalConfig[1].split(",");
					
					var disableOnFullOutage = lGetCSOUserInterfaceStringParameter("promotionalScreenProductsFullOutage", "false");
					
					if (disableOnFullOutage == "true")
					{
						var fullOutage = true;
						
						//CSO-632 - 8322255 - Banner Screens not to display for inactive items
						for each (var productCode in productConfig)
						{
							//CSO-632 - 8322255 - Banner Screens not to display for inactive items
							if ((!isProductOutage(productCode)) && (bShowProduct(productCode)))
							{
								fullOutage = false;
							}
						}
						
						if (fullOutage)
						{
							return false;
						}
					}
					else
					{
						//CSO-632 - 8322255 - Banner Screens not to display for inactive items
						for each (var productCode in productConfig)
						{
							//CSO-632 - 8322255 - Banner Screens not to display for inactive items
							if ((isProductOutage(productCode)) || (!bShowProduct(productCode)))
							{
								return false;
							}
						}
					}
				}
			}
		}
	}
	
	//Checks the screen day part / working hours
	if (PosNGKCheckScreenDayPartAndWorkingHours(screenCode))
	{
		//CSO-305 - Menu with no Active Products Should not Appear - 7958410
		return ValidateProductsWithinScreen(screenCode, isCYT);
	}
	else
	{
		return false;
	}
	
}

/**
 * @brief - Responsible to Validate all the products within a carousel screen
 * @return - true if the current screen is available
 * @changed - CSO-305 - Menu with no Active Products Should not Appear - 7958410
 * @author - Leandro Oliveira
 * @modified - CSO-459 - TSS .23 QR14 - Prebuild is not showing in CYT Screen
 * @modified - CSO-504 MR2 QR17 34, NGK does not show McCafe but does in QR16
 * @modified - NPS-17245 - MR2 QR17 34, NGK does not show screen 3107 but does in QR16
 */
function ValidateProductsWithinScreen(screen_Code, isCYT)
{	
	var node = ngkScreenInfo[screen_Code].xmlNode.(@type == "2852");
	
	if ( node == null || node == undefined && node.length() == 0)
		return true;
	
	var buttonList = node.Button;
	 if (ShouldSkipMenuValidations(buttonList, screen_Code))
		 return true;		
	var productParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
	var screenParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number");
	//CSO-459 - TSS .23 QR14 - Prebuild is not showing in CYT Screen
	var cytScreenParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("KEY_WF_SHOW_SCREEN_PRE_BUILT")).Parameter.(@name == "Number");
	
	//CSO-459 - TSS .23 QR14 - Prebuild is not showing in CYT Screen
	if (ValidateItemsProduct(productParameters, screen_Code, isCYT) || 	ValidateItemsSubScreen(screenParameters) || ValidateItemsCytSubScreen(cytScreenParameters))
		return true;
	
	// CSO-282 - CYT Redesign - 8024409
	var CYTRedesign = lGetCSOUserInterfaceStringParameter("cyt.redesign", "");
	if ((sessionSale.get("IS_NGK") == "true") && (CYTRedesign != null) && (CYTRedesign != undefined) && ("true" == CYTRedesign.toLowerCase())) 
	{
		var buttonActions = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("KEY_WF_CYT_SHOW_SCREEN"));
		if (buttonActions != null && buttonActions.length() > 0 )
		{
			if(ValidateCYTProductToSale(buttonActions))
				return true;
		}
	}
	
	return false;

	/**
	 * @brief - Responsible to get another node by a screen and validate it.
	 * @changed - CSO-305 - Menu with no Active Products Should not Appear - 7958410
	 * @author - Leandro Oliveira
	 * @modified - CSO-504 MR2 QR17 34, NGK does not show McCafe but does in QR16
	 */		
	function ValidateItemsSubScreen(screenParameters)
	{
		var screenCode = sessionSale.get("screenCode");
		
			if (screenParameters != null && screenParameters.length() > 0 )
			{
				for each (var item in screenParameters)
				{
					var nodeScreenCode = item.@value.toString();
					
					//Avoiding StackOverFlow recursion
					if (nodeScreenCode == screenCode || nodeScreenCode == "" || nodeScreenCode == undefined)
						continue;
	
				if (ValidateProductsWithinScreen(nodeScreenCode))				
					return true;				
				}				
			}
		return false;
	}
	
	/**
	 * @brief - Validate the Phase 1 CYT Pre Built screens.
	 * @since - CSO-459 - TSS .23 QR14 - Prebuild is not showing in CYT Screen
	 * @author - Vladimir Dobroff
	 * @modified - CSO-504 MR2 QR17 34, NGK does not show McCafe but does in QR16
	 */	
	function ValidateItemsCytSubScreen(screenParameters)
	{
		var rootScreenCode = sessionSale.get("screenCode");
		
		if (screenParameters != null && screenParameters.length() > 0 )
		{
			for each (var item in screenParameters)
			{
				var nodeScreenCode = item.@value.toString();
				
				//Avoiding StackOverFlow recursion
				if (!nodeScreenCode || nodeScreenCode == rootScreenCode) continue;
				
				var node = ngkScreenInfo[nodeScreenCode] ? ngkScreenInfo[nodeScreenCode].xmlNode : null;
				
				if (!node) continue;
				
				var productParameters = node.Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE")).Parameter.(@name == "ProductCode");
				
				if (productParameters != null && productParameters.length() > 0 )
				{
					for each (var buttonParameter in productParameters)
					{
						if (bShowProduct(buttonParameter.@value.toString()))
						{
							if (lGetIsBybPreBuiltProduct(csoProductInfo[buttonParameter.@value.toString()].xmlNode))
							{
								if (isProductOutage(buttonParameter.@value.toString()) && lGetCSOUserInterfaceStringParameter("productOutage.displayMode", "") == "HIDE" )
									continue;
								else
									return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

	/**
	 * @brief - Responsible to validate if the products are available to be showed.
	 * @changed - CSO-305 - Menu with no Active Products Should not Appear - 7958410
	 * @author - Leandro Oliveira
	 * @modified - CSO-504 MR2 QR17 34, NGK does not show McCafe but does in QR16
	 */
	function ValidateItemsProduct(ButtonParameters, screen_Code, isCYT)
	{
		if (ButtonParameters != null && ButtonParameters.length() > 0 )
		{
			for each (var buttonParameter in ButtonParameters)
			{
				if (csoProductInfo[buttonParameter.@value.toString()])
				{
					if (isCYT == true && lGetIsBybPreBuiltProduct(csoProductInfo[buttonParameter.@value.toString()].xmlNode) != true)
					{
						continue;
					}
					if (bShowProduct(buttonParameter.@value.toString()))
					{
						if (isProductOutage(buttonParameter.@value.toString()) && lGetCSOUserInterfaceStringParameter("productOutage.displayMode", "") == "HIDE" )
						{
							continue;
						}
						else
							return true;						
					}
				}
			}
		}
	

		return false;
	}

	/**
	 * @brief - This function verifies if there is at least a CYT product valid to sale.
	 * @changed - CSO-282 - CYT Redesign - 8024409
	 * @author - Dalton Pericles de Almeida
	 */	
	function ValidateCYTProductToSale(buttonActions)
	{
		var hasCYTProductToSale = false;
		var hasCustomizedItem = false;
		var hasPreBuildItem = false;
		//CSO-591 - [DRM] KIOSK C2P2: Carousel buttons is clickable and menu are displayed if there are only invalid products (menu items) with it for BUILD YOUR OWN menus.
		//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
		var hasAtLastOneProductValid = false;
		
		var customizedFilter = "";
		var preBuildFilter = "";
		
		var customizedFilterArray = [];
		var preBuildFilterArray = [];
		
		for each (var buttonAction in buttonActions)
		{
			//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
			hasCustomizedItem = false;
			hasPreBuildItem = false;
		
			var productType = buttonAction.Parameter.(@name == "ProductType").@value.toString();
			if(productType == "CUSTOMIZED")
			{
				customizedFilter = buttonAction.Parameter.(@name == "GroupFilter").@value.toString();
				if (customizedFilter) customizedFilterArray = customizedFilter.split("|");
				hasCustomizedItem = true;
			}
			if(productType == "PRE_BUILT")
			{
				preBuildFilter = buttonAction.Parameter.(@name == "GroupFilter").@value.toString();
				if (preBuildFilter) preBuildFilterArray = preBuildFilter.split("|");
				hasPreBuildItem = true;
			}

			//CSO-703 - Button is disabled when more than one Groupfilter option is enabled on CYT Redesign screen
			if (hasCustomizedItem || hasPreBuildItem)
			{
				var productInfo = null;
				for each (var productCYTCode in csoCYTProducts)
				{
					if (!productCYTCode || 
						!csoProductInfo[productCYTCode] || 
						!csoProductInfo[productCYTCode].xmlNode ||
						csoProductInfo[productCYTCode].xmlNode.@statusCode != "ACTIVE" ||
						csoProductInfo[productCYTCode].xmlNode.@salable != "true" ||
						!PosCheckIfPriceNodeIsValid(csoProductInfo[productCYTCode].xmlNode) ||
						!PosCheckIfTaxEntryIsValid(csoProductInfo[productCYTCode].xmlNode)) // WWR-2579 - CYT Phase 1 - Cycle 2: Incorrect behavior for "non priced", "non taxed", "inactive" items on KIOSK and POS
					{
						continue;
					}
					
					productInfo = csoProductInfo[productCYTCode];

					if((!hasCustomizedItem) && (productInfo.isBybProduct))
					{
						continue;
					}
					if((!hasPreBuildItem) && (productInfo.isBybPreBuilt))
					{
						continue;
					}

					var CSOCytGroupParameter = productInfo.xmlNode.CustomParameters.Parameter.(@name == "CSOCytGroup");
					var CSOCytGroup = CSOCytGroupParameter != undefined && CSOCytGroupParameter.@value.toString() != "" ? CSOCytGroupParameter.@value.toString() : "";
					
					//Check the CYT group filter
					if (hasCustomizedItem && productInfo.isBybProduct)
					{
						if (customizedFilterArray.length > 0 && (CSOCytGroup == "" || customizedFilterArray.indexOf(CSOCytGroup) == -1))
						{
							continue;
						}
					}
					if (hasPreBuildItem && productInfo.isBybPreBuilt)
					{
						if (preBuildFilterArray.length > 0 && (CSOCytGroup == "" || preBuildFilterArray.indexOf(CSOCytGroup) == -1))
						{
							continue;
						}
					}

					//CSO-591 - [DRM] KIOSK C2P2: Carousel buttons is clickable and menu are displayed if there are only invalid products (menu items) with it for BUILD YOUR OWN menus.
					hasAtLastOneProductValid = true;
					
					if (!isProductOutage(productInfo.xmlNode.ProductCode.toString()))
					{
						hasCYTProductToSale = true;
					}
				}
			}
		}

		//CSO-591 - [DRM] KIOSK C2P2: Carousel buttons is clickable and menu are displayed if there are only invalid products (menu items) with it for BUILD YOUR OWN menus.
		if (!hasAtLastOneProductValid ||
		      (!hasCYTProductToSale &&
		       lGetCSOUserInterfaceStringParameter("productOutage.displayMode", "") == "HIDE"))
		{
			return false;
		}
		return true;
	}
	/**
	 * @brief - Responsible for validating if the screen should be validated
	 * @changed - NPS-17245 - MR2 QR17 34, NGK does not show screen 3107 but does in QR16
	 * @author - Leandro Oliveira
	 */
	function ShouldSkipMenuValidations(listButtons, screenCode){
		var CYTRedesign = lGetCSOUserInterfaceStringParameter("cyt.redesign", "false");
		if (CYTRedesign && ("true" == CYTRedesign.toLowerCase())){
			var CYTMenuScreenNumbers = lGetCSOUserInterfaceStringParameter("cyt.menuScreenNumbers", "");
			
			if (CYTMenuScreenNumbers)
			{
				var CYTMenuScreens = CYTMenuScreenNumbers.split("|");
				for each(var itemCytScreen in CYTMenuScreens){
					if(itemCytScreen == screenCode)
						return false;					
				}
			}
		}
		
		if (listButtons != null && listButtons.length() > 0 ){
			for each (var itemButton in listButtons){
				if (csoConfigurationInfo.ngkScreenButtonTypes.indexOf(itemButton.@number.toString()) == -1 ){
					var workflowType = itemButton.Action.(@type == "onclick").@workflow;
					if (workflowType != PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN") &&
						workflowType != PosNGKGetSharedCtxValueWithoutParameters("WF_DOSALE") &&
						workflowType != PosNGKGetSharedCtxValueWithoutParameters("KEY_WF_SHOW_SCREEN_PRE_BUILT"))
						return true;
				}
			}
		}		
		return false;
	}
}
	
/**
 * @brief - Responsible to validate a specific screen contains on the carousel component.
 * @changed - CSO-305 - Menu with no Active Products Should not Appear - 7958410
 * @author - Leandro Oliveira
 */
function isScreenOnCarousel(code)
{
	var ListItems = ngkScreenInfo[sessionSale.get("NGK_CARROUSEL_SCREEN")].xmlNode.(@type == "2851").Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number");
	var returnValue;
	if (ListItems != null)
	{
		for each (item in ListItems)
		{
			if (item.@value.toString() == code.toString())
			{
				returnValue = true;
				break;
			}
			else
			{
				returnValue = false;
			}
		}
	}
	else
	{
		return false;
	}
	
	return returnValue;
}

	/**
	 * @brief - Responsible to validate if the carousel screen is available to be showed
	 * @return - true if the current screen is available
	 * @changed - CSO-305 - Menu with no Active Products Should not Appear - 7958410
	 * @changed - CSO-504 MR2 QR17 34, NGK does not show McCafe but does in QR16
	 * @author - Leandro Oliveira
	 */
function IsCarouselScreenValid(code)
{
	var ListItems = ngkScreenInfo[sessionSale.get("NGK_CARROUSEL_SCREEN")].xmlNode.(@type == "2851").Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number");
	var ListItemsButtons = ngkScreenInfo[sessionSale.get("NGK_CARROUSEL_SCREEN")].xmlNode.(@type == "2851").Button;
	
	var index;
	if (ListItems != null)
	{
		var arrayCarouselButtons = new Array();
		
		for each (itemList in ListItems) {
			arrayCarouselButtons.push(itemList.@value.toString());
		}
		
		if (arrayCarouselButtons != null && arrayCarouselButtons.length > 0)
		{
			index = arrayCarouselButtons.indexOf(code);
			var returnScreen = PosNGKIsScreenValid(code);
						
			if (returnScreen)
			{
				for each(item in ListItemsButtons)
				{
					if (item.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number").@value == code)
					{
						sessionSale.set("MainCarouselIndex", item.@number);
						break;
					}
				}
				return code.toString();
			}
			else
			{
				if (index == 0)
				{
					code = arrayCarouselButtons[arrayCarouselButtons.length -1];
				}
				else
				{
					code = arrayCarouselButtons[index -1];
				}
				
				if (code != null)
				{
					return IsCarouselScreenValid(code);
				}
			}
		}
		else
		{
			return code.toString();
		}
	}
	else
	{
		return code.toString();
	}
}
	

/**
 * @brief - Responsible to create a list that will contains all the screens that should be blocked
 * @changed - CSO-305 - Menu with no Active Products Should not Appear - 7958410
 * @changed - CSO-504 MR2 QR17 34, NGK does not show McCafe but does in QR16
 * @author - Leandro Oliveira
 */
function lAddNotDisplayCarouselButtons()
{
	if (sessionSale.get("NGK_CARROUSEL_SCREEN") != null)
	{
		var ListItems = ngkScreenInfo[sessionSale.get("NGK_CARROUSEL_SCREEN")].xmlNode.(@type == "2851").Button.Action.(@type == "onclick").(@workflow == PosNGKGetSharedCtxValueWithoutParameters("WF_SHOW_SCREEN")).Parameter.(@name == "Number");
		var carouselButtonsToHide = new Array();
		if (ListItems != null)
		{
			for each (item in ListItems)
			{
				sessionSale.set("screenCode", item.@value.toString());
				if (!ValidateProductsWithinScreen(item.@value.toString()))
					carouselButtonsToHide.push(item.@value.toString());
			}
		}
		
		var POSPromotionsEnabled = hlp.findParamInSectionWide("isEnabled", "Promotion") == "true";
			
		if (!POSPromotionsEnabled)
		{
			var promotionWorkflow = PosNGKGetSharedCtxValueWithoutParameters("WF_NGK_SHOW_PROMOTIONS");
			for each (var innerButton in ngkScreenInfo[sessionSale.get("NGK_CARROUSEL_SCREEN")].xmlNode.Button) {
				if(innerButton.Action.@type == "onclick" && innerButton.Action.@workflow == promotionWorkflow)
				{
					sessionSale.set("screenCode", innerButton.Action.Parameter.(@name == "ScreenNumber").@value.toString());
					carouselButtonsToHide.push(innerButton.Action.Parameter.(@name == "ScreenNumber").@value.toString());
				}
			}
		}

		if(carouselButtonsToHide.length > 0)
		{
			sessionSale.set("carouselButtonsListToHide", carouselButtonsToHide);
		}
	}
}


/**
 * @brief - Function to run an external command.
 * @param - path - The path of the command
 * @param - defaultPath - The default path of the command
 * @param - command - The command to be executed
 * @return - true
 * @author - Vivian Cury
 * @since - CSO-70 - NGK French Mobile CheckIn Requirements - 7339563
 */
function PosCSORunOSCommand(path, defaultPath, command)
{
	if (((path == undefined || path == "") && (defaultPath == undefined || defaultPath == "")) ||
		(command == undefined || command == ""))
	{
		API.dbg("Invalid parameters - Command was not executed");
		return true;
	}
	
	if (path == undefined || path == "")
	{
		path = defaultPath;
	}
	
	// SQC-5415 - [NGK - French Mobile CheckIn ] - External application does not run if there is spaces in the path defined by parameter "RecallerPath"
	var commandPath = "cmd /C \"" + path + "/" + command + "\"";
	API.dbg("Executing command: [" + commandPath + "]");
	PosRunOSCommand(commandPath);
	
	return true;
}

function PosResetSessionSale(key) {
	sessionSale.set(key, null);
}

/**
 * @brief - Apply the global promotions to the order
 * @return - true
 * @author - Vivian Cury
 * @since - CSO-123 - NGK Implementation of Promotion Engine Digital Offers Component - 7360967
 */
function PosNGKApplyPromotions()
{
    //SQC-6284 - [Promotion/ Offers] - Kiosk displays script error after update to version NGK 5.8 when the environment is running 6.1.19 (version without Global Promotion/ Offers)
    if (typeof(PosApplyPromotionCoupons) != "function" ||
	    typeof(PosOffersOnTotal) != "function" ||
		typeof(PosPromotionOnTotal) != "function")
	{
		return true;
	}
	
	PosSetSessionProperty("runPromotionOnTotal", "true");
	
	PosApplyPromotionCoupons();
	PosOffersOnTotal(true);
	PosPromotionOnTotal();
	
	// If this property has value, it's because there is a promotion with question configured.
	// This type of promotion is not supported by Kiosk, so we log a warning.
	// Also, to avoid memory consumption we clean the property.
	if (!PosCheckSessionProperty("appliedPromotionsWithQuestion", ""))
	{
		API.dbg("PosNGKApplyPromotions::WARNING:: There are promotions with questions configured for Kiosk!");
		API.dbg("PosNGKApplyPromotions:: " + sessionSale.get("appliedPromotionsWithQuestion"));
		
		PosSetSessionProperty("appliedPromotionsWithQuestion", "");
	}
	
	return true;
}

/**
 * @brief - Function to get the localized image name from Store-db.xml.
 * @param - imageKey - key to be used to find the image inside StoreDB -> Configurations -> Configuration type="Store.wide" -> Section name="ImageDB_XX_YY"
 * @return - Localized image name. If it is not found, will return the one corresponding to the default language.
 *           If the default one is not found either will return null.
 * @author - Vladimir Dobroff
 * @since - NGK v1.0 (French pilot)
 */
 function PosNGKGetLocalizedImageFromStoreDB(imageKey)
 {
	var currentLangCode = sessionSale.get("LANGUAGE");
	var defaultLangCode = sessionSale.get("DEFAULT_LANGUAGE");
	
	var hlp = new BusinessObjectHelper;
	
	var image = hlp.findParamInSectionWide(imageKey, "ImageDB_" + currentLangCode);
	
	if (image == null)
	{
		image = hlp.findParamInSectionWide(imageKey, "ImageDB_" + defaultLangCode);
	}
	
	return image;
 }

 /**
 * @brief  - Called by workflow when customer accepts to donate an amount
 * @return - true if the product is removed or added, false otherwise.
 * @author - Paulo Ferreira
 * @since  - CSO-464 - NGK- RMHC Donation Feature - 8011722
 * @altered - CSO-745 - POS-340 - Order Basket Redesign
 */
function PosCSORMHCEditDonation(donationButton) {
		
		API.dbg("[PosCSORMHCEditDonation] - Function initialized.");
		var donationProductCode = lGetParameterStr("RMHC.donationProductCode", "");

		API.dbg("[PosCSORMHCEditDonation] - donationButton: " + donationButton);

		var hlp = new BusinessObjectHelper;
		var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));
		var donationProductIndex = PosCSORMHCGetDonationProductIndex();
		API.dbg("[PosCSORMHCEditDonation] - kioskOrderView: " + kioskOrderView);
		
		if ((donationButton != "ROUNDUP") && (donationButton != "FIXED1") && (donationButton != "FIXED2") && (donationButton != "FIXED3") && (donationButton != "REMOVE")) {
			API.dbg("[PosCSORMHCEditDonation] - Donation selection not found on parameter.");
			return false;
		}

		if (donationButton == "REMOVE") {
			PosDoSelIndex(donationProductIndex);
			PosDoVoidLine();
			API.dbg("[PosCSORMHCEditDonation] - Donation removed from cart.");
			
			var hasItemInCart = false;
			for each (var item in kioskOrderView.Order.Item) {
				if(item.@voided == "false"){
					hasItemInCart = true;
					break;
				}
				if (!hasItemInCart){
					// CSD-160 - [NGK5.16.1 - REGRESSION] Order Review - Unexpected Screen
					PosNGKCheckAndExecuteBackFromTotal();
					PosNGKShowMainScreen();
					return false;
				}
			}
			return true;
		}

		var donationValue = -1;
		if (donationButton != "ROUNDUP")
			donationValue = sessionSale.get("DONATION." + donationButton);
		API.dbg("[PosCSORMHCEditDonation] - Donation Value: " + donationValue);

		var donationType = "roundUp";
		if (donationButton != "ROUNDUP")
			donationType = "fixed";
		API.dbg("[PosCSORMHCEditDonation] - Donation Type: " + donationType);

		// product - product code
		// value   - a float value that determines the donation value
		// type    - types of donations accepted : 
		// 		fixed    - a fixed value, example : U$ 1.00;
		// 		cashless - donation done via pinpad (not applicable on Kiosk);
		// 		roundUp  - the total due will be rounded up;	
		// 		variable - variable amount,defined by the customer and input by the crew via numeric key pad in the NP6 screen
		// reason  - the reason for declining the donation

		var reason = "";

		if (PosCanAcceptRMHCdonationItem(donationProductCode)) {
			
			API.dbg("[PosCSORMHCEditDonation] - donationProductCode: " + donationProductCode);
			API.dbg("[PosCSORMHCEditDonation] - donationType: " + donationType);
			API.dbg("[PosCSORMHCEditDonation] - donationValue: " + donationValue);

			PosDoSaleRMHCdonationItem(donationProductCode, donationValue, donationType);
			API.dbg("[PosCSORMHCEditDonation] - Donation product added.");
			API.dbg("[PosCSORMHCEditDonation] - Returning true.");
			return true;

		}

		PosRMHCdonationItemNotAccepted(donationProductCode, reason);
			
		API.dbg("[PosCSORMHCEditDonation] - Donation product cannot be added. Reason: " + reason);
		API.dbg("[PosCSORMHCEditDonation] - Returning false.");
	
		return false;
}

/**
 * @brief - Function to get the parameter value from Store-db.xml.
 * @param - paramName - key to be used to find the parameter inside StoreDB -> Configurations -> Configuration type="Store.wide" -> Section name="RMHCDonation"
 * @param - defaultValue - default value in case of not finding the configuration.
 * @return - the value for the corresponding parameter name.
 * @author - Paulo Ferreira
 * @since - CSO-464 - NGK- RMHC Donation Feature - 8011722
 */
function PosNGKGetDonationParameterFromStoreDB(paramName, defaultValue) {
 	
 	API.dbg("[PosNGKGetDonationParameterFromStoreDB] - paramName: " + paramName);
	API.dbg("[PosNGKGetDonationParameterFromStoreDB] - defaultValue: " + defaultValue);

	var hlp = new BusinessObjectHelper;
	var value = hlp.findParamInSectionWide(paramName, "RMHCDonation");
	var rc = (value == null ? defaultValue : value);
	API.dbg("INFO_CSO : CSO parameter [" + paramName + "] has been set to [" + rc + "]");

	return rc;
}

/**
 * @brief - Function to get the index of the donation product.
 * @return - the index of the donation product.
 * @author - Paulo Ferreira
 * @since - CSO-464 - NGK- RMHC Donation Feature - 8011722
 */
function PosCSORMHCGetDonationProductIndex() {

	API.dbg("NGK - PosCSORMHCGetDonationProductIndex - Function initialized.");

	// Get the product code and verify if it does exist. If not, there's no way to validate the donation and it will return as it is present on cart already.
	var donationProductCode = lGetParameterStr("RMHC.donationProductCode", "");
	if (donationProductCode == "") {
		API.dbg("NGK - PosCSORMHCGetDonationProductIndex - Donation product code is empty.");
		return "-1";
	}

	var hlp = new BusinessObjectHelper;
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));

	for each (var item in kioskOrderView.Order.Item) {
		var productCode = item.Product.@code.toString();
		API.dbg("NGK - PosCSORMHCGetDonationProductIndex - item: " + item);
		if (productCode == donationProductCode) {
			API.dbg("NGK - PosCSORMHCGetDonationProductIndex - Donation product found on cart.");
			return item.@index.toString();
		}
	}

	API.dbg("NGK - PosCSORMHCGetDonationProductIndex - Donation product not found on cart.");
	return "-1";
}


/**
 * @brief - Function to check if the donation is present on the cart.
 * @return - true if the donation product is present on cart or not configured, false otherwise.
 * @author - Paulo Ferreira
 * @since - CSO-464 - NGK- RMHC Donation Feature - 8011722
 */
function PosCSORMHCCheckDonationInCartStatus() {

	API.dbg("NGK - PosCSORMHCCheckDonationInCartStatus - Function initialized.");

	// Get the product code and verify if it does exist. If not, there's no way to validate the donation and it will return as it is present on cart already.
	var donationProductCode = lGetParameterStr("RMHC.donationProductCode", "");
	if (donationProductCode == "") {
		API.dbg("NGK - PosCSORMHCCheckDonationInCartStatus - Donation product code is empty.");
		return "failed";
	}

	var hlp = new BusinessObjectHelper;
	var kioskOrderView = new XML(getKioskView(hlp.getCurrentView()));

	for each (var item in kioskOrderView.Order.Item) {
		var productCode = item.Product.@code.toString();
		var voided = item.@voided.toString();
		if (productCode == donationProductCode) {
			if (voided == "true") {
				API.dbg("NGK - PosCSORMHCCheckDonationInCartStatus - Donation product voided on cart.");
				return "voided";				
			}
			else {
				API.dbg("NGK - PosCSORMHCCheckDonationInCartStatus - Donation product found on cart.");
				return "found";
			}

			
		}
	}

	API.dbg("NGK - PosCSORMHCCheckDonationInCartStatus - Donation product not found on cart.");
	return "notfound";
}

/**
 * @brief - Function to check if the donation is available
 * @return - true if the donation product is available, false otherwise.
 * @author - Paulo Ferreira
 * @since - CSO-464 - NGK- RMHC Donation Feature - 8011722
 * @modified - CSO-516 - Donation Product Code validation
 * @modified - CSO-569 - Implement verification of the donation method
 */
function PosCSORMHCCheckDonationAvailability() {

	API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Function initialized.");

	// Verify if the Donation is enabled. 
	if (PosNGKGetDonationParameterFromStoreDB("enableRMHCdonation", "false") != "true") {
		API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Donation is not enabled.");
		return false;
	}

	// CSO-569 - Implement verification of the donation method
	var hlp = new BusinessObjectHelper;
	if(typeof(hlp.calculateDonationValue) != 'function') {
		API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Donation function was not found. Please verify the New Pos version.");
		return false;
	}

	// Donation PodList contains ("ALL" || "CSO")
	var donationPODList = PosNGKGetDonationParameterFromStoreDB("donationPODList", "");
	if ((donationPODList.indexOf("CSO") < 0) && (donationPODList.indexOf("ALL") < 0)) {
		API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Donation has no valide POD List entry. It should be CSO or ALL.");
		return false;
	}

	// CSO-516 - Donation Product Code validation
	// Donation Product Code is not empty or invalid
	if (!bShowProduct(lGetParameterStr("RMHC.donationProductCode", ""))) {
		API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Donation product code is empty or invalid.");
		return false;
	}
	
	// Time frame is inside the actual time
	var donationTimeFrame = PosNGKGetDonationParameterFromStoreDB("donationTimeframe", "");
	// SQC-8369 - Donation message not being displayed when the parameter donationTimeframe is not configured
	var donationTimeFrameVerification = PosNGKVerifyActualTimeInFrame(donationTimeFrame, "|", "-");
	if (!(isNaN(donationTimeFrameVerification) || donationTimeFrameVerification)) {
		API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Donation timeframe does not match the current time.");
		return false;
	}

	// CSO-464 - NGK- RMHC Donation Feature - 8011722
	// SQC-8356 - Parameters "donationPeriodStart" and "donationPeriodEnd" not woking
	// Current date is inside the date limit
	var donationPeriodStart = PosNGKGetDonationParameterFromStoreDB("donationPeriodStart", "");
	var donationPeriodEnd = PosNGKGetDonationParameterFromStoreDB("donationPeriodEnd", "");
	if (PosNGKCompareDateWithActualDate(donationPeriodStart, "-") < 0) {
		API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Current date is before the start date.");
		return false;
	}
	if (PosNGKCompareDateWithActualDate(donationPeriodEnd, "-") > 0) {
		API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Current date is after the end date.");
		return false;
	}	

	// Donation Fixed Values
	var donationFixedValues = lGetParameterStr("RMHC.setAmountButtons", "");
	// Donation RoundUp Button Enabled
	var donationEnableRoundUpButton = lGetParameterStr("RMHC.enableRoundUpButton", "false");
	if ((donationFixedValues == "") && (donationEnableRoundUpButton == "false")) {
		API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Donation button configuration has not found a suitable configuration.");
		return false;
	}

	API.dbg("NGK - PosCSORMHCCheckDonationAvailability - Donation product is available.");
	return true;
}

/**
 * @brief - Verify if the current time is in the timeframe.
 * @param - timeFrame - the time frame, in the following format: 07:00-23:59|00:00-03:00
 * @param - entrySeparator - the entries separator: |
 * @param - timeSeparator - the entries separator: -
 * @return - boolean
 * @author - Paulo Ferreira
 * @since - CSO-464 - NGK- RMHC Donation Feature - 8011722
 * @modified - SQC-8369 - Donation message not being displayed when the parameter donationTimeframe is not configured
 * @modified - CSO-549 - Donation Timeframe Improvements
 */
function PosNGKVerifyActualTimeInFrame(timeFrame, entrySeparator, timeSeparator) {

	API.dbg("NGK - PosNGKVerifyActualTimeInFrame - Function initialized.");

	// SQC-8369 - Donation message not being displayed when the parameter donationTimeframe is not configured
	if (timeFrame == "") {
		API.dbg("NGK - PosNGKVerifyActualTimeInFrame - Timeframe is valid, but empty.");
		// SQC-8369 - Donation message not being displayed when the parameter donationTimeframe is not configured
		return NaN;
	}

	var currentdate = new Date();
	// SQC-8369 - Donation message not being displayed when the parameter donationTimeframe is not configured
	var currentHour = currentdate.getHours() < 10 ? "0" + currentdate.getHours() : currentdate.getHours();
	var currentMinute = currentdate.getMinutes() < 10 ? "0" + currentdate.getMinutes() : currentdate.getMinutes();
	var currentSecond = currentdate.getSeconds() < 10 ? "0" + currentdate.getSeconds() : currentdate.getSeconds();
	var currentTime = currentHour + ":" + currentMinute + ":" + currentSecond;
	var suitableTimeFound = false;

	// This should split the timeFrame in two elements as the summary: 07:00-23:59 and 00:00-03:00
	var entrySet = timeFrame.toString().split(entrySeparator);

	for each (var entry in entrySet) {
		// This should split the entry in two other elements as the summary: 07:00 and 23:59
		var timeSet = entry.toString().split(timeSeparator);
		
		var initialTime = timeSet[0].toString() + ":00";
		if (timeSet[1] == null) { 
			API.dbg("NGK - PosNGKVerifyActualTimeInFrame - time not correctly set. This entry is invalid:[" + entry.toString() + "]");
			// SQC-8369 - Donation message not being displayed when the parameter donationTimeframe is not configured
			return NaN;
		}
		var finalTime = timeSet[1].toString() + ":59";

		// Verifies if the timeframe has the correct format hh:mm
		// SQC-8369 - Donation message not being displayed when the parameter donationTimeframe is not configured
		// CSO-549 - Donation Timeframe Improvements
		var hourValidation = /^(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])$/;
		if (!initialTime.match(hourValidation)){
			API.dbg("NGK - PosNGKVerifyActualTimeInFrame - initial time [" + initialTime + "] not correctly set. This entry is invalid:[" + timeSet[0].toString() + "]");
			return NaN;
		}
		if (!finalTime.match(hourValidation)){
			API.dbg("NGK - PosNGKVerifyActualTimeInFrame - final time [" + finalTime + "] not correctly set. This entry is invalid:[" + timeSet[1].toString() + "]");
			return NaN;
		}

		var compareInitial = currentTime >= initialTime;
		var compareFinal = currentTime <= finalTime;

		if (((initialTime > finalTime) && (compareInitial || compareFinal)) || ((initialTime < finalTime) && (compareInitial && compareFinal))) {
			// CSO-549 - Donation Timeframe Improvements
			API.dbg("NGK - PosNGKVerifyActualTimeInFrame - found an enabled time frame: [" + entry.toString() + "]");
			// SQC-8369 - Donation message not being displayed when the parameter donationTimeframe is not configured
			suitableTimeFound = true;
		}		
		else {
			// CSO-549 - Donation Timeframe Improvements
			API.dbg("NGK - PosNGKVerifyActualTimeInFrame - found a disabled time frame: [" + entry.toString() + "]");
		}

	}
	
	// SQC-8369 - Donation message not being displayed when the parameter donationTimeframe is not configured
	API.dbg("NGK - PosNGKVerifyActualTimeInFrame - Verification finished. Result is [" + suitableTimeFound + "]");
	return suitableTimeFound;
}

/**
 * @brief - Compare a date with the current date.
 * @param - dateToCompare - the date to compare in the following format: 12-31-15 (mm-dd-yy)
 * @param - dateSeparator - the entries separator: -
 * @return - integer
 		   - (NaN) in case of error 		   
 		   - (-1) if the compared date is before actual date
 		   - (0) if the compared date is the same as actual date
 		   - (1) if the compared date is after actual date
 * @author - Paulo Ferreira
 * @since - CSO-464 - NGK- RMHC Donation Feature - 8011722
          - SQC-8356 - Parameters "donationPeriodStart" and "donationPeriodEnd" not woking
	  - SQC-8461 - Donation feature not working on version 5.14.6.0
 */
function PosNGKCompareDateWithActualDate(dateToCompare, dateSeparator) {

	API.dbg("NGK - PosNGKCompareDateWithActualDate - Function initialized.");

	if ((dateToCompare == "") || (dateSeparator == "")) {
		API.dbg("NGK - PosNGKCompareDateWithActualDate - Date or separator not properly set.");
		return NaN;
	}

	// Quick help on Date format
	// getDate()	Returns the day of the month (from 1-31)
	// getMonth()	Returns the month (from 0-11)
	// getFullYear()	Returns the year (four digits)

	// Need to format the current date not to consider time
	var initialCurrentDate = new Date();

	var currentYear = initialCurrentDate.getFullYear();
	var currentMonth = initialCurrentDate.getMonth();
	var currentDay = initialCurrentDate.getDate();

	var currentDate = new Date(currentYear, currentMonth, currentDay);

	// Create the date to compare in the date format
	var splittedDate = dateToCompare.split(dateSeparator);
	var comparedDay = splittedDate[1].toString();
	var comparedMonth = (splittedDate[0] - 1).toString();
	// SQC-8461 - Donation feature not working on version 5.14.6.0
	// CSO-549 - Donation Timeframe Improvements
	var comparedYear = splittedDate[2].toString().length == 2 ? "20" + splittedDate[2].toString() : splittedDate[2].toString() ;

	// Following the format of: new Date(year, month, day, hours, minutes, seconds, milliseconds);
	var comparedDate = new Date(comparedYear, comparedMonth, comparedDay);

	var result = (currentDate > comparedDate) - (currentDate < comparedDate);

	API.dbg("NGK - PosNGKCompareDateWithActualDate - Comparison between [" + currentDate + "] and [" + comparedDate + "] resulted: " + result);

	return result;
}
/**
 * @brief - Gets the literal value of a given Section name on StoreWide.
 * @param - parameterName - name of the parameter.
 * @param - sectionName - name of the section on StoreWide
 * @param - defaultValue - default value in case of not finding the configuration.
 * @return - Value for the parameter name.
 * @since - CSO-547 POS-276 - NGK - Support GMA Long Term Check-in - 8289930
 * @author - Leandro Pereira
 */
function lGetSectionWideStringParameter(parameterName, sectionName, defaultValue)
{
	var hlp = new BusinessObjectHelper;
	var data = hlp.findParamInSectionWide(parameterName, sectionName);
	var rc = (data == null ? defaultValue : data);

	API.dbg("INFO_CSO : CSO parameter [" + parameterName + "] has been set to [" + rc + "]");
	return rc;
}

/**
 * @brief - Checks the sale status and execute back from total
 * @since - CSO-972 - [6.1.29-SP8][GQT][COE] When we make an order in Kiosk and if you want to go back and edit it,then if we select any product it is showing the message PRODUCT IS NOT ACTIVE
 * @author - Vivian Cury
 */
function PosNGKCheckAndExecuteBackFromTotal()
{
	var saleStatus = hlp.getSaleStatus();
	if (saleStatus != SALE_STATUS_START &&
		saleStatus != SALE_STATUS_IN_PROGRESS)
	{
		PosDoBackFromTotal();
	}
	
	return true;
}
/* signed aut version 9-9076
 * authority id = builder
 * authority level = 10
 * authority name = NewPOS release level
 * group = npi
 * validity = 2010-04-18
 * signature type = slash_star
 * time stamp (GMT) = Fri Jan 26 13:15:43 2018
 * certificate = 393735312d373934370075eec224d005e4bb02fbae4de61b67e76251e987bbfef02cb12cbe1cbf5bc4034a72553c25168b15c6b7b78a6a66330ec4100010
 * =============================================================================================================================
*/
