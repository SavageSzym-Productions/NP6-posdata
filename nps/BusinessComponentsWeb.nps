/** 
/** 
 * @file BusinessComponentsWeb.nps
 * @brief This NPS file implements BusinessComponentsWeb.
 * @addtogroup 	CSL
 * @defgroup 	BusinessComponentsWeb
 * @ingroup 	CSL
 *
 * Copyright (C) 2008 McDonalds Corp. All rights reserved.
 *
 * @author Raphael (of Creation)
 * @since 2009/07/13
 *
 * @version $Id: BusinessComponentsWeb.nps 15443 2013-02-08 16:20:29Z rcapello $
 * @remarks 
 * @{
 */ 

/* Variable used for version control */
BUSINESS_COMPONENTS_WEB_VERSION = "$WCURL$:$WCREV$";
//logs the version
API.dbg("***************C S L   V E R S I O N***************"); 
API.dbg("FILE                           VERSION");
API.dbg("BusinessComponentsWeb.nps      " + BUSINESS_COMPONENTS_WEB_VERSION);
API.dbg("***************************************************");

/** Output buffer used to generate report */
var outputBuffer 	= null;

// Defines
var RPT_DT			= "0x81";
var RPT_WT			= "0x82";
var RPT_FC			= "0x83";

/* Root node of XMLs */
var rootConfig		= null;
var rootCash		= null;
var rootPmix		= null;
var rootHourlySales	= null;
var rootView		= null;
var rootSOS			= null;
var rootDetailSOS	= null;
var rootCustom		= null;
var rootProduct		= null;
var rootdetailTLD	= null;
var rootdetailSOSTLD	= null;
var rootmenuItemTLD	= null;
var rootsecurityDataTLD	= null;

var rootSOSFC		= null;
var rootSOSDT		= null;
var rootSOSMFY		= null;

var rootTaxTable	= null;

var	BOICommand		= null;
var nodeId			= null;
var posId			= null;
var DrawerChangeType= null;
var storeId			= null;
var businessDate	= null;
var POSversion		= null;
var trunc24h		= null;

var WSBOI_HEADER	= "<?xml version=\"1.0\"?>"

var CURRENCY_DECIMAL=2;		//	DES-105 // TODO: should be obtained from store db

// defines for summary sales 0xca20
var SALE			= 1;
var REFUND			= 2;
var CASHOUT			= 3;
var OVERRING		= 4;
var WASTE			= 5;

// Global variables added for "Pos-db configuration parameter"
var Country = ""; 
var xmlStoreDB = null;
var xmlPosDB = null;
var ProductCodeFilter = 0;

/**
 * Initializes global variables.
 * @param config configuration xml data (StringBuffer)
 * @param array of data (StringBuffer[])
 * @param requiredDataTypes if this optional parameter is set, it will break
 * if any given required data is not present.
 */
function WS_init(config, data, requiredDataTypes) {

	// Global variables set for "Pos-db configuration parameter"
	if (xmlStoreDB == null) {
	    xmlStoreDB = new XML(API.getStoredb());
	}
	if(xmlPosDB == null)
	{
		xmlPosDB = new XML(API.getPosdb());
	}
	var xmlStore= xmlStoreDB;	
	ProductCodeFilter = xmlStore.Configurations.Configuration.(@type=="Store.wide").Section.(@name=="Cash").Parameter.(@name=="ProductCodeFilter").@value;
	Country = (xmlStore.StoreDB.StoreProfile.StoreDetails.Country).toUpperCase();

	/** Output buffer used to generate report */
	outputBuffer = new StringBuffer();

	// Defines
	RPT_DT	= "0x81";
	RPT_WT	= "0x82";
	RPT_FC	= "0x83";

	/* Root node of XMLs */
	rootConfig		= null;
	rootCash		= null;
	rootPmix		= null;
	rootHourlySales	= null;
	rootView		= null;
	rootSOS			= null;
	rootDetailSOS	= null;
	rootCustom		= null;
	rootProduct		= null;

	rootSOSFC		= null;
	rootSOSDT		= null;
	rootSOSMFY		= null;
	
	rootTaxTable	= null;

	BOICommand		= null;
	nodeId			= null;
	posId			= null;
	DrawerChangeType= null;
	storeId			= null;
	businessDate	= null;
	POSversion		= null;

	WSBOI_HEADER	= "<?xml version=\"1.0\"?>"

	rootConfig = new XML(config);

	var matched = 0;
	var requiredDataTypesSize = requiredDataTypes != null ? requiredDataTypes.length : 0;
	var dataType=null;

	BOICommand=rootConfig.CustomData.CommandId.toLowerCase();
	nodeId=rootConfig.CustomData.NodeId;
	posId=rootConfig.CustomData.PosId;
	DrawerChangeType=rootConfig.CustomData.DrawerChangeType;
	storeId=rootConfig.CustomData.StoreId;
	businessDate=rootConfig.CustomData.BusinessDate;
	POSversion=rootConfig.CustomData.POSVersion;
	trunc24h=rootConfig.CustomData.trunc24h;

	for (var i = 0; i < data.length; i++) {
		var strXML=data[i].toString();
		if (data[i] != null) {
			var xml = new XML(data[i]);
			if(0 < xml.@requestDataType.length()) {
				dataType = xml.@requestDataType.toLowerCase();
			}
			if ("cash" == dataType) {
				rootCash = xml;
			} else if ("pmix" == dataType) {
				rootPmix = xml;
			} else if ("boimix" == dataType) {
				rootPmix = xml;
			} else if ("view" == dataType) {
				rootView = xml;
			} else if ("hourlysales" == dataType) {
				rootHourlySales = xml;
			} else if ("sos" == dataType) {
				rootSOS = xml;

				if (rootSOS.StoreTotals.@productionNodeId.length() != 0){
					if(rootSOSDT==null) {					
						rootSOSDT = (rootSOS.StoreTotals.@productionNodeId == "DT")?rootSOS:null;
					}
					if(rootSOSFC==null) {
						rootSOSFC = (rootSOS.StoreTotals.@productionNodeId == "FC")?rootSOS:null;
					}
					if(rootSOSMFY==null) {					
						rootSOSMFY = (rootSOS.StoreTotals.@productionNodeId == "MFY")?rootSOS:null;
					}
				}
			} else if ("custom" == dataType) {
				rootCustom = xml;
			} else if ("prods" == dataType) {
				rootProduct = xml;
			} else if ("detailsos" == dataType) {
				rootDetailSOS = xml;
			} else if ("taxtable" == dataType) {
				rootTaxTable = xml;
			}

			if("<TLD"==strXML.substring(0,4)) {
API.dbg("======= TLD");
				rootdetailTLD=xml;
			} else if("<DetailedSOS"==strXML.substring(0,12)) {
API.dbg("======= TLD SOS");
				rootdetailSOSTLD=xml;
			} else if("<MenuItem"==strXML.substring(0,9)) {
API.dbg("======= TLD MI");
				rootmenuItemTLD=xml;
			} else if("<SecurityData"==strXML.substring(0,13)) {
API.dbg("======= TLD SEC");
				securityDataTLD=xml;
			} 

			for (var j = 0; j < requiredDataTypesSize; j++) {
				if (requiredDataTypes[j].toLowerCase() == dataType) {
					matched++;
					break;
				}
			}
		}
	}

	if (matched < requiredDataTypesSize) {
		throw new Error("Missing data type for report. Check Configuration.");
	}
}


/**
 * This function returns the resulting report and executes some memory cleanup.
 * @return the report response to kernel
 */
function WS_getResponse() {
	var response	= outputBuffer;
	// Make a cleanup so that the garbage collector can free
	// some memory when the script ends.
	rootConfig		= null;
	rootCash		= null;
	rootPmix		= null;
	rootHourlySales	= null;
	rootView		= null;
	rootSOS			= null;
	rootDetailSOS	= null;
	rootCustom		= null;
	rootProduct		= null;

	rootSOSFC		= null;
	rootSOSDT		= null;
	rootSOSMFY		= null;
	BOICommand		= null;
	nodeId			= null;
	posId			= null;
	DrawerChangeType= null;
	storeId			= null;
	businessDate	= null;

	outputBuffer	= null;
	return response;
}

/** Appends a new line in the xml. */
function WS_addLine(line) {
	if (line != null) {
		outputBuffer.append(line);
	}
	outputBuffer.append("\n");
}

function Str2Currency(value) {
	return(API.formatNumber(Number(value),"##0.00",12));
}

function BigDec2Currency(value) {
	return(API.formatNumber(value.toString(),"##0.00",12));
}

function Nmb2Currency(value) {
	return(API.formatNumber(value,"##0.00",12));
}

function Currency(value) {
	return(API.formatNumber(Number(value),"##0.00",12));
}

/**
* The XMLCashRpt can contain multiple entry for an type ID.
*@params XMLCashRpt - is the cash report that need to be changed
*@return the xml in which we have just one entery for every the tender type
*/
function transformXmlCashRpt(XMLCashRptString)
{   
	//API.dbg("transformXML");
	
	var tendersID=new Array();
	var XMLCashRpt= new XML(XMLCashRptString);
	var numerbOfTenders=0;
	//API.dbg(XMLCashRpt.csh_Tender[0]);
	
	//take all the ids  and put them in tendersID array
	for each ( var tender in XMLCashRpt.csh_Tender )
	{	
		if( searchID( tendersID,tender.csh_TenderId ) ==true)
		{
		   //API.dbg("tendersID: " + tender.csh_TenderId);
		   tendersID.push( tender.csh_TenderId );
		}
		numerbOfTenders++;
	}
	
	//generate the cumulative information for the tenderIDs (for german store is not an issue) the report.nps and the report_ISP generates the same output. 
	//maybe it must be sum up this is the reason why I create these for each
	var tenders= new XML("<tenders/>"); //will have an xml <tenders>< {csh_Tender></csh_Tender>} </tenders> 
	for each (var id in tendersID)
	{
		/*
		<csh_Tender>
		<csh_TenderName>TENDER_NATIVE</csh_TenderName>
		<csh_TenderId>0</csh_TenderId>
		<csh_TenderAmount>37.96</csh_TenderAmount>
		<csh_TenderQty>20</csh_TenderQty>
		</csh_Tender>
		*/
		
		for each( var tenderInfo in XMLCashRpt.csh_Tender.(csh_TenderId == id) ) //select all the tenders with a specific id
		{
			//API.dbg("tendersAmount: " + tenderInfo.csh_TenderAmount);
			tenders.csh_Tender.csh_TenderName = tenderInfo.csh_TenderName;
			tenders.csh_Tender.csh_TenderId = tenderInfo.csh_TenderId;
			tenders.csh_Tender.csh_TenderAmount = tenderInfo.csh_TenderAmount; 
			tenders.csh_Tender.csh_TenderQty = tenderInfo.csh_TenderQty;
		}
	}
	
	//modify the report, eliminate the duplicates
	var IDs=new Array(); //array with different IDs that will remains in the cash report.
	//API.dbg("lenght"+XMLCashRpt.csh_Tender.lenght);
	for (var i=0; i < numerbOfTenders; i++)
	{
		if( searchID( IDs , XMLCashRpt.csh_Tender[i].csh_TenderId ) == true)  //if these is the first id, we insert in the list of ids and we change the date
		{
		   IDs.push( XMLCashRpt.csh_Tender[i].csh_TenderId );
		}	
		else //is a duplicate we must delete it and after we delete it the tenderInfo will not have the same number of element so we must decrement
		{
		    //API.dbg("delete");
			delete XMLCashRpt.csh_Tender[i];
			numerbOfTenders--;
			i--;
		}
	}

	//API.dbg(XMLCashRpt);
	
	return XMLCashRpt;
}

/**
* The XMLCashRpt can contain multiple entry for an type ID.
*@params tendersID- array of different tender ids.
*@params searchId- ithe id with which we make the comparison
*@return the true if the ID is not in the array
*/
function searchID(tendersID,searchId)
{ 
	for each (var id in tendersID)
	{
		if(id==searchId)
	    {
		//API.dbg("return false");
		    return false;
		}
	}	
	//API.dbg("return true");
	return true;
}

/** Wraps XMLElement.findFirst() to ignore null nodes */
function WS_findFirst(node, name) 
{
	if(node == null || name == null) {
		return 0;
	}
	var cmd = "node.." + name + "[0]";
	var value = eval(cmd);
	return value == null ? null : value;
}

/** Gets a numeric attribute, if not found, returns 0 */
function WS_getNumberAttribute(node, attribute) 
{
	if(node != null) {
	
		var cmd = "node.@" + attribute;
		var value = eval(cmd);
		if(value != null && value != "") {
			return Number(value);
		}
	}
	return 0;
}

/**
 * Summs the values of the given attribute from all given nodes.
 * @nodes list of nodes to summ attributes
 * @attributeName name of the attribute to get value from
 * @return the summ of values of 0 if 'nodes' or 'attributeName' are null.
 */
function WS_summNodesAttributeValues(nodes, attributeName) {
	if(nodes == null || attributeName == null) {
		return 0;
	}
	
	var total = 0;
	var size = nodes.length();

	if(size == 1){
		var cmd = "nodes.@" + attributeName;
		var value = eval(cmd);
		total += Number(value);
	}
	else{
		for(var i = 0; i < size; i++) {
			var cmd = "nodes[" + i + "]" + ".@" + attributeName;
			var value = eval(cmd);
			total += Number(value);
		}
	}
	return total;
}

/**
 * Summs the values of the given attribute from all given unique nodes.
 * @nodes list of nodes to summ attributes
 * @attributeName name of the attribute to get value from
 * @return the summ of values of 0 if 'nodes' or 'attributeName' are null.
 */
function WS_summUniqueNodesAttributeValues(nodes, attributeName) 
{
	if(nodes == null || attributeName == null) {
		return 0;
	}
	
	var total = 0;
	var size = nodes.length();
	var iIndex;
	var flagUnique;
	var POSid;
	var POSid2;
	
	if(size == 1){
		var cmd = "nodes.@" + attributeName;
		var value = eval(cmd);	
		total += Number(value);
	}
	else{
		for(var i = 0; i < size; i++) {
			flagUnique=true;
			POSid=eval("nodes[" + i + "]" + ".@id");
			for(iIndex=i+1; iIndex < size; iIndex++) {
				POSid2=eval("nodes[" + iIndex + "]" + ".@id");
				if(POSid==POSid2) {
					flagUnique=false;
				}
			}
			if(true==flagUnique) {
				var cmd = "nodes[" + i + "]" + ".@" + attributeName;
				var value = eval(cmd);
				total += Number(value);
			}
		}
	}
	return total;
}

/**
 * Gets the amount of McCards sold.
 * @param startPoint product mix start point to look data (Can be the root, a POS, etc...)
 * @param dayPart if not null, only the given day part will be included (LUNCH or BREAKFAST)
 * @param saleType if not null, only the given sale type will be included (qtyEatIn or qtyTakeOut)
 */
function WS_getmcCertSalesAmount(startPoint, dayPart, saleType) {

	if((startPoint == null) || (dayPart == null) || (saleType == null)){
		return 0;
	}
	var nodeFamilyGroup = startPoint.FamilyGroup.(@groupName == "GIFT_COUPON");
	if(nodeFamilyGroup == null) {
		return 0;
	}
	var nodesProduct = nodeFamilyGroup.Product;

	var total = 0;
	var valueAmoutEatIn   = 0;
	var valueAmoutTakeOut = 0;
	var valueAmoutOther   = 0;
	for each (var i in nodesProduct) {
		var nodeOperationType = i.OperationType.(@operationType == "SALE");
		if(nodeOperationType != null) {
			if(dayPart == null) {
			    // All day parts
				var nodesPrice = nodeOperationType.Price;
			}else {
				// Just the given day part
				var nodesPrice = nodeOperationType.Price.(@dayPart == dayPart);
			}

			for each (var j in nodesPrice) {
				if(saleType == null) {
				// EatIn + TakeOut
					var qty = WS_getPMixTotalQty(nodesPrice.PMix);
					nodePMix = nodesPrice.PMix;
					valueAmoutEatIn   += Number(nodePMix.@netAmountEatIn == null ? 0 : nodePMix.@netAmountEatIn);
					valueAmoutTakeOut += Number(nodePMix.@netAmountTakeOut == null ? 0 : nodePMix.@netAmountTakeOut);
					valueAmoutOther   += Number(nodePMix.@netAmountOther == null ? 0 : nodePMix.@netAmountOther);
				}else {
					// Just the given sale type
					var qty = WS_getNumberAttribute(nodesPrice.PMix, saleType);
				}
				
				total += (qty * WS_getNumberAttribute(nodesPrice, "salePrice"));

			}
		}
	}
	return total;
}

/**
 * Gets eatin+takeout+other quantity from a "PMix" node.
 * @param nodePMix "PMix" node
 * @return an int representing the total quantity.
 */
function WS_getPMixTotalQty(nodePMix) 
{
	if(nodePMix != null) {
	
		var valueqtyEatIn   = 0;
		var valueqtyTakeOut = 0;
		var valueqtyOther   = 0;
		
		for each (var i in nodePMix) {
			valueqtyEatIn 	+= Number(i.@qtyEatIn);
			valueqtyTakeOut += Number(i.@qtyTakeOut);
			valueqtyOther 	+= Number(i.@qtyOther);
		}
		
		return new Number(valueqtyEatIn)
			+ new Number(valueqtyTakeOut)
			+ new Number(valueqtyOther);
	}else {
		return 0;
	}
}

/**
 * Gets eatin+takeout+other netAmount from a "PMix" node.
 * @param nodePMix "PMix" node
 * @return an int representing the total netAmount.
 */
function WS_getPMixTotalnetAmount(nodePMix) 
{
	if(nodePMix != null) {
	
		var valuenetAmountEatIn   = 0;
		var valuenetAmountTakeOut = 0;
		var valuenetAmountOther   = 0;
		
		for each (var i in nodePMix) {
			valuenetAmountEatIn 	+= Number(i.@netAmtEatIn);
			valuenetAmountTakeOut   += Number(i.@netAmtTakeOut);
			valuenetAmountOther 	+= Number(i.@netAmtOther);
		}
		
		return new Number(valuenetAmountEatIn)
			+ new Number(valuenetAmountTakeOut)
			+ new Number(valuenetAmountOther);
	}else {
		return 0;
	}
}

/** Gets the summ of given attribute values for given POD type */
function WS_getPodCashAttribute(startPoint, pod, attributeName) 
{
	var total = 0;
	if(startPoint != null) {
		var nodesPOS;
		if(0==startPoint.POS.length()) {
			nodesPOS=startPoint;
		}
		else {
			nodesPOS=startPoint.POS;
		}
		var nodesPOSsize = nodesPOS.length();
		for(var i = 0; i < nodesPOSsize; i++) {
			var nodePOS = nodesPOS[i].(@podShort == pod);
			if(nodePOS != null) {
				var nodeCashTotals = nodePOS.CashTotals[0];
				var nodeCash = WS_findFirst(nodeCashTotals, "Cash");
				total += WS_getNumberAttribute(nodeCash, attributeName);
			}
		}
	}
	return total;
}

/**
 * PRIVATE
 * This function implements a generic Sale SOS report
 * Needed data types: CASH, HOURLYSALES, SOS
 * @author Celso Fernandes
 */
 
function generateSOS(config, data, root, reportType) {

var dbgz=0;
//API.dbg("-------1\n");

	if((null==root)||(null==root.POS)) {
		return;
	}

	var flagIsPROD = 0;
	var title;
	var posFC = root.POS.(@podShort=="FC");
	var posDT = root.POS.(@podShort=="DT");
	var	posFCDT = root.StoreTotals;

	orderTarget = root.PresetsTable.@orderTarget;
	lineTarget	= root.PresetsTable.@lineTarget;
	cashTarget	= root.PresetsTable.@cashTarget;
	totalTarget	= root.PresetsTable.@totalTarget;
	storeTarget	= root.PresetsTable.@storeTarget;
	holdTarget	= root.PresetsTable.@holdTarget;
	presentationTarget= root.PresetsTable.@presentationTarget;

	// Check if is production
	if ((posFC.length()!=0) || (posDT.length()!=0)){
		flagIsPROD = 0	// Local 
	}		
	else{
		flagIsPROD = 1	// Prod 
	}

//API.dbg("-------2\n");

//#####################################	
// Header Section	
//#####################################	
	var rootPos;
	switch(reportType) {
	case RPT_FC:
 		if (flagIsPROD == 0){ 		// Local
			if (posFC.length() !=0 ){
				rootPos = posFC;
			}
		}
		else{
			rootPos = rootSOSFC.StoreTotals;
		}
		break;		

	case RPT_DT:
		rootPos = (posDT.length()!=0)?posDT:rootSOSDT.StoreTotals;
		break;		

	case RPT_WT:
	default:
		rootPos = rootSOS;
		break;		
	}
//API.dbg("-------3\n");

	var totAvc_ac		= 0;
	var totAccum		= 0;
	var totAccumTc		= 0;
	var totAccumcars	= 0;
	var totAccumtts		= 0;

	var totot			= 0;
	var totlt			= 0;
	var totcash			= 0;
	var totpnst			= 0;
	var totovrp			= 0;
	var totovtotl		= 0;
	var tothld			= 0;
	var tothold			= 0;
	var totpvtotl		= 0;

	var totProdSale	 	= 0;
	var totTc			= 0;
	var totcars			= 0;

	var untilTotal		= 0;
	var untilStore		= 0;
	var untilRecall		= 0;
	var untilPay		= 0;
	var untilCloseDrawer= 0;
	var untilServe		= 0;
	var itemsCount		= 0;

	var tcOverOrderPreset= 0;
	var tcOverLinePreset = 0;
	var tcOverCashPreset = 0;
	var tcOverPresentationPreset=0;
	var tcOverTotalPreset= 0;
	var tcOverStorePreset= 0;

	var heldTime		= 0;
	var undoTime		= 0;
	var tcUnder25		= 0;
	var tcOver50		= 0;
	var tcOver60		= 0;
	var tcHeld			= 0;
	var hotTc			= 0;
	var hotUntilStore	= 0;
	var hotUntilRecall	= 0;
	var tcOverHoldPreset = 0;

	var indSegment = 0;
	var nodesDayPart 	= root.DayPartitioning.Segment;	
	var nodesDayPartSize= Number(nodesDayPart.length());

//#####################################	
// Body Section	
//#####################################	
	// Set up line with the information (Quarter hour)
	for (var hourAux = 0; hourAux < 24; hourAux++) {
		for (var minAux = 0; minAux < 60; minAux+=15) {
		
		var idDayPart = 0;
		var nodeSegment = 0;
		var hourSegment = 0;

		var resp=<param/>;

		// Get ative day part		
		for (var k = 0; k < nodesDayPartSize; k++) {
			 if (Number(String(nodesDayPart[k].@begTime).substring(0,4)) == hourAux*100+minAux){
				nodeSegment = nodesDayPart[k];
				hourSegment = String(nodeSegment.@begTime).substring(0,4);	
				indSegment = k;
				break;
			 }	
			else{
				hourSegment="99";
			}
		}

		// Join values by Segment
		while (Number(hourSegment) == (hourAux*100+minAux)) {
			var idDayPart = nodeSegment.@id;
			// Check if is production
			if (flagIsPROD == 0){
				var nodeServiceTime = rootPos.ServiceTime.(@id==idDayPart);
			}
			else{
				var nodeServiceTime = rootPos.ServiceTime.(@segmentId==idDayPart);
			}
			// Accumulate values by Segment
			totTc 				+= Number(nodeServiceTime.@tc);
			totProdSale			+= Number(nodeServiceTime.@totalAmount);
			totcars 			+= Number(nodeServiceTime.@cars);

			untilTotal			+= Number(nodeServiceTime.@untilTotal)/1000;
			untilStore			+= Number(nodeServiceTime.@untilStore)/1000;
			untilRecall			+= Number(nodeServiceTime.@untilRecall)/1000;
			untilPay			+= Number(nodeServiceTime.@untilPay)/1000;
			untilCloseDrawer	+= Number(nodeServiceTime.@untilCloseDrawer)/1000;
			untilServe			+= Number(nodeServiceTime.@untilServe)/1000;

			itemsCount			+= Number(nodeServiceTime.@itemsCount);

			tcOverOrderPreset	+= Number(nodeServiceTime.@tcOverOrderPreset);
			tcOverLinePreset	+= Number(nodeServiceTime.@tcOverLinePreset);
			tcOverCashPreset	+= Number(nodeServiceTime.@tcOverCashPreset);
			tcOverPresentationPreset+= Number(nodeServiceTime.@tcOverPresentationPreset);
			tcOverTotalPreset	+= Number(nodeServiceTime.@tcOverTotalPreset);
			tcOverStorePreset	+= Number(nodeServiceTime.@tcOverStorePreset);

			undoTime			+= Number(nodeServiceTime.ProductionTime.@undoTime)/1000;
			heldTime			+= Number(nodeServiceTime.ProductionTime.@heldTime)/1000;
			tcUnder25			+= Number(nodeServiceTime.ProductionTime.@tcUnder25);
			tcOver50			+= Number(nodeServiceTime.ProductionTime.@tcOver50);
			tcOver60			+= Number(nodeServiceTime.ProductionTime.@tcOver60);
			tcHeld				+= Number(nodeServiceTime.ProductionTime.@tcHeld);

			hotTc				+= Number(nodeServiceTime.ProductionTime.@hotTc);
			hotUntilStore		+= Number(nodeServiceTime.ProductionTime.@hotUntilStore)/1000;
			hotUntilRecall		+= Number(nodeServiceTime.ProductionTime.@hotUntilRecall)/1000;
			tcOverHoldPreset 	+= Number(nodeServiceTime.ProductionTime.@tcOverHoldPreset);

			indSegment++;

			if (Number(indSegment) < Number(nodesDayPartSize)){
				nodeSegment		= nodesDayPart[indSegment];
				hourSegment 	= String(nodeSegment.@begTime).substring(0,4);	
			}
			else{
				hourSegment		="99";
			}
		}

		// Create line for each type of report
		if (reportType == RPT_FC){
			// Create line for Front Counter Sale Report
			totAvc_ac	= (totTc!=0)?totProdSale/totTc:0;
			totAccum 	+= totProdSale;

			var ot		= (totTc!=0)?untilTotal/totTc:0; // Avg Order time 
			var lt		= 0;
			if ((root.POS.@podShort=="HOT")){
				lt 		= (totTc!=0)?untilRecall/totTc:0;
			}
			var cash	= (totTc!=0)?(untilCloseDrawer - untilTotal)/totTc:0; //Avg Cashier Time
			//var pnst	= (totTc!=0)?(untilServe - untilTotal)/totTc:0; // Avg Assembly time
			var pnst	= (totTc!=0)?(untilServe - untilCloseDrawer)/totTc:0;			
			var totl	= (totTc!=0)?untilServe/totTc:0; // Avg Total Time
			var ovra	= tcOverPresentationPreset;
			var pvtotl	= tcOverTotalPreset;

			resp.PeriodStartTime=API.formatNumber(hourAux, "00", 2) + API.formatNumber(minAux, "00", 2);
			resp.AvgOrderTime=API.formatNumber(ot, "####0", 5);
			resp.AvgAssemblyTime=API.formatNumber(pnst, "####0", 5);
			resp.AvgCashierTime=API.formatNumber(cash, "####0", 5);
			resp.AvgTotalTime=API.formatNumber(totl, "####0", 5);
			resp.AvgStorageTime=API.formatNumber(lt, "####0", 5);
			resp.OverTimeCount=Number(tcOver50);
			resp.TransactionCount=Number(totTc);
		}


		if (reportType == RPT_DT){	
			totAvc_ac	= (totTc!=0)?Number(totProdSale/totTc):0;			
			totAccum 	+= totProdSale;
			totAccumTc	+= totTc;
			totAccumcars+= totcars;
				
			var ot		= (totTc!=0)?untilStore/totTc:0; // Avg Order Time
			var lt		= (totTc!=0)?(untilRecall-untilStore) /totTc:0;
			var cash	= (totTc!=0)?(untilCloseDrawer - untilRecall)/totTc:0;
			var pnst	= (totTc!=0)?(untilServe - untilCloseDrawer)/totTc:0; 
			var totl	= ot + lt + cash + pnst;
			var ovrp	= tcOverPresentationPreset;
			var ovtotl	= tcOverTotalPreset;
			var hld		= Number(tcHeld); 
			var hold	= (hld!=0)?heldTime/hld:0;
			
			totot		+= Number(ot); 
			totlt		+= Number(lt); 
			totcash		+= Number(cash); 
			totpnst		+= Number(pnst); 
			totovrp		+= Number(ovrp); 
			totovtotl	+= Number(ovtotl); 
			tothld		+= Number(hld); 
			tothold		+= Number(hold); 
			totpvtotl	+= Number(totl); 

			var cars		= totcars;
			var orderTime	= (totTc!=0)?untilStore/totTc:0;
			var lineTime	= (totTc!=0)?(untilRecall-untilStore) /totTc:0;
			var cashTime	= (totTc!=0)?(untilCloseDrawer - untilRecall)/totTc:0;
			var psntTime	= (totTc!=0)?(untilServe - untilCloseDrawer)/totTc:0;
			//var posTime		= (totTc!=0)?(untilServe - (untilRecall-untilStore))/totTc:0;
			var posTime		= orderTime + lineTime + cashTime + psntTime;
			var ov90		= tcOverPresentationPreset;
		
			resp.PeriodStartTime=API.formatNumber(hourAux, "00", 2) + API.formatNumber(minAux, "00", 2);
			resp.AvgOrderTime=API.formatNumber(orderTime, "####0", 5);
			resp.AvgLineTimeWindow1=API.formatNumber(lineTime, "####0", 5);
			resp.AvgWindow1Time=API.formatNumber(cashTime, "####0", 5);
			resp.AvgWindow2Time=API.formatNumber(psntTime, "####0", 5);
			resp.OverTimeCountWindow1=tcOver50;
			resp.OverTimeCountWindow2=tcOver60;
			resp.AvgHoldTime=API.formatNumber(hold, "####0", 5);
			resp.HeldOrderCount=tothld;
			resp.TransactionCount=Number(totTc);
		}
		
		if (reportType == RPT_WT){	
			resp.PeriodStartTime=API.formatNumber(hourAux, "00", 2) + API.formatNumber(minAux, "00", 2);
			resp.AvgOrderTime=0;
			resp.AvgLineTimeWindow1=0;
			resp.AvgWindow1Time=0;
			resp.AvgWindow2Time=0;
			resp.OverTimeCountWindow1=0;
			resp.OverTimeCountWindow2=0;
			resp.AvgHoldTime=0;
			resp.HeldOrderCount=0;
			resp.TransactionCount=0;
		}
		
		totAvc_ac		= 0;
		
		totProdSale	 	= 0;
		totTc			= 0;
		totcars			= 0;
		tothld			= 0;

		untilTotal		= 0;
		untilStore		= 0;
		untilRecall		= 0;
		untilPay		= 0;
		untilCloseDrawer= 0;
		untilServe		= 0;

		itemsCount		= 0;

		tcOverOrderPreset	= 0;
		tcOverLinePreset	= 0;
		tcOverCashPreset	= 0;
		tcOverPresentationPreset=0;
		tcOverTotalPreset	= 0;
		tcOverStorePreset	= 0;
	
		heldTime		= 0;
		undoTime		= 0;
		tcUnder25		= 0;
		tcOver50		= 0;
		tcHeld			= 0;
		hotTc			= 0;
		hotUntilStore	= 0;
		hotUntilRecall	= 0;
		tcOverHoldPreset = 0;

		WS_addLine(resp);
		}
	}
	return;
}

/**
 * Generates a cash XML from a given point of the node on.
 * @param rootCash - The point to start generation on CASH xml. If rootCash is null generate all zeros output
 * @param rootPmix - idem Pmix xml
 * @param rootTenderTable - TenderTable extracted from cash xml to obtain cashless code 
 * @param rootProductTable - ProductTable extracted from rootPmix used by cashout to obtain GiftCard codes 
 * @param isCashout - true if a cashout is being generated. Necessary because the PMIX structure differs
 * if any given required data is not present.
 */
function generateCash(rootCash, rootPmix, rootTenderTable, rootProductTable, isCashout) {
	
	//API.dbg("==========> ROOT CASH =\n"+rootCash+"\n\n");
	//API.dbg("==========> ROOT PMIX =\n"+rootPmix+"\n\n");
	
	var previousItem=null;
	var OpeningForeverReading=0;
	var CurrentForeverReading=0;
	var allClosed=true;
	var resp=<param/>;
	var refundTC=0;
	var refundAmount=0;			

	if(null!=rootCash) {
		if((isCashout==true) || (0==rootCash.POS.length())) {
			OpeningForeverReading=rootCash.@initialGT;
			CurrentForeverReading=rootCash.@finalGT;
			if((isCashout==true) || (rootCash.@status!="CLOSED")) {
				allClosed=false;
			}
		}
		else {
			OpeningForeverReading=WS_summUniqueNodesAttributeValues(rootCash.POS, "initialGT");
			CurrentForeverReading=WS_summUniqueNodesAttributeValues(rootCash.POS, "finalGT");

			// NPS-11451
			var openDate=rootCash.@openingDate.toString();
			var closeDate=rootCash.@closingDate.toString();
			if((0==closeDate.length)&&(openDate.length>0)) {
				allClosed=false;
			}
		}
	}
	
	// if all POS are closed
	if((false==isCashout) && (true==allClosed)) {
API.dbg("==========> ALL CLOSED\n");

		// special - GT are equal to close value and all other values has zeros
		resp.OpeningForeverReading=Currency(CurrentForeverReading);
		resp.CurrentForeverReading=Currency(CurrentForeverReading);

		resp.TransactionCount="0";
		resp.OverringQuantity="0";
		resp.OverringAmount=Currency("0");
		resp.RefundQuantity="0";
		resp.RefundAmount=Currency("0");
		resp.OtherReceiptsQuantity="0";
		resp.OtherReceiptsAmount=Currency("0");
		resp.GCSoldAQuantity="0";
		resp.GCSoldAAmount=Currency("0");
		resp.GCSoldBQuantity="0";
		resp.GCSoldBAmount=Currency("0");
		resp.EatInTaxAmount=Currency("0");
		resp.TakeOutTaxAmount=Currency("0");
		resp.OtherTaxAmount=Currency("0");
		resp.NetSalesQuantity="0";
		resp.NetSalesAmount=Currency("0");
		resp.CouponAQuantity="0";
		resp.CouponAAmount=Currency("0");
		resp.CouponBQuantity="0";
		resp.CouponBAmount=Currency("0");
		resp.CouponCQuantity="0";
		resp.CouponCAmount=Currency("0");
		resp.CouponDQuantity="0";
		resp.CouponDAmount=Currency("0");
		resp.CouponEQuantity="0";
		resp.CouponEAmount=Currency("0");
		resp.DiscountSalesQuantity="0";
		resp.DiscountSalesAmount=Currency("0");
        resp.GCARedeemedQuantity="0";
        resp.GCARedeemedAmount=Currency("0");
        resp.GCBRedeemedQuantity="0";
        resp.GCBRedeemedAmount=Currency("0");
		resp.CreditSalesQuantity="0";
		resp.CreditSalesAmount=Currency("0");
		resp.NonProductSalesAmount=Currency("0");
		resp.NoTaxSalesQuantity="0";
		resp.NoTaxSalesAmount=Currency("0");
		resp.PromoSalesQuantity="0";
		resp.PromoSalesAmount=Currency("0");
		resp.EmployeeMealQuantity="0";
		resp.EmployeeMealAmount=Currency("0");
		resp.ManagerMealQuantity="0";
		resp.ManagerMealAmount=Currency("0");
		resp.TRedsBeforeTotalQuantity="0";
		resp.TRedsBeforeTotalAmount=Currency("0");
		resp.TRedsAfterTotalQuantity="0";
		resp.TRedsAfterTotalAmount=Currency("0");
		resp.EatInNetSalesQuantity="0";
		resp.EatInNetSalesAmount=Currency("0");
		resp.TakeOutNetSalesQuantity="0";
		resp.TakeOutNetSalesAmount=Currency("0");
		resp.OtherNetSalesQuantity="0";
		resp.OtherNetSalesAmount=Currency("0");
		resp.SuggestedNetSalesQuantity="0";
		resp.SuggestedSuccessfulNetSalesQuantity="0";
		resp.SuggestedNetSalesAmount=Currency("0");
		resp.ForeignCurrencyAComputed="0";
		resp.ForeignCurrencyBComputed="0";
		resp.ForeignCurrencyCComputed="0";
		resp.ForeignCurrencyDComputed="0";
		resp.ForeignCurrencyEComputed="0";
		resp.DTTransactionCount="0";
		resp.DTProductNetSalesAmount=Currency("0");
		resp.TotalSkimAmount=Currency("0");
		resp.OfflineSalesAmountClose=Currency("0");
		resp.OfflineSalesAmountMonthEnd=Currency("0");
		resp.OtherPaymentAQuantity="0";
		resp.OtherPaymentAAmount=Currency("0");
		resp.OtherPaymentBQuantity="0";
		resp.OtherPaymentBAmount=Currency("0");

		resp.GiftCardRedeemedQuantity="0";
		resp.GiftCardRedeemedAmount=Currency("0");
		resp.CashlessGrossQuantity="0";
		resp.CashlessGrossAmount=Currency("0");
		resp.CashlessRefundQuantity="0";
		resp.CashlessRefundAmount=Currency("0");
		resp.CashlessCashBackQuantity="0";
		resp.CashlessCashBackAmount=Currency("0");
		resp.CashlessCashBackFeeQuantity="0";
		resp.CashlessCashBackFeeAmount=Currency("0");
		resp.GiftCardSoldQuantity="0";
		resp.GiftCardSoldAmount=Currency("0");
	}
	else {
		var OverringQuantity=0;
		var OverringAmount=0;

		// hard code definition
		var GIFT_CERT_1$	= "936";
		var GIFT_CERT_5$	= "937";

		var GIFT_CARD_5$	= "8492";
		var GIFT_CARD_10$	= "8493";
		var GIFT_CARD_25$	= "8494";
		var GIFT_CARD_50$	= "8495";

		// Gift Coupoms
		var GCSoldAQuantity=0;
		var GCSoldAQuantityRefund=0;
		var GCSoldAAmount=0;
		var GCSoldAAmountRefund=0;
		var GCSoldBQuantity=0;
		var GCSoldBQuantityRefund=0;
		var GCSoldBAmount=0;
		var GCSoldBAmountRefund=0;
		var PMixProductCardQtyRef=0;
		var PMixProductCardQty=0;
		var PMixProductCardAmtRef=0;
		var PMixProductCardAmt=0;
		var gcEatInAmt=0;
		var gcTakeOutAmt=0;
		var itemPmix;

		if(isCashout==false) {
			if(0==rootCash.POS.length()) {
				// POS specific
				itemPmix=rootPmix.POS.(@id==rootCash.@id);
			}
			else {
				// storewide
				itemPmix=rootPmix;
			}
			if(itemPmix!=null) for each (var item in itemPmix.FamilyGroup) {
				if(Number(item.@groupCode)==9) {
					for each (var product in item.Product){
						for each (var operation in product.OperationType) {
							if(operation.@operationType=="SALE") {
								if(product.@id==GIFT_CERT_1$) {
	  								GCSoldAQuantity+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
									GCSoldAAmount+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
								}
								else if(product.@id==GIFT_CERT_5$) {
	  								GCSoldBQuantity+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
									GCSoldBAmount+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
								}
								else {
	  								PMixProductCardQty+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
									PMixProductCardAmt+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
								}
								gcEatInAmt+=Number(operation.PMix.@netAmtEatIn);
								gcTakeOutAmt+=Number(operation.PMix.@netAmtTakeOut);
								
							}
							else if(operation.@operationType=="REFUND") {
								if(product.@id==GIFT_CERT_1$) {
									GCSoldAQuantityRefund+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
									GCSoldAAmountRefund+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
								}
								else if(product.@id==GIFT_CERT_5$) {
									GCSoldAQuantityRefund+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
									GCSoldAAmountRefund+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);						
								}
								else {
									PMixProductCardQtyRef+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
									PMixProductCardAmtRef+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);							
								}
								gcEatInAmt-=Number(operation.PMix.@netAmtEatIn);
								gcTakeOutAmt-=Number(operation.PMix.@netAmtTakeOut);
							}
						}
					}
				}
			}
			GCSoldAQuantity-=GCSoldAQuantityRefund;
			GCSoldAAmount-=GCSoldAAmountRefund;
			GCSoldBQuantity-=GCSoldBQuantityRefund;
			GCSoldAAmount-=GCSoldBAmountRefund;
		}
		else { // PMIX root for cashout
			itemPmix=rootPmix;

			if(rootPmix!=null) for each (var product in rootPmix.Product){
				for each (var operation in product.OperationType) {
					if(operation.@operationType=="SALE") {
						if(product.@id==GIFT_CERT_1$) {
							GCSoldAQuantity+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
							GCSoldAAmount+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
						}
						else if(product.@id==GIFT_CERT_5$) {
							GCSoldBQuantity+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
							GCSoldBAmount+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
						}
						else {
							PMixProductCardQty+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
							PMixProductCardAmt+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
						}
						gcEatInAmt+=Number(operation.PMix.@netAmtEatIn);
						gcTakeOutAmt+=Number(operation.PMix.@netAmtTakeOut);
					}
					else if(operation.@operationType=="REFUND") {
						if(product.@id==GIFT_CERT_1$) {
							GCSoldAQuantityRefund+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
							GCSoldAAmountRefund+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
						}
						else if(product.@id==GIFT_CERT_5$) {
							GCSoldBQuantityRefund+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
							GCSoldBAmountRefund+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
						}
						else {
							PMixProductCardQtyRef+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
							PMixProductCardAmtRef+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);							
						}
						gcEatInAmt-=Number(operation.PMix.@netAmtEatIn);
						gcTakeOutAmt-=Number(operation.PMix.@netAmtTakeOut);
					}
				}
			}
			GCSoldAQuantity-=GCSoldAQuantityRefund;
			GCSoldAAmount-=GCSoldAAmountRefund;
			GCSoldBQuantity-=GCSoldBQuantityRefund;
			GCSoldBAmount-=GCSoldBAmountRefund;
	
			resp.RegisterID=""+posId;	// without "" does not work. It writes posId instead of RegisterID sd tag
			resp.DrawerChangeType=DrawerChangeType;
		}
		resp.GCSoldAQuantity=GCSoldAQuantity;
		resp.GCSoldAAmount=Currency(GCSoldAAmount);
		resp.GCSoldBQuantity=GCSoldBQuantity;
		resp.GCSoldBAmount=Currency(GCSoldBAmount);

	 	if((!isCashout) && (0!=rootCash.POS.length())) {
			for each (var item in rootCash.POS) {
				OverringQuantity+=Number(item.CashDetails.Void.@overringTC);
				//OverringQuantity+=Number(item.CashDetails.Void.@inProgressTC);
				OverringAmount+=Number(item.CashDetails.Void.@overringAmount);
				//OverringAmount+=Number(item.CashDetails.Void.@inProgressAmount);
				// Compute the partial tendered order cancelation as a refund of its integral value (SDE-521)
				refundTC+=Number(item.CashDetails.Void.@inProgressTC);
				refundAmount+=Number(item.CashDetails.Void.@inProgressAmount);
			}
		}
		else {
			OverringQuantity=Number(rootCash.CashDetails.Void.@overringTC);
			//OverringQuantity+=Number(rootCash.CashDetails.Void.@inProgressTC);
			OverringAmount=Number(rootCash.CashDetails.Void.@overringAmount);
			//OverringAmount+=Number(rootCash.CashDetails.Void.@inProgressAmount);
			// Compute the partial tendered order cancelation as a refund of its integral value (SDE-521)
			refundTC+=Number(rootCash.CashDetails.Void.@inProgressTC);
			refundAmount+=Number(rootCash.CashDetails.Void.@inProgressAmount);
		}

		resp.OpeningForeverReading=Currency(OpeningForeverReading);
		resp.CurrentForeverReading=Currency(CurrentForeverReading);
		//resp.TransactionCount=Number(rootCash.CashTotals.Cash.@tc);
		var qtdTCDiscard = rootCash.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00" && @couponAmount=="0.00");
		var totalTc 	 = WS_summNodesAttributeValues(rootCash.CashTotals.Cash,"tc") - WS_summNodesAttributeValues(qtdTCDiscard,"tc");	
		// Compute the partial tendered order cancelation as a finished order (SDE-521)
	 	if((!isCashout) && (0!=rootCash.POS.length())) {
	 		for each (var item in rootCash.POS) {
				totalTc+=Number(item.CashDetails.Void.@inProgressTC);
			}
		}
		else {
			totalTc+=Number(rootCash.CashDetails.Void.@inProgressTC);
		}
		resp.TransactionCount=totalTc;

		resp.OverringQuantity=OverringQuantity;
		resp.OverringAmount=Currency(OverringAmount);

		// Calculates cash refund
		for each (var item2 in rootCash.CashStatistics.SaleType) {
			for each (var item1 in item2.OperationKind) {
				if(item1.@id=="REFUND") {
					refundTC+=Number(item1.CashTotals.Cash.@tc);
					refundAmount+=Number(item1.CashTotals.Cash.@netAmount);
					refundAmount+=Number(item1.CashTotals.Cash.@taxAmount);
					break;
				}
			}
		}
		// Compute cashouts made
		if(0==rootCash.POS.length()) {
			for each (var item1 in rootCash.CashDetails) {
				if(item1.CashOut!=null) {
					refundTC+=Number(item1.CashOut.@tc);
					refundAmount+=Number(item1.CashOut.@amount);
				}
			}
		}
		else {
			for each (var item in rootCash.POS) {
				for each (var item1 in item.CashDetails) {
					if(item1.CashOut!=null) {
						refundTC+=Number(item1.CashOut.@tc);
						refundAmount+=Number(item1.CashOut.@amount);
					}
				}
			}
		}
		// Calculates cashless refund
		var cashlessRefundTC=0;
		var cashlessRefundAmount=0;
		for each (var item2 in rootCash.CashStatistics.SaleType) {
			for each (var item1 in item2.OperationKind) {
				if(item1.@id=="CASHLESS_REFUND") {
					cashlessRefundTC+=Number(item1.CashTotals.Cash.@tc);
					cashlessRefundAmount+=Number(item1.CashTotals.Cash.@netAmount);
					cashlessRefundAmount+=Number(item1.CashTotals.Cash.@taxAmount);
					break;
				}
			}
		}

		resp.RefundQuantity=refundTC-cashlessRefundTC;
		resp.RefundAmount=Currency(refundAmount-cashlessRefundAmount);

		// Calculates other receipts			
		var OtherReceiptsQuantity=0;
		var OtherReceiptsAmount=0;
		for each (var item in rootCash.CashDetails.TransfersIn) {
			if(item.@type=="OTHER_RECEIPTS") {
				OtherReceiptsQuantity=Number(item.@count);
				OtherReceiptsAmount=Number(item.@amount);
				break;
			}
		}
		resp.OtherReceiptsQuantity=OtherReceiptsQuantity;
		resp.OtherReceiptsAmount=Currency(OtherReceiptsAmount);

		//Calculates taxes per sale type
		var EatInTaxAmount=0;
		var TakeOutTaxAmount=0;
		var OtherTaxAmount=0;
		var NoTaxSalesQuantity=0;
		var NoTaxSalesAmount=0;
		for each (var item in rootCash.CashStatistics.SaleType) {
			for each (var item1 in item.OperationKind) {
				if(item1.@subType=="TAX") {
					if(item.@name=="EAT_IN") {
						EatInTaxAmount+=Number(item1.CashTotals.Cash.@taxAmount);					
					}
					else if(item.@name=="TAKE_OUT") {
						TakeOutTaxAmount+=Number(item1.CashTotals.Cash.@taxAmount);					
					}
					else {
						OtherTaxAmount+=Number(item1.CashTotals.Cash.@taxAmount);					
					}
				}
				if((item1.@subType=="TAX_EXEMPT") || (item1.@subType=="NO_TAX") ){
					NoTaxSalesQuantity+=Number(item1.CashTotals.Cash.@tc);
					NoTaxSalesAmount+=Number(item1.CashTotals.Cash.@netAmount);
				}
			}
		}
		var eiDiscard 				= rootCash.CashStatistics.SaleType.(@name=="EAT_IN").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc
		var eiAmountDiscard			= WS_summNodesAttributeValues(eiDiscard,"netAmount");
		var eiTaxDiscard			= WS_summNodesAttributeValues(eiDiscard,"taxAmount");
		var taxEatIn				= EatInTaxAmount - eiTaxDiscard;

		var toDiscard 				= rootCash.CashStatistics.SaleType.(@name=="TAKE_OUT").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc
		var toAmountDiscard			= WS_summNodesAttributeValues(toDiscard,"netAmount");
		var toTaxDiscard			= WS_summNodesAttributeValues(toDiscard,"taxAmount");
		var taxTakeOut				= TakeOutTaxAmount - toTaxDiscard;

//API.dbg("========= 0");

		// Net Sales Quantity and amount
		var PMixOperatorSession = null;
		var PMixProductCertRef	= null;
		var PMixProductCert	= null;
		var PMixProductCardRef	= null;
		var PMixProductCard	= null;

	    if(itemPmix!=null) {
			if(0==itemPmix.POS.length()) {
				PMixOperatorSession = itemPmix.FamilyGroup.(@groupName=="GIFT_COUPON");
			}
			else {
				PMixOperatorSession = itemPmix.POS.FamilyGroup.(@groupName=="GIFT_COUPON");
			}
			//API.dbg("========= PMixOperatorSession["+PMixOperatorSession+"]");
			PMixProductCertRef	= PMixOperatorSession.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
			PMixProductCert	= PMixOperatorSession.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
			PMixProductCardRef	= PMixOperatorSession.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
			PMixProductCard	= PMixOperatorSession.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
	    }

//API.dbg("========= 1");
		var mcCertSalesRefundAmount	= WS_getPMixTotalnetAmount(PMixProductCertRef);
		var mcCertSalesAmount		= WS_getPMixTotalnetAmount(PMixProductCert);
		var mcCardSalesRefundAmount	= WS_getPMixTotalnetAmount(PMixProductCardRef); 
		var mcCardSalesAmount		= WS_getPMixTotalnetAmount(PMixProductCard); 

		var nodeCashStatistics		= rootCash.CashStatistics;	
		var nodeOperationKindRefund	= nodeCashStatistics.SaleType.OperationKind.(@id == "REFUND");
		var nodeCashTotalsRefund	= nodeOperationKindRefund.CashTotals;
		var nodeCashRefund			= nodeCashTotalsRefund.Cash;	
		var refundsAmount			= WS_summNodesAttributeValues(nodeCashRefund,"netAmount");
		var netSalesAmount			= WS_summNodesAttributeValues(rootCash.CashTotals.Cash, "netAmount") - GCSoldAAmount-GCSoldBAmount - (PMixProductCardAmt-PMixProductCardAmtRef);
		//report.nps var netSalesAmount		= WS_summNodesAttributeValues(nodeCash, "netAmount") - (mcCertSalesAmount-mcCertSalesRefundAmount) - (mcCardSalesAmount-mcCardSalesRefundAmount);
		netSalesAmount				= netSalesAmount - (refundsAmount); 

	 	//NoTaxSalesAmount			= NoTaxSalesAmount - (mcCertSalesAmount + mcCardSalesAmount);	 	
	 	//NoTaxSalesAmount			= NoTaxSalesAmount - (GCSoldAAmount + GCSoldAQuantityRefund + GCSoldAAmount + GCSoldBQuantityRefund + PMixProductCardAmt);	 	

		resp.EatInTaxAmount=Currency(taxEatIn);
		resp.TakeOutTaxAmount=Currency(TakeOutTaxAmount);
		resp.TakeOutTaxAmount=Currency(taxTakeOut);
		resp.OtherTaxAmount=Currency(OtherTaxAmount);
		resp.NoTaxSalesQuantity=NoTaxSalesQuantity;
		resp.NoTaxSalesAmount=Currency(NoTaxSalesAmount);


		//resp.NetSalesAmount=Currency(rootCash.CashTotals.Cash.@netAmount);
		resp.NetSalesAmount=Currency(netSalesAmount);
		resp.NetSalesQuantity=Number(rootCash.CashTotals.Cash.@tc);

//API.dbg("========= 2");

		// Eat in values
		var nodeCashStatistics		= rootCash.CashStatistics;
		var nodeSaleTypeEatIn		= nodeCashStatistics.SaleType.(@name == "EAT_IN");
		var nodeSaleTypeTakeOut		= nodeCashStatistics.SaleType.(@name == "TAKE_OUT");
		var nodeSaleTypeOther		= nodeCashStatistics.SaleType.(@name == "OTHER");


		var nodeEatInCashTotals		= nodeSaleTypeEatIn.CashTotals;
		var nodeTakeOutCashTotals	= nodeSaleTypeTakeOut.CashTotals;
		var nodeOtherCashTotals		= nodeSaleTypeOther.CashTotals;

		// old var eiqtdTCDiscard 			= nodeCashStatistics.SaleType.(@name=="EAT_IN").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash;//.@tc
		var eiqtdTCDiscard 			= nodeCashStatistics.SaleType.(@name=="EAT_IN").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00" && @couponAmount=="0.00");//.@tc
		var EatInNetSalesQuantity	= WS_summNodesAttributeValues(nodeEatInCashTotals.Cash, "tc") - (WS_summNodesAttributeValues(eiqtdTCDiscard,"tc")<=0 ? 0 : WS_summNodesAttributeValues(eiqtdTCDiscard,"tc"));
		var eiMcCard				= WS_getmcCertSalesAmount(PMixOperatorSession, null, "qtyEatIn");
		var eiDiscard 				= nodeCashStatistics.SaleType.(@name=="EAT_IN").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc
		var eiAmountDiscard			= WS_summNodesAttributeValues(eiDiscard,"netAmount");
		var eiTaxDiscard			= WS_summNodesAttributeValues(eiDiscard,"taxAmount");
		//old
		//var EatInNetSalesAmount		= WS_summNodesAttributeValues(nodeEatInCashTotals.Cash,"netAmount") - eiMcCard - eiAmountDiscard;
		var EatInNetSalesAmount		= WS_summNodesAttributeValues(nodeEatInCashTotals.Cash,"netAmount")
									   - eiAmountDiscard - gcEatInAmt;
									   //- WS_summNodesAttributeValues(PMixProductCard,"netAmtEatIn")
									   //- WS_summNodesAttributeValues(PMixProductCert,"netAmtEatIn")
									   //+ WS_summNodesAttributeValues(PMixProductCertRef,"netAmtEatIn")
									   //+ WS_summNodesAttributeValues(PMixProductCardRef,"netAmtEatIn");
		var eiTax					= WS_summNodesAttributeValues(nodeEatInCashTotals.Cash,"taxAmount") - eiTaxDiscard;

		// Take out values
		var toqtdTCDiscard 			= nodeCashStatistics.SaleType.(@name=="TAKE_OUT").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00" && @couponAmount=="0.00");//.@tc
		var TakeOutNetSalesQuantity	= WS_summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "tc") - (WS_summNodesAttributeValues(toqtdTCDiscard,"tc")<=0 ? 0 : WS_summNodesAttributeValues(toqtdTCDiscard,"tc"));
		var toMcCard				= WS_getmcCertSalesAmount(PMixOperatorSession, null, "qtyTakeOut");
		var toDiscard 				= nodeCashStatistics.SaleType.(@name=="TAKE_OUT").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc
		var toAmountDiscard			= WS_summNodesAttributeValues(toDiscard,"netAmount");
		var toTaxDiscard			= WS_summNodesAttributeValues(toDiscard,"taxAmount");
		//old
		//var TakeOutNetSalesAmount	= WS_summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "netAmount") - toMcCard - toAmountDiscard;
		var TakeOutNetSalesAmount	= WS_summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "netAmount")
									   - toAmountDiscard  - gcTakeOutAmt;
									   //- WS_summNodesAttributeValues(PMixProductCard,"netAmtTakeOut")
									   //- WS_summNodesAttributeValues(PMixProductCert,"netAmtTakeOut")
									   //+ WS_summNodesAttributeValues(PMixProductCertRef,"netAmtTakeOut");								   
		var toTax					= WS_summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "taxAmount") - toTaxDiscard;

		// Other values
		var otherqtdTCDiscard 		= nodeCashStatistics.SaleType.(@name=="OTHER").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00" && @couponAmount=="0.00");//.@tc	
		var OtherNetSalesQuantity	= WS_summNodesAttributeValues(nodeOtherCashTotals.Cash, "tc") - (WS_summNodesAttributeValues(otherqtdTCDiscard,"tc")<=0 ? 0 : WS_summNodesAttributeValues(otherqtdTCDiscard,"tc"));
		//old
		//var otherMcCard				= WS_getmcCertSalesAmount(rootPmix.FamilyGroup.(@groupName=="GIFT_COUPON"), null, "qtyOther");
		//var OtherNetSalesAmount		= WS_summNodesAttributeValues(nodeOtherCashTotals.Cash, "netAmount") - otherMcCard;
		var otherDiscard 			= rootCash.CashStatistics.SaleType.(@name=="OTHER").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc								  
		var otherAmountDiscard		= WS_summNodesAttributeValues(otherDiscard,"netAmount");
		var OtherNetSalesAmount		= WS_summNodesAttributeValues(nodeOtherCashTotals.Cash, "netAmount")
									   - otherAmountDiscard 
									   - WS_summNodesAttributeValues(PMixProductCard,"netAmtOther")
									   - WS_summNodesAttributeValues(PMixProductCert,"netAmtOther")
									   + WS_summNodesAttributeValues(PMixProductCertRef,"netAmtOther");
		var otherTax				= WS_summNodesAttributeValues(nodeOtherCashTotals.Cash, "taxAmount");
//API.dbg("========= 3");
		resp.EatInNetSalesQuantity=EatInNetSalesQuantity;
		resp.EatInNetSalesAmount=Currency(EatInNetSalesAmount);
		resp.TakeOutNetSalesQuantity=TakeOutNetSalesQuantity;
		resp.TakeOutNetSalesAmount=Currency(TakeOutNetSalesAmount);
		resp.OtherNetSalesQuantity=OtherNetSalesQuantity;
		resp.OtherNetSalesAmount=Currency(OtherNetSalesAmount);
//API.dbg("========= 4");
		// NonProduct Sales Amount
		resp.NonProductSalesAmount=Currency(rootCash.CashTotals.NonProductSales.Cash.@netAmount);

		// Promo, Manager, Employee and Discount sales
		var PromoSalesQuantity=0;
		var PromoSalesAmount=0;
		var EmployeeMealQuantity=0;
		var EmployeeMealAmount=0;
		var ManagerMealQuantity=0;
		var ManagerMealAmount=0;
		var DiscountSalesQuantity=0;
		var DiscountSalesAmount=0;
		for each (var item in rootCash.CashStatistics.SaleType) {
			for each (var item1 in item.OperationKind) {
				if(item1.@id=="PROMO") {
					PromoSalesQuantity+=Number(item1.CashTotals.Cash.@tc);
					PromoSalesAmount+=Number(item1.CashTotals.Cash.@netAmount);
				}
				if(item1.@id=="CREW") {
					EmployeeMealQuantity+=Number(item1.CashTotals.Cash.@tc);
					EmployeeMealAmount+=(Number(item1.CashTotals.Cash.@netBeforeDiscount)-Number(item1.CashTotals.Cash.@netAmount)-Number(item1.CashTotals.Cash.@couponAmount));
				}
				if(item1.@id=="MANAGER") {
					ManagerMealQuantity+=Number(item1.CashTotals.Cash.@tc);
					ManagerMealAmount+=(Number(item1.CashTotals.Cash.@netBeforeDiscount)-Number(item1.CashTotals.Cash.@netAmount)-Number(item1.CashTotals.Cash.@couponAmount));
				}
				if(item1.@id=="DISCOUNT") {
					DiscountSalesQuantity+=Number(item1.CashTotals.Cash.@tc);
					DiscountSalesAmount+=(Number(item1.CashTotals.Cash.@netBeforeDiscount)-Number(item1.CashTotals.Cash.@netAmount)-Number(item1.CashTotals.Cash.@couponAmount));
				}
			}
		}
		resp.PromoSalesQuantity=PromoSalesQuantity;
		resp.PromoSalesAmount=Currency(PromoSalesAmount);
		resp.EmployeeMealQuantity=EmployeeMealQuantity;
		resp.EmployeeMealAmount=Currency(EmployeeMealAmount);
		resp.ManagerMealQuantity=ManagerMealQuantity;
		resp.ManagerMealAmount=Currency(ManagerMealAmount);
		resp.DiscountSalesQuantity=DiscountSalesQuantity;
		resp.DiscountSalesAmount=Currency(DiscountSalesAmount);
//API.dbg("========= 5");
		// Skim
		var TotalSkimAmount=0.00;
		for each (var item in rootCash.CashDetails.TransfersOut) {
			if(item.@type=="SKIM") {
				TotalSkimAmount=Number(item.@amount);
			}
		}
		resp.TotalSkimAmount=Currency(TotalSkimAmount);
//API.dbg("========= 6");
	
//API.dbg("========= 7");

		if(!isCashout) {
			var PMixOperatorSessionDT;
			if(0==itemPmix.POS.length()) {
				PMixOperatorSessionDT=itemPmix.(@podShort == "DT").FamilyGroup.(@groupName=="GIFT_COUPON");
			}
			else {
				PMixOperatorSessionDT=itemPmix.POS.(@podShort == "DT").FamilyGroup.(@groupName=="GIFT_COUPON");
			}
			API.dbg("========= PMixOperatorSessionDT["+PMixOperatorSessionDT+"]");
			var PMixProductCertRefDT  = PMixOperatorSessionDT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
			var PMixProductCertDT	  = PMixOperatorSessionDT.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
	    	var PMixProductCardRefDT  = PMixOperatorSessionDT.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
		    var PMixProductCardDT	  = PMixOperatorSessionDT.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
	
			// Drive-Thru values
			var DTTransactionCount		= WS_getPodCashAttribute(rootCash, "DT", "tc");
			var dtDiscard;
		 	if(0==rootCash.POS.length()) {
		 		dtDiscard	= rootCash.(@podShort == "DT").CashStatistics.SaleType.(@name=="TAKE_OUT").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc
		 	}
		 	else {
		 		dtDiscard	= rootCash.POS.(@podShort == "DT").CashStatistics.SaleType.(@name=="TAKE_OUT").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc
		 	}
	
			var dtAmountDiscard			= WS_summNodesAttributeValues(dtDiscard,"netAmount");
			var DTProductNetSalesAmount				= WS_getPodCashAttribute(rootCash, "DT", "netAmount")
										 - dtAmountDiscard
										 - WS_getPMixTotalnetAmount(PMixProductCardDT)
										 - WS_getPMixTotalnetAmount(PMixProductCertDT) 	
	 									 + WS_getPMixTotalnetAmount(PMixProductCertRefDT) 							 
										 + WS_getPMixTotalnetAmount(PMixProductCardRefDT);
	
			resp.DTTransactionCount=DTTransactionCount;
			resp.DTProductNetSalesAmount=Currency(DTProductNetSalesAmount);
		}

//API.dbg("========= 8");
		// Coupons
		// 	<TenderType id="1" name="Coupon A" /> 
		//	<TenderType id="2" name="Coupon B" /> 
		//	<TenderType id="3" name="Coupon C" /> 
		//	<TenderType id="4" name="Coupon D" /> 
		//	<TenderType id="5" name="Coupon E" /> 
		//	<TenderType id="6" name="Billable Sales" /> Credit Sales
		var CouponAQuantity=0;
		var CouponAAmount=0;
		var CouponBQuantity=0;
		var CouponBAmount=0;
		var CouponCQuantity=0;
		var CouponCAmount=0;
		var CouponDQuantity=0;
		var CouponDAmount=0;
		var CouponEQuantity=0;
		var CouponEAmount=0;
		var CreditSalesQuantity=0; // Billable sales
		var CreditSalesAmount=0;		
		var GCARedeemedQuantity=0;
		var GCARedeemedAmount=0;
		var GCBRedeemedQuantity=0;
		var GCBRedeemedAmount=0;
		var GiftCardRedeemedQuantity=0;
		var GiftCardRedeemedAmount=0;
		for each (var item in rootCash.CashDetails.Tenders.Tender) {
			switch(Number(item.@id)) {
				case 1:
					CouponAQuantity+=Number(item.@qty);
					CouponAAmount+=Number(item.@drawerAmount);
					break;
				case 2:
					CouponBQuantity+=Number(item.@qty);
					CouponBAmount+=Number(item.@drawerAmount);
					break;
				case 3:
					CouponCQuantity+=Number(item.@qty);
					CouponCAmount+=Number(item.@drawerAmount);
					break;
				case 4:
					CouponDQuantity+=Number(item.@qty);
					CouponDAmount+=Number(item.@drawerAmount);
					break;
				case 5:
					CouponEQuantity+=Number(item.@qty);
					CouponEAmount+=Number(item.@drawerAmount);
					break;
				case 6:
					CreditSalesQuantity+=Number(item.@qty);
					CreditSalesAmount+=Number(item.@drawerAmount);
					break;
				case 7:
					GCARedeemedQuantity+=Number(item.@qty);
					GCARedeemedAmount+=Number(item.@drawerAmount);
					break;
				case 8:
					GCBRedeemedQuantity+=Number(item.@qty);
					GCBRedeemedAmount+=Number(item.@drawerAmount);
					break;
	
				case 11:
					GiftCardRedeemedQuantity+=Number(item.@qty);
					GiftCardRedeemedAmount+=Number(item.@drawerAmount);
					break;
			}
		}
		resp.CouponAQuantity=CouponAQuantity;
		resp.CouponAAmount=Currency(CouponAAmount);
		resp.CouponBQuantity=CouponBQuantity;
		resp.CouponBAmount=Currency(CouponBAmount);
		resp.CouponCQuantity=CouponCQuantity;
		resp.CouponCAmount=Currency(CouponCAmount);
		resp.CouponDQuantity=CouponDQuantity;
		resp.CouponDAmount=Currency(CouponDAmount);
		resp.CouponEQuantity=CouponEQuantity;
		resp.CouponEAmount=Currency(CouponEAmount);
		resp.CreditSalesQuantity=CreditSalesQuantity; // Billable sales
		resp.CreditSalesAmount=Currency(CreditSalesAmount);
	    resp.GCARedeemedQuantity=GCARedeemedQuantity;
	    resp.GCARedeemedAmount=Currency(GCARedeemedAmount);
	    resp.GCBRedeemedQuantity=GCBRedeemedQuantity;
	    resp.GCBRedeemedAmount=Currency(GCBRedeemedAmount);
		resp.GiftCardRedeemedQuantity=GiftCardRedeemedQuantity;
		resp.GiftCardRedeemedAmount=Currency(GiftCardRedeemedAmount);
//API.dbg("========= 9");
		// Reduction
		var TRedsBeforeTotalQuantity=0;
		var TRedsBeforeTotalAmount=0;
		var TRedsAfterTotalQuantity=0;
		var TRedsAfterTotalAmount=0;

		var nodeReduction			= rootCash.CashDetails.Reduction;
		if(nodeReduction.length()!=0) {
			TRedsBeforeTotalQuantity=Number(nodeReduction.@itemsBeforeTotal);
			TRedsBeforeTotalAmount=nodeReduction.@amountBeforeTotal;
			TRedsAfterTotalQuantity+=Number(nodeReduction.@redsAfterTotal);
			TRedsAfterTotalAmount+=Number(nodeReduction.@redsAmtAfterTotal);
			//TRedsAfterTotalQuantity+=Number(nodeReduction.@tc);
			//TRedsAfterTotalAmount+=Number(nodeReduction.@amountAfterTotal);
		}
		else {
			for each (var item in rootCash.POS) {
				nodeReduction = item.CashDetails.Reduction;
	
				TRedsBeforeTotalQuantity+=Number(nodeReduction.@itemsBeforeTotal);
				TRedsBeforeTotalAmount+=Number(nodeReduction.@amountBeforeTotal);
				TRedsAfterTotalQuantity+=Number(nodeReduction.@redsAfterTotal);
				TRedsAfterTotalAmount+=Number(nodeReduction.@redsAmtAfterTotal);
				//TRedsAfterTotalQuantity+=Number(nodeReduction.@tc);
				//TRedsAfterTotalAmount+=Number(nodeReduction.@amountAfterTotal);
			}
		}

		resp.TRedsBeforeTotalQuantity=TRedsBeforeTotalQuantity;
		resp.TRedsBeforeTotalAmount=Currency(TRedsBeforeTotalAmount);
		resp.TRedsAfterTotalQuantity=TRedsAfterTotalQuantity;
		resp.TRedsAfterTotalAmount=Currency(TRedsAfterTotalAmount);
//API.dbg("========= 10");
		// Do not know what it is				
		resp.OtherPaymentAQuantity="0";
		resp.OtherPaymentAAmount=Currency("0");
		resp.OtherPaymentBQuantity="0";
		resp.OtherPaymentBAmount=Currency("0");

		// Let as zero
		resp.SuggestedNetSalesQuantity="0";
		resp.SuggestedSuccessfulNetSalesQuantity="0";
		resp.SuggestedNetSalesAmount=Currency("0");
		resp.ForeignCurrencyAComputed="0";
		resp.ForeignCurrencyBComputed="0";
		resp.ForeignCurrencyCComputed="0";
		resp.ForeignCurrencyDComputed="0";
		resp.ForeignCurrencyEComputed="0";
		resp.OfflineSalesAmountClose=Currency("0");
		resp.OfflineSalesAmountMonthEnd=Currency("0");

//API.dbg("========= 11");
		// Get cashless id
		var cashlessId=-1;
		var cashlessName;
		for each (var item1 in rootTenderTable.TenderType) {
			cashlessName=item1.@name;
			if((cashlessName=="Cashless") || (cashlessName=="cashless") || (cashlessName=="CASHLESS")) {
				cashlessId=item1.@id;
				break;
			}
		}

		// Cashless data
		var cashlessQtty=0;
		var cashlessAmount=0;
		for each (var item1 in rootCash.CashDetails.Tenders.Tender) {
			if(cashlessId==item1.@id) {
				cashlessQtty=Number(item1.@qty);
				cashlessAmount=Number(item1.@drawerAmount);
				break;
			}
		}
		resp.CashlessGrossQuantity=cashlessQtty;
		resp.CashlessGrossAmount=Currency(cashlessAmount+cashlessRefundAmount);

		// cashless refund
		resp.CashlessRefundQuantity=cashlessRefundTC;
		resp.CashlessRefundAmount=Currency(cashlessRefundAmount);
//API.dbg("========= 12");
		// force zero value
		resp.CashlessCashBackQuantity="0";
		// force zero value
		resp.CashlessCashBackAmount=Currency("0");
		// force zero value
		resp.CashlessCashBackFeeQuantity="0";
		// force zero value
		resp.CashlessCashBackFeeAmount=Currency("0");

		// Gift Card sold
		var shortName="";
		var dtName="";
		var longName="";
		var productId=0;
		var productQtty=0;
		var productAmount=0;
		var itemProduct=null;

		if(!isCashout) {
			itemProduct=rootPmix.ProductTable;
		}
		else {
			itemProduct=rootProductTable;
		}

		//API.dbg("itemProduct["+itemProduct+"]")
		if(null!=itemProduct) for each (var pInfo in itemProduct.ProductInfo) {
		var shortName="";
		var dtName="";
		var longName="";
			shortName=String(pInfo.@name).substring(0,6);
			dtName=String(pInfo.@name).substring(0,11);
			longName=String(pInfo.@name).substring(0,10);
			// Gift card sold and reloaded
			if(("GCARD " == shortName)||("GCRE $" == shortName)||("GIFT CARD $" == dtName)||("G CARD RE $" == dtName)||("GIFT CARD " == longName)) {
				productId=pInfo.@id;
				if(!isCashout) {
					for each (var fGroup in itemPmix.FamilyGroup) {
						for each (var prod in fGroup.Product) {
							if(productId==prod.@id) {
								for each (var opType in prod.OperationType) {
									if(opType.@operationType=="SALE") {
										productQtty+=Number(opType.PMix.@qtyEatIn);
										productQtty+=Number(opType.PMix.@qtyTakeOut);
										productAmount+=Number(opType.PMix.@netAmtEatIn);
										productAmount+=Number(opType.PMix.@taxEatIn);
										productAmount+=Number(opType.PMix.@netAmtTakeOut);
										productAmount+=Number(opType.PMix.@taxTakeOut);
									}
									else {
										if(opType.@operationType=="REFUND") {
											productQtty-=Number(opType.PMix.@qtyEatIn);
											productQtty-=Number(opType.PMix.@qtyTakeOut);
											productAmount-=Number(opType.PMix.@netAmtEatIn);
											productAmount-=Number(opType.PMix.@taxEatIn);
											productAmount-=Number(opType.PMix.@netAmtTakeOut);
											productAmount-=Number(opType.PMix.@taxTakeOut);
										}
									}
								}
							}
						}
					}
				}
				else {
					for each (var prod in itemPmix.Product) {
						if(productId==prod.@id) {
							for each (var opType in prod.OperationType) {
								if(opType.@operationType=="SALE") {
									productQtty+=Number(opType.PMix.@qtyEatIn);
									productQtty+=Number(opType.PMix.@qtyTakeOut);
									productAmount+=Number(opType.PMix.@netAmtEatIn);
									productAmount+=Number(opType.PMix.@taxEatIn);
									productAmount+=Number(opType.PMix.@netAmtTakeOut);
									productAmount+=Number(opType.PMix.@taxTakeOut);
								}
								else {
									if(opType.@operationType=="REFUND") {
										productQtty-=Number(opType.PMix.@qtyEatIn);
										productQtty-=Number(opType.PMix.@qtyTakeOut);
										productAmount-=Number(opType.PMix.@netAmtEatIn);
										productAmount-=Number(opType.PMix.@taxEatIn);
										productAmount-=Number(opType.PMix.@netAmtTakeOut);
										productAmount-=Number(opType.PMix.@taxTakeOut);
									}
								}
							}
						}
					}
				}
			}
		}

		resp.GiftCardSoldQuantity=productQtty;
		resp.GiftCardSoldAmount=Currency(productAmount);
//API.dbg("========= 13");
	}
	WS_addLine(resp);

	return;
}

/**
 * Generates a PMix XML from a given point of the node on.
 * @param rootCash - The point to start generation on CASH xml
 * @param rootPmix - idem Pmix xml
 * if any given required data is not present.
 */
function generatePmix(rootCash, rootPmix) {
	var OpeningForeverReading=0;
	var CurrentForeverReading=0;
	var OverringQuantity=0;
	var OverringAmount=0;
	var iMenuItemPosition=1;
	var uServed;
	var uServedCrew;
	var uPromo;
	var uWasted;
	var uDiscounted;
	var resp=<param/>;
	var ItemPrice;
	//NVS-855 changes to eliminate duplicate records
	var PMIXRecordsArray = new Array();

	for each (var fGroup in rootPmix.FamilyGroup) {
		for each (var product in fGroup.Product) {
			// filter choices
			// NPS-7406 - products with price must be listed
			if((Number(product.@id)<ProductCodeFilter)||(Number(product.OperationType.(@operationType == "SALE").Price.@salePrice)>0)) {
				resp.MenuItemPosition=iMenuItemPosition;
				resp.MenuItemCode=Number(product.@id);
				if(Number(product.@eatinPrice) != 0) {
					resp.ItemPrice=Currency(product.@eatinPrice);
				}
				else {
					if(Number(product.@takeoutPrice) != 0) {
						resp.ItemPrice=Currency(product.@takeoutPrice);
					}
					else {
						resp.ItemPrice=Currency(0);
					}
				}

				uServed=0;
				uServedCrew=0;
				uWasted=0;
				uPromo=0;
				uDiscounted=0;
				if((0 != Number(product.@eatinPrice)+Number(product.@takeoutPrice)) ||
						("RAW_ITEM" != rootPmix.ProductTable.ProductInfo.(@id==product.@id).@class)) {
					for each (var opType in product.OperationType) {
						// code below propositally don't follow else-if pattern
						// SALE		- UnitsServed
						if("SALE" == opType.@operationType) {
							uServed = uServed + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
						}
						else
						// MANAGER	- UnitsServed
						if("MANAGER" == opType.@operationType) {
							uServedCrew = uServedCrew + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
						}
						else
						// CREW		- UnitsServed
						if("CREW" == opType.@operationType) {
							uServedCrew = uServedCrew + Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
						}
						else
						// REFUND	- discount from SALE (issue SDE-326)
						if("REFUND" == opType.@operationType) {
							uServed = uServed - (Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther));
						}
						else
						// WASTE	- UnitsWasted
						if("WASTE" == opType.@operationType) {
							uWasted = Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
						}
						else
						// PROMO	- UnitsPromo
						if("PROMO" == opType.@operationType) {
							uPromo = Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
						}
						else
						// DISCOUNT - UnitsDiscounted
						if("DISCOUNT" == opType.@operationType) {
							uDiscounted = Number(opType.PMix.@qtyEatIn) + Number(opType.PMix.@qtyTakeOut) + Number(opType.PMix.@qtyOther);
						}
					}
				}

				if (PMIXRecordsArray[product.@id] == null) {
					var NewItem = new PMIXItem(iMenuItemPosition, product.@id, ItemPrice, uServed, uServedCrew, uPromo, uWasted, uDiscounted);
					PMIXRecordsArray[product.@id] = NewItem;
					iMenuItemPosition++;
				} else {
					PMIXRecordsArray[product.@id].UnitsServed += Number(uServed);
					PMIXRecordsArray[product.@id].UnitsMgrEmp += Number(uServedCrew);
					PMIXRecordsArray[product.@id].UnitsPromo += Number(uPromo);
					PMIXRecordsArray[product.@id].UnitsWasted += Number(uWasted);
					PMIXRecordsArray[product.@id].UnitsDiscounted += Number(uDiscounted);
				}

				//WS_addLine(resp);

				//iMenuItemPosition ++;
			}
		}
	}
	iMenuItemPosition = 1;
	for (var Index in PMIXRecordsArray) {
		resp=<param/>;
		resp.MenuItemPosition = iMenuItemPosition;
		resp.MenuItemCode = Number(PMIXRecordsArray[Index].MenuItemCode);
		resp.ItemPrice = PMIXRecordsArray[Index].ItemPrice;
		resp.UnitsServed = PMIXRecordsArray[Index].UnitsServed;
		resp.UnitsMgrEmp = PMIXRecordsArray[Index].UnitsMgrEmp;
		resp.UnitsPromo = PMIXRecordsArray[Index].UnitsPromo;
		resp.UnitsWasted = PMIXRecordsArray[Index].UnitsWasted;
		resp.UnitsDiscounted = PMIXRecordsArray[Index].UnitsDiscounted;
		resp.KeyPosition="000";
		resp.KeyShiftCode="U";
		WS_addLine(resp);
		iMenuItemPosition ++;
			}
	return;

	function PMIXItem(ItemPosition, ItemCode, ItemPrice, Served, CrewServed, UnitsPromo, UnitsWasted, UnitsDiscounted) {
		this.MenuItemPosition = ItemPosition;
		this.MenuItemCode = ItemCode;
		this.ItemPrice = ItemPrice;
		this.UnitsServed = Served;
		this.UnitsMgrEmp = CrewServed;
		this.UnitsPromo = UnitsPromo
		this.UnitsWasted = UnitsWasted;
		this.UnitsDiscounted = UnitsDiscounted;
	}
}

/**
 * Generates accumulated cashout XML by POS from a node ID.
 * @param rootCash - The point to start generation on CASH xml.
 * @param rootPmix - idem Pmix xml
 * @param posId - POS number
 * @param loginTime - login time 
 * @param rootProductTable - ProductTable extracted from rootPmix used by cashout to obtain GiftCard codes 
 * if any given required data is not present.
 */
function generateAccumCashout(rootCash, rootPmix, posId, loginTime) {

	//API.dbg("==========> ROOT CASH =\n"+rootCash+"\n\n");
	//API.dbg("==========> ROOT PMIX =\n"+rootPmix+"\n\n");

	var previousItem=null;
	var OpeningForeverReading=0;
	var CurrentForeverReading=0;
	var cashoutTimeStamp;
	var resp=<param/>;

	var nodeCashPOS=rootCash.POS.(Number(@id)==Number(posId));
	var nodePmixPOS=rootPmix.POS.(Number(@id)==Number(posId));

//API.dbg("========= posId ["+posId+"]" );
//API.dbg("========= loginTime ["+loginTime+"]" );
//API.dbg("========= nodecashpos ["+nodeCashPOS+"]" );

	if(null!=nodeCashPOS) {
		OpeningForeverReading=Number(nodeCashPOS[0].@initialGT);
		//API.dbg("OpeningForeverReading="+OpeningForeverReading+"\n");
		for each (var opSession in nodeCashPOS.OperatorSession) {
			//API.dbg("POS id="+opSession.@id+" initialGT="+opSession.@initialGT+"\" finalGT="+opSession.@finalGT+"\n");

			//API.dbg("========= GT loginTime ["+loginTime+"]["+opSession.@login+"]\n");
			if(opSession.@login==loginTime) {
				CurrentForeverReading=Number(opSession.@finalGT);
				break;
			}
		}
	}

	var OverringQuantity=0;
	var OverringAmount=0;

	// hard code definition
	var GIFT_CERT_1$	= "936";
	var GIFT_CERT_5$	= "937";

	var GIFT_CARD_5$	= "8492";
	var GIFT_CARD_10$	= "8493";
	var GIFT_CARD_25$	= "8494";
	var GIFT_CARD_50$	= "8495";

	// Gift Coupoms
	var GCSoldAQuantity=0;
	var GCSoldAQuantityRefund=0;
	var GCSoldAAmount=0;
	var GCSoldAAmountRefund=0;
	var GCSoldBQuantity=0;
	var GCSoldBQuantityRefund=0;
	var GCSoldBAmount=0;
	var GCSoldBAmountRefund=0;
	var PMixProductCardQtyRef=0;
	var PMixProductCardQty=0;
	var PMixProductCardAmtRef=0;
	var PMixProductCardAmt=0;
	var gcEatInAmt=0;
	var gcTakeOutAmt=0;
	var qtdTCDiscard=0;
	var totalTc= 0;
	var refundTC=0;
	var refundAmount=0;
	var cashlessRefundTC=0;
	var cashlessRefundAmount=0;
	var OtherReceiptsQuantity=0;
	var OtherReceiptsAmount=0;
	var EatInTaxAmount=0;
	var TakeOutTaxAmount=0;
	var OtherTaxAmount=0;
	var NoTaxSalesQuantity=0;
	var NoTaxSalesAmount=0;
	var eiDiscard=0;
	var eiAmountDiscard=0;
	var eiTaxDiscard=0;
	var taxEatIn=0;
	var toDiscard=0;
	var toAmountDiscard=0;
	var toTaxDiscard=0;
	var taxTakeOut=0;
	var nodeCashStatistics=0;
	var nodeOperationKindRefund=0;
	var nodeCashTotalsRefund=0;
	var nodeCashRefund=0;
	var refundsAmount=0;
	var netSalesAmount=0;
	var netSalesQuantity=0;

	var nodeCashStatistics=null;
	var nodeSaleTypeEatIn=null;
	var nodeSaleTypeTakeOut=null;
	var nodeSaleTypeOther=null;

	var nodeEatInCashTotals=null;
	var nodeTakeOutCashTotals=null;
	var nodeOtherCashTotals=null;

	var eiqtdTCDiscard=null;
	var eiDiscard=null;
	var EatInNetSalesQuantity=0;
	var eiMcCard=0;
	var eiAmountDiscard=0;
	var eiTaxDiscard=0;
	var EatInNetSalesAmount=0;
	var eiTax=0;

	var toqtdTCDiscard=null;
	var toDiscard=null;
	var TakeOutNetSalesQuantity=0;
	var toMcCard=0;
	var toAmountDiscard=0;
	var toTaxDiscard=0;
	var TakeOutNetSalesAmount=0;
	var toTax=0;

	var otherqtdTCDiscard=null;
	var otherDiscard=null;
	var OtherNetSalesQuantity=0;
	var otherAmountDiscard=0;
	var OtherNetSalesAmount=0;
	var otherTax=0;

	var nonProductSalesAmount=0;

	var PromoSalesQuantity=0;
	var PromoSalesAmount=0;
	var EmployeeMealQuantity=0;
	var EmployeeMealAmount=0;
	var ManagerMealQuantity=0;
	var ManagerMealAmount=0;
	var DiscountSalesQuantity=0;
	var DiscountSalesAmount=0;

	var CouponAQuantity=0;
	var CouponAAmount=0;
	var CouponBQuantity=0;
	var CouponBAmount=0;
	var CouponCQuantity=0;
	var CouponCAmount=0;
	var CouponDQuantity=0;
	var CouponDAmount=0;
	var CouponEQuantity=0;
	var CouponEAmount=0;
	var CreditSalesQuantity=0; // Billable sales
	var CreditSalesAmount=0;		
	var GCARedeemedQuantity=0;
	var GCARedeemedAmount=0;
	var GCBRedeemedQuantity=0;
	var GCBRedeemedAmount=0;
	var GiftCardRedeemedQuantity=0;
	var GiftCardRedeemedAmount=0;

	var TotalSkimAmount=0.00;

	var TRedsBeforeTotalQuantity=0;
	var TRedsBeforeTotalAmount=0;
	var TRedsAfterTotalQuantity=0;
	var TRedsAfterTotalAmount=0;

	var nodeReduction=null;

	var cashlessQtty=0;
	var cashlessAmount=0;

	var shortName="";
	var dtName="";
	var longName="";
	var productId=0;
	var productQtty=0;
	var productAmount=0;

	// Net Sales Quantity and amount
	var PMixOperatorSession = null;
	var PMixProductCertRef	= null;
	var PMixProductCert	= null;
	var PMixProductCardRef	= null;
	var PMixProductCard	= null;

	var mcCertSalesRefundAmount=0;
	var mcCertSalesAmount=0;
	var mcCardSalesRefundAmount=0; 
	var mcCardSalesAmount=0; 

	// Get cashless id
	var cashlessId=-1;
	var cashlessName;
	for each (var item1 in rootCash.TenderTable.TenderType) {
		cashlessName=item1.@name;
		if((cashlessName=="Cashless") || (cashlessName=="cashless") || (cashlessName=="CASHLESS")) {
			cashlessId=item1.@id;
//API.dbg("========= ["+ cashlessId+"]");
			break;
		}
	}

    if(null!=nodePmixPOS) {
    	for each (var opSession in nodePmixPOS.OperatorSession) {
			//API.dbg("========= PMIX GCert loginTime ["+loginTime+"]["+opSession.@login+"]\n");
			if(opSession.@login<=loginTime) {
	    		// PMIX xml OperatorSession only brings gift cards and certificates sold
				for each (var product in opSession.Product) {
					for each (var operation in product.OperationType) {
//API.dbg("========= operation.@operationType [" + operation.@operationType +"]");
						if(operation.@operationType=="SALE") {
//API.dbg("========= product.@id [" + product.@id +"]");
							if(product.@id==GIFT_CERT_1$) {
								GCSoldAQuantity+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
								GCSoldAAmount+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
//API.dbg("========= GCSoldA [" + GCSoldAQuantity + "][" + GCSoldAAmount +"]");
							}
							else if(product.@id==GIFT_CERT_5$) {
								GCSoldBQuantity+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
								GCSoldBAmount+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
//API.dbg("========= GCSoldB [" + GCSoldBQuantity + "][" + GCSoldBAmount +"]");
							}
							else {
								PMixProductCardQty+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
								PMixProductCardAmt+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
//API.dbg("========= PMixProductCard [" + PMixProductCardQty + "][" + PMixProductCardAmt +"]");
							}
							gcEatInAmt+=Number(operation.PMix.@netAmtEatIn);
							gcTakeOutAmt+=Number(operation.PMix.@netAmtTakeOut);
						}
						else if(operation.@operationType=="REFUND") {
							if(product.@id==GIFT_CERT_1$) {
								GCSoldAQuantityRefund+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
								GCSoldAAmountRefund+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
							}
							else if(product.@id==GIFT_CERT_5$) {
								GCSoldBQuantityRefund+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
								GCSoldBAmountRefund+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);
							}
							else {
								PMixProductCardQtyRef+=Number(operation.PMix.@qtyEatIn)+Number(operation.PMix.@qtyTakeOut);
								PMixProductCardAmtRef+=Number(operation.PMix.@netAmtEatIn)+Number(operation.PMix.@netAmtTakeOut);							
							}
							gcEatInAmt-=Number(operation.PMix.@netAmtEatIn);
							gcTakeOutAmt-=Number(operation.PMix.@netAmtTakeOut);
						}
					}
				}
			}
		}
/*
		for each (var opSession in nodePmixPOS.OperatorSession) {
			for each (var fGroup in opSession.FamilyGroup) {

				PMixOperatorSession = fGroup.(@groupName=="GIFT_COUPON");

				API.dbg("========= PMixOperatorSession["+PMixOperatorSession+"]");
				PMixProductCertRef	= PMixOperatorSession.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
				PMixProductCert	= PMixOperatorSession.Product.(@id==GIFT_CERT_1$ || @id==GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;
				PMixProductCardRef	= PMixOperatorSession.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="REFUND").PMix;
				PMixProductCard	= PMixOperatorSession.Product.(@id!=GIFT_CERT_1$ && @id!=GIFT_CERT_5$).OperationType.(@operationType=="SALE").PMix;

				mcCertSalesRefundAmount	+= WS_getPMixTotalnetAmount(PMixProductCertRef);
				mcCertSalesAmount		+= WS_getPMixTotalnetAmount(PMixProductCert);
				mcCardSalesRefundAmount	+= WS_getPMixTotalnetAmount(PMixProductCardRef); 
				mcCardSalesAmount		+= WS_getPMixTotalnetAmount(PMixProductCard); 
			}
		}
*/

		// Gift Card sold
		for each (var pInfo in rootPmix.ProductTable.ProductInfo) {
			shortName=String(pInfo.@name).substring(0,6);
			dtName=String(pInfo.@name).substring(0,11);
			longName=String(pInfo.@name).substring(0,10);
			// Gift card sold and reloaded
			if(("GCARD " == shortName)||("GCRE $" == shortName)||("GIFT CARD $" == dtName)||("G CARD RE $" == dtName)||("GIFT CARD " == longName)) {
				productId=pInfo.@id;

				for each (var opSession in nodePmixPOS.OperatorSession) {
					//API.dbg("========= PMIX GCard loginTime ["+loginTime+"]["+opSession.@login+"]\n");
					if(opSession.@login<=loginTime) {
			    		// PMIX xml OperatorSession only brings gift cards and certificates sold
						for each (var prod in opSession.Product) {
							if(productId==prod.@id) {
								for each (var opType in prod.OperationType) {
									if(opType.@operationType=="SALE") {
										productQtty+=Number(opType.PMix.@qtyEatIn);
										productQtty+=Number(opType.PMix.@qtyTakeOut);
										productAmount+=Number(opType.PMix.@netAmtEatIn);
										productAmount+=Number(opType.PMix.@taxEatIn);
										productAmount+=Number(opType.PMix.@netAmtTakeOut);
										productAmount+=Number(opType.PMix.@taxTakeOut);
									}
									else {
										if(opType.@operationType=="REFUND") {
											productQtty-=Number(opType.PMix.@qtyEatIn);
											productQtty-=Number(opType.PMix.@qtyTakeOut);
											productAmount-=Number(opType.PMix.@netAmtEatIn);
											productAmount-=Number(opType.PMix.@taxEatIn);
											productAmount-=Number(opType.PMix.@netAmtTakeOut);
											productAmount-=Number(opType.PMix.@taxTakeOut);
										}
									}
								}
							}
						}
					}
				}
			}
		}

		GCSoldAQuantity-=GCSoldAQuantityRefund;
		GCSoldAAmount-=GCSoldAAmountRefund;
		GCSoldBQuantity-=GCSoldBQuantityRefund;
		GCSoldBAmount-=GCSoldBAmountRefund;
    }

	if(null!=nodeCashPOS) {
		for each (var opSession in nodeCashPOS.OperatorSession) {
			//API.dbg("========= CASH loginTime ["+loginTime+"]["+opSession.@login+"]\n");
			if(opSession.@login<=loginTime) {
				OverringQuantity+=Number(opSession.CashDetails.Void.@overringTC);
				//OverringQuantity+=Number(opSession.CashDetails.Void.@inProgressTC);
				OverringAmount+=Number(opSession.CashDetails.Void.@overringAmount);
				//OverringAmount+=Number(opSession.CashDetails.Void.@inProgressAmount);

				qtdTCDiscard= opSession.CashStatistics.SaleType.OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00" && @couponAmount=="0.00");
				totalTc 	+= WS_summNodesAttributeValues(opSession.CashTotals.Cash,"tc") - WS_summNodesAttributeValues(qtdTCDiscard,"tc");	
				// Compute the partial tendered order cancelation as a finished order (SDE-521)
				totalTc+=Number(opSession.CashDetails.Void.@inProgressTC);

				for each (var item in opSession.CashStatistics.SaleType) {
					for each (var item1 in item.OperationKind) {
						// Calculates cash refund
						if(item1.@id=="REFUND") {
							refundTC+=Number(item1.CashTotals.Cash.@tc);
							refundAmount+=Number(item1.CashTotals.Cash.@netAmount);
							refundAmount+=Number(item1.CashTotals.Cash.@taxAmount);
							//break;
						}
						// Calculates cashless refund
						if(item1.@id=="CASHLESS_REFUND") {
							cashlessRefundTC+=Number(item1.CashTotals.Cash.@tc);
							cashlessRefundAmount+=Number(item1.CashTotals.Cash.@netAmount);
							cashlessRefundAmount+=Number(item1.CashTotals.Cash.@taxAmount);
							//break;
						}

						// Promo, Manager, Employee and Discount sales
						if(item1.@id=="PROMO") {
							PromoSalesQuantity+=Number(item1.CashTotals.Cash.@tc);
							PromoSalesAmount+=Number(item1.CashTotals.Cash.@netAmount);
						}
						if(item1.@id=="CREW") {
							EmployeeMealQuantity+=Number(item1.CashTotals.Cash.@tc);
							EmployeeMealAmount+=(Number(item1.CashTotals.Cash.@netBeforeDiscount)-Number(item1.CashTotals.Cash.@netAmount)-Number(item1.CashTotals.Cash.@couponAmount));
						}
						if(item1.@id=="MANAGER") {
							ManagerMealQuantity+=Number(item1.CashTotals.Cash.@tc);
							ManagerMealAmount+=(Number(item1.CashTotals.Cash.@netBeforeDiscount)-Number(item1.CashTotals.Cash.@netAmount)-Number(item1.CashTotals.Cash.@couponAmount));
						}
						if(item1.@id=="DISCOUNT") {
							DiscountSalesQuantity+=Number(item1.CashTotals.Cash.@tc);
							DiscountSalesAmount+=(Number(item1.CashTotals.Cash.@netBeforeDiscount)-Number(item1.CashTotals.Cash.@netAmount)-Number(item1.CashTotals.Cash.@couponAmount));
						}

						//Calculates taxes per sale type
						if(item1.@subType=="TAX") {
							if(item.@name=="EAT_IN") {
								EatInTaxAmount+=Number(item1.CashTotals.Cash.@taxAmount);					
							}
							else if(item.@name=="TAKE_OUT") {
								TakeOutTaxAmount+=Number(item1.CashTotals.Cash.@taxAmount);					
							}
							else {
								OtherTaxAmount+=Number(item1.CashTotals.Cash.@taxAmount);					
							}
						}
						if((item1.@subType=="TAX_EXEMPT") || (item1.@subType=="NO_TAX") ){
							NoTaxSalesQuantity+=Number(item1.CashTotals.Cash.@tc);
							NoTaxSalesAmount+=Number(item1.CashTotals.Cash.@netAmount);
						}
					}
				}
				// Compute cashouts made
				if(opSession.CashDetails.CashOut!=null) {
					refundTC+=Number(opSession.CashDetails.CashOut.@tc);
					refundAmount+=Number(opSession.CashDetails.CashOut.@amount);
				}

				// Compute the partial tendered order cancelation as a refund of its integral value (SDE-521)
				refundTC+=Number(opSession.CashDetails.Void.@inProgressTC);
				refundAmount+=Number(opSession.CashDetails.Void.@inProgressAmount);

				// Calculates other receipts			
				for each (var item in opSession.CashDetails.TransfersIn) {
					if(item.@type=="OTHER_RECEIPTS") {
						OtherReceiptsQuantity+=Number(item.@count);
						OtherReceiptsAmount+=Number(item.@amount);
						break;
					}
				}

				nodeCashStatistics		= opSession.CashStatistics;
				nodeOperationKindRefund	= nodeCashStatistics.SaleType.OperationKind.(@id == "REFUND");
				nodeCashTotalsRefund	= nodeOperationKindRefund.CashTotals;
				nodeCashRefund			= nodeCashTotalsRefund.Cash;
				refundsAmount			+= WS_summNodesAttributeValues(nodeCashRefund,"netAmount");
				netSalesAmount			+= WS_summNodesAttributeValues(opSession.CashTotals.Cash, "netAmount");
				netSalesQuantity		+= opSession.CashTotals.Cash.@tc

				// Eat in values
				nodeCashStatistics		= opSession.CashStatistics;
				nodeSaleTypeEatIn		= nodeCashStatistics.SaleType.(@name == "EAT_IN");
				nodeSaleTypeTakeOut		= nodeCashStatistics.SaleType.(@name == "TAKE_OUT");
				nodeSaleTypeOther		= nodeCashStatistics.SaleType.(@name == "OTHER");

				nodeEatInCashTotals		= nodeSaleTypeEatIn.CashTotals;
				nodeTakeOutCashTotals	= nodeSaleTypeTakeOut.CashTotals;
				nodeOtherCashTotals		= nodeSaleTypeOther.CashTotals;

				eiqtdTCDiscard 			= nodeCashStatistics.SaleType.(@name=="EAT_IN").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00" && @couponAmount=="0.00");//.@tc
				eiDiscard 				= nodeCashStatistics.SaleType.(@name=="EAT_IN").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc

				EatInNetSalesQuantity	+= WS_summNodesAttributeValues(nodeEatInCashTotals.Cash, "tc") - (WS_summNodesAttributeValues(eiqtdTCDiscard,"tc")<=0 ? 0 : WS_summNodesAttributeValues(eiqtdTCDiscard,"tc"));
				eiMcCard				+= WS_getmcCertSalesAmount(PMixOperatorSession, null, "qtyEatIn");
				eiAmountDiscard			+= WS_summNodesAttributeValues(eiDiscard,"netAmount");
				eiTaxDiscard			+= WS_summNodesAttributeValues(eiDiscard,"taxAmount");
				EatInNetSalesAmount		+= WS_summNodesAttributeValues(nodeEatInCashTotals.Cash,"netAmount");
				eiTax					+= WS_summNodesAttributeValues(nodeEatInCashTotals.Cash,"taxAmount");

				// Take out values
				toqtdTCDiscard 			= nodeCashStatistics.SaleType.(@name=="TAKE_OUT").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00" && @couponAmount=="0.00");//.@tc
				toDiscard 				= nodeCashStatistics.SaleType.(@name=="TAKE_OUT").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc

				TakeOutNetSalesQuantity	+= WS_summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "tc") - (WS_summNodesAttributeValues(toqtdTCDiscard,"tc")<=0 ? 0 : WS_summNodesAttributeValues(toqtdTCDiscard,"tc"));
				toMcCard				+= WS_getmcCertSalesAmount(PMixOperatorSession, null, "qtyTakeOut");
				toAmountDiscard			+= WS_summNodesAttributeValues(toDiscard,"netAmount");
				toTaxDiscard			+= WS_summNodesAttributeValues(toDiscard,"taxAmount");
				TakeOutNetSalesAmount	+= WS_summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "netAmount");
				toTax					+= WS_summNodesAttributeValues(nodeTakeOutCashTotals.Cash, "taxAmount");

				// Other values
				otherqtdTCDiscard 		= nodeCashStatistics.SaleType.(@name=="OTHER").OperationKind.(@id=="MANAGER" || @id=="CREW" ).CashTotals.Cash.(@netAmount=="0.00" && @couponAmount=="0.00");//.@tc
				otherDiscard 			= nodeCashStatistics.SaleType.(@name=="OTHER").OperationKind.(@id=="REFUND").CashTotals.Cash;//.@tc								  

				OtherNetSalesQuantity	+= WS_summNodesAttributeValues(nodeOtherCashTotals.Cash, "tc") - (WS_summNodesAttributeValues(otherqtdTCDiscard,"tc")<=0 ? 0 : WS_summNodesAttributeValues(otherqtdTCDiscard,"tc"));
				otherAmountDiscard		+= WS_summNodesAttributeValues(otherDiscard,"netAmount");
				OtherNetSalesAmount		+= (WS_summNodesAttributeValues(nodeOtherCashTotals.Cash, "netAmount")
											   - WS_summNodesAttributeValues(PMixProductCard,"netAmtOther")
											   - WS_summNodesAttributeValues(PMixProductCert,"netAmtOther")
											   + WS_summNodesAttributeValues(PMixProductCertRef,"netAmtOther"));
				otherTax				+= WS_summNodesAttributeValues(nodeOtherCashTotals.Cash, "taxAmount");

				// Coupons
				// 	<TenderType id="1" name="Coupon A" /> 
				//	<TenderType id="2" name="Coupon B" /> 
				//	<TenderType id="3" name="Coupon C" /> 
				//	<TenderType id="4" name="Coupon D" /> 
				//	<TenderType id="5" name="Coupon E" /> 
				//	<TenderType id="6" name="Billable Sales" /> Credit Sales
				for each (var item in opSession.CashDetails.Tenders.Tender) {
					switch(Number(item.@id)) {
						case 1:
							CouponAQuantity+=Number(item.@qty);
							CouponAAmount+=Number(item.@drawerAmount);
							break;
						case 2:
							CouponBQuantity+=Number(item.@qty);
							CouponBAmount+=Number(item.@drawerAmount);
							break;
						case 3:
							CouponCQuantity+=Number(item.@qty);
							CouponCAmount+=Number(item.@drawerAmount);
							break;
						case 4:
							CouponDQuantity+=Number(item.@qty);
							CouponDAmount+=Number(item.@drawerAmount);
							break;
						case 5:
							CouponEQuantity+=Number(item.@qty);
							CouponEAmount+=Number(item.@drawerAmount);
							break;
						case 6:
							CreditSalesQuantity+=Number(item.@qty);
							CreditSalesAmount+=Number(item.@drawerAmount);
							break;
						case 7:
							GCARedeemedQuantity+=Number(item.@qty);
							GCARedeemedAmount+=Number(item.@drawerAmount);
							break;
						case 8:
							GCBRedeemedQuantity+=Number(item.@qty);
							GCBRedeemedAmount+=Number(item.@drawerAmount);
							break;
						case 11:
							GiftCardRedeemedQuantity+=Number(item.@qty);
							GiftCardRedeemedAmount+=Number(item.@drawerAmount);
							break;
					}
				}

				for each (var item in opSession.CashDetails.Tenders.Tender) {
//API.dbg("========= CashDetails.Tenders.Tender.@id [" + item.@id +"]");
//API.dbg("========= cashlessId [" + cashlessId +"]");
					// Cashless data
					if(Number(cashlessId)==Number(item.@id)) {
						cashlessQtty+=Number(item.@qty);
						cashlessAmount+=Number(item.@drawerAmount);
//API.dbg("========= cashless [" + cashlessQtty + "][" + cashlessAmount +"]");
						break;
					}
				}

				// Skim
				for each (var item in opSession.CashDetails.TransfersOut) {
					if(item.@type=="SKIM") {
						TotalSkimAmount+=Number(item.@amount);
					}
				}

				// Reduction
				nodeReduction			= opSession.CashDetails.Reduction;
				TRedsBeforeTotalQuantity+=Number(nodeReduction.@itemsBeforeTotal);
				TRedsBeforeTotalAmount+=Number(nodeReduction.@amountBeforeTotal);
				TRedsAfterTotalQuantity+=Number(nodeReduction.@redsAfterTotal);
				TRedsAfterTotalAmount+=Number(nodeReduction.@redsAmtAfterTotal);
				//TRedsAfterTotalQuantity+=Number(nodeReduction.@tc);
				//TRedsAfterTotalAmount+=Number(nodeReduction.@amountAfterTotal);

				nonProductSalesAmount+=Number(opSession.CashTotals.NonProductSales.Cash.@netAmount);

				if(opSession.@login==loginTime) {
					cashoutTimeStamp=opSession.@logout;
				}
			}
		}
		taxEatIn		= EatInTaxAmount - eiTaxDiscard;
		taxTakeOut		= TakeOutTaxAmount - toTaxDiscard;

		netSalesAmount	+= (- GCSoldAAmount-GCSoldBAmount - (PMixProductCardAmt-PMixProductCardAmtRef));
		netSalesAmount	-= refundsAmount;

		EatInNetSalesAmount	-= (eiAmountDiscard + gcEatInAmt);
		eiTax				-= eiTaxDiscard;
		TakeOutNetSalesAmount	-= (toAmountDiscard + gcTakeOutAmt);
		toTax					-= toTaxDiscard;
		OtherNetSalesAmount		-= otherAmountDiscard;
	}

	resp.RegisterID=""+posId;	// without "" does not work. It writes posId instead of RegisterID sd tag
	resp.CashoutTimeStamp=""+cashoutTimeStamp;
	resp.DrawerChangeType=DrawerChangeType;

	resp.GCSoldAQuantity=GCSoldAQuantity;
	resp.GCSoldAAmount=Currency(GCSoldAAmount);
	resp.GCSoldBQuantity=GCSoldBQuantity;
	resp.GCSoldBAmount=Currency(GCSoldBAmount);

	resp.OpeningForeverReading=Currency(OpeningForeverReading);
	resp.CurrentForeverReading=Currency(CurrentForeverReading);

	resp.TransactionCount=totalTc;

	resp.OverringQuantity=OverringQuantity;
	resp.OverringAmount=Currency(OverringAmount);

	resp.RefundQuantity=refundTC-cashlessRefundTC;
	resp.RefundAmount=Currency(refundAmount-cashlessRefundAmount);

	resp.OtherReceiptsQuantity=OtherReceiptsQuantity;
	resp.OtherReceiptsAmount=Currency(OtherReceiptsAmount);

	resp.EatInTaxAmount=Currency(taxEatIn);
	resp.TakeOutTaxAmount=Currency(TakeOutTaxAmount);
	resp.TakeOutTaxAmount=Currency(taxTakeOut);
	resp.OtherTaxAmount=Currency(OtherTaxAmount);
	resp.NoTaxSalesQuantity=NoTaxSalesQuantity;
	resp.NoTaxSalesAmount=Currency(NoTaxSalesAmount);

	resp.NetSalesAmount=Currency(netSalesAmount);

	resp.EatInNetSalesQuantity=EatInNetSalesQuantity;
	resp.EatInNetSalesAmount=Currency(EatInNetSalesAmount);
	resp.TakeOutNetSalesQuantity=TakeOutNetSalesQuantity;
	resp.TakeOutNetSalesAmount=Currency(TakeOutNetSalesAmount);
	resp.OtherNetSalesQuantity=OtherNetSalesQuantity;
	resp.OtherNetSalesAmount=Currency(OtherNetSalesAmount);

	// NonProduct Sales Amount
	resp.NonProductSalesAmount=Currency(nonProductSalesAmount);

	resp.PromoSalesQuantity=PromoSalesQuantity;
	resp.PromoSalesAmount=Currency(PromoSalesAmount);
	resp.EmployeeMealQuantity=EmployeeMealQuantity;
	resp.EmployeeMealAmount=Currency(EmployeeMealAmount);
	resp.ManagerMealQuantity=ManagerMealQuantity;
	resp.ManagerMealAmount=Currency(ManagerMealAmount);
	resp.DiscountSalesQuantity=DiscountSalesQuantity;
	resp.DiscountSalesAmount=Currency(DiscountSalesAmount);

	resp.CouponAQuantity=CouponAQuantity;
	resp.CouponAAmount=Currency(CouponAAmount);
	resp.CouponBQuantity=CouponBQuantity;
	resp.CouponBAmount=Currency(CouponBAmount);
	resp.CouponCQuantity=CouponCQuantity;
	resp.CouponCAmount=Currency(CouponCAmount);
	resp.CouponDQuantity=CouponDQuantity;
	resp.CouponDAmount=Currency(CouponDAmount);
	resp.CouponEQuantity=CouponEQuantity;
	resp.CouponEAmount=Currency(CouponEAmount);
	resp.CreditSalesQuantity=CreditSalesQuantity; // Billable sales
	resp.CreditSalesAmount=Currency(CreditSalesAmount);
    resp.GCARedeemedQuantity=GCARedeemedQuantity;
    resp.GCARedeemedAmount=Currency(GCARedeemedAmount);
    resp.GCBRedeemedQuantity=GCBRedeemedQuantity;
    resp.GCBRedeemedAmount=Currency(GCBRedeemedAmount);
	resp.GiftCardRedeemedQuantity=GiftCardRedeemedQuantity;
	resp.GiftCardRedeemedAmount=Currency(GiftCardRedeemedAmount);

	resp.TRedsBeforeTotalQuantity=TRedsBeforeTotalQuantity;
	resp.TRedsBeforeTotalAmount=Currency(TRedsBeforeTotalAmount);
	resp.TRedsAfterTotalQuantity=TRedsAfterTotalQuantity;
	resp.TRedsAfterTotalAmount=Currency(TRedsAfterTotalAmount);

	// Do not know what it is				
	resp.OtherPaymentAQuantity="0";
	resp.OtherPaymentAAmount=Currency("0");
	resp.OtherPaymentBQuantity="0";
	resp.OtherPaymentBAmount=Currency("0");

	// Let as zero
	resp.SuggestedNetSalesQuantity="0";
	resp.SuggestedSuccessfulNetSalesQuantity="0";
	resp.SuggestedNetSalesAmount=Currency("0");
	resp.ForeignCurrencyAComputed="0";
	resp.ForeignCurrencyBComputed="0";
	resp.ForeignCurrencyCComputed="0";
	resp.ForeignCurrencyDComputed="0";
	resp.ForeignCurrencyEComputed="0";
	resp.OfflineSalesAmountClose=Currency("0");
	resp.OfflineSalesAmountMonthEnd=Currency("0");


	resp.CashlessGrossQuantity=cashlessQtty;
	resp.CashlessGrossAmount=Currency(cashlessAmount+cashlessRefundAmount);

	// cashless refund
	resp.CashlessRefundQuantity=cashlessRefundTC;
	resp.CashlessRefundAmount=Currency(cashlessRefundAmount);

	// force zero value
	resp.CashlessCashBackQuantity="0";
	// force zero value
	resp.CashlessCashBackAmount=Currency("0");
	// force zero value
	resp.CashlessCashBackFeeQuantity="0";
	// force zero value
	resp.CashlessCashBackFeeAmount=Currency("0");

	resp.GiftCardSoldQuantity=productQtty;
	resp.GiftCardSoldAmount=Currency(productAmount);

	WS_addLine(resp);

	return;
}

/**
 * Generates a R2D2 Detailed order log report.
 * @param config - 
 * @param rootSOS - SOS xml report
 * @param rootDetailSOS - SOS detailed xml report
 * if any given required data is not present.
 */
function generateR2D2_DetailedOrderLog(config, rootSOS, rootDetailSOS) {
	var resp=<DetailedOrder/>;
	var dayPartitioning=rootSOS.DayPartitioning;
	var appliedTenders=<AppliedTenders/>;
	var frontCounterTimings=<FrontCounterTimings/>;
	var menuItemsSoldPromoed=<MenuItemsSoldPromoed/>;

	var keyStationNumber;
	var keyStationTransactionNumber;
	var endTime;
	var serviceTime;
	var sequencialNumber=1;
	var transactonNetAmount;
	var taxAmount;
	var nonProductAmount;
	var discountAmount;
	var giftCertRedeemedAmount;
	var giftCardsRedeemedAmount;
	var giftCardsRedeemedQuantity;
	var giftCertificatesSoldAmount;
	var giftCardsSoldAmount;
	var giftCardsSoldQuantity;
	var creditDebitAmount;
	var terminalPaymentType;
	var driveThruFlag;
	var carryoutFlag;
	var refundFlag;
	var employeeDiscountFlag;
	var managerDiscountFlag;
	var otherDiscountFlag;
	var overringFlag;
	var otherReceiptFlag;
	var kioskFlag;
	var numberOfItems;
	var tenderIndex;
	var totalAmount;
	var kVSPrepLine;
	var storedHeldFlag;
	var totalServiceTime;
	var orderTakingTime;
	var assemblyTime;
	var cashieringTime;
	var storageTime;
	var globalStoreTime;
	var menuItemNumber;
	var quantityServed;
	var quantityPromoed;

	for each (var segment in dayPartitioning.Segment) {
		keyStationNumber=0;
		keyStationTransactionNumber=0;
		endTime=segment.@endTime;
		serviceTime=rootSOS.StoreTotals.ServiceTime.(@segmentId==segment.@id);
		transactonNetAmount=0;
		taxAmount=0;
		nonProductAmount=0;
		discountAmount=0;
		giftCertRedeemedAmount=0;
		giftCardsRedeemedAmount=0;
		giftCardsRedeemedQuantity=0;
		giftCertificatesSoldAmount=0;
		giftCardsSoldAmount=0;
		giftCardsSoldQuantity=0;
		creditDebitAmount=0;
		terminalPaymentType=0;
		driveThruFlag=0;
		carryoutFlag=0;
		refundFlag=0;
		employeeDiscountFlag=0;
		managerDiscountFlag=0;
		otherDiscountFlag=0;
		overringFlag=0;
		otherReceiptFlag=0;
		kioskFlag=0;
		numberOfItems=0;
		tenderIndex=0;
		totalAmount=0;
		kVSPrepLine=0;
		storedHeldFlag=0;
		totalServiceTime=0;
		orderTakingTime=0;
		assemblyTime=0;
		cashieringTime=0;
		storageTime=0;
		globalStoreTime=0;
		menuItemNumber=0;
		quantityServed=0;
		quantityPromoed=0;

		resp.KeyStationNumber=Number(keyStationNumber);
		resp.KeyStationTransactionNumber=Number(keyStationTransactionNumber);
		resp.TransactionEndTime=endTime.substr(0,2)+":"+endTime.substr(2,2);
		resp.TransactionSerialNumber=Number(sequencialNumber);
		resp.TransactonNetAmount=Currency(transactonNetAmount);
		resp.TaxAmount=Currency(taxAmount);
		resp.NonProductAmount=Currency(nonProductAmount);
		resp.DiscountAmount=Currency(discountAmount);
		resp.GiftCertRedeemedAmount=Currency(giftCertRedeemedAmount);
		resp.GiftCardsRedeemedAmount=Currency(giftCardsRedeemedAmount);
		resp.GiftCardsRedeemedQuantity=Number(giftCardsRedeemedQuantity);
		resp.GiftCertificatesSoldAmount=Currency(giftCertificatesSoldAmount);
		resp.GiftCardsSoldAmount=Currency(giftCardsSoldAmount);
		resp.GiftCardsSoldQuantity=Number(giftCardsSoldQuantity);
		resp.CreditDebitAmount=Currency(creditDebitAmount);
		resp.TerminalPaymentType=Number(terminalPaymentType);
		resp.DriveThruFlag=Number(driveThruFlag);
		resp.CarryoutFlag=Number(carryoutFlag);
		resp.RefundFlag=Number(refundFlag);
		resp.EmployeeDiscountFlag=Number(employeeDiscountFlag);
		resp.ManagerDiscountFlag=Number(managerDiscountFlag);
		resp.OtherDiscountFlag=Number(otherDiscountFlag);
		resp.OverringFlag=Number(overringFlag);
		resp.OtherReceiptFlag=Number(otherReceiptFlag);
		resp.KioskFlag=Number(kioskFlag);
		resp.NumberOfItems=Number(numberOfItems);

		appliedTenders.TenderIndex=Number(tenderIndex);
		appliedTenders.TotalAmount=Currency(totalAmount);
		resp.AppliedTenders=appliedTenders;

		resp.KVSPrepLine=Number(kVSPrepLine);
		resp.StoredHeldFlag=Number(storedHeldFlag);
		resp.TotalServiceTime=Number(totalServiceTime);
		resp.OrderTakingTime=Number(orderTakingTime);

		frontCounterTimings.AssemblyTime=API.formatNumber(Number(assemblyTime), "#####0", 6);
		frontCounterTimings.CashieringTime=API.formatNumber(Number(cashieringTime), "#####0", 6);
		frontCounterTimings.StorageTime=API.formatNumber(Number(storageTime), "#####0", 6);
		frontCounterTimings.GlobalStoreTime=API.formatNumber(Number(globalStoreTime), "#####0", 6);
		resp.FrontCounterTimings=API.formatNumber(frontCounterTimings, "#####0", 6);

		menuItemsSoldPromoed.MenuItemNumber=Number(menuItemNumber);
		menuItemsSoldPromoed.QuantityServed=Number(quantityServed);
		menuItemsSoldPromoed.QuantityPromoed=Number(quantityPromoed);
		resp.MenuItemsSoldPromoed=menuItemsSoldPromoed;

		WS_addLine(resp);

		sequencialNumber=sequencialNumber+1;
	}
}

/**
 * Generates a R2D2 Menu item report.
 * @param config - 
 * @param rootPmix - BOIMIX xml report
 * if any given required data is not present.
 */
function generateR2D2_MenuItem(config, rootPmix) {
	var resp=<MenuItem/>;
	var qttyItems;
	var iIndex;
	var iCount;

	qttyItems=0;
	for each (var fGroup in rootPmix.FamilyGroup) {
		for each (var prod in fGroup.Product) {
			qttyItems++;
		}
	}
	var tableId=new Array (qttyItems+1);
	var tablePrice=new Array (qttyItems+1);

	// create an array indexed by product code
	qttyItems=0;
	for each (var fGroup in rootPmix.FamilyGroup) {
		for each (var prod in fGroup.Product) {
			for(iIndex=0; iIndex<qttyItems; ) {
				if(Number(prod.@id)<Number(tableId[iIndex])) {
					// shift registers
					for(iCount=qttyItems; iCount>=iIndex; iCount--) {
						tableId[iCount+1]=tableId[iCount];
						tablePrice[iCount+1]=tablePrice[iCount];
					}
					break;
				}
				else {
					iIndex++;
				}
			}

			// remove decimal point (multiply by 100 and format to integer)
			// 1.00 is converted to 100
			tableId[iIndex]=prod.@id;
			tablePrice[iIndex]=API.formatNumber(Number(prod.OperationType.Price.@salePrice)*100, "#########0", 10);
			//prod.OperationType.Price.@salePrice;      NVS-2627 Fix
			//API.dbg("IDprice ["+iIndex+"]["+tableId[iIndex]+"]["+tablePrice[iIndex]+"]");
			qttyItems++;
		}
	}

	var infLimit=0;
	var supLimit=qttyItems;
	for each (var prodInfo in rootPmix.ProductTable.ProductInfo) {
		// binary search
		infLimit=0;
		supLimit=qttyItems;
		while(infLimit<supLimit) {
			// this way iIndex will never be a fractionary number
			iIndex=(supLimit+infLimit-((supLimit+infLimit)%2))/2;
//API.dbg("seek ["+iIndex+"]["+tableId[iIndex]+"]["+prodInfo.@id+"]");
			if(Number(tableId[iIndex])==Number(prodInfo.@id)) {
				break;
			}
			else {
				if(Number(tableId[iIndex])>Number(prodInfo.@id)) {
					supLimit=iIndex;
				}
				else {
					infLimit=iIndex;
				}
			}
//API.dbg("LIMITS ["+infLimit+"]["+supLimit+"]");
		}
		
//API.dbg("ID ["+iIndex+"]["+tableId[iIndex]+"]["+prodInfo.@id+"]");
//API.dbg("PRICE ["+tablePrice[iIndex]+"]");

		resp.Number=Number(prodInfo.@id);
		resp.Price=""+tablePrice[iIndex];
		resp.Name=""+prodInfo.@name;

		WS_addLine(resp);
	}
}

/**
 * Generates a R2D2 FC Quarter Hour Data report.
 * @param config - 
 * @param rootSOS - SOS xml report
 * if any given required data is not present.
 */
function generateR2D2_FCQuarterHourData(config, rootSOS) {
	var resp=<QtrHrTotal/>;
	var dayPartitioning=rootSOS.DayPartitioning;

	for each (var segment in dayPartitioning.Segment) {
		var endTime=segment.@endTime;
		var serviceTime=rootSOS.StoreTotals.ServiceTime.(@segmentId==segment.@id);
API.dbg("SERVICETIME ["+serviceTime+"]");
		resp.QuarterHourEndTime=endTime.substr(0,2)+":"+endTime.substr(2,2);
		resp.FrontCounterTransactionCount=Number(serviceTime.@tc);
		//resp.FrontCounterTotalOrderTime=Number(serviceTime.@untilTotal)/1000;
		resp.FrontCounterTotalOrderTime=API.formatNumber(Number(serviceTime.@untilTotal)/1000, "#####0", 6);
		resp.FrontCounterTotalAssemblyTime=API.formatNumber((Number(serviceTime.@untilPay)-Number(serviceTime.@untilTotal))/1000, "#####0", 6);
		resp.FrontCounterTotalCashieringTime=API.formatNumber((Number(serviceTime.@untilCloseDrawer)-Number(serviceTime.@untilPay))/1000, "#####0", 6);
		resp.FrontCounterTotalServiceTime=API.formatNumber(Number(serviceTime.@untilCloseDrawer)/1000, "#####0", 6);
		//resp.FrontCounterTotalStoredOrdersTime=API.formatNumber((Number(serviceTime.@untilRecall)-Number(serviceTime.@untilStore))/1000, "#####0", 6);
		resp.FrontCounterTotalStoredOrdersTime=Number(0);
		resp.FrontCounterTransactionStoredOrdersQty=Number(0);

		WS_addLine(resp);
	}
}

/**
 * Generates a R2D2 KVS Quarter Hour Data report.
 * @param config - 
 * @param rootSOS - SOS xml report
 * if any given required data is not present.
 */
function generateR2D2_KVSQuarterHourData(config, rootSOS) {
	var resp=<KVSQtrHrData/>;
	var dayPartitioning=rootSOS.DayPartitioning;

	var KVSType=rootSOS.StoreTotals.@productionNodeId;

	for each (var segment in dayPartitioning.Segment) {
		var endTime=segment.@endTime;
		var serviceTime=rootSOS.StoreTotals.ServiceTime.(@segmentId==segment.@id);

		resp.QuarterHourEndTime=endTime.substr(0,2)+":"+endTime.substr(2,2);
		resp.TransactionCount=Number(serviceTime.@tc);
		resp.OrderTakingTime=API.formatNumber(Number(serviceTime.@untilTotal)/1000, "#####0", 6);
		resp.ProductionTime=API.formatNumber(0, "#####0", 6);
		resp.RunnerTime=API.formatNumber((Number(serviceTime.@untilServe)-Number(serviceTime.@untilTotal))/1000, "#####0", 6);
		resp.TotalTime=API.formatNumber(Number(serviceTime.@untilServe)/1000, "#####0", 6);
		resp.ItemCount=Number(serviceTime.@itemsCount);

		// if KVS type none of below ignore line
		if(KVSType=="MFY:Side1") {
			resp.KVSType="1";
			WS_addLine(resp);
		}
		else {
			if(KVSType=="MFY:Side2") {
				resp.KVSType="2";
				WS_addLine(resp);
			}
			else {
				if(KVSType=="FC") {
					resp.KVSType="E";
					WS_addLine(resp);
				}
			}
		}
	}
}

/**
 * Accumulate sales values
 * Needed data types: HOURLYSALES, detailTLD
 * @param XMLCashRptAccumulated - accumulated cash
 * @param XMLCashRpt - cash
 */
function generateSummarySalesTLD(config, rootHourlySales, rootdetailTLD)
{
	var resp=<methodresponse/>;
	var timeStep=15;
	var hourAcc=0;
	var minAcc=0;
	var bNextDay=false;

	var PeriodStart=0;
	var PeriodEnd=0;
	var ProductSales=new BigDecimal(0);
	var ProductSalesTax=new BigDecimal(0);
	var TransactionCount=0;
	var TransactionCountAll=0;
	var DTProductSales=new BigDecimal(0);
	var DTProductSalesTax=new BigDecimal(0);
	var DTTransactionCount=0;
	var nonProductSales=new BigDecimal(0);
	var nonProductSalesTax=new BigDecimal(0);
	var nonProductSalesTC=0;
	var EFTSales=new BigDecimal(0);
	var EFTCashout=new BigDecimal(0);
	var EFTTransactionCount=0;
	var McCafeSales=new BigDecimal(0);
	var McCafeTransactionCount=0;
	var CSOSales=new BigDecimal(0);
	var CSOTransactionCount=0;

	var nodeQtty = rootdetailTLD.Node.length();
	var indexNode = new Array(nodeQtty+1);
	var eventQtty = new Array(nodeQtty+1);
	var eventIndex = new Array(nodeQtty+1);
	var eventEnd = new Array(nodeQtty+1);
	var bAllRead=false;
	var refundBehaviour = new Array(nodeQtty+1);
	var overringBehaviour = new Array(nodeQtty+1);

	API.dbg("======= [generateSummarySalesTLD] IN");

	for(var nodeCount = 0; nodeCount < nodeQtty; nodeCount++) {
		var node="rootdetailTLD.Node[" + nodeCount + "]";
		eventIndex[nodeCount]=0;
		eventEnd[nodeCount]=false;
		API.dbg("======= [nodes]"+eval(node + ".@id"));
		eventQtty[nodeCount]=eval(node + ".Event.length()");
		for(var eventCount=eventQtty[nodeCount]; eventCount--; ) {
			// look for valid event
			var evtType=eval(node + ".Event["+eventCount+"].@Type");

			// ignore WASTE
			if (("TRX_Sale"==evtType) || ("TRX_Overring"==evtType)
					|| ("TRX_Refund"==evtType) || ("TRX_Cashout"==evtType)) {
				break;
			}
		}
		eventQtty[nodeCount]=eventCount+1;
		API.dbg("======= [events] node ["+nodeCount+"] events ["+eventQtty[nodeCount]+"]");
		if(eventIndex[nodeCount]>=eventQtty[nodeCount]) {
			eventEnd[nodeCount]=true;
		}
		// if there is no baseconfig assume the default value
		refundBehaviour[nodeCount]=1;
		overringBehaviour[nodeCount]=1;
	}

	while(false==bAllRead) {
		PeriodStart=(("true"==trunc24h)?hourAcc%24:hourAcc)*100+minAcc;

		// new period
		minAcc+=timeStep;
		if(minAcc>=60) {
			hourAcc+=1;
			if(hourAcc>=24) {
				bNextDay=true;
			}
			minAcc=0;
		}

		PeriodEnd=hourAcc*100+minAcc;

		API.dbg("========= Start["+PeriodStart+"] End["+PeriodEnd+"]");

		for(var nodeCount = 0; nodeCount < nodeQtty; nodeCount++) {
			var bNodeOk=false;
			var node="rootdetailTLD.Node[" + nodeCount + "]";

			API.dbg("======== POS ["+eval(node + ".@id")+"]["+posId+"]");
			API.dbg("======== POS2 ["+eval(node + ".@id").substring(3,7)+"]");
	
			if((Number(posId==0x4b))||(Number(posId==0x49))||(Number(posId==0x4a))) {
				// NOTE: filter by POD (0x49 and 0x4a) must be implemented looking the POD for each order
				// e.g. <TRX_Sale status="Paid" POD="Drive Thru">
				// note that the POS type can be long name or short name mixed
				// e.g. <TRX_Sale status="Paid" POD="DT">
				bNodeOk=true;
			}
			else {
				// filter by POS
				if(Number(posId)==Number((eval(node + ".@id")).substring(3,7))) {
					bNodeOk=true;
				}
			}
			if(true==bNodeOk) {
				var bEndLoop=eventEnd[nodeCount];	// to test if this node is finished
				var eventCount=eventIndex[nodeCount];
				API.dbg("======== Node valid ["+eval(node + ".@id")+"]");
				// enquanto estiver no intervalo correto e nao terminaram os dados
				while(false==bEndLoop) {
					var eventTime=Number(eval(node + ".Event["+eventIndex[nodeCount]+"].@Time.substring(8,12)"));
					var eventDate=Number(eval(node + ".Event["+eventIndex[nodeCount]+"].@Time.substring(0,8)"));
					var pastDays=eventDate-Number(businessDate);
					eventTime=eventTime+pastDays*2400;
					API.dbg("========= event date ["+eventDate+"] BD ["+businessDate+"] past days ["+pastDays+"]");

					API.dbg("========= node ["+nodeCount+"] period ["+eventTime+"] Start["+PeriodStart+"] End["+PeriodEnd+"]");

					// test by the period
					if(eventTime>=PeriodEnd) {
						// 
						bEndLoop=true;
					}
					else {
						var events=node + ".Event["+eventIndex[nodeCount]+"]";
						var evtType=eval(events+".@Type");
						var evtPOD="";
						var evtValid=0;
						var evtTagType="";
						var flagDT=false;
						var flagMCC=false;
						var flagCSO=false;

						API.dbg("========= events["+events+"]");
						API.dbg("========= event type["+evtType+"]");

						if ("TRX_Sale"==evtType) {
							evtTagType="TRX_Sale";
							var saleStatus=eval(events+"."+evtTagType+".@status");
							API.dbg("========= saleStatus ["+saleStatus+"]");
							// only consider Paid orders
							// ignore Voided orders 
							if("Paid"==saleStatus) {
								evtValid=SALE;
							}
						} else if ("TRX_Refund"==evtType) {
							evtTagType="TRX_Refund";
							evtValid=REFUND;
						} else if ("TRX_Cashout"==evtType) {
							evtTagType="TRX_Cashout";
							evtValid=CASHOUT;
						} else if ("TRX_Overring"==evtType) {
							evtTagType="TRX_Overring";
							evtValid=OVERRING;
						} else if("TRX_BaseConfig"==evtType) {
							var newRefundBehaviour=eval(events+".TRX_BaseConfig.POSConfig.RefundBehaviour");
							if((null!=newRefundBehaviour)&&(""!=newRefundBehaviour)) {
								if(Number(newRefundBehaviour)!=refundBehaviour[nodeCount]) {
									API.dbg("========= CHANGE node ["+nodeCount+"] refundBehaviour ["+refundBehaviour[nodeCount]+"]");
									refundBehaviour[nodeCount]=Number(newRefundBehaviour);
								}
							}
							var newOverringBehaviour=eval(events+".TRX_BaseConfig.POSConfig.OverringBehaviour");
							if((null!=newOverringBehaviour)&&(""!=newOverringBehaviour)) {
								if(Number(newOverringBehaviour)!=overringBehaviour[nodeCount]) {
									API.dbg("========= CHANGE node ["+nodeCount+"] overringBehaviour ["+overringBehaviour+"]");
									overringBehaviour[nodeCount]=Number(newOverringBehaviour);
								}
							}
							API.dbg("========= node ["+nodeCount+"] refundBehaviour ["+refundBehaviour[nodeCount]+"] overringBehaviour ["+overringBehaviour[nodeCount]+"]");
						}

						if(evtValid>0) {
							API.dbg("========= evt timestamp ["+eval(events+"."+evtTagType+".Order.@Timestamp")+"]");
							API.dbg("========= evt type ["+evtValid+"]["+evtTagType+"]");

							evtPOD=eval(events+"."+evtTagType+".@POD");
							API.dbg("========= evt POD ["+evtPOD+"]["+posId+"]");

							if((evtPOD=="Drive Thru")||(evtPOD=="DT")) {
								flagDT=true;
							}
							if((evtPOD=="McCafe")||(evtPOD=="MCC")) {
								flagMCC=true;
							}
							if((evtPOD=="CSO")||(evtPOD=="CSO (Customer Self Ordering)")) {
								flagCSO=true;
							}

							if((Number(posId==0x4a))&&((evtPOD!="Drive Thru")&&(evtPOD!="DT"))) {
								evtValid=0;		// 0x4a only accepts DT
							}
							if((Number(posId==0x49))&&((evtPOD!="Front Counter")&&(evtPOD!="FC"))) {
								evtValid=0;		// 0x49 only accepts FC
							}

							var totalAmount=new BigDecimal(eval(events+"."+evtTagType+".Order.@totalAmount"));
							var nonProductAmount=new BigDecimal(eval(events+"."+evtTagType+".Order.@nonProductAmount"));
							var productAmount=totalAmount.subtract(nonProductAmount);
							var totalTax=new BigDecimal(eval(events+"."+evtTagType+".Order.@totalTax"));
							var nonProductTax=new BigDecimal(eval(events+"."+evtTagType+".Order.@nonProductTax"));
							var productTax=totalTax.subtract(nonProductTax);
							var tenderAmount=new BigDecimal(0);
							var bCashless=false;
							var tenders=events+"."+evtTagType+".Order.Tenders.Tender";

							API.dbg("========= evt Tenders ["+eval(tenders+".length()")+"]");
							for(var iTender=0; iTender<eval(tenders+".length()"); iTender++) {
								var tenderID=Number(eval(tenders+"["+iTender+"].TenderId"));
								API.dbg("========== evt Tender ["+tenders+"["+iTender+"].TenderId]");
								API.dbg("========== evt Tender ["+iTender+"] ID ["+tenderID+"]");
								if((10==tenderID)||(11==tenderID)) {		// TODO: cashless and Gift Card - hardcoded for now
									bCashless=true;
									tenderAmount=tenderAmount.add(eval(tenders+"["+iTender+"].TenderAmount"));
									API.dbg("========== evt Tender ["+iTender+"] Amount ["+Number(tenderAmount)+"]");
								}
							}

API.dbg("========= evt totalAmount ["+Number(totalAmount)+"]");
API.dbg("========= evt nonProductAmount ["+Number(nonProductAmount)+"]");
API.dbg("========= evt productAmount ["+Number(productAmount)+"]");
API.dbg("========= evt totalTax ["+Number(totalTax)+"]");
API.dbg("========= evt nonProductTax ["+Number(nonProductTax)+"]");
API.dbg("========= evt productTax ["+Number(productTax)+"]");
API.dbg("========= evt tenderAmount ["+Number(tenderAmount)+"]");

							API.dbg("========= evt type ["+evtValid+"]");

							switch (evtValid) {
								case SALE:
									ProductSales=ProductSales.add(productAmount);
									ProductSalesTax=ProductSalesTax.add(productTax);
									if(productAmount.compareTo(new BigDecimal(0))!=0) {
										TransactionCount++;	// product only
									}
									if(true==flagDT) {
										DTProductSales=DTProductSales.add(productAmount);
										DTProductSalesTax=DTProductSalesTax.add(productTax);
										if(productAmount.compareTo(new BigDecimal(0))!=0) {
											DTTransactionCount++;
										}
									}
									nonProductSales=nonProductSales.add(nonProductAmount);
									nonProductSalesTax=nonProductSalesTax.add(nonProductTax);
									if(nonProductAmount.compareTo(new BigDecimal(0))!=0) {
										nonProductSalesTC++;	// product only
									}

									if(true==bCashless) {
										EFTSales=EFTSales.add(tenderAmount);
										EFTTransactionCount++;
										// cashless payment + change in cash => cashout
										API.dbg("========= evt Tenders ["+eval(tenders+".length()")+"]");
										for(var iTender=0; iTender<eval(tenders+".length()"); iTender++) {
											var tenderKind=Number(eval(tenders+"["+iTender+"].TenderKind"));
											API.dbg("========== evt Tender ["+iTender+"] ID ["+tenderKind+"]");
											if(4==tenderKind) {		// change
												var tenderId=Number(eval(tenders+"["+iTender+"].TenderId"));
												if(0==tenderId) {	// cash payment
													var cashoutAmount=new BigDecimal((eval(tenders+"["+iTender+"].TenderAmount")));
													API.dbg("========== evt Tender ["+iTender+"] Cashout Amt ["+Number(cashoutAmount)+"]");
													EFTCashout=EFTCashout.add(cashoutAmount);
													API.dbg("========== evt Tender ["+iTender+"] EFTCashout in sale qty["+EFTTransactionCount+"] amt["+EFTCashout.toString()+"]");
												}
											}
										}
									}
									if(true==flagMCC) {
										McCafeSales=McCafeSales.add(totalAmount);
										McCafeTransactionCount++;
									}
									if(true==flagCSO) {
										CSOSales=CSOSales.add(totalAmount);
										CSOTransactionCount++;
									}

									TransactionCountAll++;
									break;
								case OVERRING:
									API.dbg("========= evt overringBehaviour ["+overringBehaviour[nodeCount]+"]");
									ProductSales=ProductSales.subtract(productAmount);
									ProductSalesTax=ProductSalesTax.subtract(productTax);
									if(true==flagDT) {
										DTProductSales=DTProductSales.subtract(productAmount);
										DTProductSalesTax=DTProductSalesTax.subtract(productTax);
									}
									nonProductSales=nonProductSales.subtract(nonProductAmount);
									nonProductSalesTax=nonProductSalesTax.subtract(nonProductTax);

									if(true==bCashless) {
										EFTSales=EFTSales.subtract(tenderAmount);
									}
									if(true==flagMCC) {
										McCafeSales=McCafeSales.subtract(totalAmount);
									}
									if(true==flagCSO) {
										CSOSales=CSOSales.subtract(totalAmount);
									}

									if(1==overringBehaviour[nodeCount]) {
										if(productAmount.compareTo(new BigDecimal(0))!=0) {
											TransactionCount--;	// product only
										}
										if(true==flagDT) {
											if(productAmount.compareTo(new BigDecimal(0))!=0) {
												DTTransactionCount--;
											}
										}
										if(nonProductAmount.compareTo(new BigDecimal(0))!=0) {
											nonProductSalesTC--;	// product only
										}
	
										if(true==bCashless) {
											EFTTransactionCount--;
										}
										if(true==flagMCC) {
											McCafeTransactionCount--;
										}
										if(true==flagCSO) {
											CSOTransactionCount--;
										}
										TransactionCountAll--;
									}
									break;
								case REFUND:
									API.dbg("========= evt refundBehaviour ["+refundBehaviour[nodeCount]+"]");
									if((0==refundBehaviour[nodeCount])||(1==refundBehaviour[nodeCount])) {
										ProductSales=ProductSales.subtract(productAmount);
										ProductSalesTax=ProductSalesTax.subtract(productTax);
										if(true==flagDT) {
											DTProductSales=DTProductSales.subtract(productAmount);
											DTProductSalesTax=DTProductSalesTax.subtract(productTax);
										}
										nonProductSales=nonProductSales.subtract(nonProductAmount);
										nonProductSalesTax=nonProductSalesTax.subtract(nonProductTax);

										if(true==bCashless) {
											EFTSales=EFTSales.subtract(tenderAmount);
										}
										if(true==flagMCC) {
											McCafeSales=McCafeSales.subtract(totalAmount);
										}
										if(true==flagCSO) {
											CSOSales=CSOSales.subtract(totalAmount);
										}
	
										if(1==refundBehaviour[nodeCount]) {
											if(productAmount.compareTo(new BigDecimal(0))!=0) {
												TransactionCount--;	// product only
											}
											if(true==flagDT) {
												if(productAmount.compareTo(new BigDecimal(0))!=0) {
													DTTransactionCount--;
												}
											}
											if(nonProductAmount.compareTo(new BigDecimal(0))!=0) {
												nonProductSalesTC--;	// product only
											}
											if(true==bCashless) {
												EFTTransactionCount--;
											}
											if(true==flagMCC) {
												McCafeTransactionCount--;
											}
											if(true==flagCSO) {
												CSOTransactionCount--;
											}
											TransactionCountAll--;
										}
									}
									break;
								case WASTE:
									break;
								case CASHOUT:
									if(true==bCashless) {
										EFTSales=EFTSales.add(tenderAmount);
										EFTCashout=EFTCashout.add(tenderAmount);
										EFTTransactionCount++;
										API.dbg("========== evt Tender ["+iTender+"] EFTCashout qty["+EFTTransactionCount+"] amt["+EFTCashout.toString()+"]");
									}
									break;
							}
							API.dbg("========= evt ProductSales ["+Number(ProductSales)+"]");
							API.dbg("========= evt ProductSalesTax ["+Number(ProductSalesTax)+"]");
							API.dbg("========= evt ProductTC ["+TransactionCount+"]");
							API.dbg("========= evt DTProductSales ["+Number(DTProductSales)+"]");
							API.dbg("========= evt DTProductSalesTax ["+Number(DTProductSalesTax)+"]");
							API.dbg("========= evt DTTransactionCount ["+DTTransactionCount+"]");
							API.dbg("========= evt nonProductSales ["+Number(nonProductSales)+"]");
							API.dbg("========= evt nonProductSalesTax ["+Number(nonProductSalesTax)+"]");
							API.dbg("========= evt nonProductSalesTC ["+nonProductSalesTC+"]");
							API.dbg("========= evt TransactionCountAll ["+TransactionCountAll+"]");

							API.dbg("========= evt EFTSales ["+Number(EFTSales)+"]");
							API.dbg("========= evt EFTCashout ["+Number(EFTCashout)+"]");
							API.dbg("========= evt EFTTransactionCount ["+EFTTransactionCount+"]");
							API.dbg("========= evt McCafeSales ["+Number(McCafeSales)+"]");
							API.dbg("========= evt McCafeTransactionCount ["+McCafeTransactionCount+"]");
							API.dbg("========= evt CSOSales ["+Number(CSOSales)+"]");
							API.dbg("========= evt CSOTransactionCount ["+CSOTransactionCount+"]");
						}

						eventIndex[nodeCount]++;
						// test for end of data
						if(eventIndex[nodeCount] >= eventQtty[nodeCount]) {
							eventEnd[nodeCount]=true;
							bEndLoop=true;
						}
					}
				}
			}
		}

		// convert to net
		ProductSales=ProductSales.subtract(ProductSalesTax);
		DTProductSales=DTProductSales.subtract(DTProductSalesTax);
		nonProductSales=nonProductSales.subtract(nonProductSalesTax);

		// send data to output
		resp.PeriodStartTime=API.formatNumber(Number(PeriodStart),"#0000",4);

		resp.ProductSales=Currency(ProductSales);
		resp.ProductSalesTax=Currency(ProductSalesTax);
		resp.TransactionCount=TransactionCount;
		resp.DTProductSales=Currency(DTProductSales);
		resp.DTProductSalesTax=Currency(DTProductSalesTax);
		resp.DTTransactionCount=DTTransactionCount;
		resp.NonProductSales=Currency(nonProductSales);
		resp.NonProductSalesTax=Currency(nonProductSalesTax);
		resp.NonProductSalesTC=nonProductSalesTC;
		resp.TransactionCountAll=TransactionCountAll;

		resp.EFTSales=Currency(EFTSales);			// gross
		resp.EFTCashout=Currency(EFTCashout);
		resp.EFTTransactionCount=EFTTransactionCount;
		resp.McCafeSales=Currency(McCafeSales);		// gross
		resp.McCafeTransactionCount=McCafeTransactionCount;
		resp.CSOSales=Currency(CSOSales);			// gross
		resp.CSOTransactionCount=CSOTransactionCount;

		WS_addLine(resp);

		// reset var
		ProductSales=new BigDecimal(0);
		ProductSalesTax=new BigDecimal(0);
		TransactionCount=0;
		TransactionCountAll=0;
		DTProductSales=new BigDecimal(0);
		DTProductSalesTax=new BigDecimal(0);
		DTTransactionCount=0;
		nonProductSales=new BigDecimal(0);
		nonProductSalesTax=new BigDecimal(0);
		nonProductSalesTC=0;
		EFTSales=new BigDecimal(0);
		EFTCashout=new BigDecimal(0);
		EFTTransactionCount=0;
		McCafeSales=new BigDecimal(0);
		McCafeTransactionCount=0;
		CSOSales=new BigDecimal(0);
		CSOTransactionCount=0;

		// test if there are events after midnight
		if(true==bNextDay) {
			// test if all events
			bAllRead=true;
			for(var nodeCount = 0; nodeCount < nodeQtty; nodeCount++) {
				bAllRead=bAllRead & eventEnd[nodeCount];
			}
		}
	}

	API.dbg("======= [generateSummarySalesTLD] OUT");
}

/**
 * Generates a KVS Timing Data report.
 * @param config - 
 * @param data - Detail SOS xml report
 */
function generateKVSTiming(config, data) 
{
	API.dbg("[generateKVSTiming] START");

	// xml data
	var xmlData					= null;
	var xmlConfig				= null;
	
	// present table attributes
	var overTotalTarget			= 0;
	var underTotalTarget		= 9999999999;
	var overPresentationTarget	= 0;
	var underPresentationTarget	= 9999999999;
	
	var result					= '';
	var periods					= new Array();
	
	var storeDB					= new XML(API.getStoredb());
	var queuesIds				= new Array();
	
	var kvsTypeContent			= '';
	var KVSName					= '';
	var overTotalAttr			= 'tcOverTotal';
	
	var FCOrders				= new Array();
	
	xmlData = new XML(data[0].toString());	
	xmlConfig = new XML(config.toString());
	
	API.dbg("[generateKVSTiming] xmlData.toString():\n" + xmlData.toString() + "\nxmlData.toString() [generateKVSTiming]");
	
	var KVSType = xmlConfig.CustomData.KVSType;
	API.dbg("[generateKVSTiming] KVSType: [" + KVSType + "]");

	if (KVSType == '') {
		kvsTypeContent = "ALL";
	} else if (KVSType.indexOf('QUE') == 0) {
		kvsTypeContent = "ID";
	} else if (KVSType.indexOf(':') != -1) {
		kvsTypeContent = "NAME";
	} else {
		kvsTypeContent = "TYPE";
	} 
	
	for each (var queue in storeDB.StoreDB.Production.NameTable.Queue) {
		switch (kvsTypeContent) {
			case "ALL":
				queuesIds.push(queue.@id);
				break;
				
			case "ID":
				if (KVSType == queue.@id) {
					queuesIds.push(queue.@id);
					if (queue.@type == queue.@shortName)  {
						KVSName = queue.@shortName;
					} else {
						KVSName = queue.@type + ':' + queue.@shortName;
					}
				}
				break;
				
			case "NAME":
				var queueName = queue.@type + ':' + queue.@shortName;
				if (KVSType == queueName) {
					queuesIds.push(queue.@id);
				}
				break;
				
			case "TYPE":
				if (KVSType == queue.@type) {
					queuesIds.push(queue.@id);
				}
				break;
		}
	}
	queueAttribute = queuesIds.join('|');
	
	API.dbg("[generateKVSTiming] Generating Time Slices...");
	for each (var segment in xmlData.DayPartitioning.Segment) {
		var id			= segment.@id;
		var startTime	= segment.@begTime;
		
		periods[id] = new Array();
		
		periods[id].startTime				= startTime;
		periods[id].TransactionCount		= 0;
		periods[id].HOTOrders				= 0;
		periods[id].TotalItems				= 0;
		periods[id].HeldOrders				= 0;
		periods[id].ServedCars				= 0;
		periods[id].OverPresentTime			= 0;
		periods[id].OverTotal				= 0;
		periods[id].UnderTotal				= 0;
		periods[id].TotalHoldTime			= 0;
		periods[id].TotalOrderTakingTime	= 0;
		periods[id].TotalPresentTime		= 0;
		periods[id].TotalLineTime			= 0;
		periods[id].TotalCashieringTime		= 0;
		periods[id].TotalProductNetSales	= 0;
		periods[id].TotalProductionTime		= 0;
	}

	API.dbg("[generateKVSTiming] Mapping duplicated orders");
	var OrdersKeys = Array();
	var OrdersIndex = Array();
	var bRestartScan = false;
	
	do {
		OrdersKeys = Array();
		OrdersIndex = Array();
		bRestartScan = false;
		
		for (var ctStoreTotal = 0; ctStoreTotal < xmlData.StoreTotals.length(); ctStoreTotal++) {
			var storeTotal = xmlData.StoreTotals[ctStoreTotal];
			for (var ctServiceTime = 0; ctServiceTime < storeTotal.ServiceTime.length(); ctServiceTime++) {
				var serviceTime = storeTotal.ServiceTime[ctServiceTime];
				var key = storeTotal.@productionNodeId.toString() + "|" + serviceTime.@segmentId.toString() + "|" + serviceTime.@orderKey.toString();
				
				if (OrdersKeys.indexOf(key) == -1) {
					OrdersKeys.push(key);
				} else {
					// duplicated - delete
					var index = OrdersIndex[key].split("|");
					delete xmlData.StoreTotals[index[0]].ServiceTime[index[1]];
					bRestartScan = true;
					break;
				}
				OrdersIndex[key] = ctStoreTotal + "|" + ctServiceTime;
			}
			if (bRestartScan) {
				break;
			}
		}
	} while (bRestartScan);
	
	for each (var storeTotal in xmlData.StoreTotals) {
		for each (var serviceTime in storeTotal.ServiceTime) {
			if (storeTotal.@productionNodeId.toString() == "FC") {
				FCOrders.push(serviceTime.@orderKey.toString());
			}
		}
	}

	API.dbg("[generateKVSTiming] Consolidating data...");
	for each (var storeTotal in xmlData.StoreTotals) {
		var continueLoop	= false;
		
		switch (kvsTypeContent) {
			case "ALL":
				break;
				
			case "ID":
				if (KVSName != storeTotal.@productionNodeId.toString()) {
					continueLoop = true;
				}
				break;
				
			case "NAME":
				if (KVSType != storeTotal.@productionNodeId.toString()) {
					continueLoop = true;
				}
				break;
				
			case "TYPE":
				if (KVSType != storeTotal.@productionNodeId.toString().split(':')[0]) {
					continueLoop = true;
				}
				break;
		}
		
		if (continueLoop) {
			continue;
		}
		overTotalAttr = 'tcOverTotal' + storeTotal.@productionNodeId.toString().split(':')[0];
		API.dbg("[generateKVSTiming] overTotalAttr: [" + overTotalAttr + "]");
		for each (var serviceTime in storeTotal.ServiceTime) {
			var xmlTotalTime	= isNaN(parseInt(serviceTime.@totalTime))?0:parseInt(serviceTime.@totalTime);
			var xmlPresentTime	= isNaN(parseInt(serviceTime.@untilServe))?0:parseInt(serviceTime.@untilServe) - 
									isNaN(parseInt(serviceTime.@untilCloseDrawer))?0:parseInt(serviceTime.@untilCloseDrawer);
			var id				= serviceTime.@segmentId;
			var	posType			= serviceTime.@orderKey.toString().substr(0, 3);
			
			xmlPresentTime = (xmlPresentTime > 0)?xmlPresentTime:0;

			if (overTotalTarget < xmlTotalTime) {
				overTotalTarget = xmlTotalTime;
			}
			if (underTotalTarget > xmlTotalTime) {
				underTotalTarget = xmlTotalTime;
			}
			
			if (overPresentationTarget < xmlPresentTime) {
				overPresentationTarget = xmlPresentTime;
			}
			if (underPresentationTarget > xmlPresentTime) {
				underPresentationTarget = xmlPresentTime;
			}

			periods[id].TransactionCount		+= isNaN(parseInt(serviceTime.@tc))?0:parseInt(serviceTime.@tc);
			if (posType == "HOT") {
				periods[id].HOTOrders			+= isNaN(parseInt(periods[id].TransactionCount))?0:parseInt(periods[id].TransactionCount);
			}
			periods[id].TotalItems				+=	isNaN(parseInt(serviceTime.@itemsCount))?0:parseInt(serviceTime.@itemsCount);
			// served cars for FCs are 0
			if (FCOrders.indexOf(serviceTime.@orderKey.toString()) == -1) {
				// non FC
				periods[id].ServedCars			+= isNaN(parseInt(serviceTime.@cars))?0:parseInt(serviceTime.@cars);
			} else {
				// FC
				periods[id].ServedCars			+=	0;
			}
			periods[id].OverPresentTime			+=	isNaN(parseInt(serviceTime.@tcOverPresentationPreset))?0:parseInt(serviceTime.@tcOverPresentationPreset);
			periods[id].OverTotal				+=	isNaN(parseInt(serviceTime.attribute(overTotalAttr)))?0:parseInt(serviceTime.attribute(overTotalAttr));
			periods[id].UnderTotal				=	periods[id].TransactionCount - periods[id].OverTotal;
			periods[id].TotalOrderTakingTime	+=	isNaN(parseInt(serviceTime.@untilTotal))?0:parseInt(serviceTime.@untilTotal);
			periods[id].TotalPresentTime		+=	xmlPresentTime;
			periods[id].TotalLineTime			+=	(isNaN(parseInt(serviceTime.@untilRecall))?0:parseInt(serviceTime.@untilRecall))	- 
													(isNaN(parseInt(serviceTime.@untilStore))?0:parseInt(serviceTime.@untilStore));
			periods[id].TotalCashieringTime		+=	(isNaN(parseInt(serviceTime.@untilPay))?0:parseInt(serviceTime.@untilPay))			- 
													(isNaN(parseInt(serviceTime.@untilTotal))?0:parseInt(serviceTime.@untilTotal));
			periods[id].TotalProductNetSales	+=	isNaN(parseFloat(serviceTime.@totalAmount))?0:parseFloat(serviceTime.@totalAmount);
			periods[id].TotalProductionTime		+=	isNaN(parseInt(serviceTime.@ProductionTime))?0:parseInt(serviceTime.@ProductionTime);

			for each (productionTime in serviceTime.ProductionTime) {
				periods[id].HeldOrders		+=	isNaN(parseInt(productionTime.@tcHeld))?0:parseInt(productionTime.@tcHeld);
				periods[id].TotalHoldTime	+=	isNaN(parseInt(productionTime.@heldTime))?0:parseInt(productionTime.@heldTime);
			}
			
		}
	}
	
	// check for more prioritary presets
	var tp = '';
	switch(kvsTypeContent) {
		case "ALL":
		case "ID":
			break;
			
		case "NAME":
		case "TYPE":
			tp = KVSType.split(':')[0];
			break;
	}
	if (tp != '') {
		for each (attr in xmlData.PresetsTable.attributes()) {
			if (attr.name() == "overTotalTarget" + tp) {
				overTotalTarget = attr.toString();
				API.dbg("[generateKVSTiming] overTotalTarget: [" + overTotalTarget + "]");
			}
			else if (attr.name() == "underTotalTarget" + tp) {
				underTotalTarget = attr.toString();
				API.dbg("[generateKVSTiming] underTotalTarget: [" + underTotalTarget + "]");
			}
			else if (attr.name() == "overPresentationTarget" + tp) {
				overPresentationTarget = attr.toString();
				API.dbg("[generateKVSTiming] overPresentationTarget: [" + overPresentationTarget + "]");
			}
			else if (attr.name() == "underPresentationTarget" + tp) {
				underPresentationTarget = attr.toString();
				API.dbg("[generateKVSTiming] underPresentationTarget: [" + underPresentationTarget + "]");
			}
		}
	}
	
	API.dbg("[generateKVSTiming] Generating XML...");
	result =	'<SOSData RequestType="' + KVSType + '" Queue="' + queueAttribute + '">' + "\n";
	WS_addLine(result);
	
	result =	'<PresetsTable '																				+
					'overTotalTarget="'			+ (isNaN(overTotalTarget)?0:overTotalTarget)					+ '" '	+
					'underTotalTarget="'		+ (isNaN(underTotalTarget)?0:underTotalTarget)					+ '" '	+
					'overPresentationTarget="'	+ (isNaN(overPresentationTarget)?0:overPresentationTarget)		+ '" '	+ 
					'underPresentationTarget="'	+ (isNaN(underPresentationTarget)?0:underPresentationTarget)	+ '" '	+
				"/>";
	WS_addLine(result);
	
	for (hour = 0; hour < 24; hour++) {
		for (minute = 0; minute < 60; minute += 15) {
			timeslice = API.formatNumber(hour, "00", 2) + API.formatNumber(minute, "00", 2);
			for each (period in periods) {
				if (period.startTime == timeslice) {
					break;
				}
			}
			
			if (period.startTime != timeslice) {
				period						= new Array();
				period.startTime			= timeslice;
				period.TransactionCount		= 0;
				period.HOTOrders			= 0;
				period.TotalItems			= 0;
				period.HeldOrders			= 0;
				period.ServedCars			= 0;
				period.OverPresentTime		= 0;
				period.OverTotal			= 0;
				period.UnderTotal			= 0;
				period.TotalHoldTime		= 0;
				period.TotalOrderTakingTime	= 0;
				period.TotalPresentTime		= 0;
				period.TotalLineTime		= 0;
				period.TotalCashieringTime	= 0;
				period.TotalProductNetSales	= 0;
				period.TotalProductionTime	= 0;
			}
			
			// adjust numeric values
			period.TransactionCount 		= isNaN(period.TransactionCount)?0:period.TransactionCount;
			period.HOTOrders				= isNaN(period.HOTOrders)?0:period.HOTOrders;
			period.TotalItems				= isNaN(period.TotalItems)?0:period.TotalItems;
			period.HeldOrders				= isNaN(period.HeldOrders)?0:period.HeldOrders;
			period.ServedCars				= isNaN(period.ServedCars)?0:period.ServedCars;
			period.OverPresentTime			= isNaN(period.OverPresentTime)?0:period.OverPresentTime;
			period.OverTotal				= isNaN(period.OverTotal)?0:period.OverTotal;
			period.UnderTotal				= isNaN(period.UnderTotal)?0:period.UnderTotal;
			period.TotalHoldTime			= isNaN(period.TotalHoldTime)?0:period.TotalHoldTime;
			period.TotalOrderTakingTime		= isNaN(period.TotalOrderTakingTime)?0:period.TotalOrderTakingTime;
			period.TotalPresentTime			= isNaN(period.TotalPresentTime)?0:period.TotalPresentTime;
			period.TotalLineTime			= isNaN(period.TotalLinetime)?0:period.TotalLineTime;
			period.TotalCashieringTime		= isNaN(period.TotalCashieringTime)?0:period.TotalCashieringTime;
			period.TotalProductNetSales		= isNaN(period.TotalProductNetSales)?0:period.TotalProductNetSales;
			period.TotalProductionTime		= isNaN(period.TotalProductionTime)?0:period.TotalProductionTime;
			
			// adjust float values
			var strTotalProductNetSales		= trim(API.formatNumber(period.TotalProductNetSales, ".00", 16));
			
			result = 
				'<Period startTime="' + period.startTime + '"> ' + "\n"											+
					"\t<TransactionCount>"		+ period.TransactionCount			+ "</TransactionCount>\n"		+
					"\t<HOTOrders>"				+ period.HOTOrders					+ "</HOTOrders>\n"				+
					"\t<TotalItems>"			+ period.TotalItems					+ "</TotalItems>\n"				+
					"\t<HeldOrders>"			+ period.HeldOrders					+ "</HeldOrders>\n"				+
					"\t<ServedCars>"			+ period.ServedCars					+ "</ServedCars>\n"				+
					"\t<OverPresentTime>"		+ period.OverPresentTime			+ "</OverPresentTime>\n"		+
					"\t<OverTotal>"				+ period.OverTotal					+ "</OverTotal>\n"				+
					"\t<UnderTotal>"			+ period.UnderTotal					+ "</UnderTotal>\n"				+
					"\t<TotalHoldTime>"			+ period.TotalHoldTime				+ "</TotalHoldTime>\n"			+
					"\t<TotalOrderTakingTime>"	+ period.TotalOrderTakingTime		+ "</TotalOrderTakingTime>\n"	+
					"\t<TotalPresentTime>"		+ period.TotalPresentTime			+ "</TotalPresentTime>\n"		+
					"\t<TotalLineTime>"			+ period.TotalLineTime				+ "</TotalLineTime>\n"			+
					"\t<TotalCashieringTime>"	+ period.TotalCashieringTime		+ "</TotalCashieringTime>\n"	+
					"\t<TotalProductNetSales>"	+ strTotalProductNetSales			+ "</TotalProductNetSales>\n"	+
					"\t<TotalProductionTime>"	+ period.TotalProductionTime		+ "</TotalProductionTime>\n"	+
				"</Period>"
			;
			WS_addLine(result);
		}
	}

	result = "</SOSData>";
	WS_addLine(result);

	API.dbg("[generateKVSTiming] END");
	
	return result;
}


/**
 * Accumulate cash values.
 * @param XMLCashRptAccumulated - accumulated cash
 * @param XMLCashRpt - cash
 */
function AddXMLCashRpt(XMLCashRptAccumulated, XMLCashRpt)
{
	XMLCashRptAccumulated.InitialFloat.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.InitialFloat.@value)+Number(XMLCashRpt.InitialFloat.@value),".00",50));
	//XMLCashRptAccumulated.Openingreading.@value=trim(API.formatNumber(XMLCashRpt.Openingreading.@value,".00",50));
	XMLCashRptAccumulated.DIFFERENCE.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.DIFFERENCE.@value)+Number(XMLCashRpt.DIFFERENCE.@value),".00",50));
	XMLCashRptAccumulated.Overring.@tc=Number(XMLCashRptAccumulated.Overring.@tc)+Number(XMLCashRpt.Overring.@tc);
	XMLCashRptAccumulated.Overring.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.Overring.@amount)+Number(XMLCashRpt.Overring.@amount),".00",50));
	XMLCashRptAccumulated.CashRefunds.@tc=Number(XMLCashRptAccumulated.CashRefunds.@tc)+Number(XMLCashRpt.CashRefunds.@tc);
	XMLCashRptAccumulated.CashRefunds.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CashRefunds.@amount)+Number(XMLCashRpt.CashRefunds.@amount),".00",50));
	XMLCashRptAccumulated.CashlessRefunds.@tc=Number(XMLCashRptAccumulated.CashlessRefunds.@tc)+Number(XMLCashRpt.CashlessRefunds.@tc);
	XMLCashRptAccumulated.CashlessRefunds.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CashlessRefunds.@amount)+Number(XMLCashRpt.CashlessRefunds.@amount),".00",50));
	XMLCashRptAccumulated.OtherReceipts.@tc=Number(XMLCashRptAccumulated.OtherReceipts.@tc)+Number(XMLCashRpt.OtherReceipts.@tc);
	XMLCashRptAccumulated.OtherReceipts.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.OtherReceipts.@amount)+Number(XMLCashRpt.OtherReceipts.@amount),".00",50));
	XMLCashRptAccumulated.GiftCertSold.@tc=Number(XMLCashRptAccumulated.GiftCertSold.@tc)+Number(XMLCashRpt.GiftCertSold.@tc);
	XMLCashRptAccumulated.GiftCertSold.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.GiftCertSold.@amount)+Number(XMLCashRpt.GiftCertSold.@amount),".00",50));
	XMLCashRptAccumulated.GiftCardSold.@tc=Number(XMLCashRptAccumulated.GiftCardSold.@tc)+Number(XMLCashRpt.GiftCardSold.@tc);
	XMLCashRptAccumulated.GiftCardSold.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.GiftCardSold.@amount)+Number(XMLCashRpt.GiftCardSold.@amount),".00",50));
	XMLCashRptAccumulated.GiftCertASold.@tc=Number(XMLCashRptAccumulated.GiftCertASold.@tc)+Number(XMLCashRpt.GiftCertASold.@tc);
	XMLCashRptAccumulated.GiftCertASold.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.GiftCertASold.@amount)+Number(XMLCashRpt.GiftCertASold.@amount),".00",50));
	XMLCashRptAccumulated.GiftCertBSold.@tc=Number(XMLCashRptAccumulated.GiftCertBSold.@tc)+Number(XMLCashRpt.GiftCertBSold.@tc);
	XMLCashRptAccumulated.GiftCertBSold.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.GiftCertBSold.@amount)+Number(XMLCashRpt.GiftCertBSold.@amount),".00",50));
	XMLCashRptAccumulated.GROSSSALES.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.GROSSSALES.@value)+Number(XMLCashRpt.GROSSSALES.@value),".00",50));
	XMLCashRptAccumulated.NOTAXSALES.@tc=Number(XMLCashRptAccumulated.NOTAXSALES.@tc)+Number(XMLCashRpt.NOTAXSALES.@tc);
	XMLCashRptAccumulated.NOTAXSALES.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.NOTAXSALES.@value)+Number(XMLCashRpt.NOTAXSALES.@value),".00",50));
	XMLCashRptAccumulated.NONTAXABLESALES.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.NONTAXABLESALES.@value)+Number(XMLCashRpt.NONTAXABLESALES.@value),".00",50));
	// this is actually the tax amount, not tc
	XMLCashRptAccumulated.TAXABLESALES.@tc=trim(API.formatNumber(Number(XMLCashRptAccumulated.TAXABLESALES.@tc)+Number(XMLCashRpt.TAXABLESALES.@tc),".00",50));
	XMLCashRptAccumulated.TAXABLESALES.@amount=Number(XMLCashRptAccumulated.TAXABLESALES.@amount)+Number(XMLCashRpt.TAXABLESALES.@amount);
	XMLCashRptAccumulated.TOTALNETSALES.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.TOTALNETSALES.@value)+Number(XMLCashRpt.TOTALNETSALES.@value),".00",50));
	XMLCashRptAccumulated.NonProductSales.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.NonProductSales.@value)+Number(XMLCashRpt.NonProductSales.@value),".00",50));
	XMLCashRptAccumulated.PRODUCTsales.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.PRODUCTsales.@value)+Number(XMLCashRpt.PRODUCTsales.@value),".00",50));
	XMLCashRptAccumulated.GiftCardRedeem.@tc=Number(XMLCashRptAccumulated.GiftCardRedeem.@tc)+Number(XMLCashRpt.GiftCardRedeem.@tc);
	XMLCashRptAccumulated.GiftCardRedeem.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.GiftCardRedeem.@amount)+Number(XMLCashRpt.GiftCardRedeem.@amount),".00",50));
	XMLCashRptAccumulated.CashlessSales.@tc=Number(XMLCashRptAccumulated.CashlessSales.@tc)+Number(XMLCashRpt.CashlessSales.@tc);
	XMLCashRptAccumulated.CashlessSales.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CashlessSales.@amount)+Number(XMLCashRpt.CashlessSales.@amount),".00",50));
	XMLCashRptAccumulated.CashTransferIn.@tc=Number(XMLCashRptAccumulated.CashTransferIn.@tc)+Number(XMLCashRpt.CashTransferIn.@tc);
	XMLCashRptAccumulated.CashTransferIn.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CashTransferIn.@amount)+Number(XMLCashRpt.CashTransferIn.@amount),".00",50));
	XMLCashRptAccumulated.CashTransferOut.@tc=Number(XMLCashRptAccumulated.CashTransferOut.@tc)+Number(XMLCashRpt.CashTransferOut.@tc);
	XMLCashRptAccumulated.CashTransferOut.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CashTransferOut.@amount)+Number(XMLCashRpt.CashTransferOut.@amount),".00",50));
	XMLCashRptAccumulated.OtherCardsTransferIn.@tc=Number(XMLCashRptAccumulated.OtherCardsTransferIn.@tc)+Number(XMLCashRpt.OtherCardsTransferIn.@tc);
	XMLCashRptAccumulated.OtherCardsTransferIn.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.OtherCardsTransferIn.@amount)+Number(XMLCashRpt.OtherCardsTransferIn.@amount),".00",50));
	XMLCashRptAccumulated.OtherCardsTransferOut.@tc=Number(XMLCashRptAccumulated.OtherCardsTransferOut.@tc)+Number(XMLCashRpt.OtherCardsTransferOut.@tc);
	XMLCashRptAccumulated.OtherCardsTransferOut.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.OtherCardsTransferOut.@amount)+Number(XMLCashRpt.OtherCardsTransferOut.@amount),".00",50));
	XMLCashRptAccumulated.BillableSales.@tc=Number(XMLCashRptAccumulated.BillableSales.@tc)+Number(XMLCashRpt.BillableSales.@tc);
	XMLCashRptAccumulated.BillableSales.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.BillableSales.@amount)+Number(XMLCashRpt.BillableSales.@amount),".00",50));
	XMLCashRptAccumulated.GiftCertif.@tc=Number(XMLCashRptAccumulated.GiftCertif.@tc)+Number(XMLCashRpt.GiftCertif.@tc);
	XMLCashRptAccumulated.GiftCertif.@amount=Number(XMLCashRptAccumulated.GiftCertif.@amount)+Number(XMLCashRpt.GiftCertif.@amount);
	XMLCashRptAccumulated.GiftBook.@tc=Number(XMLCashRptAccumulated.GiftBook.@tc)+Number(XMLCashRpt.GiftBook.@tc);
	XMLCashRptAccumulated.GiftBook.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.GiftBook.@amount)+Number(XMLCashRpt.GiftBook.@amount),".00",50));
	XMLCashRptAccumulated.COMPUTEDCASH.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.COMPUTEDCASH.@value)+Number(XMLCashRpt.COMPUTEDCASH.@value),".00",50));
	XMLCashRptAccumulated.CashSkims.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.CashSkims.@value)+Number(XMLCashRpt.CashSkims.@value),".00",50));
	XMLCashRptAccumulated.Expectedcash.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.Expectedcash.@value)+Number(XMLCashRpt.Expectedcash.@value),".00",50));
	XMLCashRptAccumulated.CashCashUS.@tc=Number(XMLCashRptAccumulated.CashCashUS.@tc)+Number(XMLCashRpt.CashCashUS.@tc);
	XMLCashRptAccumulated.CashCashUS.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CashCashUS.@amount)+Number(XMLCashRpt.CashCashUS.@amount),".00",50));
	XMLCashRptAccumulated.CouponA.@tc=Number(XMLCashRptAccumulated.CouponA.@tc)+Number(XMLCashRpt.CouponA.@tc);
	XMLCashRptAccumulated.CouponA.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CouponA.@amount)+Number(XMLCashRpt.CouponA.@amount),".00",50));
	XMLCashRptAccumulated.CouponB.@tc=Number(XMLCashRptAccumulated.CouponB.@tc)+Number(XMLCashRpt.CouponB.@tc);
	XMLCashRptAccumulated.CouponB.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CouponB.@amount)+Number(XMLCashRpt.CouponB.@amount),".00",50));
	XMLCashRptAccumulated.CouponC.@tc=Number(XMLCashRptAccumulated.CouponC.@tc)+Number(XMLCashRpt.CouponC.@tc);
	XMLCashRptAccumulated.CouponC.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CouponC.@amount)+Number(XMLCashRpt.CouponC.@amount),".00",50));
	XMLCashRptAccumulated.CouponD.@tc=Number(XMLCashRptAccumulated.CouponD.@tc)+Number(XMLCashRpt.CouponD.@tc);
	XMLCashRptAccumulated.CouponD.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CouponD.@amount)+Number(XMLCashRpt.CouponD.@amount),".00",50));
	XMLCashRptAccumulated.CouponE.@tc=Number(XMLCashRptAccumulated.CouponE.@tc)+Number(XMLCashRpt.CouponE.@tc);
	XMLCashRptAccumulated.CouponE.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.CouponE.@amount)+Number(XMLCashRpt.CouponE.@amount),".00",50));
 	// Get tender information
	//XMLCashRptAccumulated.nodesTender += XMLCashRpt.nodesTender
	XMLCashRptAccumulated.Giftcardcashout.@tc=Number(XMLCashRptAccumulated.Giftcardcashout.@tc)+Number(XMLCashRpt.Giftcardcashout.@tc);
	XMLCashRptAccumulated.Giftcardcashout.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.Giftcardcashout.@amount)+Number(XMLCashRpt.Giftcardcashout.@amount),".00",50));
	XMLCashRptAccumulated.TotalTCAC.@tc=Number(XMLCashRptAccumulated.TotalTCAC.@tc)+Number(XMLCashRpt.TotalTCAC.@tc);
	XMLCashRptAccumulated.TotalTCAC.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.TotalTCAC.@amount)+Number(XMLCashRpt.TotalTCAC.@amount),".00",50));
	XMLCashRptAccumulated.NetsalesDThru.@tc=Number(XMLCashRptAccumulated.NetsalesDThru.@tc)+Number(XMLCashRpt.NetsalesDThru.@tc);
	XMLCashRptAccumulated.NetsalesDThru.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.NetsalesDThru.@amount)+Number(XMLCashRpt.NetsalesDThru.@amount),".00",50));
	XMLCashRptAccumulated.PercentDThru.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.PercentDThru.@value)+Number(XMLCashRpt.PercentDThru.@value),".00",50));
	XMLCashRptAccumulated.Cars.@value=Number(XMLCashRptAccumulated.Cars.@value)+Number(XMLCashRpt.Cars.@value);
	XMLCashRptAccumulated.NetsalesBfast.@tc=Number(XMLCashRptAccumulated.NetsalesBfast.@tc)+Number(XMLCashRpt.NetsalesBfast.@tc);
	XMLCashRptAccumulated.NetsalesBfast.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.NetsalesBfast.@amount)+Number(XMLCashRpt.NetsalesBfast.@amount),".00",50));
	XMLCashRptAccumulated.BreakfastPercent.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.BreakfastPercent.@value)+Number(XMLCashRpt.BreakfastPercent.@value),".00",50));
	XMLCashRptAccumulated.NetsalesEatIn.@tc=Number(XMLCashRptAccumulated.NetsalesEatIn.@tc)+Number(XMLCashRpt.NetsalesEatIn.@tc);
	XMLCashRptAccumulated.NetsalesEatIn.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.NetsalesEatIn.@amount)+Number(XMLCashRpt.NetsalesEatIn.@amount),".00",50));
	XMLCashRptAccumulated.EatIntax.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.EatIntax.@value)+Number(XMLCashRpt.EatIntax.@value),".00",50));
	XMLCashRptAccumulated.NetsalesTakeOut.@tc=Number(XMLCashRptAccumulated.NetsalesTakeOut.@tc)+Number(XMLCashRpt.NetsalesTakeOut.@tc);
	XMLCashRptAccumulated.NetsalesTakeOut.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.NetsalesTakeOut.@amount)+Number(XMLCashRpt.NetsalesTakeOut.@amount),".00",50));
	XMLCashRptAccumulated.TakeOuttax.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.TakeOuttax.@value)+Number(XMLCashRpt.TakeOuttax.@value),".00",50));
	XMLCashRptAccumulated.TakeOutPercent.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.TakeOutPercent.@value)+Number(XMLCashRpt.TakeOutPercent.@value),".00",50));
	XMLCashRptAccumulated.NetsalesGarden.@tc=Number(XMLCashRptAccumulated.NetsalesGarden.@tc)+Number(XMLCashRpt.NetsalesGarden.@tc);
	XMLCashRptAccumulated.NetsalesGarden.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.NetsalesGarden.@amount)+Number(XMLCashRpt.NetsalesGarden.@amount),".00",50));
	XMLCashRptAccumulated.Gardentax.@tc=trim(API.formatNumber(Number(XMLCashRptAccumulated.Gardentax.@tc)+Number(XMLCashRpt.Gardentax.@tc),".00",50));
	XMLCashRptAccumulated.Waste.@tc=Number(XMLCashRptAccumulated.Waste.@tc)+Number(XMLCashRpt.Waste.@tc);
	XMLCashRptAccumulated.Waste.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.Waste.@amount)+Number(XMLCashRpt.Waste.@amount),".00",50));
	XMLCashRptAccumulated.PROMO.@tc=Number(XMLCashRptAccumulated.PROMO.@tc)+Number(XMLCashRpt.PROMO.@tc);
	XMLCashRptAccumulated.PROMO.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.PROMO.@amount)+Number(XMLCashRpt.PROMO.@amount),".00",50));
	XMLCashRptAccumulated.Amountdiscount.@tc=Number(XMLCashRptAccumulated.Amountdiscount.@tc)+Number(XMLCashRpt.Amountdiscount.@tc);
	XMLCashRptAccumulated.Amountdiscount.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.Amountdiscount.@amount)+Number(XMLCashRpt.Amountdiscount.@amount),".00",50));
	XMLCashRptAccumulated.EmpMealdiscount.@tc=Number(XMLCashRptAccumulated.EmpMealdiscount.@tc)+Number(XMLCashRpt.EmpMealdiscount.@tc);
	XMLCashRptAccumulated.EmpMealdiscount.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.EmpMealdiscount.@amount)+Number(XMLCashRpt.EmpMealdiscount.@amount),".00",50));
	XMLCashRptAccumulated.MgrMealdiscount.@tc=Number(XMLCashRptAccumulated.MgrMealdiscount.@tc)+Number(XMLCashRpt.MgrMealdiscount.@tc);
	XMLCashRptAccumulated.MgrMealdiscount.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.MgrMealdiscount.@amount)+Number(XMLCashRpt.MgrMealdiscount.@amount),".00",50));
	XMLCashRptAccumulated.RedBeforeTotal.@tc=Number(XMLCashRptAccumulated.RedBeforeTotal.@tc)+Number(XMLCashRpt.RedBeforeTotal.@tc);
	XMLCashRptAccumulated.RedBeforeTotal.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.RedBeforeTotal.@amount)+Number(XMLCashRpt.RedBeforeTotal.@amount),".00",50));
	XMLCashRptAccumulated.AvgRedBeforeTotal.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.AvgRedBeforeTotal.@value)+Number(XMLCashRpt.AvgRedBeforeTotal.@value),".00",50));
	XMLCashRptAccumulated.RedAfterTotal.@tc=Number(XMLCashRptAccumulated.RedAfterTotal.@tc)+Number(XMLCashRpt.RedAfterTotal.@tc);
	XMLCashRptAccumulated.RedAfterTotal.@amount=trim(API.formatNumber(Number(XMLCashRptAccumulated.RedAfterTotal.@amount)+Number(XMLCashRpt.RedAfterTotal.@amount),".00",50));
	XMLCashRptAccumulated.AvgRedAfterTotal.@value=trim(API.formatNumber(Number(XMLCashRptAccumulated.AvgRedAfterTotal.@value)+Number(XMLCashRpt.AvgRedAfterTotal.@value),".00",50));
	XMLCashRptAccumulated.Draweropens.@value=Number(XMLCashRptAccumulated.Draweropens.@value)+Number(XMLCashRpt.Draweropens.@value);
	
	/* add uberEats to billable sales UberEats NVS-6999- NVS-7253 - msilva - UberEats Integration */ 
	XMLCashRptAccumulated.BillableSales.@tc = Number(XMLCashRptAccumulated.BillableSales.@tc) + Number(XMLCashRpt.deliveryBillableSale.@tc);
	XMLCashRptAccumulated.BillableSales.@amount =trim(API.formatNumber(Number(XMLCashRptAccumulated.BillableSales.@amount) + Number(XMLCashRpt.deliveryBillableSale.@amount),".00",50));

}

function AddXMLUseTaxRpt(XMLCashRptAccumulated, XMLCashRpt) {
	if (XMLCashRptAccumulated == null || XMLCashRptAccumulated.UseTaxTotals == null || XMLCashRpt == null || XMLCashRpt.UseTaxTotals == null || XMLCashRpt.UseTaxTotals.Tax == null) {
		return;
	}

	var nodesUseTaxSize = XMLCashRpt.UseTaxTotals.Tax.length();
	if (nodesUseTaxSize == 0) {
		return;
	}
	
	if (null == XMLCashRptAccumulated.UseTaxTotals || XMLCashRptAccumulated.UseTaxTotals.length() == 0) {
		XMLCashRptAccumulated.appendChild(new XML("<UseTaxTotals/>"));
	}

	for (var i = 0; i < nodesUseTaxSize; i++) {
		var addTax = XMLCashRpt.UseTaxTotals.Tax[i];
		var existingTax = XMLCashRptAccumulated.UseTaxTotals.Tax.(@id == addTax.@id);
		if (existingTax.length() == 0) {
			XMLCashRptAccumulated.UseTaxTotals.appendChild(addTax);
		}
		else {
			var accBaseValue = new BigDecimal(existingTax.@baseValue);
			var accCalculatedValue = new BigDecimal(existingTax.@calculatedValue);

			var addBaseValue = new BigDecimal(addTax.@baseValue);
			var addCalculatedValue = new BigDecimal(addTax.@calculatedValue);
			
			accBaseValue = accBaseValue.add(addBaseValue);
			accCalculatedValue = accCalculatedValue.add(addCalculatedValue);
			
			existingTax.@baseValue = BigDec2Currency(accBaseValue).replace(/^\s+/,'');
			existingTax.@calculatedValue = BigDec2Currency(accCalculatedValue).replace(/^\s+/,'');
		}
	}
}

/**
 * Accumulate cash values.
 * @param XMLCashRptAccumulated - accumulated cash
 * @param XMLCashRpt - cash
 */
function AddXMLIntlCashRpt(XMLCashRptAccumulated, XMLCashRpt)
{
	var NEWMAXTENDER=60;
	var NEWMAXALIQUOTA=20;

	for(iCount=0; iCount<NEWMAXTENDER; iCount++) {
		var cmd = "XMLCashRpt.csh_InitAmount_ttype_" + iCount;
		var testNode = eval(cmd);
		var evaluate;
		if(0!=testNode.length()) {
			cmd = "XMLCashRptAccumulated.csh_InitAmount_ttype_" + iCount + "=(new BigDecimal(XMLCashRptAccumulated.csh_InitAmount_ttype_" + iCount + ").add(new BigDecimal(XMLCashRpt.csh_InitAmount_ttype_" + iCount + "))).setScale(CURRENCY_DECIMAL)";
			evaluate = eval(cmd);
		}
	}

	XMLCashRptAccumulated.csh_OpeningForeverReading			= (new BigDecimal(XMLCashRptAccumulated.csh_OpeningForeverReading			).add(new BigDecimal(XMLCashRpt.csh_OpeningForeverReading))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_CurrentForeverReading			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CurrentForeverReading		)+Number(XMLCashRpt.csh_CurrentForeverReading));
	XMLCashRptAccumulated.csh_TransactionCount				= Number(Number(XMLCashRptAccumulated.csh_TransactionCount					)+Number(XMLCashRpt.csh_TransactionCount));
	XMLCashRptAccumulated.csh_TransactionCountAll			= Number(Number(XMLCashRptAccumulated.csh_TransactionCountAll				)+Number(XMLCashRpt.csh_TransactionCountAll));
	XMLCashRptAccumulated.csh_TransactionCountNP			= Number(Number(XMLCashRptAccumulated.csh_TransactionCountNP				)+Number(XMLCashRpt.csh_TransactionCountNP));
	XMLCashRptAccumulated.csh_OverringQuantity				= Number(Number(XMLCashRptAccumulated.csh_OverringQuantity					)+Number(XMLCashRpt.csh_OverringQuantity));
	XMLCashRptAccumulated.csh_OverringAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OverringAmount					)+Number(XMLCashRpt.csh_OverringAmount));
	XMLCashRptAccumulated.csh_RefundQuantity				= Number(Number(XMLCashRptAccumulated.csh_RefundQuantity					)+Number(XMLCashRpt.csh_RefundQuantity));
	XMLCashRptAccumulated.csh_RefundAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_RefundAmount					)+Number(XMLCashRpt.csh_RefundAmount));
	XMLCashRptAccumulated.csh_RefundTax						= Nmb2Currency(Number(XMLCashRptAccumulated.csh_RefundTax						)+Number(XMLCashRpt.csh_RefundTax));
	XMLCashRptAccumulated.csh_OtherReceiptsQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherReceiptsQuantity				)+Number(XMLCashRpt.csh_OtherReceiptsQuantity));
	XMLCashRptAccumulated.csh_OtherReceiptsAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherReceiptsAmount				)+Number(XMLCashRpt.csh_OtherReceiptsAmount));

	XMLCashRptAccumulated.csh_OverringQuantity_CSO			= Number(Number(XMLCashRptAccumulated.csh_OverringQuantity_CSO				)+Number(XMLCashRpt.csh_OverringQuantity_CSO));
	XMLCashRptAccumulated.csh_OverringAmount_CSO			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OverringAmount_CSO			)+Number(XMLCashRpt.csh_OverringAmount_CSO));
	XMLCashRptAccumulated.csh_TcOverring_CSO				= Number(Number(XMLCashRptAccumulated.csh_TcOverring_CSO					)+Number(XMLCashRpt.csh_TcOverring_CSO));

	//HOT sales
	XMLCashRptAccumulated.csh_TransactionCountAllHOT	= Number(Number(XMLCashRptAccumulated.csh_TransactionCountAllHOT				)+Number(XMLCashRpt.csh_TransactionCountAllHOT));
	XMLCashRptAccumulated.csh_SalesAmountHOT			= Nmb2Currency(Number(Number(XMLCashRptAccumulated.csh_SalesAmountHOT				)+Number(XMLCashRpt.csh_SalesAmountHOT)));
	XMLCashRptAccumulated.csh_SalesNetAmountHOT				= Nmb2Currency(Number(Number(XMLCashRptAccumulated.csh_SalesNetAmountHOT				)+Number(XMLCashRpt.csh_SalesNetAmountHOT)));
	
	/*
	XMLCashRptAccumulated.csh_GCSoldAQuantity				= Number(Number(XMLCashRptAccumulated.csh_GCSoldAQuantity					)+Number(XMLCashRpt.csh_GCSoldAQuantity));
	XMLCashRptAccumulated.csh_GCSoldAAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCSoldAAmount					)+Number(XMLCashRpt.csh_GCSoldAAmount));
	XMLCashRptAccumulated.csh_GCSoldBQuantity				= Number(Number(XMLCashRptAccumulated.csh_GCSoldBQuantity					)+Number(XMLCashRpt.csh_GCSoldBQuantity));
	XMLCashRptAccumulated.csh_GCSoldBAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCSoldBAmount					)+Number(XMLCashRpt.csh_GCSoldBAmount));
	*/
	XMLCashRptAccumulated.csh_ProductSalesTaxAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductSalesTaxAmount			)+Number(XMLCashRpt.csh_ProductSalesTaxAmount));
	XMLCashRptAccumulated.csh_NonProductSalesTaxAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductSalesTaxAmount		)+Number(XMLCashRpt.csh_NonProductSalesTaxAmount));
	XMLCashRptAccumulated.csh_OtherTaxAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherTaxAmount					)+Number(XMLCashRpt.csh_OtherTaxAmount));
	XMLCashRptAccumulated.csh_AllNetSalesAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_AllNetSalesAmount				)+Number(XMLCashRpt.csh_AllNetSalesAmount));
	/*
	XMLCashRptAccumulated.csh_CouponAQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponAQuantity					)+Number(XMLCashRpt.csh_CouponAQuantity));
	XMLCashRptAccumulated.csh_CouponAAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponAAmount					)+Number(XMLCashRpt.csh_CouponAAmount));
	XMLCashRptAccumulated.csh_CouponBQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponBQuantity					)+Number(XMLCashRpt.csh_CouponBQuantity));
	XMLCashRptAccumulated.csh_CouponBAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponBAmount					)+Number(XMLCashRpt.csh_CouponBAmount));
	XMLCashRptAccumulated.csh_CouponCQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponCQuantity					)+Number(XMLCashRpt.csh_CouponCQuantity));
	XMLCashRptAccumulated.csh_CouponCAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponCAmount					)+Number(XMLCashRpt.csh_CouponCAmount));
	XMLCashRptAccumulated.csh_CouponDQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponDQuantity					)+Number(XMLCashRpt.csh_CouponDQuantity));
	XMLCashRptAccumulated.csh_CouponDAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponDAmount					)+Number(XMLCashRpt.csh_CouponDAmount));
	XMLCashRptAccumulated.csh_CouponEQuantity				= Number(Number(XMLCashRptAccumulated.csh_CouponEQuantity					)+Number(XMLCashRpt.csh_CouponEQuantity));
	XMLCashRptAccumulated.csh_CouponEAmount					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CouponEAmount					)+Number(XMLCashRpt.csh_CouponEAmount));
	*/
	XMLCashRptAccumulated.csh_nonWWSCouponAQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponAQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponAQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponAAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponAAmount				)+Number(XMLCashRpt.csh_nonWWSCouponAAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessAQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessAQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessAQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessAAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessAAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessAAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimAQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimAQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimAQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimAAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimAAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimAAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponBQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponBQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponBQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponBAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponBAmount				)+Number(XMLCashRpt.csh_nonWWSCouponBAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessBQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessBQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessBQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessBAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessBAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessBAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimBQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimBQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimBQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimBAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimBAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimBAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponCQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponCQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponCQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponCAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponCAmount				)+Number(XMLCashRpt.csh_nonWWSCouponCAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessCQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessCQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessCQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessCAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessCAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessCAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimCQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimCQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimCQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimCAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimCAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimCAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponDQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponDQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponDQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponDAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponDAmount				)+Number(XMLCashRpt.csh_nonWWSCouponDAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessDQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessDQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessDQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessDAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessDAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessDAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimDQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimDQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimDQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimDAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimDAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimDAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponEQuantity			= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponEQuantity				)+Number(XMLCashRpt.csh_nonWWSCouponEQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponEAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponEAmount				)+Number(XMLCashRpt.csh_nonWWSCouponEAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessEQuantity	= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessEQuantity		)+Number(XMLCashRpt.csh_nonWWSCouponExcessEQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponExcessEAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponExcessEAmount		)+Number(XMLCashRpt.csh_nonWWSCouponExcessEAmount));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimEQuantity		= Number(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimEQuantity			)+Number(XMLCashRpt.csh_nonWWSCouponSkimEQuantity));
	XMLCashRptAccumulated.csh_nonWWSCouponSkimEAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_nonWWSCouponSkimEAmount			)+Number(XMLCashRpt.csh_nonWWSCouponSkimEAmount));
	XMLCashRptAccumulated.csh_DiscountSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_DiscountSalesQuantity				)+Number(XMLCashRpt.csh_DiscountSalesQuantity));
	XMLCashRptAccumulated.csh_DiscountSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DiscountSalesAmount				)+Number(XMLCashRpt.csh_DiscountSalesAmount));
	XMLCashRptAccumulated.csh_DiscountSalesTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DiscountSalesTax				)+Number(XMLCashRpt.csh_DiscountSalesTax));
	XMLCashRptAccumulated.csh_DiscountSalesCouponQuantity	= Number(Number(XMLCashRptAccumulated.csh_DiscountSalesCouponQuantity		)+Number(XMLCashRpt.csh_DiscountSalesCouponQuantity));
	XMLCashRptAccumulated.csh_DiscountSalesCouponAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DiscountSalesCouponAmount		)+Number(XMLCashRpt.csh_DiscountSalesCouponAmount));
	XMLCashRptAccumulated.csh_DiscountSalesCouponTax		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DiscountSalesCouponTax			)+Number(XMLCashRpt.csh_DiscountSalesCouponTax));
	/*
	XMLCashRptAccumulated.csh_GCARedeemQuantity				= Number(Number(XMLCashRptAccumulated.csh_GCARedeemQuantity					)+Number(XMLCashRpt.csh_GCARedeemQuantity));
	XMLCashRptAccumulated.csh_GCARedeemAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCARedeemAmount					)+Number(XMLCashRpt.csh_GCARedeemAmount));
	XMLCashRptAccumulated.csh_GCARedeemExcess				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCARedeemExcess					)+Number(XMLCashRpt.csh_GCARedeemExcess));
	XMLCashRptAccumulated.csh_GCBRedeemQuantity				= Number(Number(XMLCashRptAccumulated.csh_GCBRedeemQuantity					)+Number(XMLCashRpt.csh_GCBRedeemQuantity));
	XMLCashRptAccumulated.csh_GCBRedeemAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCBRedeemAmount					)+Number(XMLCashRpt.csh_GCBRedeemAmount));
	XMLCashRptAccumulated.csh_GCBRedeemExcess				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GCBRedeemExcess					)+Number(XMLCashRpt.csh_GCBRedeemExcess));
	*/
	/*
	XMLCashRptAccumulated.csh_CreditSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_CreditSalesQuantity				)+Number(XMLCashRpt.csh_CreditSalesQuantity));
	XMLCashRptAccumulated.csh_CreditSalesAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_CreditSalesAmount				)+Number(XMLCashRpt.csh_CreditSalesAmount));
	*/
	XMLCashRptAccumulated.csh_NonProductSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductSalesAmount			)+Number(XMLCashRpt.csh_NonProductSalesAmount));
	XMLCashRptAccumulated.csh_NonProductSalesTax			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductSalesTax				)+Number(XMLCashRpt.csh_NonProductSalesTax));
	XMLCashRptAccumulated.csh_NoTaxSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_NoTaxSalesQuantity				)+Number(XMLCashRpt.csh_NoTaxSalesQuantity));
	XMLCashRptAccumulated.csh_GSTAmount						= Nmb2Currency(Number(XMLCashRptAccumulated.csh_GSTAmount						)+Number(XMLCashRpt.csh_GSTAmount));
	XMLCashRptAccumulated.csh_NoTaxSalesAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_NoTaxSalesAmount				)+Number(XMLCashRpt.csh_NoTaxSalesAmount));
	XMLCashRptAccumulated.csh_PromoSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_PromoSalesQuantity				)+Number(XMLCashRpt.csh_PromoSalesQuantity));
	XMLCashRptAccumulated.csh_PromoSalesAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoSalesAmount				)+Number(XMLCashRpt.csh_PromoSalesAmount));
	XMLCashRptAccumulated.csh_PromoSalesTax					= Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoSalesTax					)+Number(XMLCashRpt.csh_PromoSalesTax));

	for(iCount=0; iCount<NEWMAXALIQUOTA; iCount++) {
		var cmd = "XMLCashRpt.csh_PromoTax_" + iCount + ".Quantity";
		var testNode = eval(cmd);
		var evaluate;
		if(0!=testNode.length()) {
			// csh_PromoTax_
			cmd = "XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_PromoTax_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Amount) + Number(XMLCashRpt.csh_PromoTax_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoTax_" + iCount + ".Tax) + Number(XMLCashRpt.csh_PromoTax_" + iCount + ".Tax))";
			evaluate = eval(cmd);
		}
	}

	for(iCount=0; iCount<NEWMAXALIQUOTA; iCount++) {
		var cmd = "XMLCashRpt.csh_EatInSalesBrack_" + iCount + ".Quantity";
		var testNode = eval(cmd);
		var evaluate;
		if(0!=testNode.length()) {
			// csh_EatInSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_TakeOutSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_RefundBrack_
			cmd = "XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_RefundBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_RefundBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_RefundBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_RefundBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OverringBrack_
			cmd = "XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OverringBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OverringBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OverringBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OverringBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_PromoBrack_
			cmd = "XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_PromoBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_PromoBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_PromoBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_PromoBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_WasteBrack_
			cmd = "XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_WasteBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_WasteBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_WasteBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_WasteBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ManagerMealBrack_
			cmd = "XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ManagerMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ManagerMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ManagerMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EmployeeMealBrack_
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EmployeeMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EmployeeMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EmployeeMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EatInProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EatInNonProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInNonProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInNonProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNonProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInNonProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_TakeOutProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_TakeOutNonProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutNonProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutNonProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNonProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutNonProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherNonProductSalesBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherNonProductSalesBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherNonProductSalesBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNonProductSalesBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherNonProductSalesBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ManagerMealTotalBrack_
			cmd = "XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ManagerMealTotalBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ManagerMealTotalBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealTotalBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ManagerMealTotalBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EmployeeMealTotalBrack_
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EmployeeMealTotalBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EmployeeMealTotalBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealTotalBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EmployeeMealTotalBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductPromoBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductPromoBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductPromoBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductPromoBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductPromoBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductPromoBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductPromoBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductPromoBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductPromoBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductPromoBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductEmployeeMealBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductEmployeeMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductEmployeeMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductEmployeeMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductEmployeeMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductEmployeeMealBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductEmployeeMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductEmployeeMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductEmployeeMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductEmployeeMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductManagerMealBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductManagerMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductManagerMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductManagerMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductManagerMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductManagerMealBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductManagerMealBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductManagerMealBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductManagerMealBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductManagerMealBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductRefundBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductRefundBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductRefundBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductRefundBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductRefundBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductRefundBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductRefundBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductRefundBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductRefundBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductRefundBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_ProductOverringBrack_
			cmd = "XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_ProductOverringBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_ProductOverringBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_ProductOverringBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_ProductOverringBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductOverringBrack_
			cmd = "XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_NonProductOverringBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_NonProductOverringBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_NonProductOverringBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_NonProductOverringBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			
			//31.03.2009	OI add Discount Tags for Tax calculation
			// csh_EatInProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_EatInNonProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_EatInNonProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_EatInNonProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNonProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_EatInNonProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_NonProductOverringBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_TakeOutNonProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_TakeOutNonProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
			// csh_OtherNonProductDiscountBrack_
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Quantity=Number(Number(XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Quantity) + Number(XMLCashRpt.csh_OtherNonProductDiscountBrack_" + iCount + ".Quantity))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Amount=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Amount) + Number(XMLCashRpt.csh_OtherNonProductDiscountBrack_" + iCount + ".Amount))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Tax=Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNonProductDiscountBrack_" + iCount + ".Tax) + Number(XMLCashRpt.csh_OtherNonProductDiscountBrack_" + iCount + ".Tax))";
			evaluate = eval(cmd);
		}
	}

	XMLCashRptAccumulated.csh_TcEmpMeal						= Number(Number(XMLCashRptAccumulated.csh_TcEmpMeal						)+ Number(XMLCashRpt.csh_TcEmpMeal));
	XMLCashRptAccumulated.csh_TcMgrMeal						= Number(Number(XMLCashRptAccumulated.csh_TcMgrMeal						)+ Number(XMLCashRpt.csh_TcMgrMeal));
	XMLCashRptAccumulated.csh_TcOverring					= Number(Number(XMLCashRptAccumulated.csh_TcOverring					)+ Number(XMLCashRpt.csh_TcOverring));
	XMLCashRptAccumulated.csh_TcRefund						= Number(Number(XMLCashRptAccumulated.csh_TcRefund						)+ Number(XMLCashRpt.csh_TcRefund));
	XMLCashRptAccumulated.csh_TcOtherReceipt				= Number(Number(XMLCashRptAccumulated.csh_TcOtherReceipt				)+ Number(XMLCashRpt.csh_TcOtherReceipt));
	XMLCashRptAccumulated.csh_TcSkim						= Number(Number(XMLCashRptAccumulated.csh_TcSkim						)+ Number(XMLCashRpt.csh_TcSkim));
	XMLCashRptAccumulated.csh_TcWaste						= Number(Number(XMLCashRptAccumulated.csh_TcWaste						)+ Number(XMLCashRpt.csh_TcWaste));
	XMLCashRptAccumulated.csh_EmployeeMealQuantity			= Number(Number(XMLCashRptAccumulated.csh_EmployeeMealQuantity			)+ Number(XMLCashRpt.csh_EmployeeMealQuantity));
	XMLCashRptAccumulated.csh_EmployeeMealAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealAmount			)+ Number(XMLCashRpt.csh_EmployeeMealAmount));
	XMLCashRptAccumulated.csh_EmployeeMealTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EmployeeMealTax				)+ Number(XMLCashRpt.csh_EmployeeMealTax));
	XMLCashRptAccumulated.csh_ManagerMealQuantity			= Number(Number(XMLCashRptAccumulated.csh_ManagerMealQuantity			)+ Number(XMLCashRpt.csh_ManagerMealQuantity));
	XMLCashRptAccumulated.csh_ManagerMealAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealAmount			)+ Number(XMLCashRpt.csh_ManagerMealAmount));
	XMLCashRptAccumulated.csh_ManagerMealTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ManagerMealTax				)+ Number(XMLCashRpt.csh_ManagerMealTax));
	XMLCashRptAccumulated.csh_TRedsBeforeTotalQuantity		= Number(Number(XMLCashRptAccumulated.csh_TRedsBeforeTotalQuantity		)+ Number(XMLCashRpt.csh_TRedsBeforeTotalQuantity));
	XMLCashRptAccumulated.csh_TRedsBeforeTotalAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TRedsBeforeTotalAmount		)+ Number(XMLCashRpt.csh_TRedsBeforeTotalAmount));
	XMLCashRptAccumulated.csh_TRedsAfterTotalQuantity		= Number(Number(XMLCashRptAccumulated.csh_TRedsAfterTotalQuantity		)+ Number(XMLCashRpt.csh_TRedsAfterTotalQuantity));
	XMLCashRptAccumulated.csh_TRedsAfterTotalAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TRedsAfterTotalAmount		)+ Number(XMLCashRpt.csh_TRedsAfterTotalAmount));
	XMLCashRptAccumulated.csh_TRedsBeforeTotalQuantity_CSO	= Number(Number(XMLCashRptAccumulated.csh_TRedsBeforeTotalQuantity_CSO		)+ Number(XMLCashRpt.csh_TRedsBeforeTotalQuantity_CSO));
	XMLCashRptAccumulated.csh_TRedsBeforeTotalAmount_CSO	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TRedsBeforeTotalAmount_CSO	)+ Number(XMLCashRpt.csh_TRedsBeforeTotalAmount_CSO));
	XMLCashRptAccumulated.csh_TRedsAfterTotalQuantity_CSO	= Number(Number(XMLCashRptAccumulated.csh_TRedsAfterTotalQuantity_CSO		)+ Number(XMLCashRpt.csh_TRedsAfterTotalQuantity_CSO));
	XMLCashRptAccumulated.csh_TRedsAfterTotalAmount_CSO		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TRedsAfterTotalAmount_CSO	)+ Number(XMLCashRpt.csh_TRedsAfterTotalAmount_CSO));
	XMLCashRptAccumulated.csh_EatInNetSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_EatInNetSalesQuantity			)+ Number(XMLCashRpt.csh_EatInNetSalesQuantity));
	XMLCashRptAccumulated.csh_EatInNetSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNetSalesAmount			)+ Number(XMLCashRpt.csh_EatInNetSalesAmount));
	XMLCashRptAccumulated.csh_EatInNetSalesTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNetSalesTax			)+ Number(XMLCashRpt.csh_EatInNetSalesTax));
	XMLCashRptAccumulated.csh_EatInNetSalesDiscQuantity		= Number(Number(XMLCashRptAccumulated.csh_EatInNetSalesDiscQuantity		)+ Number(XMLCashRpt.csh_EatInNetSalesDiscQuantity));
	XMLCashRptAccumulated.csh_EatInNetSalesDiscAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNetSalesDiscAmount		)+ Number(XMLCashRpt.csh_EatInNetSalesDiscAmount));
	XMLCashRptAccumulated.csh_EatInNetSalesDiscTax			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_EatInNetSalesDiscTax		)+ Number(XMLCashRpt.csh_EatInNetSalesDiscTax));
	XMLCashRptAccumulated.csh_TakeOutNetSalesQuantity		= Number(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesQuantity		)+ Number(XMLCashRpt.csh_TakeOutNetSalesQuantity));
	XMLCashRptAccumulated.csh_TakeOutNetSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesAmount		)+ Number(XMLCashRpt.csh_TakeOutNetSalesAmount));
	XMLCashRptAccumulated.csh_TakeOutNetSalesTax			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesTax			)+ Number(XMLCashRpt.csh_TakeOutNetSalesTax));
	XMLCashRptAccumulated.csh_TakeOutNetSalesDiscQuantity	= Number(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesDiscQuantity	)+ Number(XMLCashRpt.csh_TakeOutNetSalesDiscQuantity));
	XMLCashRptAccumulated.csh_TakeOutNetSalesDiscAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesDiscAmount	)+ Number(XMLCashRpt.csh_TakeOutNetSalesDiscAmount));
	XMLCashRptAccumulated.csh_TakeOutNetSalesDiscTax		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TakeOutNetSalesDiscTax		)+ Number(XMLCashRpt.csh_TakeOutNetSalesDiscTax));
	XMLCashRptAccumulated.csh_OtherNetSalesQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherNetSalesQuantity			)+ Number(XMLCashRpt.csh_OtherNetSalesQuantity));
	XMLCashRptAccumulated.csh_OtherNetSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNetSalesAmount			)+ Number(XMLCashRpt.csh_OtherNetSalesAmount));
	XMLCashRptAccumulated.csh_OtherNetSalesTax				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNetSalesTax			)+ Number(XMLCashRpt.csh_OtherNetSalesTax));
	XMLCashRptAccumulated.csh_OtherNetSalesDiscQuantity		= Number(Number(XMLCashRptAccumulated.csh_OtherNetSalesDiscQuantity		)+ Number(XMLCashRpt.csh_OtherNetSalesDiscQuantity));
	XMLCashRptAccumulated.csh_OtherNetSalesDiscAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNetSalesDiscAmount		)+ Number(XMLCashRpt.csh_OtherNetSalesDiscAmount));
	XMLCashRptAccumulated.csh_OtherNetSalesDiscTax			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherNetSalesDiscTax		)+ Number(XMLCashRpt.csh_OtherNetSalesDiscTax));
	XMLCashRptAccumulated.csh_SuggestiveSalesTryQuantity	= Number(Number(XMLCashRptAccumulated.csh_SuggestiveSalesTryQuantity	)+ Number(XMLCashRpt.csh_SuggestiveSalesTryQuantity));
	XMLCashRptAccumulated.csh_SuggestiveSalesQuantity		= Number(Number(XMLCashRptAccumulated.csh_SuggestiveSalesQuantity		)+ Number(XMLCashRpt.csh_SuggestiveSalesQuantity));
	
	XMLCashRptAccumulated.csh_SuggestiveSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_SuggestiveSalesAmount		)+ Number(XMLCashRpt.csh_SuggestiveSalesAmount));
	/*
	XMLCashRptAccumulated.csh_ForeignCurrencyAAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyAAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyAAmount));
	XMLCashRptAccumulated.csh_ForeignCurrencyBAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyBAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyBAmount));
	XMLCashRptAccumulated.csh_ForeignCurrencyCAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyCAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyCAmount));
	XMLCashRptAccumulated.csh_ForeignCurrencyDAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyDAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyDAmount));
	XMLCashRptAccumulated.csh_ForeignCurrencyEAmount		= Nmb2Currency(Number(XMLCashRptAccumulated.csh_ForeignCurrencyEAmount		)+ Number(XMLCashRpt.csh_ForeignCurrencyEAmount));
	*/
	XMLCashRptAccumulated.csh_DTTransactionCount			= Number(Number(XMLCashRptAccumulated.csh_DTTransactionCount			)+ Number(XMLCashRpt.csh_DTTransactionCount));
	XMLCashRptAccumulated.csh_DTTransactionCountNP			= Number(Number(XMLCashRptAccumulated.csh_DTTransactionCountNP			)+ Number(XMLCashRpt.csh_DTTransactionCountNP));
	XMLCashRptAccumulated.csh_DTTransactionCountAll			= Number(Number(XMLCashRptAccumulated.csh_DTTransactionCountAll			)+ Number(XMLCashRpt.csh_DTTransactionCountAll));
	XMLCashRptAccumulated.csh_DTAllNetProductSalesAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DTAllNetProductSalesAmount	)+ Number(XMLCashRpt.csh_DTAllNetProductSalesAmount));
	XMLCashRptAccumulated.csh_DTAllTaxProductSalesAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_DTAllTaxProductSalesAmount	)+ Number(XMLCashRpt.csh_DTAllTaxProductSalesAmount));
	XMLCashRptAccumulated.csh_TotalSkimAmount				= Nmb2Currency(Number(XMLCashRptAccumulated.csh_TotalSkimAmount				)+ Number(XMLCashRpt.csh_TotalSkimAmount));
	XMLCashRptAccumulated.csh_OfflineSalesDayCloseAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OfflineSalesDayCloseAmount	)+ Number(XMLCashRpt.csh_OfflineSalesDayCloseAmount));
	XMLCashRptAccumulated.csh_OffLineSalesMonthCloseAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OffLineSalesMonthCloseAmount)+ Number(XMLCashRpt.csh_OffLineSalesMonthCloseAmount));
	/*
	XMLCashRptAccumulated.csh_OtherPaymentAQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentAQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentAQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentAAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentAAmount			)+ Number(XMLCashRpt.csh_OtherPaymentAAmount));
	XMLCashRptAccumulated.csh_OtherPaymentAExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentAExcess			)+ Number(XMLCashRpt.csh_OtherPaymentAExcess));
	XMLCashRptAccumulated.csh_OtherPaymentBQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentBQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentBQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentBAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentBAmount			)+ Number(XMLCashRpt.csh_OtherPaymentBAmount));
	XMLCashRptAccumulated.csh_OtherPaymentBExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentBExcess			)+ Number(XMLCashRpt.csh_OtherPaymentBExcess));
	XMLCashRptAccumulated.csh_OtherPaymentCQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentCQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentCQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentCAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentCAmount			)+ Number(XMLCashRpt.csh_OtherPaymentCAmount));
	XMLCashRptAccumulated.csh_OtherPaymentCExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentCExcess			)+ Number(XMLCashRpt.csh_OtherPaymentCExcess));
	XMLCashRptAccumulated.csh_OtherPaymentDQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentDQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentDQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentDAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentDAmount			)+ Number(XMLCashRpt.csh_OtherPaymentDAmount));
	XMLCashRptAccumulated.csh_OtherPaymentDExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentDExcess			)+ Number(XMLCashRpt.csh_OtherPaymentDExcess));
	XMLCashRptAccumulated.csh_OtherPaymentEQuantity			= Number(Number(XMLCashRptAccumulated.csh_OtherPaymentEQuantity			)+ Number(XMLCashRpt.csh_OtherPaymentEQuantity));
	XMLCashRptAccumulated.csh_OtherPaymentEAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentEAmount			)+ Number(XMLCashRpt.csh_OtherPaymentEAmount));
	XMLCashRptAccumulated.csh_OtherPaymentEExcess			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_OtherPaymentEExcess			)+ Number(XMLCashRpt.csh_OtherPaymentEExcess));
	*/
	XMLCashRptAccumulated.csh_WTTransactionCount			= Number(Number(XMLCashRptAccumulated.csh_WTTransactionCount			)+ Number(XMLCashRpt.csh_WTTransactionCount));
	XMLCashRptAccumulated.csh_WTTransactionCountNP			= Number(Number(XMLCashRptAccumulated.csh_WTTransactionCountNP			)+ Number(XMLCashRpt.csh_WTTransactionCountNP));
	XMLCashRptAccumulated.csh_WTTransactionCountAll			= Number(Number(XMLCashRptAccumulated.csh_WTTransactionCountAll			)+ Number(XMLCashRpt.csh_WTTransactionCountAll));
	XMLCashRptAccumulated.csh_WTAllNetProductSalesAmount	= Nmb2Currency(Number(XMLCashRptAccumulated.csh_WTAllNetProductSalesAmount	)+ Number(XMLCashRpt.csh_WTAllNetProductSalesAmount));
	XMLCashRptAccumulated.csh_BreakfastSalesaQuantity		= Number(Number(XMLCashRptAccumulated.csh_BreakfastSalesaQuantity		)+ Number(XMLCashRpt.csh_BreakfastSalesaQuantity));
	XMLCashRptAccumulated.csh_BreakfastSalesAmount			= Nmb2Currency(Number(XMLCashRptAccumulated.csh_BreakfastSalesAmount		)+ Number(XMLCashRpt.csh_BreakfastSalesAmount));

	/*add total amount and tc for tenders*/
	XMLCashRptAccumulated.csh_GiftCouponSalesTc	= Number(XMLCashRptAccumulated.csh_GiftCouponSalesTc)+Number(XMLCashRpt.csh_GiftCouponSalesTc);
	XMLCashRptAccumulated.csh_GiftCouponSalesAmount	= (new BigDecimal(XMLCashRptAccumulated.csh_GiftCouponSalesAmount).add(new BigDecimal(XMLCashRpt.csh_GiftCouponSalesAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_GiftCouponSalesExcess	= (new BigDecimal(XMLCashRptAccumulated.csh_GiftCouponSalesExcess).add(new BigDecimal(XMLCashRpt.csh_GiftCouponSalesExcess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.csh_GiftCertificateSalesTc= Number(XMLCashRptAccumulated.csh_GiftCertificateSalesTc	)+Number(XMLCashRpt.csh_GiftCertificateSalesTc);
	XMLCashRptAccumulated.csh_GiftCertificateSalesAmount= (new BigDecimal(XMLCashRptAccumulated.csh_GiftCertificateSalesAmount).add(new BigDecimal(XMLCashRpt.csh_GiftCertificateSalesAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_GiftCertificateSalesExcess= (new BigDecimal(XMLCashRptAccumulated.csh_GiftCertificateSalesExcess).add(new BigDecimal(XMLCashRpt.csh_GiftCertificateSalesExcess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.csh_GiftCardSalesTc	= Number(XMLCashRptAccumulated.csh_GiftCardSalesTc)+Number(XMLCashRpt.csh_GiftCardSalesTc);
	XMLCashRptAccumulated.csh_GiftCardSalesAmount	=  (new BigDecimal(XMLCashRptAccumulated.csh_GiftCardSalesAmount).add(new BigDecimal(XMLCashRpt.csh_GiftCardSalesAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_GiftCardSalesExcess	=  (new BigDecimal(XMLCashRptAccumulated.csh_GiftCardSalesExcess).add(new BigDecimal(XMLCashRpt.csh_GiftCardSalesExcess))).setScale(CURRENCY_DECIMAL);
	
	XMLCashRptAccumulated.csh_OtherPaymentSalesTc= Number(XMLCashRptAccumulated.csh_OtherPaymentSalesTc)+Number(XMLCashRpt.csh_OtherPaymentSalesTc);
	XMLCashRptAccumulated.csh_OtherPaymentSalesAmount	= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPaymentSalesAmount).add(new BigDecimal(XMLCashRpt.csh_OtherPaymentSalesAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_OtherPaymentSalesExcess	= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPaymentSalesExcess).add(new BigDecimal(XMLCashRpt.csh_OtherPaymentSalesExcess))).setScale(CURRENCY_DECIMAL);
	//add tags for every tender, the names will based on tender category
	//native tender
	XMLCashRptAccumulated.csh_NativeCurrencyQuantity= Number(XMLCashRptAccumulated.csh_NativeCurrencyQuantity) + Number(XMLCashRpt.csh_NativeCurrencyQuantity);
	XMLCashRptAccumulated.csh_NativeCurrencyAmount= (new BigDecimal(XMLCashRptAccumulated.csh_NativeCurrencyAmount).add(new BigDecimal(XMLCashRpt.csh_NativeCurrencyAmount))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_NativeCurrencyExcess= (new BigDecimal(XMLCashRptAccumulated.csh_NativeCurrencyExcess).add(new BigDecimal(XMLCashRpt.csh_NativeCurrencyExcess))).setScale(CURRENCY_DECIMAL);
	XMLCashRptAccumulated.csh_NativeCurrencyChange= (new BigDecimal(XMLCashRptAccumulated.csh_NativeCurrencyChange).add(new BigDecimal(XMLCashRpt.csh_NativeCurrencyChange))).setScale(CURRENCY_DECIMAL);
	
	for(i=1; i< Number(XMLCashRpt.csh_TenderElectronicPayment); i++)
	{
		API.dbg("Electronic Tender intl "+XMLCashRpt.csh_TenderElectronicPayment);
		var cmd = "XMLCashRptAccumulated.csh_CashlessPayment"+i+"Quantity= Number(XMLCashRptAccumulated.csh_CashlessPayment"+i+"Quantity) + Number(XMLCashRpt.csh_CashlessPayment"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CashlessPayment"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_CashlessPayment"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_CashlessPayment"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CashlessPayment"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_CashlessPayment"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_CashlessPayment"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CashlessPayment"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_CashlessPayment"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_CashlessPayment"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderCouponNo); i++)
	{
		API.dbg("Coupon intl "+XMLCashRpt.csh_TenderCouponNo);
		var cmd = "XMLCashRptAccumulated.csh_Coupon"+i+"Quantity= Number(XMLCashRptAccumulated.csh_Coupon"+i+"Quantity) + Number(XMLCashRpt.csh_Coupon"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_Coupon"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_Coupon"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_Coupon"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_Coupon"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_Coupon"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_Coupon"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_Coupon"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_Coupon"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_Coupon"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderForeignCurrencyNo); i++)
	{
		API.dbg("csh_TenderForeignCurrencyNo intl "+XMLCashRpt.csh_TenderForeignCurrencyNo);
		var cmd = "XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Quantity= Number(XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Quantity) + Number(XMLCashRpt.csh_ForeignCurrency"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_ForeignCurrency"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_ForeignCurrency"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_ForeignCurrency"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_ForeignCurrency"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderCreditSaleNo); i++)
	{
		API.dbg("csh_.csh_TenderCreditSaleNo intl "+XMLCashRpt.csh_TenderCreditSaleNo);
		var cmd = "XMLCashRptAccumulated.csh_CreditSale"+i+"Quantity= Number(XMLCashRptAccumulated.csh_CreditSale"+i+"Quantity) + Number(XMLCashRpt.csh_CreditSale"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CreditSale"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_CreditSale"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_CreditSale"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CreditSale"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_CreditSale"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_CreditSale"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_CreditSale"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_CreditSale"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_CreditSale"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_TenderOtherPaymentNo); i++)
	{
		API.dbg("csh_TenderOtherPaymentNo intl "+XMLCashRpt.csh_TenderOtherPaymentNo);
		var cmd = "XMLCashRptAccumulated.csh_OtherPayment"+i+"Quantity= Number(XMLCashRptAccumulated.csh_OtherPayment"+i+"Quantity) + Number(XMLCashRpt.csh_OtherPayment"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_OtherPayment"+i+"Amount= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPayment"+i+"Amount).add(new BigDecimal(XMLCashRpt.csh_OtherPayment"+i+"Amount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_OtherPayment"+i+"Excess= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPayment"+i+"Excess).add(new BigDecimal(XMLCashRpt.csh_OtherPayment"+i+"Excess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_OtherPayment"+i+"Change= (new BigDecimal(XMLCashRptAccumulated.csh_OtherPayment"+i+"Change).add(new BigDecimal(XMLCashRpt.csh_OtherPayment"+i+"Change))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_GCertRedeemNo); i++)
	{
		API.dbg("csh_GCertRedeemNo intl "+XMLCashRpt.csh_GCertRedeemNo);
		var cmd = "XMLCashRptAccumulated.csh_GC"+i+"RedeemQuantity= Number(XMLCashRptAccumulated.csh_GC"+i+"RedeemQuantity) + Number(XMLCashRpt.csh_GC"+i+"RedeemQuantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GC"+i+"RedeemAmount= (new BigDecimal(XMLCashRptAccumulated.csh_GC"+i+"RedeemAmount).add(new BigDecimal(XMLCashRpt.csh_GC"+i+"RedeemAmount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GC"+i+"RedeemExcess= (new BigDecimal(XMLCashRptAccumulated.csh_GC"+i+"RedeemExcess).add(new BigDecimal(XMLCashRpt.csh_GC"+i+"RedeemExcess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GC"+i+"RedeemChange= (new BigDecimal(XMLCashRptAccumulated.csh_GC"+i+"RedeemChange).add(new BigDecimal(XMLCashRpt.csh_GC"+i+"RedeemChange))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	for(i=1; i< Number(XMLCashRpt.csh_GCardRedeemNo); i++)
	{
		API.dbg("XMLCashRpt.csh_GCardRedeemNo intl"+XMLCashRpt.csh_GCardRedeemNo);
		var cmd = "XMLCashRptAccumulated.csh_GCard"+i+"RedeemQuantity= Number(XMLCashRptAccumulated.csh_GCard"+i+"RedeemQuantity) + Number(XMLCashRpt.csh_GCard"+i+"RedeemQuantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GCard"+i+"RedeemAmount= (new BigDecimal(XMLCashRptAccumulated.csh_GCard"+i+"RedeemAmount).add(new BigDecimal(XMLCashRpt.csh_GCard"+i+"RedeemAmount))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GCard"+i+"RedeemExcess= (new BigDecimal(XMLCashRptAccumulated.csh_GCard"+i+"RedeemExcess).add(new BigDecimal(XMLCashRpt.csh_GCard"+i+"RedeemExcess))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GCard"+i+"RedeemChange= (new BigDecimal(XMLCashRptAccumulated.csh_GCard"+i+"RedeemChange).add(new BigDecimal(XMLCashRpt.csh_GCard"+i+"RedeemChange))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
	}
	//add tags for gift card and gift cert sold
	for(i=1; i<= Number(XMLCashRpt.csh_GCertSoldNo); i++)
	{
		API.dbg("csh_GCertSoldNo intl "+XMLCashRpt.csh_GCertSoldNo);
		var cmd = "XMLCashRptAccumulated.csh_GiftCert"+i+"ProductId = XMLCashRpt.csh_GiftCert"+i+"ProductId";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GiftCert"+i+"Quantity = Number(XMLCashRptAccumulated.csh_GiftCert"+i+"Quantity) + Number(XMLCashRpt.csh_GiftCert"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GiftCert"+i+"Sold =(new BigDecimal(XMLCashRptAccumulated.csh_GiftCert"+i+"Sold).add(new BigDecimal(XMLCashRpt.csh_GiftCert"+i+"Sold))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		//var cmd = "XMLCashRpt.GiftCert"+i+"refundQuantity =Number(XMLCashRptAccumulated.GiftCert"+j+"refundQuantity) + Number(XMLCashRpt.GiftCert"+j+"refundQuantity)";
		//eval(cmd);
		//var cmd = "XMLCashRpt.GiftCert"+j+"refundAmount =(new BigDecimal(XMLCashRptAccumulated.GiftCert"+i+"refundAmount).add(new BigDecimal(XMLCashRpt.GiftCert"+i+"refundAmount))).setScale(CURRENCY_DECIMAL)";
		//eval(cmd);
	}
	//gift card sold
	for(i=1; i<= Number(XMLCashRpt.csh_GCSoldNo); i++)
	{
		API.dbg("csh_GCSoldNo intl "+XMLCashRpt.csh_GCSoldNo);
		var cmd = "XMLCashRptAccumulated.csh_GiftCard"+i+"ProductId = XMLCashRpt.csh_GiftCard"+i+"ProductId";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GiftCard"+i+"Quantity = Number(XMLCashRptAccumulated.csh_GiftCard"+i+"Quantity) + Number(XMLCashRpt.csh_GiftCard"+i+"Quantity)";
		eval(cmd);
		var cmd = "XMLCashRptAccumulated.csh_GiftCard"+i+"Sold =(new BigDecimal(XMLCashRptAccumulated.csh_GiftCard"+i+"Sold).add(new BigDecimal(XMLCashRpt.csh_GiftCard"+i+"Sold))).setScale(CURRENCY_DECIMAL)";
		eval(cmd);
		//var cmd = "XMLCashRpt.GiftCard"+i+"refundQuantity =Number(XMLCashRptAccumulated.GiftCard"+j+"refundQuantity) + Number(XMLCashRpt.GiftCard"+j+"refundQuantity)";
		//eval(cmd);
		//var cmd = "XMLCashRpt.GiftCert"+j+"Sold.@refundAmount =(new BigDecimal(XMLCashRptAccumulated.GiftCert"+i+"Sold.@refundAmount).add(new BigDecimal(XMLCashRpt.GiftCert"+i+"Sold.@refundAmount))).setScale(CURRENCY_DECIMAL)";
		//eval(cmd);
	}
	
	
	for(iCount=1; iCount<=30; iCount++) {
		var taxIdFmt = API.formatNumber(Number(iCount), "00", 2);
		var cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt;
		var testNode = eval(cmd);
		var evaluate;
		if(0!=testNode.length()) {
			cmd = "XMLCashRptAccumulated.csh_TaxType" + taxIdFmt + "=Number(XMLCashRpt.csh_TaxType" + taxIdFmt + ")";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TaxRate" + taxIdFmt + "=Str2Currency(XMLCashRpt.csh_TaxRate" + taxIdFmt + ")";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_TaxBasis" + taxIdFmt + "=Nmb2Currency(Number(XMLCashRptAccumulated.csh_TaxBasis" + taxIdFmt + ") + Number(XMLCashRpt.csh_TaxBasis" + taxIdFmt + "))";
			evaluate = eval(cmd);
			cmd = "XMLCashRptAccumulated.csh_Tax" + taxIdFmt + "=Nmb2Currency(Number(XMLCashRptAccumulated.csh_Tax" + taxIdFmt + ") + Number(XMLCashRpt.csh_Tax" + taxIdFmt + "))";
			evaluate = eval(cmd);
		}
	}

	//06.02.2009 oi we need a tender overview
	//<csh_Tender>
	//	<csh_TenderName>TENDER_NATIVE</csh_TenderName>
	//	<csh_TenderId>0</csh_TenderId>
	//	<csh_TenderAmount>37.96</csh_TenderAmount>
	//	<csh_TenderQty>20</csh_TenderQty>
	//<csh_TenderRefundAmount>20.4</csh_TenderRefundAmounty>
	//<csh_TenderRefundQtyy>2</csh_TenderRefundQty>

	//</csh_Tender>
	var i = 0;
	var j = 0;
	for(i=0; i<XMLCashRpt.csh_Tender.length(); i++)
	{
		var x = "0";
		for(j=0; j<XMLCashRptAccumulated.csh_Tender.length(); j++)
		{
			if(Number(XMLCashRptAccumulated.csh_Tender[j].csh_TenderId)  == Number(XMLCashRpt.csh_Tender[i].csh_TenderId))
			{
				x = "1";
				XMLCashRptAccumulated.csh_Tender[j].csh_TenderAmount = new BigDecimal(XMLCashRptAccumulated.csh_Tender[j].csh_TenderAmount).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderAmount)).setScale(CURRENCY_DECIMAL);
				XMLCashRptAccumulated.csh_Tender[j].csh_TenderQty = new BigDecimal(XMLCashRptAccumulated.csh_Tender[j].csh_TenderQt).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderQty)).setScale(CURRENCY_DECIMAL);
				
				//MS 21.01.2011 -enable refund information per tender
				XMLCashRptAccumulated.csh_Tender[j].csh_TenderRefundAmount = new BigDecimal(XMLCashRptAccumulated.csh_Tender[j].csh_TenderRefundAmount).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundAmount)).setScale(CURRENCY_DECIMAL);
				XMLCashRptAccumulated.csh_Tender[j].csh_TenderRefundQty = new BigDecimal(XMLCashRptAccumulated.csh_Tender[j].csh_TenderRefundQty).add(new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundQty)).setScale(CURRENCY_DECIMAL);;
		
				break;
			}
		}

		if(x == "0")
		{
			var tenderTag = <csh_Tender/>;
			tenderTag.csh_TenderName = XMLCashRpt.csh_Tender[i].csh_TenderName.toString();
			tenderTag.csh_TenderId = XMLCashRpt.csh_Tender[i].csh_TenderId.toString();
			tenderTag.csh_TenderCategory = XMLCashRpt.csh_Tender[i].csh_TenderCategory.toString();
			tenderTag.csh_TenderAmount = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderAmount).setScale(CURRENCY_DECIMAL);
			tenderTag.csh_TenderQty = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderQty).setScale(CURRENCY_DECIMAL);
			
			tenderTag.csh_TenderAmount = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderAmount).setScale(CURRENCY_DECIMAL);
			tenderTag.csh_TenderQty = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderQty).setScale(CURRENCY_DECIMAL);
			
			//MS 21.01.2011 -enable refund information per tender
			tenderTag.csh_TenderRefundAmount = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundAmount).setScale(CURRENCY_DECIMAL);
			tenderTag.csh_TenderRefundQty = new BigDecimal(XMLCashRpt.csh_Tender[i].csh_TenderRefundQty).setScale(CURRENCY_DECIMAL);
			
			XMLCashRptAccumulated.appendChild(tenderTag);
		}
	}
}

function AddXMLIntlUseTax(XMLCashRptAccumulated, XMLCashRpt) {
	if (XMLCashRptAccumulated == null || XMLCashRptAccumulated.csh_UseTax == null || XMLCashRpt == null || XMLCashRpt.csh_UseTax == null) {
		return;
	}

	var nodesUseTaxSize = XMLCashRpt.csh_UseTax.length();
	if (nodesUseTaxSize == 0) {
		return;
	}

	for (var i = 0; i < nodesUseTaxSize; i++) {
		var addTax = XMLCashRpt.csh_UseTax[i];
		
		var existingTax = XMLCashRptAccumulated.csh_UseTax.(csh_UseTaxId == addTax.csh_UseTaxId);
		if (existingTax.length() == 0) {
			XMLCashRptAccumulated.appendChild(addTax);
		}
		else {
			var accBaseValue = new BigDecimal(existingTax.csh_UseTaxBaseValue);
			var accCalculatedValue = new BigDecimal(existingTax.csh_UseTaxCalculatedValue);

			var addBaseValue = new BigDecimal(addTax.csh_UseTaxBaseValue);
			var addCalculatedValue = new BigDecimal(addTax.csh_UseTaxCalculatedValue);
			
			accBaseValue = accBaseValue.add(addBaseValue);
			accCalculatedValue = accCalculatedValue.add(addCalculatedValue);
			
			existingTax.csh_UseTaxBaseValue = BigDec2Currency(accBaseValue).replace(/^\s+/,'');
			existingTax.csh_UseTaxCalculatedValue = BigDec2Currency(accCalculatedValue).replace(/^\s+/,'');
		}
	}
}

/**
 * Initialize tax chain values.
 * @param taxTableSize
 * @param tagName
 */
function InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, tagName)
{
	for(var iCount=0; iCount<taxTableSize; iCount ++) {
		var cmd;
		var evaluate;
		var taxRateId = Number(taxTable[iCount].TaxRateId);

		cmd = "XMLCashRpt." + tagName + taxRateId + ".Quantity="+Number(0);
		evaluate = eval(cmd);

		cmd = "XMLCashRpt." + tagName + taxRateId + ".Amount="+Nmb2Currency(0);
		evaluate = eval(cmd);

		cmd = "XMLCashRpt." + tagName + taxRateId + ".Tax="+Nmb2Currency(0);
		evaluate = eval(cmd);
	}
}

/**
 * PUBLIC
 * formatBOIUpload
 * @brief:	Formats a upload data to ISP DLL interface. Receives a XML with Way Station
 *			format and translate it into a XML suitable to ISPDLL. 
 *			It is not necessary to worry about the POS id (POS specific or SW)
 *			because it has already been considered during report generation.
 * @param: config - Configuration XML. The tag CustomData contains the command code
 * @param: data - The XML from Way Station
 * @signature public java.lang.StringBuffer formatBOIUpload(java.lang.StringBuffer config, java.lang.StringBuffer []data);
 */
function formatBOIUpload(config, data) {

//API.dbg(config);

	executeFunctionInScript("reports.nps", "initXMLCashReport", true);
	WS_init(config, data);

//API.dbg(rootCash);
//API.dbg(rootPmix);
//API.dbg(rootSOS);

//API.dbg("===BOICommand:"+BOICommand);

	switch(BOICommand) {
		case "0x26": // Quarter Hour Summary (Sales) 
			var XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, null, 12);
			var resp=<methodresponse/>;

			resp.params.param.NetSales=Currency(XMLCashRpt.TOTALNETSALES.@value);
			resp.params.param.NonProductSales=Currency(XMLCashRpt.NonProductSales.@value);
			resp.params.param.TransactionCount=Number(XMLCashRpt.TotalTCAC.@tc);
			resp.params.param.DTProductNetSales=Currency(XMLCashRpt.NetsalesDThru.@amount);
			resp.params.param.DTTransactionCount=Number(XMLCashRpt.NetsalesDThru.@tc);

			WS_addLine(WSBOI_HEADER+resp);
		break;

		case "0x25": // Cash XML translation
			var CurrentForeverReading=0;
			var allClosed=true;
			var XMLCashRpt;
			var iseBOS = false;//NVS-8822
			var returnDalesData = xmlPosDB.Configuration.(@imports == "Store.wide").Section.(@name == "OperationMode").Parameter.(@name == "returnRequestedDateSalesData").@value;
			if ((returnDalesData != null) && (returnDalesData != undefined) && (returnDalesData != "")){
				iseBOS = returnDalesData;
			}
			var errorMessage = {
				code: "1",
				message: "POS not open or no data found for business date: "
			};
//API.dbg("POSID["+posId+"]\n");
			if(posId==0x4b) {
				//POS specific
				//generateCash(rootCash,rootPmix,rootCash.TenderTable,null,false);

				// check if store is closed (all POS closed)
				// NPS-11451
				var openDate=rootCash.@openingDate.toString();
				var closeDate=rootCash.@closingDate.toString();
				if((0==closeDate.length)&&(openDate.length>0)) {
					allClosed=false;
				}
				if(true==allClosed && iseBOS == false) {//NVS-8822, store wide, store is closed and is ISP
					CurrentForeverReading=WS_summUniqueNodesAttributeValues(rootCash.POS, "finalGT");
					XMLCashRpt = new XML("<XMLCashRpt/>");
					AddXMLCashRpt(XMLCashRpt, XMLCashRpt);
					XMLCashRpt.Openingreading.@value=trim(API.formatNumber(Number(CurrentForeverReading),".00",50));
					XMLCashRpt.Closereading.@value=trim(API.formatNumber(Number(CurrentForeverReading),".00",50));
				}
				else {//NVS-8822, store wide, store is open or eBOS
					//var XMLCashRpt = XMLCashReport(rootCash, rootCash, 12);
					XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, null, 12);
					//WS_addLine(XMLCashRpt);
				}
				
				// Indicate whether ForeverReading is reliable for all nodes.
				var auxDataForAllNodesAvailable = WS_operatorAndNodesAttributeValues(rootCash.POS, "dataForNodeAvailable");
				XMLCashRpt.DataForAllNodesAvailable.@value = ""+auxDataForAllNodesAvailable;
				
				if (iseBOS == true){//NVS-8822, only add to response if eBOS
					if (auxDataForAllNodesAvailable.toString() == "false"){
						XMLCashRpt.error.@code=errorMessage.code;
						XMLCashRpt.error.@message=errorMessage.message + rootCash.@requestDate.toString();	
					}
				}
				/* add uberEats to billable sales UberEats NVS-6999 - msilva - UberEats Integration  */ 
				XMLCashRpt.BillableSales.@tc = Number(XMLCashRpt.BillableSales.@tc) + Number(XMLCashRpt.deliveryBillableSale.@tc);
				XMLCashRpt.BillableSales.@amount =trim(API.formatNumber(Number(XMLCashRpt.BillableSales.@amount) + Number(XMLCashRpt.deliveryBillableSale.@amount),".00",50));

				WS_addLine(WSBOI_HEADER);
				WS_addLine("<methodresponse><params>");
				WS_addLine(XMLCashRpt);
				WS_addLine("</params></methodresponse>");
			}
			else {
				var	foundPOS=false;
				var XMLCashRptAccumulated;

				XMLCashRptAccumulated = new XML("<XMLCashRpt/>");

				for each (var item in rootCash.POS) {
//API.dbg("ID["+item.@id+"]\n");
//API.dbg("POD["+item.@podShort+"]\n");
					if(((Number(posId)==Number(item.@id)) && (0x49!=posId) && (0x4A!=posId) ) ||
						((posId==0x49)&&(item.@podShort=="FC")) ||
						((posId==0x4A)&&(item.@podShort=="DT"))) {
						// find the PMIX data for the respective POS Id
						//var itemPmix=rootPmix.POS.(@id==item.@id);
//API.dbg("Pmix ID["+itemPmix.@id+"]\n");
						//generateCash(item,rootPmix,rootCash.TenderTable,null,false);

						// parse 'data' again if necessary
						if((null==rootConfig)||(null==rootCash)||(null==rootPmix)) {
							WS_init(config, data);
						}

						if(item.@status=="CLOSED" && iseBOS == false) {//NVS-8822, single POS, store is closed and ISP
							CurrentForeverReading=item.@finalGT;
							XMLCashRpt = new XML("<XMLCashRpt/>");
							AddXMLCashRpt(XMLCashRptAccumulated, XMLCashRpt);
							XMLCashRptAccumulated.Openingreading.@value=trim(API.formatNumber(Number(CurrentForeverReading),".00",50));
							XMLCashRptAccumulated.Closereading.@value=trim(API.formatNumber(Number(CurrentForeverReading),".00",50));

							// TODO: it must accumulate the readings when groupping for FC and DT
							// but it must disconsider duplication due to POD type change
							//XMLCashRptAccumulated.Openingreading.@value=Number(XMLCashRptAccumulated.Openingreading.@value)+Number(CurrentForeverReading);
							//XMLCashRptAccumulated.Closereading.@value=Number(XMLCashRptAccumulated.Closereading.@value)+Number(CurrentForeverReading);
						}
						else {//NVS-8822, single POS, store is open or eBOS
							//var XMLCashRpt = XMLCashReport(rootCash, item, 12);
							XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, item, 12);
							//WS_addLine(XMLCashRpt);
							XMLCashRptAccumulated.Openingreading.@value=trim(API.formatNumber(Number(item.@initialGT),".00",50));
							XMLCashRptAccumulated.Closereading.@value=trim(API.formatNumber(Number(item.@finalGT),".00",50));

							// TODO: it must accumulate the readings when groupping for FC and DT
							// but it must disconsider duplication due to POD type change
							//XMLCashRptAccumulated.Openingreading.@value=Number(XMLCashRptAccumulated.Openingreading.@value)+Number(item.@initialGT);
							//XMLCashRptAccumulated.Closereading.@value=Number(XMLCashRptAccumulated.Closereading.@value)+Number(item.@finalGT);
						}
						if(XMLCashRpt!=null) {
							AddXMLCashRpt(XMLCashRptAccumulated, XMLCashRpt);
							AddXMLUseTaxRpt(XMLCashRptAccumulated, XMLCashRpt);
						}
						foundPOS=true;
					}
				}
				if(true==foundPOS) {
					
					var auxDataForAllNodesAvailable = WS_operatorAndNodesAttributeValues(rootCash.POS, "dataForNodeAvailable");
					XMLCashRptAccumulated.DataForAllNodesAvailable.@value = ""+auxDataForAllNodesAvailable;
					
					if(iseBOS == true){//NVS-8822, only add to response if eBOS
						if (auxDataForAllNodesAvailable.toString() == "false"){
							XMLCashRptAccumulated.error.@code=errorMessage.code;
							XMLCashRptAccumulated.error.@message=errorMessage.message + rootCash.@requestDate.toString();	
						}
					}
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<methodresponse><params>");
					WS_addLine(XMLCashRptAccumulated);
					WS_addLine("</params></methodresponse>");
				}
				else {
					// POS not found in cash report - generate a zeroed cash
					//generateCash(null,rootPmix,rootCash.TenderTable,null,false);

					// generates a zeroed value structure

					//var XMLCashRpt = XMLCashReport(rootCash, rootCash, -1);
					XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, null, -1);
/*
					XMLCashRpt = new XML("<XMLCashRpt/>");
					AddXMLCashRpt(XMLCashRpt, XMLCashRpt);
					XMLCashRpt.Openingreading.@value=Number(0);
					XMLCashRpt.Closereading.@value=Number(0);
*/
					
					var auxDataForAllNodesAvailable = WS_operatorAndNodesAttributeValues(rootCash.POS, "dataForNodeAvailable");
					XMLCashRpt.DataForAllNodesAvailable.@value = ""+auxDataForAllNodesAvailable;

					if(iseBOS == true){//NVS-8822, only add to response if eBOS
						if (auxDataForAllNodesAvailable.toString() == "false"){
							XMLCashRpt.error.@code=errorMessage.code;
							XMLCashRpt.error.@message=errorMessage.message + rootCash.@requestDate.toString();	
						}
					}
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<methodresponse><params>");
					WS_addLine(XMLCashRpt);
					WS_addLine("</params></methodresponse>");
				}
			}
		break;
		
		case "0x27": // International Cash XML translation
			rptCashConsolidated=41;		// RPTINTCASHCONSOLIDATED
			var CurrentForeverReading=0;
			var allClosed=true;
			var XMLCashRpt;

			if(posId==0x4b) {
				//POS specific
				// NPS-11451
				var openDate=rootCash.@openingDate.toString();
				var closeDate=rootCash.@closingDate.toString();
				if((0==closeDate.length)&&(openDate.length>0)) {
					allClosed=false;
				}

				if((true==allClosed) && (businessDate<=rootCash.@requestDate)) {
					API.dbg("teste");
					CurrentForeverReading=WS_summUniqueNodesAttributeValues(rootCash.POS, "finalGT");
					
					XMLCashRpt = new XML("<dailyinternationalcashfile/>");
					// tax table
					var taxTable = rootTaxTable.TaxTable;
					var taxTableSize = taxTable.length();

					AddXMLIntlCashRpt(XMLCashRpt, XMLCashRpt);
					XMLCashRpt.csh_OpeningForeverReading=Nmb2Currency(CurrentForeverReading);
					XMLCashRpt.csh_CurrentForeverReading=Nmb2Currency(CurrentForeverReading);

					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoTax_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_RefundBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OverringBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_WasteBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealTotalBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealTotalBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductPromoBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductPromoBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductEmployeeMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductEmployeeMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductManagerMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductManagerMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductRefundBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductRefundBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductOverringBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductOverringBrack_");
					//31.03.2009	OI add Discount Tags for Tax calculation
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductDiscountBrack_");
					
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OverringBrack_CSO_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductOverringBrack_CSO_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductOverringBrack_CSO_");


					for(var iCount=0; iCount<taxTableSize; iCount ++) {
						var cmd;
						var evaluate;
						var taxIdFmt = API.formatNumber(Number(iCount+1), "00", 2);

						cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRateId)";
						evaluate = eval(cmd);
						cmd = "XMLCashRpt.csh_TaxRate" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRate)";
						evaluate = eval(cmd);
						cmd = "XMLCashRpt.csh_TaxBasis" + taxIdFmt + "=Nmb2Currency(0)";
						evaluate = eval(cmd);
						cmd = "XMLCashRpt.csh_Tax" + taxIdFmt + "=Nmb2Currency(0)";
						evaluate = eval(cmd);
					 }
				}
				else {
					XMLCashRpt = XMLCashReportEx(rootConfig, rootCash, rootPmix, null, rptCashConsolidated, rootTaxTable);
				}
				
				//the report must be changed in order to eliminate duplicate tender nodes.
				XMLCashRpt = transformXmlCashRpt(XMLCashRpt);
								
				WS_addLine(WSBOI_HEADER);
				WS_addLine("<methodresponse><params>");
				WS_addLine(XMLCashRpt);
				WS_addLine("</params></methodresponse>");
			}
			else {
				var	foundPOS=false;
				var XMLCashRptAccumulated;

				XMLCashRptAccumulated = new XML("<dailyinternationalcashfile/>");
				
				for each (var item in rootCash.POS) {
					if(((Number(posId)==Number(item.@id)) && (0x49!=posId) && (0x4A!=posId) ) ||
						((posId==0x49)&&(item.@podShort=="FC")) ||
						((posId==0x4A)&&(item.@podShort=="DT"))) {
						// find the PMIX data for the respective POS Id
						// parse 'data' again if necessary
						if((null==rootConfig)||(null==rootCash)||(null==rootPmix)) {
							WS_init(config, data);
						}

						if((item.@status=="CLOSED") && (businessDate<=rootCash.@requestDate)){
							CurrentForeverReading=item.@finalGT;
							XMLCashRpt = new XML("<dailyinternationalcashfile/>");
							// tax table
							var taxTable = rootTaxTable.TaxTable;
							var taxTableSize = taxTable.length();

							AddXMLIntlCashRpt(XMLCashRptAccumulated, XMLCashRpt);
							XMLCashRpt.csh_OpeningForeverReading=Nmb2Currency(CurrentForeverReading);
							XMLCashRpt.csh_CurrentForeverReading=Nmb2Currency(CurrentForeverReading);

							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoTax_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInSalesBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutSalesBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherSalesBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_RefundBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OverringBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_WasteBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductSalesBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductSalesBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductSalesBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductSalesBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductSalesBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductSalesBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealTotalBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealTotalBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductPromoBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductPromoBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductEmployeeMealBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductEmployeeMealBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductManagerMealBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductManagerMealBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductRefundBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductRefundBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductOverringBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductOverringBrack_");
							//31.03.2009	OI add Discount Tags for Tax calculation
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductDiscountBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductDiscountBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductDiscountBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductDiscountBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductDiscountBrack_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductDiscountBrack_");
							
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OverringBrack_CSO_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductOverringBrack_CSO_");
							InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductOverringBrack_CSO_");


							for(var iCount=0; iCount<taxTableSize; iCount ++) {
								var cmd;
								var evaluate;
								var taxIdFmt = API.formatNumber(Number(iCount+1), "00", 2);

								cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRateId)";
								evaluate = eval(cmd);
								cmd = "XMLCashRpt.csh_TaxRate" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRate)";
								evaluate = eval(cmd);
								cmd = "XMLCashRpt.csh_TaxBasis" + taxIdFmt + "=Nmb2Currency(0)";
								evaluate = eval(cmd);
								cmd = "XMLCashRpt.csh_Tax" + taxIdFmt + "=Nmb2Currency(0)";
								evaluate = eval(cmd);
							}
						}
						else {
							API.dbg("teste "+rootTaxTable);
							XMLCashRpt = XMLCashReportEx(rootConfig, rootCash, rootPmix, item, rptCashConsolidated, rootTaxTable);
						}
						if(XMLCashRpt!=null) {
							AddXMLIntlCashRpt(XMLCashRptAccumulated, XMLCashRpt);
							AddXMLIntlUseTax(XMLCashRptAccumulated, XMLCashRpt);
						}
						foundPOS=true;
					}
				}
				if(true==foundPOS) {
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<methodresponse><params>");
					WS_addLine(XMLCashRptAccumulated);
					WS_addLine("</params></methodresponse>");
				}
				else {
					
					XMLCashRpt = new XML("<dailyinternationalcashfile/>");
					// tax table
					var taxTable = rootTaxTable.TaxTable;
					var taxTableSize = taxTable.length();

					AddXMLIntlCashRpt(XMLCashRpt, XMLCashRpt);
					XMLCashRpt.csh_OpeningForeverReading=Nmb2Currency(0);
					XMLCashRpt.csh_CurrentForeverReading=Nmb2Currency(0);

					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoTax_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_RefundBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OverringBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_PromoBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_WasteBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductSalesBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ManagerMealTotalBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EmployeeMealTotalBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductPromoBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductPromoBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductEmployeeMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductEmployeeMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductManagerMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductManagerMealBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductRefundBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductRefundBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductOverringBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductOverringBrack_");
					//31.03.2009	OI add Discount Tags for Tax calculation
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_EatInNonProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_TakeOutNonProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherProductDiscountBrack_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OtherNonProductDiscountBrack_");
					
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_OverringBrack_CSO_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_ProductOverringBrack_CSO_");
					InitializeTaxChain(taxTable, XMLCashRpt, taxTableSize, "csh_NonProductOverringBrack_CSO_");


					for(var iCount=0; iCount<taxTableSize; iCount ++) {
						var cmd;
						var evaluate;
						var taxIdFmt = API.formatNumber(Number(iCount+1), "00", 2);

						cmd = "XMLCashRpt.csh_TaxType" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRateId)";
						evaluate = eval(cmd);
						cmd = "XMLCashRpt.csh_TaxRate" + taxIdFmt + "=Number(taxTable[" + iCount + "].TaxRate)";
						evaluate = eval(cmd);
						cmd = "XMLCashRpt.csh_TaxBasis" + taxIdFmt + "=Nmb2Currency(0)";
						evaluate = eval(cmd);
						cmd = "XMLCashRpt.csh_Tax" + taxIdFmt + "=Nmb2Currency(0)";
						evaluate = eval(cmd);
					}
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<methodresponse><params>");
					WS_addLine(XMLCashRpt);
					WS_addLine("</params></methodresponse>");
				}
			}
		break;
		
		case "0x2c": // Quarter Hour Pmix
		case "0x2d": // PMix XML translation
			WS_addLine(WSBOI_HEADER);
			WS_addLine("<methodresponse><params>");
			generatePmix(rootCash,rootPmix);
			WS_addLine("</params></methodresponse>");
		break;

		case "0x2b":	// Cashout XML translation
			// Find the rootCash and rootPmix based on POS id and operator session login (nodeId)
			// The XML has the following 
			// <POS id="0001" podShort="FC"...> 
			// <OperatorSession id="2" name="Allan" login="20060127 11:36:15" ....>
			//API.dbg("======== Cashout");
			var loginTime= 	nodeId.substr(0,8)+" "+ 
							nodeId.substr(8,2)+":"+
							nodeId.substr(10,2)+":"+ 
							nodeId.substr(12,2);
			var rootCashout=null;
			var rootPmixout=null;

			//API.dbg("Looking for POS=[" + posId + "] and login=[" + loginTime + "]\n");

			//WS_addLine(WSBOI_HEADER);
			//WS_addLine("<methodresponse><params>");
			//generateCash(rootCashout,rootPmixout,rootCash.TenderTable,rootPmix.ProductTable,true);
			//generateAccumCashout(rootCash, rootPmix, posId, loginTime);

			var nodeCashPOS=rootCash.POS.(Number(@id)==Number(posId));

			if(null!=nodeCashPOS) {
				var XMLCashRptAccumulated;
				XMLCashRptAccumulated = new XML("<XMLCashRpt/>");
				XMLCashRptAccumulated.RegisterID=""+posId;	// without "" does not work. It writes posId instead of RegisterID sd tag
				XMLCashRptAccumulated.DrawerChangeType=DrawerChangeType;
				XMLCashRptAccumulated.Openingreading.@value=trim(API.formatNumber(Number(nodeCashPOS[0].@initialGT),".00",50));

				for each (var opSession in nodeCashPOS.OperatorSession) {
					if(opSession.@login<=loginTime) {
						//var XMLCashRpt = XMLCashReport(opSession, opSession, 6);
						// parse 'data' again if necessary
						if((null==rootConfig)||(null==rootCash)||(null==rootPmix)) {
							WS_init(config, data);
						}
						var XMLCashRpt = executeFunctionInScript("reports.nps", "XMLCashReport", true, rootConfig, rootCash, rootPmix, opSession, 6);
						if(XMLCashRpt!=null) {
							AddXMLCashRpt(XMLCashRptAccumulated, XMLCashRpt);
						}
						if(opSession.@login==loginTime) {
							cashoutTimeStamp=opSession.@logout;
							XMLCashRptAccumulated.Closereading.@value=trim(API.formatNumber(XMLCashRpt.Closereading.@value,".00",50));
						}
					}
				}
				XMLCashRptAccumulated.CashoutTimeStamp=""+cashoutTimeStamp;	// without "" does not work.
				WS_addLine(WSBOI_HEADER);
				WS_addLine("<methodresponse><params>");
				WS_addLine(XMLCashRptAccumulated);
				WS_addLine("</params></methodresponse>");
				//WS_addLine(XMLCashRptAccumulated);
			}
		break;

		case "0x81": // DT timing
		case "0x82": // WT timing
		case "0x83": // FC timing
			WS_addLine(WSBOI_HEADER);
			WS_addLine("<methodresponse><params>");
			generateSOS(config, data, rootSOS, BOICommand);
			WS_addLine("</params></methodresponse>");
		break;

		case "0x7d":
			API.dbg("======= Report type ["+posId+"]");
			switch(Number(posId)) {
				case 0x04:	// Detailed Order Log
API.dbg("======= R2D2 - Detailed Order Log");
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<DetailOrderLog>");
					WS_addLine("<NationalStoreNumber>"+storeId+"</NationalStoreNumber>");
					WS_addLine("<POSVersion>"+POSversion+"</POSVersion>");
					WS_addLine("<BusinessDate>"+businessDate.substr(4,2)+"/" + businessDate.substr(6,2) + "/" + businessDate.substr(0,4)+"</BusinessDate>");
					WS_addLine("<DetailedOrders>");

					generateR2D2_DetailedOrderLog(config, rootSOS, rootDetailSOS);
					WS_addLine("</DetailedOrders>");
					WS_addLine("</DetailOrderLog>");
				break;
				case 0x05:	// Menu Item
API.dbg("======= R2D2 - Menu Item");
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<MenuItems>");
					WS_addLine("<NationalStoreNumber>"+storeId+"</NationalStoreNumber>");
					WS_addLine("<BusinessDate>"+businessDate.substr(4,2)+"/" + businessDate.substr(6,2) + "/" + businessDate.substr(0,4)+"</BusinessDate>");

					generateR2D2_MenuItem(config, rootPmix);
					WS_addLine("</MenuItems>");
				break;
				case 0x06:	// FC Quarter Hour Data
API.dbg("======= R2D2 - FC Quarter Hour Data");
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<QtrHrData>");
					WS_addLine("<NationalStoreNumber>"+storeId+"</NationalStoreNumber>");
					WS_addLine("<BusinessDate>"+businessDate.substr(4,2)+"/" + businessDate.substr(6,2) + "/" + businessDate.substr(0,4)+"</BusinessDate>");

					generateR2D2_FCQuarterHourData(config, rootSOS);
					WS_addLine("</QtrHrData>");
				break;
				case 0x07:	// KVS Quarter Hour Data
API.dbg("======= R2D2 - KVS Quarter Hour Data");
					WS_addLine(WSBOI_HEADER);
					WS_addLine("<KVSQtrHrDtl>");
					WS_addLine("<NationalStoreNumber>"+storeId+"</NationalStoreNumber>");
					WS_addLine("<BusinessDate>"+businessDate.substr(4,2)+"/" + businessDate.substr(6,2) + "/" + businessDate.substr(0,4)+"</BusinessDate>");

					generateR2D2_KVSQuarterHourData(config, rootSOS);
					WS_addLine("</KVSQtrHrDtl>");
				break;
			}
		break;

		case "0xca20":
			// fall thru
		case "0xCA20":
API.dbg("======= 0xCA20 generateSummarySalesTLD BEFORE");
			generateSummarySalesTLD(config, rootHourlySales, rootdetailTLD);
API.dbg("======= 0xCA20 generateSummarySalesTLD AFTER");
		break;

		case "0xca03":
			// fall thru
		case "0xCA03":
			generateKVSTiming(config, data);
			break;

	}
	return WS_getResponse();
}


function PosGetSOSIncrement(Key)
{

	var ReturnValue;
		ReturnValue = "60";

	
	return(ReturnValue);
}

function rptFormat(content, size, fill) {
	if (content.toString().length == size) {
		return content.toString();
	}
	
	if (content.toString().length > size) {
		return content.toString().substr(0, size);
	}
	
	if (fill > 0)
		fill = fill.subst(0, 1);
		
	for (ct = content.toString().length; ct < size; ct++) {
		content += fill;
	}
	return content;
}

function WayBusinessUpdateReportProducts(productSsName, namesSsName, storeSsName, date) {
	var productDB;
	var namesDB;
	var storeDB;
	var productSs;
	var namesSs;
	var storeSs;
	var result		= "";
	var updated		= false;

	
	// parsing XML
	try {
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Parsing XML: ProductDB");
		//NVS-2459
		//productDB	= new XML(API.getProductdb());
		productDB = GetRootProductDB();
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Parsing XML: NamesDB");
		namesDB		= new XML(API.getNamesdb());
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Parsing XML: StoreDB");
		storeDB		= new XML(API.getStoredb());
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Parsing XML: ProductDB Backup");
		productSs	= new XML(API.getXMLFile(productSsName));
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Parsing XML: NamesDB Backup");
		namesSs		= new XML(API.getXMLFile(namesSsName));
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Parsing XML: StoreDB Backup");
		storeSs		= new XML(API.getXMLFile(storeSsName));
	} catch (e) {
		// parser error
		API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportProducts] Error parsing XML " + result);
		result = "ERROR: Cannot parse XML Files " + e + "\n";
		API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportProducts] " + result);
		return result;
	}
	
	
	try {
		// RETRIEVE STORE DB DATA
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Retrieving data");
		languageCode = storeDB.StoreDB.StoreProfile.Localization.Language + "_" + storeDB.StoreDB.StoreProfile.Localization.CountryId;
		DBSeqNumber = storeDB.StoreDB.StoreDBSeqNumber;
		SnapshotSeqNumber = storeSs.StoreDB.StoreDBSeqNumber;
		
		if (DBSeqNumber == SnapshotSeqNumber) {
			result = "ERROR: Same Version for Configuration and Backup: " + DBSeqNumber;
			API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportProducts] " + result);
			return result;
		}
		
		// LOAD NAME DB
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Loading NamesDB");
		var DBNames = Array();
		// which language?
		var language;
		for each (language in namesDB.Language) {
			if (language.@code == languageCode) {
				break;
			}
		}
		
		for each (productname in language.ProductName) {
			DBNames[productname.ProductCode] = productname;
		}
		
		// LOAD NAME SNAPSHOT
		var snapshotNames = Array();
		// which language?
		for each (language in namesSs.Language) {
			if (language.@code == languageCode) {
				break;
			}
		}
		for each (productname in language.ProductName) {
			snapshotNames[productname.ProductCode] = productname;
		}

		
		// REPORT HEADER
		// guide		          |         |         |         | 
		result		=	"    BUSINESS DATE " + date + "\n";
		result		+=	"\n\n\n";
		result		+=	"======================================\n";
		result		+=	"     BUSINESS UPDATE DATA REPORT      \n";
		result		+=	"            PRODUCT REPORT            \n";
		result		+=	"======================================\n";
		result		+=	"CURRENT PACKAGE ID:   " + DBSeqNumber + "\n"
		result		+=	"PREVIOUS PACKAGE ID:  " + SnapshotSeqNumber + "\n";
		


		// LOAD PRODUCTS
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Loading ProductsDB");
		var snapshotProducts = Array();
		var ctProduct = 0;
		for each (product in productSs.Product) {
			snapshotProducts[product.ProductCode] = product;
			ctProduct++;
		}
		
		var DBProducts = Array();
		ctProduct = 0;
		for each (product in productDB.Product) {
			DBProducts[product.ProductCode] = product;
			ctProduct++;
		}



		result		+=	"===========PRODUCTS INCLUDED==========\n";
		result		+=	"PROD CODE  SHRT NAME  DT NAME         \n";
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Generating Products Included");
		for each(product in DBProducts) {
			if (typeof(snapshotProducts[product.ProductCode]) == "undefined") {
				result		+=	rptFormat(product.ProductCode, 8, " ") + "   ";
				if (typeof(DBNames[product.ProductCode]) == "undefined") {
					result		+=	rptFormat("", 10, " ") + " ";
					result		+=	rptFormat("", 16, " ");
				} else {
					result		+=	rptFormat(DBNames[product.ProductCode].ShortName, 10, " ") + " ";
					result		+=	rptFormat(DBNames[product.ProductCode].DTName, 16, " ");
				}
				result		+=	"\n";
			}
		}
		result += "\n\n";


		result		+=	"===========PRODUCTS REMOVED===========\n";
		result		+=	"PROD CODE  SHRT NAME  DT NAME         \n";
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Generating Products Removed");
		for each (product in snapshotProducts) {
			if (typeof(DBProducts[product.ProductCode]) == "undefined") {
				result		+=	rptFormat(product.ProductCode, 8, " ") + "   ";
				if (typeof(snapshotNames[product.ProductCode]) == "undefined") {
					result		+=	rptFormat("", 10, " ") + " ";
					result		+=	rptFormat("", 16, " ");
				} else {
					result		+=	rptFormat(snapshotNames[product.ProductCode].ShortName, 10, " ") + " ";
					result		+=	rptFormat(snapshotNames[product.ProductCode].DTName, 16, " ");
				}
				result		+=	"\n";
			}
		}
		result += "\n\n";



		// CHECK FOR DIFFERENCES
		result				+=	"===========PRODUCTS UPDATED===========\n";
		result				+=	"CODE      ATTR NAME   PREV     CURR   \n";
		
		var diff;
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Generating Products Updated");
		for each(product in DBProducts) {
			if (typeof(snapshotProducts[product.ProductCode]) == "undefined") {
				continue; 
			}
			
			snapshot	= snapshotProducts[product.ProductCode];	
			ssnames		= snapshotNames[product.ProductCode];
			
			
			diff = Array();	
			ctAttr = 0;
			// ATTRIBUTES
			for each (attr in product.attributes()) {
				if (attr != snapshot.attribute(attr.name())) {
					diff[ctAttr]			=	Array()
					diff[ctAttr]['attr']	=	attr.name();
					diff[ctAttr]['from'] 	=	snapshot.attribute(attr.name());
					diff[ctAttr]['to']		=	attr.toString();
					ctAttr++;
				}
			}
			
			// PROD DB CHILDREN
			for each (attr in product.children()) {
				if (attr.hasSimpleContent() && attr.toString() != snapshot.child(attr.name()).toString()) {
					diff[ctAttr]				= Array();
					diff[ctAttr]['attr']		= attr.name();
					if (typeof(snapshot.child(attr.name())) != 'undefined') {
						diff[ctAttr]['from']	= snapshot.child(attr.name()).toString();
					} else {
						diff[ctAttr]['from']	= "";
					}
					diff[ctAttr]['to']			= attr.toString();
					ctAttr++;
				} 
			}
			
			// NAMES ELEMENTS
			if (typeof(DBNames[product.ProductCode]) != "undefined") {
				for each (attr in DBNames[product.ProductCode]) {
					if (attr != ssnames.elements(attr.name())) {
						diff[ctAttr]			= Array();
						diff[ctAttr]['attr']	= attr.name();
						diff[ctAttr]['from']	= ssnames.elements(attr.name());
						diff[ctAttr]['to']		= attr;
						ctAttr++;
					}
				}
			}
			
			// DISTRIBUTION ELEMENTS
			// 1. load distribution points from PosDB and snapshot
			var DBPoints = Array();
			for each (point in product.Distribution.children()) {
				DBPoints[point.toString()] = point;
			}
			var snapshotPoints = Array();
			for each (point in snapshot.Distribution.children()) {
				snapshotPoints[point.toString()] = point;
			}
			
			// check for changes
			for each (point in DBPoints) {
				if (typeof(snapshotPoints[point.toString()]) == 'undefined') {
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= point.name();
					diff[ctAttr]['from']	= "";
					diff[ctAttr]['to']		= point.toString();
					ctAttr++;
				}
			}			
			for each (point in snapshotPoints) {
				if (typeof(DBPoints[point.toString()]) == 'undefined') {
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= point.name();
					diff[ctAttr]['from']	= point.toString();
					diff[ctAttr]['to']		= "";
					ctAttr++;
				}
			}
			
			// PRODUCTION ELEMENTS
			// Grillable
			if (product.Production.Grillable.@doNotPrint != snapshot.Production.Grillable.@doNotPrint) {
				diff[ctAttr]				= Array();
				diff[ctAttr]['attr']		= 'Grillable.@doNotPrint';
				
				if (typeof(snapshot.Production.Grillable.@doNotPrint) == 'undefined') {
					diff[ctAttr]['from']	= "";
				} else {
					diff[ctAttr]['from']	= snapshot.Production.Grillable.@doNotPrint;
				}
				if (typeof(product.Production.Grillable.@doNotPrint) == 'undefined') {
					diff[ctAttr]['to']		= "";
				} else {
					diff[ctAttr]['to']		= product.Production.Grillable.@doNotPrint;
				}
				ctAttr++;
			}
			
			
			if (product.Production.Grillable.@status != snapshot.Production.Grillable.@status) {
				diff[ctAttr]				= Array();
				diff[ctAttr]['attr']		= 'Grillable.@status';
				
				if (typeof(snapshot.Production.Grillable.@status) == 'undefined') {
					diff[ctAttr]['from']	= "";
				} else {
					diff[ctAttr]['from']	= snapshot.Production.Grillable.@status;
				}
				if (typeof(product.Production.Grillable.@status) == 'undefined') {
					diff[ctAttr]['to']		= "";
				} else {
					diff[ctAttr]['to']		= product.Production.Grillable.@status;
				}
				ctAttr++;
			}
			

			// KVS ROUTING
			// 1. load product DB routing
			var DBRouting = Array();
			for each (routing in product.Production.KVSRoutes.children()) {
				DBRouting[routing.@id] = routing;
			}
			// 2. load snapshot DB routing
			var snapshotRouting = Array();
			for each (routing in snapshot.Production.KVSRoutes.children()) {
				snapshotRouting[routing.@id] = routing;
			}
			
			// 3. check for changes
			for each (routing in DBRouting) {
				if (typeof(snapshotRouting[routing.@id]) == 'undefined') {
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= "KVSRouting.@id";
					diff[ctAttr]['from']	= "";
					diff[ctAttr]['to']		= routing.@id;
					ctAttr++;
				}
			}
			
			for each (routing in snapshotRouting) {
				if (typeof(DBRouting[routing.@id]) == 'undefined') {
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= "KVSRouting.@id";
					diff[ctAttr]['from']	= routing.@id;
					diff[ctAttr]['to']		= "";
					ctAttr++;
				}
			}
			
			
			// CAN ADDS ELEMENTS
			// load DB and snapshot
			var DBCanAdds		= Array();
			for each (canadd in product.CanAdds.Component) {
				DBCanAdds[canadd.ProductCode] = canadd;
			}
			var snapshotCanAdds = Array();
			for each (canadd in snapshot.CanAdds.Component) {
				snapshotCanAdds[canadd.ProductCode] = canadd;
			}
			
			// from DB to snapshot
			for each (canadd in DBCanAdds) {
				if (typeof(snapshotCanAdds[canadd.ProductCode]) == 'undefined') {
					// inserted canadd
					diff[ctAttr]				= Array();
					diff[ctAttr]['attr']		= 'CANADD';
					diff[ctAttr]['from']		= "";
					if (typeof(DBNames[canadd.ProductCode]) == 'undefined') {
						diff[ctAttr]['to']		= canadd.ProductCode;
					} else {
						diff[ctAttr]['to']		= DBNames[canadd.ProductCode].ShortName;
					}
				} else {
					// check for updates
					updated = false;
					for each (attr in canadd.children()) {
						// 1. check for existence (avoid crashes)
						// 2. check for difference
						if (typeof(snapshotCanAdds[canadd.ProductCode].child(attr.name())) == 'undefined') {
							continue;
						}
						if (attr.toString() != snapshotCanAdds[canadd.ProductCode].child(attr.name()).toString()) {
							updated = true;						
						}
						
					}
					if (updated) {
						diff[ctAttr]			= Array();
						diff[ctAttr]['attr']	= 'CANADD';
						diff[ctAttr]['from']	= 'UPDATE';
						if (typeof(DBNames[canadd.ProductCode]) == 'undefined') {
							diff[ctAttr]['to']		= canadd.ProductCode;
						} else {
							diff[ctAttr]['to']		= DBNames[canadd.ProductCode].ShortName;
						}
						ctAttr++;
					}
				}
			}
			
			// from snapshot to DB 
			for each (canadd in snapshotCanAdds) {
				if (typeof(DBCanAdds[canadd.ProductCode]) == 'undefined') {
					// removed canadd
					diff[ctAttr]				= Array();
					diff[ctAttr]['attr']		= 'CANADD';
					if (typeof(snapshotNames[canadd.ProductCode]) == 'undefined') {
						diff[ctAttr]['from']	= canadd.ProductCode;
					} else {
						diff[ctAttr]['from']	= snapshotNames[canadd.ProductCode].ShortName;
					}
					diff[ctAttr]['to']			= "";
					ctAttr++;
				}
			}
			
			
			// COMPOSITION ELEMENTS
			// load from DB and snapshot
			var DBComponents = Array();
			for each (component in product.Composition.Component) {
				DBComponents[component.ProductCode] = component;
			}
			var snapshotComponents = Array();
			for each (component in snapshot.Composition.Component) {
				snapshotComponents[component.ProductCode] = component;
			}
			
			for each (component in DBComponents) {
				if (typeof(snapshotComponents[component.ProductCode]) == 'undefined') {
					// inserted component
					diff[ctAttr]				= Array();
					diff[ctAttr]['attr']		= 'COMPOS';
					diff[ctAttr]['from']		= '';
					if (typeof(DBNames[component.ProductCode]) == 'undefined') {
						diff[ctAttr]['to']		= component.ProductCode;
					} else {
						diff[ctAttr]['to']		= DBNames[component.ProductCode].ShortName;
					}
					ctAttr++;
				} else {
					// check for updates
					updated = false;
					for each (attr in component.children()) {
						// 1. check for existence (avoid crashes)
						// 2. check for difference
						if (typeof(snapshotComponents[component.ProductCode].child(attr.name())) == 'undefined') {
							continue;
						}
						if (attr.toString() != snapshotComponents[component.ProductCode].child(attr.name()).toString()) {
							updated = true;						
						}
					}
					if (updated) {
						diff[ctAttr]			= Array();
						diff[ctAttr]['attr']	= 'COMPOS';
						diff[ctAttr]['from']	= 'UPDATE';
						if (typeof(DBNames[canadd.ProductCode]) == 'undefined') {
							diff[ctAttr]['to']		= component.ProductCode;
						} else {
							diff[ctAttr]['to']		= DBNames[component.ProductCode].ShortName;
						}
						ctAttr++;
					}
				}
			}
			
			
			for each (component in snapshotComponents) {
				if (typeof(DBComponents[component.ProductCode]) == 'undefined') {
					// removed component
					diff[ctAttr]			= Array();
					diff[ctAttr]['attr']	= 'COMPOS';
					if (typeof(snapshotNames[component.ProductCode]) == 'undefined') {
						diff[ctAttr]['from']	= component.ProductCode;
					} else {
						diff[ctAttr]['from']	= snapshotNames[component.ProductCode].ShortName;
					}
					diff[ctAttr]['to']		= "";
					ctAttr++;
				}
			}
			
			

			// report all changes
			if (ctAttr > 0) { 
				firstLine			= true;
				firstCanAdd			= true;
				firstComposition	= true
				for each (item in diff) {
					if (firstLine) {
						result	+=	rptFormat(product.ProductCode, 8, " ");
						firstLine = false;
					} else {
						result	+=	"        ";
					}
					
					if (item['from'] == 'UPDATE') {
						result	+=	"  " + rptFormat(item['attr'], 10, " ") + "UPDATED\n";
						result	+=	"            PROD:  " + rptFormat(item['to'], 19, " ") + "\n";
					} else if (item['attr'].toString().length > 10 || item['from'].toString().length > 7 || item['to'].toString().length > 7) {
						result	+=	"  " + rptFormat(item['attr'], 28, " ") + "\n";
						result	+=	"            FROM:  " + rptFormat(item['from'], 19, " ") + "\n";
						result	+=	"            TO:    " + rptFormat(item['to'], 19, " ") + "\n";
					} else {
						result	+=	"  " + rptFormat(item['attr'], 10, " ");
						result	+=	"  " + rptFormat(item['from'], 7, " ");
						result	+=	"  " + rptFormat(item['to'], 7, " ");
						result  +=	"\n";
					}
				}
			}
		}
		
		
		// REPORT FOOTER
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportProducts] Finish Report");
		result		+=	"======================================\n";
		result		+=	"\n\n";
		result		+=	"             END OF REPORT            \n"
		result		+=	"\n\n";
		
	} catch (e) {
		// error
		result = "ERROR: Processing differences " + e + "\n";
		API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportProducts] " + result);
	}
	
	return result;
}


function WayBusinessUpdateReportPrices(productSsName, storeSsName, date) {
	var result		= "";
	var productDB;
	var storeDB;
	var produtSs;
	var storeSs;

	// xml parsing
	try {
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Parsing XML: ProductDB");
		//NVS-2459
		//productDB	= new XML(API.getProductdb());
		 productDB = GetRootProductDB();
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Parsing XML: StoreDB");
		storeDB		= new XML(API.getStoredb());
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Parsing XML: ProductDB Backup");
		productSs	= new XML(API.getXMLFile(productSsName));
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Parsing XML: StoreDB Backup");
		storeSs		= new XML(API.getXMLFile(storeSsName));
	} catch (e) {
		// parser error
		API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportPrices] Error parsing XML " + result);
		result = "ERROR: Cannot parse XML Files" + e + "\n";
		API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportPrices] " + result);
		return result;
	}


	try {
		// RETRIEVE STORE DB DATA
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Retrieving data");
		languageCode		= storeDB.StoreDB.StoreProfile.Localization.Language + "_" + storeDB.StoreDB.StoreProfile.Localization.CountryId;
		DBSeqNumber			= storeDB.StoreDB.StoreDBSeqNumber;
		SnapshotSeqNumber	= storeSs.StoreDB.StoreDBSeqNumber;

		if (DBSeqNumber == SnapshotSeqNumber) {
			result = "ERROR: Same Version for Configuration and Backup: " + DBSeqNumber;
			API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportPrices] " + result);
			return result;
		}

		// LOAD PRODUCTS
		// load snapshot products
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Loading ProductsDB");
		var snapshotProducts = Array();
		for each (product in productSs.Product) {
			snapshotProducts[product.ProductCode] = product;
		}
		
		// load productdb
		var DBProducts = Array();
		for each (product in productDB.Product) {
			DBProducts[product.ProductCode] = product;
		}
		
		
		// REPORT HEADER
		// guide		          |         |         |         | 
		result		=	"    BUSINESS DATE " + date + "\n";
		result		+=	"\n\n\n";
		result		+=	"======================================\n";
		result		+=	"     BUSINESS UPDATE DATA REPORT      \n";
		result		+=	"             PRICE REPORT             \n";
		result		+=	"======================================\n";
		result		+=	"CURRENT PACKAGE ID:   " + DBSeqNumber + "\n"
		result		+=	"PREVIOUS PACKAGE ID:  " + SnapshotSeqNumber + "\n";	
		
		// PRODUCTS INCLUDED
		result		+=	"===========PRODUCTS INCLUDED==========\n";
		result		+=	"CODE             PRICE   TAX CODE     \n";
		//               12345678 TAKEOUT 123.12  OPTIONAL
		// check for inserted products
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Generating Products Included");
		for each (product in DBProducts) {
			if (typeof(snapshotProducts[product.ProductCode]) == "undefined") {
				firstTag = true;
				for each (pricing in product.PriceList.PriceTag.Pricing) {
					if (firstTag) {
						result		+=	rptFormat(product.ProductCode, 8, " ") + " ";
						firstTag = false;
					} else {
						result		+= "         ";
					}
					result			+= rptFormat(pricing.@priceCode, 7, " ") + " ";
					result			+= rptFormat(pricing.Price, 6, " ") + "  ";
					result			+= rptFormat(pricing.Tax.@taxCode, 8, " ") + "\n";
				}
			}
		}
		result		+=	"======================================\n";
		result		+=	"\n";
		
		// UPDATED PRICES
		result		+=	"============UPDATED PRICES============\n";
		result		+=	"CODE             PREV PRICE  CUR PRICE\n";
		//               12345678 TAKEOUT 123.56      123.56
		// check for updated
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Generating Updated Prices");	
		for each (product in DBProducts) {
			if (typeof(snapshotProducts[product.ProductCode]) != "undefined") {
				firstTag = true;
				var SnapshotPricing		= Array();
				for each (pricing in snapshotProducts[product.ProductCode].PriceList.PriceTag.Pricing) {
					SnapshotPricing[pricing.@priceCode] = pricing;
				}
				
				for each (pricing in product.PriceList.PriceTag.Pricing) {
					if (typeof(SnapshotPricing[pricing.@priceCode]) == "undefined" || pricing.Price != SnapshotPricing[pricing.@priceCode].Price) {
						if (firstTag) {
							result +=	rptFormat(product.ProductCode, 8, " ") + " ";
							firstTag = false;
						} else {
							result +=	"         ";
						}
						result +=	rptFormat(pricing.@priceCode, 7, " ") + " ";
						if (typeof(SnapshotPricing[pricing.@priceCode]) == "undefined") {
							result +=	rptFormat("", 10, " ") + "  ";
						} else {
							result +=	rptFormat(SnapshotPricing[pricing.@priceCode].Price, 10, " ") + "  ";
						}
						result +=	rptFormat(pricing.Price, 10, " ") + "\n";
					}
				}
			}
		}
		result		+=	"\n";
		
		
		// PRICE TABLE CONFIGURATION
		result		+=	"=======PRICE TABLE CONFIGURATION======\n";
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Price Table Configuratio Changes");	
		for each (product in productDB.Product) {
			if (typeof(snapshotProducts[product.ProductCode]) != "undefined") {
				var SnapshotPricing		= Array();
				for each (pricing in snapshotProducts[product.ProductCode].PriceList.PriceTag.Pricing) {
					SnapshotPricing[pricing.@priceCode] = pricing;
				}

				var diffFrom	= Array();
				var diffTo		= Array();
				var ct = 0;
				for each (pricing in product.PriceList.PriceTag.Pricing) {
					if (
							pricing.Tax.@taxCode	!= SnapshotPricing[pricing.@priceCode].Tax.@taxCode	||
							pricing.Tax.@rule		!= SnapshotPricing[pricing.@priceCode].Tax.@rule	||
							pricing.Tax.@entry		!= SnapshotPricing[pricing.@priceCode].Tax.@entry
					) {
						diffFrom[pricing.@priceCode]	= SnapshotPricing[pricing.@priceCode];
						diffTo[pricing.@priceCode]		= pricing;
						ct++;
					}
				}
				
				if (ct == 0) {
					// no differences
					continue;
				}
				
				result +=	"PRODUCT CODE:  " + rptFormat(product.ProductCode, 8, " ") + "\n";
				result +=	"              TAXCODE  RULE        ENT\n";
				
				var firstFrom = true;
				for each (pricing in diffFrom) {
						if (firstFrom) {
							result +=	" FROM ";
							firstFrom = false;
						} else {
							result +=	"      ";
						}
						result +=	rptFormat(pricing.@priceCode, 7, " ") + " ";
						result +=	rptFormat(pricing.Tax.@taxCode, 8, " ") + " ";
						result +=	rptFormat(pricing.Tax.@rule, 11, " ") + " ";
						result +=	rptFormat(pricing.Tax.@entry,3, " ") + "\n";
				}
				
				var firstTo = true;
				for each (pricing in diffTo) {
						if (firstTo) {
							result +=	" TO   ";
							firstTo = false;
						} else {
							result +=	"      ";
						}
						result +=	rptFormat(pricing.@priceCode, 7, " ") + " ";
						result +=	rptFormat(pricing.Tax.@taxCode, 8, " ") + " ";
						result +=	rptFormat(pricing.Tax.@rule, 11, " ") + " ";
						result +=	rptFormat(pricing.Tax.@entry,3, " ") + "\n";
				}
			}
		}
		result		+=	"\n";
		
		
		// TAXES INCLUDED
		result		+=	"\n";
		result		+=	"================TAXES=================\n";
		result		+=	"------------TAXES INCLUDED------------\n";
		result		+=	"TAX ID  TAX DESCR    RATE   STATUS    \n";
		
		// load taxes
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Loading Taxes");
		var taxesDB = Array();
		for each (taxtype in storeDB.StoreDB.TaxTable.TaxType) {
			taxesDB[taxtype.TaxId] = taxtype;
		}
		
		var taxesSs = Array();
		for each (taxtype in storeSs.StoreDB.TaxTable.TaxType) {
			taxesSs[taxtype.TaxId] = taxtype;
		}
		
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Generating Taxes Included");	
		for each (taxtype in taxesDB) {
			if (typeof(taxesSs[taxtype.TaxId]) == 'undefined') {
				result	+=	rptFormat(taxtype.TaxId, 6, " ") + "  ";
				result	+=	rptFormat(taxtype.TaxDescription, 11, " ") + "  ";
				result	+=	rptFormat(taxtype.TaxRate, 5, " ") + "  ";
				result	+=	rptFormat(taxtype.@statusCode, 8, " ") + "\n";
			}
		}
		result		+=	"\n";
		
		// TAXES REMOVED
		result		+=	"------------TAXES REMOVED-------------\n";
		result		+=	"TAX ID  TAX DESCR                     \n";
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Generating Taxes Removed");
		for each (taxtype in taxesSs) {
			if (typeof(taxesDB[taxtype.TaxId]) == 'undefined') {
				result	+=	rptFormat([taxtype.TaxId], 6, " ") + "  ";
				result	+=	rptFormat(taxtype.TaxDescription, 20, " ") + "\n";
			}
		}
		result		+=	"\n";
		
		// TAXES UPDATED
		result		+=	"------------TAXES UPDATED-------------\n";
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Generating Taxes Updated");
		for each (taxtype in taxesDB) {
			if (typeof(taxesSs[taxtype.TaxId]) == 'undefined') {
				continue;
			}
			
			if (
					taxtype.TaxDescription	!=	taxesSs[taxtype.TaxId].TaxDescription	||
					taxtype.TaxRate			!=	taxesSs[taxtype.TaxId].TaxRate			||
					taxtype.@statusCode		!=	taxesSs[taxtype.TaxId].@statusCode
			) {
				result	+=	"TAX ID: " + taxtype.TaxId + "\n";
				result	+=	"      TAX DESCR    RATE   STATUS     \n";
				result	+=	"FROM  ";
				result	+=	rptFormat(taxesSs[taxtype.TaxId].TaxDescription, 11, " ") + "  ";
				result	+=	rptFormat(taxesSs[taxtype.TaxId].TaxRate, 5, " ") + "  ";
				result	+=	rptFormat(taxesSs[taxtype.TaxId].@statusCode, 8, " ") + "\n";
				
				result	+=	"TO    ";
				result	+=	rptFormat(taxtype.TaxDescription, 11, " ") + "  ";
				result	+=	rptFormat(taxtype.TaxRate, 5, " ") + "  ";
				result	+=	rptFormat(taxtype.@statusCode, 8, " ") + "\n";
			}	
		}
		
		result		+=	"\n\n"

		// REPORT FOOTER
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportPrices] Finish Report");
		result		+=	"======================================\n";
		result		+=	"\n\n";
		result		+=	"             END OF REPORT            \n"
		result		+=	"\n\n";
	} catch (e) {
		// error
		result = "ERROR: Processing differences " + e + "\n";
		API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportPrices] " + result);
	}

	return result;
}



function WayBusinessUpdateReportKPA(storeSsName, screenSsName, date) {
	var storeDB;
	var screenDB;
	var storeSs;
	var screenSs;
	var result		= "";
	
	// parse xml	
	try {
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Parsing XML: StoreDB");
		storeDB		= new XML(API.getStoredb());
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Parsing XML: Screen");
		screenDB	= new XML(API.getScreen());
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Parsing XML: StoreDB Backup");
		storeSs		= new XML(API.getXMLFile(storeSsName));
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Parsing XML: ScreenBackup");
		screenSs	= new XML(API.getXMLFile(screenSsName));
	} catch (e) {
		// parser error
		API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportKPA] Error parsing XML " + result);
		result = "ERROR: Cannot parse XML Files" + e + "\n";
		API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportKPA] " + result);
		return result;
	}
	
	try {
	
		// RETRIEVE STORE DB DATA
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Retrieving data");
		languageCode		= storeDB.StoreDB.StoreProfile.Localization.Language + "_" + storeDB.StoreDB.StoreProfile.Localization.CountryId;
		DBSeqNumber			= storeDB.StoreDB.StoreDBSeqNumber;
		SnapshotSeqNumber	= storeSs.StoreDB.StoreDBSeqNumber;
			
		if (DBSeqNumber == SnapshotSeqNumber) {
			result = "ERROR: Same Version for Configuration and Backup: " + DBSeqNumber;
			API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportKPA] " + result);
			return result;
		}
		
		// REPORT HEADER
		// guide		          |         |         |         | 
		result		=	"    BUSINESS DATE " + date + "\n";
		result		+=	"\n\n\n";
		result		+=	"======================================\n";
		result		+=	"     BUSINESS UPDATE DATA REPORT      \n";
		result		+=	"              KPA REPORT              \n";
		result		+=	"======================================\n";
		result		+=	"CURRENT PACKAGE ID:   " + DBSeqNumber + "\n"
		result		+=	"PREVIOUS PACKAGE ID:  " + SnapshotSeqNumber + "\n";	
		
		
		// SCREENS INCLUDED
		result		+=	"===========SCREENS INCLUDED===========\n";
		result		+=	"SCREEN #  SCREEN TYPE                 \n";
		
		// loading screens
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Loading Screens");
		var DBScreens = Array();
		for each (screen in screenDB.Screen) {
			DBScreens[screen.@number] = screen;
		}
		
		var SnapshotScreens = Array();
		for each (screen in screenSs.Screen) {
			SnapshotScreens[screen.@number] = screen;
		}
		
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Generating Screens Inserted");
		for each (screen in DBScreens) {
			if (typeof(SnapshotScreens[screen.@number]) == 'undefined') {
				result	+=	rptFormat(screen.@number, 8, " ") + "  ";
				result	+=	rptFormat(screen.@type, 20, " ") + "\n";
			}
		}
		result		+=	"\n";
		
		
		// SCREENS REMOVED
		result		+=	"===========SCREENS REMOVED============\n";
		result		+=	"SCREEN #  SCREEN TYPE                 \n";
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Generating Screens Removed");
		for each (screen in SnapshotScreens) {
			if (typeof(DBScreens[screen.@number]) == 'undefined') {
				result	+=	rptFormat(screen.@number, 8, " ") + "  ";
				result	+=	rptFormat(screen.@type, 20, " ") + "\n";
			}
		}
		result		+=	"\n";
		
		
		// SCREENS UPDATED
		result		+=	"===========SCREENS UPDATED============\n";
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Generating Screens Updated");
		for each (screen in DBScreens) {
			if (typeof(SnapshotScreens[screen.@number]) == 'undefined') {
				continue;
			}

			// load buttons
			var buttonsDB = Array()
			for each (button in screen.Button) {
				buttonsDB[button.@number] = button;
			}
			
			var buttonsSs = Array();
			for each (button in SnapshotScreens[screen.@number].Button) {
				buttonsSs[button.@number] = button
			}
			
			
			var ctInserted		= 0;
			var	insertedButtons = Array();
			for each (button in buttonsDB) {
				if (typeof(buttonsSs[button.@number]) == 'undefined') {
					insertedButtons[button.@number] = button;
					ctInserted++;
				}
			}
			
			var ctRemoved		= 0;
			var removedButtons	= Array();
			for each (button in buttonsSs) {
				if (typeof(buttonsDB[button.@number]) == 'undefined') {
					removedButtons[button.@number] = button;
					ctRemoved++;
				}
			}

			updateResult = '';
			for each (button in buttonsDB) {
				if (typeof(buttonsSs[button.@number]) == 'undefined') {
					continue;
				}
				
				// check button attributes
				var ctUpdatedAttributes		= 0;
				var	ctUpdatedProductCode	= 0;
				var updatedAttributes		= Array();
				var	updatedProductCode		= Array();
				for each (attr in button.attributes()) {
					if (attr != buttonsSs[button.@number].attribute(attr.name())) {
						updatedAttributes[ctUpdatedAttributes]			= Array();
						updatedAttributes[ctUpdatedAttributes]['from']	= buttonsSs[button.@number].attribute(attr.name());
						updatedAttributes[ctUpdatedAttributes]['to']	= buttonsDB[button.@number].attribute(attr.name());
						ctUpdatedAttributes++;
					}
				}
				paramDB = button.Action.(@workflow == 'WF_DoSale').Parameter.(@name == 'ProductCode');
				paramSs = buttonsSs[button.@number].Action.(@workflow == 'WF_DoSale').Parameter.(@name == 'ProductCode');
				if (paramDB.@value != paramSs.@value) {
					updatedProductCode['from']	= paramSs;
					updatedProductCode['to']	= paramDB;
					ctUpdatedProductCode++;
				}
				if (ctUpdatedAttributes > 0 || ctUpdatedProductCode > 0) {
					updateResult	+=	"BUTTON #:  " + rptFormat(button.@number, 27, " ") + "\n";
					updateResult	+=	"ATTR NAME   PREV VALUE    CURR VALUE  \n"
					for each (attr in updatedAttributes) {
						updateResult	+=	rptFormat(attr['from'].name(), 10, " ") + "  ";
						updateResult	+=	rptFormat(attr['from'], 12, " ") + "  ";
						updateResult	+=	rptFormat(attr['to'], 12, " ") + "\n";
					}
					
					if (ctUpdatedProductCode > 0) {
						updateResult	+=	"WF_DOSALE " + "  ";
						updateResult	+=	rptFormat(updatedProductCode['from'].@value, 12, " ") + "  ";
						updateResult	+=	rptFormat(updatedProductCode['to'].@value, 12, " ") + "\n";
					}
					
					updateResult	+=	"\n";
				}
			}


			if (ctInserted > 0 || ctRemoved > 0 || ctUpdatedAttributes > 0 || updateResult != '') {
				result	+=	"SCREEN #:  " + rptFormat(screen.@number, 27, "-") + "\n";
			
				if (ctInserted > 0) {
					result	+=	"------------BUTTONS ADDED-------------\n"
					result	+=	"BUTTON #  BUTTON TITLE                \n";	
					for each (button in insertedButtons) {
						result	+=	rptFormat(button.@number, 8, " ") + "  ";
						result	+=	rptFormat(button.@title, 20, " ") + "\n";
					}
				}

				if (ctRemoved > 0) {
					result	+=	"-----------BUTTONS REMOVED------------\n"
					result	+=	"BUTTON #  BUTTON TITLE               \n";	
					for each (button in removedButtons) {
						result	+=	rptFormat(button.@number, 8, " ") + "  ";
						result	+=	rptFormat(button.@title, 20, " ") + "\n";
					}
				}
				if (updateResult != '') {
					result	+=	"-----------BUTTONS UPDATED------------\n"
					result	+=	updateResult;
				}
				if (ctInserted > 0 || ctRemoved > 0 || updateResult != '') {
					result	+=	"\n";
				}
			}

		}
		
		// REPORT FOOTER
		API.SLog("LOGLEVL_DEBUG", "[WayBusinessUpdateReportKPA] Finish Report");
		result		+=	"======================================\n";
		result		+=	"\n\n";
		result		+=	"             END OF REPORT            \n"
		result		+=	"\n\n";
	} catch (e) {
		// error
		result = "ERROR: Processing differences " + e + "\n";
		API.SLog("LOGLEVL_WARNING", "[WayBusinessUpdateReportKPA] " + result);
	}

	return result;
}

function PMIX_With_Choices_Report(token, initialBusinessDay, finalBusinessDay, posList, PODType, sessionId)
{
	// Request PMIX report
	var pMixXMLReport = WayGetReport(sessionId, "PMIX", initialBusinessDay, null, PODType, posList, null, "", null, finalBusinessDay);
	return WayExecuteReportsExtension("PMIXCHOICES", "PMIX_CHOICES_ALL", token, initialBusinessDay, finalBusinessDay, posList, PODType, sessionId, pMixXMLReport);
}

function Product_Choices_Report(token, initialBusinessDay, finalBusinessDay, posList, PODType, sessionId)
{
	// Request PMIX report
	var pMixXMLReport = WayGetReport(sessionId, "PMIX", initialBusinessDay, null, PODType, posList, null, "", null, finalBusinessDay);
	return WayExecuteReportsExtension("PMIXCHOICES", "PMIX_CHOICES", token, initialBusinessDay, finalBusinessDay, posList, PODType, sessionId, pMixXMLReport);
}

function Product_Choice_Combinations_Report(token, initialBusinessDay, finalBusinessDay, posList, PODType, sessionId)
{
	return WayExecuteReportsExtension("PMIXCHOICES", "PMIX_COMBO", token, initialBusinessDay, finalBusinessDay, posList, PODType, sessionId, "");
}

function WaySiteTotalsJS(ctx, posID) { 
	ret =WayExecuteRemoteWF(ctx, posID, "WF_SiteTotals","isWay=1|msg=0", 250000);
} 

function WayCutoversJS(ctx, posID) { 
	ret =WayExecuteRemoteWF(ctx, posID, "WF_Mobilecutover","isWay=1|msg=0", 250000);
} 

/* NVS-7157 -log out and in RPS */ 
function WayRPSLogout(ctx, posID) { 
	ret =WayExecuteRemoteWF(ctx, posID, "WF_RPSLogout","PosNumber=RPS0300|runSilent=true", 25000);
	ret =WayExecuteRemoteWF(ctx, posID, "WF_RPSLogin","PosNumber=RPS0300|runSilent=true", 25000);
} 

function WS_operatorAndNodesAttributeValues(nodes, attributeName) 
{
	if(nodes == null || attributeName == null) {
		return false;
	}
	
	var retValue = false;
	var size = nodes.length();
	var iIndex;
	var flagUnique;
	var POSid;
	var POSid2;
	
	if(size == 1){
		var cmd = "nodes.@" + attributeName;
		var value = eval(cmd);	
		retValue = value;
	}
	else{
		retValue = true;
		for(var i = 0; i < size; i++) {
			flagUnique=true;
			POSid=eval("nodes[" + i + "]" + ".@id");
			for(iIndex=i+1; iIndex < size; iIndex++) {
				POSid2=eval("nodes[" + iIndex + "]" + ".@id");
				if(POSid==POSid2) {
					flagUnique=false;
					break;
				}
			}
			if(true==flagUnique) {
				var cmd = "nodes[" + i + "]" + ".@" + attributeName;
				var value = eval(cmd);
				if (value == false) {
					retValue = false;
					break;
				}
			}
		}
	}
	API.SLog("LOGLEVL_WARNING", "[WS_operatorAndNodesAttributeValues] - returning " + retValue);
	return retValue;
}

function WayDoReportConverttoNPSharpCallNew(SessionCtxID, ReportType, BusinessDate, Time, POD, POSList, ServiceList, JSName) {

switch (JSName){ 
	case "reportConsolidatedCash@reports.nps": 
		JSName = "ReportConsolidatedCash#USCashReports";
		break; 
	case "reportCashByPeriodStoreWide@reports.nps": 
		JSName = "ReportCashByPeriodStoreWide#USCashReports";
		break; 
	case "reportPMixByDateSW@reports.nps": 
		JSName = "ReportPMixByDateSW#USProductsReports";
		break; 
	case "reportSaleHourByDateSW@reports.nps": 
		JSName = "ReportSaleHourByDateSW#USHourlySalesReports";
		break; 
	case "reportSaleAveTckByDateSW@reports.nps": 
		JSName = "ReportSaleAveTckByDateSW#USHourlySalesReports";
		break;  
	case "reportPMixUPTByDateSW@reports.nps": 
		JSName = "ReportPMixUPTByDateSW#USProductsReports";
		break; 
	case "reportPMixUPTByHourSW@reports.nps": 
		JSName = "ReportPMixUPTByHourSW#USProductsReports";
		break; 
	case "reportEndDayStoreWide@reports.nps": 
		JSName = "ReportEndDayStoreWide#USCashReports";
		break;
	case "reportSosCsr@reports.nps": 
		JSName = "ReportSosCsr#USSosReports";
		break;
	case "reportSosMfy@reports.nps": 
		JSName = "ReportSosMfy#USSosReports";
		break;
	case "reportSosDTDiagnostic@reports.nps": 
		JSName = "ReportSosDTDiagnostic#USSosReports";
		break;
	case "reportSosFc@reports.nps": 
		JSName = "ReportSosFc#USSosReports";
		break;
	case "reportSosDTHourly@reports.nps": 
		JSName = "ReportSosDTHourly#USSosReports";
		break;
		}
	return WayDoReport(SessionCtxID, ReportType, BusinessDate, Time, POD, POSList, ServiceList, JSName, null, null);


}

/* NVS-8906 - DayOpen for Waystation */
function WayBOOpenAllPosConverttoNPSharpCall(SessionCtxID, BusinessDate, timeout, isForced, source, JSName, isConditional) {
    switch (JSName){ 
	    case "reportOpenCloseSW@reports.nps": 
		    JSName = "ReportOpenCloseSW#USRestaurantOpsReports";
		    break;
	}
	WayBOOpenAllPos(SessionCtxID, BusinessDate, timeout, isForced, source, JSName, isConditional);
}

/* NVS-8906 - DayClose for Waystation */
function WayBOCloseAllPosConverttoNPSharpCall(SessionCtxID, BusinessDate, timeout, isForced, source, JSName, isConditional) {

switch (JSName){ 
	case "reportOpenCloseSW@reports.nps": 
		JSName = "ReportOpenCloseSW#USRestaurantOpsReports";
		break;
		}
	WayBOCloseAllPos(SessionCtxID, BusinessDate, timeout, isForced, source, JSName, isConditional);
}
/* signed aut version 9-9076
 * authority id = coe
 * authority level = 40
 * authority name = NewPOS COE developer
 * group = npi
 * validity = 2010-04-18
 * signature type = slash_star
 * time stamp (GMT) = Wed Jan 31 01:28:44 2018
 * certificate = 393735312d37393437007e775eb6a7d6d606251124da1d988b04dcd03afcc060b2eeb7cdf75239a11833634cd710035af055ca9812dc6dad4912c8350010
 * =================================================================================================================================
*/
