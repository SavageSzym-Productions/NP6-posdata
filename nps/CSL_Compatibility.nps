/**
 * BusinessComponents.nps
 * This NPS file implements BusinessComponents.
 *
 * Copyright (C) 2008 McDonalds Corp. All rights reserved.
 *
 * $Source: /NP6/SRC/np61cvs/cvs/NP6/src/npCore/npBusComp/scripts/BusinessComponents.nps,v $
 * $Revision: 776 $
 * $Date: 2009-08-06 10:46:38 -0300 (qui, 06 ago 2009) $ (of revision)
 * $Author: rcaram $ (of revision)
 */

/* Variable used for version control */
CSL_COMPATIBILITY_VERSION = "$WCURL$:$WCREV$";

const KEY_VIEW="view";
const KEY_REMVIEW="remote_view";

const NPSRVTLOG_API_SET_STATE=1;
const NPSRVTLOG_CASHOUTLOCKTIMEOUT=23;
const NPSRVTLOG_PROVISIONTIMEOUT=24;
const ADPTLOG_INT_VALUE_FLAG=0x30000003;
const ADPTLOG_INT_VALUE_REASON=0x30000005;
const ADPTLOG_INT_MANAGER_MODE=0x30000006;
const ADPTLOG_INT_TIMEOUT_TYPE=0x30000012;

const SALE_STATUS_START=0;					// Default status (ready to sell, but no item sold so far)
const SALE_STATUS_IN_PROGRESS=1;			// Sale in progress, at least one item sold (OPEN_SALE)
const SALE_STATUS_ON_TOTAL=2;				// Sale totalized at least once
const SALE_STATUS_TOTALIZED=4;				// Sale in tendering process (TOTAL_SALE)
const SALE_STATUS_GRILLING=8;				// Sale in grill process (GRILL_IN_PROGRESS)
const SALE_STATUS_RECALLED=16;				// Sale with recall pressed
const SALE_STATUS_TENDERED=32;				// Sale tendered
const SALE_STATUS_STORED=64;				// Sale stored
const SALE_STATUS_PAID=128;					// Sale paid
const SALE_STATUS_CLOSED=256;				// Not used
const PROD_STATUS_HELD=512;					// Order in held condition - drive thru
const PROD_STATUS_SERVED=1024;				// Order served - drive thru
const SALE_STATUS_CURRENT_VOIDED=2048;		// Current sale voided
const SALE_STATUS_LAST_VOIDED=4096;			// Last sale voided
const SALE_STATUS_NON_ACCOUNTING=8192;		// Sale used for skipping cars
const UNDEFINED_SALE_STATUS=16384;			// undefined status
const SALE_STATUS_NUMBER=16384;				// last value

const POS_STA_INVALID=-1;		// Error gettng state
const POS_STA_CLOSED=0;			// POS closed
const POS_STA_OPENED=1;			// POS opened for business
const POS_STA_OPLOGGED=2;		// POS opened with a logged in operator
const POS_STA_BLOCKED=3;		// POS blocked for some reason
const POS_STA_BLOCKOP=4;		// POS blocked with a logged in operator */

const TAX=0;

const TA_NO_ACTION=0;
const TA_AUTH=0x100;			// The manager must allow the operation  (generic)
const TA_AUTH1=0x101;			// The manager must allow the operation  (tender)
const TA_AUTH2=0x102;			// The manager must allow the operation  (change)
const TA_DRAWER=0x200;			// Open the drawer
const TA_DISCOUNT=0x400;		// There is a discount
const TA_REDUCE=0x800;			// There is a discount
const TA_CASH=0x2000;			// Last tender was cash
const TA_CASHLESS=0x4000;		// Last tender was
const TA_CASHLESS_SIGN=0x8000;
const TA_COUPON=0x10000;

const NPSRVPRN_SND=0;				//!< Cmd to print a buffer
const NPSRVPRN_RCV=1;				//!< Cmd to get info from printer
const NPSRVPRN_SNDRCV=2;			//!< Cmd to print a buffer and receive a message
const NPSRVPRN_STATUS=3;			//!< Cmd to get printer status
const NPSRVPRN_QUERY=4;				//!< Cmd to query printer list
const NPSRVPRN_SET_PRINTER=5;		//!< Cmd to set current printer
const NPSRVPRN_SET_ALIAS=6;			//!< Cmd to set the alias of a printer of next NPSRVPRN_SNDRCV

const TANDEM_NONE=0;				//!< No tandem used	(REGULAR)
const TANDEM_FACE=1;				//!< Tandem FacexFace (TANDEM)
const TANDEM_INLINE=2;				//!< Tandem Inline (TANDEM_SPEAKER)
const TANDEM_PARALLEL=3;			//!< Tandem Parallel (TANDEM_PARALLEL)

const SWREASON_OK			= 0;
const SWREASON_COMMUNIC		= 1;	//!< Cannot communicate with POS
const SWREASON_INVBUSDAY	= 2;	//!< POS cannot be open in this business day or POS is already open in this business day
const SWREASON_ALREADYOPEN	= 3;	//!< POS is already opened
const SWREASON_ALREADYCLOSED= 4;	//!< POS is Already Closed
const SWREASON_NOTOPEN		= 5;	//!< Cannot close a POS that is not open or Blocked
const SWREASON_NOTCLOSED	= 6;	//!< Cannot open a POS that is not closed
const SWREASON_WFERROR		= 7;	//!< Error executing workflow
const SWREASON_OPLOGGED		= 8;	//!< Cannot open a POS that is logged unless it is in change day mode
const SWREASON_UNFINISHED	= 9;	//!< Cannot close due to unfinished orders
const SWREASON_SALEMODE		= 10;	//!< Cannot open/close  - sale mode
const SWREASON_OPENDRAWER	= 11;	//!< Cannot open/close - drawer open
const SWREASON_PAUSED		= 12;	//!< Cannot open/close - POS is paused
const SWREASON_OPENORDERS	= 15;	//!< Cannot open/close - There are open orders

if(!NUMBER_FORMAT) {
	var NUMBER_FORMAT = "#,###,##0.00";
}

/**
 * @brief This BC gives a discount in a sale
 *
 * @return rval - true if allowed to continue
 * @since 1.17-
 */
function PosChangeTaxMode_CSL(mode,flags)
{
	if(PosChangeTaxMode(mode)) {
		// Ends sale
		if(typeof(PosDoEndOfSaleJS) == "function") {
			PosDoEndOfSaleJS(false,flags,0);
		}
		else {
			PosDoEndOfSale(true);
		}
	}
	PosHandleCalculatorButton("clear");
	return(true);
}

/**
 * @brief This BC changes/resets an user password
 *
 * changeType: "CHANGE","RESET","RESETALL"
 * @return true if changed, false otherwise
 * @since 1.17-
 */
function PosChangeUserPassword_CSL(changeType) {
	var helper = new BusinessObjectHelper();
	var enableBOManagerPasswordManagement = helper.findParamInSectionWide("enableBOManagerPasswordManagement","Security");
	// Validates parameter
	if((undefined == changeType) || (null == changeType) || (changeType.length == 0)) {
		PosShowMessage("MSG_BC_INVRPTTYPE");
		return(JS_TRUE);
	}
	if ("true" == enableBOManagerPasswordManagement){
		PosShowMessage("MSG_BC_MANAGER_PASSWORD_CANNOT_CHANGE_PASSWORD_NP");
		return(false);
	}
	var bReset=false;
	var bResetAll=false;
	var nSecurityLevel=86; // Floor manager
	var sMessage="MSG_PROMPTID";
	// Sends a request to a dialog window to get the operator identification...
	if(changeType == "RESET") {
		bReset=true;
	}
	else {
		if(changeType == "RESETALL") {
			bReset=true;
			bResetAll=true;
		}
		else {
			nSecurityLevel=0;
			sMessage="MSG_PROMPTUSERID";
		}
	}
	var sIdtf="";
	var sPassword="";
	var nOperSecurityLevel=0;
	var hlp = new BusinessObjectHelper;
	if(bReset && !bResetAll) {
		// Show message
		if(!PosShowConfirmationMessage("MSG_RESETPSWD","Ok","Cancel")) {
			return(false);
		}
	}
	if(!bResetAll) {
		// Gets user id
		sIdtf = PosPromptAuthorization(sMessage);
		if(sIdtf.length == 0) {
			return(false);
		}
		// Gets user current password...
		sPassword = PosPromptAuthorization("MSG_PROMPTGETPSWD", true);
		if(sPassword.length == 0 || sPassword == ";") {
			PosShowMessage("MSG_INVPASSWD");
			return(false);
		}
		// Checks operator validity
		nOperSecurityLevel=hlp.getUserInfo(sIdtf,2);
		if(!hlp.validateUser(sIdtf,sPassword,nSecurityLevel)) {
			// Reset needs at least a floor manager
			PosShowMessage((bReset && (nOperSecurityLevel < 86))?"MSG_BC_RESETPSWDERR":"MSG_INVPASSWD");
			return(false);
		}
	}
	// Check type of request
	if(bReset) {
		// Sends a request to a dialog window to get the operator identification for whom to reset password ...
		sIdtf = PosPromptAuthorization("MSG_PROMPTRESETPSWD");
		if(sMessage.length == 0) {
			return(false);
		}
		var nUserSecurityLevel=hlp.getUserInfo(sIdtf,2);
		if(null == nUserSecurityLevel) {
			// Crew member information is not valid
			PosShowMessage("MSG_INVPASSWD");
			return(false);
		}
		// Check if crew member information is valid and get original password
		if(!bResetAll && (Number(nUserSecurityLevel) >= Number(nOperSecurityLevel))) {
			// manager with a lesser security level
			PosShowMessage("MSG_BC_RESETPSWDERR");
			return(false);
		}
		var sConfMsg=hlp.getSysMessage("MSG_BC_CONFRESETPSW",sIdtf,hlp.getUserInfo(sIdtf,1));
		if(!PosShowConfirmationMessage(sConfMsg,"Confirm Reset","Cancel")) {
			return(false);
		}
		sPassword="0";
	}
	else {
		// Sends a request to a dialog window to get new password...
		var sNewPassword = PosPromptAuthorization("MSG_PROMPTNEWPSWD", true);
		if(sNewPassword.length == 0 || sNewPassword == ";") {
			PosShowMessage("MSG_INVPASSWD");
			return(false);
		}
		// Only for Managers
		if(nOperSecurityLevel >= 86) {
			var numberPreviousNotAllowed = hlp.checkPreviousPasswordNotAllowed(sIdtf, sNewPassword);
			if(numberPreviousNotAllowed > 0) {
				PosShowMessage("MSG_BC_NEW_PASSWORD_ALREADY_USED", numberPreviousNotAllowed);
				return(false);
			}
		}
		// Sends a request to a dialog window to confirm new password...
		sPassword = PosPromptAuthorization("MSG_PROMPTRENEWPSWD", true);
		if(sPassword.length == 0 || sPassword == ";") {
			PosShowMessage("MSG_INVPASSWD");
			return(false);
		}
		if(sNewPassword != sPassword) {
			PosShowMessage("MSG_INVPASSWDMATCH");
			return(false);
		}
	}
	return(PosChangeUserPassword(sIdtf,sPassword));
}

/**
 * @brief This BC set a time punch for a user
 *
 * @return true if changed, false otherwise
 * @since 1.17-
 */
function PosTimePunch_CSL() {

	var hlp = new BusinessObjectHelper;
	// Gets user id
	var	sIdtf = PosPromptAuthorization("MSG_PROMPTUSERID");
	if(sIdtf.length == 0) {
		return(false);
	}
	// Gets user current password...
	var sPassword = PosPromptAuthorization("MSG_PROMPTGETPSWD", true);
	if(sPassword.length == 0) {
		return(false);
	}
	// Checks operator validity
	if(!hlp.validateUser(sIdtf,sPassword,0)) {
		// Reset needs at least a floor manager
		PosShowMessage("MSG_INVPASSWD");
		return(false);
	}
	return(PosTimePunch(sIdtf,sPassword));
}


/**
 * @brief This BC changes the title of a button according to a received propertu message
 *
 * @return true
 * @since 1.17-
 */
function PosChangeBtnTitle_CSL(btnNbr,msg,c1,c2,c3) {

	var hlp = new BusinessObjectHelper;
	var sConfMsg="title|"+hlp.getSysMessage(msg,c1,c2,c3);
	PosChangeButtonProperties(btnNbr,sConfMsg);
	return(true);
}

/**
 * @brief This BC shows checks if it is breakfast time (or a flag is set indicating that)
 *
 * @return true if breakfast time, false otherwise
 * @since 1.17-
 */
function PosIsBreakfastTime_CSL() {
	if(PosCheckSessionProperty("BreakfastTime","true")) {
		return(true);
	}
	if(PosCheckSessionProperty("BreakfastTime","false")) {
		return(false);
	}
	return(PosIsBreakfastTime(true));
}

/**
 * @brief This BC decrements the number of clicks for a given screen and shows a new screen if the number of clicks is zeroed
 *
 * @return true if breakfast time, false otherwise
 * @since 1.17-
 */
function PosCheckClicks_CSL(screenNbr) {

	var sNbrCliks=rootCtx.get("clicksOnScreen");
	if((undefined == sNbrCliks) || (null == sNbrCliks)) {
		// Not defined
		return(true);
	}
	var nbrClicks=Number(sNbrCliks)-1;
	if(nbrClicks >= 0) {
		rootCtx.set("clicksOnScreen",nbrClicks,1);
		if(0 == nbrClicks) {
			return(PosShowScreen(screenNbr));
		}
	}
	return(true);
}

/**
 * @brief This BC checks for open choice of a kind
 *
 * @return rval - true if allowed to continue
 * @since 1.17-
 */
function PosCheckChoices_CSL(choices) {
	if((choices != undefined) && (choices != null)) {
		var choiceArray=choices.split(",");
		if(choiceArray != null) {
			var i=0;
			for(;i < choiceArray.length; i++) {
				if(!PosCheckChoice(choiceArray[i])) {
					return(true);
				}
			}
		}
	}
	return(false);
}

/**
 * @brief This BC checks if a sale is empty
 *
 * @return true if empty
 * @since 1.17-
 */
function PosIsSaleEmpty_CSL() {

	var hlp=new BusinessObjectHelper;
	var curProdDescr=hlp.getSaleItem(0,0);
	return((curProdDescr != null)?false:true);
}

/**
 * @brief this BC performs remote KVS detach
 *
 * @return rval - true if allowed to continue
 * @since 1.17-
 */
function PosDetachKVSJS()
{
	// WHICH KVS?
	if (!PosChooseKVS("1", "MSG_BC_KVSDETACH", "MSG_BC_KVSDETACH_CONFIRM")) {
		return (false);
	}
	// DETACH KVS
	if (!PosDetachKVS(rootCtx.get("SELECTED_REMKVS"))) {
		return (false);
	}
	return true;

}
/**
 * @defgroup VIEWCONS View Consolidation
 * \{
 */

/**
 * @brief Constructor of ConsolidatedView class
 *
 * @param [in] view - View to consolidate in flat string format
 * @since 1.17-
 */
function ConsolidatedView (view) {
    this.view = new XML (view);		// Original view to be consolidated
}

/**
 * @brief Change Equivalent information
 *
 * @return
 * @since 1.17-
 */
ConsolidatedView.prototype.changeEquivalent = function () {
	var qtyViewItem=this.view.ItemView.length();
	var qtyEquivItem=this.view.EquivalentItemView.length();
	for(var j=0; j<qtyEquivItem; j++) {
		for(var i=0; i < qtyViewItem; i++) {
			if(this.view.ItemView[i].EquivalentCode.length() > 0) {
				if(this.view.EquivalentItemView[j].productCode.toString() == this.view.ItemView[i].EquivalentCode.toString()) {
					this.view.ItemView[i].productCode = this.view.EquivalentItemView[j].productCode;
					this.view.ItemView[i].description = this.view.EquivalentItemView[j].description;
					this.view.ItemView[i].longName = this.view.EquivalentItemView[j].longName;
					this.view.ItemView[i].dtName = this.view.EquivalentItemView[j].dtName;
					if(this.view.EquivalentItemView[j].displayOrder != 0) {
						if(this.view.EquivalentItemView[j].displayOrder < 0) {
							var a=this.view.ItemView[i].ProdIntId;
							if(a < 0) {
								a=this.view.ItemView[i].SaleLine;
							}
							this.view.ItemView[i].displayOrder=(this.view.EquivalentItemView[j].displayOrder+1)*-10000+a*10+((this.view.ItemView[i].isGrillLine || this.view.ItemView[i].ComponentsChange)?0:9);
						}
					}
					else {
						this.view.ItemView[i].displayOrder=-10000+this.view.ItemView[i].SaleLine*10+((this.view.ItemView[i].isGrillLine || this.view.ItemView[i].ComponentsChange)?0:9);
					}
				}
			}
		}
	}
}

/**
 * @brief Copy the view with the offers and promotion headers.
 */
ConsolidatedView.prototype.copyOffersAndPromotionHeaders = function (view) {
	if(this.view.SalesPanelHeader) {
		view.SalesPanelHeader.@l1 = this.view.SalesPanelHeader.@l1;
		view.SalesPanelHeader.@l2 = this.view.SalesPanelHeader.@l2;
	}
	
	if(this.view.Offers)		view.Offers = this.view.Offers;
	if(this.view.Customer)		view.Customer = this.view.Customer;
	if(this.view.Promotions)	view.Promotions = this.view.Promotions;
}

/**
 * @brief Consolidates a view, returning its value in flat string format.
 *
 * @return The consolidated view.
 * @since 1.17-
 */
ConsolidatedView.prototype.consolidate = function () {
	// Change equivalent
	this.changeEquivalent();
    // Create array with sale items
    var newViewArray = this.detachChoice ();
    // Create the consolidated view
    var sortedView = this.createConsolidation (newViewArray);
	// Sort the Consolidated View
    this.sortView (sortedView);
    // Copies attributes from original view
    this.copyViewAttributes (sortedView);
	//since NPS-11233
	//Copies CustomInfo
	this.copyCustomInfo(sortedView);
	//
	this.copyItemTenderView(sortedView);

	this.copyOffersAndPromotionHeaders(sortedView);

    return sortedView.toXMLString();
}

/**
 * @brief Copies CustomInfo from internal view to a provided view.
 *
 * @param [in] view 
 * @since NPS-11233
 */
ConsolidatedView.prototype.copyCustomInfo = function (view) {

	// CustomInfo
	var qtyCustomInfo=this.view.CustomInfo.Info.length();
	
	for(var i=0; i < qtyCustomInfo; i++) {
		view.CustomInfo.Info[i] = "";
		for (var attr in this.view.CustomInfo.Info[i].@*) {
			view.CustomInfo.Info[i].@[this.view.CustomInfo.Info[i].@*[attr].name()] = this.view.CustomInfo.Info[i].@*[attr];
		}
	}
}

/**
 * @brief Copies attributes from internal view to a provided view.
 *
 * @param [in] view - View to add attributes to
 * @since 1.17-
 */
ConsolidatedView.prototype.copyViewAttributes = function (view) {
    for (var attr in this.view.@*) {
	view.@[this.view.@*[attr].name()] = this.view.@*[attr];
    }
}

/**
 * @brief
 *
 * @param
 * @since 1.17-
 */
ConsolidatedView.prototype.copyItemTenderView = function (view) {
	var qtyItemTenderView = this.view.ItemTenderView.length();
	for(var i=0;i<qtyItemTenderView;i++){
		view.ItemTenderView[i]="";
		view.ItemTenderView[i].kind = this.view.ItemTenderView[i].kind;
		view.ItemTenderView[i].description = this.view.ItemTenderView[i].description;
		view.ItemTenderView[i].code = this.view.ItemTenderView[i].code;
		view.ItemTenderView[i].qty = this.view.ItemTenderView[i].qty;
		view.ItemTenderView[i].value = this.view.ItemTenderView[i].value;
		view.ItemTenderView[i].fiscalIndex = this.view.ItemTenderView[i].fiscalIndex;
		view.ItemTenderView[i].taxOption = this.view.ItemTenderView[i].taxOption;
		view.ItemTenderView[i].cat = this.view.ItemTenderView[i].cat;
		view.ItemTenderView[i].fValue = this.view.ItemTenderView[i].fValue;
		view.ItemTenderView[i].pValue = this.view.ItemTenderView[i].pValue;
		view.ItemTenderView[i].srcPOSId = this.view.ItemTenderView[i].srcPOSId;
		view.ItemTenderView[i].subtotalOpt = this.view.ItemTenderView[i].subtotalOpt;
		view.ItemTenderView[i].discMode = this.view.ItemTenderView[i].discMode;
		view.ItemTenderView[i].discRate = this.view.ItemTenderView[i].discRate;
		if(this.view.ItemTenderView[i].drawer.length() > 0) {
			view.ItemTenderView[i].drawer = this.view.ItemTenderView[i].drawer;
		}
		view.ItemTenderView[i].skim = this.view.ItemTenderView[i].skim;
		view.ItemTenderView[i].srcTender = this.view.ItemTenderView[i].srcTender;
		for each (var item in this.view.ItemTenderView[i].SourceTenders.SourceTender) {
			// assuming that the first entry is always the last tender (push_back was used to store tender in the vector)
			view.ItemTenderView[i].SourceTender = ""+item.@sourceCode;
			break;
		}
		view.ItemTenderView[i].rounding = this.view.ItemTenderView[i].rounding;
		view.ItemTenderView[i].tenderRoundAdj = this.view.ItemTenderView[i].tenderRoundAdj;
		view.ItemTenderView[i].roundConfTender = this.view.ItemTenderView[i].roundConfTender;
		view.ItemTenderView[i].roundConfChange = this.view.ItemTenderView[i].roundConfChange;
		if(!PosCheckSessionProperty("POD","HOT") && !PosCheckSessionProperty("POD","CSO"))
		{
			view.ItemTenderView[i].currencySymbol = this.view.ItemTenderView[i].currencySymbol;
		}
	}
}

/**
 * @brief
 *
 * @param
 * @since 1.23 - NPS-8922
 */
ConsolidatedView.prototype.copyItemFeeView = function (view) {
	var qtyFee = this.view.Fee.length();
	for(var i=0; i<qtyFee; i++){
		view.Fee[i]					= "";
		view.Fee[i].@code 			= this.view.Fee[i].@code;
		view.Fee[i].@value 			= this.view.Fee[i].@value;
		view.Fee[i].@quantity 		= this.view.Fee[i].@quantity;
		view.Fee[i].@quantityPromo 	= this.view.Fee[i].@quantityPromo;
		view.Fee[i].@description 	= this.view.Fee[i].@description;
		var qtyFeeTaxChain = this.view.Fee[i].taxChain.length();
		if(qtyFeeTaxChain >= 1){
			for(var j=0; j<qtyFeeTaxChain; j++){
				view.Fee[i].taxChain[j]     = "";
				view.Fee[i].taxChain[j].@id = this.view.Fee[i].taxChain[j].@id;
				var qtyFeeTax = this.view.Fee[i].taxChain[j].tax.length();
				if(qtyFeeTax >= 1){
					for(var k=0; k<qtyFeeTax; k++){
						view.Fee[i].taxChain[j].tax[k] 						= "";
						view.Fee[i].taxChain[j].tax[k].@id 					= this.view.Fee[i].taxChain[j].tax[k].@id;
						view.Fee[i].taxChain[j].tax[k].@rate 				= this.view.Fee[i].taxChain[j].tax[k].@rate;
						view.Fee[i].taxChain[j].tax[k].@type				= this.view.Fee[i].taxChain[j].tax[k].@type;
						view.Fee[i].taxChain[j].tax[k].@baseAmt				= this.view.Fee[i].taxChain[j].tax[k].@baseAmt;
						view.Fee[i].taxChain[j].tax[k].@amount				= this.view.Fee[i].taxChain[j].tax[k].@amount;
						view.Fee[i].taxChain[j].tax[k].@calculationSequence	= this.view.Fee[i].taxChain[j].tax[k].@calculationSequence;
					}
				}
			}
		}
	}
}


/**
 * @brief Detaches choices from a given view.
 *
 * @return Returns a view with choices put outside value meals.
 * @since 1.17-
 */
ConsolidatedView.prototype.detachChoice = function () {
	// Create array with sale items
	var itemChoice=new Array();
	var qtyPromoLevelZero=0;
	var qtyLevelZero=0;
	var qtyViewItem=this.view.ItemView.length();
	var newViewArray = new Array ();
	var isParentChoice=false;

	for(var i=0; i < qtyViewItem; i++) {
		var item=this.view.ItemView[i];
		lastItemCode=item.itemCode;
		if(Number(item.level) == 0) {
			qtyLevelZero=Number(item.quantity);
			qtyPromoLevelZero=Number(item.quantityPromo);
		}
		// Verify Choice
		if((Number(item.level) > 0) && (Number(item.prodAction) == 3)) {
			if(Number(item.productType) != 4) {
				// This is Choice
				var levelChoice=Number(item.level);
				item.level=0;
				item.levelChoice = levelChoice;
				itemChoice.push({item:XML(item)});
				for(var j=i+1; j < qtyViewItem; j++) {
					var itemChoiceB=this.view.ItemView[j];
					if(itemChoiceB.level > levelChoice) {
						itemChoiceB.isChoiceChild = true;
						itemChoiceB.level-=levelChoice;
						itemChoiceB.quantity*=item.quantity;
					}
					else {
						break;
					}
				}
				// calculate qty after child
				item.quantityPromo=qtyPromoLevelZero*item.quantity;
				item.quantity*=qtyLevelZero;
				isParentChoice=true;
			}
		}
		else if (item.isChoiceChild == true && isParentChoice == true) {
			// This item belongs to the Choice
			delete item.isChoiceChild;
			itemChoice.push({item:XML(item)});
		}
		else {
			// This is not Choice
			newViewArray.push({item:XML(item)});
			isParentChoice=false;
		}
	}
    // Put choice items at array's end
    for(var i=0; i < itemChoice.length; i++) {
		var iInd=newViewArray.length;
		newViewArray.push({item:XML(itemChoice[i].item)});
    }
    return newViewArray;
}

/**
 * @brief Create a consolidated view.
 *
 * @param [in] viewArray - Array representing a view
 * @since 1.17-
 */
ConsolidatedView.prototype.createConsolidation = function (viewArray) {
	//Recreate Original XML
	var auxXML=new XML("<View/>");
	var szViewArray=new Array();
	var szAux="";
	var i=0;
	// Create  line array with the same iItemCode
	while(i < viewArray.length) {
		var ItemView=viewArray[i].item;
		var iItemCode = ItemView.itemCode.toString();
		szAux =szAux + ItemView.productCode + ItemView.grilledQuantity;
		var count=1;
		for(var j=i+1; j < viewArray.length; j++) {
			var nextItemView=viewArray[j].item;
			if((iItemCode!=nextItemView.itemCode) || (nextItemView.level==0)){
				break;
			}
			count++;
			szAux=szAux + nextItemView.productCode + nextItemView.grilledQuantity;
		}
		for(var k=0;k<count;k++) {
			szViewArray.push({id:String(i), item:String(szAux)});
		}
		szAux="";
		i=j;
	}
	var bItemChecked = new Array(szViewArray.length);

	var iInd = -1;
	var count_iInd = 1;
	for(var i = 0; i < szViewArray.length; i++) {
		var ItemArray = szViewArray[i].item;

		if(bItemChecked[i] == "true"){
			continue;
		}else{
			bItemChecked[i] = "true";
			var ItemXML=XML(viewArray[i].item);
			auxXML.ItemView+=ItemXML;
			iInd += count_iInd;
			count_iInd = 1;
			var a=i+1;
			while((a < szViewArray.length) && (ItemXML.itemCode==viewArray[a].item.itemCode) && (Number(viewArray[a].item.level) != 0) && (bItemChecked[a] != "true")){
				var ItemXML2=XML(viewArray[a].item);
				auxXML.ItemView+=ItemXML2;
				bItemChecked[a] = "true";
				count_iInd++;
				a++;
			}
		}
		if(auxXML.ItemView.PromotionApplied)	// promotions should not be consolidated
			continue;

		for(var j = i+1; j < szViewArray.length; j++) {

			if((ItemArray == szViewArray[j].item) && (bItemChecked[j] != "true")) {
				bItemChecked[j] = "true";
				// Item already used in table
				szViewArray[j].item = -j;

				var ItemXML=XML(viewArray[j].item);

				if(ItemXML.level == 0) {
					auxXML.ItemView[iInd].quantity = Number (auxXML.ItemView[iInd].quantity)
					+ Number (ItemXML.quantity);

					auxXML.ItemView[iInd].quantityPromo = Number (auxXML.ItemView[iInd].quantityPromo)
					+ Number (ItemXML.quantityPromo);

					auxXML.ItemView[iInd].quantityItemPromo = Number (auxXML.ItemView[iInd].quantityItemPromo)
					+ Number (ItemXML.quantityItemPromo);

					var sizePromoDest = auxXML.ItemView[iInd].promo.length();
					var sizePromoOrig = ItemXML.promo.length();
						
					if(sizePromoDest > sizePromoOrig)
					{
						// Destination promo is greater than origin promo
						for(var a=0;a<sizePromoDest;a++)
						{
							var id = auxXML.ItemView[iInd].promo[a].id;
							
							for(var b=0;b<sizePromoOrig;b++)
							{
								if(id = ItemXML.promo[b].id) {
									auxXML.ItemView[iInd].promo[a] = Number(auxXML.ItemView[iInd].promo[a]) + Number(ItemXML.promo[b]);
								}
							}
						}
					}
					else 
					{
						// Origin promo is greater than destination promo
						for(var a=0;a<sizePromoOrig;a++)
						{							
							var id = ItemXML.promo[a].id;
							var found = false;
							for(var b=0;b<sizePromoDest;b++)
							{
								if(id = auxXML.ItemView[iInd].promo[b].id) {
									found = true;
									auxXML.ItemView[iInd].promo[b] = Number(auxXML.ItemView[iInd].promo[b]) + Number(ItemXML.promo[a]);
								}
							}
							if(!found)
							{
								var promoxml = '<promo id="' + id + '">' + Number(ItemXML.promo[a]) + '</promo>';
								var promo = new XML(promoxml);
								auxXML.ItemView[iInd].appendChild(promo);
								sizePromoDest++;
							}
						}
					}
										
					var value1 = new BigDecimal(auxXML.ItemView[iInd].unitPrice);
					var value2 = new BigDecimal(ItemXML.unitPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].unitPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].netUnitPrice);
					var value2 = new BigDecimal(ItemXML.netUnitPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].netUnitPrice = value1.toString();;

					var value1 = new BigDecimal(auxXML.ItemView[iInd].unitTax);
					var value2 = new BigDecimal(ItemXML.unitTax);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].unitTax = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].totalPrice);
					var value2 = new BigDecimal(ItemXML.totalPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].totalPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].netTotalPrice);
					var value2 = new BigDecimal(ItemXML.netTotalPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].netTotalPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].totalTax);
					var value2 = new BigDecimal(ItemXML.totalTax);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].totalTax = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].ADTotalPrice);
					var value2 = new BigDecimal(ItemXML.ADTotalPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].ADTotalPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].ADNetTotalPrice);
					var value2 = new BigDecimal(ItemXML.ADNetTotalPrice);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].ADNetTotalPrice = value1.toString();

					var value1 = new BigDecimal(auxXML.ItemView[iInd].ADTotalTax);
					var value2 = new BigDecimal(ItemXML.ADTotalTax);
					value1 = value1.add(value2);
					auxXML.ItemView[iInd].ADTotalTax = value1.toString();
				}
			}
		}
	}
	return auxXML;
}

/**
 * @brief Sorts a consolidated view
 *
 * @param [in, out] newViewCons - Consolidated view to sort, as a XML object
 * @since 1.17-
 */
ConsolidatedView.prototype.sortView = function (newViewCons) {
    var flagdisplayOrder=false;
    var displayOrderArray = new Array();
    var compfunc = function (a, b) {
	return (Number(a.id) - Number(b.id));
    };
    for each (var item in newViewCons.ItemView) {
	if (Number(item.level) == 0) {
	    displayOrderArray.push({id:Number(item.displayOrder)});
	}
    }
    // Sort displayOrder Array
    displayOrderArray.sort (compfunc)
    //Seach duplicate displayOrder
    for(var i=1; i < displayOrderArray.length; i++) {
	if(displayOrderArray[i-1].id == displayOrderArray[i].id){
	    // There is duplicate displayOrder
	    flagdisplayOrder=true;
	    break;
	}
    }

    // Create array with sale items
    var newViewArray = new Array();
    var key = "000000000";
    var displayOrder = "000000000";
    var productCode = "";
    for each (var item in newViewCons.ItemView) {
	if (Number(item.level) == 0) {
	    key = API.formatNumber(Number(item.displayOrder), "000000000", 9)
	}
	displayOrder = API.formatNumber(Number(item.displayOrder), "000000000", 9)
	if (flagdisplayOrder==true) {
	    productCode = API.formatNumber(Number(item.productCode), "00000", 5)
	}
	// Create key to sort
	var aux = String(key) + Number(item.level) + String(displayOrder)+ String(productCode);
	newViewArray.push({id:String(aux), item:String(item)});
    }
    // Sort array with sale items
    newViewArray.sort (compfunc);

    var sortViewCons = new XML("<View/>");
    for(var i = 0; i < newViewArray.length; i++) {
	var ItemView = new XML(newViewArray[i].item);
	sortViewCons.ItemView+=ItemView;
    }

    newViewCons = sortViewCons;
}

/**
 * @brief Basic POS parameter getter
 *
 * @since 1.17- NPS-4867
 */
/* Properties */
if(typeof(BusinessObjectHelper) != "undefined") {
    Config.prototype.helper    = new BusinessObjectHelper (); // Helper for configuration check
}
else {
    Config.prototype.helper    = null;
}
Config.prototype.storewide = false;
Config.prototype.section   = null;

/* Methods */

/**
 * @brief Get a given parameter from configuration
 *
 * @param [in] param - Parameter name
 * @return The parameter value
 * @return null if parameter could not be obtained
 * @since 1.17- NPS-4867
 */
Config.prototype.getParameter = function (param) {
    var value = null;
    if(this.helper!=null) {
        if (this.storewide) {
            value = this.helper.findParamInSectionWide (param, this.section);
        }
        else {
            value = this.helper.findParamInSectionConfig (param, this.section);
        }
    }
    else {
        value = "";
    }
    return value;
}

/**
 * @brief Gets a boolean parameter from configuration
 *
 * @param [in] param - Parameter name
 * @return A boolean
 * @retval true of parameter is set
 * @retval false if parameter is not set
 * @since 1.17- NPS-4867
 */
Config.prototype.getBoolParameter = function (param) {
    var value = this.getParameter (param);
    if ((null != value) && ("ENABLED" == value.toUpperCase ())) {
	return true;
    }
    return false;
}

/**
 * @brief Constructor of Config class
 *
 * @since 1.17- NPS-4867
 */
function Config (section, storewide) {
    this.section   = section;
    this.storewide = storewide;
}

/**
 * @brief Abstraction for a Enhanced Value Meal Receipt view, used for CODs and sale's panel.
 *
 * @since 1.17- NPS-4867
 */
EVMRView.prototype.PC_VALUE_MEAL = 3;
EVMRView.prototype.PC_CHOICE = 4;

/**
 * @brief Creates a view with adjusted view items.
 *
 * @remarks This method will transfer all values of a choice to
 * its main product. However, it is done only if storedb is configured
 * properly.
 * @since 1.17- NPS-4867
 */
EVMRView.prototype.adjustViewItems = function () {
    var parentVm = -1;

    if (this.showAsSinglePrice ()) {
	for (var i = 0; i <  this.view().ItemView.length(); ++i) {
	    var _item = this.view().ItemView[i];
	    if (0 == this.view().ItemView[i].level) {
	        parentVm = -1;
		if (this.PC_VALUE_MEAL == this.view().ItemView[i].productType) {
		   // This the value meal
		   parentVm = i;
		}
	    }
	    else if ((this.view().ItemView[i].level > 0)
		//&& (this.PC_CHOICE != this.view().ItemView[i].productType)
		&& (3 == this.view().ItemView[i].prodAction) ) {

        	if(parentVm<0) {
		    //parent is not a value meal
		    continue;
		}

		// This is a choice
		
		var value;

		value = new BigDecimal(this.view().ItemView[parentVm].totalPrice);
		value = value.add(this.view().ItemView[i].totalPrice);
		this.view().ItemView[parentVm].totalPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].ADTotalPrice);
		value = value.add(this.view().ItemView[i].ADTotalPrice);
		this.view().ItemView[parentVm].ADTotalPrice = value.toString();
		
		value = new BigDecimal(this.view().ItemView[parentVm].ADNetTotalPrice);
		value = value.add(this.view().ItemView[i].ADNetTotalPrice);
		this.view().ItemView[parentVm].ADNetTotalPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].netTotalPrice);
		value = value.add(this.view().ItemView[i].netTotalPrice);
		this.view().ItemView[parentVm].netTotalPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].unitPrice);
		value = value.add(this.view().ItemView[i].unitPrice);
		this.view().ItemView[parentVm].unitPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].netUnitPrice);
		value = value.add(this.view().ItemView[i].netUnitPrice);
		this.view().ItemView[parentVm].netUnitPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].ADTotalTax);
		value = value.add(this.view().ItemView[i].ADTotalTax);
		this.view().ItemView[parentVm].ADTotalTax = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].unitTax);
		value = value.add(this.view().ItemView[i].unitTax);
		this.view().ItemView[parentVm].unitTax = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].totalTax);
		value = value.add(this.view().ItemView[i].totalTax);
		this.view().ItemView[parentVm].totalTax = value.toString();

		this.view().ItemView[i].totalPrice      = "0";
		this.view().ItemView[i].ADTotalPrice    = "0";
		this.view().ItemView[i].ADNetTotalPrice = "0";
		this.view().ItemView[i].ADTotalTax      = "0";
		this.view().ItemView[i].netTotalPrice   = "0";
		this.view().ItemView[i].unitPrice       = "0";
		this.view().ItemView[i].netUnitPrice    = "0";
		this.view().ItemView[i].unitTax         = "0";
		this.view().ItemView[i].totalTax        = "0";
	    }
	}
    }
}

/**
 * @brief Creates a view with adjusted view items.
 *
 * @remarks This method will transfer all values of a choice to
 * its main product. However, it is done only if storedb is configured
 * properly.
 * @since 1.18 - SDO-3214
 */
EVMRView.prototype.adjustViewItemsOverride = function () {
    var parentVm = -1;

    if (this.showAsSinglePrice ()) {
	for (var i = 0; i <  this.view().ItemView.length(); ++i) {
	    var _item = this.view().ItemView[i];
	    if (0 == this.view().ItemView[i].level) {
	        parentVm = -1;
		if (this.PC_VALUE_MEAL == this.view().ItemView[i].productType) {
		   // This the value meal
		   parentVm = i;
		}
	    }
	    else if ((this.view().ItemView[i].level > 0)
		&& (this.PC_CHOICE == this.view().ItemView[i].productType)
		&& (3 == this.view().ItemView[i].prodAction) ) {

        	if(parentVm<0) {
		    //parent is not a value meal
		    continue;
		}

		// This is a choice
		var value;

		value = new BigDecimal(this.view().ItemView[parentVm].totalPrice);
		value = value.add(this.view().ItemView[i].totalPrice);
		this.view().ItemView[parentVm].totalPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].ADTotalPrice);
		value = value.add(this.view().ItemView[i].ADTotalPrice);
		this.view().ItemView[parentVm].ADTotalPrice = value.toString();
		
		value = new BigDecimal(this.view().ItemView[parentVm].ADNetTotalPrice);
		value = value.add(this.view().ItemView[i].ADNetTotalPrice);
		this.view().ItemView[parentVm].ADNetTotalPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].netTotalPrice);
		value = value.add(this.view().ItemView[i].netTotalPrice);
		this.view().ItemView[parentVm].netTotalPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].unitPrice);
		value = value.add(this.view().ItemView[i].unitPrice);
		this.view().ItemView[parentVm].unitPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].netUnitPrice);
		value = value.add(this.view().ItemView[i].netUnitPrice);
		this.view().ItemView[parentVm].netUnitPrice = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].ADTotalTax);
		value = value.add(this.view().ItemView[i].ADTotalTax);
		this.view().ItemView[parentVm].ADTotalTax = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].unitTax);
		value = value.add(this.view().ItemView[i].unitTax);
		this.view().ItemView[parentVm].unitTax = value.toString();

		value = new BigDecimal(this.view().ItemView[parentVm].totalTax);
		value = value.add(this.view().ItemView[i].totalTax);
		this.view().ItemView[parentVm].totalTax = value.toString();

		this.view().ItemView[i].totalPrice      = "0";
		this.view().ItemView[i].ADTotalPrice    = "0";
		this.view().ItemView[i].ADNetTotalPrice = "0";
		this.view().ItemView[i].ADTotalTax      = "0";
		this.view().ItemView[i].netTotalPrice   = "0";
		this.view().ItemView[i].unitPrice       = "0";
		this.view().ItemView[i].netUnitPrice    = "0";
		this.view().ItemView[i].unitTax         = "0";
		this.view().ItemView[i].totalTax        = "0";

	    }
	}
    }
}


/**
 * @brief Constructor for EVMR view abstraction
 *
 * @param [in] view - View to work on
 * @since 1.17- - NPS-4867
 */
function EVMRView (view) {
    var _config = new Config ("ValueMealDisplay", true);
    var _view   = new XML (view);

    this.showAsSinglePrice = function () {
	return _config.getBoolParameter ("VMDisplay_ShowAsSinglePrice");
    }
    this.view = function () {
	return _view;
    }
    this.getStringView = function () {
	return _view.toXMLString ();
    }
}

/***************************************************************************/

/**
 * @brief Abstraction for a Simplified Value Meal view, used for CODs
 *
 * @since 1.17- NPS-4867
 */
EVMCODView.prototype.PC_VALUE_MEAL = 3;
EVMCODView.prototype.PC_CHOICE = 4;

EVMCODView.prototype.config        = {	       // Configuration parameters
    showAsSinglePrice: false,		       // Show VMs with single price
    showUpcharge     : false,		       // Show up-charge text
    upchargeText     : null,		       // Up-charge text to show
    suppressDiscount : false,		       // Suppress discount
    showDiscount     : false,		       // Shows discount text
    discountText     : null,		       // Discount text to show
    inlineText       : false		       // inLine text
};

/**
 * @brief Calculates price difference for a given item
 *
 * @param [in] item - Sold item
 * @return Float
 * @retval Calculated difference between its price and its reference price
 * @since 1.17-
 */
EVMCODView.prototype.priceDifference = function (item) {
    return parseFloat (item.totalPrice) - (parseFloat (item.referencePrice) * (parseFloat(item.quantity)-parseFloat(item.quantityPromo)));
}

/**
 * @brief Adjust the view for single price VMs
 *
 * @author RFL
 * @since 1.17- NPS-4867
 */
EVMCODView.prototype.adjustVMPrices = function () {
    var parentVm = null;

    for (var i = 0; i <  this.view().ItemView.length(); i++) {
        var item = this.view().ItemView[i];

	if ((0 == item.level) && (this.PC_VALUE_MEAL == item.productType)){
            // This the value meal
			item.totalVMPrice = new BigDecimal( item.totalPrice.toString() ).toString();
            parentVm = item;
        } else if ((0 == item.level) && (this.PC_VALUE_MEAL != item.productType) && (item.choiceLevel <= 0)){
            parentVm = null;

        } else if ((item.level > 0)
            //  && (this.PC_CHOICE != item.productType)
                && (3 == item.prodAction) ) {
	    // This is a choice
	    if(parentVm!=null) {
			var qty = (parseInt(item.quantity) - parseInt(item.quantityPromo)) * (parseInt(parentVm.quantity) - parseInt(parentVm.quantityPromo));
			var totalPrice = new BigDecimal(item.totalPrice);
			var refPrice = new BigDecimal(item.referencePrice);
			var price = refPrice.multiply(new BigDecimal(qty));
			var diff = totalPrice.subtract(price);
			
			var zero = new BigDecimal("0");
			var cmp = diff.compareTo(zero);

			var parentPrice = new BigDecimal(parentVm.totalVMPrice);
			if((cmp > 0 && this.config.showUpCharge)
			|| (cmp < 0 && (!this.config.suppressDiscount) && (this.config.showDiscount)))
			{
				parentPrice = parentPrice.add(price);
				item.choicePriceDiff = diff.toString();
			} else {
				parentPrice = parentPrice.add(totalPrice);
				item.choicePriceDiff = "0";
			}
			parentVm.totalVMPrice = parentPrice.toString();
			}
		}
    }
}

/**
 * @brief Creates a view with adjusted view items.
 *
 * @remarks This method will remove all value meals with open choices from the view
 * @since 1.17- NPS-4867
 */
EVMCODView.prototype.removeUnsolvedChoiceItems = function () {
    var itemCode=-1;
    var itemTotal=0;

    //removes all items containing unsolved choices from view
    for (var i = 0; i <  this.view().ItemView.length(); i++) {
        var _item = this.view().ItemView[i];
        if ((this.view().ItemView[i].level > 0)
                && (this.PC_CHOICE == this.view().ItemView[i].productType)
                && (3 == this.view().ItemView[i].prodAction) ) {

            itemCode = this.view().ItemView[i].itemCode;
            itemTotal=0;
            for (var j = 0; j <  this.view().ItemView.length(); ++j) {
                    //remove value from total
                    if(this.view().ItemView[j].itemCode==itemCode) {
                        itemTotal=(parseFloat (itemTotal) + parseFloat (this.view().ItemView[j].totalPrice));
                        delete this.view().ItemView[j];
                    }
            }
	    this.view().@totalAmount = ((new BigDecimal(this.view().@totalAmount)).subtract(new BigDecimal(itemTotal))).toString();

            //restart the search from beginning
            i=-1;
            continue;
        }
    }
}

/**
 * @brief Constructor for EVMCOD view abstraction
 *
 * @param [in] view - View to work on
 * @since 1.17- NPS-4867
 */
function EVMCODView (view__) {
    var _view   = new XML (view__);

    var config = new Config ("ValueMealDisplay", true);

	try {
		_view = checkPlainForCOD(_view, true);
		_view = checkSmartGrillForCOD(_view, true);
	} catch(ex) {
		API.SLog("LOGLEVL_DEBUG", "[onAdjustViewForCOD] error when calling the functions checkPlainForCOD and checkSmartGrillForCOD");
	}

    this.config.showAsSinglePrice = config.getBoolParameter ("VMDisplay_ShowAsSinglePrice");
    this.config.showUpCharge      = config.getBoolParameter ("VMDisplay_ShowUpCharge");
    this.config.upchargeText      = config.getParameter     ("VMDisplay_UpChargeText");
    this.config.showDiscount      = config.getBoolParameter ("VMDisplay_ShowDiscount");
    this.config.discountText      = config.getParameter     ("VMDisplay_DiscountText");
    this.config.inlineText        = config.getBoolParameter ("VMDisplay_InLineText");
    this.config.suppressDiscount  = config.getBoolParameter ("VMDisplay_SuppressDiscount");

    this.view = function () {
	return _view;
    }
    this.getStringView = function () {
	return _view.toXMLString ();
    }
}

/***************************************************************************/

/**
 * @brief This BC present the a info message if the show price is on
 *
 * @since 1.17-
 */
function PosShowMenuPriceDialogJS() {

	if(PosCheckSessionProperty("ISPRICEON","TRUE")) {
		if(!PosShowConfirmationMessage("MSG_UI_SHOWPRICETURNOFF","MSG_YES","MSG_NO")) {
			return(false);
		}
		/* Turn off the Show Prices */
		PosSetShowPrice();
		PosReloadCurrentScreen();
	}
}

/**
 * @brief
 *
 * @since 1.17-
 */
function PosRefreshButtonsJS() {
	PosRefreshButtons();
}


/**
 * @brief Helper function
 *
 * @param storeDbPath - path to the desired parameter in store-db
 * @param psoDbpath -path to the desired parameter in pos-db
 * @return the value of a configuration parameter
 * @since 1.17-
 */
function getConfigValue(storeDbPath, posDbPath)
{
	if(typeof(xmlStoreDB) =="undefined")
	{
		xmlStoreDB = new XML(API.getStoredb());
		xmlPosDB = new XML(API.getPosdb());
	}
	if(xmlStoreDB == null)
	{
		xmlStoreDB = new XML(API.getStoredb());
		xmlPosDB = new XML(API.getPosdb());
	}

	if(typeof(xmlPosDB) =="undefined")
	{
		xmlPosDB = new XML(API.getPosdb());
	}
	if(xmlPosDB == null)
	{
		xmlPosDB = new XML(API.getPosdb());
	}
 
	if(posDbPath!="" && posDbPath!=null) {
		var value = eval("xmlPosDB."+posDbPath);
		if(value+""!="") {
			return  value;
		}
	}
	return  eval("xmlStoreDB."+storeDbPath)+"";
 }

/** PUBLIC FUNCTION
 * @brief If exists an item with grillReason PLAIN, applies the logic of PLAIN, modifying first item to PLAIN item and removing the other items with the same grillReason
 *
 * @param xml xmlOrderView the item view that will be formatted
 * @param showPlain true to apply the logic of plain(dafault false)
 * @return formated xml
 * @since 1.18
 */
 function checkPlainForCOD(xmlOrderView, showPlain) {
	if(showPlain == true) {
		var level = 0;
		var plainApplied = false;

		for (var i = 0; i < xmlOrderView.ItemView.length(); i++) {
			item=xmlOrderView.ItemView[i];

			if(level != item.level){
				plainApplied = false;
			}
			level = item.level;
			if(item.grillReason == 1){
				if(plainApplied == false){
					item.quantity = 1;
					item.grilledQuantity = 1;
					item.componentDefaultQtd = 0;
					item.componentMinQtd = 0;
					item.componentMaxQtd = 1;
					item.specialModifiers = 0;
					item.productType = 6;
					item.familyGroup = 8;
					item.longName = PLAIN;
					item.dtName = PLAIN;
					item.formattedGrillQty = PLAIN;
					item.grillType = "PLAIN";
					item.description = PLAIN;
					item.name = PLAIN;
					item.displayOrder = 0;
					item.productCode = 0;

					plainApplied = true;
				}else{
					item=null;
					delete xmlOrderView.ItemView[i];
					i--;
				}
			}
		}
	}
	return xmlOrderView;
}

/** PUBLIC FUNCTION
 * @brief Removes components which contains grillReason USERACTION
 *
 * @param xml xmlOrderView the item view that will be formatted
 * @return formated xml
 * @param showSmartGrill true to show the smart grill, false to remove smart grill(dafault false)
 * @since 1.18
 */
 function checkSmartGrillForCOD(xmlOrderView, showSmartGrill) {
	if(showSmartGrill == true){
		for (var i = 0; i < xmlOrderView.ItemView.length(); i++) {
			item=xmlOrderView.ItemView[i];

			if(item.grillReason == 2){
				item=null;
				delete xmlOrderView.ItemView[i];
				i--;
			}
		}
	} else {
		for (var i = 0; i < xmlOrderView.ItemView.length(); i++) {
			item=xmlOrderView.ItemView[i];

			if(item.grillReason == 3){
				item=null;
				delete xmlOrderView.ItemView[i];
				i--;
			}
		}
	}
	return xmlOrderView;
}

function PosCheckPaperlessTime() {
	return executeBC("PosCheckPaperlessTime");
}
function PosCheckPaperlessOrder(orderKey) {
	return executeBC("PosCheckPaperlessOrder", [orderKey]);
}

function PosVoidPaperlessOrder(orderKey) {
	return executeBC("PosVoidPaperlessOrder", [orderKey]);
}

/** \} */
/* signed aut version 9-9076
 * authority id = builder
 * authority level = 10
 * authority name = NewPOS release level
 * group = npi
 * validity = 2010-04-18
 * signature type = slash_star
 * time stamp (GMT) = Fri Jan 26 16:27:04 2018
 * certificate = 393735312d3739343700e23cc4b5523266a0cbeb468a090acc5dad82ad81dcceb8644c69e3fcdb1b29df699af7310b8c9a529777e39106cc143cde360010
 * =============================================================================================================================
*/
