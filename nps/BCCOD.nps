/**
 * BCCOD.nps
 * This NPS file implements Customer Order Display (COD) Business Componentes .
 *
 * Copyright (c) 2005-2007 - Torex Retail PLC-
 *
 * $Source: /NewPOS/SRC/np61cvs/cvs/___Config61/Posdata/US/nps/BCCOD.nps,v $
 * $Revision: 1.5 $
 * $Date: 2007/08/03 17:13:48 $ (of revision)
  * $Author: cfernandes $ (of revision)
 */
/**viewFormatterCODJS
 *
 * @brief - Responsible for formatting the order view before being sent to the COD service.
 *          This function was initially created to support the feature Auto condiment (PLE-194) and
 *			can be used to support the new COD generation.
 * @return - sView - XML order view formatted.
 * @author - Kalil
 */
function viewFormatterCODJS(sView) {
	return removeACItems(sView);
}

/** removeACItems
 *
 * @brief - Removes all autocondiment items from the view, by design the AC items can not be displayed on the CODs. (Part of feature PLE-194 : Auto condiment)
 * @param - sView - Incoming view which may have AC items.
 * @return - XML order view without the AC items.
 * @author - Kalil
 */
function removeACItems(sView) {
 	if (sView == null) {
		return null;
	} else {
		try {
			API.dbg("BCCOD.nps:removeACItems() - Formatting view for the COD service....");
			var oView = new XML(sView);
			// Removes all the AC items from the given view.
			for (var j = 0; j < oView.ItemView.length(); ++j) {
				if (oView.ItemView[j].AutoCondiment=='true') {
					delete oView.ItemView[j];
				}
			}
			return oView.toXMLString();
		} catch(ex) {
			API.dbg("FATAL ERROR: Could not remove the auto-condiment items from the order view, due to: " + ex);
			return sView;
		}
	}
}

/**CODDedicatedModeJS
 *
 * @brief - This BC shows/changes the COD Mode dedicated between ON/OFF
 * Return - rval - true if allowed to continue
 */
function CODDedicatedModeJS(change)
{
const codMode=["true","false"];
const codModeButton=["bitmap|cod_on.png","bitmap|cod_off.png"];

	if(!PosNotATransactionInProgress(true)) {
		if("true"==change) { // Next
			PosShowMessage("MSG_BC_SALEPROG");
			return(true);
		}
	}
	var i=0;
	// Loops up to length because the very first time reportPOD might not be set!
	for(;i < codMode.length;i++) {
		if(PosCheckSessionProperty("dedicatedCOD",codMode[i])) {
			break;
		}
	}
	if("true"==change) { // Next
		i++;
	}
	if(i >=codMode.length) {
		i=0;
	}
	// either reportPOD was not set or changing from the last to the first...
	PosChangeButtonProperties(0,codModeButton[i]);
	if("true"==change) { // Next
		PosSetSessionProperty("dedicatedCOD",codMode[i],"true");
		PosSetSessionProperty("activatedCOD","0","true");
	}
	return(true);
}

/**ButtonCODJS
 *
 * @brief - This BC execute request of the COD button
 * Return - rval - true if allowed to continue
 * Updated due to the implementation of the NPS-8176 
 */
function ButtonCODJS(cod, productCode)
{
	if(PosCheckSessionProperty("dedicatedCOD","false")) {
		/* NPS-8176: Append a new condition */
		if ( !PosCheckSessionProperty("lastSelectedCOD","0") || PosCheckSessionProperty("activatedCOD","0")) {
			szIdCod = "COD "+cod;
			PosSetSessionProperty("activatedCOD",cod,"true");
			if (cod > 0){
				PosDisplayText("MSG_BC_ROUTEDCOD",1,true,false,szIdCod);
			} else {
				PosDisplayText("",1);
			}
			// NVS-216 - We need to configurate the selected COD (NVS-454)
			var cod_selected=rootCtx.get(szIdCod);
			PosSetSessionProperty("COD 0", cod_selected, "true");

			if(PosNotATransactionInProgress(true) == false) {
				PosSetCOD("0");
				var cod = rootCtx.get("activatedCOD");
				//NVS-1624 - COD was locked and changed by user request
				if (cod < 0)
				{
					var newCod = String(-cod);
					PosSetSessionProperty("activatedCOD",newCod,"true")
					PosDisplayText("MSG_BC_ROUTEDCOD",1,true,false,newCod);
					PosSetCOD("0");
				}				
				PosTakePicture();
			}
		}
		else {
			/* NPS-8176: Just sell the item if the product code is different from "0" */
			if ( productCode != "0" ) {
				PosDoSaleJS(productCode);
			}
		}
	}
	else {
		/* NPS-8176: Just sell the item if the product code is different from "0" */
		if ( productCode != "0" ) {
			PosDoSaleJS(productCode);
		}
	}
	return(true);
}

/**ChangeButtonCODJS
 *
 * @brief - This BC changes between COD and product picture
 * Return - rval - true if allowed to continue
 */
function ChangeButtonCODJS(cod, bitmap, bitmapdn)
{
const codButton=["bitmap|NO.png","bitmap|COD1.png","bitmap|COD2.png"];

	if((rootCtx.get("tandemEnable").toString() == "true") && (Number(rootCtx.get("DTStoreMode")) == TANDEM_FACE)) {
		// Face x Face
		return(false);
	}

	if(!PosCheckSessionProperty("workingMode","orderTaker|both")) {
		return(false);
	}
	var i=0;
	if(PosCheckSessionProperty("dedicatedCOD","false")) {
		if(PosCheckSessionProperty("activatedCOD","0")) {
			PosChangeButtonProperties(0,codButton[cod]);
		}
		else{
			if(bitmap==null) {
				return(false);
			}
			PosChangeButtonProperties(0,bitmap);
		}
	}
	else{
		if (bitmap==null){
			return(false);
		}
	}
	return(true);
}

/**PosIsSingleCODJS
 *
 * @brief - This function implements the BC,Business Component: <b>PosIsSingleCODJS</b>\n
 * Persistence:<b>Persisted</b>\n
 * This BC returns to workflow the inverse value of PosIsSingleCOD!\n
 * Should be called by the workflow sequence when the sale is finished.\n
 * Return - rval - True for successful execution or False for failure.
 */
function PosIsSingleCODJS()
{

	if((rootCtx.get("tandemEnable").toString() == "true") && (Number(rootCtx.get("DTStoreMode")) == TANDEM_FACE)) {
		// Face x Face
		return(false);
	}

	return(!PosIsSingleCOD());
}

/**PosIsCODSelectedJS
 *
 * @brief - This function implements the BC,Business Component: <b>PosIsCODSelectedJS</b>\n
 * Persistence:<b>Not Persisted</b>\n
 * This BC checks if a COD is selected!\n
 * Return - rval - True if COD is selected.
 * Important Note: To check face to face tandem configuration function onCheckforFaceToFaceTandem is added
 * 		   		   Please review its use in workflow.xml when you use this PosIsCODSelectedJS function
 */
function PosIsCODSelectedJS()
{
	//NVS-4744 - NextGen COD (SP8 Bundle 2)
	if(PosCheckSessionProperty("dedicatedCOD","false") && PosCheckSessionProperty("activatedCOD","0") && PosCheckSessionProperty("POD","DRIVE_THRU") && PosCheckSessionProperty("workingMode","orderTaker|both"))
	{
		if (PosCheckSessionProperty("defaultCOD","true") && !PosCheckSessionProperty("defaultCODNumber","0"))
		{
			cod = rootCtx.get("defaultCODNumber").toString();
			ButtonCODJS(cod, 0);
		}
		else
		{
		return(false);
		}
	}
	return(true);
}

 /**PosSetSelectedStateCODJS
 *
 * @brief - This function implements the BC,Business Component: <b>PosSetSelectedStateCODJS</b>\n
 * Persistence:<b>Not Persisted</b>\n
 * This BC sets the COD selected!\n
 */
function PosSetSelectedStateCODJS(CODId) {

	rootCtx.set("selectedCODState", CODId, false);
}

/**POSHideCODButtonIfIsSelectedJS
 *
 * @brief - This function implements the BC,Business Component: <b>POSHideCODButtonIfIsSelectedJS</b>\n
 * Persistence:<b>Not Persisted</b>\n
 * This BC hides the button if it's selected!\n
 */
function POSHideCODButtonIfIsSelectedJS(ButtonNumber, CODId) {
	var selectedStateCOD = rootCtx.get("selectedCODState");
	
	if(selectedStateCOD == CODId) {
		PosChangeButtonProperties(ButtonNumber, 'visible|false');
	} else {
		PosChangeButtonProperties(ButtonNumber, 'visible|true');
	}
}

/**PosSetCODStateJS
 *
 * @brief - This function implements the BC,Business Component: <b>PosSetCODStateJS</b>\n
 * Persistence:<b>Not Persisted</b>\n
 * This BC sets a state for the selected COD!\n
 */
function PosSetCODStateJS(status) {
	var selectedStateCOD = rootCtx.get("selectedCODState");

	if(selectedStateCOD == "0") {
		PosUpdateCODStatus(status);
	} else {
		var CODName = "COD " + selectedStateCOD;
		var CODNumber = rootCtx.get(CODName);

		PosUpdateCODStatus(status, CODNumber);
	}
}

/**PosShowCODMessage
 *
 * @brief - This function implements the BC,Business Component: <b>PosShowCODMessage</b>\n
 * Persistence:<b>Not Persisted</b>\n
 * This BC sends a message to COD, this message will be displayed on COD with the given timeout!\n
 */
function PosShowCODMessage(message, timeout) {
	PosHandleCODMessageArea(true, message, timeout);
}

/**PosHideCODMessage
 *
 * @brief - This function implements the BC,Business Component: <b>PosHideCODMessage</b>\n
 * Persistence:<b>Not Persisted</b>\n
 * This BC sends a command to hide the message to COD!\n
 */
function PosHideCODMessage() {
	PosHandleCODMessageArea(false);
}
/* signed aut version 9-9076
 * authority id = coe
 * authority level = 40
 * authority name = NewPOS COE developer
 * group = npi
 * validity = 2010-04-18
 * signature type = slash_star
 * time stamp (GMT) = Wed Jan 31 01:28:44 2018
 * certificate = 393735312d373934370074e5f0fbfec0586e00eed58099bad8d4cf791927f2b253f76a77e6138c94ba00df5b957337c88623892c20a1988d7554b81d0010
 * =================================================================================================================================
*/
